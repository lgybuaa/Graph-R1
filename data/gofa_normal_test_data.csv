prompt,ground_truth,summary,nodes_description,dataset,task
"Classify the relationship between two essays denoted as node10 and node9 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Introduces TPOT-RL for multi-agent cooperation using action-dependent features in non-Markovian environments, tested in robotic soccer.  
node1: Examines synaptic plasticity mechanisms in visual cortex neural processing.  
node2: Uses structured reachability analysis in MDPs to reduce complexity via Bayesian networks and constraints.  
node3: Describes CONVIS, a tool for neural network visualization and action-oriented control.  
node4: Details Kohonen network architecture with full input-neuron connectivity for self-organizing maps.  
node5: Analyzes parallel neural network simulation efficiency on MANNA, emphasizing communication structures.  
node6: Generalizes MDP models to expand dynamic programming algorithms for diverse decision scenarios.  
node7: Develops NeuroChess, a neural network learning chess via temporal difference and explanation-based methods.  
node8: Combines self-organizing feedforward with feedback synapses using layer-specific synaptic suppression.  
node9: Proposes LRTA*-based real-time search algorithms achieving O(n²) complexity for optimal pathfinding.  
node10: Designs PREENS, a parallel neurosimulator for distributed large-scale neural network execution.  
node11: Investigates temporal and probabilistic reasoning frameworks (title abstract incomplete).  
node12: Applies Markov games for multi-agent RL with Q-learning adaptations in adversarial settings.  
node13: Uses BP-SOM hybrid network to mitigate overfitting via combined backpropagation and SOM learning.  
node14: Implements collision avoidance for robots using reinforcement learning and discrete state encoding.  
node15: Explores self-organizing feature maps for typologically accurate structure formation.  
node16: Evaluates exploration strategies in Go learning to balance short/long-term performance gains.  
node17: Proposes a generic complexity measure for learning problems to assess tractability.  
node18: Introduces neural computation theory linking physics-based models and statistical methods.  
node19: Provides unified analysis for RL algorithms using value functions to prove convergence.  
node20: Extends prioritized sweeping for compact MDP representations via generalized Bayesian methods.  
node21: Compares action models vs. RL in hybrid systems, finding action models closer to human learning.  
node22: Advances policy iteration in DP using advantage functions without absolute utility calculations.  
node23: Presents Dyna architectures merging RL and planning for adaptive navigation and dynamic tasks.  
node24: Mitigates deductive learning redundancy via utilization filters to reduce search path repetition.  
node25: Maps high-dimensional data into 2D grids with cluster boundaries for structure visualization.  
node26: Connects exploration bonuses to dual control theory for adaptive Bayesian exploration-exploitation.  
node27: Studies machine learning techniques through checkers game analysis (abstract incomplete).  
node28: Visualizes high-dimensional clusters using incremental grid-growing neural networks.  
node29: Analyzes domain theory correction in EBL, addressing knowledge deficiencies during learning.

the connection relationship among the nodes mentioned:
 <node0, node12>,<node1, node8>,<node2, node6>,<node3, node10>,<node4, node8>,<node4, node18>,<node5, node8>,<node6, node11>,<node6, node12>,<node6, node19>,<node6, node22>,<node6, node23>,<node6, node26>,<node7, node27>,<node8, node10>,<node8, node13>,<node8, node14>,<node8, node25>,<node8, node28>,<node11, node23>,<node12, node27>,<node13, node17>,<node14, node23>,<node15, node28>,<node16, node27>,<node18, node28>,<node20, node23>,<node21, node23>,<node23, node29>,<node24, node27>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","No, they do not have citation relationships","

node0: Introduces TPOT-RL for multi-agent cooperation using action-dependent features in non-Markovian environments, tested in robotic soccer.  
node1: Examines synaptic plasticity mechanisms in visual cortex neural processing.  
node2: Uses structured reachability analysis in MDPs to reduce complexity via Bayesian networks and constraints.  
node3: Describes CONVIS, a tool for neural network visualization and action-oriented control.  
node4: Details Kohonen network architecture with full input-neuron connectivity for self-organizing maps.  
node5: Analyzes parallel neural network simulation efficiency on MANNA, emphasizing communication structures.  
node6: Generalizes MDP models to expand dynamic programming algorithms for diverse decision scenarios.  
node7: Develops NeuroChess, a neural network learning chess via temporal difference and explanation-based methods.  
node8: Combines self-organizing feedforward with feedback synapses using layer-specific synaptic suppression.  
node9: Proposes LRTA*-based real-time search algorithms achieving O(n²) complexity for optimal pathfinding.  
node10: Designs PREENS, a parallel neurosimulator for distributed large-scale neural network execution.  
node11: Investigates temporal and probabilistic reasoning frameworks (title abstract incomplete).  
node12: Applies Markov games for multi-agent RL with Q-learning adaptations in adversarial settings.  
node13: Uses BP-SOM hybrid network to mitigate overfitting via combined backpropagation and SOM learning.  
node14: Implements collision avoidance for robots using reinforcement learning and discrete state encoding.  
node15: Explores self-organizing feature maps for typologically accurate structure formation.  
node16: Evaluates exploration strategies in Go learning to balance short/long-term performance gains.  
node17: Proposes a generic complexity measure for learning problems to assess tractability.  
node18: Introduces neural computation theory linking physics-based models and statistical methods.  
node19: Provides unified analysis for RL algorithms using value functions to prove convergence.  
node20: Extends prioritized sweeping for compact MDP representations via generalized Bayesian methods.  
node21: Compares action models vs. RL in hybrid systems, finding action models closer to human learning.  
node22: Advances policy iteration in DP using advantage functions without absolute utility calculations.  
node23: Presents Dyna architectures merging RL and planning for adaptive navigation and dynamic tasks.  
node24: Mitigates deductive learning redundancy via utilization filters to reduce search path repetition.  
node25: Maps high-dimensional data into 2D grids with cluster boundaries for structure visualization.  
node26: Connects exploration bonuses to dual control theory for adaptive Bayesian exploration-exploitation.  
node27: Studies machine learning techniques through checkers game analysis (abstract incomplete).  
node28: Visualizes high-dimensional clusters using incremental grid-growing neural networks.  
node29: Analyzes domain theory correction in EBL, addressing knowledge deficiencies during learning.","node0:Academic paper with title and abstract: Team-Partitioned, Opaque-Transition Reinforcement Learning: In this paper, we present a novel multi-agent learning paradigm called team-partitioned, opaque-transition reinforcement learning (TPOT-RL). TPOT-RL introduces the concept of using action-dependent features to generalize the state space. In our work, we use a learned action-dependent feature space. TPOT-RL is an effective technique to allow a team of agents to learn to cooperate towards the achievement of a specific goal. It is an adaptation of traditional RL methods that is applicable in complex, non-Markovian, multi-agent domains with large state spaces and limited training opportunities. Multi-agent scenarios are opaque-transition, as team members are not always in full communication with one another and adversaries may affect the environment. Hence, each learner cannot rely on having knowledge of future state transitions after acting in the world. TPOT-RL enables teams of agents to learn effective policies with very few training examples even in the face of a large state space with large amounts of hidden state. The main responsible features are: dividing the learning task among team members, using a very coarse, action-dependent feature space, and allowing agents to gather reinforcement directly from observation of the environment. TPOT-RL is fully implemented and has been tested in the robotic soccer domain, a complex, multi-agent framework. This paper presents the algorithmic details of TPOT-RL as well as empirical results demonstrating the effectiveness of the developed multi-agent learning approach with learned features.
node1:Academic paper with title and abstract: Theory of Synaptic Plasticity in Visual Cortex: 
node2:Academic paper with title and abstract: Structured Reachability Analysis for Markov Decision Processes: Recent research in decision theoretic planning has focussed on making the solution of Markov decision processes (MDPs) more feasible. We develop a family of algorithms for structured reachability analysis of MDPs that are suitable when an initial state (or set of states) is known. Using compact, structured representations of MDPs (e.g., Bayesian networks), our methods, which vary in the tradeoff between complexity and accuracy, produce structured descriptions of (estimated) reachable states that can be used to eliminate variables or variable values from the problem description, reducing the size of the MDP and making it easier to solve. One contribution of our work is the extension of ideas from GRAPHPLAN to deal with the distributed nature of action representations typically embodied within Bayes nets and the problem of correlated action effects. We also demonstrate that our algorithm can be made more complete by using k-ary constraints instead of binary constraints. Another contribution is the illustration of how the compact representation of reachability constraints can be exploited by several existing (exact and approximate) abstraction algorithms for MDPs.
node3:Academic paper with title and abstract: CONVIS: Action Oriented Control and Visualization of Neural Networks Introduction and Technical Description: 
node4:Academic paper with title and abstract: Figure 1: The architecture of a Kohonen network. Each input neuron is fully connected with: 
node5:Academic paper with title and abstract: Figure 8: time complexity of unit parallelism measured on MANNA theoretical prediction #nodes N time: Our experience showed us that exibility in expressing a parallel algorithm for simulating neural networks is desirable even if it is not possible then to obtain the most efficient solution for any single training algorithm. We believe that the advantages of a clear and easy to understand program predominates the disadvantages of approaches allowing only for a specific machine or neural network algorithm. We currently investigate if other neural network models are worth while being parallelized, and how the resulting parallel algorithms can be composed of a few common basic building blocks and the logarithmic tree as efficient communication structure. 1 2 4 8 2 500 connections 40 000 connections [1] D. Ackley, G. Hinton, T. Sejnowski: A Learning Algorithm for Boltzmann Machines, Cognitive Science 9, pp. 147-169, 1985 [2] B. M. Forrest et al.: Implementing Neural Network Models on Parallel Computers, The computer Journal, vol. 30, no. 5, 1987 [3] W. Giloi: Latency Hiding in Message Passing Architectures, International Parallel Processing Symposium, April 1994, Cancun, Mexico, IEEE Computer Society Press [4] T. Nordstrm, B. Svensson: Using And Designing Massively Parallel Computers for Artificial Neural Networks, Journal Of Parallel And Distributed Computing, vol. 14, pp. 260-285, 1992 [5] A. Kramer, A. Vincentelli: Efficient parallel learning algorithms for neural networks, Advances in Neural Information Processing Systems I, D. Touretzky (ed.), pp. 40-48, 1989 [6] T. Kohonen: Self-Organization and Associative Memory, Springer-Verlag, Berlin, 1988 [7] D. A. Pomerleau, G. L. Gusciora, D. L. Touretzky, H. T. Kung: Neural Network Simulation at Warp Speed: How We Got 17 Million Connections Per Second, IEEE Intern. Conf. Neural Networks, July 1988 [8] A. Rbel: Dynamic selection of training patterns for neural networks: A new method to control the generalization, Technical Report 92-39, Technical University of Berlin, 1993 [9] D. E. Rumelhart, D. E. Hinton, R. J. Williams: Learning internal representations by error propagation, Rumelhart & McClelland (eds.), Parallel Distributed Processing: Explorations in the Microstructure of Cognition, vol. I, pp. 318-362, Bradford Books/MIT Press, Cambridge, MA, 1986 [10] W. Schiffmann, M. Joost, R. Werner: Comparison of optimized backpropagation algorithms, Proc. of the European Symposium on Artificial Neural Networks, ESANN '93, Brussels, pp. 97-104, 1993 [11] J. Schmidhuber: Accelerated Learning in BackPropagation Nets, Connectionism in perspective, Elsevier Science Publishers B.V. (North-Holland), pp 439-445,1989 [12] M. Taylor, P. Lisboa (eds.): Techniques and Applications of Neural Networks, Ellis Horwood, 1993 [13] M. Witbrock, M. Zagha: An implementation of backpropagation learning on GF11, a large SIMD parallel computer, Parallel Computing, vol. 14, pp. 329-346, 1990 [14] X. Zhang, M. Mckenna, J. P. Mesirov, D. L. Waltz: The backpropagation algorithm on grid and hypercube architectures, Parallel Computing, vol. 14, pp. 317-327, 1990
node6:Academic paper with title and abstract:  Dynamic Programming and Markov Processes. : The problem of maximizing the expected total discounted reward in a completely observable Markovian environment, i.e., a Markov decision process (mdp), models a particular class of sequential decision problems. Algorithms have been developed for making optimal decisions in mdps given either an mdp specification or the opportunity to interact with the mdp over time. Recently, other sequential decision-making problems have been studied prompting the development of new algorithms and analyses. We describe a new generalized model that subsumes mdps as well as many of the recent variations. We prove some basic results concerning this model and develop generalizations of value iteration, policy iteration, model-based reinforcement-learning, and Q-learning that can be used to make optimal decisions in the generalized model under various assumptions. Applications of the theory to particular models are described, including risk-averse mdps, exploration-sensitive mdps, sarsa, Q-learning with spreading, two-player games, and approximate max picking via sampling. Central to the results are the contraction property of the value operator and a stochastic-approximation theorem that reduces asynchronous convergence to synchronous convergence.
node7:Academic paper with title and abstract:  Learning to play the game of chess. : This paper presents NeuroChess, a program which learns to play chess from the final outcome of games. NeuroChess learns chess board evaluation functions, represented by artificial neural networks. It integrates inductive neural network learning, temporal differencing, and a variant of explanation-based learning. Performance results illustrate some of the strengths and weaknesses of this approach.
node8:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node9:Academic paper with title and abstract:  ""The Complexity of Real-time Search."" : In this paper, we develop new LRTA*-based algorithms for a variety of tasks, and analyze their complexity. The LRTA* algorithm is a real-time search algorithm developed by Korf. It can be used to reach a stationary or moving goal state or to identify all shortest paths from a given start state to a stationary goal state, if the algorithm is reset to the start state when it reaches a goal state. Our algorithms have a search horizon of one and require no internal memory (but must be able to store some information in the states). For example, the bi-directional LRTS algorithm determines optimal universal plans (i.e. finds all optimal paths from all states to a set of stationary goal states), even if reset actions are not available. We show that all tasks studied in this paper can be solved by such LRTA*-based algorithms with only O(n 2 ) action executions for state spaces of size n.
node10:Academic paper with title and abstract:  Vytopil. Design Issues Towards PREENS, a Parallel Research Execution Environment for Neural Systems. : PREENS a Parallel Research Execution Environment for Neural Systems is a distributed neurosimulator, targeted on networks of workstations and transputer systems. As current applications of neural networks often contain large amounts of data and as the neural networks involved in tasks such as vision are very large, high requirements on memory and computational resources are imposed on the target execution platforms. PREENS can be executed in a distributed environment, i.e. tools and neural network simulation programs can be running on any machine connectable via TCP/IP. Using this approach, larger tasks and more data can be examined using an efficient coarse grained parallelism. Furthermore, the design of PREENS allows for neural networks to be running on any high performance MIMD machine such as a trans-puter system. In this paper, the different features and design concepts of PREENS are discussed. These can also be used for other applications, like image processing.
node11:Academic paper with title and abstract:  Kanazawa, Reasoning about Time and Probability, : 
node12:Academic paper with title and abstract:  Markov games as a framework for multi-agent reinforcement learning. : In the Markov decision process (MDP) formalization of reinforcement learning, a single adaptive agent interacts with an environment defined by a probabilistic transition function. In this solipsistic view, secondary agents can only be part of the environment and are therefore fixed in their behavior. The framework of Markov games allows us to widen this view to include multiple adaptive agents with interacting or competing goals. This paper considers a step in this direction in which exactly two agents with diametrically opposed goals share an environment. It describes a Q-learning-like algorithm for finding optimal policies and demonstrates its application to a simple two-player game in which the optimal policy is probabilistic.
node13:Academic paper with title and abstract:  Avoiding overfitting with BP-SOM. : Overfitting is a well-known problem in the fields of symbolic and connectionist machine learning. It describes the deterioration of gen-eralisation performance of a trained model. In this paper, we investigate the ability of a novel artificial neural network, bp-som, to avoid overfitting. bp-som is a hybrid neural network which combines a multi-layered feed-forward network (mfn) with Kohonen's self-organising maps (soms). During training, supervised back-propagation learning and unsupervised som learning cooperate in finding adequate hidden-layer representations. We show that bp-som outperforms standard backpropagation, and also back-propagation with a weight decay when dealing with the problem of overfitting. In addition, we show that bp-som succeeds in preserving generalisation performance under hidden-unit pruning, where both other methods fail.
node14:Academic paper with title and abstract:  ""Adaptive State Space Quantization for Reinforcement Learning of Collision-Free Navigation"", : The paper describes a self-learning control system for a mobile robot. Based on sensor information the control system has to provide a steering signal in such a way that collisions are avoided. Since in our case no `examples' are available, the system learns on the basis of an external reinforcement signal which is negative in case of a collision and zero otherwise. Rules from Temporal Difference learning are used to find the correct mapping between the (discrete) sensor input space and the steering signal. We describe the algorithm for learning the correct mapping from the input (state) vector to the output (steering) signal, and the algorithm which is used for a discrete coding of the input state space.
node15:Academic paper with title and abstract:  Self-organized formation of typologically correct feature maps. : 2] D. E. Rumelhart, G. E. Hinton and R. J. Williams, ""Learning Internal Representations by Error Propagation"", in D. E. Rumelhart and J. L. McClelland (eds.) Parallel Distributed Processing: Explorations in the Microstructure of Cognition (Vol. 1), MIT Press (1986).
node16:Academic paper with title and abstract:  Exploratory Learning in the Game of GO: Initial Results. : This paper considers the importance of exploration to game-playing programs which learn by playing against opponents. The central question is whether a learning program should play the move which offers the best chance of winning the present game, or if it should play the move which has the best chance of providing useful information for future games. An approach to addressing this question is developed using probability theory, and then implemented in two different learning methods. Initial experiments in the game of Go suggest that a program which takes exploration into account can learn better against a knowledgeable opponent than a program which does not.
node17:Academic paper with title and abstract:  Measuring the difficulty of specific learning problems. : Existing complexity measures from contemporary learning theory cannot be conveniently applied to specific learning problems (e.g., training sets). Moreover, they are typically non-generic, i.e., they necessitate making assumptions about the way in which the learner will operate. The lack of a satisfactory, generic complexity measure for learning problems poses difficulties for researchers in various areas; the present paper puts forward an idea which may help to alleviate these. It shows that supervised learning problems fall into two, generic, complexity classes only one of which is associated with computational tractability. By determining which class a particular problem belongs to, we can thus effectively evaluate its degree of generic difficulty.
node18:Academic paper with title and abstract:  Introduction to the Theory of Neural Computa 92 tion. : Neural computation, also called connectionism, parallel distributed processing, neural network modeling or brain-style computation, has grown rapidly in the last decade. Despite this explosion, and ultimately because of impressive applications, there has been a dire need for a concise introduction from a theoretical perspective, analyzing the strengths and weaknesses of connectionist approaches and establishing links to other disciplines, such as statistics or control theory. The Introduction to the Theory of Neural Computation by Hertz, Krogh and Palmer (subsequently referred to as HKP) is written from the perspective of physics, the home discipline of the authors. The book fulfills its mission as an introduction for neural network novices, provided that they have some background in calculus, linear algebra, and statistics. It covers a number of models that are often viewed as disjoint. Critical analyses and fruitful comparisons between these models
node19:Academic paper with title and abstract:  Szepesvari and M.L. Littman. A unified analysis of value-function-based reinforcement-learning algorithms. : Reinforcement learning is the problem of generating optimal behavior in a sequential decision-making environment given the opportunity of interacting with it. Many algorithms for solving reinforcement-learning problems work by computing improved estimates of the optimal value function. We extend prior analyses of reinforcement-learning algorithms and present a powerful new theorem that can provide a unified analysis of value-function-based reinforcement-learning algorithms. The usefulness of the theorem lies in how it allows the asynchronous convergence of a complex reinforcement-learning algorithm to be proven by verifying that a simpler synchronous algorithm converges. We illustrate the application of the theorem by analyzing the convergence of Q-learning, model-based reinforcement learning, Q-learning with multi-state updates, Q-learning for Markov games, and risk-sensitive reinforcement learning.
node20:Academic paper with title and abstract:  Generalized Prioritized Sweeping. : Prioritized sweeping is a model-based reinforcement learning method that attempts to focus an agent's limited computational resources to achieve a good estimate of the value of environment states. To choose effectively where to spend a costly planning step, classic prioritized sweeping uses a simple heuristic to focus computation on the states that are likely to have the largest errors. In this paper, we introduce generalized prioritized sweeping, a principled method for generating such estimates in a representation-specific manner. This allows us to extend prioritized sweeping beyond an explicit, state-based representation to deal with compact representations that are necessary for dealing with large state spaces. We apply this method for generalized model approximators (such as Bayesian networks), and describe preliminary experiments that compare our approach with classical prioritized sweeping.
node21:Academic paper with title and abstract:  Comparison of action selection learning methods. : Our goal is to develop a hybrid cognitive model of how humans acquire skills on complex cognitive tasks. We are pursuing this goal by designing hybrid computational architectures for the NRL Navigation task, which requires competent sensorimotor coordination. In this paper, we describe results of directly fitting human execution data on this task. We next present and then empirically compare two methods for modeling control knowledge acquisition (reinforcement learning and a novel variant of action models) with human learning on the task. The paper concludes with an experimental demonstration of the impact of background knowledge on system performance. Our results indicate that the performance of our action models approach more closely approximates the rate of human learning on this task than does reinforcement learning.
node22:Academic paper with title and abstract:  SP (1996). Improving policies without measuring merits. : Performing policy iteration in dynamic programming should only require knowledge of relative rather than absolute measures of the utility of actions what Baird (1993) calls the advantages of actions at states. Nevertheless, existing methods in dynamic programming (including Baird's) compute some form of absolute utility function. For smooth problems, advantages satisfy two differential consistency conditions (including the requirement that they be free of curl), and we show that enforcing these can lead to appropriate policy improvement solely in terms of advantages.
node23:Academic paper with title and abstract:  Integrated Architectures for Learning, Planning and Reacting Based on Approximating Dynamic Programming, : This paper extends previous work with Dyna, a class of architectures for intelligent systems based on approximating dynamic programming methods. Dyna architectures integrate trial-and-error (reinforcement) learning and execution-time planning into a single process operating alternately on the world and on a learned model of the world. In this paper, I present and show results for two Dyna architectures. The Dyna-PI architecture is based on dynamic programming's policy iteration method and can be related to existing AI ideas such as evaluation functions and universal plans (reactive systems). Using a navigation task, results are shown for a simple Dyna-PI system that simultaneously learns by trial and error, learns a world model, and plans optimal routes using the evolving world model. The Dyna-Q architecture is based on Watkins's Q-learning, a new kind of reinforcement learning. Dyna-Q uses a less familiar set of data structures than does Dyna-PI, but is arguably simpler to implement and use. We show that Dyna-Q architectures are easy to adapt for use in changing environments.
node24:Academic paper with title and abstract:  Utilization Filtering: a method for reducing the inherent harmfulness of deductively learned knowledge, : This paper highlights a phenomenon that causes deductively learned knowledge to be harmful when used for problem solving. The problem occurs when deductive problem solvers encounter a failure branch of the search tree. The backtracking mechanism of such problem solvers will force the program to traverse the whole subtree thus visiting many nodes twice - once by using the deductively learned rule and once by using the rules that generated the learned rule in the first place. We suggest an approach called utilization filtering to solve that problem. Learners that use this approach submit to the problem solver a filter function together with the knowledge that was acquired. The function decides for each problem whether to use the learned knowledge and what part of it to use. We have tested the idea in the context of a lemma learning system, where the filter uses the probability of a subgoal failing to decide whether to turn lemma usage off. Experiments show an improvement of performance by a factor of 3. This paper is concerned with a particular type of harmful redundancy that occurs in deductive problem solvers that employ backtracking in their search procedure, and use deductively learned knowledge to accelerate the search. The problem is that in failure branches of the search tree, the backtracking mechanism of the problem solver forces exploration of the whole subtree. Thus, the search procedure will visit many states twice - once by using the deductively learned rule, and once by using the search path that produced the rule in the first place.
node25:Academic paper with title and abstract:  Incremental grid growing: encoding high-dimensional structure into a two-dimensional feature map. : Knowledge of clusters and their relations is important in understanding high-dimensional input data with unknown distribution. Ordinary feature maps with fully connected, fixed grid topology cannot properly reflect the structure of clusters in the input space|there are no cluster boundaries on the map. Incremental feature map algorithms, where nodes and connections are added to or deleted from the map according to the input distribution, can overcome this problem. However, so far such algorithms have been limited to maps that can be drawn in 2-D only in the case of 2-dimensional input space. In the approach proposed in this paper, nodes are added incrementally to a regular, 2-dimensional grid, which is drawable at all times, irrespective of the dimensionality of the input space. The process results in a map that explicitly represents the cluster structure of the high-dimensional input.
node26:Academic paper with title and abstract:  Exloration bonuses and dual control. : Finding the Bayesian balance between exploration and exploitation in adaptive optimal control is in general intractable. This paper shows how to compute suboptimal estimates based on a certainty equivalence approximation arising from a form of dual control. This systematizes and extends existing uses of exploration bonuses in reinforcement learning (Sutton, 1990). The approach has two components: a statistical model of uncertainty in the world and a way of turning this into exploratory behaviour.
node27:Academic paper with title and abstract:  Some studies in machine learning using the game of Checkers. : 
node28:Academic paper with title and abstract:  Visualizing high-dimensional structure with the incremental grid growing neural network. : Understanding high-dimensional real world data usually requires learning the structure of the data space. The structure may contain high-dimensional clusters that are related in complex ways. Methods such as merge clustering and self-organizing maps are designed to aid the visualization and interpretation of such data. However, these methods often fail to capture critical structural properties of the input. Although self-organizing maps capture high-dimensional topology, they do not represent cluster boundaries or discontinu-ities. Merge clustering extracts clusters, but it does not capture local or global topology. This paper proposes an algorithm that combines the topology-preserving characteristics of self-organizing maps with a flexible, adaptive structure that learns the cluster bound aries in the data.
node29:Academic paper with title and abstract:  Correcting imperfect domain theories: A knowledge-level analysis. : Explanation-Based Learning [Mitchell et al., 1986; DeJong and Mooney, 1986] has shown promise as a powerful analytical learning technique. However, EBL is severely hampered by the requirement of a complete and correct domain theory for successful learning to occur. Clearly, in non-trivial domains, developing such a domain theory is a nearly impossible task. Therefore, much research has been devoted to understanding how an imperfect domain theory can be corrected and extended during system performance. In this paper, we present a characterization of this problem, and use it to analyze past research in the area. Past characterizations of the problem (e.g, [Mitchell et al., 1986; Rajamoney and DeJong, 1987]) have viewed the types of performance errors caused by a faulty domain theory as primary. In contrast, we focus primarily on the types of knowledge deficiencies present in the theory, and from these derive the types of performance errors that can result. Correcting the theory can be viewed as a search through the space of possible domain theories, with a variety of knowledge sources that can be used to guide the search. We examine the types of knowledge used by a variety of past systems for this purpose. The hope is that this analysis will indicate the need for a ""universal weak method"" of domain theory correction, in which different sources of knowledge for theory correction can be freely and flexibly combined.",cora_link,lp
"Classify the relationship between two essays denoted as node3 and node20 using the union of their corresponding subgraph (text attributes and connections) as follows.

nodex must be lowercase and strictly follow the format. Here are the summaries:

node0: Explores evolutionary costs of learning, showing genetic assimilation via models like NK landscapes and neural networks, revealing a plasticity ""hump"" due to learning's costs and benefits.  
node1: Examines Baldwin Effect and genetic assimilation, emphasizing phenotypic/genotypic space correlation and trade-offs between learning's costs and benefits.  
node2: Proposes multivariate decision trees for better accuracy, using mixed features and pruning to overcome univariate limitations through empirical comparisons.  
node3: Uses genetic algorithms to evolve negotiation strategies for multi-agent systems, testing adaptability against diverse opponents in varying contexts.  
node4: Analyzes island model GAs' advantages in linearly separable problems, highlighting subpopulations' role in preserving diversity and tracking search trajectories.  
node5: Combines GAs and case-based reasoning to optimize Bayesian network factoring, improving inference quality through dynamic strategy adaptation.  
node6: Explores evolving visual routines using genetic algorithms for architecture and planning tasks.  
node7: Introduces hierarchical interdependency models (e.g., H-IFF) for building-block analysis, showing GAs' effectiveness with maintained diversity and tight linkages.  
node8: Presents evidence-driven state merging for DFA learning, winning Abbadingo competition via ordered merges based on empirical support.  
node9: Proposes environmental modeling to prevent local learning optima, enhancing adaptive systems' global exploration.  
node10: Investigates memory-augmented XCS classifier systems to improve performance in complex multi-agent environments.  
node11: Applies sparse polynomial construction to classify EEG signals using feature multiplication and regression.  
node12: Implements voting schemata in GAs, where chromosomes vote for candidate schemata based on fitness proportionality.  
node13: Uses transient Markov chains to model GA dynamics, providing insights into GAFO behavior beyond traditional schema analysis.  
node14: Develops an inferential theory unifying learning strategies via knowledge transmutations (e.g., generalization, abstraction) for multistrategy systems.  
node15: Introduces recursive algorithm selection for inductive learning to automate optimal method choice adaptively.  
node16: Compares genetic algorithm selection schemes, evaluating their performance and applicability in evolutionary computations.  
node17: Examines noise's impact on GA selection schemes, analyzing their robustness and effectiveness under varying conditions.  
node18: Models hybrid permutation-based GAs (e.g., TSP) with exact operators and remapping functions for combinatorial optimization.  
node19: Provides domain-independent tools for implementing classifier systems in customizable environments.  
node20: Applies GAs to construct recurrent neural networks, focusing on evolutionary approaches for machine learning and optimization.  
node21: Demonstrates gain-adaptation methods outperform least squares in stochastic systems, offering efficiency and reduced prior knowledge requirements.  
node22: Constructs higher-order polynomial functions via iterative feature multiplication to minimize regression errors.  
node23: Integrates sequential procedures into evolutionary algorithms to enhance graph coloring problem solutions.  
node24: Develops SAGE, a sampling-based heuristic for tree/DAG problems, applied to grammar induction and DFA learning competitions.  
node25: Automates model class selection using decision trees and heuristics, optimizing generalization across diverse learning tasks.  
node26: Explores parallel genetic algorithms' spatial/temporal dynamics, emphasizing distributed selection and configuration space analysis for TSP.  
node27: Uses XCS classifier systems to evolve optimal populations, balancing exploration/exploitation in dynamic environments.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node20>,<node2, node22>,<node3, node16>,<node3, node17>,<node4, node13>,<node4, node18>,<node4, node20>,<node4, node26>,<node5, node20>,<node6, node20>,<node7, node20>,<node8, node24>,<node9, node27>,<node10, node27>,<node11, node22>,<node12, node20>,<node14, node20>,<node15, node22>,<node15, node25>,<node16, node20>,<node18, node20>,<node19, node20>,<node19, node27>,<node20, node23>,<node20, node24>,<node20, node26>,<node20, node27>,<node21, node22>,<node22, node25>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","Yes, they have citation relationships","

nodex must be lowercase and strictly follow the format. Here are the summaries:

node0: Explores evolutionary costs of learning, showing genetic assimilation via models like NK landscapes and neural networks, revealing a plasticity ""hump"" due to learning's costs and benefits.  
node1: Examines Baldwin Effect and genetic assimilation, emphasizing phenotypic/genotypic space correlation and trade-offs between learning's costs and benefits.  
node2: Proposes multivariate decision trees for better accuracy, using mixed features and pruning to overcome univariate limitations through empirical comparisons.  
node3: Uses genetic algorithms to evolve negotiation strategies for multi-agent systems, testing adaptability against diverse opponents in varying contexts.  
node4: Analyzes island model GAs' advantages in linearly separable problems, highlighting subpopulations' role in preserving diversity and tracking search trajectories.  
node5: Combines GAs and case-based reasoning to optimize Bayesian network factoring, improving inference quality through dynamic strategy adaptation.  
node6: Explores evolving visual routines using genetic algorithms for architecture and planning tasks.  
node7: Introduces hierarchical interdependency models (e.g., H-IFF) for building-block analysis, showing GAs' effectiveness with maintained diversity and tight linkages.  
node8: Presents evidence-driven state merging for DFA learning, winning Abbadingo competition via ordered merges based on empirical support.  
node9: Proposes environmental modeling to prevent local learning optima, enhancing adaptive systems' global exploration.  
node10: Investigates memory-augmented XCS classifier systems to improve performance in complex multi-agent environments.  
node11: Applies sparse polynomial construction to classify EEG signals using feature multiplication and regression.  
node12: Implements voting schemata in GAs, where chromosomes vote for candidate schemata based on fitness proportionality.  
node13: Uses transient Markov chains to model GA dynamics, providing insights into GAFO behavior beyond traditional schema analysis.  
node14: Develops an inferential theory unifying learning strategies via knowledge transmutations (e.g., generalization, abstraction) for multistrategy systems.  
node15: Introduces recursive algorithm selection for inductive learning to automate optimal method choice adaptively.  
node16: Compares genetic algorithm selection schemes, evaluating their performance and applicability in evolutionary computations.  
node17: Examines noise's impact on GA selection schemes, analyzing their robustness and effectiveness under varying conditions.  
node18: Models hybrid permutation-based GAs (e.g., TSP) with exact operators and remapping functions for combinatorial optimization.  
node19: Provides domain-independent tools for implementing classifier systems in customizable environments.  
node20: Applies GAs to construct recurrent neural networks, focusing on evolutionary approaches for machine learning and optimization.  
node21: Demonstrates gain-adaptation methods outperform least squares in stochastic systems, offering efficiency and reduced prior knowledge requirements.  
node22: Constructs higher-order polynomial functions via iterative feature multiplication to minimize regression errors.  
node23: Integrates sequential procedures into evolutionary algorithms to enhance graph coloring problem solutions.  
node24: Develops SAGE, a sampling-based heuristic for tree/DAG problems, applied to grammar induction and DFA learning competitions.  
node25: Automates model class selection using decision trees and heuristics, optimizing generalization across diverse learning tasks.  
node26: Explores parallel genetic algorithms' spatial/temporal dynamics, emphasizing distributed selection and configuration space analysis for TSP.  
node27: Uses XCS classifier systems to evolve optimal populations, balancing exploration/exploitation in dynamic environments.","node0:Academic paper with title and abstract:  The evolutionary cost of learning. : Traits that are acquired by members of an evolving population during their lifetime, through adaptive processes such as learning, can become genetically specified in later generations. Thus there is a change in the level of learning in the population over evolutionary time. This paper explores the idea that as well as the benefits to be gained from learning, there may also be costs to be paid for the ability to learn. It is these costs that supply the selection pressure for the genetic assimilation of acquired traits. Two models are presented that attempt to illustrate this assertion. The first uses Kauffman's NK fitness landscapes to show the effect that both explicit and implicit costs have on the assimilation of learnt traits. A characteristic `hump' is observed in the graph of the level of plasticity in the population showing that learning is first selected for and then against as evolution progresses. The second model is a practical example in which neural network controllers are evolved for a small mobile robot. Results from this experiment also show the hump.
node1:Academic paper with title and abstract:  No Gain: Landscapes, Learning Costs and Genetic Assimilation, submitted to EC and University of Sussex, CSRP 409(?) [Merezhkovsky, KS, 1920] in Khakina LN (1992) Concepts of Symbiogenesis: History of Symbiogenesis as an evolutionary mechanism, : The evolution of a population can be guided by phenotypic traits acquired by members of that population during their lifetime. This phenomenon, known as the Baldwin Effect, can speed the evolutionary process as traits that are initially acquired become genetically specified in later generations. This paper presents conditions under which this genetic assimilation can take place. As well as the benefits that lifetime adaptation can give a population, there may be a cost to be paid for that adaptive ability. It is the evolutionary trade-off between these costs and benefits that provides the selection pressure for acquired traits to become genetically specified. It is also noted that genotypic space, in which evolution operates, and phenotypic space, on which adaptive processes (such as learning) operate, are, in general, of a different nature. To guarantee an acquired characteristic can become genetically specified, then these spaces must have the property of neighbourhood correlation which means that a small distance between two individuals in phenotypic space implies that there is a small distance between the same two individuals in genotypic space.
node2:Academic paper with title and abstract: Multivariate Decision Trees: COINS Technical Report 92-82 December 1992 Abstract Multivariate decision trees overcome a representational limitation of univariate decision trees: univariate decision trees are restricted to splits of the instance space that are orthogonal to the feature's axis. This paper discusses the following issues for constructing multivariate decision trees: representing a multivariate test, including symbolic and numeric features, learning the coefficients of a multivariate test, selecting the features to include in a test, and pruning of multivariate decision trees. We present some new and review some well-known methods for forming multivariate decision trees. The methods are compared across a variety of learning tasks to assess each method's ability to find concise, accurate decision trees. The results demonstrate that some multivariate methods are more effective than others. In addition, the experiments confirm that allowing multivariate tests improves the accuracy of the resulting decision tree over univariate trees.
node3:Academic paper with title and abstract: Determining Successful Negotiation Strategies: An Evolutionary Approach: To be successful in open, multi-agent environments, autonomous agents must be capable of adapting their negotiation strategies and tactics to their prevailing circumstances. To this end, we present an empirical study showing the relative success of different strategies against different types of opponent in different environments. In particular, we adopt an evolutionary approach in which strategies and tactics correspond to the genetic material in a genetic algorithm. We conduct a series of experiments to determine the most successful strategies and to see how and when these strategies evolve depending on the context and negotiation stance of the agent's opponent.
node4:Academic paper with title and abstract: Island Model Genetic Algorithms and Linearly Separable Problems: Parallel Genetic Algorithms have often been reported to yield better performance than Genetic Algorithms which use a single large panmictic population. In the case of the Island Model Genetic Algorithm, it has been informally argued that having multiple subpopulations helps to preserve genetic diversity, since each island can potentially follow a different search trajectory through the search space. On the other hand, linearly separable functions have often been used to test Island Model Genetic Algorithms; it is possible that Island Models are particular well suited to separable problems. We look at how Island Models can track multiple search trajectories using the infinite population models of the simple genetic algorithm. We also introduce a simple model for better understanding when Island Model Genetic Algorithms may have an advantage when processing linearly separable problems.
node5:Academic paper with title and abstract: Case-Based Probability Factoring in Bayesian Belief Networks: Bayesian network inference can be formulated as a combinatorial optimization problem, concerning in the computation of an optimal factoring for the distribution represented in the net. Since the determination of an optimal factoring is a computationally hard problem, heuristic greedy strategies able to find approximations of the optimal factoring are usually adopted. In the present paper we investigate an alternative approach based on a combination of genetic algorithms (GA) and case-based reasoning (CBR). We show how the use of genetic algorithms can improve the quality of the computed factoring in case a static strategy is used (as for the MPE computation), while the combination of GA and CBR can still provide advantages in the case of dynamic strategies. Some preliminary results on different kinds of nets are then reported.
node6:Academic paper with title and abstract: Evolving Visual Routines  Architecture and Planning,: 
node7:Academic paper with title and abstract: Modeling Building-Block Interdependency  Dynamical and Evolutionary Machine Organization Group: The Building-Block Hypothesis appeals to the notion of problem decomposition and the assembly of solutions from sub-solutions. Accordingly, there have been many varieties of GA test problems with a structure based on building-blocks. Many of these problems use deceptive fitness functions to model interdependency between the bits within a block. However, very few have any model of interdependency between building-blocks; those that do are not consistent in the type of interaction used intra-block and inter-block. This paper discusses the inadequacies of the various test problems in the literature and clarifies the concept of building-block interdependency. We formulate a principled model of hierarchical interdependency that can be applied through many levels in a consistent manner and introduce Hierarchical If-and-only-if (H-IFF) as a canonical example. We present some empirical results of GAs on H-IFF showing that if population diversity is maintained and linkage is tight then the GA is able to identify and manipulate building-blocks over many levels of assembly, as the Building-Block Hypothesis suggests.
node8:Academic paper with title and abstract: New Evidence Driven State Merging Algorithm: Results of the Abbadingo One DFA Learning Abstract. This paper first describes the structure and results of the Abbadingo One DFA Learning Competition. The competition was designed to encourage work on algorithms that scale wellboth to larger DFAs and to sparser training data. We then describe and discuss the winning algorithm of Rodney Price, which orders state merges according to the amount of evidence in their favor. A second winning algorithm, of Hugues Juille, will be described in a separate paper.
node9:Academic paper with title and abstract: Model of the Environment to Avoid Local Learning: Pier Luca Lanzi Technical Report N. 97.46 December 20 th , 1997
node10:Academic paper with title and abstract: Environments with Classifier Systems (Experiments on Adding Memory to XCS): Pier Luca Lanzi Technical Report N. 97.45 October 17 th , 1997
node11:Academic paper with title and abstract: Classification of EEG Signals Using a Sparse Polynomial Builder: Edward S. Orosz and Charles W. Anderson Technical Report CS-94-111 April 27, 1994
node12:Academic paper with title and abstract: Voting for Schemata: The schema theorem states that implicit parallel search is behind the power of the genetic algorithm. We contend that chromosomes can vote, proportionate to their fitness, for candidate schemata. We maintain a population of binary strings and ternary schemata. The string population not only works on solving its problem domain, but it supplies fitness for the schema population, which indirectly can solve the original problem.
node13:Academic paper with title and abstract:  Using Markov chains to analyze GAFOs. : Our theoretical understanding of the properties of genetic algorithms (GAs) being used for function optimization (GAFOs) is not as strong as we would like. Traditional schema analysis provides some first order insights, but doesn't capture the non-linear dynamics of the GA search process very well. Markov chain theory has been used primarily for steady state analysis of GAs. In this paper we explore the use of transient Markov chain analysis to model and understand the behavior of finite population GAFOs observed while in transition to steady states. This approach appears to provide new insights into the circumstances under which GAFOs will (will not) perform well. Some preliminary results are presented and an initial evaluation of the merits of this approach is provided.
node14:Academic paper with title and abstract:  Inferential Theory of Learning: Developing Foundations for Multistrategy Learning, in Machine Learning: A Multistrategy Approach, Vol. IV, R.S. : The development of multistrategy learning systems should be based on a clear understanding of the roles and the applicability conditions of different learning strategies. To this end, this chapter introduces the Inferential Theory of Learning that provides a conceptual framework for explaining logical capabilities of learning strategies, i.e., their competence. Viewing learning as a process of modifying the learners knowledge by exploring the learners experience, the theory postulates that any such process can be described as a search in a knowledge space, triggered by the learners experience and guided by learning goals. The search operators are instantiations of knowledge transmutations, which are generic patterns of knowledge change. Transmutations may employ any basic type of inferencededuction, induction or analogy. Several fundamental knowledge transmutations are described in a novel and general way, such as generalization, abstraction, explanation and similization, and their counterparts, specialization, concretion, prediction and dissimilization, respectively. Generalization enlarges the reference set of a description (the set of entities that are being described). Abstraction reduces the amount of the detail about the reference set. Explanation generates premises that explain (or imply) the given properties of the reference set. Similization transfers knowledge from one reference set to a similar reference set. Using concepts of the theory, a multistrategy task-adaptive learning (MTL) methodology is outlined, and illustrated b y an example. MTL dynamically adapts strategies to the learning task, defined by the input information, learners background knowledge, and the learning goal. It aims at synergistically integrating a whole range of inferential learning strategies, such as empirical generalization, constructive induction, deductive generalization, explanation, prediction, abstraction, and similization.
node15:Academic paper with title and abstract:  Recursive Automatic Algorithm Selection for Inductive Learning. : COINS Technical Report 94-61 August 1994
node16:Academic paper with title and abstract:  A comparison of selection schemes used in genetic algorithms. : TIK-Report Nr. 11, December 1995 Version 2 (2. Edition)
node17:Academic paper with title and abstract:  Genetic algorithms, selection schemes, and the varying effects of noise. : IlliGAL Report No. 95006 July 1995
node18:Academic paper with title and abstract:  Modeling Hybrid Genetic Algorithms. : An exact model of a simple genetic algorithm is developed for permutation based representations. Permutation based representations are used for scheduling problems and combinatorial problems such as the Traveling Salesman Problem. A remapping function is developed to remap the model to all permutations in the search space. The mixing matrices for various permutation based operators are also developed.
node19:Academic paper with title and abstract:  A Package if Domain Independent Subroutines for Implementing Classifier Systems in Arbitrary, User-Defined Environments."" Logic of Computers Group, : 
node20:Academic paper with title and abstract:  Genetic Algorithms in Search, Optimization and Machine Learning. : Angeline, P., Saunders, G. and Pollack, J. (1993) An evolutionary algorithm that constructs recurrent neural networks, LAIR Technical Report #93-PA-GNARLY, Submitted to IEEE Transactions on Neural Networks Special Issue on Evolutionary Programming.
node21:Academic paper with title and abstract:  Gain adaptation beats least squares. : I present computational results suggesting that gain-adaptation algorithms based in part on connectionist learning methods may improve over least squares and other classical parameter-estimation methods for stochastic time-varying linear systems. The new algorithms are evaluated with respect to classical methods along three dimensions: asymptotic error, computational complexity, and required prior knowledge about the system. The new algorithms are all of the same order of complexity as LMS methods, O(n), where n is the dimensionality of the system, whereas least-squares methods and the Kalman filter are O(n 2 ). The new methods also improve over the Kalman filter in that they do not require a complete statistical model of how the system varies over time. In a simple computational experiment, the new methods are shown to produce asymptotic error levels near that of the optimal Kalman filter and significantly below those of least-squares and LMS methods. The new methods may perform better even than the Kalman filter if there is any error in the filter's model of how the system varies over time.
node22:Academic paper with title and abstract:  (1991) Learning Polynomial functions by feature Construction. : We present a method for learning higher-order polynomial functions from examples using linear regression and feature construction. Regression is used on a set of training instances to produce a weight vector for a linear function over the feature set. If this hypothesis is imperfect, a new feature is constructed by forming the product of the two features that most effectively predict the squared error of the current hypothesis. The algorithm is then repeated. In an extension to this method, the specific pair of features to combine is selected by measuring their joint ability to predict the hypothesis' error.
node23:Academic paper with title and abstract:  Embedding of a sequential procedure within an evolutionary algorithm for coloring problems in graphs. : 
node24:Academic paper with title and abstract:  A sampling-based heuristic for tree search. : In the field of Operation Research and Artificial Intelligence, several stochastic search algorithms have been designed based on the theory of global random search (Zhigljavsky 1991). Basically, those techniques iteratively sample the search space with respect to a probability distribution which is updated according to the result of previous samples and some predefined strategy. Genetic Algorithms (GAs) (Goldberg 1989) or Greedy Randomized Adaptive Search Procedures (GRASP) (Feo & Resende 1995) are two particular instances of this paradigm. In this paper, we present SAGE, a search algorithm based on the same fundamental mechanisms as those techniques. However, it addresses a class of problems for which it is difficult to design transformation operators to perform local search because of intrinsic constraints in the definition of the problem itself. For those problems, a procedural approach is the natural way to construct solutions, resulting in a state space represented as a tree or a DAG. The aim of this paper is to describe the underlying heuristics used by SAGE to address problems belonging to that class. The performance of SAGE is analyzed on the problem of grammar induction and its successful application to problems from the recent Abbadingo DFA learning competition is presented.
node25:Academic paper with title and abstract:  Addressing the Selective Superiority Problem: Automatic Algorithm/Model Class Selection. : COINS Technical Report 92-30 February 1992 Abstract The problem of how to learn from examples has been studied throughout the history of machine learning, and many successful learning algorithms have been developed. A problem that has received less attention is how to select which algorithm to use for a given learning task. The ability of a chosen algorithm to induce a good generalization depends on how appropriate the model class underlying the algorithm is for the given task. We define an algorithm's model class to be the representation language it uses to express a generalization of the examples. Supervised learning algorithms differ in their underlying model class and in how they search for a good generalization. Given this characterization, it is not surprising that some algorithms find better generalizations for some, but not all tasks. Therefore, in order to find the best generalization for each task, an automated learning system must search for the appropriate model class in addition to searching for the best generalization within the chosen class. This thesis proposal investigates the issues involved in automating the selection of the appropriate model class. The presented approach has two facets. Firstly, the approach combines different model classes in the form of a model combination decision tree, which allows the best representation to be found for each subconcept of the learning task. Secondly, which model class is the most appropriate is determined dynamically using a set of heuristic rules. Explicit in each rule are the conditions in which a particular model class is appropriate and if it is not, what should be done next. In addition to describing the approach, this proposal describes how the approach will be evaluated in order to demonstrate that it is both an efficient and effective method for automatic model selection.
node26:Academic paper with title and abstract:  ""Evolution in Time and Space: The Parallel Genetic Algorithm."" In Foundations of Genetic Algorithms, : The parallel genetic algorithm (PGA) uses two major modifications compared to the genetic algorithm. Firstly, selection for mating is distributed. Individuals live in a 2-D world. Selection of a mate is done by each individual independently in its neighborhood. Secondly, each individual may improve its fitness during its lifetime by e.g. local hill-climbing. The PGA is totally asynchronous, running with maximal efficiency on MIMD parallel computers. The search strategy of the PGA is based on a small number of active and intelligent individuals, whereas a GA uses a large population of passive individuals. We will investigate the PGA with deceptive problems and the traveling salesman problem. We outline why and when the PGA is succesful. Abstractly, a PGA is a parallel search with information exchange between the individuals. If we represent the optimization problem as a fitness landscape in a certain configuration space, we see, that a PGA tries to jump from two local minima to a third, still better local minima, by using the crossover operator. This jump is (probabilistically) successful, if the fitness landscape has a certain correlation. We show the correlation for the traveling salesman problem by a configuration space analysis. The PGA explores implicitly the above correlation.
node27:Academic paper with title and abstract:  Evolving Optimal Populations with XCS Classifier Systems, : ",cora_link,lp
"Classify the relationship between two essays denoted as node18 and node12 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Bayesian Gaussian processes for regression using matrix operations and hyperparameter optimization/averaging.  
node1: Adaptive computation techniques for analyzing time series data with incomplete details.  
node2: Robust classifier diagnostics using Taylor series for system anomaly detection in NASA's Deep Space Complex.  
node3: Predicting power system security margins using radial basis function networks with funded research.  
node4: Hierarchical Kalman filter model explaining visual cortex dynamics and robust object recognition.  
node5: Sparse function approximation linked to PCA, regularization, and support vector machines.  
node6: Historical overview of connectionism emphasizing biologically inspired neural network models.  
node7: Smoothing regularizers for projective basis functions improving generalization over weight decay.  
node8: Gibbs-Markov models using Gibbs distributions and EM algorithm for probabilistic automata.  
node9: Gibbs-Markov models using Gibbs distributions and EM algorithm for probabilistic automata.  
node10: Parameterized complexity of sequence alignment showing hardness in W[t] classes.  
node11: Competing neural networks segment switching chaotic data with minimal training datasets.  
node12: Minimax risk in classification tied to metric entropy and Assouad density.  
node13: Differential learning for neural classifiers improves generalization over error-based methods.  
node14: Support vector machines outperform other methods in nonlinear chaotic time series prediction.  
node15: Boltzmann chains generalize HMMs for long-term dependencies and multiscale feature modeling.  
node16: Equivalence between constrained Boltzmann chains and hidden Markov models.  
node17: Hierarchical expert mixtures using EM/online learning for supervised tasks like robotics.  
node18: Differential learning theory optimizes pattern recognition efficiency for better generalization.  
node19: SVMs with Gaussian kernels outperform RBF networks in handwritten digit classification.  
node20: Adaptive controller networks (CCN/MCN) enhance nonlinear system control over single controllers.  
node21: Hardness of colored graph problems in parameterized complexity for DNA mapping/phylogeny.  
node22: Regularization theory connects radial basis functions and neural architectures like additive models.  
node23: Generalized radial basis functions for high-dimensional approximation avoiding dimensionality curses.  
node24: Convergence rates O(1/√n) for function approximation in Sobolev spaces using translates.

the connection relationship among the nodes mentioned:
 <node0, node22>,<node0, node23>,<node1, node14>,<node1, node17>,<node1, node23>,<node2, node13>,<node2, node18>,<node3, node23>,<node4, node17>,<node4, node22>,<node5, node14>,<node5, node23>,<node6, node23>,<node7, node22>,<node7, node23>,<node8, node16>,<node9, node16>,<node10, node21>,<node11, node14>,<node13, node18>,<node14, node23>,<node15, node16>,<node16, node23>,<node18, node23>,<node19, node23>,<node20, node23>,<node22, node23>,<node23, node24>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","No, they do not have citation relationships","

node0: Bayesian Gaussian processes for regression using matrix operations and hyperparameter optimization/averaging.  
node1: Adaptive computation techniques for analyzing time series data with incomplete details.  
node2: Robust classifier diagnostics using Taylor series for system anomaly detection in NASA's Deep Space Complex.  
node3: Predicting power system security margins using radial basis function networks with funded research.  
node4: Hierarchical Kalman filter model explaining visual cortex dynamics and robust object recognition.  
node5: Sparse function approximation linked to PCA, regularization, and support vector machines.  
node6: Historical overview of connectionism emphasizing biologically inspired neural network models.  
node7: Smoothing regularizers for projective basis functions improving generalization over weight decay.  
node8: Gibbs-Markov models using Gibbs distributions and EM algorithm for probabilistic automata.  
node9: Gibbs-Markov models using Gibbs distributions and EM algorithm for probabilistic automata.  
node10: Parameterized complexity of sequence alignment showing hardness in W[t] classes.  
node11: Competing neural networks segment switching chaotic data with minimal training datasets.  
node12: Minimax risk in classification tied to metric entropy and Assouad density.  
node13: Differential learning for neural classifiers improves generalization over error-based methods.  
node14: Support vector machines outperform other methods in nonlinear chaotic time series prediction.  
node15: Boltzmann chains generalize HMMs for long-term dependencies and multiscale feature modeling.  
node16: Equivalence between constrained Boltzmann chains and hidden Markov models.  
node17: Hierarchical expert mixtures using EM/online learning for supervised tasks like robotics.  
node18: Differential learning theory optimizes pattern recognition efficiency for better generalization.  
node19: SVMs with Gaussian kernels outperform RBF networks in handwritten digit classification.  
node20: Adaptive controller networks (CCN/MCN) enhance nonlinear system control over single controllers.  
node21: Hardness of colored graph problems in parameterized complexity for DNA mapping/phylogeny.  
node22: Regularization theory connects radial basis functions and neural architectures like additive models.  
node23: Generalized radial basis functions for high-dimensional approximation avoiding dimensionality curses.  
node24: Convergence rates O(1/√n) for function approximation in Sobolev spaces using translates.","node0:Academic paper with title and abstract: In Advances in Neural Information Processing Systems 8  Gaussian Processes for Regression: The Bayesian analysis of neural networks is difficult because a simple prior over weights implies a complex prior distribution over functions. In this paper we investigate the use of Gaussian process priors over functions, which permit the predictive Bayesian analysis for fixed values of hyperparameters to be carried out exactly using matrix operations. Two methods, using optimization and averaging (via Hybrid Monte Carlo) over hyperparameters have been tested on a number of challenging problems and have produced excellent results.
node1:Academic paper with title and abstract: Adaptive Computation Techniques for Time Series Analysis: 
node2:Academic paper with title and abstract: DIAGNOSING AND CORRECTING SYSTEM ANOMALIES WITH A ROBUST CLASSIFIER: If a robust statistical model has been developed to classify the ``health'' of a system, a well-known Taylor series approximation technique forms the basis of a diagnostic/recovery procedure that can be initiated when the system's health degrades or fails altogether. This procedure determines a ranked set of probable causes for the degraded health state, which can be used as a prioritized checklist for isolating system anomalies and quantifying corrective action. The diagnostic/recovery procedure is applicable to any classifier known to be robust; it can be applied to both neural network and traditional parametric pattern classifiers generated by a supervised learning procedure in which an empirical risk/benefit measure is optimized. We describe the procedure mathematically and demonstrate its ability to detect and diagnose the cause(s) of faults in NASA's Deep Space Communications Complex at Goldstone, California.
node3:Academic paper with title and abstract: Power System Security Margin Prediction Using Radial Basis Function Networks: Dr. McCalley's research is partially supported through grants from National Science Foundation and Pacific Gas and Electric Company. Dr. Honavar's research is partially supported through grants from National Science Foundation and the John Deere Foundation. This paper will appear in: Proceedings of the 29th Annual North American Power Symposium, Oct. 13-14. 1997, Laramie, Wyoming.
node4:Academic paper with title and abstract: Cortical Mechanisms of Visual Recognition and Learning: A Hierarchical Kalman Filter Model: We describe a biologically plausible model of dynamic recognition and learning in the visual cortex based on the statistical theory of Kalman filtering from optimal control theory. The model utilizes a hierarchical network whose successive levels implement Kalman filters operating over successively larger spatial and temporal scales. Each hierarchical level in the network predicts the current visual recognition state at a lower level and adapts its own recognition state using the residual error between the prediction and the actual lower-level state. Simultaneously, the network also learns an internal model of the spatiotemporal dynamics of the input stream by adapting the synaptic weights at each hierarchical level in order to minimize prediction errors. The Kalman filter model respects key neuroanatomical data such as the reciprocity of connections between visual cortical areas, and assigns specific computational roles to the inter-laminar connections known to exist between neurons in the visual cortex. Previous work elucidated the usefulness of this model in explaining neurophysiological phenomena such as endstopping and other related extra-classical receptive field effects. In this paper, in addition to providing a more detailed exposition of the model, we present a variety of experimental results demonstrating the ability of this model to perform robust spatiotemporal segmentation and recognition of objects and image sequences in the presence of varying amounts of occlusion, background clutter, and noise.
node5:Academic paper with title and abstract: A Sparse Representation for Function Approximation: We derive a new general representation for a function as a linear combination of local correlation kernels at optimal sparse locations (and scales) and characterize its relation to PCA, regularization, sparsity principles and Support Vector Machines.
node6:Academic paper with title and abstract: A Brief History of Connectionism: Connectionist research is firmly established within the scientific community, especially within the multi-disciplinary field of cognitive science. This diversity, however, has created an environment which makes it difficult for connectionist researchers to remain aware of recent advances in the field, let alone understand how the field has developed. This paper attempts to address this problem by providing a brief guide to connectionist research. The paper begins by defining the basic tenets of connectionism. Next, the development of connectionist research is traced, commencing with connectionism's philosophical predecessors, moving to early psychological and neuropsychological influences, followed by the mathematical and computing contributions to connectionist research. Current research is then reviewed, focusing specifically on the different types of network architectures and learning rules in use. The paper concludes by suggesting that neural network research|at least in cognitive science|should move towards models that incorporate the relevant functional principles inherent in neurobiological systems.
node7:Academic paper with title and abstract: for Projective Basis Function Networks 2m1 Global Form 2m Local Form With appropriate constant factors,: OGI CSE Technical Report 96-006 Abstract: Smoothing regularizers for radial basis functions have been studied extensively, but no general smoothing regularizers for projective basis functions (PBFs), such as the widely-used sigmoidal PBFs, have heretofore been proposed. We derive new classes of algebraically-simple m th -order smoothing regularizers for networks of projective basis functions f (W; x) = P N fi fl + u 0 ; with general transfer functions g[]. These simple algebraic forms R(W; m) enable the direct enforcement of smoothness without the need for costly Monte Carlo integrations of S(W; m). The regularizers are tested on illustrative sample problems and compared to quadratic weight decay. The new regularizers are shown to yield better generalization errors than
node8:Academic paper with title and abstract: GIBBS-MARKOV MODELS: In this paper we present a framework for building probabilistic automata parameterized by context-dependent probabilities. Gibbs distributions are used to model state transitions and output generation, and parameter estimation is carried out using an EM algorithm where the M-step uses a generalized iterative scaling procedure. We discuss relations with certain classes of stochastic feedforward neural networks, a geometric interpretation for parameter estimation, and a simple example of a statistical language model constructed using this methodology.
node9:Academic paper with title and abstract: GIBBS-MARKOV MODELS: In this paper we present a framework for building probabilistic automata parameterized by context-dependent probabilities. Gibbs distributions are used to model state transitions and output generation, and parameter estimation is carried out using an EM algorithm where the M-step uses a generalized iterative scaling procedure. We discuss relations with certain classes of stochastic feedforward neural networks, a geometric interpretation for parameter estimation, and a simple example of a statistical language model constructed using this methodology.
node10:Academic paper with title and abstract:  The parameter-ized complexity of sequence alignment and consensus. : The Longest common subsequence problem is examined from the point of view of parameterized computational complexity. There are several different ways in which parameters enter the problem, such as the number of sequences to be analyzed, the length of the common subsequence, and the size of the alphabet. Lower bounds on the complexity of this basic problem imply lower bounds on a number of other sequence alignment and consensus problems. At issue in the theory of parameterized complexity is whether a problem which takes input (x; k) can be solved in time f (k) n ff where ff is independent of k (termed fixed-parameter tractability). It can be argued that this is the appropriate asymptotic model of feasible computability for problems for which a small range of parameter values covers important applications | a situation which certainly holds for many problems in biological sequence analysis. Our main results show that: (1) The Longest Common Subsequence (LCS) parameterized by the number of sequences to be analyzed is hard for W [t] for all t. (2) The LCS problem problem, parameterized by the length of the common subsequence, belongs to W [P ] and is hard for W [2]. (3) The LCS problem parameterized both by the number of sequences and the length of the common subsequence, is complete for W [1]. All of the above results are obtained for unrestricted alphabet sizes. For alphabets of a fixed size, problems (2) and (3) are fixed-parameter tractable. We conjecture that (1) remains hard.
node11:Academic paper with title and abstract:  Annealed competition of experts for a segmentation and classification of switching dynamics. : We present a method for the unsupervised segmentation of data streams originating from different unknown sources which alternate in time. We use an architecture consisting of competing neural networks. Memory is included in order to resolve ambiguities of input-output relations. In order to obtain maximal specialization, the competition is adiabatically increased during training. Our method achieves almost perfect identification and segmentation in the case of switching chaotic dynamics where input manifolds overlap and input-output relations are ambiguous. Only a small dataset is needed for the training proceedure. Applications to time series from complex systems demonstrate the potential relevance of our approach for time series analysis and short-term prediction.
node12:Academic paper with title and abstract:  Metric Entropy and Minimax Risk in Classification, : We apply recent results on the minimax risk in density estimation to the related problem of pattern classification. The notion of loss we seek to minimize is an information theoretic measure of how well we can predict the classification of future examples, given the classification of previously seen examples. We give an asymptotic characterization of the minimax risk in terms of the metric entropy properties of the class of distributions that might be generating the examples. We then use these results to characterize the minimax risk in the special case of noisy two-valued classification problems in terms of the Assouad density and the
node13:Academic paper with title and abstract:  Why Error Measures are Sub-Optimal for Training Neural Network Pattern Classifiers. : We outline a differential theory of learning for statistical pattern classification. When applied to neural networks, the theory leads to an efficient differential learning strategy based on classification figure-of-merit (CFM) objective functions [5]. Differential learning guarantees the highest probability of generalization for a classifier with limited functional complexity, trained with a limited number of examples. The theory is significant for this and two other reasons: We demonstrate the importance of differential learning's efficiency with a simple pattern recognition task that lends itself to closed-form analysis. We conclude with a practical application of the theory in which a differentially trained perceptron diagnoses a crippling joint disorder from magnetic resonance images better than both its probabilistically trained counterpart and more complex probabilistically trained multi-layer perceptrons. The recent renaissance of connectionism has led to a considerable amount of research regarding generalization in neural network pattern classifiers that are trained in a supervised fashion. Most of this research has been done by computational learning theorists and statisticians intent on matching the functional complexity of the classifier with the size of the training sample in order to avoid the well-known curse of dimensionality (see for example the work of Barron, Baum, Haussler, and Vapnik much of which is summarized in [8]). Yet relatively little attention has been paid to the effect that the objective function (used to drive the supervised learning procedure) has on discrimination and generalization [6, 1, 5, 7, 2, 3]. fl Copyright c fl1992 by J. B. Hampshire II and B. V. K. V. Kumar: all rights reserved. Copyright is automatically extended to IEEE if this submission is accepted for presentation/publication. This research was funded by the Air Force Office of Scientific Research (grant AFOSR-89-0551) and supported by a supercomputing grant from the National Science Foundation's Pittsburgh Supercomputing Center (grant CCR920002P). The views and conclusions contained in this submission are the authors' and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Air Force, the National Science Foundation, or the U.S. Government.
node14:Academic paper with title and abstract:  Nonlinear Prediction of Chaotic Time Series. : A novel method for regression has been recently proposed by V. Vapnik et al. [8, 9]. The technique, called Support Vector Machine (SVM), is very well founded from the mathematical point of view and seems to provide a new insight in function approximation. We implemented the SVM and tested it on the same data base of chaotic time series that was used in [1] to compare the performances of different approximation techniques, including polynomial and rational approximation, local polynomial techniques, Radial Basis Functions, and Neural Networks. The SVM performs better than the approaches presented in [1]. We also study, for a particular time series, the variability in performance with respect to the few free parameters of SVM.
node15:Academic paper with title and abstract:  Boltzmann chains and hidden Markov models. : We propose a statistical mechanical framework for the modeling of discrete time series. Maximum likelihood estimation is done via Boltzmann learning in one-dimensional networks with tied weights. We call these networks Boltzmann chains and show that they contain hidden Markov models (HMMs) as a special case. Our framework also motivates new architectures that address particular shortcomings of HMMs. We look at two such architectures: parallel chains that model feature sets with disparate time scales, and looped networks that model long-term dependencies between hidden states. For these networks, we show how to implement the Boltzmann learning rule exactly, in polynomial time, without resort to simulated or mean-field annealing. The necessary computations are done by exact decimation procedures from statistical mechanics.
node16:Academic paper with title and abstract:  Equivalence and reduction of hidden Markov models, : Several authors have made a link between hidden Markov models for time series and energy-based models (Luttrell 1989, Williams 1990, Saul and Jordan 1995). Saul and Jordan (1995) discuss a linear Boltzmann chain model with state-state transition energies A ii 0 (going from state i to state i 0 ) and symbol emission energies B ij , under which the probability of an entire state fi l ; j l g L Whilst any HMM can be written as a linear Boltzmann chain by setting exp(A ii 0 ) = a ii 0 , exp(B ij ) = b ij and exp( i ) = i , not all linear Boltzmann chains can be represented as HMMs (Saul and Jordan 1995). However, the difference between the two models is minimal. To be precise, if the final hidden state i L of a linear Boltzmann chain is constrained to be a particular end state, then the distribution over sequences is identical to that of a hidden Markov model.
node17:Academic paper with title and abstract:  Hierarchical Mixtures of Experts and the EM Algorithm, : We present a tree-structured architecture for supervised learning. The statistical model underlying the architecture is a hierarchical mixture model in which both the mixture coefficients and the mixture components are generalized linear models (GLIM's). Learning is treated as a maximum likelihood problem; in particular, we present an Expectation-Maximization (EM) algorithm for adjusting the parameters of the architecture. We also develop an on-line learning algorithm in which the parameters are updated incrementally. Comparative simulation results are presented in the robot dynamics domain. *We want to thank Geoffrey Hinton, Tony Robinson, Mitsuo Kawato and Daniel Wolpert for helpful comments on the manuscript. This project was supported in part by a grant from the McDonnell-Pew Foundation, by a grant from ATR Human Information Processing Research Laboratories, by a grant from Siemens Corporation, by by grant IRI-9013991 from the National Science Foundation, and by grant N00014-90-J-1942 from the Office of Naval Research. The project was also supported by NSF grant ASC-9217041 in support of the Center for Biological and Computational Learning at MIT, including funds provided by DARPA under the HPCC program, and NSF grant ECS-9216531 to support an Initiative in Intelligent Control at MIT. Michael I. Jordan is a NSF Presidential Young Investigator.
node18:Academic paper with title and abstract:  Hampshire (1992), A Differential Theory of Learning for Statistical Pattern Recognition with Connectionist Models, : We describe a new theory of differential learning by which a broad family of pattern classifiers (including many well-known neural network paradigms) can learn stochastic concepts efficiently. We describe the relationship between a classifier's ability to generalize well to unseen test examples and the efficiency of the strategy by which it learns. We list a series of proofs that differential learning is efficient in its information and computational resource requirements, whereas traditional probabilistic learning strategies are not. The proofs are illustrated by a simple example that lends itself to closed-form analysis. We conclude with an optical character recognition task for which three different types of differentially generated classifiers generalize significantly better than their probabilistically generated counterparts.
node19:Academic paper with title and abstract:  ""Comparing Support Vector Machines with Gaussian kernels to radial basis function classifiers,"" : The Support Vector (SV) machine is a novel type of learning machine, based on statistical learning theory, which contains polynomial classifiers, neural networks, and radial basis function (RBF) networks as special cases. In the RBF case, the SV algorithm automatically determines centers, weights and threshold such as to minimize an upper bound on the expected test error. The present study is devoted to an experimental comparison of these machines with a classical approach, where the centers are determined by k-means clustering and the weights are found using error backpropagation. We consider three machines, namely a classical RBF machine, an SV machine with Gaussian kernel, and a hybrid system with the centers determined by the SV method and the weights trained by error backpropagation. Our results show that on the US postal service database of handwritten digits, the SV machine achieves the highest test accuracy, followed by the hybrid approach. The SV approach is thus not only theoretically well-founded, but also superior in a practical application. This report describes research done at the Center for Biological and Computational Learning, the Artificial Intelligence Laboratory of the Massachusetts Institute of Technology, and at AT&T Bell Laboratories (now AT&T Research, and Lucent Technologies Bell Laboratories). Support for the Center is provided in part by a grant from the National Science Foundation under contract ASC-9217041. BS thanks the M.I.T. for hospitality during a three-week visit in March 1995, where this work was started. At the time of the study, BS, CB, and VV were with AT&T Bell Laboratories, NJ; KS, FG, PN, and TP were with the Massachusetts Institute of Technology. KS is now with the Department of Information Systems and Computer Science at the National University of Singapore, Lower Kent Ridge Road, Singapore 0511; CB and PN are with Lucent Technologies, Bell Laboratories, NJ; VV is with AT&T Research, NJ. BS was supported by the Studienstiftung des deutschen Volkes; CB was supported by ARPA under ONR contract number N00014-94-C-0186. We thank A. Smola for useful discussions. Please direct correspondence to Bernhard Scholkopf, bs@mpik-tueb.mpg.de, Max-Planck-Institut fur biologische Kybernetik, Spemannstr. 38, 72076 Tubingen, Germany.
node20:Academic paper with title and abstract:  Incremental model reference adaptive polynomial controllers network. : Two self-organising controller networks are presented in this study. The ""Clustered Controller Network"" (CCN) uses a spatial clustering approach to select the controllers at each instant. In the other gated controller network, the ""Models-Controller Network"" (MCN), it is the performance of the model attached to each controller which is used to achieve the controller selection. An algorithm to automaticly conctrust the architecture of both networks is described. It makes the two schemes self-organising. Different examples of control of non-linear systems are considered in order to illustrate the behaviour of the ICCN and the IMCN. It makes clear that both these schemes are performing much better than a single adaptive controller. The two main advantages of the ICCN over the IMCN concern the possibilities to use any controller as a building block of its network architecture and to apply the ICCN for modelling purpose. However the ICCN appears to have serious problems to cope with non-linear systems having more than a single variable implying a non-linear behaviour. The IMCN does not suffer from this trouble. This high sensitivity to the clustering space order is the main drawback limiting the use of the ICCN and therefore makes the IMCN a much more suitable approach to control a wide range of non-linear systems.
node21:Academic paper with title and abstract:  The hardness of problems on thin colored graphs. : In this paper, we consider the complexity of a number of combinatorial problems; namely, Intervalizing Colored Graphs (DNA physical mapping), Triangulating Colored Graphs (perfect phylogeny), (Directed) (Modified) Colored Cutwidth, Feasible Register Assignment and Module Allocation for graphs of bounded treewidth. Each of these problems has as a characteristic a uniform upper bound on the tree or path width of the graphs in ""yes""-instances. For all of these problems with the exceptions of feasible register assignment and module allocation, a vertex or edge coloring is given as part of the input. Our main results are that the parameterized variant of each of the considered problems is hard for the complexity classes W [t] for all t 2 Z + . We also show that Intervalizing Colored Graphs, Triangulating Colored Graphs, and
node22:Academic paper with title and abstract:  Regularization thory and neural networks architectures. : We had previously shown that regularization principles lead to approximation schemes which are equivalent to networks with one layer of hidden units, called Regularization Networks. In particular, standard smoothness functionals lead to a subclass of regularization networks, the well known Radial Basis Functions approximation schemes. This paper shows that regularization networks encompass a much broader range of approximation schemes, including many of the popular general additive models and some of the neural networks. In particular, we introduce new classes of smoothness functionals that lead to different classes of basis functions. Additive splines as well as some tensor product splines can be obtained from appropriate classes of smoothness functionals. Furthermore, the same generalization that extends Radial Basis Functions (RBF) to Hyper Basis Functions (HBF) also leads from additive models to ridge approximation models, containing as special cases Breiman's hinge functions, some forms of Projection Pursuit Regression and several types of neural networks. We propose to use the term Generalized Regularization Networks for this broad class of approximation schemes that follow from an extension of regularization. In the probabilistic interpretation of regularization, the different classes of basis functions correspond to different classes of prior probabilities on the approximating function spaces, and therefore to different types of smoothness assumptions. In summary, different multilayer networks with one hidden layer, which we collectively call Generalized Regularization Networks, correspond to different classes of priors and associated smoothness functionals in a classical regularization principle. Three broad classes are a) Radial Basis Functions that can be generalized to Hyper Basis Functions, b) some tensor product splines, and c) additive splines that can be generalized to schemes of the type of ridge approximation, hinge functions and several perceptron-like neural networks with one-hidden layer. 1 This paper will appear on Neural Computation, vol. 7, pages 219-269, 1995. An earlier version of
node23:Academic paper with title and abstract:  A Theory of Networks for Approximation and Learning, : Learning an input-output mapping from a set of examples, of the type that many neural networks have been constructed to perform, can be regarded as synthesizing an approximation of a multi-dimensional function, that is solving the problem of hy-persurface reconstruction. From this point of view, this form of learning is closely related to classical approximation techniques, such as generalized splines and regularization theory. This paper considers the problems of an exact representation and, in more detail, of the approximation of linear and nonlinear mappings in terms of simpler functions of fewer variables. Kolmogorov's theorem concerning the representation of functions of several variables in terms of functions of one variable turns out to be almost irrelevant in the context of networks for learning. We develop a theoretical framework for approximation based on regularization techniques that leads to a class of three-layer networks that we call Generalized Radial Basis Functions (GRBF), since they are mathematically related to the well-known Radial Basis Functions, mainly used for strict interpolation tasks. GRBF networks are not only equivalent to generalized splines, but are also closely related to pattern recognition methods such as Parzen windows and potential functions and to several neural network algorithms, such as Kanerva's associative memory, backpropagation and Kohonen's topology preserving map. They also have an interesting interpretation in terms of prototypes that are synthesized and optimally combined during the learning stage. The paper introduces several extensions and applications of the technique and discusses intriguing analogies with neurobiological data. c fl Massachusetts Institute of Technology, 1994 This paper describes research done within the Center for Biological Information Processing, in the Department of Brain and Cognitive Sciences, and at the Artificial Intelligence Laboratory. This research is sponsored by a grant from the Office of Naval Research (ONR), Cognitive and Neural Sciences Division; by the Artificial Intelligence Center of Hughes Aircraft Corporation; by the Alfred P. Sloan Foundation; by the National Science Foundation. Support for the A. I. Laboratory's artificial intelligence research is provided by the Advanced Research Projects Agency of the Department of Defense under Army contract DACA76-85-C-0010, and in part by ONR contract N00014-85-K-0124.
node24:Academic paper with title and abstract:  Rates of convergence of approximation by translates. A.I. : In this paper we consider the problem of approximating a function belonging to some function space by a linear combination of n translates of a given function G. Using a lemma by Jones (1990) and Barron (1991) we show that it is possible to define function spaces and functions G for which the rate of convergence to zero of the error is O( 1 p n ) in any number of dimensions. The apparent avoidance of the ""curse of dimensionality"" is due to the fact that these function spaces are more and more constrained as the dimension increases. Examples include spaces of the Sobolev type, in which the number of weak derivatives is required to be larger than the number of dimensions. We give results both for approximation in the L 2 norm and in the L 1 norm. The interesting feature of these results is that, thanks to the constructive nature of Jones' and Barron's lemma, an iterative procedure is defined that can achieve this rate. This paper describes research done within the Center for Biological Information Processing, in the Department of Brain and Cognitive Sciences, at the Artificial Intelligence Laboratory and at the Department of Mathematics, University of Trento, Italy. Gabriele Anzellotti is with the Department of Mathematics, University of Trento, Italy. This research is sponsored by a grant from the Office of Naval Research (ONR), Cognitive and Neural Sciences Division; by the Artificial Intelligence Center of Hughes Aircraft Corporation (S1-801534-2). Support for the A. I. Laboratory's artificial intelligence research is provided by the Advanced Research Projects Agency of the Department of Defense under Army contract DACA76-85-C-0010, and in part by ONR contract N00014-85-K-0124. c fl Massachusetts Institute of Technology, 1992",cora_link,lp
"Classify the relationship between two essays denoted as node9 and node22 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Value function-based MDP for production scheduling, handling uncertainty via reinforcement learning with industrial application.  
node1: Reinforcement learning for dynamic channel allocation in cellular systems to minimize blocked/dropped calls with large-scale testing.  
node2: Reinforcement learning methodology for combinatorial optimization, learning search policies for effective scheduling over simulated annealing.  
node3: Multi-criteria reinforcement learning with ordered objectives, deriving algorithms for asymptotically optimal decisions validated through experiments.  
node4: POMDP-based learning for sorting and decision trees, handling uncertainties with competitive performance and natural accommodation of noisy data.  
node5: Evolutionary algorithms for architectural form design using genetic operations with AutoCAD in GGE software.  
node6: Explores strategies for exploration in active learning frameworks.  
node7: Parallel genetic algorithm for flowshop scheduling, analyzing coding schemes and computational results on job-machine problems.  
node8: Representation's role in search algorithms, analyzing local optima and No Free Lunch theorem implications for problem-solving.  
node9: Real-time dynamic programming for control learning, emphasizing algorithm development and validation with acknowledgments.  
node10: Literature review on genetic algorithms in neural network training and optimization techniques.  
node11: LRTA*-based algorithms solve real-time search tasks with O(n²) efficiency for optimal pathfinding.  
node12: Adaptive genetic algorithm choosing optimal crossover forms based on empirical performance during runs.  
node13: Evolving neural controllers via genetic algorithms for obstacle-avoidance in robot arm grasping tasks.  
node14: Continuous-time reinforcement learning for factory optimization, outperforming heuristics in unreliable production inventory problems.  
node15: Autonomous robot COLUMBUS uses neural networks for real-time exploration and environmental modeling in office settings.  
node16: Reinforcement learning and genetic algorithms shape robot behavior, exploring architectures and training strategies for effective control.  
node17: Analyzes computational complexity of MDP solutions, highlighting challenges in applying theoretical efficiency to large-scale problems.  
node18: Modular network architecture enabling transfer learning across multiple task sequences in Markov decision tasks.  
node19: Unified analysis of value-function-based RL algorithms, proving convergence through theoretical extensions of Q-learning methods.  
node20: Book on genetic algorithms covering search, optimization, and machine learning applications with academic references.  
node21: Discusses challenges in evolutionary robotics, including simulation and application to animats from a conference proceeding.  
node22: Blends inductive and analytical learning in cognitive architectures, using EBNN for mobile robot control strategies.  
node23: Parti-game algorithm for high-dimensional state spaces, using adaptive partitions to efficiently find feasible paths in complex tasks.  
node24: Derives performance bounds for greedy policies based on Bellman residuals in imperfect value functions for reinforcement learning.  
node25: Automated training agents provide instructional feedback to reduce reinforcement learning training trials significantly.  
node26: Foundational work on neuro-dynamic programming integrating neural networks with dynamic programming techniques.  
node27: Symbiotic neuro-evolution (SANE) creates efficient neural networks for RL tasks faster than traditional methods like Q-learning.

the connection relationship among the nodes mentioned:
 <node0, node9>,<node0, node14>,<node1, node9>,<node2, node9>,<node3, node9>,<node3, node19>,<node4, node9>,<node4, node26>,<node5, node20>,<node6, node9>,<node7, node20>,<node8, node20>,<node9, node11>,<node9, node15>,<node9, node16>,<node9, node17>,<node9, node18>,<node9, node19>,<node9, node23>,<node9, node25>,<node10, node27>,<node11, node15>,<node12, node20>,<node13, node20>,<node13, node21>,<node13, node27>,<node15, node18>,<node17, node23>,<node17, node24>,<node19, node26>,<node20, node21>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","Yes, they have citation relationships","

node0: Value function-based MDP for production scheduling, handling uncertainty via reinforcement learning with industrial application.  
node1: Reinforcement learning for dynamic channel allocation in cellular systems to minimize blocked/dropped calls with large-scale testing.  
node2: Reinforcement learning methodology for combinatorial optimization, learning search policies for effective scheduling over simulated annealing.  
node3: Multi-criteria reinforcement learning with ordered objectives, deriving algorithms for asymptotically optimal decisions validated through experiments.  
node4: POMDP-based learning for sorting and decision trees, handling uncertainties with competitive performance and natural accommodation of noisy data.  
node5: Evolutionary algorithms for architectural form design using genetic operations with AutoCAD in GGE software.  
node6: Explores strategies for exploration in active learning frameworks.  
node7: Parallel genetic algorithm for flowshop scheduling, analyzing coding schemes and computational results on job-machine problems.  
node8: Representation's role in search algorithms, analyzing local optima and No Free Lunch theorem implications for problem-solving.  
node9: Real-time dynamic programming for control learning, emphasizing algorithm development and validation with acknowledgments.  
node10: Literature review on genetic algorithms in neural network training and optimization techniques.  
node11: LRTA*-based algorithms solve real-time search tasks with O(n²) efficiency for optimal pathfinding.  
node12: Adaptive genetic algorithm choosing optimal crossover forms based on empirical performance during runs.  
node13: Evolving neural controllers via genetic algorithms for obstacle-avoidance in robot arm grasping tasks.  
node14: Continuous-time reinforcement learning for factory optimization, outperforming heuristics in unreliable production inventory problems.  
node15: Autonomous robot COLUMBUS uses neural networks for real-time exploration and environmental modeling in office settings.  
node16: Reinforcement learning and genetic algorithms shape robot behavior, exploring architectures and training strategies for effective control.  
node17: Analyzes computational complexity of MDP solutions, highlighting challenges in applying theoretical efficiency to large-scale problems.  
node18: Modular network architecture enabling transfer learning across multiple task sequences in Markov decision tasks.  
node19: Unified analysis of value-function-based RL algorithms, proving convergence through theoretical extensions of Q-learning methods.  
node20: Book on genetic algorithms covering search, optimization, and machine learning applications with academic references.  
node21: Discusses challenges in evolutionary robotics, including simulation and application to animats from a conference proceeding.  
node22: Blends inductive and analytical learning in cognitive architectures, using EBNN for mobile robot control strategies.  
node23: Parti-game algorithm for high-dimensional state spaces, using adaptive partitions to efficiently find feasible paths in complex tasks.  
node24: Derives performance bounds for greedy policies based on Bellman residuals in imperfect value functions for reinforcement learning.  
node25: Automated training agents provide instructional feedback to reduce reinforcement learning training trials significantly.  
node26: Foundational work on neuro-dynamic programming integrating neural networks with dynamic programming techniques.  
node27: Symbiotic neuro-evolution (SANE) creates efficient neural networks for RL tasks faster than traditional methods like Q-learning.","node0:Academic paper with title and abstract: Value Function Based Production Scheduling: Production scheduling, the problem of sequentially configuring a factory to meet forecasted demands, is a critical problem throughout the manufacturing industry. The requirement of maintaining product inventories in the face of unpredictable demand and stochastic factory output makes standard scheduling models, such as job-shop, inadequate. Currently applied algorithms, such as simulated annealing and constraint propagation, must employ ad-hoc methods such as frequent replanning to cope with uncertainty. In this paper, we describe a Markov Decision Process (MDP) formulation of production scheduling which captures stochasticity in both production and demands. The solution to this MDP is a value function which can be used to generate optimal scheduling decisions online. A simple example illustrates the theoretical superiority of this approach over replanning-based methods. We then describe an industrial application and two reinforcement learning methods for generating an approximate value function on this domain. Our results demonstrate that in both deterministic and noisy scenarios, value function approx imation is an effective technique.
node1:Academic paper with title and abstract: Submitted to NIPS96, Section: Applications. Preference: Oral presentation Reinforcement Learning for Dynamic Channel Allocation in: In cellular telephone systems, an important problem is to dynamically allocate the communication resource (channels) so as to maximize service in a stochastic caller environment. This problem is naturally formulated as a dynamic programming problem and we use a reinforcement learning (RL) method to find dynamic channel allocation policies that are better than previous heuristic solutions. The policies obtained perform well for a broad variety of call traffic patterns. We present results on a large cellular system In cellular communication systems, an important problem is to allocate the communication resource (bandwidth) so as to maximize the service provided to a set of mobile callers whose demand for service changes stochastically. A given geographical area is divided into mutually disjoint cells, and each cell serves the calls that are within its boundaries (see Figure 1a). The total system bandwidth is divided into channels, with each channel centered around a frequency. Each channel can be used simultaneously at different cells, provided these cells are sufficiently separated spatially, so that there is no interference between them. The minimum separation distance between simultaneous reuse of the same channel is called the channel reuse constraint . When a call requests service in a given cell either a free channel (one that does not violate the channel reuse constraint) may be assigned to the call, or else the call is blocked from the system; this will happen if no free channel can be found. Also, when a mobile caller crosses from one cell to another, the call is ""handed off"" to the cell of entry; that is, a new free channel is provided to the call at the new cell. If no such channel is available, the call must be dropped/disconnected from the system. One objective of a channel allocation policy is to allocate the available channels to calls so that the number of blocked calls is minimized. An additional objective is to minimize the number of calls that are dropped when they are handed off to a busy cell. These two objectives must be weighted appropriately to reflect their relative importance, since dropping existing calls is generally more undesirable than blocking new calls. with approximately 70 49 states.
node2:Academic paper with title and abstract: Solving Combinatorial Optimization Tasks by Reinforcement Learning: A General Methodology Applied to Resource-Constrained Scheduling: This paper introduces a methodology for solving combinatorial optimization problems through the application of reinforcement learning methods. The approach can be applied in cases where several similar instances of a combinatorial optimization problem must be solved. The key idea is to analyze a set of ""training"" problem instances and learn a search control policy for solving new problem instances. The search control policy has the twin goals of finding high-quality solutions and finding them quickly. Results of applying this methodology to a NASA scheduling problem show that the learned search control policy is much more effective than the best known non-learning search procedure|a method based on simulated annealing.
node3:Academic paper with title and abstract: Multi-criteria reinforcement learning: We consider multi-criteria sequential decision making problems, where the criteria are ordered according to their importance. Structural properties of these problems are touched and reinforcement learning algorithms, which learn asymptotically optimal decisions, are derived. Computer experiments confirm the theoretical results and provide further insight in the learning processes.
node4:Academic paper with title and abstract: Learning sorting and decision trees with POMDPs: pomdps are general models of sequential decisions in which both actions and observations can be probabilistic. Many problems of interest can be formulated as pomdps, yet the use of pomdps has been limited by the lack of effective algorithms. Recently this has started to change and a number of problems such as robot navigation and planning are beginning to be formulated and solved as pomdps. The advantage of the pomdp approach is its clean semantics and its ability to produce principled solutions that integrate physical and information gathering actions. In this paper we pursue this approach in the context of two learning tasks: learning to sort a vector of numbers and learning decision trees from data. Both problems are formulated as pomdps and solved by a general pomdp algorithm. The main lessons and results are that 1) the use of suitable heuristics and representations allows for the solution of sorting and classification pomdps of non-trivial sizes, 2) the quality of the resulting solutions are competitive with the best algorithms, and 3) problematic aspects in decision tree learning such as test and mis-classification costs, noisy tests, and missing values are naturally accommodated.
node5:Academic paper with title and abstract: A Preliminary Investigation of Evolution as a Form Design Strategy: We discuss the dialogue between Architecture and Artificial Life. It takes place on the level of architectural reflection, process and tool development. We describe our investigative software, GGE Generative Genetic Explorer, in which genetic operations interact with AutoCAD to generate novel forms for the architect. GGE allows us to comment on design issues concerning computer aided design tools based on evolutionary algorithms.
node6:Academic paper with title and abstract: Exploration in Active Learning: 
node7:Academic paper with title and abstract: The Application of a Parallel Genetic Algorithm to the n=m=P=C max Flowshop Problem: Hard combinatorial problems in sequencing and scheduling led recently into further research of genetic algorithms. Canonical coding of the symmetric TSP can be modified into a coding of the n-job m-machine flowshop problem, which configurates the solution space in a different way. We show that well known genetic operators act intelligently on this coding scheme. They implecitely prefer a subset of solutions which contain the probably best solutions with respect to an objective. We conjecture that every new problem needs a determination of this necessary condition for a genetic algorithm to work, i. e. a proof by experiment. We implemented an asynchronous parallel genetic algorithm on a UNIX-based computer network. Computational results of the new heuristic are discussed.
node8:Academic paper with title and abstract: 3 Representation Issues in Neighborhood Search and Evolutionary Algorithms: Evolutionary Algorithms are often presented as general purpose search methods. Yet, we also know that no search method is better than another over all possible problems and that in fact there is often a good deal of problem specific information involved in the choice of problem representation and search operators. In this paper we explore some very general properties of representations as they relate to neighborhood search methods. In particular, we looked at the expected number of local optima under a neighborhood search operator when averaged overall possible representations. The number of local optima under a neighborhood search operator for standard Binary and standard binary reflected Gray codes is developed and explored as one measure of problem complexity. We also relate number of local optima to another metric, , designed to provide one measure of complexity with respect to a simple genetic algorithm. Choosing a good representation is a vital component of solving any search problem. However, choosing a good representation for a problem is as difficult as choosing a good search algorithm for a problem. Wolpert and Macready's (1995) No Free Lunch (NFL) theorem proves that no search algorithm is better than any other over all possible discrete functions. Radcliffe and Surry (1995) extend these notions to also cover the idea that all representations are equivalent when their behavior is considered on average over all possible functions. To understand these results, we first outline some of the simple assumptions behind this theorem. First, assume the optimization problem is discrete; this describes all combinatorial optimization problems-and really all optimization problems being solved on computers since computers have finite precision. Second, we ignore the fact that we can resample points in the space. The ""No Free Lunch"" result can be stated as follows:
node9:Academic paper with title and abstract:  Learning to Act using Real- Time Dynamic Programming. : fl The authors thank Rich Yee, Vijay Gullapalli, Brian Pinette, and Jonathan Bachrach for helping to clarify the relationships between heuristic search and control. We thank Rich Sutton, Chris Watkins, Paul Werbos, and Ron Williams for sharing their fundamental insights into this subject through numerous discussions, and we further thank Rich Sutton for first making us aware of Korf's research and for his very thoughtful comments on the manuscript. We are very grateful to Dimitri Bertsekas and Steven Sullivan for independently pointing out an error in an earlier version of this article. Finally, we thank Harry Klopf, whose insight and persistence encouraged our interest in this class of learning problems. This research was supported by grants to A.G. Barto from the National Science Foundation (ECS-8912623 and ECS-9214866) and the Air Force Office of Scientific Research, Bolling AFB (AFOSR-89-0526).
node10:Academic paper with title and abstract: : 1] R.K. Belew, J. McInerney, and N. Schraudolph, Evolving networks: using the genetic algorithm with connectionist learning, in Artificial Life II, SFI Studies in the Science of Complexity, C.G. Langton, C. Taylor, J.D. Farmer, S. Rasmussen Eds., vol. 10, Addison-Wesley, 1991. [2] M. McInerney, and A.P. Dhawan, Use of genetic algorithms with back propagation in training of feed-forward neural networks, in IEEE International Conference on Neural Networks, vol. 1, pp. 203-208, 1993. [3] F.Z. Brill, D.E. Brown, and W.N. Martin, Fast genetic selection of features for neural network classifiers, IEEE Transactions on Neural Networks, vol. 3, no. 2, pp. 324-328, 1992. [4] F. Dellaert, and J. Vandewalle, Automatic design of cellular neural networks by means of genetic algorithms: finding a feature detector, in The Third IEEE International Workshop on Cellular Neural Networks and Their Applications, IEEE, New Jersey, pp. 189-194, 1994. [5] D.E. Moriarty, and R. Miikkulainen, Efficient reinforcement learning through symbiotic evolution, Machine Learning, vol. 22, pp. 11-33, 1996. [6] L. Davis, Handbook of Genetic Algorithms, Van Nostrand Reinhold, New York, 1991. [7] D. Whitely, The GENITOR algorithm and selective pressure, in Proceedings of the Third Interanational Conference on Genetic Algorithms, J.D. Schaffer Ed., Morgan Kauffman, San Mateo, CA, 1989, pp. 116-121. [8] van Camp, D., T. Plate and G.E. Hinton (1992). The Xerion Neural Network Simulator and Documentation. Department of Computer Science, University of Toronto, Toronto.
node11:Academic paper with title and abstract:  ""The Complexity of Real-time Search."" : In this paper, we develop new LRTA*-based algorithms for a variety of tasks, and analyze their complexity. The LRTA* algorithm is a real-time search algorithm developed by Korf. It can be used to reach a stationary or moving goal state or to identify all shortest paths from a given start state to a stationary goal state, if the algorithm is reset to the start state when it reaches a goal state. Our algorithms have a search horizon of one and require no internal memory (but must be able to store some information in the states). For example, the bi-directional LRTS algorithm determines optimal universal plans (i.e. finds all optimal paths from all states to a set of stationary goal states), even if reset actions are not available. We show that all tasks studied in this paper can be solved by such LRTA*-based algorithms with only O(n 2 ) action executions for state spaces of size n.
node12:Academic paper with title and abstract:  (1992b) Adapting crossover in a genetic algorithm. : Traditionally, genetic algorithms have relied upon 1 and 2-point crossover operators. Many recent empirical studies, however, have shown the benefits of higher numbers of crossover points. Some of the most intriguing recent work has focused on uniform crossover, which involves on the average L/2 crossover points for strings of length L. Despite theoretical analysis, however, it appears difficult to predict when a particular crossover form will be optimal for a given problem. This paper describes an adaptive genetic algorithm that decides, as it runs, which form is optimal.
node13:Academic paper with title and abstract:  Evolving obstacle avoidance behavior in a robot arm. : Existing approaches for learning to control a robot arm rely on supervised methods where correct behavior is explicitly given. It is difficult to learn to avoid obstacles using such methods, however, because examples of obstacle avoidance behavior are hard to generate. This paper presents an alternative approach that evolves neural network controllers through genetic algorithms. No input/output examples are necessary, since neuro-evolution learns from a single performance measurement over the entire task of grasping an object. The approach is tested in a simulation of the OSCAR-6 robot arm which receives both visual and sensory input. Neural networks evolved to effectively avoid obstacles at various locations to reach random target locations.
node14:Academic paper with title and abstract:  ""Self-improving factory simulation using continuous-time average reward reinforcement learning"" in Proceedings of the Fourteenth International Machine Learning Conference., : Many factory optimization problems, from inventory control to scheduling and reliability, can be formulated as continuous-time Markov decision processes. A primary goal in such problems is to find a gain-optimal policy that minimizes the long-run average cost. This paper describes a new average-reward algorithm called SMART for finding gain-optimal policies in continuous time semi-Markov decision processes. The paper presents a detailed experimental study of SMART on a large unreliable production inventory problem. SMART outperforms two well-known reliability heuristics from industrial engineering. A key feature of this study is the integration of the reinforcement learning algorithm directly into two commercial discrete-event simulation packages, ARENA and CSIM, paving the way for this approach to be applied to many other factory optimization problems for which there already exist simulation models.
node15:Academic paper with title and abstract:  ""Exploration and model building in mobile robot domains"", : I present first results on COLUMBUS, an autonomous mobile robot. COLUMBUS operates in initially unknown, structured environments. Its task is to explore and model the environment efficiently while avoiding collisions with obstacles. COLUMBUS uses an instance-based learning technique for modeling its environment. Real-world experiences are generalized via two artificial neural networks that encode the characteristics of the robot's sensors, as well as the characteristics of typical environments the robot is assumed to face. Once trained, these networks allow for knowledge transfer across different environments the robot will face over its lifetime. COLUMBUS' models represent both the expected reward and the confidence in these expectations. Exploration is achieved by navigating to low confidence regions. An efficient dynamic programming method is employed in background to find minimal-cost paths that, executed by the robot, maximize exploration. COLUMBUS operates in real-time. It has been operating successfully in an office building environment for periods up to hours.
node16:Academic paper with title and abstract:  Robot shaping: Developing autonomous agents though learning. : Learning plays a vital role in the development of situated agents. In this paper, we explore the use of reinforcement learning to ""shape"" a robot to perform a predefined target behavior. We connect both simulated and real robots to A LECSYS, a parallel implementation of a learning classifier system with an extended genetic algorithm. After classifying different kinds of Animat-like behaviors, we explore the effects on learning of different types of agent's architecture (monolithic, flat and hierarchical) and of training strategies. In particular, hierarchical architecture requires the agent to learn how to coordinate basic learned responses. We show that the best results are achieved when both the agent's architecture and the training strategy match the structure of the behavior pattern to be learned. We report the results of a number of experiments carried out both in simulated and in real environments, and show that the results of simulations carry smoothly to real robots. While most of our experiments deal with simple reactive behavior, in one of them we demonstrate the use of a simple and general memory mechanism. As a whole, our experimental activity demonstrates that classifier systems with genetic algorithms can be practically employed to develop autonomous agents.
node17:Academic paper with title and abstract:  Pack Kaelbling. On the complexity of solving Markov decision problems. : Markov decision problems (MDPs) provide the foundations for a number of problems of interest to AI researchers studying automated planning and reinforcement learning. In this paper, we summarize results regarding the complexity of solving MDPs and the running time of MDP solution algorithms. We argue that, although MDPs can be solved efficiently in theory, more study is needed to reveal practical algorithms for solving large problems quickly. To encourage future research, we sketch some alternative methods of analysis that rely on the struc ture of MDPs.
node18:Academic paper with title and abstract:  The efficient learning of multiple task sequences, : I present a modular network architecture and a learning algorithm based on incremental dynamic programming that allows a single learning agent to learn to solve multiple Markovian decision tasks (MDTs) with significant transfer of learning across the tasks. I consider a class of MDTs, called composite tasks, formed by temporally concatenating a number of simpler, elemental MDTs. The architecture is trained on a set of composite and elemental MDTs. The temporal structure of a composite task is assumed to be unknown and the architecture learns to produce a temporal decomposition. It is shown that under certain conditions the solution of a composite MDT can be constructed by computationally inexpensive modifications of the solutions of its constituent elemental MDTs.
node19:Academic paper with title and abstract:  Szepesvari and M.L. Littman. A unified analysis of value-function-based reinforcement-learning algorithms. : Reinforcement learning is the problem of generating optimal behavior in a sequential decision-making environment given the opportunity of interacting with it. Many algorithms for solving reinforcement-learning problems work by computing improved estimates of the optimal value function. We extend prior analyses of reinforcement-learning algorithms and present a powerful new theorem that can provide a unified analysis of value-function-based reinforcement-learning algorithms. The usefulness of the theorem lies in how it allows the asynchronous convergence of a complex reinforcement-learning algorithm to be proven by verifying that a simpler synchronous algorithm converges. We illustrate the application of the theorem by analyzing the convergence of Q-learning, model-based reinforcement learning, Q-learning with multi-state updates, Q-learning for Markov games, and risk-sensitive reinforcement learning.
node20:Academic paper with title and abstract:  Genetic Algorithms in Search, Optimization and Machine Learning. : Angeline, P., Saunders, G. and Pollack, J. (1993) An evolutionary algorithm that constructs recurrent neural networks, LAIR Technical Report #93-PA-GNARLY, Submitted to IEEE Transactions on Neural Networks Special Issue on Evolutionary Programming.
node21:Academic paper with title and abstract:  Cliff (1993). ""Issues in evolutionary robotics,"" From Animals to Animats 2 (Ed. : A version of this paper appears in: Proceedings of SAB92, the Second International Conference on Simulation of Adaptive Behaviour J.-A. Meyer, H. Roitblat, and S. Wilson, editors, MIT Press Bradford Books, Cambridge, MA, 1993.
node22:Academic paper with title and abstract:  Learning Analytically and Inductively. : Learning is a fundamental component of intelligence, and a key consideration in designing cognitive architectures such as Soar [ Laird et al., 1986 ] . This chapter considers the question of what constitutes an appropriate general-purpose learning mechanism. We are interested in mechanisms that might explain and reproduce the rich variety of learning capabilities of humans, ranging from learning perceptual-motor skills such as how to ride a bicycle, to learning highly cognitive tasks such as how to play chess. Research on learning in fields such as cognitive science, artificial intelligence, neurobiology, and statistics has led to the identification of two distinct classes of learning methods: inductive and analytic. Inductive methods, such as neural network Backpropagation, learn general laws by finding statistical correlations and regularities among a large set of training examples. In contrast, analytical methods, such as Explanation-Based Learning, acquire general laws from many fewer training examples. They rely instead on prior knowledge to analyze individual training examples in detail, then use this analysis to distinguish relevant example features from the irrelevant. The question considered in this chapter is how to best combine inductive and analytical learning in an architecture that seeks to cover the range of learning exhibited by intelligent systems such as humans. We present a specific learning mechanism, Explanation Based Neural Network learning (EBNN), that blends these two types of learning, and present experimental results demonstrating its ability to learn control strategies for a mobile robot using
node23:Academic paper with title and abstract:  ""The Parti-game Algorithm for Variable Resolution Reinforcement Learning in Multidimensional State Spaces,"" : Parti-game is a new algorithm for learning feasible trajectories to goal regions in high dimensional continuous state-spaces. In high dimensions it is essential that learning does not plan uniformly over a state-space. Parti-game maintains a decision-tree partitioning of state-space and applies techniques from game-theory and computational geometry to efficiently and adaptively concentrate high resolution only on critical areas. The current version of the algorithm is designed to find feasible paths or trajectories to goal regions in high dimensional spaces. Future versions will be designed to find a solution that optimizes a real-valued criterion. Many simulated problems have been tested, ranging from two-dimensional to nine-dimensional state-spaces, including mazes, path planning, non-linear dynamics, and planar snake robots in restricted spaces. In all cases, a good solution is found in less than ten trials and a few minutes.
node24:Academic paper with title and abstract:  Tight Performance Bounds on Greedy Poli cies Based on Imperfect Value Functions. : Northeastern University College of Computer Science Technical Report NU-CCS-93-14 Abstract Consider a given value function on states of a Markov decision problem, as might result from applying a reinforcement learning algorithm. Unless this value function equals the corresponding optimal value function, at some states there will be a discrepancy, which is natural to call the Bellman residual, between what the value function specifies at that state and what is obtained by a one-step lookahead along the seemingly best action at that state using the given value function to evaluate all succeeding states. This paper derives a tight bound on how far from optimal the discounted return for a greedy policy based on the given value function will be as a function of the maximum norm magnitude of this Bellman residual. A corresponding result is also obtained for value functions defined on state-action pairs, as are used in Q-learning. One significant application of these results is to problems where a function approximator is used to learn a value function, with training of the approximator based on trying to minimize the Bellman residual across states or state-action pairs. When
node25:Academic paper with title and abstract:  Learning from an automated training agent. : A learning agent employing reinforcement learning is hindered because it only receives the critic's sparse and weakly informative training information. We present an approach in which an automated training agent may also provide occasional instruction to the learner in the form of actions for the learner to perform. The learner has access to both the critic's feedback and the trainer's instruction. In the experiments, we vary the level of the trainer's interaction with the learner, from allowing the trainer to instruct the learner at almost every time step, to not allowing the trainer to respond at all. We also vary a parameter that controls how the learner incorporates the trainer's actions. The results show significant reductions in the average number of training trials necessary to learn to perform the task.
node26:Academic paper with title and abstract:  Neuro-dynamic Programming. : 
node27:Academic paper with title and abstract:  Efficient reinforcement learning through symbiotic evolution. : This article presents a new reinforcement learning method called SANE (Symbiotic, Adaptive Neuro-Evolution), which evolves a population of neurons through genetic algorithms to form a neural network capable of performing a task. Symbiotic evolution promotes both cooperation and specialization, which results in a fast, efficient genetic search and discourages convergence to suboptimal solutions. In the inverted pendulum problem, SANE formed effective networks 9 to 16 times faster than the Adaptive Heuristic Critic and 2 times faster than Q-learning and the GENITOR neuro-evolution approach without loss of generalization. Such efficient learning, combined with few domain assumptions, make SANE a promising approach to a broad range of reinforcement learning problems, including many real-world applications.",cora_link,lp
"Classify the relationship between two essays denoted as node5 and node7 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Stochastic propositionalization automates feature engineering using first-order clauses, enabling non-class-blind search for substructures in machine learning.  
node1: Royal Road functions analyze genetic algorithm performance, studying crossover and building blocks' roles in fitness landscapes.  
node2: Applies machine learning (1R, FOIL, InductH) to medical data, identifying colposuspension cure rate risk factors with encouraging results.  
node3: Transfers neural network knowledge to accelerate learning by initializing target networks with pre-trained subproblem weights.  
node4: Incy combines data-driven and model-based methods for relational learning, using rule models to guide hypothesis specialization.  
node5: Reference manual for the Options Design Exploration System, detailing user guidelines and functionalities (abstract incomplete).  
node6: Empirically evaluates domains where Set Enumeration trees outperform decision trees, highlighting their advantages in specific contexts.  
node7: Uses genetic programming variants to solve supervised tasks, showing effectiveness for simple problems but generalization challenges.  
node8: Proposes hierarchical interdependency models (H-IFF) for building blocks, enhancing genetic algorithms' performance via diversity and linkage.  
node9: Chromosomes ""vote"" for schemata based on fitness, maintaining dual populations (strings and schemata) to guide genetic algorithm search.  
node10: Focuses on decision tree induction methods, foundational to classification and learning algorithms (abstract incomplete).  
node11: Framework integrates symbolic and neural learning via three stages: embedding, refining, and extracting symbolic knowledge in neural networks.  
node12: Learns target functions under tree-structured bias using examples and queries, validated empirically for efficiency and correctness.  
node13: Extends decision trees/rules with set-valued features, enabling flexible representation for text and relational data.  
node14: Heterogeneous uncertainty sampling uses fast classifiers to select optimal examples, reducing expert-labeled data needs.  
node15: Query by Committee selects queries via maximal expert disagreement, achieving exponential error reduction vs. random sampling.  
node16: Dynamic hill climbing adapts mutation rates and coordinates, outperforming genetic algorithms with fewer evaluations.  
node17: Explores learning logical definitions from relational data, focusing on structured knowledge extraction (abstract incomplete).  
node18: Committees of randomized decision trees improve accuracy via majority voting, validated across real datasets.  
node19: Monte Carlo comparison evaluates non-hierarchical unsupervised classifiers’ performance and characteristics.  
node20: Analyzes genetic algorithm vs hill-climbing efficiency, identifying idealized GA features enabling superior speed.  
node21: Transferring learned filters between users reveals symbolic methods with negatively correlated features generalize poorly.  
node22: First-order regression with continuous variables applied to engineering domains, emphasizing expert validation of models.  
node23: Dyna architectures integrate reinforcement learning and planning, enabling optimal pathfinding via learned world models.  
node24: Inverse Entailment enhances ILP via Mode-Directed techniques, implemented in Progol for learning from positive data.  
node25: Extends ICL for multi-class and continuous data, adapting discretization methods in inductive logic programming.  
node26: ICL learns mutagenesis problem logic using CNF-based constraints, demonstrating competitiveness with standard ILP approaches.  
node27: Analyzes correcting imperfect domain theories, focusing on knowledge deficiencies and search strategies for theory refinement.

the connection relationship among the nodes mentioned:
 <node0, node13>,<node0, node17>,<node0, node24>,<node1, node5>,<node1, node8>,<node1, node9>,<node1, node20>,<node2, node17>,<node3, node10>,<node4, node17>,<node5, node16>,<node6, node10>,<node8, node20>,<node10, node11>,<node10, node12>,<node10, node13>,<node10, node18>,<node10, node19>,<node10, node22>,<node10, node26>,<node10, node27>,<node13, node14>,<node13, node17>,<node13, node21>,<node13, node24>,<node14, node15>,<node17, node21>,<node17, node22>,<node23, node27>,<node25, node26>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","No, they do not have citation relationships","

node0: Stochastic propositionalization automates feature engineering using first-order clauses, enabling non-class-blind search for substructures in machine learning.  
node1: Royal Road functions analyze genetic algorithm performance, studying crossover and building blocks' roles in fitness landscapes.  
node2: Applies machine learning (1R, FOIL, InductH) to medical data, identifying colposuspension cure rate risk factors with encouraging results.  
node3: Transfers neural network knowledge to accelerate learning by initializing target networks with pre-trained subproblem weights.  
node4: Incy combines data-driven and model-based methods for relational learning, using rule models to guide hypothesis specialization.  
node5: Reference manual for the Options Design Exploration System, detailing user guidelines and functionalities (abstract incomplete).  
node6: Empirically evaluates domains where Set Enumeration trees outperform decision trees, highlighting their advantages in specific contexts.  
node7: Uses genetic programming variants to solve supervised tasks, showing effectiveness for simple problems but generalization challenges.  
node8: Proposes hierarchical interdependency models (H-IFF) for building blocks, enhancing genetic algorithms' performance via diversity and linkage.  
node9: Chromosomes ""vote"" for schemata based on fitness, maintaining dual populations (strings and schemata) to guide genetic algorithm search.  
node10: Focuses on decision tree induction methods, foundational to classification and learning algorithms (abstract incomplete).  
node11: Framework integrates symbolic and neural learning via three stages: embedding, refining, and extracting symbolic knowledge in neural networks.  
node12: Learns target functions under tree-structured bias using examples and queries, validated empirically for efficiency and correctness.  
node13: Extends decision trees/rules with set-valued features, enabling flexible representation for text and relational data.  
node14: Heterogeneous uncertainty sampling uses fast classifiers to select optimal examples, reducing expert-labeled data needs.  
node15: Query by Committee selects queries via maximal expert disagreement, achieving exponential error reduction vs. random sampling.  
node16: Dynamic hill climbing adapts mutation rates and coordinates, outperforming genetic algorithms with fewer evaluations.  
node17: Explores learning logical definitions from relational data, focusing on structured knowledge extraction (abstract incomplete).  
node18: Committees of randomized decision trees improve accuracy via majority voting, validated across real datasets.  
node19: Monte Carlo comparison evaluates non-hierarchical unsupervised classifiers’ performance and characteristics.  
node20: Analyzes genetic algorithm vs hill-climbing efficiency, identifying idealized GA features enabling superior speed.  
node21: Transferring learned filters between users reveals symbolic methods with negatively correlated features generalize poorly.  
node22: First-order regression with continuous variables applied to engineering domains, emphasizing expert validation of models.  
node23: Dyna architectures integrate reinforcement learning and planning, enabling optimal pathfinding via learned world models.  
node24: Inverse Entailment enhances ILP via Mode-Directed techniques, implemented in Progol for learning from positive data.  
node25: Extends ICL for multi-class and continuous data, adapting discretization methods in inductive logic programming.  
node26: ICL learns mutagenesis problem logic using CNF-based constraints, demonstrating competitiveness with standard ILP approaches.  
node27: Analyzes correcting imperfect domain theories, focusing on knowledge deficiencies and search strategies for theory refinement.","node0:Academic paper with title and abstract:  Stochastic pro-positionalization of non-determinate background knowledge. : It is a well-known fact that propositional learning algorithms require ""good"" features to perform well in practice. So a major step in data engineering for inductive learning is the construction of good features by domain experts. These features often represent properties of structured objects, where a property typically is the occurrence of a certain substructure having certain properties. To partly automate the process of ""feature engineering"", we devised an algorithm that searches for features which are defined by such substructures. The algorithm stochastically conducts a top-down search for first-order clauses, where each clause represents a binary feature. It differs from existing algorithms in that its search is not class-blind, and that it is capable of considering clauses (""context"") of almost arbitrary length (size). Preliminary experiments are favorable, and support the view that this approach is promising.
node1:Academic paper with title and abstract:  The royal road for genetic algorithms: fitness landscapes and genetic algorithm performance. : Genetic algorithms (GAs) play a major role in many artificial-life systems, but there is often little detailed understanding of why the GA performs as it does, and little theoretical basis on which to characterize the types of fitness landscapes that lead to successful GA performance. In this paper we propose a strategy for addressing these issues. Our strategy consists of defining a set of features of fitness landscapes that are particularly relevant to the GA, and experimentally studying how various configurations of these features affect the GA's performance along a number of dimensions. In this paper we informally describe an initial set of proposed feature classes, describe in detail one such class (""Royal Road"" functions), and present some initial experimental results concerning the role of crossover and ""building blocks"" on landscapes constructed from features of this class.
node2:Academic paper with title and abstract:  Skyt The GANNsystem. Genetic Algorithms generating feedforward neural networks. http://www.daimi.aau.dk/~damgaard/NNSG/ 25 Du Junping,K.L.Rasmussen,J.Aagaard,B.Mayoh, T.Srensen,etc. Applications of Machine Learning: a Medical Follow Up Study. : This paper describes preliminary work that aims to apply some learning strategies to a medical follow-up study. An investigation of the application of three machine learning algorithms-1R, FOIL and InductH to identify risk factors that govern the colposuspension cure rate has been made. The goal of this study is to induce a generalised description or explanation of the classification attribute, colposuspension cure rate (completely cured, improved, unchanged and worse) from the 767 examples in the questionnaires. We looked for a set of rules that described which risk factors result in differences of cure rate. The results were encouraging, and indicate that machine learning can play a useful role in large scale medical problem solving.
node3:Academic paper with title and abstract: Experiments on the Transfer of Knowledge between Neural Networks Reprinted from: Computational Learning Theory and: This chapter describes three studies which address the question of how neural network learning can be improved via the incorporation of information extracted from other networks. This general problem, which we call network transfer, encompasses many types of relationships between source and target networks. Our focus is on the utilization of weights from source networks which solve a subproblem of the target network task, with the goal of speeding up learning on the target task. We demonstrate how the approach described here can improve learning speed by up to ten times over learning starting with random weights.
node4:Academic paper with title and abstract: Cooperation of Data-driven and Model-based Induction Methods for Relational Learning: Inductive learning in relational domains has been shown to be intractable in general. Many approaches to this task have been suggested nevertheless; all in some way restrict the hypothesis space searched. They can be roughly divided into two groups: data-driven, where the restriction is encoded into the algorithm, and model-based, where the restrictions are made more or less explicit with some form of declarative bias. This paper describes Incy, an inductive learner that seeks to combine aspects of both approaches. Incy is initially data-driven, using examples and background knowledge to put forth and specialize hypotheses based on the ""connectivity"" of the data at hand. It is model-driven in that hypotheses are abstracted into rule models, which are used both for control decisions in the data-driven phase and for model-guided induction. Key Words: Inductive learning in relational domains, cooperation of data-driven and model-guided methods, implicit and declarative bias.
node5:Academic paper with title and abstract: THE OPTIONS DESIGN EXPLORATION SYSTEM Reference Manual and User Guide Version B2.1: 
node6:Academic paper with title and abstract: Where Do SE-trees Perform? (Part I): As a classifier, a Set Enumeration (SE) tree can be viewed as a generalization of decision trees. We empirically characterize domains in which SE-trees are particularly advantageous relative to decision trees. Specifically, we show that:
node7:Academic paper with title and abstract: Simple Genetic Programming for Supervised Learning Problems: This paper presents an evolutionary approach and an incremental approach to find learning rules of several supervised learning tasks. In evolutionary approach potential solutions are represented as variable length mathematical (LISP S-) expressions. Thus, it is similar to Genetic Programming (GP) but it employs only a fixed set of non-problem specific functions to solve a variety of problems. The model is tested on three Monks' and parity problems. The results indicate the usefulness of the encoding schema in discovering learning rules for simple supervised learning problems. However, hard learning problems require special attention in terms of their need for larger size codings of the potential solutions and their ability of generalisa-tion over the testing set. In order to find better solutions to these issues, a hill climbing strategy with an incremental coding of potential solutions is used in discovering learning rules for the same problems. It is found that with this strategy larger solutions can easily be coded for with less computational effort. Although a better performance is achieved in training for the hard learning problems, the ability of the generalisation over the testing cases is observed to be poor.
node8:Academic paper with title and abstract: Modeling Building-Block Interdependency  Dynamical and Evolutionary Machine Organization Group: The Building-Block Hypothesis appeals to the notion of problem decomposition and the assembly of solutions from sub-solutions. Accordingly, there have been many varieties of GA test problems with a structure based on building-blocks. Many of these problems use deceptive fitness functions to model interdependency between the bits within a block. However, very few have any model of interdependency between building-blocks; those that do are not consistent in the type of interaction used intra-block and inter-block. This paper discusses the inadequacies of the various test problems in the literature and clarifies the concept of building-block interdependency. We formulate a principled model of hierarchical interdependency that can be applied through many levels in a consistent manner and introduce Hierarchical If-and-only-if (H-IFF) as a canonical example. We present some empirical results of GAs on H-IFF showing that if population diversity is maintained and linkage is tight then the GA is able to identify and manipulate building-blocks over many levels of assembly, as the Building-Block Hypothesis suggests.
node9:Academic paper with title and abstract: Voting for Schemata: The schema theorem states that implicit parallel search is behind the power of the genetic algorithm. We contend that chromosomes can vote, proportionate to their fitness, for candidate schemata. We maintain a population of binary strings and ternary schemata. The string population not only works on solving its problem domain, but it supplies fitness for the schema population, which indirectly can solve the original problem.
node10:Academic paper with title and abstract:  ""Induction of Decision Trees,"" : 
node11:Academic paper with title and abstract:  A Framework for Combining Symbolic and Neural Learning. In: Artificial Intelligence and Neural Networks: Steps Toward Principled Integration. Honavar, : Technical Report 1123, Computer Sciences Department, University of Wisconsin - Madison, Nov. 1992 ABSTRACT This article describes an approach to combining symbolic and connectionist approaches to machine learning. A three-stage framework is presented and the research of several groups is reviewed with respect to this framework. The first stage involves the insertion of symbolic knowledge into neural networks, the second addresses the refinement of this prior knowledge in its neural representation, while the third concerns the extraction of the refined symbolic knowledge. Experimental results and open research issues are discussed. A shorter version of this paper will appear in Machine Learning.
node12:Academic paper with title and abstract:  Learning from queries and examples with tree-structured bias. : Incorporating declarative bias or prior knowledge into learning is an active research topic in machine learning. Tree-structured bias specifies the prior knowledge as a tree of ""relevance"" relationships between attributes. This paper presents a learning algorithm that implements tree-structured bias, i.e., learns any target function probably approximately correctly from random examples and membership queries if it obeys a given tree-structured bias. The theoretical predictions of the paper are em pirically validated.
node13:Academic paper with title and abstract:  Learning Trees and Rules with Set-valued Features. : In most learning systems examples are represented as fixed-length ""feature vectors"", the components of which are either real numbers or nominal values. We propose an extension of the feature-vector representation that allows the value of a feature to be a set of strings; for instance, to represent a small white and black dog with the nominal features size and species and the set-valued feature color, one might use a feature vector with size=small, species=canis-familiaris and color=fwhite,blackg. Since we make no assumptions about the number of possible set elements, this extension of the traditional feature-vector representation is closely connected to Blum's ""infinite attribute"" representation. We argue that many decision tree and rule learning algorithms can be easily extended to set-valued features. We also show by example that many real-world learning problems can be efficiently and naturally represented with set-valued features; in particular, text categorization problems and problems that arise in propositionalizing first-order representations lend themselves to set-valued features.
node14:Academic paper with title and abstract:  Heterogeneous uncertainty sampling for supervised learning. : Uncertainty sampling methods iteratively request class labels for training instances whose classes are uncertain despite the previous labeled instances. These methods can greatly reduce the number of instances that an expert need label. One problem with this approach is that the classifier best suited for an application may be too expensive to train or use during the selection of instances. We test the use of one classifier (a highly efficient probabilistic one) to select examples for training another (the C4.5 rule induction program). Despite being chosen by this heterogeneous approach, the uncertainty samples yielded classifiers with lower error rates than random samples ten times larger.
node15:Academic paper with title and abstract:  Query by Committee, : We propose an algorithm called query by committee, in which a committee of students is trained on the same data set. The next query is chosen according to the principle of maximal disagreement. The algorithm is studied for two toy models: the high-low game and perceptron learning of another perceptron. As the number of queries goes to infinity, the committee algorithm yields asymptotically finite information gain. This leads to generalization error that decreases exponentially with the number of examples. This in marked contrast to learning from randomly chosen inputs, for which the information gain approaches zero and the generalization error decreases with a relatively slow inverse power law. We suggest that asymptotically finite information gain may be an important characteristic of good query algorithms.
node16:Academic paper with title and abstract:  Dynamic hill climbing: Overcoming the limitations of optimization techniques. : This paper describes a novel search algorithm, called dynamic hill climbing, that borrows ideas from genetic algorithms and hill climbing techniques. Unlike both genetic and hill climbing algorithms, dynamic hill climbing has the ability to dynamically change its coordinate frame during the course of an optimization. Furthermore, the algorithm moves from a coarse-grained search to a fine-grained search of the function space by changing its mutation rate and uses a diversity-based distance metric to ensure that it searches new regions of the space. Dynamic hill climbing is empirically compared to a traditional genetic algorithm using De Jong's well-known five function test suite [4] and is shown to vastly surpass the performance of the genetic algorithm, often finding better solutions using only 1% as many function evaluations.
node17:Academic paper with title and abstract:  Learning logical definitions from relations. : 
node18:Academic paper with title and abstract:  Committees of decision trees. : Many intelligent systems are designed to sift through a mass of evidence and arrive at a decision. Certain pieces of evidence may be given more weight than others, and this may affect the final decision significantly. When than one intelligent agent is available to make a decision, we can form a committee of experts. By combining the different opinions of these experts, the committee approach can sometimes outperform any individual expert. In this paper, we show how to exploit randomized learning algorithms in order to develop committees of experts. By using the majority vote of these experts to make decisions, we are able to improve the performance of the original learning algorithm. More precisely, we have developed a randomized decision tree induction algorithm, which generates different decision trees every time it is run. Each tree represents a different expert decision-maker. We combine these trees using a majority voting scheme in order to overcome small errors that appear in individual trees. We have tested our idea with several real data sets, and found that accuracy consistently improved when compared to the decision made by a single expert. We have developed some analytical results that explain why this effect occurs. Our experiments also show that the majority voting technique outperforms at least some alternative strategies for exploiting randomization.
node19:Academic paper with title and abstract:  Montel carlo comparison of non-hierarchical unsupervised classifiers, : 
node20:Academic paper with title and abstract:  When will a genetic algorithm outperform hill climbing? In Stephanie Forrest, editor, : We analyze a simple hill-climbing algorithm (RMHC) that was previously shown to outperform a genetic algorithm (GA) on a simple ""Royal Road"" function. We then analyze an ""idealized"" genetic algorithm (IGA) that is significantly faster than RMHC and that gives a lower bound for GA speed. We identify the features of the IGA that give rise to this speedup, and discuss how these features can be incorporated into a real GA.
node21:Academic paper with title and abstract:  Transferring and retraining learned information filters. : Any system that learns how to filter documents will suffer poor performance during an initial training phase. One way of addressing this problem is to exploit filters learned by other users in a collaborative fashion. We investigate ""direct transfer"" of learned filters in this setting|a limiting case for any collaborative learning system. We evaluate the stability of several different learning methods under direct transfer, and conclude that symbolic learning methods that use negatively correlated features of the data perform poorly in transfer, even when they perform well in more conventional evaluation settings. This effect is robust: it holds for several learning methods, when a diverse set of users is used in training the classifier, and even when the learned classifiers can be adapted to the new user's distribution. Our experiments give rise to several concrete proposals for improving generalization performance in a collaborative setting, including a beneficial variation on a feature selection method that has been widely used in text categorization.
node22:Academic paper with title and abstract:  First order regression: Application in real-world domains. : A first order regression algorithm capable of handling real-valued (continuous) variables is introduced and some of its applications are presented. Regressional learning assumes real-valued class and discrete or real-valued variables. The algorithm combines regressional learning with standard ILP concepts, such as first order concept description and background knowledge. A clause is generated by successively refining the initial clause by adding literals of the form A = v for the discrete attributes, A v and A v for the real-valued attributes, and background knowledge literals to the clause body. The algorithm employs a covering approach (beam search), a heuristic impurity function, and stopping criteria based on local improvement, minimum number of examples, maximum clause length, minimum local improvement, minimum description length, allowed error, and variable depth. An outline of the algorithm and the results of the system's application in some artificial and real-world domains are presented. The real-world domains comprise: modelling of the water behavior in a surge tank, modelling of the workpiece roughness in a steel grinding process and modelling of the operator's behavior during the process of electrical discharge machining. Special emphasis is given to the evaluation of obtained models by domain experts and their comments on the aspects of practical use of the induced knowledge. The results obtained during the knowledge acquisition process show several important guidelines for knowledge acquisition, concerning mainly the process of interaction with domain experts, exposing primarily the importance of comprehensibility of the induced knowledge.
node23:Academic paper with title and abstract:  Integrated Architectures for Learning, Planning and Reacting Based on Approximating Dynamic Programming, : This paper extends previous work with Dyna, a class of architectures for intelligent systems based on approximating dynamic programming methods. Dyna architectures integrate trial-and-error (reinforcement) learning and execution-time planning into a single process operating alternately on the world and on a learned model of the world. In this paper, I present and show results for two Dyna architectures. The Dyna-PI architecture is based on dynamic programming's policy iteration method and can be related to existing AI ideas such as evaluation functions and universal plans (reactive systems). Using a navigation task, results are shown for a simple Dyna-PI system that simultaneously learns by trial and error, learns a world model, and plans optimal routes using the evolving world model. The Dyna-Q architecture is based on Watkins's Q-learning, a new kind of reinforcement learning. Dyna-Q uses a less familiar set of data structures than does Dyna-PI, but is arguably simpler to implement and use. We show that Dyna-Q architectures are easy to adapt for use in changing environments.
node24:Academic paper with title and abstract:  Inverse Entailment and Progol. : This paper firstly provides a re-appraisal of the development of techniques for inverting deduction, secondly introduces Mode-Directed Inverse Entailment (MDIE) as a generalisation and enhancement of previous approaches and thirdly describes an implementation of MDIE in the Progol system. Progol is implemented in C and available by anonymous ftp. The re-assessment of previous techniques in terms of inverse entailment leads to new results for learning from positive data and inverting implication between pairs of clauses.
node25:Academic paper with title and abstract:  Multi-class problems and discretization in ICL (extended abstract). : Handling multi-class problems and real numbers is important in practical applications of machine learning to KDD problems. While attribute-value learners address these problems as a rule, very few ILP systems do so. The few ILP systems that handle real numbers mostly do so by trying out all real values that are applicable, thus running into efficiency or overfitting problems. This paper discusses some recent extensions of ICL that address these problems. ICL, which stands for Inductive Constraint Logic, is an ILP system that learns first order logic formulae from positive and negative examples. The main charateristic of ICL is its view on examples. These are seen as interpretations which are true or false for the clausal target theory (in CNF). We first argue that ICL can be used for learning a theory in a disjunctive normal form (DNF). With this in mind, a possible solution for handling more than two classes is given (based on some ideas from CN2). Finally, we show how to tackle problems with continuous values by adapting discretization techniques from attribute value learners.
node26:Academic paper with title and abstract:  Inductive constraint logic and the mutagenesis problem. : A novel approach to learning first order logic formulae from positive and negative examples is incorporated in a system named ICL (Inductive Constraint Logic). In ICL, examples are viewed as interpretations which are true or false for the target theory, whereas in present inductive logic programming systems, examples are true and false ground facts (or clauses). Furthermore, ICL uses a clausal representation, which corresponds to a conjunctive normal form where each conjunct forms a constraint on positive examples, whereas classical learning techniques have concentrated on concept representations in disjunctive normal form. We present some experiments with this new system on the mutagenesis problem. These experiments illustrate some of the differences with other systems, and indicate that our approach should work at least as well as the more classical approaches.
node27:Academic paper with title and abstract:  Correcting imperfect domain theories: A knowledge-level analysis. : Explanation-Based Learning [Mitchell et al., 1986; DeJong and Mooney, 1986] has shown promise as a powerful analytical learning technique. However, EBL is severely hampered by the requirement of a complete and correct domain theory for successful learning to occur. Clearly, in non-trivial domains, developing such a domain theory is a nearly impossible task. Therefore, much research has been devoted to understanding how an imperfect domain theory can be corrected and extended during system performance. In this paper, we present a characterization of this problem, and use it to analyze past research in the area. Past characterizations of the problem (e.g, [Mitchell et al., 1986; Rajamoney and DeJong, 1987]) have viewed the types of performance errors caused by a faulty domain theory as primary. In contrast, we focus primarily on the types of knowledge deficiencies present in the theory, and from these derive the types of performance errors that can result. Correcting the theory can be viewed as a search through the space of possible domain theories, with a variety of knowledge sources that can be used to guide the search. We examine the types of knowledge used by a variety of past systems for this purpose. The hope is that this analysis will indicate the need for a ""universal weak method"" of domain theory correction, in which different sources of knowledge for theory correction can be freely and flexibly combined.",cora_link,lp
"Classify the relationship between two essays denoted as node13 and node14 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Explores US-L* algorithm learning finite automata via prefix-closed samples; achieves compact models but faces complexity challenges with general samples.  
node1: Proposes statistical theory for object representation using local feature analysis.  
node2: Examines synaptic plasticity's role in visual cortical ocular dominance via afferent excitation and lateral inhibition.  
node3: Models NMDA/GABA effects on cortical neurons using EXIN rules, focusing on lateral inhibitory plasticity's role in ocular dominance shifts.  
node4: Investigates ICMS-induced receptive field reorganization, emphasizing lateral inhibitory plasticity in EXIN model for cortical plasticity.  
node5: Addresses instance-based learning's computational cost with a multiresolution data structure for efficient queries.  
node6: Introduces decision tree induction methods, foundational for algorithms like ID3/C4.5.  
node7: Explores self-organized feature maps via competitive learning, referencing error propagation in neural networks.  
node8: Proposes PLEASE, a genetic algorithm-based system evolving prototypes for classification tasks.  
node9: Uses information maximization for blind source separation/deconvolution in non-linear neural networks.  
node10: Extracts symbolic rules from neural networks via query-based learning, improving efficiency over search methods.  
node11: Finds greedy decision tree methods outperform lookahead approaches, which risk pathology (larger/less accurate trees).  
node12: Introduces OC1, a system inducing oblique decision trees via hill-climbing and randomization for better accuracy.  
node13: Details PLEASE’s genetic algorithm for prototype learning, competitive with nearest-neighbor methods.  
node14: Evolves grounded robotic control using genetic neural networks, enabling adaptive behaviors like wall-following.  
node15: Models topographic and ocular dominance stripe formation under positive inter-eye correlations.  
node16: Addresses predicate argument selection in ILP using propositional minimization for new predicates.  
node17: Proposes unsupervised neural network for feature extraction emphasizing multimodal data, linked to BCM neuron models.  
node18: Parallelizes self-organizing maps via many-particle decomposition, reducing complexity and measuring map order.  
node19: Uses sampling/random mutation hill climbing to select prototypes/features, achieving high accuracy with minimal storage.  
node20: Improves vector quantization via LBG-U method inspired by neural networks.  
node21: Models ICMS-induced cortical plasticity using EXIN rules, linking inhibitory learning to receptive field changes.  
node22: Studies unsupervised category learning, focusing on generalization and credit allocation in neural networks.

the connection relationship among the nodes mentioned:
 <node0, node6>,<node1, node9>,<node1, node17>,<node2, node21>,<node2, node22>,<node3, node21>,<node3, node22>,<node4, node22>,<node5, node19>,<node6, node8>,<node6, node11>,<node6, node13>,<node6, node16>,<node7, node15>,<node7, node18>,<node7, node20>,<node7, node22>,<node8, node13>,<node9, node22>,<node10, node22>,<node11, node12>,<node13, node19>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","No, they do not have citation relationships","

node0: Explores US-L* algorithm learning finite automata via prefix-closed samples; achieves compact models but faces complexity challenges with general samples.  
node1: Proposes statistical theory for object representation using local feature analysis.  
node2: Examines synaptic plasticity's role in visual cortical ocular dominance via afferent excitation and lateral inhibition.  
node3: Models NMDA/GABA effects on cortical neurons using EXIN rules, focusing on lateral inhibitory plasticity's role in ocular dominance shifts.  
node4: Investigates ICMS-induced receptive field reorganization, emphasizing lateral inhibitory plasticity in EXIN model for cortical plasticity.  
node5: Addresses instance-based learning's computational cost with a multiresolution data structure for efficient queries.  
node6: Introduces decision tree induction methods, foundational for algorithms like ID3/C4.5.  
node7: Explores self-organized feature maps via competitive learning, referencing error propagation in neural networks.  
node8: Proposes PLEASE, a genetic algorithm-based system evolving prototypes for classification tasks.  
node9: Uses information maximization for blind source separation/deconvolution in non-linear neural networks.  
node10: Extracts symbolic rules from neural networks via query-based learning, improving efficiency over search methods.  
node11: Finds greedy decision tree methods outperform lookahead approaches, which risk pathology (larger/less accurate trees).  
node12: Introduces OC1, a system inducing oblique decision trees via hill-climbing and randomization for better accuracy.  
node13: Details PLEASE’s genetic algorithm for prototype learning, competitive with nearest-neighbor methods.  
node14: Evolves grounded robotic control using genetic neural networks, enabling adaptive behaviors like wall-following.  
node15: Models topographic and ocular dominance stripe formation under positive inter-eye correlations.  
node16: Addresses predicate argument selection in ILP using propositional minimization for new predicates.  
node17: Proposes unsupervised neural network for feature extraction emphasizing multimodal data, linked to BCM neuron models.  
node18: Parallelizes self-organizing maps via many-particle decomposition, reducing complexity and measuring map order.  
node19: Uses sampling/random mutation hill climbing to select prototypes/features, achieving high accuracy with minimal storage.  
node20: Improves vector quantization via LBG-U method inspired by neural networks.  
node21: Models ICMS-induced cortical plasticity using EXIN rules, linking inhibitory learning to receptive field changes.  
node22: Studies unsupervised category learning, focusing on generalization and credit allocation in neural networks.","node0:Academic paper with title and abstract: Figure 3: Average model size accepted from a ran-dom prefix-closed samples of various size, and: that is based on Angluin's L fl algorithm. The algorithm maintains a model consistent with its past examples. When a new counterexample arrives it tries to extend the model in a minimal fashion. We conducted a set of experiments where random automata that represent different strategies were generated, and the algorithm tried to learn them based on prefix-closed samples of their behavior. The algorithm managed to learn very compact models that agree with the samples. The size of the sample had a small effect on the size of the model. The experimental results suggest that for random prefix-closed samples the algorithm behaves well. However, following Angluin's result on the difficulty of learning almost uniform complete samples [ An-gluin, 1978 ] , it is obvious that our algorithm does not solve the complexity issue of inferring a DFA from a general prefix-closed sample. We are currently looking for classes of prefix-closed samples in which US-L* behaves well. [ Carmel and Markovitch, 1994 ] D. Carmel and S. Markovitch. The M* algorithm: Incorporating opponent models into adversary search. Technical Report CIS report 9402, Technion, March 1994. [ Carmel and Markovitch, 1995 ] D. Carmel and S. Markovitch. Unsupervised learning of finite automata: A practical approach. Technical Report CIS report 9504, Technion, March 1995. [ Shoham and Tennenholtz, 1994 ] Y. Shoham and M. Tennenholtz. Co-Learning and the evolution of social activity. Technical Report STAN-CS-TR-94-1511, Stanford Univrsity, Department of Computer Science, 1994.
node1:Academic paper with title and abstract: Local Feature Analysis: A general statistical theory for object representation: 
node2:Academic paper with title and abstract: The role of afferent excitatory and lateral inhibitory synaptic plasticity in visual cortical ocular dominance: 
node3:Academic paper with title and abstract: Plasticity in cortical neuron properties: Modeling the effects of an NMDA antagonist and a GABA: Infusion of a GABA agonist (Reiter & Stryker, 1988) and infusion of an NMDA receptor antagonist (Bear et al., 1990), in the primary visual cortex of kittens during monocular deprivation, shifts ocular dominance toward the closed eye, in the cortical region near the infusion site. This reverse ocular dominance shift has been previously modeled by variants of a covariance synaptic plasticity rule (Bear et al., 1990; Clothiaux et al., 1991; Miller et al., 1989; Reiter & Stryker, 1988). Kasamatsu et al. (1997, 1998) showed that infusion of an NMDA receptor antagonist in adult cat primary visual cortex changes ocular dominance distribution, reduces binocularity, and reduces orientation and direction selectivity. This paper presents a novel account of the effects of these pharmacological treatments, based on the EXIN synaptic plasticity rules (Marshall, 1995), which include both an instar afferent excitatory and an outstar lateral inhibitory rule. Functionally, the EXIN plasticity rules enhance the efficiency, discrimination, and context-sensitivity of a neural network's representation of perceptual patterns (Marshall, 1995; Marshall & Gupta, 1998). The EXIN model decreases lateral inhibition from neurons outside the infusion site (control regions) to neurons inside the infusion region, during monocular deprivation. In the model, plasticity in afferent pathways to neurons affected by the pharmacological treatments is assumed to be blocked , as opposed to previous models (Bear et al., 1990; Miller et al., 1989; Reiter & Stryker, 1988), in which afferent pathways from the open eye to neurons in the infusion region are weakened . The proposed model is consistent with results suggesting that long-term plasticity can be blocked by NMDA antagonists or by postsynaptic hyperpolarization (Bear et al., 1990; Dudek & Bear, 1992; Goda & Stevens, 1996; Kirkwood et al., 1993). Since the role of plasticity in lateral inhibitory pathways in producing cortical plasticity has not received much attention, several predictions are made based on the EXIN lateral inhibitory plasticity rule.
node4:Academic paper with title and abstract: Rearrangement of receptive field topography after intracortical and peripheral stimulation: The role of plasticity in: Intracortical microstimulation (ICMS) of a single site in the somatosensory cortex of rats and monkeys for 2-6 hours produces a large increase in the number of neurons responsive to the skin region corresponding to the ICMS-site receptive field (RF), with very little effect on the position and size of the ICMS-site RF, and the response evoked at the ICMS site by tactile stimulation (Recanzone et al., 1992b). Large changes in RF topography are observed following several weeks of repetitive stimulation of a restricted skin region in monkeys (Jenkins et al., 1990; Recanzone et al., 1992acde). Repetitive stimulation of a localized skin region in monkeys produced by training the monkeys in a tactile frequency discrimination task improves their performance (Recanzone et al., 1992a). It has been suggested that these changes in RF topography are caused by competitive learning in excitatory pathways (Grajski & Merzenich, 1990; Jenkins et al., 1990; Recanzone et al., 1992abcde). ICMS almost simultaneously excites excitatory and inhibitory terminals and excitatory and inhibitory cortical neurons within a few microns of the stimulating electrode. Thus, this paper investigates the implications of the possibility that lateral inhibitory pathways too may undergo synaptic plasticity during ICMS. Lateral inhibitory pathways may also undergo synaptic plasticity in adult animals during peripheral conditioning. The ""EXIN"" (afferent excitatory and lateral inhibitory) synaptic plasticity rules
node5:Academic paper with title and abstract: : Instance-based learning methods explicitly remember all the data that they receive. They usually have no training phase, and only at prediction time do they perform computation. Then, they take a query, search the database for similar datapoints and build an on-line local model (such as a local average or local regression) with which to predict an output value. In this paper we review the advantages of instance based methods for autonomous systems, but we also note the ensuing cost: hopelessly slow computation as the database grows large. We present and evaluate a new way of structuring a database and a new algorithm for accessing it that maintains the advantages of instance-based learning. Earlier attempts to combat the cost of instance-based learning have sacrificed the explicit retention of all data, or been applicable only to instance-based predictions based on a small number of near neighbors or have had to re-introduce an explicit training phase in the form of an interpolative data structure. Our approach builds a multiresolution data structure to summarize the database of experiences at all resolutions of interest simultaneously. This permits us to query the database with the same exibility as a conventional linear search, but at greatly reduced computational cost.
node6:Academic paper with title and abstract:  ""Induction of Decision Trees,"" : 
node7:Academic paper with title and abstract:  Self-organized formation of typologically correct feature maps. : 2] D. E. Rumelhart, G. E. Hinton and R. J. Williams, ""Learning Internal Representations by Error Propagation"", in D. E. Rumelhart and J. L. McClelland (eds.) Parallel Distributed Processing: Explorations in the Microstructure of Cognition (Vol. 1), MIT Press (1986).
node8:Academic paper with title and abstract:  A genetic prototype learner. : Supervised classification problems have received considerable attention from the machine learning community. We propose a novel genetic algorithm based prototype learning system, PLEASE, for this class of problems. Given a set of prototypes for each of the possible classes, the class of an input instance is determined by the prototype nearest to this instance. We assume ordinal attributes and prototypes are represented as sets of feature-value pairs. A genetic algorithm is used to evolve the number of prototypes per class and their positions on the input space as determined by corresponding feature-value pairs. Comparisons with C4.5 on a set of artificial problems of controlled complexity demonstrate the effectiveness of the pro posed system.
node9:Academic paper with title and abstract:  An Information Maximization Approach to Blind Separation and Blind Deconvolution. : We derive a new self-organising learning algorithm which maximises the information transferred in a network of non-linear units. The algorithm does not assume any knowledge of the input distributions, and is defined here for the zero-noise limit. Under these conditions, information maximisation has extra properties not found in the linear case (Linsker 1989). The non-linearities in the transfer function are able to pick up higher-order moments of the input distributions and perform something akin to true redundancy reduction between units in the output representation. This enables the network to separate statistically independent components in the inputs: a higher-order generalisation of Principal Components Analysis. We apply the network to the source separation (or cocktail party) problem, successfully separating unknown mixtures of up to ten speakers. We also show that a variant on the network architecture is able to perform blind deconvolution (cancellation of unknown echoes and reverberation in a speech signal). Finally, we derive dependencies of information transfer on time delays. We suggest that information max-imisation provides a unifying framework for problems in `blind' signal processing. fl Please send comments to tony@salk.edu. This paper will appear as Neural Computation, 7, 6, 1004-1034 (1995). The reference for this version is: Technical Report no. INC-9501, February 1995, Institute for Neural Computation, UCSD, San Diego, CA 92093-0523.
node10:Academic paper with title and abstract:  Using sampling and queries to extract rules from trained neural networks. : Concepts learned by neural networks are difficult to understand because they are represented using large assemblages of real-valued parameters. One approach to understanding trained neural networks is to extract symbolic rules that describe their classification behavior. There are several existing rule-extraction approaches that operate by searching for such rules. We present a novel method that casts rule extraction not as a search problem, but instead as a learning problem. In addition to learning from training examples, our method exploits the property that networks can be efficiently queried. We describe algorithms for extracting both conjunctive and M -of-N rules, and present experiments that show that our method is more efficient than conventional search-based approaches.
node11:Academic paper with title and abstract:  Lookahead and Pathology in Decision Tree Induction, : The standard approach to decision tree induction is a top-down, greedy algorithm that makes locally optimal, irrevocable decisions at each node of a tree. In this paper, we study an alternative approach, in which the algorithms use limited lookahead to decide what test to use at a node. We systematically compare, using a very large number of decision trees, the quality of decision trees induced by the greedy approach to that of trees induced using lookahead. The main results of our experiments are: (i) the greedy approach produces trees that are just as accurate as trees produced with the much more expensive lookahead step; and (ii) decision tree induction exhibits pathology, in the sense that lookahead can produce trees that are both larger and less accurate than trees produced without it.
node12:Academic paper with title and abstract:  A system for induction of oblique decision trees. : This article describes a new system for induction of oblique decision trees. This system, OC1, combines deterministic hill-climbing with two forms of randomization to find a good oblique split (in the form of a hyperplane) at each node of a decision tree. Oblique decision tree methods are tuned especially for domains in which the attributes are numeric, although they can be adapted to symbolic or mixed symbolic/numeric attributes. We present extensive empirical studies, using both real and artificial data, that analyze OC1's ability to construct oblique trees that are smaller and more accurate than their axis-parallel counterparts. We also examine the benefits of randomization for the construction of oblique decision trees.
node13:Academic paper with title and abstract:  PLEASE: A prototype learning system using genetic algorithms. : Prototypes have been proposed as representation of concepts that are used effectively by humans. Developing computational schemes for generating prototypes from examples, however, has proved to be a difficult problem. We present a novel genetic algorithm based prototype learning system, PLEASE, for constructing appropriate prototypes from classified training instances. After constructing a set of prototypes for each of the possible classes, the class of a new input instance is determined by the nearest prototype to this instance. Attributes are assumed to be ordinal in nature and prototypes are represented as sets of feature-value pairs. A genetic algorithm is used to evolve the number of prototypes per class and their positions on the input space. We present experimental results on a series of artificial problems of varying complexity. PLEASE performs competitively with several nearest neighbor classification algorithms on the problem set. An analysis of the strengths and weaknesses of the initial version of our system motivates the need for additional operators. The inclusion of these operators substantially improves the performance of the system on particularly difficult problems.
node14:Academic paper with title and abstract:  Grounding robotic control with genetic neural net-works. : Technical Report AI94-223 May 1994 Abstract An important but often neglected problem in the field of Artificial Intelligence is that of grounding systems in their environment such that the representations they manipulate have inherent meaning for the system. Since humans rely so heavily on semantics, it seems likely that the grounding is crucial to the development of truly intelligent behavior. This study investigates the use of simulated robotic agents with neural network processors as part of a method to ensure grounding. Both the topology and weights of the neural networks are optimized through genetic algorithms. Although such comprehensive optimization is difficult, the empirical evidence gathered here shows that the method is not only tractable but quite fruitful. In the experiments, the agents evolved a wall-following control strategy and were able to transfer it to novel environments. Their behavior suggests that they were also learning to build cognitive maps.
node15:Academic paper with title and abstract:  Topography and ocular dominance: A model exploring positive correla-tions. : The map from eye to brain in vertebrates is topographic, i.e. neighbouring points in the eye map to neighbouring points in the brain. In addition, when two eyes innervate the same target structure, the two sets of fibres segregate to form ocular dominance stripes. Experimental evidence from the frog and goldfish suggests that these two phenomena may be subserved by the same mechanisms. We present a computational model that addresses the formation of both topography and ocular dominance. The model is based on a form of competitive learning with subtractive enforcement of a weight normalization rule. Inputs to the model are distributed patterns of activity presented simultaneously in both eyes. An important aspect of this model is that ocular dominance segregation can occur when the two eyes are positively correlated, whereas previous models have tended to assume zero or negative correlations between the eyes. This allows investigation of the dependence of the pattern of stripes on the degree of correlation between the eyes: we find that increasing correlation leads to narrower stripes. Experiments are suggested to test this prediction.
node16:Academic paper with title and abstract:  The Arguments of Newly Invented Predicates in ILP, : In this paper we investigate the problem of choosing arguments for a new predicate. We identify the relevant terms to be considered as arguments, and propose methods to choose among them based on propositional minimisation.
node17:Academic paper with title and abstract:  (1992) Feature extraction using an unsupervised neural network. : A novel unsupervised neural network for dimensionality reduction that seeks directions emphasizing multimodality is presented, and its connection to exploratory projection pursuit methods is discussed. This leads to a new statistical insight into the synaptic modification equations governing learning in Bienenstock, Cooper, and Munro (BCM) neurons (1982). The importance of a dimensionality reduction principle based solely on distinguishing features is demonstrated using a phoneme recognition experiment. The extracted features are compared with features extracted using a back-propagation network.
node18:Academic paper with title and abstract:  ""Using many-particle decomposition to get a parallel self-organising map,"" : We propose a method for decreasing the computational complexity of self-organising maps. The method uses a partitioning of the neurons into disjoint clusters. Teaching of the neurons occurs on a cluster-basis instead of on a neuron-basis. For teaching an N-neuron network with N 0 samples, the computational complexity decreases from O(N 0 N) to O(N 0 log N). Furthermore, we introduce a measure for the amount of order in a self-organising map, and show that the introduced algorithm behaves as well as the original algorithm.
node19:Academic paper with title and abstract:  Prototype and feature selection by sampling and random mutation hill climbing algorithms. : With the goal of reducing computational costs without sacrificing accuracy, we describe two algorithms to find sets of prototypes for nearest neighbor classification. Here, the term prototypes refers to the reference instances used in a nearest neighbor computation the instances with respect to which similarity is assessed in order to assign a class to a new data item. Both algorithms rely on stochastic techniques to search the space of sets of prototypes and are simple to implement. The first is a Monte Carlo sampling algorithm; the second applies random mutation hill climbing. On four datasets we show that only three or four prototypes sufficed to give predictive accuracy equal or superior to a basic nearest neighbor algorithm whose run-time storage costs were approximately 10 to 200 times greater. We briefly investigate how random mutation hill climbing may be applied to select features and prototypes simultaneously. Finally, we explain the performance of the sampling algorithm on these datasets in terms of a statistical measure of the extent of clustering displayed by the target classes.
node20:Academic paper with title and abstract:  ""The LBG-U method for vector quantization An improvement over LBG inspired from neural networks,"" : Internal Report 97-01
node21:Academic paper with title and abstract:  (1998) Modeling dynamic receptive field changes produced by intracortical microstimulation. In press, : Intracortical microstimulation (ICMS) of a localized site in the somatosensory cortex of rats and monkeys for 2-6 hours produces a large increase in the cortical representation of the skin region represented by the ICMS-site neurons before ICMS, with very little effect on the ICMS-site neuron's RF location, RF size, and responsiveness (Recanzone et al., 1992). The ""EXIN"" (afferent excitatory and lateral inhibitory) learning rules (Marshall, 1995) are used to model RF changes during ICMS. The EXIN model produces reorganization of RF topography similar to that observed experimentally. The possible role of inhibitory learning in producing the effects of ICMS is studied by simulating the EXIN model with only lateral inhibitory learning. The model also produces an increase in the cortical representation of the skin region represented by the ICMS-site RF. ICMS is compared to artificial scotoma conditioning (Pettet & Gilbert, 1992) and retinal lesions (Darian-Smith & Gilbert, 1995), and it is suggested that lateral inhibitory learning may be a general principle of cortical plasticity.
node22:Academic paper with title and abstract:  Generalization and exclusive allocation of credit in unsupervised category learning. Network: : Acknowledgements: This research was supported in part by the Office of Naval Research (Cognitive and Neural Sciences, N00014-93-1-0208) and by the Whitaker Foundation (Special Opportunity Grant). We thank George Kalarickal, Charles Schmitt, William Ross, and Douglas Kelly for valuable discussions.",cora_link,lp
"Classify the relationship between two essays denoted as node20 and node21 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Introduces trellis-constrained codes using factor graphs for decoding, with performance matching turbo and LDPC codes.  
node1: Uses EM with Gibbs/mean-field methods for factorial learning under multiple causes with intractable E-step.  
node2: Explores neural networks' online disambiguation and combining with control for systematic grammar processing.  
node3: Examines self-organization of feature maps that develop typologically correct structures.  
node4: Presents alternative discrete-time operators for nonlinear system modeling and analysis.  
node5: Analyzes multiplicative vs subtractive constraints in Hebbian learning, affecting synaptic strength and receptive fields.  
node6: Proposes linear program with equilibrium constraints and Frank-Wolfe algorithm to minimize misclassifications.  
node7: Proposes feedback suppression mechanism for combining associative learning with self-organization in neural networks.  
node8: Explores breaking rotational symmetry in self-organizing maps for modeling neural orientation maps.  
node9: Presents DISLEX model using separate feature maps for modalities in the mental lexicon, simulating language impairments.  
node10: Introduces Boltzmann trees with tree-like connectivity, trained via gradient descent and decimation for supervised learning.  
node11: Analyzes Hebbian learning dynamics via eigenvectors, explaining center-surround and bi-lobed receptive field emergence.  
node12: VISOR uses neural competition/cooperation for robust visual schema learning, handling noise and context in object recognition.  
node13: Introduces neural computation theory, analyzing models and linking to statistics/control theory via a physics-based approach.  
node14: Hierarchical feature maps for script recognition, automating taxonomy and improving efficiency with incomplete inputs.  
node15: Proposes mean-field learning algorithm for unsupervised neural networks, adapting weights via local delta rule on inferred stats.  
node16: Unsupervised convex/conic coding learns basis vectors minimizing reconstruction error with feedback connections.  
node17: Factor graphs unify graphical models, enabling distributed message-passing for computing marginal distributions.  
node18: Maps Bayesian networks to Boltzmann machines for parallel MAP inference using simulated annealing.  
node19: Models topographic mapping and ocular dominance stripes, showing stripe width depends on inter-eye correlation.  
node20: Uses influence combination models in two-layer networks to learn binary distributions, comparing with mixtures and PCA.  
node21: Applies derivation replay in partial-order planners (DerSNLP) for efficient case-based plan generation.  
node22: COMIT combines probabilistic models with fast search (e.g., hillclimbing) for efficient combinatorial optimization.  
node23: Presents learning methods for stochastic feedforward networks (sigmoid/noisy-OR) using gradient ascent without Boltzmann's negative phase.

the connection relationship among the nodes mentioned:
 <node0, node17>,<node1, node16>,<node2, node13>,<node3, node19>,<node4, node13>,<node5, node7>,<node5, node11>,<node6, node13>,<node7, node9>,<node7, node14>,<node7, node19>,<node8, node14>,<node8, node19>,<node9, node13>,<node9, node14>,<node10, node20>,<node11, node13>,<node12, node13>,<node13, node15>,<node13, node19>,<node13, node20>,<node13, node22>,<node16, node20>,<node18, node20>,<node20, node23>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","No, they do not have citation relationships","

node0: Introduces trellis-constrained codes using factor graphs for decoding, with performance matching turbo and LDPC codes.  
node1: Uses EM with Gibbs/mean-field methods for factorial learning under multiple causes with intractable E-step.  
node2: Explores neural networks' online disambiguation and combining with control for systematic grammar processing.  
node3: Examines self-organization of feature maps that develop typologically correct structures.  
node4: Presents alternative discrete-time operators for nonlinear system modeling and analysis.  
node5: Analyzes multiplicative vs subtractive constraints in Hebbian learning, affecting synaptic strength and receptive fields.  
node6: Proposes linear program with equilibrium constraints and Frank-Wolfe algorithm to minimize misclassifications.  
node7: Proposes feedback suppression mechanism for combining associative learning with self-organization in neural networks.  
node8: Explores breaking rotational symmetry in self-organizing maps for modeling neural orientation maps.  
node9: Presents DISLEX model using separate feature maps for modalities in the mental lexicon, simulating language impairments.  
node10: Introduces Boltzmann trees with tree-like connectivity, trained via gradient descent and decimation for supervised learning.  
node11: Analyzes Hebbian learning dynamics via eigenvectors, explaining center-surround and bi-lobed receptive field emergence.  
node12: VISOR uses neural competition/cooperation for robust visual schema learning, handling noise and context in object recognition.  
node13: Introduces neural computation theory, analyzing models and linking to statistics/control theory via a physics-based approach.  
node14: Hierarchical feature maps for script recognition, automating taxonomy and improving efficiency with incomplete inputs.  
node15: Proposes mean-field learning algorithm for unsupervised neural networks, adapting weights via local delta rule on inferred stats.  
node16: Unsupervised convex/conic coding learns basis vectors minimizing reconstruction error with feedback connections.  
node17: Factor graphs unify graphical models, enabling distributed message-passing for computing marginal distributions.  
node18: Maps Bayesian networks to Boltzmann machines for parallel MAP inference using simulated annealing.  
node19: Models topographic mapping and ocular dominance stripes, showing stripe width depends on inter-eye correlation.  
node20: Uses influence combination models in two-layer networks to learn binary distributions, comparing with mixtures and PCA.  
node21: Applies derivation replay in partial-order planners (DerSNLP) for efficient case-based plan generation.  
node22: COMIT combines probabilistic models with fast search (e.g., hillclimbing) for efficient combinatorial optimization.  
node23: Presents learning methods for stochastic feedforward networks (sigmoid/noisy-OR) using gradient ascent without Boltzmann's negative phase.","node0:Academic paper with title and abstract: Trellis-Constrained Codes: We introduce a class of iteratively decodable trellis-constrained codes as a generalization of turbocodes, low-density parity-check codes, serially-concatenated convolutional codes, and product codes. In a trellis-constrained code, multiple trellises interact to define the allowed set of codewords. As a result of these interactions, the minimum-complexity single trellis for the code can have a state space that grows exponentially with block length. However, as with turbocodes and low-density parity-check codes, a decoder can approximate bit-wise maximum a posteriori decoding by using the sum-product algorithm on the factor graph that describes the code. We present two new families of codes, homogenous trellis-constrained codes and ring-connected trellis-constrained codes, and give results that show these codes perform in the same regime as do turbo-codes and low-density parity-check codes.
node1:Academic paper with title and abstract:  ""Factorial learning and the EM algorithm"", : Many real world learning problems are best characterized by an interaction of multiple independent causes or factors. Discovering such causal structure from the data is the focus of this paper. Based on Zemel and Hinton's cooperative vector quantizer (CVQ) architecture, an unsupervised learning algorithm is derived from the Expectation-Maximization (EM) framework. Due to the combinatorial nature of the data generation process, the exact E-step is computationally intractable. Two alternative methods for computing the E-step are proposed: Gibbs sampling and mean-field approximation, and some promising empirical results are presented.
node2:Academic paper with title and abstract: Disambiguation and Grammar as Emergent Soft Constraints: When reading a sentence such as ""The diplomat threw the ball in the ballpark for the princess"" our interpretation changes from a dance event to baseball and back to dance. Such on-line disambiguation happens automatically and appears to be based on dynamically combining the strengths of association between the keywords and the two senses. Subsymbolic neural networks are very good at modeling such behavior. They learn word meanings as soft constraints on interpretation, and dynamically combine these constraints to form the most likely interpretation. On the other hand, it is very difficult to show how systematic language structures such as relative clauses could be processed in such a system. The network would only learn to associate them to specific contexts and would not be able to process new combinations of them. A closer look at understanding embedded clauses shows that humans are not very systematic in processing grammatical structures either. For example, ""The girl who the boy who the girl who lived next door blamed hit cried"" is very difficult to understand, whereas ""The car that the man who the dog that had rabies bit drives is in the garage"" is not. This difference emerges from the same semantic constraints that are at work in the disambiguation task. In this chapter we will show how the subsymbolic parser can be combined with high-level control that allows the system to process novel combinations of relative clauses systematically, while still being sensitive to the semantic constraints.
node3:Academic paper with title and abstract: Breaking Rotational Symmetry in a Self-Organizing Map-Model for Orientation Map Development: 
node4:Academic paper with title and abstract: Alternative Discrete-Time Operators and Their Application to Nonlinear Models: 
node5:Academic paper with title and abstract: The Role of Constraints in Hebbian Learning: Models of unsupervised correlation-based (Hebbian) synaptic plasticity are typically unstable: either all synapses grow until each reaches the maximum allowed strength, or all synapses decay to zero strength. A common method of avoiding these outcomes is to use a constraint that conserves or limits the total synaptic strength over a cell. We study the dynamical effects of such constraints. Two methods of enforcing a constraint are distinguished, multiplicative and subtractive. For otherwise linear learning rules, multiplicative enforcement of a constraint results in dynamics that converge to the principal eigenvector of the operator determining unconstrained synaptic development. Subtractive enforcement, in contrast, typically leads to a final state in which almost all synaptic strengths reach either the maximum or minimum allowed value. This final state is often dominated by weight configurations other than the principal eigenvector of the unconstrained operator. Multiplicative enforcement yields a ""graded"" receptive field in which most mutually correlated inputs are represented, whereas subtractive enforcement yields a receptive field that is ""sharpened"" to a subset of maximally-correlated inputs. If two equivalent input populations (e.g. two eyes) innervate a common target, multiplicative enforcement prevents their segregation (ocular dominance segregation) when the two populations are weakly correlated; whereas subtractive enforcement allows segregation under these circumstances. These results may be used to understand constraints both over output cells and over input cells. A variety of rules that can implement constrained dynamics are discussed.
node6:Academic paper with title and abstract: Misclassification Minimization: The problem of minimizing the number of misclassified points by a plane, attempting to separate two point sets with intersecting convex hulls in n-dimensional real space, is formulated as a linear program with equilibrium constraints (LPEC). This general LPEC can be converted to an exact penalty problem with a quadratic objective and linear constraints. A Frank-Wolfe-type algorithm is proposed for the penalty problem that terminates at a stationary point or a global solution. Novel aspects of the approach include: (i) A linear complementarity formulation of the step function that ""counts"" misclassifications, (ii) Exact penalty formulation without boundedness, nondegeneracy or constraint qualification assumptions, (iii) An exact solution extraction from the sequence of minimizers of the penalty function for a finite value of the penalty parameter for the general LPEC and an explicitly exact solution for the LPEC with uncoupled constraints, and (iv) A parametric quadratic programming formulation of the LPEC associated with the misclassification minimization problem.
node7:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node8:Academic paper with title and abstract:  Self-organized formation of typologically correct feature maps. : 2] D. E. Rumelhart, G. E. Hinton and R. J. Williams, ""Learning Internal Representations by Error Propagation"", in D. E. Rumelhart and J. L. McClelland (eds.) Parallel Distributed Processing: Explorations in the Microstructure of Cognition (Vol. 1), MIT Press (1986).
node9:Academic paper with title and abstract:  A distributed feature map model of the lexicon. : DISLEX is an artificial neural network model of the mental lexicon. It was built to test com-putationally whether the lexicon could consist of separate feature maps for the different lexical modalities and the lexical semantics, connected with ordered pathways. In the model, the orthographic, phonological, and semantic feature maps and the associations between them are formed in an unsupervised process, based on cooccurrence of the lexical symbol and its meaning. After the model is organized, various damage to the lexical system can be simulated, resulting in dyslexic and category-specific aphasic impairments similar to those observed in human patients.
node10:Academic paper with title and abstract:  Learning in Boltzmann trees. : We introduce a large family of Boltzmann machines that can be trained using standard gradient descent. The networks can have one or more layers of hidden units, with tree-like connectivity. We show how to implement the supervised learning algorithm for these Boltzmann machines exactly, without resort to simulated or mean-field annealing. The stochastic averages that yield the gradients in weight space are computed by the technique of decimation. We present results on the problems of N -bit parity and the detection of hidden symmetries.
node11:Academic paper with title and abstract:  ""Analysis of Linsker\'s simulations of Hebbian rules,"" : Linsker has reported the development of structured receptive fields in simulations using a Hebb-type synaptic plasticity rule in a feed-forward linear network. The synapses develop under dynamics determined by a matrix that is closely related to the covariance matrix of input cell activities. We analyse the dynamics of the learning rule in terms of the eigenvectors of this matrix. These eigenvectors represent independently evolving weight structures. Some general theorems are presented regarding the properties of these eigenvectors and their eigenvalues. For a general covariance matrix four principal parameter regimes are predicted. We concentrate on the gaussian covariances at layer B ! C of Linsker's network. Analytic and numerical solutions for the eigenvectors at this layer are presented. Three eigenvectors dominate the dynamics: a DC eigenvector, in which all synapses have the same sign; a bi-lobed, oriented eigenvector; and a circularly symmetric, centre-surround eigenvector. Analysis of the circumstances in which each of these vectors dominates yields an explanation of the emergence of centre-surround structures and symmetry-breaking bi-lobed structures. Criteria are developed estimating the boundary of the parameter regime in which centre-surround structures emerge. The application of our analysis to Linsker's higher layers, at which the covariance functions were oscillatory, is briefly discussed.
node12:Academic paper with title and abstract:  Learning Visual Schemas in Neural Networks for Object Recognition and Scene Analysis, : VISOR is a large connectionist system that shows how visual schemas can be learned, represented, and used through mechanisms natural to neural networks. Processing in VISOR is based on cooperation, competition, and parallel bottom-up and top-down activation of schema representations. Simulations show that VISOR is robust against noise and variations in the inputs and parameters. It can indicate the confidence of its analysis, pay attention to important minor differences, and use context to recognize ambiguous objects. Experiments also suggest that the representation and learning are stable, and its behavior is consistent with human processes such as priming, perceptual reversal, and circular reaction in learning. The schema mechanisms of VISOR can serve as a starting point for building robust high-level vision systems, and perhaps for schema-based motor control and natural language processing systems as well.
node13:Academic paper with title and abstract:  Introduction to the Theory of Neural Computa 92 tion. : Neural computation, also called connectionism, parallel distributed processing, neural network modeling or brain-style computation, has grown rapidly in the last decade. Despite this explosion, and ultimately because of impressive applications, there has been a dire need for a concise introduction from a theoretical perspective, analyzing the strengths and weaknesses of connectionist approaches and establishing links to other disciplines, such as statistics or control theory. The Introduction to the Theory of Neural Computation by Hertz, Krogh and Palmer (subsequently referred to as HKP) is written from the perspective of physics, the home discipline of the authors. The book fulfills its mission as an introduction for neural network novices, provided that they have some background in calculus, linear algebra, and statistics. It covers a number of models that are often viewed as disjoint. Critical analyses and fruitful comparisons between these models
node14:Academic paper with title and abstract:  Script recognition with hierarchical feature maps. : The hierarchical feature map system recognizes an input story as an instance of a particular script by classifying it at three levels: scripts, tracks and role bindings. The recognition taxonomy, i.e. the breakdown of each script into the tracks and roles, is extracted automatically and independently for each script from examples of script instantiations in an unsupervised self-organizing process. The process resembles human learning in that the differentiation of the most frequently encountered scripts become gradually the most detailed. The resulting structure is a hierachical pyramid of feature maps. The hierarchy visualizes the taxonomy and the maps lay out the topology of each level. The number of input lines and the self-organization time are considerably reduced compared to the ordinary single-level feature mapping. The system can recognize incomplete stories and recover the missing events. The taxonomy also serves as memory organization for script-based episodic memory. The maps assign a unique memory location for each script instantiation. The most salient parts of the input data are separated and most resources are concentrated on representing them accurately.
node15:Academic paper with title and abstract:  (in press). A mean field learning algorithm for unsupervised neural networks. : We introduce a learning algorithm for unsupervised neural networks based on ideas from statistical mechanics. The algorithm is derived from a mean field approximation for large, layered sigmoid belief networks. We show how to (approximately) infer the statistics of these networks without resort to sampling. This is done by solving the mean field equations, which relate the statistics of each unit to those of its Markov blanket. Using these statistics as target values, the weights in the network are adapted by a local delta rule. We evaluate the strengths and weaknesses of these networks for problems in statistical pattern recognition.
node16:Academic paper with title and abstract:  Unsupervised learning by convex and conic coding. : Unsupervised learning algorithms based on convex and conic encoders are proposed. The encoders find the closest convex or conic combination of basis vectors to the input. The learning algorithms produce basis vectors that minimize the reconstruction error of the encoders. The convex algorithm develops locally linear models of the input, while the conic algorithm discovers features. Both algorithms are used to model handwritten digits and compared with vector quantization and principal component analysis. The neural network implementations involve feedback connections that project a reconstruction back to the input layer.
node17:Academic paper with title and abstract:  ""Factor graphs and algorithms,"" : A factor graph is a bipartite graph that expresses how a global function of several variables factors into a product of local functions. Factor graphs subsume many other graphical models, including Bayesian networks, Markov random fields, and Tanner graphs. We describe a general algorithm for computing ""marginals"" of the global function by distributed message-passing in the corresponding factor graph. A wide variety of algorithms developed in the artificial intelligence, statistics, signal processing, and digital communications communities can be derived as specific instances of this general algorithm, including Pearl's ""belief propagation"" and ""belief revision"" algorithms, the fast Fourier transform, the Viterbi algorithm, the forward/backward algorithm, and the iterative ""turbo"" decoding algorithm.
node18:Academic paper with title and abstract:  Mapping Bayesian networks to Boltzmann machines. : We study the task of tnding a maximal a posteriori (MAP) instantiation of Bayesian network variables, given a partial value assignment as an initial constraint. This problem is known to be NP-hard, so we concentrate on a stochastic approximation algorithm, simulated annealing. This stochastic algorithm can be realized as a sequential process on the set of Bayesian network variables, where only one variable is allowed to change at a time. Consequently, the method can become impractically slow as the number of variables increases. We present a method for mapping a given Bayesian network to a massively parallel Bolztmann machine neural network architecture, in the sense that instead of using the normal sequential simulated annealing algorithm, we can use a massively parallel stochastic process on the Boltzmann machine architecture. The neural network updating process provably converges to a state which solves a given MAP task.
node19:Academic paper with title and abstract:  Topography and ocular dominance: A model exploring positive correla-tions. : The map from eye to brain in vertebrates is topographic, i.e. neighbouring points in the eye map to neighbouring points in the brain. In addition, when two eyes innervate the same target structure, the two sets of fibres segregate to form ocular dominance stripes. Experimental evidence from the frog and goldfish suggests that these two phenomena may be subserved by the same mechanisms. We present a computational model that addresses the formation of both topography and ocular dominance. The model is based on a form of competitive learning with subtractive enforcement of a weight normalization rule. Inputs to the model are distributed patterns of activity presented simultaneously in both eyes. An important aspect of this model is that ocular dominance segregation can occur when the two eyes are positively correlated, whereas previous models have tended to assume zero or negative correlations between the eyes. This allows investigation of the dependence of the pattern of stripes on the degree of correlation between the eyes: we find that increasing correlation leads to narrower stripes. Experiments are suggested to test this prediction.
node20:Academic paper with title and abstract:  Unsupevised learning of distributions on binary vectors using two-layer networks. : We present a distribution model for binary vectors, called the influence combination model and show how this model can be used as the basis for unsupervised learning algorithms for feature selection. The model is closely related to the Harmonium model defined by Smolensky [RM86][Ch.6]. In the first part of the paper we analyze properties of this distribution representation scheme. We show that arbitrary distributions of binary vectors can be approximated by the combination model. We show how the weight vectors in the model can be interpreted as high order correlation patterns among the input bits. We compare the combination model with the mixture model and with principle component analysis. In the second part of the paper we present two algorithms for learning the combination model from examples. The first algorithm is based on gradient ascent. Here we give a closed form for this gradient that is significantly easier to compute than the corresponding gradient for the general Boltzmann machine. The second learning algorithm is a greedy method that creates the hidden units and computes their weights one at a time. This method is a variant of projection pursuit density estimation. In the third part of the paper we give experimental results for these learning methods on synthetic data and on natural data of handwritten digit images.
node21:Academic paper with title and abstract:  Derivation replay for partial-order planning. : Derivation replay was first proposed by Carbonell as a method of transferring guidance from a previous problem-solving episode to a new one. Subsequent implementations have used state-space planning as the underlying methodology. This paper is motivated by the acknowledged superiority of partial-order (PO) planners in plan generation, and is an attempt to bring derivation replay into the realm of partial-order planning. Here we develop DerSNLP, a framework for doing replay in SNLP, a partial-order plan-space planner, and analyze its relative effectiveness. We will argue that the decoupling of planning (derivation) order and the execution order of plan steps, provided by partial-order planners, enables DerSNLP to exploit the guidance of previous cases in a more efficient and straightforward fashion. We validate our hypothesis through empirical comparisons between DerSNLP and two replay systems based on state-space planners.
node22:Academic paper with title and abstract:  (1997b) Probabilistic Modeling for Combinatorial Optimization, : Probabilistic models have recently been utilized for the optimization of large combinatorial search problems. However, complex probabilistic models that attempt to capture inter-parameter dependencies can have prohibitive computational costs. The algorithm presented in this paper, termed COMIT, provides a method for using probabilistic models in conjunction with fast search techniques. We show how COMIT can be used with two very different fast search algorithms: hillclimbing and Population-based incremental learning (PBIL). The resulting algorithms maintain many of the benefits of probabilistic modeling, with far less computational expense. Extensive empirical results are provided; COMIT has been successfully applied to jobshop scheduling, traveling salesman, and knapsack problems. This paper also presents a review of probabilistic modeling for combi natorial optimization.
node23:Academic paper with title and abstract:  Learning stochastic feedforward networks. : Connectionist learning procedures are presented for ""sigmoid"" and ""noisy-OR"" varieties of stochastic feedforward network. These networks are in the same class as the ""belief networks"" used in expert systems. They represent a probability distribution over a set of visible variables using hidden variables to express correlations. Conditional probability distributions can be exhibited by stochastic simulation for use in tasks such as classification. Learning from empirical data is done via a gradient-ascent method analogous to that used in Boltzmann machines, but due to the feedforward nature of the connections, the negative phase of Boltzmann machine learning is unnecessary. Experimental results show that, as a result, learning in a sigmoid feedforward network can be faster than in a Boltzmann machine. These networks have other advantages over Boltzmann machines in pattern classification and decision making applications, and provide a link between work on connectionist learning and work on the representation of expert knowledge.",cora_link,lp
"Classify the relationship between two essays denoted as node3 and node6 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Gaussian Processes for Regression using Bayesian analysis with matrix operations for prior distributions over functions.  
node1: AA1 algorithm for ASOCS demonstrates convergence proofs and generalization analysis with real-world simulations.  
node2: PASOCS model supports flexible generalization styles for diverse applications via distributed rule-based learning.  
node3: Causal discovery via Bayesian MML method outperforms TETRAD II in linear model recovery from generated data.  
node4: Empirical comparison of decision tree pruning vs. averaging, focusing on extended fanned set efficiency in noisy domains.  
node5: DMP1 trains MLPs dynamically with genetic algorithms, ensuring convergence through binary tree node allocation.  
node6: Structure-Mapping Engine (SME) enables efficient analogy processing with polynomial complexity for cognitive/ML tasks.  
node7: Extentron grows perceptron networks using perceptron rules for nonlinear separation, with fast, parameter-efficient learning.  
node8: Bayesian Methods for Adaptive Models explores statistical inference in flexible model structures.  
node9: Bayesian framework for backpropagation networks enables automatic model selection via Occam's razor and evidence.  
node10: Bayesian active learning selects informative data via three criteria, assuming correct hypothesis space.  
node11: Classifies neural network applications, emphasizing strengths like parallelism and generalization over alternative methods.  
node12: AA2 ASOCS model improves memory efficiency for adaptive logic with incremental rule learning in parallel systems.  
node13: Location-Independent Transformations enable dynamic BP networks' efficient parallel hardware implementation.  
node14: VLSI multi-chip module implementation of PASOCS for real-time parallel processing in robotics and control.  
node15: AA1’s self-organizing discriminant network achieves guaranteed convergence with strong empirical generalization.  
node16: Implements probabilistic regression in BUGS using Gibbs sampling for complex models and noise-level inference.  
node17: Priority ASOCS uses rule priorities for faster learning, reducing complexity in rule-based parallel systems.  
node18: Intelligible ensembles via shallow decision stumps and pruning for clarity without sacrificing predictive accuracy.  
node19: Monte Carlo comparison of non-hierarchical unsupervised classifiers’ performance.  
node20: Selects relevant inputs via mutual information and nonparametric density for improved generalization.  
node21: AA3 ASOCS simplifies rule-based parallel processing with cost-effective, distributed learning architecture.  
node22: Compares MML and Bayesian approaches in encoding, highlighting differences in message length and applications.  
node23: Multi-chip module neural network implementation addresses dense interconnect challenges for dynamic models.  
node24: MML criteria for overlapping Gaussian mixtures; experiments and improvements for accurate parameter estimation.

the connection relationship among the nodes mentioned:
 <node0, node9>,<node1, node12>,<node1, node17>,<node1, node21>,<node2, node12>,<node2, node17>,<node2, node21>,<node3, node22>,<node4, node18>,<node4, node22>,<node5, node12>,<node7, node13>,<node8, node9>,<node8, node10>,<node8, node16>,<node9, node10>,<node9, node16>,<node9, node20>,<node9, node22>,<node11, node21>,<node12, node13>,<node12, node14>,<node12, node15>,<node12, node21>,<node12, node23>,<node13, node14>,<node13, node23>,<node14, node17>,<node14, node21>,<node14, node23>,<node15, node21>,<node17, node23>,<node19, node24>,<node21, node23>,<node22, node24>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","No, they do not have citation relationships","

node0: Gaussian Processes for Regression using Bayesian analysis with matrix operations for prior distributions over functions.  
node1: AA1 algorithm for ASOCS demonstrates convergence proofs and generalization analysis with real-world simulations.  
node2: PASOCS model supports flexible generalization styles for diverse applications via distributed rule-based learning.  
node3: Causal discovery via Bayesian MML method outperforms TETRAD II in linear model recovery from generated data.  
node4: Empirical comparison of decision tree pruning vs. averaging, focusing on extended fanned set efficiency in noisy domains.  
node5: DMP1 trains MLPs dynamically with genetic algorithms, ensuring convergence through binary tree node allocation.  
node6: Structure-Mapping Engine (SME) enables efficient analogy processing with polynomial complexity for cognitive/ML tasks.  
node7: Extentron grows perceptron networks using perceptron rules for nonlinear separation, with fast, parameter-efficient learning.  
node8: Bayesian Methods for Adaptive Models explores statistical inference in flexible model structures.  
node9: Bayesian framework for backpropagation networks enables automatic model selection via Occam's razor and evidence.  
node10: Bayesian active learning selects informative data via three criteria, assuming correct hypothesis space.  
node11: Classifies neural network applications, emphasizing strengths like parallelism and generalization over alternative methods.  
node12: AA2 ASOCS model improves memory efficiency for adaptive logic with incremental rule learning in parallel systems.  
node13: Location-Independent Transformations enable dynamic BP networks' efficient parallel hardware implementation.  
node14: VLSI multi-chip module implementation of PASOCS for real-time parallel processing in robotics and control.  
node15: AA1’s self-organizing discriminant network achieves guaranteed convergence with strong empirical generalization.  
node16: Implements probabilistic regression in BUGS using Gibbs sampling for complex models and noise-level inference.  
node17: Priority ASOCS uses rule priorities for faster learning, reducing complexity in rule-based parallel systems.  
node18: Intelligible ensembles via shallow decision stumps and pruning for clarity without sacrificing predictive accuracy.  
node19: Monte Carlo comparison of non-hierarchical unsupervised classifiers’ performance.  
node20: Selects relevant inputs via mutual information and nonparametric density for improved generalization.  
node21: AA3 ASOCS simplifies rule-based parallel processing with cost-effective, distributed learning architecture.  
node22: Compares MML and Bayesian approaches in encoding, highlighting differences in message length and applications.  
node23: Multi-chip module neural network implementation addresses dense interconnect challenges for dynamic models.  
node24: MML criteria for overlapping Gaussian mixtures; experiments and improvements for accurate parameter estimation.","node0:Academic paper with title and abstract: In Advances in Neural Information Processing Systems 8  Gaussian Processes for Regression: The Bayesian analysis of neural networks is difficult because a simple prior over weights implies a complex prior distribution over functions. In this paper we investigate the use of Gaussian process priors over functions, which permit the predictive Bayesian analysis for fixed values of hyperparameters to be carried out exactly using matrix operations. Two methods, using optimization and averaging (via Hybrid Monte Carlo) over hyperparameters have been tested on a number of challenging problems and have produced excellent results.
node1:Academic paper with title and abstract: Analysis of the Convergence and Generalization of AA1: AA1 is an incremental learning algorithm for Adaptive Self-Organizing Concurrent Systems (ASOCS). ASOCS are self-organizing, dynamically growing networks of computing nodes. AA1 learns by discrimination and implements knowledge in a distributed fashion over all the nodes. This paper reviews AA1 from the perspective of convergence and generalization. A formal proof that AA1 converges on any arbitrary Boolean instance set is given. A discussion of generalization and other aspects of AA1, including the problem of handling inconsistency, follows. Results of simulations with real-world data are presented. They show that AA1 gives promising generalization.
node2:Academic paper with title and abstract: Towards a General Distributed Platform for Learning and Generalization and Word Perfect Corp. 1 Introduction: Different learning models employ different styles of generalization on novel inputs. This paper proposes the need for multiple styles of generalization to support a broad application base. The Priority ASOCS model (Priority Adaptive Self-Organizing Concurrent System) is overviewed and presented as a potential platform which can support multiple generalization styles. PASOCS is an adaptive network composed of many simple computing elements operating asynchronously and in parallel. The PASOCS can operate in either a data processing mode or a learning mode. During data processing mode, the system acts as a parallel hardware circuit. During learning mode, the PASOCS incorporates rules, with attached priorities, which represent the application being learned. Learning is accomplished in a distributed fashion in time logarithmic in the number of rules. The new model has significant learning time and space complexity improvements over previous models. Generalization in a learning system is at best always a guess. The proper style of generalization is application dependent. Thus, one style of generalization may not be sufficient to allow a learning system to support a broad spectrum of applications [14]. Current connectionist models use one specific style of generalization which is implicit in the learning algorithm. We suggest that the type of generalization used be a self-organizing parameter of the learning system which can be discovered as learning takes place. This requires a) a model which allows flexible generalization styles, and b) mechanisms to guide the system into the best style of generalization for the problem being learned. This paper overviews a learning model which seeks to efficiently support requirement a) above. The model is called Priority ASOCS (PASOCS) [9], which is a member of a class of models called ASOCS (Adaptive Self-Organizing Concurrent Systems) [5]. Section 2 of this paper gives an example of how different generalization techniques can approach a problem. Section 3 presents an overview of PASOCS. Section 4 illustrates how flexible generalization can be supported. Section 5 concludes the paper.
node3:Academic paper with title and abstract: Causal Discovery via MML: Automating the learning of causal models from sample data is a key step toward incorporating machine learning in the automation of decision-making and reasoning under uncertainty. This paper presents a Bayesian approach to the discovery of causal models, using a Minimum Message Length (MML) method. We have developed encoding and search methods for discovering linear causal models. The initial experimental results presented in this paper show that the MML induction approach can recover causal models from generated data which are quite accurate reflections of the original models; our results compare favorably with those of the TETRAD II program of Spirtes et al. [25] even when their algorithm is supplied with prior temporal information and MML is not.
node4:Academic paper with title and abstract:  On Pruning and Averaging Decision Trees, : Pruning a decision tree is considered by some researchers to be the most important part of tree building in noisy domains. While, there are many approaches to pruning, an alternative approach of averaging over decision trees has not received as much attention. We perform an empirical comparison of pruning with the approach of averaging over decision trees. For this comparison we use a computa-tionally efficient method of averaging, namely averaging over the extended fanned set of a tree. Since there are a wide range of approaches to pruning, we compare tree averaging with a traditional pruning approach, along with an optimal pruning approach.
node5:Academic paper with title and abstract:  A Provably Convergent Dynamic Training Method for Multilayer Perceptron Networks. : This paper presents a new method for training multilayer perceptron networks called DMP1 (Dynamic Multilayer Perceptron 1). The method is based upon a divide and conquer approach which builds networks in the form of binary trees, dynamically allocating nodes and layers as needed. The individual nodes of the network are trained using a gentetic algorithm. The method is capable of handling real-valued inputs and a proof is given concerning its convergence properties of the basic model. Simulation results show that DMP1 performs favorably in comparison with other learning algorithms.
node6:Academic paper with title and abstract:  The Structure-Mapping Engine: Algorithms and Examples. : This paper describes the Structure-Mapping Engine (SME), a program for studying analogical processing. SME has been built to explore Gentner's Structure-mapping theory of analogy, and provides a ""tool kit"" for constructing matching algorithms consistent with this theory. Its flexibility enhances cognitive simulation studies by simplifying experimentation. Furthermore, SME is very efficient, making it a useful component in machine learning systems as well. We review the Structure-mapping theory and describe the design of the engine. We analyze the complexity of the algorithm, and demonstrate that most of the steps are polynomial, typically bounded by O (N 2 ). Next we demonstrate some examples of its operation taken from our cognitive simulation studies and work in machine learning. Finally, we compare SME to other analogy programs and discuss several areas for future work. This paper appeared in Artificial Intelligence, 41, 1989, pp 1-63. For more information, please contact forbus@ils.nwu.edu
node7:Academic paper with title and abstract:  Growing Layers of Perceptrons: Introducing the Extentron Algorithm, : vations of perceptrons: (1) when the perceptron learning algorithm cycles among hyperplanes, the hyperplanes may be compared to select one that gives a best split of the examples, and (2) it is always possible for the perceptron to build a hyper- plane that separates at least one example from all the rest. We describe the Extentron which grows multi-layer networks capable of distinguishing non- linearly-separable data using the simple perceptron rule for linear threshold units. The resulting algorithm is simple, very fast, scales well to large prob - lems, retains the convergence properties of the perceptron, and can be completely specified using only two parameters. Results are presented comparing the Extentron to other neural network paradigms and to symbolic learning systems.
node8:Academic paper with title and abstract:  Bayesian Methods for Adaptive Models. : 
node9:Academic paper with title and abstract:  A practical Bayesian framework for backpropagation networks. : A quantitative and practical Bayesian framework is described for learning of mappings in feedforward networks. The framework makes possible: (1) objective comparisons between solutions using alternative network architectures; (2) objective stopping rules for network pruning or growing procedures; (3) objective choice of magnitude and type of weight decay terms or additive regularisers (for penalising large weights, etc.); (4) a measure of the effective number of well-determined parameters in a model; (5) quantified estimates of the error bars on network parameters and on network output; (6) objective comparisons with alternative learning and interpolation models such as splines and radial basis functions. The Bayesian `evidence' automatically embodies `Occam's razor,' penalising over-flexible and over-complex models. The Bayesian approach helps detect poor underlying assumptions in learning models. For learning models well matched to a problem, a good correlation between generalisation ability This paper makes use of the Bayesian framework for regularisation and model comparison described in the companion paper `Bayesian interpolation' (MacKay, 1991a). This framework is due to Gull and Skilling (Gull, 1989a). and the Bayesian evidence is obtained.
node10:Academic paper with title and abstract:  Information-Based Objective Functions for Active Data Selection, : Learning can be made more efficient if we can actively select particularly salient data points. Within a Bayesian learning framework, objective functions are discussed which measure the expected informativeness of candidate measurements. Three alternative specifications of what we want to gain information about lead to three different criteria for data selection. All these criteria depend on the assumption that the hypothesis space is correct, which may prove to be their main weakness.
node11:Academic paper with title and abstract:  Neural Network Applicability: Classifying the Problem Space, : The tremendous current effort to propose neurally inspired methods of computation forces closer scrutiny of real world application potential of these models. This paper categorizes applications into classes and particularly discusses features of applications which make them efficiently amenable to neural network methods. Computational machines do deterministic mappings of inputs to outputs and many computational mechanisms have been proposed for problem solutions. Neural network features include parallel execution, adaptive learning, generalization, and fault tolerance. Often, much effort is given to a model and applications which can already be implemented in a much more efficient way with an alternate technology. Neural networks are potentially powerful devices for many classes of applications, but not all. However, it is proposed that the class of applications for which neural networks are efficient is both large and commonly occurring in nature. Comparison of supervised, unsupervised, and generalizing systems is also included.
node12:Academic paper with title and abstract:  A self-adjusting dynamic logic module. : This paper presents an ASOCS (Adaptive Self-Organizing Concurrent System) model for massively parallel processing of incrementally defined rule systems in such areas as adaptive logic, robotics, logical inference, and dynamic control. An ASOCS is an adaptive network composed of many simple computing elements operating asynchronously and in parallel. This paper focuses on Adaptive Algorithm 2 (AA2) and details its architecture and learning algorithm. AA2 has significant memory and knowledge maintenance advantages over previous ASOCS models. An ASOCS can operate in either a data processing mode or a learning mode. During learning mode, the ASOCS is given a new rule expressed as a boolean conjunction. The AA2 learning algorithm incorporates the new rule in a distributed fashion in a short, bounded time. During data processing mode, the ASOCS acts as a parallel hardware circuit.
node13:Academic paper with title and abstract:  An Efficient Transformation for Implementing Two-Layer FeedForward Neural Networks. : Most Artificial Neural Networks (ANNs) have a fixed topology during learning, and often suffer from a number of shortcomings as a result. Variations of ANNs that use dynamic topologies have shown ability to overcome many of these problems. This paper introduces Location-Independent Transformations (LITs) as a general strategy for implementing distributed feedforward networks that use dynamic topologies (dynamic ANNs) efficiently in parallel hardware. A LIT creates a set of location-independent nodes, where each node computes its part of the network output independent of other nodes, using local information. This type of transformation allows efficient support for adding and deleting nodes dynamically during learning. In particular, this paper presents an LIT for dynamic Backpropagation networks with a single hidden layer. The complexity of both learning and execution algorithms is O(n+p+logm) for a single pattern, where nis the number of inputs, p is the number of outputs, and m is the number of hidden nodes in the original network. Keywords: Neural Networks, Backpropagation, Implementation Design, Dynamic Topologies, Reconfigurable Architectures.
node14:Academic paper with title and abstract:  A VLSI Implementation of a Parallel, Self-Organizing Learning Model, : This paper presents a VLSI implementation of the Priority Adaptive Self-Organizing Concurrent System (PASOCS) learning model that is built using a multi-chip module (MCM) substrate. Many current hardware implementations of neural network learning models are direct implementations of classical neural network structures|a large number of simple computing nodes connected by a dense number of weighted links. PASOCS is one of a class of ASOCS (Adaptive Self-Organizing Concurrent System) connectionist models whose overall goal is the same as classical neural networks models, but whose functional mechanisms differ significantly. This model has potential application in areas such as pattern recognition, robotics, logical inference, and dynamic control.
node15:Academic paper with title and abstract:  A Generalizing Adaptive Discriminant Network. : This paper overviews the AA1 (Adaptive Algorithm 1) model of ASOCS the (Adaptive Self - Organizing Concurrent Systems) approach. It also presents promising empirical generalization results of AA1 with actual data. AA1 is a topologically dynamic network which grows to fit the problem being learned. AA1 generalizes in a self-organizing fashion to a network which seeks to find features which discriminate between concepts. Convergence to a training set is both guaranteed and bounded linearly in time.
node16:Academic paper with title and abstract:  MacKay (1995). Probabilistic networks: new models and new methods. : In this paper I describe the implementation of a probabilistic regression model in BUGS. BUGS is a program that carries out Bayesian inference on statistical problems using a simulation technique known as Gibbs sampling. It is possible to implement surprisingly complex regression models in this environment. I demonstrate the simultaneous inference of an interpolant and an input-dependent noise level.
node17:Academic paper with title and abstract:  Priority ASOCS. : This paper presents an ASOCS (Adaptive Self-Organizing Concurrent System) model for massively parallel processing of incrementally defined rule systems in such areas as adaptive logic, robotics, logical inference, and dynamic control. An ASOCS is an adaptive network composed of many simple computing elements operating asynchronously and in parallel. An ASOCS can operate in either a data processing mode or a learning mode. During data processing mode, an ASOCS acts as a parallel hardware circuit. During learning mode, an ASOCS incorporates a rule expressed as a Boolean conjunction in a distributed fashion in time logarithmic in the number of rules. This paper proposes a learning algorithm and architecture for Priority ASOCS. This new ASOCS model uses rules with priorities. The new model has significant learning time and space complexity improvements over previous models. Non-von Neumann architectures such as neural networks attack the word-at-a-time bottleneck of traditional computing systems [1]. Neural networks learn input-output mappings using highly distributed processing and memory [10,11,12]. Their numerous simple processing elements with modifiable weighted links permit a high degree of parallelism. A typical neural network has fixed topology. It learns by modifying weighted links between nodes. A new class of connectionist architectures has been proposed called ASOCS (Adaptive Self-Organizing Concurrent Systems) [4,5]. ASOCS models support efficient computation through self-organized learning and parallel execution. Learning is done through the incremental presentation of rules and/or examples. ASOCS models learn by modifying their topology. Data types include Boolean and multi-state variables; recent models support analog variables. The model incorporates rules into an adaptive logic network in a parallel and self organizing fashion. In processing mode, ASOCS supports fully parallel execution on actual inputs according to the learned rules. The adaptive logic network acts as a parallel hardware circuit during execution, mapping n input boolean vectors into m output boolean vectors, in a combinatoric fashion. The overall philosophy of ASOCS follows the high level goals of current neural network models. However, the mechanisms of learning and execution vary significantly. The ASOCS logic network is topologically dynamic with the network growing to efficiently fit the specific application. Current ASOCS models are based on digital nodes. ASOCS also supports use of symbolic and heuristic learning mechanisms, thus combining the parallelism and distributed nature of connectionist computing with the potential power of AI symbolic learning. A proof of concept ASOCS chip has been developed [2].
node18:Academic paper with title and abstract:  On the Induction of Intelligible Ensembles, : Ensembles of classifiers, e.g. decision trees, often exhibit greater predictive accuracy than single classifiers alone. Bagging and boosting are two standard ways of generating and combining multiple classifiers. Unfortunately, the increase in predictive performance is usually linked to a dramatic decrease in intelligibility: ensembles are more or less black boxes comparable to neural networks. So far attempts at pruning of ensembles have not been very successful, approximately reducing ensembles into half. This paper describes a different approach which both tries to keep ensemble-sizes small during induction already and also limits the complexity of single classifiers rigorously. Single classifiers are decision-stumps of a prespecified maximal depth. They are combined by majority voting. Ensembles are induced and pruned by a simple hill-climbing procedure. These ensembles can reasonably be transformed into equivalent decision trees. We conduct some empirical evaluation to investigate both predictive accuracies and classifier complexities.
node19:Academic paper with title and abstract:  Montel carlo comparison of non-hierarchical unsupervised classifiers, : 
node20:Academic paper with title and abstract:  Selecting input variables using mutual information and nonparamteric density estimation. : In learning problems where a connectionist network is trained with a finite sized training set, better generalization performance is often obtained when unneeded weights in the network are eliminated. One source of unneeded weights comes from the inclusion of input variables that provide little information about the output variables. We propose a method for identifying and eliminating these input variables. The method first determines the relationship between input and output variables using nonparametric density estimation and then measures the relevance of input variables using the information theoretic concept of mutual information. We present results from our method on a simple toy problem and a nonlinear time series.
node21:Academic paper with title and abstract:  A self-organizing binary decision tree for incrementally defined rule based systems. : This paper presents an ASOCS (adaptive self-organizing concurrent system) model for massively parallel processing of incrementally defined rule systems in such areas as adaptive logic, robotics, logical inference, and dynamic control. An ASOCS is an adaptive network composed of many simple computing elements operating asynchronously and in parallel. This paper focuses on adaptive algorithm 3 (AA3) and details its architecture and learning algorithm. It has advantages over previous ASOCS models in simplicity, implementability, and cost. An ASOCS can operate in either a data processing mode or a learning mode. During the data processing mode, an ASOCS acts as a parallel hardware circuit. In learning mode, rules expressed as boolean conjunctions are incrementally presented to the ASOCS. All ASOCS learning algorithms incorporate a new rule in a distributed fashion in a short, bounded time.
node22:Academic paper with title and abstract:  MML and Bayesianism: similarities and differences. : Tech Report 207 Department of Computer Science, Monash University, Clayton, Vic. 3168, Australia Abstract: This paper continues the introduction to minimum encoding inductive inference given by Oliver and Hand. This series of papers was written with the objective of providing an introduction to this area for statisticians. We describe the message length estimates used in Wallace's Minimum Message Length (MML) inference and Rissanen's Minimum Description Length (MDL) inference. The differences in the message length estimates of the two approaches are explained. The implications of these differences for applications are discussed.
node23:Academic paper with title and abstract:  A multi-chip module implementation of a neural network. : The requirement for dense interconnect in artificial neural network systems has led researchers to seek high-density interconnect technologies. This paper reports an implementation using multi-chip modules (MCMs) as the interconnect medium. The specific system described is a self-organizing, parallel, and dynamic learning model which requires a dense interconnect technology for effective implementation; this requirement is fulfilled by exploiting MCM technology. The ideas presented in this paper regarding an MCM implementation of artificial neural networks are versatile and can be adapted to apply to other neural network and connectionist models.
node24:Academic paper with title and abstract:  Finding overlapping distributions with MML. : This paper considers an aspect of mixture modelling. Significantly overlapping distributions require more data for their parameters to be accurately estimated than well separated distributions. For example, two Gaussian distributions are considered to significantly overlap when their means are within three standard deviations of each other. If insufficient data is available, only a single component distribution will be estimated, although the data originates from two component distributions. We consider how much data is required to distinguish two component distributions from one distribution in mixture modelling using the minimum message length (MML) criterion. First, we perform experiments which show the MML criterion performs well relative to other Bayesian criteria. Second, we make two improvements to the existing MML estimates, that improve its performance with overlapping distributions.",cora_link,lp
"Classify the relationship between two essays denoted as node22 and node10 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Learning with many irrelevant features using MIN-FEATURES bias; FOCUS algorithm outperforms ID3/FRINGE in PAC-learning with fewer examples.  
node1: Studying PAC learning under malicious errors; presents algorithms and equivalence to combinatorial optimization despite adversarial noise.  
node2: Theory revision for impure Prolog programs; optimal rule ordering is intractable despite polynomial training data availability.  
node3: Self-bounding algorithms output generalization error bounds post-data; uses statistical query and local search frameworks.  
node4: State-merging algorithm for DFA learning; wins Abbadingo competition by merging states based on evidence.  
node5: Annealed theory for boolean learning; derives non-universal learning curves akin to Vapnik-Chervonenkis bounds.  
node6: PAC learning under uniform attribute noise tolerates high rates, but product noise is as harmful as malicious.  
node7: Cryptographic intractability of learning Boolean formulas/automata; links to breaking RSA and factoring Blum integers.  
node8: Three-stage framework integrating symbolic knowledge with neural networks; reviews methods for insertion, refinement, and extraction.  
node9: Feature selection using monotonic measure to avoid exhaustive search; experiments validate non-exhaustive method effectiveness.  
node10: Rapture combines backpropagation and ID3 for probabilistic rule refinement; improves expert systems via experimental validation.  
node11: Examines PAC learning with noisy oracles; statistical queries manage misclassification and distribution noise.  
node12: Extends Either to Neither for M-of-N rules; achieves faster runtime and better accuracy in real-world domains.  
node13: Oblivious decision trees with pruning for irrelevant features; experiments show effectiveness in artificial/natural domains.  
node14: Assesses gap between theoretical guarantees and practical performance in machine learning.  
node15: Analyzes nonlinear systems in population genetics; models genetic crossover dynamics and computational properties.  
node16: Uses explanations of anomalies to guide KB refinement; handles multiple inconsistencies efficiently.  
node17: Analyzes Genetic Algorithms on Additive Search Problem; Culling outperforms standard GAs in noisy environments.  
node18: PAC-learning Prolog clauses under noise; introduces fixed attribute noise model for propositional concepts.  
node19: Pattern theory approach for robust KDD; experiments compare to C4.5 in binary function learning.  
node20: General learning algorithm with bounds via scale-sensitive Vapnik dimensions; links packing numbers and agnostic learning.  
node21: MIMIC algorithm estimates solution space densities to optimize complex landscapes efficiently.  
node22: Theory refinement combines explanation analysis and induction; improves accuracy with fewer examples in biology/diagnosis.  
node23: Utilizes explanations to refine knowledge-based systems; enhances accuracy through focused corrections.  
node24: Statistical mechanics-based learning curve bounds; tighter than VC with phase transitions and power laws.  
node25: Examines learning challenges with drifting data distributions; explores algorithmic complexity under non-stationary conditions.  
node26: Analyzes algorithmic stability for LOOCV error bounds; error stability ensures sanity-check performance vs. training error.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node9>,<node0, node13>,<node0, node19>,<node1, node6>,<node1, node11>,<node1, node18>,<node2, node22>,<node3, node24>,<node4, node7>,<node5, node24>,<node6, node18>,<node7, node18>,<node8, node10>,<node10, node12>,<node12, node22>,<node15, node17>,<node16, node22>,<node16, node23>,<node17, node21>,<node17, node24>,<node20, node25>,<node22, node23>,<node24, node26>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","Yes, they have citation relationships","

node0: Learning with many irrelevant features using MIN-FEATURES bias; FOCUS algorithm outperforms ID3/FRINGE in PAC-learning with fewer examples.  
node1: Studying PAC learning under malicious errors; presents algorithms and equivalence to combinatorial optimization despite adversarial noise.  
node2: Theory revision for impure Prolog programs; optimal rule ordering is intractable despite polynomial training data availability.  
node3: Self-bounding algorithms output generalization error bounds post-data; uses statistical query and local search frameworks.  
node4: State-merging algorithm for DFA learning; wins Abbadingo competition by merging states based on evidence.  
node5: Annealed theory for boolean learning; derives non-universal learning curves akin to Vapnik-Chervonenkis bounds.  
node6: PAC learning under uniform attribute noise tolerates high rates, but product noise is as harmful as malicious.  
node7: Cryptographic intractability of learning Boolean formulas/automata; links to breaking RSA and factoring Blum integers.  
node8: Three-stage framework integrating symbolic knowledge with neural networks; reviews methods for insertion, refinement, and extraction.  
node9: Feature selection using monotonic measure to avoid exhaustive search; experiments validate non-exhaustive method effectiveness.  
node10: Rapture combines backpropagation and ID3 for probabilistic rule refinement; improves expert systems via experimental validation.  
node11: Examines PAC learning with noisy oracles; statistical queries manage misclassification and distribution noise.  
node12: Extends Either to Neither for M-of-N rules; achieves faster runtime and better accuracy in real-world domains.  
node13: Oblivious decision trees with pruning for irrelevant features; experiments show effectiveness in artificial/natural domains.  
node14: Assesses gap between theoretical guarantees and practical performance in machine learning.  
node15: Analyzes nonlinear systems in population genetics; models genetic crossover dynamics and computational properties.  
node16: Uses explanations of anomalies to guide KB refinement; handles multiple inconsistencies efficiently.  
node17: Analyzes Genetic Algorithms on Additive Search Problem; Culling outperforms standard GAs in noisy environments.  
node18: PAC-learning Prolog clauses under noise; introduces fixed attribute noise model for propositional concepts.  
node19: Pattern theory approach for robust KDD; experiments compare to C4.5 in binary function learning.  
node20: General learning algorithm with bounds via scale-sensitive Vapnik dimensions; links packing numbers and agnostic learning.  
node21: MIMIC algorithm estimates solution space densities to optimize complex landscapes efficiently.  
node22: Theory refinement combines explanation analysis and induction; improves accuracy with fewer examples in biology/diagnosis.  
node23: Utilizes explanations to refine knowledge-based systems; enhances accuracy through focused corrections.  
node24: Statistical mechanics-based learning curve bounds; tighter than VC with phase transitions and power laws.  
node25: Examines learning challenges with drifting data distributions; explores algorithmic complexity under non-stationary conditions.  
node26: Analyzes algorithmic stability for LOOCV error bounds; error stability ensures sanity-check performance vs. training error.","node0:Academic paper with title and abstract:  Dietterich (1991). Learning with Many Irrelevant Features. : In many domains, an appropriate inductive bias is the MIN-FEATURES bias, which prefers consistent hypotheses definable over as few features as possible. This paper defines and studies this bias. First, it is shown that any learning algorithm implementing the MIN-FEATURES bias requires fi( 1 * [2 p + p ln n]) training examples to guarantee PAC-learning a concept having p relevant features out of n available features. This bound is only logarithmic in the number of irrelevant features. The paper also presents a quasi-polynomial time algorithm, FOCUS, which implements MIN-FEATURES. Experimental studies are presented that compare FOCUS to the ID3 and FRINGE algorithms. These experiments show that| contrary to expectations|these algorithms do not implement good approximations of MIN-FEATURES. The coverage, sample complexity, and generalization performance of FOCUS is substantially better than either ID3 or FRINGE on learning problems where the MIN-FEATURES bias is appropriate. This suggests that, in practical applications, training data should be preprocessed to remove irrelevant features before being
node1:Academic paper with title and abstract:  Learning in the presence of malicious errors, : In this paper we study an extension of the distribution-free model of learning introduced by Valiant [23] (also known as the probably approximately correct or PAC model) that allows the presence of malicious errors in the examples given to a learning algorithm. Such errors are generated by an adversary with unbounded computational power and access to the entire history of the learning algorithm's computation. Thus, we study a worst-case model of errors. Our results include general methods for bounding the rate of error tolerable by any learning algorithm, efficient algorithms tolerating nontrivial rates of malicious errors, and equivalences between problems of learning with errors and standard combinatorial optimization problems.
node2:Academic paper with title and abstract: The Challenge of Revising an Impure Theory: A pure rule-based program will return a set of answers to each query; and will return the same answer set even if its rules are re-ordered. However, an impure program, which includes the Prolog cut ""!"" and not() operators, can return different answers if the rules are re-ordered. There are also many reasoning systems that return only the first answer found for each query; these first answers, too, depend on the rule order, even in pure rule-based systems. A theory revision algorithm, seeking a revised rule-base whose expected accuracy, over the distribution of queries, is optimal, should therefore consider modifying the order of the rules. This paper first shows that a polynomial number of training ""labeled queries"" (each a query coupled with its correct answer) provides the distribution information necessary to identify the optimal ordering. It then proves, however, that the task of determining which ordering is optimal, once given this information, is intractable even in trivial situations; e.g., even if each query is an atomic literal, we are seeking only a ""perfect"" theory, and the rule base is propositional. We also prove that this task is not even approximable: Unless P = N P , no polynomial time algorithm can produce an ordering of an n-rule theory whose accuracy is within n fl of optimal, for some fl &gt; 0. We also prove similar hardness, and non-approximatability, results for the related tasks of determining, in these impure contexts, (1) the optimal ordering of the antecedents; (2) the optimal set of rules to add or (3) to delete; and (4) the optimal priority values for a set of defaults.
node3:Academic paper with title and abstract: Self bounding learning algorithms: Most of the work which attempts to give bounds on the generalization error of the hypothesis generated by a learning algorithm is based on methods from the theory of uniform convergence. These bounds are a-priori bounds that hold for any distribution of examples and are calculated before any data is observed. In this paper we propose a different approach for bounding the generalization error after the data has been observed. A self-bounding learning algorithm is an algorithm which, in addition to the hypothesis that it outputs, outputs a reliable upper bound on the generalization error of this hypothesis. We first explore the idea in the statistical query learning framework of Kearns [10]. After that we give an explicit self bounding algorithm for learning algorithms that are based on local search.
node4:Academic paper with title and abstract: New Evidence Driven State Merging Algorithm: Results of the Abbadingo One DFA Learning Abstract. This paper first describes the structure and results of the Abbadingo One DFA Learning Competition. The competition was designed to encourage work on algorithms that scale wellboth to larger DFAs and to sparser training data. We then describe and discuss the winning algorithm of Rodney Price, which orders state merges according to the amount of evidence in their favor. A second winning algorithm, of Hugues Juille, will be described in a separate paper.
node5:Academic paper with title and abstract: ANNEALED THEORIES OF LEARNING: We study annealed theories of learning boolean functions using a concept class of finite cardinality. The naive annealed theory can be used to derive a universal learning curve bound for zero temperature learning, similar to the inverse square root bound from the Vapnik-Chervonenkis theory. Tighter, nonuniversal learning curve bounds are also derived. A more refined annealed theory leads to still tighter bounds, which in some cases are very similar to results previously obtained using one-step replica symmetry breaking.
node6:Academic paper with title and abstract:  Can pac learning algorithms tolerate random attribute noise? Algorithmica, : This paper studies the robustness of pac learning algorithms when the instance space is f0; 1g n , and the examples are corrupted by purely random noise affecting only the instances (and not the labels). In the past, conflicting results on this subject have been obtained|the ""best agreement"" rule can only tolerate small amounts of noise, yet in some cases large amounts of noise can be tolerated. We show that the truth lies somewhere between these two alternatives. For uniform attribute noise, in which each attribute is flipped independently at random with the same probability, we present an algorithm that pac learns monomials for any (unknown) noise rate less than 1=2. Contrasting this positive result, we show that product random attribute noise, where each attribute i is flipped randomly and independently with its own probability p i , is nearly as harmful as malicious noise|no algorithm can tolerate more than a very small amount of such noise. fl Supported in part by a GE Foundation Junior Faculty Grant and NSF grant CCR-9110108. Part of this research was conducted while the author was at the M.I.T. Laboratory for Computer Science and supported by NSF grant DCR-8607494 and a grant from the Siemens Corporation. Net address: sg@cs.wustl.edu.
node7:Academic paper with title and abstract:  Cryptographic limitations on learning boolean formulae and finite automata. : In this paper we prove the intractability of learning several classes of Boolean functions in the distribution-free model (also called the Probably Approximately Correct or PAC model) of learning from examples. These results are representation independent, in that they hold regardless of the syntactic form in which the learner chooses to represent its hypotheses. Our methods reduce the problems of cracking a number of well-known public-key cryptosys- tems to the learning problems. We prove that a polynomial-time learning algorithm for Boolean formulae, deterministic finite automata or constant-depth threshold circuits would have dramatic consequences for cryptography and number theory: in particular, such an algorithm could be used to break the RSA cryptosystem, factor Blum integers (composite numbers equivalent to 3 modulo 4), and detect quadratic residues. The results hold even if the learning algorithm is only required to obtain a slight advantage in prediction over random guessing. The techniques used demonstrate an interesting duality between learning and cryptography. We also apply our results to obtain strong intractability results for approximating a gener - alization of graph coloring. fl This research was conducted while the author was at Harvard University and supported by an A.T.& T. Bell Laboratories scholarship. y Supported by grants ONR-N00014-85-K-0445, NSF-DCR-8606366 and NSF-CCR-89-02500, DAAL03-86-K-0171, DARPA AFOSR 89-0506, and by SERC.
node8:Academic paper with title and abstract:  A Framework for Combining Symbolic and Neural Learning. In: Artificial Intelligence and Neural Networks: Steps Toward Principled Integration. Honavar, : Technical Report 1123, Computer Sciences Department, University of Wisconsin - Madison, Nov. 1992 ABSTRACT This article describes an approach to combining symbolic and connectionist approaches to machine learning. A three-stage framework is presented and the research of several groups is reviewed with respect to this framework. The first stage involves the insertion of symbolic knowledge into neural networks, the second addresses the refinement of this prior knowledge in its neural representation, while the third concerns the extraction of the refined symbolic knowledge. Experimental results and open research issues are discussed. A shorter version of this paper will appear in Machine Learning.
node9:Academic paper with title and abstract:  Feature selection methods for classifications. Intelligent Data Analysis: : Feature selection is a problem of choosing a subset of relevant features. In general, only exhaustive search can bring about the optimal subset. With a monotonic measure, exhaustive search can be avoided without sacrificing optimality. Unfortunately, most error- or distance-based measures are not monotonic. A new measure is employed in this work that is monotonic and fast to compute. The search for relevant features according to this measure is guaranteed to be complete but not exhaustive. Experiments are conducted for verification.
node10:Academic paper with title and abstract:  Combining neural and symbolic learning to revise probabilistic rule bases. : This paper describes Rapture | a system for revising probabilistic knowledge bases that combines connectionist and symbolic learning methods. Rapture uses a modified version of backpropagation to refine the certainty factors of a probabilistic rule base and it uses ID3's information-gain heuristic to add new rules. Results on refining three actual expert knowledge bases demonstrate that this combined approach generally performs better than previous methods.
node11:Academic paper with title and abstract:  Statistical queries and faulty PAC oracles. : In this paper we study learning in the PAC model of Valiant [18] in which the example oracle used for learning may be faulty in one of two ways: either by misclassifying the example or by distorting the distribution of examples. We first consider models in which examples are misclassified. Kearns [12] recently showed that efficient learning in a new model using statistical queries is a sufficient condition for PAC learning with classification noise. We show that efficient learning with statistical queries is sufficient for learning in the PAC model with malicious error rate proportional to the required statistical query accuracy. One application of this result is a new lower bound for tolerable malicious error in learning monomials of k literals. This is the first such bound which is independent of the number of irrelevant attributes n. We also use the statistical query model to give sufficient conditions for using distribution specific algorithms on distributions outside their prescribed domains. A corollary of this result expands the class of distributions on which we can weakly learn monotone Boolean formulae. We also consider new models of learning in which examples are not chosen according to the distribution on which the learner will be tested. We examine three variations of distribution noise and give necessary and sufficient conditions for polynomial time learning with such noise. We show containments and separations between the various models of faulty oracles. Finally, we examine hypothesis boosting algorithms in the context of learning with distribution noise, and show that Schapire's result regarding the strength of weak learnabil-ity [17] is in some sense tight in requiring the weak learner to be nearly distribution free.
node12:Academic paper with title and abstract:  Extending theory refinement to m-of-n rules. : In recent years, machine learning research has started addressing a problem known as theory refinement. The goal of a theory refinement learner is to modify an incomplete or incorrect rule base, representing a domain theory, to make it consistent with a set of input training examples. This paper presents a major revision of the Either propositional theory refinement system. Two issues are discussed. First, we show how run time efficiency can be greatly improved by changing from a exhaustive scheme for computing repairs to an iterative greedy method. Second, we show how to extend Either to refine M-of-N rules. The resulting algorithm, Neither (New Either), is more than an order of magnitude faster and produces significantly more accurate results with theories that fit the M-of-N format. To demonstrate the advantages of Neither, we present experimental results from two real-world domains.
node13:Academic paper with title and abstract:  Oblivious decision trees and abstract cases. : In this paper, we address the problem of case-based learning in the presence of irrelevant features. We review previous work on attribute selection and present a new algorithm, Oblivion, that carries out greedy pruning of oblivious decision trees, which effectively store a set of abstract cases in memory. We hypothesize that this approach will efficiently identify relevant features even when they interact, as in parity concepts. We report experimental results on artificial domains that support this hypothesis, and experiments with natural domains that show improvement in some cases but not others. In closing, we discuss the implications of our experiments, consider additional work on irrelevant features, and outline some directions for future research.
node14:Academic paper with title and abstract:  Separating formal bounds from practical performance in learning systems. : 
node15:Academic paper with title and abstract:  A computational view of population genetics. : This paper contributes to the study of nonlinear dynamical systems from a computational perspective. These systems are inherently more powerful than their linear counterparts (such as Markov chains), which have had a wide impact in Computer Science, and they seem likely to play an increasing role in future. However, there are as yet no general techniques available for handling the computational aspects of discrete nonlinear systems, and even the simplest examples seem very hard to analyze. We focus in this paper on a class of quadratic systems that are widely used as a model in population genetics and also in genetic algorithms. These systems describe a process where random matings occur between parental chromosomes via a mechanism known as ""crossover"": i.e., children inherit pieces of genetic material from different parents according to some random rule. Our results concern two fundamental quantitative properties of crossover systems: 1. We develop a general technique for computing the
node16:Academic paper with title and abstract:  Explaining anomalies as a basis for KB refinement. : Explanations play a key role in operationalization-based anomaly detection techniques. In this paper we show that their role is not limited to anomaly detection; they can also be used for guiding automated knowledge base refinement. We introduce a refinement procedure which takes: (i) a small number of refinement rules (rather than test cases), and (ii) explanations constructed in an attempt to reveal the cause (or causes) for inconsistencies detected during the verification process, and returns rule revisions aiming to recover the consistency of the KB-theory. Inconsistencies caused by more than one anomaly are handled at the same time, which improves the efficiency of the refinement process.
node17:Academic paper with title and abstract:  On genetic algorithms. : We analyze the performance of a Genetic Algorithm (GA) we call Culling and a variety of other algorithms on a problem we refer to as Additive Search Problem (ASP). ASP is closely related to several previously well studied problems, such as the game of Mastermind and additive fitness functions. We show that the problem of learning the Ising perceptron is reducible to a noisy version of ASP. Culling is efficient on ASP, highly noise tolerant, and the best known approach in some regimes. Noisy ASP is the first problem we are aware of where a Genetic Type Algorithm bests all known competitors. Standard GA's, by contrast, perform much more poorly on ASP than hillclimbing and other approaches even though the Schema theorem holds for ASP. We generalize ASP to k-ASP to study whether GA's will achieve `implicit parallelism' in a problem with many more schemata. GA's fail to achieve this implicit parallelism, but we describe an algorithm we call Explicitly Parallel Search that succeeds. We also compute the optimal culling point for selective breeding, which turns out to be independent of the fitness function or the population distribution. We also analyze a Mean Field Theoretic algorithm performing similarly to Culling on many problems. These results provide insight into when and how GA's can beat competing methods.
node18:Academic paper with title and abstract:  PAC-learning PROLOG clauses with or without errors. : In a nutshell we can describe a generic ILP problem as following: given a set E of (positive and negative) examples of a target predicate, and some background knowledge B about the world (usually a logic program including facts and auxiliary predicates), the task is to find a logic program H (our hypothesis) such that all positive examples can be deduced from B and H, while no negative example can. In this paper we review some of the results achieved in this area and discuss the techniques used. Moreover we prove the following new results: * Predicates described by non-recursive, local clauses of at most k literals are PAC-learnable under any distribution. This generalizes a previous result that was valid only for constrained clauses. * Predicates that are described by k non-recursive local clauses are PAC-learnable under any distribution. This generalizes a previous result that was non construc tive and valid only under some class of distributions. Finally we introduce what we believe is the first theoretical framework for learning Prolog clauses in the presence of errors. To this purpose we introduce a new noise model, that we call the fixed attribute noise model, for learning propositional concepts over the Boolean domain. This new noise model can be of its own interest.
node19:Academic paper with title and abstract:  Pattern theoretic knowledge discovery. : Future research directions in Knowledge Discovery in Databases (KDD) include the ability to extract an overlying concept relating useful data. Current limitations involve the search complexity to find that concept and what it means to be ""useful."" The Pattern Theory research crosses over in a natural way to the aforementioned domain. The goal of this paper is threefold. First, we present a new approach to the problem of learning by Discovery and robust pattern finding. Second, we explore the current limitations of a Pattern Theoretic approach as applied to the general KDD problem. Third, we exhibit its performance with experimental results on binary functions, and we compare those results with C4.5. This new approach to learning demonstrates a powerful method for finding patterns in a robust manner.
node20:Academic paper with title and abstract:  Long. Prediction, learning, uniform convergence, and scale-sensitive dimensions, : We present a new general-purpose algorithm for learning classes of [0; 1]-valued functions in a generalization of the prediction model, and prove a general upper bound on the expected absolute error of this algorithm in terms of a scale-sensitive generalization of the Vapnik dimension proposed by Alon, Ben-David, Cesa-Bianchi and Haussler. We give lower bounds implying that our upper bounds cannot be improved by more than a constant factor in general. We apply this result, together with techniques due to Haussler and to Benedek and Itai, to obtain new upper bounds on packing numbers in terms of this scale-sensitive notion of dimension. Using a different technique, we obtain new bounds on packing numbers in terms of Kearns and Schapire's fat-shattering function. We show how to apply both packing bounds to obtain improved general bounds on the sample complexity of agnostic learning. For each * &gt; 0, we establish weaker sufficient and stronger necessary conditions for a class of [0; 1]-valued functions to be agnostically learnable to within *, and to be an *-uniform Glivenko-Cantelli class.
node21:Academic paper with title and abstract:  (1997) MIMIC: Finding Optima by Estimating Probability Densities, : In many optimization problems, the structure of solutions reflects complex relationships between the different input parameters. For example, experience may tell us that certain parameters are closely related and should not be explored independently. Similarly, experience may establish that a subset of parameters must take on particular values. Any search of the cost landscape should take advantage of these relationships. We present MIMIC, a framework in which we analyze the global structure of the optimization landscape. A novel and efficient algorithm for the estimation of this structure is derived. We use knowledge of this structure to guide a randomized search through the solution space and, in turn, to refine our estimate of the structure. Our technique obtains significant speed gains over other randomized optimization procedures.
node22:Academic paper with title and abstract:  Theory refinement combining analytical and empirical methods. : This article describes a comprehensive approach to automatic theory revision. Given an imperfect theory, the approach combines explanation attempts for incorrectly classified examples in order to identify the failing portions of the theory. For each theory fault, correlated subsets of the examples are used to inductively generate a correction. Because the corrections are focused, they tend to preserve the structure of the original theory. Because the system starts with an approximate domain theory, in general fewer training examples are required to attain a given level of performance (classification accuracy) compared to a purely empirical system. The approach applies to classification systems employing a propositional Horn-clause theory. The system has been tested in a variety of application domains, and results are presented for problems in the domains of molecular biology and plant disease diagnosis.
node23:Academic paper with title and abstract:  Utilising explanation to assist the refinement of knowledge-based systems. : 
node24:Academic paper with title and abstract:  Rigorous learning curve bounds from statistical mechanics. : In this paper we introduce and investigate a mathematically rigorous theory of learning curves that is based on ideas from statistical mechanics. The advantage of our theory over the well-established Vapnik-Chervonenkis theory is that our bounds can be considerably tighter in many cases, and are also more reflective of the true behavior (functional form) of learning curves. This behavior can often exhibit dramatic properties such as phase transitions, as well as power law asymptotics not explained by the VC theory. The disadvantages of our theory are that its application requires knowledge of the input distribution, and it is limited so far to finite cardinality function classes. We illustrate our results with many concrete examples of learning curve bounds derived from our theory.
node25:Academic paper with title and abstract:  Long. On the complexity of learning from drifting distributions. : 
node26:Academic paper with title and abstract:  Algorithmic stability and sanity-check bounds for leave-one-out cross-validation. : In this paper we prove sanity-check bounds for the error of the leave-one-out cross-validation estimate of the generalization error: that is, bounds showing that the worst-case error of this estimate is not much worse than that of the training error estimate. The name sanity-check refers to the fact that although we often expect the leave-one-out estimate to perform considerably better than the training error estimate, we are here only seeking assurance that its performance will not be considerably worse. Perhaps surprisingly, such assurance has been given only for limited cases in the prior literature on cross-validation. Any nontrivial bound on the error of leave-one-out must rely on some notion of algorithmic stability. Previous bounds relied on the rather strong notion of hypothesis stability, whose application was primarily limited to nearest-neighbor and other local algorithms. Here we introduce the new and weaker notion of error stability, and apply it to obtain sanity-check bounds for leave-one-out for other classes of learning algorithms, including training error minimization procedures and Bayesian algorithms. We also provide lower bounds demonstrating the necessity of some form of error stability for proving bounds on the error of the leave-one-out estimate, and the fact that for training error minimization algorithms, in the worst case such bounds must still depend on the Vapnik-Chervonenkis dimension of the hypothesis class.",cora_link,lp
"Classify the relationship between two essays denoted as node8 and node7 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Explores Mixture Density Networks (MDN) for discriminant analysis in educational data, showing superiority over linear methods in classification and interpretation.  
node1: Investigates adaptive computation techniques for analyzing time series with dynamic adjustments.  
node2: Proposes tree-structured hybrid architecture combining linear discriminants and neural networks for efficient supervised learning.  
node3: Applies mixed memory Markov models to analyze large-state coupled time series, e.g., currency exchange rates.  
node4: Develops hierarchical dynamic Bayesian networks for modular representation of complex stochastic systems.  
node5: Uses mixture of nonlinear experts for time series prediction, improving accuracy and avoiding overfitting via noise matching.  
node6: Addresses overfitting in neural networks using gated experts with adaptive variances for noise-level matching.  
node7: Examines learning in agent teams and reflection concepts for pattern recognition.  
node8: Soft classification via penalized log likelihood and smoothing splines for non-Gaussian data.  
node9: Introduces space-efficient algorithms for hindsight inference in dynamic probabilistic networks.  
node10: Analyzes EM algorithm convergence in Gaussian mixtures, linking it to gradient methods and projection matrices.  
node11: Develops generalized cross-validation for smoothing splines with non-Gaussian data.  
node12: Achieves tractable inference in stochastic processes using compact belief states with bounded errors.  
node13: Applies TD learning with hierarchical neural networks for game evaluation functions.  
node14: Uses dynamic Bayesian networks for speech recognition, outperforming HMMs via contextual modeling.  
node15: Extends hierarchical mixtures of experts to classification tasks, tested on benchmark problems.  
node16: Proposes hidden Markov decision trees with variational approximations for time series modeling.  
node17: Enhances mean field approximation with mixture models for capturing multimodal posteriors.  
node18: Applies mixtures of experts for time series prediction, balancing nonlinearity and simplicity.  
node19: Hierarchical mixtures of experts with EM algorithms for supervised learning, applied to robot dynamics.  
node20: Analyzes diabetic retinopathy risk factors using smoothing spline ANOVA models.  
node21: Factorial HMMs model distributed states with variational approximations for complex sequences.  
node22: Compares bootstrap and Bayesian confidence intervals for smoothing splines, providing sample size formulas.  
node23: Enhances hierarchical mixtures via adaptive growing/pruning algorithms for efficient tree-based classification.  
node24: Studies machine learning techniques applied to the game of Checkers.

the connection relationship among the nodes mentioned:
 <node0, node19>,<node1, node19>,<node2, node19>,<node3, node21>,<node4, node12>,<node4, node21>,<node5, node19>,<node6, node19>,<node8, node11>,<node8, node19>,<node8, node20>,<node8, node22>,<node9, node21>,<node10, node15>,<node10, node19>,<node11, node20>,<node12, node21>,<node13, node19>,<node13, node24>,<node14, node21>,<node15, node19>,<node15, node23>,<node16, node19>,<node16, node21>,<node17, node21>,<node18, node19>,<node19, node23>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.
Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should follow this format:
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value
","Yes, they have citation relationships","

node0: Explores Mixture Density Networks (MDN) for discriminant analysis in educational data, showing superiority over linear methods in classification and interpretation.  
node1: Investigates adaptive computation techniques for analyzing time series with dynamic adjustments.  
node2: Proposes tree-structured hybrid architecture combining linear discriminants and neural networks for efficient supervised learning.  
node3: Applies mixed memory Markov models to analyze large-state coupled time series, e.g., currency exchange rates.  
node4: Develops hierarchical dynamic Bayesian networks for modular representation of complex stochastic systems.  
node5: Uses mixture of nonlinear experts for time series prediction, improving accuracy and avoiding overfitting via noise matching.  
node6: Addresses overfitting in neural networks using gated experts with adaptive variances for noise-level matching.  
node7: Examines learning in agent teams and reflection concepts for pattern recognition.  
node8: Soft classification via penalized log likelihood and smoothing splines for non-Gaussian data.  
node9: Introduces space-efficient algorithms for hindsight inference in dynamic probabilistic networks.  
node10: Analyzes EM algorithm convergence in Gaussian mixtures, linking it to gradient methods and projection matrices.  
node11: Develops generalized cross-validation for smoothing splines with non-Gaussian data.  
node12: Achieves tractable inference in stochastic processes using compact belief states with bounded errors.  
node13: Applies TD learning with hierarchical neural networks for game evaluation functions.  
node14: Uses dynamic Bayesian networks for speech recognition, outperforming HMMs via contextual modeling.  
node15: Extends hierarchical mixtures of experts to classification tasks, tested on benchmark problems.  
node16: Proposes hidden Markov decision trees with variational approximations for time series modeling.  
node17: Enhances mean field approximation with mixture models for capturing multimodal posteriors.  
node18: Applies mixtures of experts for time series prediction, balancing nonlinearity and simplicity.  
node19: Hierarchical mixtures of experts with EM algorithms for supervised learning, applied to robot dynamics.  
node20: Analyzes diabetic retinopathy risk factors using smoothing spline ANOVA models.  
node21: Factorial HMMs model distributed states with variational approximations for complex sequences.  
node22: Compares bootstrap and Bayesian confidence intervals for smoothing splines, providing sample size formulas.  
node23: Enhances hierarchical mixtures via adaptive growing/pruning algorithms for efficient tree-based classification.  
node24: Studies machine learning techniques applied to the game of Checkers.","node0:Academic paper with title and abstract: Using Neural Networks for Descriptive Statistical Analysis of Educational Data: In this paper we discuss the methodological issues of using a class of neural networks called Mixture Density Networks (MDN) for discriminant analysis. MDN models have the advantage of having a rigorous probabilistic interpretation, and they have proven to be a viable alternative as a classification procedure in discrete domains. We will address both the classification and interpretive aspects of discriminant analysis, and compare the approach to the traditional method of linear discrimin- ants as implemented in standard statistical packages. We show that the MDN approach adopted performs well in both aspects. Many of the observations made are not restricted to the particular case at hand, and are applicable to most applications of discriminant analysis in educational research. fl URL: http://www.cs.Helsinki.FI/research/cosco/
node1:Academic paper with title and abstract: Adaptive Computation Techniques for Time Series Analysis: 
node2:Academic paper with title and abstract: Combining Linear Discriminant Functions with Neural Networks for Supervised Learning: A novel supervised learning method is presented by combining linear discriminant functions with neural networks. The proposed method results in a tree-structured hybrid architecture. Due to constructive learning, the binary tree hierarchical architecture is automatically generated by a controlled growing process for a specific supervised learning task. Unlike the classic decision tree, the linear discriminant functions are merely employed in the intermediate level of the tree for heuristically partitioning a large and complicated task into several smaller and simpler subtasks in the proposed method. These subtasks are dealt with by component neural networks at the leaves of the tree accordingly. For constructive learning, growing and credit-assignment algorithms are developed to serve for the hybrid architecture. The proposed architecture provides an efficient way to apply existing neural networks (e.g. multi-layered perceptron) for solving a large scale problem. We have already applied the proposed method to a universal approximation problem and several benchmark classification problems in order to evaluate its performance. Simulation results have shown that the proposed method yields better results and faster training in comparison with the multi-layered perceptron.
node3:Academic paper with title and abstract: MIXED MEMORY MARKOV MODELS FOR TIME SERIES ANALYSIS: This paper presents a method for analyzing coupled time series using Markov models in a domain where the state space is immense. To make the parameter estimation tractable, the large state space is represented as the Cartesian product of smaller state spaces, a paradigm known as factorial Markov models. The transition matrix for this model is represented as a mixture of the transition matrices of the underlying dynamical processes. This formulation is know as mixed memory Markov models. Using this framework, we analyze the daily exchange rates for five currencies - British pound, Canadian dollar, Deutsch mark, Japanese yen, and Swiss franc as measured against the U.S. dollar.
node4:Academic paper with title and abstract: Structured Representation of Complex Stochastic Systems: This paper considers the problem of representing complex systems that evolve stochastically over time. Dynamic Bayesian networks provide a compact representation for stochastic processes. Unfortunately, they are often unwieldy since they cannot explicitly model the complex organizational structure of many real life systems: the fact that processes are typically composed of several interacting subprocesses, each of which can, in turn, be further decomposed. We propose a hierarchically structured representation language which extends both dynamic Bayesian networks and the object-oriented Bayesian network framework of [9], and show that our language allows us to describe such systems in a natural and modular way. Our language supports a natural representation for certain system characteristics that are hard to capture using more traditional frameworks. For example, it allows us to represent systems where some processes evolve at a different rate than others, or systems where the processes interact only intermittently. We provide a simple inference mechanism for our representation via translation to Bayesian networks, and suggest ways in which the inference algorithm can exploit the additional structure encoded in our representation.
node5:Academic paper with title and abstract: First experiments using a mixture of nonlinear experts for time series prediction: This paper investigates the advantages and disadvantages of the mixture of experts (ME) model (introduced to the connectionist community in [JJNH91] and applied to time series analysis in [WM95]) on two time series where the dynamics is well understood. The first series is a computer-generated series, consisting of a mixture between a noise-free process (the quadratic map) and a noisy process (a composition of a noisy linear autoregressive and a hyperbolic tangent). There are three main results: (1) the ME model produces significantly better results than single networks; (2) it discovers the regimes correctly and also allows us to characterize the sub-processes through their variances. (3) due to the correct matching of the noise level of the model to that of the data it avoids overfitting. The second series is the laser series used in the Santa Fe competition; the ME model also obtains excellent out-of-sample predictions, allows for analysis and shows no overfitting.
node6:Academic paper with title and abstract: Avoiding overfitting by locally matching the noise level of the data gating network discovers the: When trying to forecast the future behavior of a real-world system, two of the key problems are nonstationarity of the process (e.g., regime switching) and overfitting of the model (particularly serious for noisy processes). This articles shows how gated experts can point to solutions to these problems. The architecture, also called society of experts and mixture of experts consists of a (nonlinear) gating network and several (nonlinear) competing experts. Each expert learns a conditional mean (as usual), but each expert also has its own adaptive width. The gating network learns to assign a probability to each expert that depends on the input. This article first discusses the assumptions underlying this architecture and derives the weight update rules. It then evaluates the performance of gated experts in comparison to that of single networks, as well as to networks with two outputs, one predicting the mean, the other one the local error bar. This article also investigates the ability of gated experts to discover and characterize underlying the regimes. The results are: * there is significantly less overfitting compared to single nets, for two reasons: only subsets of the potential inputs are given to the experts and gating network (less of a curse of dimensionality), and the experts learn to match their variances to the (local) noise levels, thus only learning as This article focuses on the architecture and the overfitting problem. Applications to a computer-generated toy problem and the laser data from Santa Fe Competition are given in [Mangeas and Weigend, 1995], and the application to the real-world problem of predicting the electricity demand of France are given in [Mangeas et al., 1995]. much as the data support.
node7:Academic paper with title and abstract:  Learning from examples, agent teams and the concept of reflection. : In International Journal of Pattern Recognition and AI, 10(3):251-272, 1996 Also available as GMD report #766
node8:Academic paper with title and abstract:  Soft classification, a.k.a. risk estimation, via penalized log likelihood and smoothing spline analysis of variance. : 1 to appear in Cowan, J., Tesauro, G., and Alspector, J. (eds.), Advances in Neural Information Processing Systems 6. San Francisco, CA: Morgan Kaufmann Publishers. This paper has been written tersely to accomodate an 8 page limitation. Presented as a (refereed) poster session at the 1993 Conference on Neural Information Processing Systems-Natural and Synthetic, November 29, Denver, CO. Supported by the NSF under grants DMS-9121003 and DMS-9301511, and by the National Eye Institute-NIH under grants EY09946 and EY03083
node9:Academic paper with title and abstract:  Space-efficient inference in dynamic probabilistic networks. : Dynamic probabilistic networks (DPNs) are a useful tool for modeling complex stochastic processes. The simplest inference task in DPNs is monitoring | that is, computing a posterior distribution for the state variables at each time step given all observations up to that time. Recursive, constant-space algorithms are well-known for monitoring in DPNs and other models. This paper is concerned with hindsight | that is, computing a posterior distribution given both past and future observations. Hindsight is an essential subtask of learning DPN models from data. Existing algorithms for hindsight in DPNs use O(SN ) space and time, where N is the total length of the observation sequence and S is the state space size for each time step. They are therefore impractical for hindsight in complex models with long observation sequences. This paper presents an O(S log N ) space, O(SN log N ) time hindsight algorithm. We demonstrates the effectiveness of the algorithm in two real-world DPN learning problems. We also discuss the possibility of an O(S)-space, O(SN )-time algorithm.
node10:Academic paper with title and abstract:  On convergence properties of the em algorithm for gaussian mixtures. : We build up the mathematical connection between the ""Expectation-Maximization"" (EM) algorithm and gradient-based approaches for maximum likelihood learning of finite Gaussian mixtures. We show that the EM step in parameter space is obtained from the gradient via a projection matrix P , and we provide an explicit expression for the matrix. We then analyze the convergence of EM in terms of special properties of P and provide new results analyzing the effect that P has on the likelihood surface. Based on these mathematical results, we present a comparative discussion of the advantages and disadvantages of EM and other algorithms for the learning of Gaussian mixture models.
node11:Academic paper with title and abstract:  A generalized approximate cross validation for smoothing splines with non-Gaussian data. : 
node12:Academic paper with title and abstract:  Tractable inference for complex stochastic processes. : The monitoring and control of any dynamic system depends crucially on the ability to reason about its current status and its future trajectory. In the case of a stochastic system, these tasks typically involve the use of a belief state|a probability distribution over the state of the process at a given point in time. Unfortunately, the state spaces of complex processes are very large, making an explicit representation of a belief state intractable. Even in dynamic Bayesian networks (DBNs), where the process itself can be represented compactly, the representation of the belief state is intractable. We investigate the idea of utilizing a compact approximation to the true belief state, and analyze the conditions under which the errors due to the approximations taken over the lifetime of the process do not accumulate to make our answers completely irrelevant. We show that the error in a belief state contracts exponentially as the process evolves. Thus, even with multiple approximations, the error in our process remains bounded indefinitely. We show how the additional structure of a DBN can be used to design our approximation scheme, improving its performance significantly. We demonstrate the applicability of our ideas in the context of a monitoring task, showing that orders of magnitude faster inference can be achieved with only a small degradation in accuracy.
node13:Academic paper with title and abstract:  TD Learning of Game Evaluation Functions with Hierarchical Neural Architectures. : 
node14:Academic paper with title and abstract:  Speech recognition with dynamic Bayesian networks. : Dynamic Bayesian networks (DBNs) are a useful tool for representing complex stochastic processes. Recent developments in inference and learning in DBNs allow their use in real-world applications. In this paper, we apply DBNs to the problem of speech recognition. The factored state representation enabled by DBNs allows us to explicitly represent long-term articulatory and acoustic context in addition to the phonetic-state information maintained by hidden Markov models (HMMs). Furthermore, it enables us to model the short-term correlations among multiple observation streams within single time-frames. Given a DBN structure capable of representing these long- and short-term correlations, we applied the EM algorithm to learn models with up to 500,000 parameters. The use of structured DBN models decreased the error rate by 12 to 29% on a large-vocabulary isolated-word recognition task, compared to a discrete HMM; it also improved significantly on other published results for the same task. This is the first successful application of DBNs to a large-scale speech recognition problem. Investigation of the learned models indicates that the hidden state variables are strongly correlated with acoustic properties of the speech signal.
node15:Academic paper with title and abstract:  (1994) Classification using Hierarchical Mixtures of Experts. : There has recently been widespread interest in the use of multiple models for classification and regression in the statistics and neural networks communities. The Hierarchical Mixture of Experts (HME) [1] has been successful in a number of regression problems, yielding significantly faster training through the use of the Expectation Maximisation algorithm. In this paper we extend the HME to classification and results are reported for three common classification benchmark tests: Exclusive-Or, N-input Parity and Two Spirals.
node16:Academic paper with title and abstract:  Hidden Markov decision trees. : We study a time series model that can be viewed as a decision tree with Markov temporal structure. The model is intractable for exact calculations, thus we utilize variational approximations. We consider three different distributions for the approximation: one in which the Markov calculations are performed exactly and the layers of the decision tree are decoupled, one in which the decision tree calculations are performed exactly and the time steps of the Markov chain are decoupled, and one in which a Viterbi-like assumption is made to pick out a single most likely state sequence. We present simulation results for artificial data and the Bach chorales.
node17:Academic paper with title and abstract:  (in press). Improving the mean field approximation via the use of mixture distributions. : Mean field methods provide computationally efficient approximations to posterior probability distributions for graphical models. Simple mean field methods make a completely factorized approximation to the posterior, which is unlikely to be accurate when the posterior is multimodal. Indeed, if the posterior is multi-modal, only one of the modes can be captured. To improve the mean field approximation in such cases, we employ mixture models as posterior approximations, where each mixture component is a factorized distribution. We describe efficient methods for optimizing the parameters in these models.
node18:Academic paper with title and abstract:  `Time series prediction using mixtures of experts,\' : We consider a novel non-linear model for time series analysis. The study of this model emphasizes both theoretical aspects as well as practical applicability. The architecture of the model is demonstrated to be sufficiently rich, in the sense of approximating unknown functional forms, yet it retains some of the simple and intuitive characteristics of linear models. A comparison to some more established non-linear models will be emphasized, and theoretical issues are backed by prediction results for benchmark time series, as well as computer generated data sets. Efficient estimation algorithms are seen to be applicable, made possible by the mixture based structure of the model. Large sample properties of the estimators are discussed as well, in both well specified as well as misspecified settings. We also demonstrate how inference pertaining to the data structure may be made from the parameterization of the model, resulting in a better, more intuitive, understanding of the structure and performance of the model.
node19:Academic paper with title and abstract:  Hierarchical Mixtures of Experts and the EM Algorithm, : We present a tree-structured architecture for supervised learning. The statistical model underlying the architecture is a hierarchical mixture model in which both the mixture coefficients and the mixture components are generalized linear models (GLIM's). Learning is treated as a maximum likelihood problem; in particular, we present an Expectation-Maximization (EM) algorithm for adjusting the parameters of the architecture. We also develop an on-line learning algorithm in which the parameters are updated incrementally. Comparative simulation results are presented in the robot dynamics domain. *We want to thank Geoffrey Hinton, Tony Robinson, Mitsuo Kawato and Daniel Wolpert for helpful comments on the manuscript. This project was supported in part by a grant from the McDonnell-Pew Foundation, by a grant from ATR Human Information Processing Research Laboratories, by a grant from Siemens Corporation, by by grant IRI-9013991 from the National Science Foundation, and by grant N00014-90-J-1942 from the Office of Naval Research. The project was also supported by NSF grant ASC-9217041 in support of the Center for Biological and Computational Learning at MIT, including funds provided by DARPA under the HPCC program, and NSF grant ECS-9216531 to support an Initiative in Intelligent Control at MIT. Michael I. Jordan is a NSF Presidential Young Investigator.
node20:Academic paper with title and abstract:  Using smoothing spline anova to examine the relation of risk factors to the incidence and progression of diabetic retinopathy, : 
node21:Academic paper with title and abstract:  Factorial hidden Markov models. : Hidden Markov models (HMMs) have proven to be one of the most widely used tools for learning probabilistic models of time series data. In an HMM, information about the past is conveyed through a single discrete variable|the hidden state. We discuss a generalization of HMMs in which this state is factored into multiple state variables and is therefore represented in a distributed manner. We describe an exact algorithm for inferring the posterior probabilities of the hidden state variables given the observations, and relate it to the forward-backward algorithm for HMMs and to algorithms for more general graphical models. Due to the combinatorial nature of the hidden state representation, this exact algorithm is intractable. As in other intractable systems, approximate inference can be carried out using Gibbs sampling or variational methods. Within the variational framework, we present a structured approximation in which the the state variables are decoupled, yielding a tractable algorithm for learning the parameters of the model. Empirical comparisons suggest that these approximations are efficient and provide accurate alternatives to the exact methods. Finally, we use the structured approximation to model Bach's chorales and show that factorial HMMs can capture statistical structure in this data set which an unconstrained HMM cannot.
node22:Academic paper with title and abstract:  ""Bootstrap Confidence Intervals for Smoothing Splines and Their Comparison to Bayesian Confidence Intervals"". : Bayesian confidence intervals of a smoothing spline are often used to distinguish two curves. In this paper, we provide an asymptotic formula for sample size calculations based on Bayesian confidence intervals. Approximations and simulations on special functions indicate that this asymptotic formula is reasonably accurate. Key Words: Bayesian confidence intervals; sample size; smoothing spline. fl Address: Department of Statistics and Applied Probability, University of California, Santa Barbara, CA 93106-3110. Tel.: (805)893-4870. Fax: (805)893-2334. E-mail: yuedong@pstat.ucsb.edu. Supported by the National Institute of Health under Grants R01 EY09946, P60 DK20572 and P30 HD18258.
node23:Academic paper with title and abstract:  (1995) Constructive Algorithms for Hierachical Mixtures of Experts. : We present two additions to the hierarchical mixture of experts (HME) architecture. We view the HME as a tree structured classifier. Firstly, by applying a likelihood splitting criteria to each expert in the HME we ""grow"" the tree adaptively during training. Secondly, by considering only the most probable path through the tree we may ""prune"" branches away, either temporarily, or permanently if they become redundant. We demonstrate results for the growing and pruning algorithms which show significant speed ups and more efficient use of parameters over the conventional algorithms in discriminating between two interlocking spirals and classifying 8-bit parity patterns.
node24:Academic paper with title and abstract:  Some studies in machine learning using the game of Checkers. : ",cora_link,lp
"Classify the essay represented by node0 using its subgraph data (text attributes and connections) as follows.

node0: Examines modular neural models explaining face processing specialization via competitive development, infant needs, and low visual acuity, replicating prosopagnosia/agnosia dissociation.  
node1: Investigates low spatial frequency's role in face recognition specialization through computational models, showing its criticality for distinguishing visually similar faces.  
node2: Demonstrates a mixture-of-experts model where face recognition specialization emerges competitively; damaging the face module mimics prosopagnosia in humans.  
node3: Argues face specialization arises from task-driven competitive learning (not innate), with low spatial frequencies driving face focus in face ID/object classification tasks.

the connection relationship among the nodes mentioned:
 <node0, node3>,<node1, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: Examines modular neural models explaining face processing specialization via competitive development, infant needs, and low visual acuity, replicating prosopagnosia/agnosia dissociation.  
node1: Investigates low spatial frequency's role in face recognition specialization through computational models, showing its criticality for distinguishing visually similar faces.  
node2: Demonstrates a mixture-of-experts model where face recognition specialization emerges competitively; damaging the face module mimics prosopagnosia in humans.  
node3: Argues face specialization arises from task-driven competitive learning (not innate), with low spatial frequencies driving face focus in face ID/object classification tasks.","node0:Academic paper with title and abstract: Prosopagnosia in Modular Neural Network Models: There is strong evidence that face processing in the brain is localized. The double dissociation between prosopagnosia, a face recognition deficit occurring after brain damage, and visual object agnosia, difficulty recognizing other kinds of complex objects, indicates that face and non-face object recognition may be served by partially independent neural mechanisms. In this chapter, we use computational models to show how the face processing specialization apparently underlying prosopagnosia and visual object agnosia could be attributed to 1) a relatively simple competitive selection mechanism that, during development, devotes neural resources to the tasks they are best at performing, 2) the developing infant's need to perform subordinate classification (identification) of faces early on, and 3) the infant's low visual acuity at birth. Inspired by de Schonen and Mancini's (1998) arguments that factors like these could bias the visual system to develop a specialized face processor, and Jacobs and Kosslyn's (1994) experiments in the mixtures of experts (ME) modeling paradigm, we provide a preliminary computational demonstration of how this theory accounts for the double dissociation between face and object processing. We present two feed-forward computational models of visual processing. In both models, the selection mechanism is a gating network that mediates a competition between modules attempting to classify input stimuli. In Model I, when the modules are simple unbiased classifiers, the competition is sufficient to achieve enough of a specialization that damaging one module impairs the model's face recognition more than its object recognition, and damaging the other module impairs the model's object recognition more than its face recognition. In Model II, however, we bias the modules by providing one with low spatial frequency information and the other with high spatial frequency information. In this case, when the model's task is subordinate classification of faces and superordinate classification of objects, the low spatial frequency network shows an even stronger specialization for faces. No other combination of tasks and inputs shows this strong specialization. We take these results as support for the idea that something resembling a face processing ""module"" could arise as a natural consequence of the infant's developmental environment without being innately specified.
node1:Academic paper with title and abstract: Learning a Specialization for Face Recognition: The Effect of Spatial Frequency: The double dissociation between prosopagnosia, a face recognition deficit occurring after brain damage, and visual object agnosia, difficulty recognizing other kinds of complex objects, indicates that face and non-face object recognition may be served by partially independent mechanisms in the brain. Such a dissociation could be the result of a competitive learning mechanism that, during development, devotes neural resources to the tasks they are best at performing. Studies of normal adult performance on face and object recognition tasks seem to indicate that face recognition is primarily configural, involving the low spatial frequency information present in a stimulus over relatively large distances, whereas object recognition is primarily featural, involving analysis of the object's parts using local, high spatial frequency information. In a feed-forward computational model of visual processing, two modules compete to classify input stimuli; when one module receives low spatial frequency information and the other receives high spatial frequency information, the low-frequency module shows a strong specialization for face recognition in a combined face identification/object classification task. The series of experiments shows that the fine discrimination necessary for distinguishing members of a visually homoge neous class such as faces relies heavily on the low spatial frequencies present in a stimulus.
node2:Academic paper with title and abstract:  A mixture of experts model exhibiting prosopag--nosia. : A considerable body of evidence from prosopagnosia, a deficit in face recognition dissociable from nonface object recognition, indicates that the visual system devotes a specialized functional area to mechanisms appropriate for face processing. We present a modular neural network composed of two expert networks and one mediating gate network with the task of learning to recognize the faces of 12 individuals and classifying 36 nonface objects as members of one of three classes. While learning the task, the network tends to divide labor between the two expert modules, with one expert specializing in face processing and the other specializing in nonface object processing. After training, we observe the network's performance on a test set as one of the experts is progressively damaged. The results roughly agree with data reported for prosopagnosic patients: as damage to the face expert increases, the network's face recognition performance decreases dramatically while its object classification performance drops slowly. We conclude that data-driven competitive learning between two unbiased functional units can give rise to localized face processing, and that selective damage in such a system could underlie prosopagnosia.
node3:Academic paper with title and abstract:  Task and spatial frequency effects on face specialization. : There is strong evidence that face processing is localized in the brain. The double dissociation between prosopagnosia, a face recognition deficit occurring after brain damage, and visual object agnosia, difficulty recognizing other kinds of complex objects, indicates that face and non-face object recognition may be served by partially independent mechanisms in the brain. Is neural specialization innate or learned? We suggest that this specialization could be the result of a competitive learning mechanism that, during development, devotes neural resources to the tasks they are best at performing. Further, we suggest that the specialization arises as an interaction between task requirements and developmental constraints. In this paper, we present a feed-forward computational model of visual processing, in which two modules compete to classify input stimuli. When one module receives low spatial frequency information and the other receives high spatial frequency information, and the task is to identify the faces while simply classifying the objects, the low frequency network shows a strong specialization for faces. No other combination of tasks and inputs shows this strong specialization. We take these results as support for the idea that an innately-specified face processing module is unnecessary.",cora_node,nc
"Classify the essay represented by node1 using its subgraph data (text attributes and connections) as follows.

node0: Explores evolutionary costs of learning, showing genetic assimilation of learned traits via models with observed plasticity ""humps"" and robot experiments.  
node1: Uses genetic algorithms to evolve negotiation strategies for multi-agent systems, testing adaptability across contexts and opponent types.  
node2: Enhances Breeder Genetic Algorithm (BGA) robustness via competing subpopulations with varied strategies, improving performance on test functions.  
node3: Applies a classifier system to a board game to study foundational machine learning principles in evolving decision-making.  
node4: Introduces SAGE, a stochastic grammar induction heuristic, winning DFA learning competitions by analyzing tree-search efficiency.  
node5: Analyzes constructive neural networks' decision boundaries, linking geometric training data distributions to algorithmic search biases.  
node6: Proposes solving NP-complete problems via Genetic Algorithms by mapping them to SAT, leveraging SAT’s GA-effectiveness.  
node7: Evolves neural networks for robot wandering behavior, showing similar simulated/real performance and noise-enhanced adaptability.  
node8: Examines genetic representation impacts on neural architecture design, emphasizing evolvable classes and algorithm efficiency.  
node9: Evolves neural networks using SANE to optimize value ordering in constraint satisfaction, reducing backtracks significantly.  
node10: Compares genetic algorithm selection schemes to evaluate their performance and effectiveness in evolutionary computations.  
node11: Investigates noise effects on genetic algorithm selection schemes, exploring adaptation and robustness in varying environments.  
node12: Critiques test suites for evolutionary algorithms, advocating scalable nonlinear functions for fair and meaningful evaluations.  
node13: Surveys genetic algorithms in search, optimization, and machine learning, citing work on evolving recurrent neural networks.  
node14: Addresses challenges in evolutionary robotics, including embodiment and grounding, for developing adaptive robotic behaviors.  
node15: Evolves grounded neural networks for robotic wall-following, demonstrating environmental adaptation and cognitive mapping.  
node16: Evaluates genetic algorithms on MAX-CLIQUE, proposing customized variants like union GA to mitigate local minima issues.  
node17: Analyzes redundancy in genetic programming trees, explaining exponential growth and its impact on solution efficiency.  
node18: Tests methods to evolve compact genetic programming solutions, improving symbolic regression through reduced tree size.  
node19: Demonstrates Culling GA’s superiority on additive search problems, highlighting optimal culling and noise tolerance over standard GAs.  
node20: Proposes Evolving Non-Determinism (END) for state space exploration, outperforming GAs/ES in sorting network optimization.  
node21: Reviews evolutionary strategies, summarizing approaches, applications, and advancements in optimization and adaptation.  
node22: Introduces SANE, a reinforcement learning method evolving cooperative neural networks, achieving faster performance in pendulum tasks.

the connection relationship among the nodes mentioned:
 <node0, node13>,<node0, node14>,<node1, node10>,<node1, node11>,<node1, node13>,<node2, node21>,<node3, node13>,<node4, node13>,<node4, node20>,<node4, node21>,<node5, node8>,<node6, node13>,<node6, node16>,<node7, node13>,<node7, node14>,<node8, node13>,<node9, node13>,<node9, node22>,<node10, node13>,<node10, node17>,<node10, node18>,<node12, node13>,<node12, node21>,<node13, node14>,<node13, node15>,<node13, node16>,<node13, node17>,<node13, node19>,<node13, node21>,<node17, node18>,<node20, node21>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Genetic Algorithms,"

node0: Explores evolutionary costs of learning, showing genetic assimilation of learned traits via models with observed plasticity ""humps"" and robot experiments.  
node1: Uses genetic algorithms to evolve negotiation strategies for multi-agent systems, testing adaptability across contexts and opponent types.  
node2: Enhances Breeder Genetic Algorithm (BGA) robustness via competing subpopulations with varied strategies, improving performance on test functions.  
node3: Applies a classifier system to a board game to study foundational machine learning principles in evolving decision-making.  
node4: Introduces SAGE, a stochastic grammar induction heuristic, winning DFA learning competitions by analyzing tree-search efficiency.  
node5: Analyzes constructive neural networks' decision boundaries, linking geometric training data distributions to algorithmic search biases.  
node6: Proposes solving NP-complete problems via Genetic Algorithms by mapping them to SAT, leveraging SAT’s GA-effectiveness.  
node7: Evolves neural networks for robot wandering behavior, showing similar simulated/real performance and noise-enhanced adaptability.  
node8: Examines genetic representation impacts on neural architecture design, emphasizing evolvable classes and algorithm efficiency.  
node9: Evolves neural networks using SANE to optimize value ordering in constraint satisfaction, reducing backtracks significantly.  
node10: Compares genetic algorithm selection schemes to evaluate their performance and effectiveness in evolutionary computations.  
node11: Investigates noise effects on genetic algorithm selection schemes, exploring adaptation and robustness in varying environments.  
node12: Critiques test suites for evolutionary algorithms, advocating scalable nonlinear functions for fair and meaningful evaluations.  
node13: Surveys genetic algorithms in search, optimization, and machine learning, citing work on evolving recurrent neural networks.  
node14: Addresses challenges in evolutionary robotics, including embodiment and grounding, for developing adaptive robotic behaviors.  
node15: Evolves grounded neural networks for robotic wall-following, demonstrating environmental adaptation and cognitive mapping.  
node16: Evaluates genetic algorithms on MAX-CLIQUE, proposing customized variants like union GA to mitigate local minima issues.  
node17: Analyzes redundancy in genetic programming trees, explaining exponential growth and its impact on solution efficiency.  
node18: Tests methods to evolve compact genetic programming solutions, improving symbolic regression through reduced tree size.  
node19: Demonstrates Culling GA’s superiority on additive search problems, highlighting optimal culling and noise tolerance over standard GAs.  
node20: Proposes Evolving Non-Determinism (END) for state space exploration, outperforming GAs/ES in sorting network optimization.  
node21: Reviews evolutionary strategies, summarizing approaches, applications, and advancements in optimization and adaptation.  
node22: Introduces SANE, a reinforcement learning method evolving cooperative neural networks, achieving faster performance in pendulum tasks.","node0:Academic paper with title and abstract:  The evolutionary cost of learning. : Traits that are acquired by members of an evolving population during their lifetime, through adaptive processes such as learning, can become genetically specified in later generations. Thus there is a change in the level of learning in the population over evolutionary time. This paper explores the idea that as well as the benefits to be gained from learning, there may also be costs to be paid for the ability to learn. It is these costs that supply the selection pressure for the genetic assimilation of acquired traits. Two models are presented that attempt to illustrate this assertion. The first uses Kauffman's NK fitness landscapes to show the effect that both explicit and implicit costs have on the assimilation of learnt traits. A characteristic `hump' is observed in the graph of the level of plasticity in the population showing that learning is first selected for and then against as evolution progresses. The second model is a practical example in which neural network controllers are evolved for a small mobile robot. Results from this experiment also show the hump.
node1:Academic paper with title and abstract: Determining Successful Negotiation Strategies: An Evolutionary Approach: To be successful in open, multi-agent environments, autonomous agents must be capable of adapting their negotiation strategies and tactics to their prevailing circumstances. To this end, we present an empirical study showing the relative success of different strategies against different types of opponent in different environments. In particular, we adopt an evolutionary approach in which strategies and tactics correspond to the genetic material in a genetic algorithm. We conduct a series of experiments to determine the most successful strategies and to see how and when these strategies evolve depending on the context and negotiation stance of the agent's opponent.
node2:Academic paper with title and abstract: Strategy Adaptation by Competing Subpopulations: The breeder genetic algorithm BGA depends on a set of control parameters and genetic operators. In this paper it is shown that strategy adaptation by competing subpopulations makes the BGA more robust and more efficient. Each subpopulation uses a different strategy which competes with other subpopulations. Numerical results are pre sented for a number of test functions.
node3:Academic paper with title and abstract: A Classifier System plays a simple board game Getting down to the Basics of Machine Learning?: 
node4:Academic paper with title and abstract: A Stochastic Search Approach to Grammar Induction: This paper describes a new sampling-based heuristic for tree search named SAGE and presents an analysis of its performance on the problem of grammar induction. This last work has been inspired by the Abbadingo DFA learning competition [14] which took place between Mars and November 1997. SAGE ended up as one of the two winners in that competition. The second winning algorithm, first proposed by Rod-ney Price, implements a new evidence-driven heuristic for state merging. Our own version of this heuristic is also described in this paper and compared to SAGE.
node5:Academic paper with title and abstract:  Analysis of decision boundaries generated by constructive neural network learning algorithms. : Constructive learning algorithms offer an approach to incremental construction of near-minimal artificial neural networks for pattern classification. Examples of such algorithms include Tower, Pyramid, Upstart, and Tiling algorithms which construct multilayer networks of threshold logic units (or, multilayer perceptrons). These algorithms differ in terms of the topology of the networks that they construct which in turn biases the search for a decision boundary that correctly classifies the training set. This paper presents an analysis of such algorithms from a geometrical perspective. This analysis helps in a better characterization of the search bias employed by the different algorithms in relation to the geometrical distribution of examples in the training set. Simple experiments with non linearly separable training sets support the results of mathematical analysis of such algorithms. This suggests the possibility of designing more efficient constructive algorithms that dynamically choose among different biases to build near-minimal networks for pattern classification.
node6:Academic paper with title and abstract:  ""Using DNA to solve NP-Complete Problems"", : A strategy for using Genetic Algorithms (GAs) to solve NP-complete problems is presented. The key aspect of the approach taken is to exploit the observation that, although all NP-complete problems are equally difficult in a general computational sense, some have much better GA representations than others, leading to much more successful use of GAs on some NP-complete problems than on others. Since any NP-complete problem can be mapped into any other one in polynomial time, the strategy described here consists of identifying a canonical NP-complete problem on which GAs work well, and solving other NP-complete problems indirectly by mapping them onto the canonical problem. Initial empirical results are presented which support the claim that the Boolean Satisfiability Problem (SAT) is a GA-effective canonical problem, and that other NP-complete problems with poor GA representations can be solved efficiently by mapping them first onto SAT problems.
node7:Academic paper with title and abstract:  ""Selection for wandering behavior in a small robot,"" : We have evolved artificial neural networks to control the wandering behavior of small robots. The task was to touch as many squares in a grid as possible during a fixed period of time. A number of the simulated robots were embodied in small Lego (Trademark) robot, controlled by a Motorola (Trademark) 6811 processor; and their performance was compared to the simulations. We observed that: (a) evolution was an effective means to program control; (b) progress was characterized by sharply stepped periods of improvement, separated by periods of stasis that corresponded to levels of behavioral/computational complexity; and (c) the simulated and realized robots behaved quite similarly, the realized robots in some cases outperforming the simulated ones. Introducing random noise to the simulations improved the fit somewhat (from 0.73 to 0.79). Hybrid simulated/embodied selection regimes for evolutionary robots are discussed.
node8:Academic paper with title and abstract:  Analysis of Genetic Representations and Operators With Applications in Evolutionary Design of Neural Architectures. : Genetic algorithms and related evolutionary techniques offer a promising approach for automatically exploring the design space of neural architectures for artificial intelligence and cognitive modeling. Central to this process of evolutionary design of neural architectures (EDNA) is the choice of the representation scheme that is used to encode a neural architecture in the form of a gene string (genotype) and to decode a genotype into the corresponding neural architecture (phenotype). The representation scheme used not only constrains the class of neural architectures that are representable (evolvable) in the system, but also determines the efficiency and the time-space complexity of the evolutionary design procedure as a whole. This paper identifies and discusses a set of properties that can be used to characterize different representations used in EDNA and to design or select representations with the necessary properties for particular classes of applications.
node9:Academic paper with title and abstract:  Evolutionary neural networks for value ordering in constraint satisfaction problems. : Technical Report AI94-218 May 1994 Abstract A new method for developing good value-ordering strategies in constraint satisfaction search is presented. Using an evolutionary technique called SANE, in which individual neurons evolve to cooperate and form a neural network, problem-specific knowledge can be discovered that results in better value-ordering decisions than those based on problem-general heuristics. A neural network was evolved in a chronological backtrack search to decide the ordering of cars in a resource-limited assembly line. The network required 1/30 of the backtracks of random ordering and 1/3 of the backtracks of the maximization of future options heuristic. The SANE approach should extend well to other domains where heuristic information is either difficult to discover or problem-specific.
node10:Academic paper with title and abstract:  A comparison of selection schemes used in genetic algorithms. : TIK-Report Nr. 11, December 1995 Version 2 (2. Edition)
node11:Academic paper with title and abstract:  Genetic algorithms, selection schemes, and the varying effects of noise. : IlliGAL Report No. 95006 July 1995
node12:Academic paper with title and abstract:  Evaluating Evolutionary Algorithms. : Test functions are commonly used to evaluate the effectiveness of different search algorithms. However, the results of evaluation are as dependent on the test problems as they are on the algorithms that are the subject of comparison. Unfortunately, developing a test suite for evaluating competing search algorithms is difficult without clearly defined evaluation goals. In this paper we discuss some basic principles that can be used to develop test suites and we examine the role of test suites as they have been used to evaluate evolutionary search algorithms. Current test suites include functions that are easily solved by simple search methods such as greedy hill-climbers. Some test functions also have undesirable characteristics that are exaggerated as the dimensionality of the search space is increased. New methods are examined for constructing functions with different degrees of nonlinearity, where the interactions and the cost of evaluation scale with respect to the dimensionality of the search space.
node13:Academic paper with title and abstract:  Genetic Algorithms in Search, Optimization and Machine Learning. : Angeline, P., Saunders, G. and Pollack, J. (1993) An evolutionary algorithm that constructs recurrent neural networks, LAIR Technical Report #93-PA-GNARLY, Submitted to IEEE Transactions on Neural Networks Special Issue on Evolutionary Programming.
node14:Academic paper with title and abstract:  Cliff (1993). ""Issues in evolutionary robotics,"" From Animals to Animats 2 (Ed. : A version of this paper appears in: Proceedings of SAB92, the Second International Conference on Simulation of Adaptive Behaviour J.-A. Meyer, H. Roitblat, and S. Wilson, editors, MIT Press Bradford Books, Cambridge, MA, 1993.
node15:Academic paper with title and abstract:  Grounding robotic control with genetic neural net-works. : Technical Report AI94-223 May 1994 Abstract An important but often neglected problem in the field of Artificial Intelligence is that of grounding systems in their environment such that the representations they manipulate have inherent meaning for the system. Since humans rely so heavily on semantics, it seems likely that the grounding is crucial to the development of truly intelligent behavior. This study investigates the use of simulated robotic agents with neural network processors as part of a method to ensure grounding. Both the topology and weights of the neural networks are optimized through genetic algorithms. Although such comprehensive optimization is difficult, the empirical evidence gathered here shows that the method is not only tractable but quite fruitful. In the experiments, the agents evolved a wall-following control strategy and were able to transfer it to novel environments. Their behavior suggests that they were also learning to build cognitive maps.
node16:Academic paper with title and abstract:  How good are genetic algortihms at finding large cliques: an experimental study, : This paper investigates the power of genetic algorithms at solving the MAX-CLIQUE problem. We measure the performance of a standard genetic algorithm on an elementary set of problem instances consisting of embedded cliques in random graphs. We indicate the need for improvement, and introduce a new genetic algorithm, the multi-phase annealed GA, which exhibits superior performance on the same problem set. As we scale up the problem size and test on ""hard"" benchmark instances, we notice a degraded performance in the algorithm caused by premature convergence to local minima. To alleviate this problem, a sequence of modifications are implemented ranging from changes in input representation to systematic local search. The most recent version, called union GA, incorporates the features of union cross-over, greedy replacement, and diversity enhancement. It shows a marked speed-up in the number of iterations required to find a given solution, as well as some improvement in the clique size found. We discuss issues related to the SIMD implementation of the genetic algorithms on a Thinking Machines CM-5, which was necessitated by the intrinsically high time complexity (O(n 3 )) of the serial algorithm for computing one iteration. Our preliminary conclusions are: (1) a genetic algorithm needs to be heavily customized to work ""well"" for the clique problem; (2) a GA is computationally very expensive, and its use is only recommended if it is known to find larger cliques than other algorithms; (3) although our customization effort is bringing forth continued improvements, there is no clear evidence, at this time, that a GA will have better success in circumventing local minima.
node17:Academic paper with title and abstract:  Genetic programming and redundancy. : The Genetic Programming optimization method (GP) elaborated by John Koza [ Koza, 1992 ] is a variant of Genetic Algorithms. The search space of the problem domain consists of computer programs represented as parse trees, and the crossover operator is realized by an exchange of subtrees. Empirical analyses show that large parts of those trees are never used or evaluated which means that these parts of the trees are irrelevant for the solution or redundant. This paper is concerned with the identification of the redundancy occuring in GP. It starts with a mathematical description of the behavior of GP and the conclusions drawn from that description among others explain the ""size problem"" which denotes the phenomenon that the average size of trees in the population grows with time.
node18:Academic paper with title and abstract:  Evolving compact solutions in genetic programming: A case study. : Genetic programming (GP) is a variant of genetic algorithms where the data structures handled are trees. This makes GP especially useful for evolving functional relationships or computer programs, as both can be represented as trees. Symbolic regression is the determination of a function dependence y = g(x) that approximates a set of data points (x i ; y i ). In this paper the feasibility of symbolic regression with GP is demonstrated on two examples taken from different domains. Furthermore several suggested methods from literature are compared that are intended to improve GP performance and the readability of solutions by taking into account introns or redundancy that occurs in the trees and keeping the size of the trees small. The experiments show that GP is an elegant and useful tool to derive complex functional dependencies on numerical data.
node19:Academic paper with title and abstract:  On genetic algorithms. : We analyze the performance of a Genetic Algorithm (GA) we call Culling and a variety of other algorithms on a problem we refer to as Additive Search Problem (ASP). ASP is closely related to several previously well studied problems, such as the game of Mastermind and additive fitness functions. We show that the problem of learning the Ising perceptron is reducible to a noisy version of ASP. Culling is efficient on ASP, highly noise tolerant, and the best known approach in some regimes. Noisy ASP is the first problem we are aware of where a Genetic Type Algorithm bests all known competitors. Standard GA's, by contrast, perform much more poorly on ASP than hillclimbing and other approaches even though the Schema theorem holds for ASP. We generalize ASP to k-ASP to study whether GA's will achieve `implicit parallelism' in a problem with many more schemata. GA's fail to achieve this implicit parallelism, but we describe an algorithm we call Explicitly Parallel Search that succeeds. We also compute the optimal culling point for selective breeding, which turns out to be independent of the fitness function or the population distribution. We also analyze a Mean Field Theoretic algorithm performing similarly to Culling on many problems. These results provide insight into when and how GA's can beat competing methods.
node20:Academic paper with title and abstract:  Evolution of non-deterministic incremental algorithms as a new approach for search in state spaces. : Let us call a non-deterministic incremental algorithm one that is able to construct any solution to a combinatorial problem by selecting incrementally an ordered sequence of choices that defines this solution, each choice being made non-deterministically. In that case, the state space can be represented as a tree, and a solution is a path from the root of that tree to a leaf. This paper describes how the simulated evolution of a population of such non-deterministic incremental algorithms offers a new approach for the exploration of a state space, compared to other techniques like Genetic Algorithms (GA), Evolutionary Strategies (ES) or Hill Climbing. In particular, the efficiency of this method, implemented as the Evolving Non-Determinism (END) model, is presented for the sorting network problem, a reference problem that has challenged computer science. Then, we shall show that the END model remedies some drawbacks of these optimization techniques and even outperforms them for this problem. Indeed, some 16-input sorting networks as good as the best known have been built from scratch, and even a 25-year-old result for the 13-input problem has been improved by one comparator.
node21:Academic paper with title and abstract:  ""A Survey of Evolutionary Strategies,"" : 
node22:Academic paper with title and abstract:  Efficient reinforcement learning through symbiotic evolution. : This article presents a new reinforcement learning method called SANE (Symbiotic, Adaptive Neuro-Evolution), which evolves a population of neurons through genetic algorithms to form a neural network capable of performing a task. Symbiotic evolution promotes both cooperation and specialization, which results in a fast, efficient genetic search and discourages convergence to suboptimal solutions. In the inverted pendulum problem, SANE formed effective networks 9 to 16 times faster than the Adaptive Heuristic Critic and 2 times faster than Q-learning and the GENITOR neuro-evolution approach without loss of generalization. Such efficient learning, combined with few domain assumptions, make SANE a promising approach to a broad range of reinforcement learning problems, including many real-world applications.",cora_node,nc
"Classify the essay represented by node6 using its subgraph data (text attributes and connections) as follows.

node0: ASOCS uses adaptive digital elements for incremental rule-based learning, ensuring parallel processing and stable arbitrary boolean mappings without forgetting.  
node1: DNA ASOCS model addresses VLSI implementation challenges via flexible nodes, resolving unused node allocation and hierarchical structure dependencies.  
node2: Digital boolean nodes in ASOCS enable efficient parallel self-organizing networks, contrasting analog models by comparing learning algorithms' efficiencies.  
node3: Neural model uses suppressed feedback synapses during learning, enabling non-linear mapping via local rules with experimental validation on layer-specific suppression.  
node4: Classifies neural network applications, highlighting strengths like parallelism but cautioning inefficiency in some tasks, comparing supervised/unsupervised methods.  
node5: Predicts MIMD system performance for neural simulations, validated on backpropagation/Kohonen networks, estimating scalability and execution on transputer architectures.  
node6: ASOCS architecture enables parallel adaptive logic through incremental rule addition, separating processing/adaptation phases with linear-time self-organization.  
node7: ASOCS's AA3 algorithm uses a binary decision tree for incremental rule-based systems, emphasizing simplicity, parallelism, and fast distributed learning.  
node8: Combines Gaussian codebooks and Parzen windows for efficient probability estimation/classification, offering faster computation with adaptive scaling.  
node9: Unsupervised neural network enables robot maze navigation via PCR for sensorimotor associations, outperforming Q-learning in dynamic visual categorization tasks.  
node10: Explores rodent navigation theories beyond cognitive maps using computational neuroscience models (abstract incomplete).  
node11: MLP outperforms LVQ in high-dimensional pattern discrimination due to sigmoid functions and efficient hyper-plane use, with similar training robustness.  
node12: MCM-based multi-chip neural network implementation tackles dense interconnect needs, applicable to self-organizing and parallel models.  
node13: SARDNET extends Kohonen maps for sequence classification via activation decay, effectively processing binary/phonemic sequences for speech recognition.

the connection relationship among the nodes mentioned:
 <node0, node3>,<node0, node6>,<node1, node6>,<node2, node6>,<node3, node4>,<node3, node5>,<node3, node8>,<node3, node9>,<node3, node10>,<node3, node11>,<node3, node13>,<node4, node6>,<node4, node7>,<node7, node12>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: ASOCS uses adaptive digital elements for incremental rule-based learning, ensuring parallel processing and stable arbitrary boolean mappings without forgetting.  
node1: DNA ASOCS model addresses VLSI implementation challenges via flexible nodes, resolving unused node allocation and hierarchical structure dependencies.  
node2: Digital boolean nodes in ASOCS enable efficient parallel self-organizing networks, contrasting analog models by comparing learning algorithms' efficiencies.  
node3: Neural model uses suppressed feedback synapses during learning, enabling non-linear mapping via local rules with experimental validation on layer-specific suppression.  
node4: Classifies neural network applications, highlighting strengths like parallelism but cautioning inefficiency in some tasks, comparing supervised/unsupervised methods.  
node5: Predicts MIMD system performance for neural simulations, validated on backpropagation/Kohonen networks, estimating scalability and execution on transputer architectures.  
node6: ASOCS architecture enables parallel adaptive logic through incremental rule addition, separating processing/adaptation phases with linear-time self-organization.  
node7: ASOCS's AA3 algorithm uses a binary decision tree for incremental rule-based systems, emphasizing simplicity, parallelism, and fast distributed learning.  
node8: Combines Gaussian codebooks and Parzen windows for efficient probability estimation/classification, offering faster computation with adaptive scaling.  
node9: Unsupervised neural network enables robot maze navigation via PCR for sensorimotor associations, outperforming Q-learning in dynamic visual categorization tasks.  
node10: Explores rodent navigation theories beyond cognitive maps using computational neuroscience models (abstract incomplete).  
node11: MLP outperforms LVQ in high-dimensional pattern discrimination due to sigmoid functions and efficient hyper-plane use, with similar training robustness.  
node12: MCM-based multi-chip neural network implementation tackles dense interconnect needs, applicable to self-organizing and parallel models.  
node13: SARDNET extends Kohonen maps for sequence classification via activation decay, effectively processing binary/phonemic sequences for speech recognition.","node0:Academic paper with title and abstract: ASOCS: A Multilayered Connectionist Network with Guaranteed Learning of Arbitrary Mappings: This paper reviews features of a new class of multilayer connectionist architectures known as ASOCS (Adaptive Self-Organizing Concurrent Systems). ASOCS is similar to most decision-making neural network models in that it attempts to learn an adaptive set of arbitrary vector mappings. However, it differs dramatically in its mechanisms. ASOCS is based on networks of adaptive digital elements which self-modify using local information. Function specification is entered incrementally by use of rules, rather than complete input-output vectors, such that a processing network is able to extract critical features from a large environment and give output in a parallel fashion. Learning also uses parallelism and self-organization such that a new rule is completely learned in time linear with the depth of the network. The model guarantees learning of any arbitrary mapping of boolean input-output vectors. The model is also stable in that learning does not erase any previously learned mappings except those explicitly contradicted.
node1:Academic paper with title and abstract: DNA: A New ASOCS Model With Improved Implementation Potential: A new class of highspeed, self-adaptive, massively parallel computing models called ASOCS (Adaptive Self-Organizing Concurrent Systems) has been proposed. Current analysis suggests that there may be problems implementing ASOCS models in VLSI using the hierarchical network structures originally proposed. The problems are not inherent in the models, but rather in the technology used to implement them. This has led to the development of a new ASOCS model called DNA (Discriminant-Node ASOCS) that does not depend on a hierarchical node structure for success. Three areas of the DNA model are briefly discussed in this paper: DNA's flexible nodes, how DNA overcomes problems other models have allocating unused nodes, and how DNA operates during processing and learning.
node2:Academic paper with title and abstract: Digital Neural Networks: Demands for applications requiring massive parallelism in symbolic environments have given rebirth to research in models labeled as neura l networks. These models are made up of many simple nodes which are highly interconnected such that computation takes place as data flows amongst the nodes of the network. To present, most models have proposed nodes based on simple analog functions, where inputs are multiplied by weights and summed, the total then optionally being transformed by an arbitrary function at the node. Learning in these systems is accomplished by adjusting the weights on the input lines. This paper discusses the use of digital (boolean) nodes as a primitive building block in connectionist systems. Digital nodes naturally engender new paradigms and mechanisms for learning and processing in connectionist networks. The digital nodes are used as the basic building block of a class of models called ASOCS (Adaptive Self-Organizing Concurrent Systems). These models combine massive parallelism with the ability to adapt in a self-organizing fashion. Basic features of standard neural network learning algorithms and those proposed using digital nodes are compared and contrasted. The latter mechanisms can lead to vastly improved efficiency for many applications.
node3:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node4:Academic paper with title and abstract:  Neural Network Applicability: Classifying the Problem Space, : The tremendous current effort to propose neurally inspired methods of computation forces closer scrutiny of real world application potential of these models. This paper categorizes applications into classes and particularly discusses features of applications which make them efficiently amenable to neural network methods. Computational machines do deterministic mappings of inputs to outputs and many computational mechanisms have been proposed for problem solutions. Neural network features include parallel execution, adaptive learning, generalization, and fault tolerance. Often, much effort is given to a model and applications which can already be implemented in a much more efficient way with an alternate technology. Neural networks are potentially powerful devices for many classes of applications, but not all. However, it is proposed that the class of applications for which neural networks are efficient is both large and commonly occurring in nature. Comparison of supervised, unsupervised, and generalizing systems is also included.
node5:Academic paper with title and abstract:  Performance Prediction of Large MIMD Systems for Parallel Neural Network Simulations. : In this paper, we present a performance prediction model for indicating the performance range of MIMD parallel processor systems for neural network simulations. The model expresses the total execution time of a simulation as a function of the execution times of a small number of kernel functions, which have to be measured on only one processor and one physical communication link. The functions depend on the type of neural network, its geometry, decomposition and the connection structure of the MIMD machine. Using the model, the execution time, speedup, scalability and efficiency of large MIMD systems can be predicted. The model is validated quantitatively by applying it to two popular neural networks, backpropagation and the Kohonen self-organizing feature map, decomposed on a GCel-512 1 , a 512 transputer system. Measurements are taken from network simulations decomposed via dataset and network decomposition techniques. Agreement of the model with the measurements is within 1%-14%. Estimates are given for the performances that can be expected for the new T9000 transputer systems. The presented method can also be used for other application areas such as image processing.
node6:Academic paper with title and abstract:  ""Models of Parallel Adaptive Logic,"" : This paper overviews a proposed architecture for adaptive parallel logic referred to as ASOCS (Adaptive Self-Organizing Concurrent System). The ASOCS approach is based on an adaptive network composed of many simple computing elements which operate in a parallel asynchronous fashion. Problem specification is given to the system by presenting if-then rules in the form of boolean conjunctions. Rules are added incrementally and the system adapts to the changing rule-base. Adaptation and data processing form two separate phases of operation. During processing the system acts as a parallel hardware circuit. The adaptation process is distributed amongst the computing elements and efficiently exploits parallelism. Adaptation is done in a self-organizing fashion and takes place in time linear with the depth of the network. This paper summarizes the overall ASOCS concept and overviews three specific architectures.
node7:Academic paper with title and abstract:  A self-organizing binary decision tree for incrementally defined rule based systems. : This paper presents an ASOCS (adaptive self-organizing concurrent system) model for massively parallel processing of incrementally defined rule systems in such areas as adaptive logic, robotics, logical inference, and dynamic control. An ASOCS is an adaptive network composed of many simple computing elements operating asynchronously and in parallel. This paper focuses on adaptive algorithm 3 (AA3) and details its architecture and learning algorithm. It has advantages over previous ASOCS models in simplicity, implementability, and cost. An ASOCS can operate in either a data processing mode or a learning mode. During the data processing mode, an ASOCS acts as a parallel hardware circuit. In learning mode, rules expressed as boolean conjunctions are incrementally presented to the ASOCS. All ASOCS learning algorithms incorporate a new rule in a distributed fashion in a short, bounded time.
node8:Academic paper with title and abstract:  On estimation of a probability density function and mode. : To apply the algorithm for classification we assign each class a separate set of codebook Gaussians. Each set is only trained with patterns from a single class. After having trained the codebook Gaussians, each set provides an estimate of the probability function of one class; just as with Parzen window estimation, we take as the estimate of the pattern distribution the average of all Gaussians in the set. Classification of a pattern may now be done by calculating the probability of each class at the respective sample point, and assigning to the pattern the class with the highest probability. Hence the whole codebook plays a role in the classification of patterns. This is not the case with regular classification schemes using codebooks. We have tested the classification scheme on several classification tasks including the two spiral problem. We compared our algorithm to various other classification algorithms and it came out second; the best algorithm for the applications is the Parzen window estimation. However, the computing time and memory for Parzen window estimation are excessive when compared to our algorithm, and hence, in practical situations, our algorithm is to be preferred. We have developed a fast algorithm which combines attractive properties of both Parzen window estimation and vector quantization. The scale parameter is tuned adaptively and, therefore, is not set in an ad hoc manner. It allows a classification strategy in which all the codebook vectors are taken into account. This yields better results than the standard vector quantization techniques. An interesting topic for further research is to use radially non-symmetric Gaussians.
node9:Academic paper with title and abstract:  Living in a partially structured environment: How to bypass the limitation of classical reinforcement techniques. : In this paper, we propose an unsupervised neural network allowing a robot to learn sensori-motor associations with a delayed reward. The robot task is to learn the ""meaning"" of pictograms in order to ""survive"" in a maze. First, we introduce a new neural conditioning rule (PCR: Probabilistic Conditioning Rule) allowing to test hypotheses (associations between visual categories and movements) during a given time span. Second, we describe a real maze experiment with our mobile robot. We propose a neural architecture to solve this problem and we discuss the difficulty to build visual categories dynamically while associating them to movements. Third, we propose to use our algorithm on a simulation in order to test it exhaustively. We give the results for different kind of mazes and we compare our system to an adapted version of the Q-learning algorithm. Finally, we conclude by showing the limitations of approaches that do not take into account the intrinsic complexity of a reasonning based on image recognition.
node10:Academic paper with title and abstract:  Redish. Beyond the Cognitive Map: Contributions to a Computational Neu-roscience Theory of Rodent Navigation. : 
node11:Academic paper with title and abstract:  ""Pattern Discrimination Using Feedforward Networks: A Benchmark Study of Scaling Behavior"", : The discrimination powers of Multilayer perceptron (MLP) and Learning Vector Quantisation (LVQ) networks are compared for overlapping Gaussian distributions. It is shown, both analytically and with Monte Carlo studies, that the MLP network handles high dimensional problems in a more efficient way than LVQ. This is mainly due to the sigmoidal form of the MLP transfer function, but also to the the fact that the MLP uses hyper-planes more efficiently. Both algorithms are equally robust to limited training sets and the learning curves fall off like 1=M, where M is the training set size, which is compared to theoretical predictions from statistical estimates and Vapnik-Chervonenkis bounds.
node12:Academic paper with title and abstract:  A multi-chip module implementation of a neural network. : The requirement for dense interconnect in artificial neural network systems has led researchers to seek high-density interconnect technologies. This paper reports an implementation using multi-chip modules (MCMs) as the interconnect medium. The specific system described is a self-organizing, parallel, and dynamic learning model which requires a dense interconnect technology for effective implementation; this requirement is fulfilled by exploiting MCM technology. The ideas presented in this paper regarding an MCM implementation of artificial neural networks are versatile and can be adapted to apply to other neural network and connectionist models.
node13:Academic paper with title and abstract:  a self-organizing feature map for sequences. : A self-organizing neural network for sequence classification called SARDNET is described and analyzed experimentally. SARDNET extends the Kohonen Feature Map architecture with activation retention and decay in order to create unique distributed response patterns for different sequences. SARDNET yields extremely dense yet descriptive representations of sequential input in very few training iterations. The network has proven successful on mapping arbitrary sequences of binary and real numbers, as well as phonemic representations of English words. Potential applications include isolated spoken word recognition and cognitive science models of sequence processing.",cora_node,nc
"Classify the essay represented by node3 using its subgraph data (text attributes and connections) as follows.

node0: Discusses challenges in replicating neural computing experiments due to randomization in backpropagation, proposing a statistical framework for improved replicability assessment.  
node1: Explores backpropagation's sensitivity to initial weights, showing significant impact on convergence times via Monte Carlo and deterministic experiments.  
node2: Proposes multiversion neural systems with diverse architectures and decision strategies to enhance reliability by minimizing error impacts.  
node3: Investigates methodological diversity in neural networks to boost generalization, evaluating diversity metrics and their effect on system performance.  
node4: Introduces self-organizing expert networks using competitive learning, demonstrating their effectiveness in specialized tasks versus single networks.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node2, node3>,<node2, node4>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: Discusses challenges in replicating neural computing experiments due to randomization in backpropagation, proposing a statistical framework for improved replicability assessment.  
node1: Explores backpropagation's sensitivity to initial weights, showing significant impact on convergence times via Monte Carlo and deterministic experiments.  
node2: Proposes multiversion neural systems with diverse architectures and decision strategies to enhance reliability by minimizing error impacts.  
node3: Investigates methodological diversity in neural networks to boost generalization, evaluating diversity metrics and their effect on system performance.  
node4: Introduces self-organizing expert networks using competitive learning, demonstrating their effectiveness in specialized tasks versus single networks.","node0:Academic paper with title and abstract:  Replicability of neural computing experiments. : If an experiment requires statistical analysis to establish a result, then one should do a better experiment. Ernest Rutherford, 1930 Most proponents of cold fusion reporting excess heat from their electrolysis experiments were claiming that one of the main characteristics of cold fusion was its irreproducibility | J.R. Huizenga, Cold Fusion, 1993, p. 78 Abstract Amid the ever increasing research into various aspects of neural computing, much progress is evident both from theoretical advances and from empirical studies. On the empirical side a wealth of data from experimental studies is being reported. It is, however, not clear how best to report neural computing experiments such that they may be replicated by other interested researchers. In particular, the nature of iterative learning on a randomised initial architecture, such as backpropagation training of a multilayer perceptron, is such that precise replication of a reported result is virtually impossible. The outcome is that experimental replication of reported results, a touchstone of ""the scientific method"", is not an option for researchers in this most popular subfield of neural computing. In this paper, we address this issue of replicability of experiments based on backpropagation training of multilayer perceptrons (although many of our results will be applicable to any other subfield that is plagued by the same characteristics). First, we attempt to produce a complete abstract specification of such a neural computing experiment. From this specification we identify the full range of parameters needed to support maximum replicability, and we use it to show why absolute replicability is not an option in practice. We propose a statistical framework to support replicability. We demonstrate this framework with some empirical studies of our own on both repli-cability with respect to experimental controls, and validity of implementations of the backpropagation algorithm. Finally, we suggest how the degree of replicability of a neural computing experiment can be estimated and reflected in the claimed precision for any empirical results reported.
node1:Academic paper with title and abstract:  Back propagation is sensitive to initial conditions. : This paper explores the effect of initial weight selection on feed-forward networks learning simple functions with the back-propagation technique. We first demonstrate, through the use of Monte Carlo techniques, that the magnitude of the initial condition vector (in weight space) is a very significant parameter in convergence time variability. In order to further understand this result, additional deterministic experiments were performed. The results of these experiments demonstrate the extreme sensitivity of back propagation to initial weight configuration.
node2:Academic paper with title and abstract:  Engineering Multiversion Neural-Net Systems, : In this paper we address the problem of constructing reliable neural-net implementations, given the assumption that any particular implementation will not be totally correct. The approach taken in this paper is to organize the inevitable errors so as to minimize their impact in the context of a multiversion system. | i.e. the system functionality is reproduced in multiple versions which together will constitute the neural-net system. The unique characteristics of neural computing are exploited in order to engineer reliable systems in the form of diverse, multiversion systems which are used together with a `decision strategy' (such as majority vote). Theoretical notions of ""methodological diversity"" contributing to the improvement of system performance are implemented and tested. An important aspect of the engineering of an optimal system is to overproduce the components and then choose an optimal subset. Three general techniques for choosing final system components are implemented and evaluated. Several different approaches to the effective engineering of complex multiversion systems designs are realized and evaluated to determine overall reliability as well as reliability of the overall system in comparison to the lesser reliability of component substructures.
node3:Academic paper with title and abstract:  ""Use of methodological diversity to improve neural network generalization,"" : Littlewood and Miller [1989] present a statistical framework for dealing with coincident failures in multiversion software systems. They develop a theoretical model that holds the promise of high system reliability through the use of multiple, diverse sets of alternative versions. In this paper we adapt their framework to investigate the feasibility of exploiting the diversity observable in multiple populations of neural networks developed using diverse methodologies. We evaluate the generalisation improvements achieved by a range of methodologically diverse network generation processes. We attempt to order the constituent methodological features with respect to their potential for use in the engineering of useful diversity. We also define and explore the use of relative measures of the diversity between version sets as a guide to the potential for exploiting inter-set diversity.
node4:Academic paper with title and abstract:  ""Self-organizing experts,"" : We describe and evaluate multi-network connectionist systems composed of ""expert"" networks. By preprocessing training data with a competitive learning network, the system automatically organizes the process of decomposition into expert subtasks. Using several different types of challenging problem, we assess this approach | the degree to which the automatically generated experts really are specialists on a predictable subset of the overall task, and a comparison of such decompositions with equivalent single-networks. In addition, we assess the utility of this approach alongside, and in competition to, non-expert multiversion systems. Previously developed measures of `diversity' for such systems are also applied to provide a quantitative assessment of the degree of specialization obtained in an expert-net ensemble. We show that on both types of problem, abstract well-defined and data-defined, the automatic decomposition does produce an effective set of specialist networks which together can support a high level of performance. Curiously, the study does not provide any support for a differential of effectiveness within the two classes of problem: continuous, homogeneous functions and discrete, discontinuous functions.",cora_node,nc
"Classify the essay represented by node1 using its subgraph data (text attributes and connections) as follows.

node0: Proposes evolutionary speciation for automatic modular system design, improving generalization in co-evolutionary game learning via gated species expertise.  
node1: Introduces Nested Q-learning for emergent hierarchical control in RL, decomposing tasks into reusable evaluation functions.  
node2: Enhances Nested Q-learning for realistic robot task hierarchies, demonstrating superiority over flat learning in multi-task scenarios.  
node3: Uses genetic algorithms and competition to learn flight decision rules, addressing simulation-reality discrepancies.  
node4: Proposes TRM for sequential task learning with dynamic learning rates, enabling knowledge transfer via relatedness measures.  
node5: Modular Q-learning with CMAC function approximation for robotic manipulator task decomposition in continuous spaces.  
node6: Applies MTL neural networks with adaptive learning rates to improve coronary disease diagnosis via functional knowledge transfer.  
node7: Extends Q-learning to continuous states/actions using real-valued actuators for robotic applications.  
node8: Modular architecture using dynamic programming to learn multiple tasks efficiently via temporal decomposition.  
node9: Coevolutionary species for neural network evolution, enhancing solutions for decomposable problems like parity computation.  
node10: Learns composite tasks by decomposing into elemental tasks, enabling transfer and efficient modular solutions.  
node11: Introduces temporal difference methods for prediction, improving credit assignment over traditional techniques.  
node12: Uses sparse coarse coding in RL for effective generalization in continuous control tasks.  
node13: Safeguards RL exploration via domain-knowledge constrained policies, prioritizing safety over optimality in motion planning.  
node14: Cooperative coevolution enhances function optimization, surpassing traditional genetic algorithms.  
node15: Coevolution accelerates sequential decision learning in robots by decomposing sub-behaviors into stable niches.  
node16: MAXQ hierarchical RL decomposes value functions into subroutine hierarchies, enabling faster optimal policy learning.  
node17: Combines RL with online search (local/global) to refine trajectories using approximate value functions.

the connection relationship among the nodes mentioned:
 <node0, node15>,<node1, node2>,<node1, node7>,<node1, node10>,<node2, node7>,<node2, node10>,<node3, node11>,<node3, node15>,<node4, node6>,<node5, node8>,<node5, node10>,<node6, node10>,<node7, node12>,<node8, node10>,<node8, node11>,<node9, node14>,<node9, node15>,<node10, node13>,<node10, node15>,<node10, node16>,<node12, node17>,<node14, node15>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Reinforcement Learning,"

node0: Proposes evolutionary speciation for automatic modular system design, improving generalization in co-evolutionary game learning via gated species expertise.  
node1: Introduces Nested Q-learning for emergent hierarchical control in RL, decomposing tasks into reusable evaluation functions.  
node2: Enhances Nested Q-learning for realistic robot task hierarchies, demonstrating superiority over flat learning in multi-task scenarios.  
node3: Uses genetic algorithms and competition to learn flight decision rules, addressing simulation-reality discrepancies.  
node4: Proposes TRM for sequential task learning with dynamic learning rates, enabling knowledge transfer via relatedness measures.  
node5: Modular Q-learning with CMAC function approximation for robotic manipulator task decomposition in continuous spaces.  
node6: Applies MTL neural networks with adaptive learning rates to improve coronary disease diagnosis via functional knowledge transfer.  
node7: Extends Q-learning to continuous states/actions using real-valued actuators for robotic applications.  
node8: Modular architecture using dynamic programming to learn multiple tasks efficiently via temporal decomposition.  
node9: Coevolutionary species for neural network evolution, enhancing solutions for decomposable problems like parity computation.  
node10: Learns composite tasks by decomposing into elemental tasks, enabling transfer and efficient modular solutions.  
node11: Introduces temporal difference methods for prediction, improving credit assignment over traditional techniques.  
node12: Uses sparse coarse coding in RL for effective generalization in continuous control tasks.  
node13: Safeguards RL exploration via domain-knowledge constrained policies, prioritizing safety over optimality in motion planning.  
node14: Cooperative coevolution enhances function optimization, surpassing traditional genetic algorithms.  
node15: Coevolution accelerates sequential decision learning in robots by decomposing sub-behaviors into stable niches.  
node16: MAXQ hierarchical RL decomposes value functions into subroutine hierarchies, enabling faster optimal policy learning.  
node17: Combines RL with online search (local/global) to refine trajectories using approximate value functions.","node0:Academic paper with title and abstract: Automatic Modularization by Speciation: Real-world problems are often too difficult to be solved by a single monolithic system. There are many examples of natural and artificial systems which show that a modular approach can reduce the total complexity of the system while solving a difficult problem satisfactorily. The success of modular artificial neural networks in speech and image processing is a typical example. However, designing a modular system is a difficult task. It relies heavily on human experts and prior knowledge about the problem. There is no systematic and automatic way to form a modular system for a problem. This paper proposes a novel evolutionary learning approach to designing a modular system automatically, without human intervention. Our starting point is speciation, using a technique based on fitness sharing. While speciation in genetic algorithms is not new, no effort has been made towards using a speciated population as a complete modular system. We harness the specialized expertise in the species of an entire population, rather than a single individual, by introducing a gating algorithm. We demonstrate our approach to automatic modularization by improving co-evolutionary game learning. Following earlier researchers, we learn to play iterated prisoner's dilemma. We review some problems of earlier co-evolutionary learning, and explain their poor generalization ability and sudden mass extinctions. The generalization ability of our approach is significantly better than past efforts. Using the specialized expertise of the entire speciated population though a gating algorithm, instead of the best individual, is the main contributor to this improvement.
node1:Academic paper with title and abstract:  Emergent Hierarchical Control Structures: Learning Reactive/Hierarchical Relationships in Reinforcement Environments, : The use of externally imposed hierarchical structures to reduce the complexity of learning control is common. However, it is acknowledged that learning the hierarchical structure itself is an important step towards more general (learning of many things as required) and less bounded (learning of a single thing as specified) learning. Presented in this paper is a reinforcement learning algorithm called Nested Q-learning that generates a hierarchical control structure in reinforcement learning domains. The emergent structure combined with learned bottom-up reactive reactions results in a reactive hierarchical control system. Effectively, the learned hierarchy decomposes what would otherwise be a monolithic evaluation function into many smaller evaluation functions that can be recombined without the loss of previously learned information.
node2:Academic paper with title and abstract:  Learning Hierarchical Control Structures for Multiple Tasks and Changing Environments, : While the need for hierarchies within control systems is apparent, it is also clear to many researchers that such hierarchies should be learned. Learning both the structure and the component behaviors is a difficult task. The benefit of learning the hierarchical structures of behaviors is that the decomposition of the control structure into smaller transportable chunks allows previously learned knowledge to be applied to new but related tasks. Presented in this paper are improvements to Nested Q-learning (NQL) that allow more realistic learning of control hierarchies in reinforcement environments. Also presented is a simulation of a simple robot performing a series of related tasks that is used to compare both hierarchical and non-hierarchal learning techniques.
node3:Academic paper with title and abstract:  ""Learning sequential decision rules using simulation models and competition,"" : The problem of learning decision rules for sequential tasks is addressed, focusing on the problem of learning tactical decision rules from a simple flight simulator. The learning method relies on the notion of competition and employs genetic algorithms to search the space of decision policies. Several experiments are presented that address issues arising from differences between the simulation model on which learning occurs and the target environment on which the decision rules are ultimately tested.
node4:Academic paper with title and abstract:  The parallel transfer of task knowledge using dynamic learning rates based on a measure of relatedness, Connection Science Special Issue: Transfer in Inductive Systems, : An hypothesis of functional transfer of task knowledge is presented that requires the development of a measure of task relatedness and a method of sequential learning. The task rehearsal method (TRM) is introduced to address the issues of sequential learning, namely retention and transfer of knowledge. TRM is a knowledge based inductive learning system that uses functional domain knowledge as a source of inductive bias. The representations of successfully learned tasks are stored within domain knowledge. Virtual examples generated by domain knowledge are rehearsed in parallel with the each new task using either the standard multiple task learning (MTL) or the MTL neural network methods. The results of experiments conducted on a synthetic domain of seven tasks demonstrate the method's ability to retain and transfer task knowledge. TRM is shown to be effective in developing hypothesis for tasks that suffer from impoverished training sets. Difficulties encountered during sequential learning over the diverse domain reinforce the need for a more robust measure of task relatedness.
node5:Academic paper with title and abstract:  A modular Q-learning architecture for manipulator task decomposition, : Compositional Q-Learning (CQ-L) (Singh 1992) is a modular approach to learning to perform composite tasks made up of several elemental tasks by reinforcement learning. Skills acquired while performing elemental tasks are also applied to solve composite tasks. Individual skills compete for the right to act and only winning skills are included in the decomposition of the composite task. We extend the original CQ-L concept in two ways: (1) a more general reward function, and (2) the agent can have more than one actuator. We use the CQ-L architecture to acquire skills for performing composite tasks with a simulated two-linked manipulator having large state and action spaces. The manipulator is a non-linear dynamical system and we require its end-effector to be at specific positions in the workspace. Fast function approximation in each of the Q-modules is achieved through the use of an array of Cerebellar Model Articulation Controller (CMAC) (Albus
node6:Academic paper with title and abstract:  ""The functional transfer of knowledge for coronary artery disease diagnosis"", : A distinction between two forms of task knowledge transfer, representational and functional, is reviewed followed by a discussion of MTL, a modified version of the multiple task learning (MTL) neural network method of functional transfer. The MTL method employs a separate learning rate, k , for each task output node k. k varies as a function of a measure of relatedness, R k , between the kth task and the primary task of interest. An MTL network is applied to a diagnostic domain of four levels of coronary artery disease. Results of experiments demonstrate the ability of MTL to develop a predictive model for one level of disease which has superior diagnostic ability over models produced by either single task learning or standard multiple task learning.
node7:Academic paper with title and abstract:  Learning in continuous domains with delayed rewards. : Much has been done to develop learning techniques for delayed reward problems in worlds where the actions and/or states are approximated by discrete representations. Although this is acceptable in some applications there are many more situations where such an approximation is difficult and unnatural. For instance, in applications such as robotic,s where real machines interact with the real world, learning techniques that use real valued continuous quantities are required. Presented in this paper is an extension to Q-learning that uses both real valued states and actions. This is achieved by introducing activation strengths to each actuator system of the robot. This allow all actuators to be active to some continuous amount simultaneously. Learning occurs by incrementally adapting both the expected future reward to goal evaluation function and the gradients of that function with respect to each actuator system.
node8:Academic paper with title and abstract:  The efficient learning of multiple task sequences, : I present a modular network architecture and a learning algorithm based on incremental dynamic programming that allows a single learning agent to learn to solve multiple Markovian decision tasks (MDTs) with significant transfer of learning across the tasks. I consider a class of MDTs, called composite tasks, formed by temporally concatenating a number of simpler, elemental MDTs. The architecture is trained on a set of composite and elemental MDTs. The temporal structure of a composite task is assumed to be unknown and the architecture learns to produce a temporal decomposition. It is shown that under certain conditions the solution of a composite MDT can be constructed by computationally inexpensive modifications of the solutions of its constituent elemental MDTs.
node9:Academic paper with title and abstract:  Evolving neural networks with collaborative species. : We present a coevolutionary architecture for solving decomposable problems and apply it to the evolution of artificial neural networks. Although this work is preliminary in nature it has a number of advantages over non-coevolutionary approaches. The coevolutionary approach utilizes a divide-and-conquer technique in which species representing simpler subtasks are evolved in separate instances of a genetic algorithm executing in parallel. Collaborations among the species are formed representing complete solutions. Species are created dynamically as needed. Results are presented in which the coevolutionary architecture produces higher quality solutions in fewer evolutionary trials when compared with an alternative non- coevolutionary approach on the problem of evolving cascade networks for parity computation.
node10:Academic paper with title and abstract:  Transfer of Learning by Composing Solutions of Elemental Sequential Tasks, : Although building sophisticated learning agents that operate in complex environments will require learning to perform multiple tasks, most applications of reinforcement learning have focussed on single tasks. In this paper I consider a class of sequential decision tasks (SDTs), called composite sequential decision tasks, formed by temporally concatenating a number of elemental sequential decision tasks. Elemental SDTs cannot be decomposed into simpler SDTs. I consider a learning agent that has to learn to solve a set of elemental and composite SDTs. I assume that the structure of the composite tasks is unknown to the learning agent. The straightforward application of reinforcement learning to multiple tasks requires learning the tasks separately, which can waste computational resources, both memory and time. I present a new learning algorithm and a modular architecture that learns the decomposition of composite SDTs, and achieves transfer of learning by sharing the solutions of elemental SDTs across multiple composite SDTs. The solution of a composite SDT is constructed by computationally inexpensive modifications of the solutions of its constituent elemental SDTs. I provide a proof of one aspect of the learning algorithm.
node11:Academic paper with title and abstract:  Learning to predict by the methods of temporal differences. : This article introduces a class of incremental learning procedures specialized for prediction|that is, for using past experience with an incompletely known system to predict its future behavior. Whereas conventional prediction-learning methods assign credit by means of the difference between predicted and actual outcomes, the new methods assign credit by means of the difference between temporally successive predictions. Although such temporal-difference methods have been used in Samuel's checker player, Holland's bucket brigade, and the author's Adaptive Heuristic Critic, they have remained poorly understood. Here we prove their convergence and optimality for special cases and relate them to supervised-learning methods. For most real-world prediction problems, temporal-difference methods require less memory and less peak computation than conventional methods; and they produce more accurate predictions. We argue that most problems to which supervised learning is currently applied are really prediction problems of the sort to which temporal-difference methods can be applied to advantage.
node12:Academic paper with title and abstract:  Generalization in reinforcement learning: Successful examples using sparse coarse coding. : On large problems, reinforcement learning systems must use parameterized function approximators such as neural networks in order to generalize between similar situations and actions. In these cases there are no strong theoretical results on the accuracy of convergence, and computational results have been mixed. In particular, Boyan and Moore reported at last year's meeting a series of negative results in attempting to apply dynamic programming together with function approximation to simple control problems with continuous state spaces. In this paper, we present positive results for all the control tasks they attempted, and for one that is significantly larger. The most important differences are that we used sparse-coarse-coded function approximators (CMACs) whereas they used mostly global function approximators, and that we learned online whereas they learned o*ine. Boyan and Moore and others have suggested that the problems they encountered could be solved by using actual outcomes (""rollouts""), as in classical Monte Carlo methods, and as in the TD() algorithm when = 1. However, in our experiments this always resulted in substantially poorer performance. We conclude that reinforcement learning can work robustly in conjunction with function approximators, and that there is little justification at present for avoiding the case of general .
node13:Academic paper with title and abstract:  Robust reinforcement learning in motion planning. : While exploring to find better solutions, an agent performing online reinforcement learning (RL) can perform worse than is acceptable. In some cases, exploration might have unsafe, or even catastrophic, results, often modeled in terms of reaching `failure' states of the agent's environment. This paper presents a method that uses domain knowledge to reduce the number of failures during exploration. This method formulates the set of actions from which the RL agent composes a control policy to ensure that exploration is conducted in a policy space that excludes most of the unacceptable policies. The resulting action set has a more abstract relationship to the task being solved than is common in many applications of RL. Although the cost of this added safety is that learning may result in a suboptimal solution, we argue that this is an appropriate tradeoff in many problems. We illustrate this method in the domain of motion planning.
node14:Academic paper with title and abstract:  A cooperative coevolutionary approach to function optimization. : A general model for the coevolution of cooperating species is presented. This model is instantiated and tested in the domain of function optimization, and compared with a traditional GA-based function optimizer. The results are encouraging in two respects. They suggest ways in which the performance of GA and other EA-based optimizers can be improved, and they suggest a new approach to evolving complex structures such as neural networks and rule sets.
node15:Academic paper with title and abstract:  ""A Coevolutionary Approach to Learning Sequential Decision Rules"", : We present a coevolutionary approach to learning sequential decision rules which appears to have a number of advantages over non-coevolutionary approaches. The coevolutionary approach encourages the formation of stable niches representing simpler sub-behaviors. The evolutionary direction of each subbehavior can be controlled independently, providing an alternative to evolving complex behavior using intermediate training steps. Results are presented showing a significant learning rate speedup over a non-coevolutionary approach in a simulated robot domain. In addition, the results suggest the coevolutionary approach may lead to emer gent problem decompositions.
node16:Academic paper with title and abstract:  Hierarchical reinforcement learning with the MAXQ value function decomposition. : This paper presents a new approach to hierarchical reinforcement learning based on the MAXQ decomposition of the value function. The MAXQ decomposition has both a procedural semanticsas a subroutine hierarchyand a declarative semanticsas a representation of the value function of a hierarchical policy. MAXQ unifies and extends previous work on hierarchical reinforcement learning by Singh, Kaelbling, and Dayan and Hinton. Conditions under which the MAXQ decomposition can represent the optimal value function are derived. The paper defines a hierarchical Q learning algorithm, proves its convergence, and shows experimentally that it can learn much faster than ordinary flat Q learning. Finally, the paper discusses some interesting issues that arise in hierarchical reinforcement learning including the hierarchical credit assignment problem and non-hierarchical execution of the MAXQ hierarchy.
node17:Academic paper with title and abstract:  Applying online-search to reinforcement learning. : In reinforcement learning it is frequently necessary to resort to an approximation to the true optimal value function. Here we investigate the benefits of online search in such cases. We examine ""local"" searches, where the agent performs a finite-depth lookahead search, and ""global"" searches, where the agent performs a search for a trajectory all the way from the current state to a goal state. The key to the success of these methods lies in taking a value function, which gives a rough solution to the hard problem of finding good trajectories from every single state, and combining that with online search, which then gives an accurate solution to the easier problem of finding a good trajectory specifically from the current state.",cora_node,nc
"Classify the essay represented by node5 using its subgraph data (text attributes and connections) as follows.

node0: Introduces efficient online reinforcement learning using expected mistake bounds, shows polynomial equivalence to PAC model, transforming offline algorithms into efficient online methods.  
node1: Explores game-learning strategies balancing current wins vs future knowledge in Go, using probability theory for exploration, showing improved performance against skilled opponents.  
node2: Proposes a generate-and-test algorithm for reinforcement learning using Boolean formulas, demonstrating superior performance in empirical action-mapping comparisons.  
node3: Physics-based neural computation introduction covering diverse models, critical analyses, and interdisciplinary links, suitable for newcomers with math backgrounds.  
node4: Develops algorithms for reinforcement learning of k-DNF action functions, achieving efficient learning and strong empirical performance in restricted policy classes.  
node5: Presents PAC-based adaptive control for linear systems, using active exploration to ensure polynomial learning time and near-optimal policies in high-dimensional spaces.  
node6: Details temporal-difference methods for prediction tasks, proving their optimality and efficiency advantages over conventional supervised learning in real-world applications.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node0, node5>,<node1, node4>,<node2, node4>,<node3, node4>,<node4, node6>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Reinforcement Learning,"

node0: Introduces efficient online reinforcement learning using expected mistake bounds, shows polynomial equivalence to PAC model, transforming offline algorithms into efficient online methods.  
node1: Explores game-learning strategies balancing current wins vs future knowledge in Go, using probability theory for exploration, showing improved performance against skilled opponents.  
node2: Proposes a generate-and-test algorithm for reinforcement learning using Boolean formulas, demonstrating superior performance in empirical action-mapping comparisons.  
node3: Physics-based neural computation introduction covering diverse models, critical analyses, and interdisciplinary links, suitable for newcomers with math backgrounds.  
node4: Develops algorithms for reinforcement learning of k-DNF action functions, achieving efficient learning and strong empirical performance in restricted policy classes.  
node5: Presents PAC-based adaptive control for linear systems, using active exploration to ensure polynomial learning time and near-optimal policies in high-dimensional spaces.  
node6: Details temporal-difference methods for prediction tasks, proving their optimality and efficiency advantages over conventional supervised learning in real-world applications.","node0:Academic paper with title and abstract:  Efficient reinforcement learning. : We propose a model of efficient on-line reinforcement learning based on the expected mistake bound framework introduced by Haussler, Littlestone and Warmuth (1987). The measure of performance we use is the expected difference between the total reward received by the learning agent and that received by an agent behaving optimally from the start. We call this expected difference the cumulative mistake of the agent and we require that it ""levels off"" at a reasonably fast rate as the learning progresses. We show that this model is polynomially equivalent to the PAC model of off-line reinforcement learning introduced in (Fiechter, 1994). In particular we show how an off-line PAC reinforcement learning algorithm can be transformed into an efficient on-line algorithm in a simple and practical way. An immediate consequence of this result is that the PAC algorithm for the general finite state-space reinforcement learning problem described in (Fiechter, 1994) can be transformed into a polynomial on-line al gorithm with guaranteed performances.
node1:Academic paper with title and abstract:  Exploratory Learning in the Game of GO: Initial Results. : This paper considers the importance of exploration to game-playing programs which learn by playing against opponents. The central question is whether a learning program should play the move which offers the best chance of winning the present game, or if it should play the move which has the best chance of providing useful information for future games. An approach to addressing this question is developed using probability theory, and then implemented in two different learning methods. Initial experiments in the game of Go suggest that a program which takes exploration into account can learn better against a knowledgeable opponent than a program which does not.
node2:Academic paper with title and abstract:  Associative reinforcement learning: A generate and test algorithm. : An agent that must learn to act in the world by trial and error faces the reinforcement learning problem, which is quite different from standard concept learning. Although good algorithms exist for this problem in the general case, they are often quite inefficient and do not exhibit generalization. One strategy is to find restricted classes of action policies that can be learned more efficiently. This paper pursues that strategy by developing an algorithm that performans an on-line search through the space of action mappings, expressed as Boolean formulae. The algorithm is compared with existing methods in empirical trials and is shown to have very good performance.
node3:Academic paper with title and abstract:  Introduction to the Theory of Neural Computa 92 tion. : Neural computation, also called connectionism, parallel distributed processing, neural network modeling or brain-style computation, has grown rapidly in the last decade. Despite this explosion, and ultimately because of impressive applications, there has been a dire need for a concise introduction from a theoretical perspective, analyzing the strengths and weaknesses of connectionist approaches and establishing links to other disciplines, such as statistics or control theory. The Introduction to the Theory of Neural Computation by Hertz, Krogh and Palmer (subsequently referred to as HKP) is written from the perspective of physics, the home discipline of the authors. The book fulfills its mission as an introduction for neural network novices, provided that they have some background in calculus, linear algebra, and statistics. It covers a number of models that are often viewed as disjoint. Critical analyses and fruitful comparisons between these models
node4:Academic paper with title and abstract:  Learning functions in k-DNF from reinforcement. : An agent that must learn to act in the world by trial and error faces the reinforcement learning problem, which is quite different from standard concept learning. Although good algorithms exist for this problem in the general case, they are often quite inefficient and do not exhibit generalization. One strategy is to find restricted classes of action policies that can be learned more efficiently. This paper pursues that strategy by developing algorithms that can efficiently learn action maps that are expressible in k-DNF. The algorithms are compared with existing methods in empirical trials and are shown to have very good performance.
node5:Academic paper with title and abstract:  PAC adaptive control of linear systems. : We consider a special case of reinforcement learning where the environment can be described by a linear system. The states of the environment and the actions the agent can perform are represented by real vectors and the system dynamic is given by a linear equation with a stochastic component. The problem is equivalent to the so-called linear quadratic regulator problem studied in the optimal and adaptive control literature. We propose a learning algorithm for that problem and analyze it in a PAC learning framework. Unlike the algorithms in the adaptive control literature, our algorithm actively explores the environment to learn an accurate model of the system faster. We show that the control law produced by our algorithm has, with high probability, a value that is close to that of an optimal policy relative to the magnitude of the initial state of the system. The time taken by the algorithm is polynomial in the dimension n of the state-space and in the dimension r of the action-space when the ratio n=r is a constant.
node6:Academic paper with title and abstract:  Learning to predict by the methods of temporal differences. : This article introduces a class of incremental learning procedures specialized for prediction|that is, for using past experience with an incompletely known system to predict its future behavior. Whereas conventional prediction-learning methods assign credit by means of the difference between predicted and actual outcomes, the new methods assign credit by means of the difference between temporally successive predictions. Although such temporal-difference methods have been used in Samuel's checker player, Holland's bucket brigade, and the author's Adaptive Heuristic Critic, they have remained poorly understood. Here we prove their convergence and optimality for special cases and relate them to supervised-learning methods. For most real-world prediction problems, temporal-difference methods require less memory and less peak computation than conventional methods; and they produce more accurate predictions. We argue that most problems to which supervised learning is currently applied are really prediction problems of the sort to which temporal-difference methods can be applied to advantage.",cora_node,nc
"Classify the essay represented by node12 using its subgraph data (text attributes and connections) as follows.

node0: Examines invention goals in expert systems using Bell's telephone, proposing mechanisms like ALEC to model opportunistic goal-driven innovation.  
node1: Explores case-based planning for learning, advocating simple operators to enable flexible, goal-driven adaptation in problem-solving.  
node2: Investigates enhancing CBR systems' creativity through case analysis, studying creative processes and frameworks for creative CBR applications.  
node3: Analyzes failure-driven learning as a bias, contrasting it with success-driven methods, using Meta-AQUA to demonstrate constrained learning benefits.  
node4: Introduces data-driven constructive induction (AQ17-DCI), improving GNP prediction via representation space optimization for accurate, simpler rules.  
node5: Develops case-based introspection planning for metacognition, using IULIAN to model self-regulation through past reasoning experiences.  
node6: Proposes reflection-based learning in problem-solving, using Autognostic to adapt task structures for better solutions via model-based analysis.  
node7: Hybrid GA-ID3 method for feature selection in classification, yielding improved accuracy and simplicity in satellite/facial image recognition.  
node8: Inferential Theory of Learning frames multistrategy learning via knowledge transmutations (e.g., generalization, similization) for adaptive learning systems.  
node9: Uses meta-explanations (Meta-XPs) to enable introspective reasoning, linking failure analysis to adaptive learning strategies in story understanding.  
node10: Studies focus in creative design, highlighting imagery and attention in case-based innovation through a student project analysis.  
node11: Models memory search strategy learning, focusing on retrieval criteria adaptation in CBR systems and implementation challenges.  
node12: Integrates creative reading theory into a functional model, implemented in ISAAC to analyze science fiction with imaginative comprehension.  
node13: Aims to formalize question-asking processes and their cognitive roles, though abstract content is unavailable.  
node14: Models creative understanding in reading via algorithms and knowledge structures, embedded in ISAAC for story analysis.  
node15: Explores analogue retrieval for innovative design, though abstract details are missing.  
node16: Learns CBR adaptation strategies via introspective reasoning, automating memory search plans to replace static adaptation rules.  
node17: Applies machine learning techniques to Checkers games, though abstract specifics are unavailable.  
node18: Proposes decision models for volitional explanations, using explanation patterns to analyze agents' planning motivations.

the connection relationship among the nodes mentioned:
 <node0, node10>,<node1, node8>,<node2, node10>,<node3, node9>,<node3, node13>,<node4, node8>,<node5, node9>,<node6, node9>,<node6, node17>,<node7, node8>,<node8, node13>,<node9, node11>,<node9, node12>,<node9, node14>,<node9, node16>,<node10, node12>,<node10, node14>,<node10, node15>,<node11, node16>,<node12, node13>,<node12, node14>,<node13, node18>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Case-Based,"

node0: Examines invention goals in expert systems using Bell's telephone, proposing mechanisms like ALEC to model opportunistic goal-driven innovation.  
node1: Explores case-based planning for learning, advocating simple operators to enable flexible, goal-driven adaptation in problem-solving.  
node2: Investigates enhancing CBR systems' creativity through case analysis, studying creative processes and frameworks for creative CBR applications.  
node3: Analyzes failure-driven learning as a bias, contrasting it with success-driven methods, using Meta-AQUA to demonstrate constrained learning benefits.  
node4: Introduces data-driven constructive induction (AQ17-DCI), improving GNP prediction via representation space optimization for accurate, simpler rules.  
node5: Develops case-based introspection planning for metacognition, using IULIAN to model self-regulation through past reasoning experiences.  
node6: Proposes reflection-based learning in problem-solving, using Autognostic to adapt task structures for better solutions via model-based analysis.  
node7: Hybrid GA-ID3 method for feature selection in classification, yielding improved accuracy and simplicity in satellite/facial image recognition.  
node8: Inferential Theory of Learning frames multistrategy learning via knowledge transmutations (e.g., generalization, similization) for adaptive learning systems.  
node9: Uses meta-explanations (Meta-XPs) to enable introspective reasoning, linking failure analysis to adaptive learning strategies in story understanding.  
node10: Studies focus in creative design, highlighting imagery and attention in case-based innovation through a student project analysis.  
node11: Models memory search strategy learning, focusing on retrieval criteria adaptation in CBR systems and implementation challenges.  
node12: Integrates creative reading theory into a functional model, implemented in ISAAC to analyze science fiction with imaginative comprehension.  
node13: Aims to formalize question-asking processes and their cognitive roles, though abstract content is unavailable.  
node14: Models creative understanding in reading via algorithms and knowledge structures, embedded in ISAAC for story analysis.  
node15: Explores analogue retrieval for innovative design, though abstract details are missing.  
node16: Learns CBR adaptation strategies via introspective reasoning, automating memory search plans to replace static adaptation rules.  
node17: Applies machine learning techniques to Checkers games, though abstract specifics are unavailable.  
node18: Proposes decision models for volitional explanations, using explanation patterns to analyze agents' planning motivations.","node0:Academic paper with title and abstract: an Opportunistic Enterprise: Tech Report GIT-COGSCI-97/04 Abstract This paper identifies goal handling processes that begin to account for the kind of processes involved in invention. We identify new kinds of goals with special properties and mechanisms for processing such goals, as well as means of integrating opportunism, deliberation, and social interaction into goal/plan processes. We focus on invention goals, which address significant enterprises associated with an inventor. Invention goals represent seed goals of an expert, around which the whole knowledge of an expert gets reorganized and grows more or less opportunistically. Invention goals reflect the idiosyncrasy of thematic goals among experts. They constantly increase the sensitivity of individuals for particular events that might contribute to their satisfaction. Our exploration is based on a well-documented example: the invention of the telephone by Alexander Graham Bell. We propose mechanisms to explain: (1) how Bell's early thematic goals gave rise to the new goals to invent the multiple telegraph and the telephone, and (2) how the new goals interacted opportunistically. Finally, we describe our computational model, ALEC, that accounts for the role of goals in invention.
node1:Academic paper with title and abstract: Case-Based Planning to Learn: Learning can be viewed as a problem of planning a series of modifications to memory. We adopt this view of learning and propose the applicability of the case-based planning methodology to the task of planning to learn. We argue that relatively simple, fine-grained primitive inferential operators are needed to support flexible planning. We show that it is possible to obtain the benefits of case-based reasoning within a planning to learn framework.
node2:Academic paper with title and abstract: Understanding Creativity: A Case-Based Approach: Dissatisfaction with existing standard case-based reasoning (CBR) systems has prompted us to investigate how we can make these systems more creative and, more broadly, what would it mean for them to be more creative. This paper discusses three research goals: understanding creative processes better, investigating the role of cases and CBR in creative problem solving, and understanding the framework that supports this more interesting kind of case-based reasoning. In addition, it discusses methodological issues in the study of creativity and, in particular, the use of CBR as a research paradigm for exploring creativity.
node3:Academic paper with title and abstract: Abstract: Self-selection of input examples on the basis of performance failure is a powerful bias for learning systems. The definition of what constitutes a learning bias, however, has been typically restricted to bias provided by the input language, hypothesis language, and preference criteria between competing concept hypotheses. But if bias is taken in the broader context as any basis that provides a preference for one concept change over another, then the paradigm of failure-driven processing indeed provides a bias. Bias is exhibited by the selection of examples from an input stream that are examples of failure; successful performance is filtered out. We show that the degrees of freedom are less in failure-driven learning than in success-driven learning and that learning is facilitated because of this constraint. We also broaden the definition of failure, provide a novel taxonomy of failure causes, and illustrate the interaction of both in a multistrategy learning system called Meta-AQUA.
node4:Academic paper with title and abstract: Machine Learning and Inference: Constructive induction divides the problem of learning an inductive hypothesis into two intertwined searches: onefor the best representation space, and twofor the best hypothesis in that space. In data-driven constructive induction (DCI), a learning system searches for a better representation space by analyzing the input examples (data). The presented data-driven constructive induction method combines an AQ-type learning algorithm with two classes of representation space improvement operators: constructors, and destructors. The implemented system, AQ17-DCI, has been experimentally applied to a GNP prediction problem using a World Bank database. The results show that decision rules learned by AQ17-DCI outperformed the rules learned in the original representation space both in predictive accuracy and rule simplicity.
node5:Academic paper with title and abstract: Abstract: Metacognition addresses the issues of knowledge about cognition and regulating cognition. We argue that the regulation process should be improved with growing experience. Therefore mental models are needed which facilitate the re-use of previous regulation processes. We will satisfy this requirement by describing a case-based approach to Introspection Planning which utilises previous experience obtained during reasoning at the meta-level and at the object level. The introspection plans used in this approach support various metacognitive tasks which are identified by the generation of self-questions. As an example of introspection planning, the metacognitive behaviour of our system, IULIAN, is described.
node6:Academic paper with title and abstract:  Learning problem-solving concepts by reflecting on problem solving. : Learning and problem solving are intimately related: problem solving determines the knowledge requirements of the reasoner which learning must fulfill, and learning enables improved problem-solving performance. Different models of problem solving, however, recognize different knowledge needs, and, as a result, set up different learning tasks. Some recent models analyze problem solving in terms of generic tasks, methods, and subtasks. These models require the learning of problem-solving concepts such as new tasks and new task decompositions. We view reflection as a core process for learning these problem-solving concepts. In this paper, we identify the learning issues raised by the task-structure framework of problem solving. We view the problem solver as an abstract device, and represent how it works in terms of a structure-behavior-function model which specifies how the knowledge and reasoning of the problem solver results in the accomplishment of its tasks. We describe how this model enables reflection, and how model-based reflection enables the reasoner to adapt its task structure to produce solutions of better quality. The Autognostic system illustrates this reflection process.
node7:Academic paper with title and abstract:  Hybrid Learning Using Genetic Algorithms and Decision Trees for Pattern Classification. : This paper introduces a hybrid learning methodology that integrates genetic algorithms (GAs) and decision tree learning (ID3) in order to evolve optimal subsets of discriminatory features for robust pattern classification. A GA is used to search the space of all possible subsets of a large set of candidate discrimination features. For a given feature subset, ID3 is invoked to produce a decision tree. The classification performance of the decision tree on unseen data is used as a measure of fitness for the given feature set, which, in turn, is used by the GA to evolve better feature sets. This GA-ID3 process iterates until a feature subset is found with satisfactory classification performance. Experimental results are presented which illustrate the feasibility of our approach on difficult problems involving recognizing visual concepts in satellite and facial image data. The results also show improved classification performance and reduced description complexity when compared against standard methods for feature selection.
node8:Academic paper with title and abstract:  Inferential Theory of Learning: Developing Foundations for Multistrategy Learning, in Machine Learning: A Multistrategy Approach, Vol. IV, R.S. : The development of multistrategy learning systems should be based on a clear understanding of the roles and the applicability conditions of different learning strategies. To this end, this chapter introduces the Inferential Theory of Learning that provides a conceptual framework for explaining logical capabilities of learning strategies, i.e., their competence. Viewing learning as a process of modifying the learners knowledge by exploring the learners experience, the theory postulates that any such process can be described as a search in a knowledge space, triggered by the learners experience and guided by learning goals. The search operators are instantiations of knowledge transmutations, which are generic patterns of knowledge change. Transmutations may employ any basic type of inferencededuction, induction or analogy. Several fundamental knowledge transmutations are described in a novel and general way, such as generalization, abstraction, explanation and similization, and their counterparts, specialization, concretion, prediction and dissimilization, respectively. Generalization enlarges the reference set of a description (the set of entities that are being described). Abstraction reduces the amount of the detail about the reference set. Explanation generates premises that explain (or imply) the given properties of the reference set. Similization transfers knowledge from one reference set to a similar reference set. Using concepts of the theory, a multistrategy task-adaptive learning (MTL) methodology is outlined, and illustrated b y an example. MTL dynamically adapts strategies to the learning task, defined by the input information, learners background knowledge, and the learning goal. It aims at synergistically integrating a whole range of inferential learning strategies, such as empirical generalization, constructive induction, deductive generalization, explanation, prediction, abstraction, and similization.
node9:Academic paper with title and abstract:  Introspective Reasoning using Meta-Explanations for Multistrat-egy Learning. : In order to learn effectively, a reasoner must not only possess knowledge about the world and be able to improve that knowledge, but it also must introspectively reason about how it performs a given task and what particular pieces of knowledge it needs to improve its performance at the current task. Introspection requires declarative representations of meta-knowledge of the reasoning performed by the system during the performance task, of the system's knowledge, and of the organization of this knowledge. This chapter presents a taxonomy of possible reasoning failures that can occur during a performance task, declarative representations of these failures, and associations between failures and particular learning strategies. The theory is based on Meta-XPs, which are explanation structures that help the system identify failure types, formulate learning goals, and choose appropriate learning strategies in order to avoid similar mistakes in the future. The theory is implemented in a computer model of an introspective reasoner that performs multistrategy learning during a story understanding task.
node10:Academic paper with title and abstract:  Paying attention to the right things: Issues of focus in case-based creative design. : Case-based reasoning can be used to explain many creative design processes, since much creativity stems from using old solutions in novel ways. To understand the role cases play, we conducted an exploratory study of a seven-week student creative design project. This paper discusses the observations we made and the issues that arise in understanding and modeling creative design processes. We found particularly interesting the role of imagery in reminding and in evaluating design options. This included visualization, mental simulation, gesturing, and even sound effects. An important class of issues we repeatedly encounter in our modeling efforts concerns the focus of the designer. (For example, which problem constraints should be reformulated? Which evaluative issues should be raised?) Cases help to address these focus issues.
node11:Academic paper with title and abstract:  Towards a computer model of memory search strategy learning. : Much recent research on modeling memory processes has focused on identifying useful indices and retrieval strategies to support particular memory tasks. Another important question concerning memory processes, however, is how retrieval criteria are learned. This paper examines the issues involved in modeling the learning of memory search strategies. It discusses the general requirements for appropriate strategy learning and presents a model of memory search strategy learning applied to the problem of retrieving relevant information for adapting cases in case-based reasoning. It discusses an implementation of that model, and, based on the lessons learned from that implementation, points towards issues and directions in refining the model.
node12:Academic paper with title and abstract:  Integrating reading and creativity: A functional approach. : Reading has been studied for decades by a variety of cognitive disciplines, yet no theories exist which sufficiently describe and explain how people accomplish the complete task of reading real-world texts. In particular, a type of knowledge intensive reading known as creative reading has been largely ignored by the past research. We argue that creative reading is an aspect of practically all reading experiences; as a result, any theory which overlooks this will be insufficient. We have built on results from psychology, artificial intelligence, and education in order to produce a functional theory of the complete reading process. The overall framework describes the set of tasks necessary for reading to be performed. Within this framework, we have developed a theory of creative reading. The theory is implemented in the ISAAC (Integrated Story Analysis And Creativity) system, a reading system which reads science fiction stories.
node13:Academic paper with title and abstract:  A theory of questions and question asking. : 
node14:Academic paper with title and abstract:  A Model of Creative Understanding, : Although creativity has largely been studied in problem solving contexts, creativity consists of both a generative component and a comprehension component. In particular, creativity is an essential part of reading and understanding of natural language stories. We have formalized the understanding process and have developed an algorithm capable of producing creative understanding behavior. We have also created a novel knowledge organization scheme to assist the process. Our model of creativity is implemented as a portion of the ISAAC (Integrated Story Analysis And Creativity) reading system, a system which models the creative reading of science fiction stories.
node15:Academic paper with title and abstract:  Finding analogues for innovative design. : Knowledge Systems Laboratory March 1995 Report No. KSL 95-32
node16:Academic paper with title and abstract:  Learning Adaptation Strategies by Introspective Reasoning about Memory Search, : In case-based reasoning systems, the case adaptation process is traditionally controlled by static libraries of hand-coded adaptation rules. This paper proposes a method for learning adaptation knowledge in the form of adaptation strategies of the type developed and hand-coded by Kass [90] . Adaptation strategies differ from standard adaptation rules in that they encode general memory search procedures for finding the information needed during case adaptation; this paper focuses on the issues involved in learning memory search procedures to form the basis of new adaptation strategies. It proposes a method that starts with a small library of abstract adaptation rules and uses introspective reasoning about the system's memory organization to generate the memory search plans needed to apply those rules. The search plans are then packaged with the original abstract rules to form new adaptation strategies for future use. This process allows a CBR system not only to learn about its domain, by storing the results of case adaptation, but also to learn how to apply the cases in its memory more effectively.
node17:Academic paper with title and abstract:  Some studies in machine learning using the game of Checkers. : 
node18:Academic paper with title and abstract:  Decision Models: A Theory of Volitional Explanation. : This paper presents a theory of motivational analysis, the construction of volitional explanations to describe the planning behavior of agents. We discuss both the content of such explanations, as well as the process by which an understander builds the explanations. Explanations are constructed from decision models, which describe the planning process that an agent goes through when considering whether to perform an action. Decision models are represented as explanation patterns, which are standard patterns of causality based on previous experiences of the understander. We discuss the nature of explanation patterns, their use in representing decision models, and the process by which they are retrieved, used and evaluated.",cora_node,nc
"Classify the essay represented by node15 using its subgraph data (text attributes and connections) as follows.

node0: Explores loan application model selection using logistic regression techniques, finding a subset of variables suffices for approval decisions.  
node1: Proposes Bayesian inference for nondecomposable graphical Gaussian models via Wishart distribution sampling for posterior probability estimation.  
node2: Addresses counterfactual query evaluation using causal networks, applying bounds for uncertainty in treatment efficacy and liability determination.  
node3: Introduces out-of-bootstrap method for model averaging/selection, offering computational efficiency over Bayesian approaches using left-out data.  
node4: Examines Markov equivalence of graphical models, using essential graphs and Bayesian algorithms for model analysis in discrete data.  
node5: Formalizes counterfactual evaluation via probabilistic causal networks, addressing uncertainty through closest-world semantics.  
node6: Develops regression-based algorithms to distinguish direct/indirect effects in structural equation models, validated empirically.  
node7: Applies MDL learning to build probabilistic neural networks for efficient discrete case-based reasoning with Bayesian propagation.  
node8: Links lattice CI models to transitive acyclic digraphs, enabling polynomial-time equivalence checks between graphical structures.  
node9: Proposes Bayesian graphical models for Intelligent Tutoring Systems to model student knowledge and uncertainty effectively.  
node10: Uses Occam’s Window for Bayesian model selection in graphical models, reducing computational burden via efficient model averaging.  
node11: Outlines a causation theory distinguishing true from spurious effects, employing inductive reasoning and causal discovery algorithms.  
node12: Abstract unavailable; title suggests focus on feedback models’ interpretation and discovery.  
node13: Derives inequality constraints for testing causal models with latent variables using instrumental variables and observed data.  
node14: Implements Bayesian model determination in decomposable Gaussian models via hyper inverse Wishart priors and MCMC sampling.  
node15: Discusses Bayesian model selection’s role in social research, emphasizing methodological rigor and applications in sociology.  
node16: Explores path diagrams as tools for structural equation modeling, likely highlighting their interpretive and analytical utility.

the connection relationship among the nodes mentioned:
 <node0, node10>,<node0, node15>,<node1, node10>,<node2, node5>,<node2, node11>,<node3, node10>,<node4, node8>,<node4, node16>,<node5, node11>,<node6, node11>,<node7, node11>,<node8, node10>,<node9, node10>,<node10, node11>,<node10, node14>,<node11, node12>,<node11, node13>,<node11, node16>,<node12, node16>,<node15, node16>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Probabilistic Methods,"

node0: Explores loan application model selection using logistic regression techniques, finding a subset of variables suffices for approval decisions.  
node1: Proposes Bayesian inference for nondecomposable graphical Gaussian models via Wishart distribution sampling for posterior probability estimation.  
node2: Addresses counterfactual query evaluation using causal networks, applying bounds for uncertainty in treatment efficacy and liability determination.  
node3: Introduces out-of-bootstrap method for model averaging/selection, offering computational efficiency over Bayesian approaches using left-out data.  
node4: Examines Markov equivalence of graphical models, using essential graphs and Bayesian algorithms for model analysis in discrete data.  
node5: Formalizes counterfactual evaluation via probabilistic causal networks, addressing uncertainty through closest-world semantics.  
node6: Develops regression-based algorithms to distinguish direct/indirect effects in structural equation models, validated empirically.  
node7: Applies MDL learning to build probabilistic neural networks for efficient discrete case-based reasoning with Bayesian propagation.  
node8: Links lattice CI models to transitive acyclic digraphs, enabling polynomial-time equivalence checks between graphical structures.  
node9: Proposes Bayesian graphical models for Intelligent Tutoring Systems to model student knowledge and uncertainty effectively.  
node10: Uses Occam’s Window for Bayesian model selection in graphical models, reducing computational burden via efficient model averaging.  
node11: Outlines a causation theory distinguishing true from spurious effects, employing inductive reasoning and causal discovery algorithms.  
node12: Abstract unavailable; title suggests focus on feedback models’ interpretation and discovery.  
node13: Derives inequality constraints for testing causal models with latent variables using instrumental variables and observed data.  
node14: Implements Bayesian model determination in decomposable Gaussian models via hyper inverse Wishart priors and MCMC sampling.  
node15: Discusses Bayesian model selection’s role in social research, emphasizing methodological rigor and applications in sociology.  
node16: Explores path diagrams as tools for structural equation modeling, likely highlighting their interpretive and analytical utility.","node0:Academic paper with title and abstract: Model Selection for Consumer Loan Application Data: Loan applications at banks are often long, requiring the applicant to provide large amounts of data. Is all of it necessary? Can we save the applicant some frustration and the bank some expense by using only a subset of the relevant variables? To answer this question, I have attempted to model the current loan approval process at a particular bank. I have used several model selection techniques for logistic regression, including stepwise regression, Occam's Window, Markov Chain Monte Carlo Model Composition (Raftery, Madigan, and Hoeting, 1993), and Bayesian Random Searching. The resulting models largely agree upon a subset of only one-third of the original variables. fl This paper was completed in partial fulfillment of the Ph.D. data analysis requirement.
node1:Academic paper with title and abstract: Bayesian inference for nondecomposable graphical Gaussian models: In this paper we propose a method to calculate the posterior probability of a nondecomposable graphical Gaussian model. Our proposal is based on a new device to sample from Wishart distributions, conditional on the graphical constraints. As a result, our methodology allows Bayesian model selection within the whole class of graphical Gaussian models, including nondecomposable ones.
node2:Academic paper with title and abstract: : In the Proceedings of the Conference on Uncertainty in Artificial Intelli- gence (UAI-94), Seattle, WA, 46-54, July 29-31, 1994. Technical Report R-213-B April, 1994 Abstract Evaluation of counterfactual queries (e.g., ""If A were true, would C have been true?"") is important to fault diagnosis, planning, and determination of liability. In this paper we present methods for computing the probabilities of such queries using the formulation proposed in [Balke and Pearl, 1994], where the antecedent of the query is interpreted as an external action that forces the proposition A to be true. When a prior probability is available on the causal mechanisms governing the domain, counterfactual probabilities can be evaluated precisely. However, when causal knowledge is specified as conditional probabilities on the observables, only bounds can computed. This paper develops techniques for evaluating these bounds, and demonstrates their use in two applications: (1) the determination of treatment efficacy from studies in which subjects may choose their own treatment, and (2) the determination of liability in product-safety litigation.
node3:Academic paper with title and abstract:  The out-of-bootstrap method for model averaging and selection. : We propose a bootstrap-based method for model averaging and selection that focuses on training points that are left out of individual bootstrap samples. This information can be used to estimate optimal weighting factors for combining estimates from different bootstrap samples, and also for finding the best subsets the linear model setting. These proposals provide alternatives to Bayesian approaches to model averaging and selection, requiring less computation and fewer subjective choices.
node4:Academic paper with title and abstract:  ""On the Markov equivalence of chain graphs, undirected graphs, and acyclic digraphs"", : Acyclic digraphs (ADGs) are widely used to describe dependences among variables in multivariate distributions. In particular, the likelihood functions of ADG models admit convenient recursive factorizations that often allow explicit maximum likelihood estimates and that are well suited to building Bayesian networks for expert systems. There may, however, be many ADGs that determine the same dependence (= Markov) model. Thus, the family of all ADGs with a given set of vertices is naturally partitioned into Markov-equivalence classes, each class being associated with a unique statistical model. Statistical procedures, such as model selection or model averaging, that fail to take into account these equivalence classes, may incur substantial computational or other inefficiencies. Recent results have shown that each Markov-equivalence class is uniquely determined by a single chain graph, the essential graph, that is itself Markov-equivalent simultaneously to all ADGs in the equivalence class. Here we propose two stochastic Bayesian model averaging and selection algorithms for essential graphs and apply them to the analysis of three discrete-variable data sets.
node5:Academic paper with title and abstract:  Probabilistic evaluation of counterfactual queries. : To appear in the Twelfth National Conference on Artificial Intelligence (AAAI-94), Seattle, WA, July 31 August 4, 1994. Technical Report R-213-A April, 1994 Abstract Evaluation of counterfactual queries (e.g., ""If A were true, would C have been true?"") is important to fault diagnosis, planning, and determination of liability. We present a formalism that uses probabilistic causal networks to evaluate one's belief that the counterfactual consequent, C, would have been true if the antecedent, A, were true. The antecedent of the query is interpreted as an external action that forces the proposition A to be true, which is consistent with Lewis' Miraculous Analysis. This formalism offers a concrete embodiment of the ""closest world"" approach which (1) properly reflects common understanding of causal influences, (2) deals with the uncertainties inherent in the world, and (3) is amenable to machine representation.
node6:Academic paper with title and abstract:  Two algorithms for inducing structural equation models from data. : Many methods have been developed for inducing cause from statistical data. Those employing linear regression have historically been discounted, due to their inability to distinguish true from spurious cause. We present a regression-based statistic that avoids this problem by separating direct and indirect influences. We use this statistic in two causal induction algorithms, each taking a different approach to constructing causal models. We demonstrate empirically the accuracy of these algorithms.
node7:Academic paper with title and abstract:  MDL learning of probabilistic neural networks for discrete problem domains. : Given a problem, a case-based reasoning (CBR) system will search its case memory and use the stored cases to find the solution, possibly modifying retrieved cases to adapt to the required input specifications. In discrete domains CBR reasoning can be based on a rigorous Bayesian probability propagation algorithm. Such a Bayesian CBR system can be implemented as a probabilistic feedforward neural network with one of the layers representing the cases. In this paper we introduce a Minimum Description Length (MDL) based learning algorithm to obtain the proper network structure with the associated conditional probabilities. This algorithm together with the resulting neural network implementation provide a massively parallel architecture for solving the efficiency bottleneck in case-based reasoning.
node8:Academic paper with title and abstract:  C.M. (1997). A graphical characterization of lattice conditional independence models. : Lattice conditional independence (LCI) models for multivariate normal data recently have been introduced for the analysis of non-monotone missing data patterns and of nonnested dependent linear regression models ( seemingly unrelated regressions). It is shown here that the class of LCI models coincides with a subclass of the class of graphical Markov models determined by acyclic digraphs (ADGs), namely, the subclass of transitive ADG models. An explicit graph - theoretic characterization of those ADGs that are Markov equivalent to some transitive ADG is obtained. This characterization allows one to determine whether a specific ADG D is Markov equivalent to some transitive ADG, hence to some LCI model, in polynomial time, without an exhaustive search of the (exponentially large) equivalence class [D ]. These results do not require the existence or positivity of joint densities.
node9:Academic paper with title and abstract:  (1995) Bayesian graphical models for intelligent tutoring systems. : Conventional Intelligent Tutoring Systems (ITS) do not acknowledge uncertainty about the student's knowledge. Yet, both the outcome of any teaching intervention and the exact state of the student's knowledge are uncertain. In recent years, researchers have made startling progress in the management of uncertainty in knowledge-based systems. Building on these developments, we describe an ITS architecture that explicitly models uncertainty. This will facilitate more accurate student modeling and provide ITS's which can learn.
node10:Academic paper with title and abstract:  Model selection and accounting for model uncertainty in graphical models using Occam\'s window. : We consider the problem of model selection and accounting for model uncertainty in high-dimensional contingency tables, motivated by expert system applications. The approach most used currently is a stepwise strategy guided by tests based on approximate asymptotic P -values leading to the selection of a single model; inference is then conditional on the selected model. The sampling properties of such a strategy are complex, and the failure to take account of model uncertainty leads to underestimation of uncertainty about quantities of interest. In principle, a panacea is provided by the standard Bayesian formalism which averages the posterior distributions of the quantity of interest under each of the models, weighted by their posterior model probabilities. Furthermore, this approach is optimal in the sense of maximising predictive ability. However, this has not been used in practice because computing the posterior model probabilities is hard and the number of models is very large (often greater than 10 11 ). We argue that the standard Bayesian formalism is unsatisfactory and we propose an alternative Bayesian approach that, we contend, takes full account of the true model uncertainty by averaging over a much smaller set of models. An efficient search algorithm is developed for finding these models. We consider two classes of graphical models that arise in expert systems: the recursive causal models and the decomposable fl David Madigan is Assistant Professor of Statistics and Adrian E. Raftery is Professor of Statistics and Sociology, Department of Statistics, GN-22, University of Washington, Seattle, WA 98195. Madigan's research was partially supported by the Graduate School Research Fund, University of Washington and by the NSF. Raftery's research was supported by ONR Contract no. N-00014-91-J-1074. The authors are grateful to Gregory Cooper, Leo Goodman, Shelby Haberman, David Hinkley, Graham Upton, Jon Wellner, Nanny Wermuth, Jeremy York, Walter Zucchini and two anonymous referees for helpful comments and discussions, and to Michael R. Butler for providing the data for the scrotal swellings example.
node11:Academic paper with title and abstract:  A theory of inferred causation. : This paper concerns the empirical basis of causation, and addresses the following issues: We propose a minimal-model semantics of causation, and show that, contrary to common folklore, genuine causal influences can be distinguished from spurious covariations following standard norms of inductive reasoning. We also establish a sound characterization of the conditions under which such a distinction is possible. We provide an effective algorithm for inferred causation and show that, for a large class of data the algorithm can uncover the direction of causal influences as defined above. Finally, we ad dress the issue of non-temporal causation.
node12:Academic paper with title and abstract:  (1996c) Feedback Models: Interpretation and Discovery. : 
node13:Academic paper with title and abstract:  On the testability of causal models with latent and instrumental variables. : Certain causal models involving unmeasured variables induce no independence constraints among the observed variables but imply, nevertheless, inequality constraints on the observed distribution. This paper derives a general formula for such inequality constraints as induced by instrumental variables, that is, exogenous variables that directly affect some variables but not all. With the help of this formula, it is possible to test whether a model involving instrumental variables may account for the data, or, conversely, whether a given vari able can be deemed instrumental.
node14:Academic paper with title and abstract:  Decomposable Graphical Gaussian Model Determination. : We propose a methodology for Bayesian model determination in decomposable graphical Gaussian models. To achieve this aim we consider a hyper inverse Wishart prior distribution on the concentration matrix for each given graph. To ensure compatibility across models, such prior distributions are obtained by marginalisation from the prior conditional on the complete graph. We explore alternative structures for the hyperparameters of the latter, and their consequences for the model. Model determination is carried out by implementing a reversible jump MCMC sampler. In particular, the dimension-changing move we propose involves adding or dropping an edge from the graph. We characterise the set of moves which preserve the decomposability of the graph, giving a fast algorithm for maintaining the junction tree representation of the graph at each sweep. As state variable, we propose to use the incomplete variance-covariance matrix, containing only the elements for which the corresponding element of the inverse is nonzero. This allows all computations to be performed locally, at the clique level, which is a clear advantage for the analysis of large and complex data-sets. Finally, the statistical and computational performance of the procedure is illustrated by means of both artificial and real multidimensional data-sets.
node15:Academic paper with title and abstract:  Bayesian model selection in social research. : 1 This article will be published in Sociological Methodology 1995, edited by Peter V. Marsden, Cambridge, Mass.: Blackwells. Adrian E. Raftery is Professor of Statistics and Sociology, Department of Sociology, DK-40, University of Washington, Seattle, WA 98195. This research was supported by NIH grant no. 5R01HD26330. I would like to thank Robert Hauser, Michael Hout, Steven Lewis, Scott Long, Diane Lye, Peter Marsden, Bruce Western, Yu Xie and two anonymous reviewers for detailed comments on an earlier version. I am also grateful to Clem Brooks, Sir David Cox, Tom DiPrete, John Goldthorpe, David Grusky, Jennifer Hoeting, Robert Kass, David Madigan, Michael Sobel and Chris Volinsky for helpful discussions and correspondence.
node16:Academic paper with title and abstract:  Using path diagrams as a structural equation modeling tool. : ",cora_node,nc
"Classify the essay represented by node0 using its subgraph data (text attributes and connections) as follows.

node0: Investigates viewpoint-invariant face recognition using attractor networks with ICA inputs, showing ICA outperforms PCA for view-invariant object recognition.  
node1: Explores overcomplete representations but abstract incomplete; focuses on expanding neural coding beyond principal components.  
node2: Uses temporal association and recurrent networks with Hebbian learning to develop viewpoint-invariant face representations via activity smoothing.  
node3: Applies ICA to financial data, revealing independent components (shocks/fluctuations) superior to PCA for capturing market dynamics and reconstruction.  
node4: Proposes statistical theory for object representation using local features, likely addressing hierarchical or modular visual processing.  
node5: Introduces competitive anti-Hebbian learning to extract coherent depth from random-dot stereograms via unsupervised neural networks.  
node6: Uses information maximization for blind source separation/deconvolution, enabling non-linear separation of independent components in speech signals.  
node7: Links natural image statistics to sparse coding, showing sparseness in neural networks replicates primate visual cortex receptive fields.  
node8: Trains BCM networks on natural scenes to model orientation selectivity and ocular dominance columns under binocular misalignment.  
node9: Proposes unsupervised neural network for dimensionality reduction emphasizing multimodality, linked to BCM neurons and applied in phoneme recognition.  
node10: Develops two-layer network learning multiple views of 3D objects, enabling generalization to novel viewpoints via Hebbian relaxation.  
node11: Derives simple neuron models for ICA with convergence proofs, enabling separation of components with arbitrary kurtosis from raw mixtures.  
node12: Discusses signal separation via nonlinear Hebbian learning but abstract incomplete; focuses on adaptive neural processing.  
node13: Combines ICA and attractor networks for pose-invariant face recognition, leveraging temporal continuity and surpassing PCA in view invariance.  
node14: Models invariant visual recognition through hierarchical networks using trace learning rules to capture temporal invariances in object transformations.  
node15: Designs multi-layer VLSI-implementable networks for blind separation of correlated images, extracting sources sequentially via local learning.  
node16: Proposes predictability minimization for factorial codes, reducing redundancy and enabling independent feature extraction for segmentation tasks.  
node17: Introduces fast fixed-point ICA algorithm with cubic convergence, offering simple, parameter-free blind source separation for non-Gaussian signals.  
node18: Analyzes nonlinear PCA learning rules for signal separation but abstract incomplete; explores mathematical foundations of blind source techniques.

the connection relationship among the nodes mentioned:
 <node0, node6>,<node0, node10>,<node0, node14>,<node1, node6>,<node2, node10>,<node2, node13>,<node2, node14>,<node3, node6>,<node3, node12>,<node4, node6>,<node4, node9>,<node4, node16>,<node5, node6>,<node6, node7>,<node6, node11>,<node6, node12>,<node6, node13>,<node6, node15>,<node6, node16>,<node6, node17>,<node7, node8>,<node11, node17>,<node12, node15>,<node12, node17>,<node12, node18>,<node13, node14>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: Investigates viewpoint-invariant face recognition using attractor networks with ICA inputs, showing ICA outperforms PCA for view-invariant object recognition.  
node1: Explores overcomplete representations but abstract incomplete; focuses on expanding neural coding beyond principal components.  
node2: Uses temporal association and recurrent networks with Hebbian learning to develop viewpoint-invariant face representations via activity smoothing.  
node3: Applies ICA to financial data, revealing independent components (shocks/fluctuations) superior to PCA for capturing market dynamics and reconstruction.  
node4: Proposes statistical theory for object representation using local features, likely addressing hierarchical or modular visual processing.  
node5: Introduces competitive anti-Hebbian learning to extract coherent depth from random-dot stereograms via unsupervised neural networks.  
node6: Uses information maximization for blind source separation/deconvolution, enabling non-linear separation of independent components in speech signals.  
node7: Links natural image statistics to sparse coding, showing sparseness in neural networks replicates primate visual cortex receptive fields.  
node8: Trains BCM networks on natural scenes to model orientation selectivity and ocular dominance columns under binocular misalignment.  
node9: Proposes unsupervised neural network for dimensionality reduction emphasizing multimodality, linked to BCM neurons and applied in phoneme recognition.  
node10: Develops two-layer network learning multiple views of 3D objects, enabling generalization to novel viewpoints via Hebbian relaxation.  
node11: Derives simple neuron models for ICA with convergence proofs, enabling separation of components with arbitrary kurtosis from raw mixtures.  
node12: Discusses signal separation via nonlinear Hebbian learning but abstract incomplete; focuses on adaptive neural processing.  
node13: Combines ICA and attractor networks for pose-invariant face recognition, leveraging temporal continuity and surpassing PCA in view invariance.  
node14: Models invariant visual recognition through hierarchical networks using trace learning rules to capture temporal invariances in object transformations.  
node15: Designs multi-layer VLSI-implementable networks for blind separation of correlated images, extracting sources sequentially via local learning.  
node16: Proposes predictability minimization for factorial codes, reducing redundancy and enabling independent feature extraction for segmentation tasks.  
node17: Introduces fast fixed-point ICA algorithm with cubic convergence, offering simple, parameter-free blind source separation for non-Gaussian signals.  
node18: Analyzes nonlinear PCA learning rules for signal separation but abstract incomplete; explores mathematical foundations of blind source techniques.","node0:Academic paper with title and abstract: Learning Viewpoint Invariant Representations of Faces in an Attractor Network: In natural visual experience, different views of an object tend to appear in close temporal proximity as an animal manipulates the object or navigates around it. We investigated the ability of an attractor network to acquire view invariant visual representations by associating first neighbors in a pattern sequence. The pattern sequence contains successive views of faces of ten individuals as they change pose. Under the network dynamics developed by Griniasty, Tsodyks & Amit (1993), multiple views of a given subject fall into the same basin of attraction. We use an independent component (ICA) representation of the faces for the input patterns (Bell & Sejnowski, 1995). The ICA representation has advantages over the principal component representation (PCA) for viewpoint-invariant recognition both with and without the attractor network, suggesting that ICA is a better representation than PCA for object recognition.
node1:Academic paper with title and abstract: Learning overcomplete representations: 
node2:Academic paper with title and abstract: Learning Viewpoint Invariant Face Representations from Visual Experience by Temporal Association: In natural visual experience, different views of an object or face tend to appear in close temporal proximity. A set of simulations is presented which demonstrate how viewpoint invariant representations of faces can be developed from visual experience by capturing the temporal relationships among the input patterns. The simulations explored the interaction of temporal smoothing of activity signals with Hebbian learning (Foldiak, 1991) in both a feed-forward system and a recurrent system. The recurrent system was a generalization of a Hopfield network with a lowpass temporal filter on all unit activities. Following training on sequences of graylevel images of faces as they changed pose, multiple views of a given face fell into the same basin of attraction, and the system acquired representations of faces that were approximately viewpoint invariant.
node3:Academic paper with title and abstract: Working Paper IS-97-22 (Information Systems) A First Application of Independent Component Analysis to Extracting Structure: This paper discusses the application of a modern signal processing technique known as independent component analysis (ICA) or blind source separation to multivariate financial time series such as a portfolio of stocks. The key idea of ICA is to linearly map the observed multivariate time series into a new space of statistically independent components (ICs). This can be viewed as a factorization of the portfolio since joint probabilities become simple products in the coordinate system of the ICs. We apply ICA to three years of daily returns of the 28 largest Japanese stocks and compare the results with those obtained using principal component analysis. The results indicate that the estimated ICs fall into two categories, (i) infrequent but large shocks (responsible for the major changes in the stock prices), and (ii) frequent smaller fluctuations (contributing little to the overall level of the stocks). We show that the overall stock price can be reconstructed surprisingly well by using a small number of thresholded weighted ICs. In contrast, when using shocks derived from principal components instead of independent components, the reconstructed price is less similar to the original one. Independent component analysis is a potentially powerful method of analyzing and understanding driving mechanisms in financial markets. There are further promising applications to risk management since ICA focuses on higher order statistics.
node4:Academic paper with title and abstract: Local Feature Analysis: A general statistical theory for object representation: 
node5:Academic paper with title and abstract:  Competitive anti-hebbian learning of invariants. : Although the detection of invariant structure in a given set of input patterns is vital to many recognition tasks, connectionist learning rules tend to focus on directions of high variance (principal components). The prediction paradigm is often used to reconcile this dichotomy; here we suggest a more direct approach to invariant learning based on an anti-Hebbian learning rule. An unsupervised two-layer network implementing this method in a competitive setting learns to extract coherent depth information from random-dot stereograms.
node6:Academic paper with title and abstract:  An Information Maximization Approach to Blind Separation and Blind Deconvolution. : We derive a new self-organising learning algorithm which maximises the information transferred in a network of non-linear units. The algorithm does not assume any knowledge of the input distributions, and is defined here for the zero-noise limit. Under these conditions, information maximisation has extra properties not found in the linear case (Linsker 1989). The non-linearities in the transfer function are able to pick up higher-order moments of the input distributions and perform something akin to true redundancy reduction between units in the output representation. This enables the network to separate statistically independent components in the inputs: a higher-order generalisation of Principal Components Analysis. We apply the network to the source separation (or cocktail party) problem, successfully separating unknown mixtures of up to ten speakers. We also show that a variant on the network architecture is able to perform blind deconvolution (cancellation of unknown echoes and reverberation in a speech signal). Finally, we derive dependencies of information transfer on time delays. We suggest that information max-imisation provides a unifying framework for problems in `blind' signal processing. fl Please send comments to tony@salk.edu. This paper will appear as Neural Computation, 7, 6, 1004-1034 (1995). The reference for this version is: Technical Report no. INC-9501, February 1995, Institute for Neural Computation, UCSD, San Diego, CA 92093-0523.
node7:Academic paper with title and abstract:  Field, ""Natural image statistics and efficient coding"", : Natural images contain characteristic statistical regularities that set them apart from purely random images. Understanding what these regularities are can enable natural images to be coded more efficiently. In this paper, we describe some of the forms of structure that are contained in natural images, and we show how these are related to the response properties of neurons at early stages of the visual system. Many of the important forms of structure require higher-order (i.e., more than linear, pairwise) statistics to characterize, which makes models based on linear Hebbian learning, or principal components analysis, inappropriate for finding efficient codes for natural images. We suggest that a good objective for an efficient coding of natural scenes is to maximize the sparseness of the representation, and we show that a network that learns sparse codes of natural scenes succeeds in developing localized, oriented, bandpass receptive fields similar to those in the primate striate cortex.
node8:Academic paper with title and abstract:  BCM network develops orientation selectivity and ocular dominance from natural scenes environment. : A two-eye visual environment is used in training a network of BCM neurons. We study the effect of misalignment between the synaptic density functions from the two eyes, on the formation of orientation selectivity and ocular dominance in a lateral inhibition network. The visual environment we use is composed of natural images. We show that for the BCM rule a natural image environment with binocular cortical misalignment is sufficient for producing networks with orientation selective cells and ocular dominance columns. This work is an extension of our previous single cell misalignment model (Shouval et al., 1996).
node9:Academic paper with title and abstract:  (1992) Feature extraction using an unsupervised neural network. : A novel unsupervised neural network for dimensionality reduction that seeks directions emphasizing multimodality is presented, and its connection to exploratory projection pursuit methods is discussed. This leads to a new statistical insight into the synaptic modification equations governing learning in Bienenstock, Cooper, and Munro (BCM) neurons (1982). The importance of a dimensionality reduction principle based solely on distinguishing features is demonstrated using a phoneme recognition experiment. The extracted features are compared with features extracted using a back-propagation network.
node10:Academic paper with title and abstract:  ""A self-organizing multiple-view representation of 3-D objects,"" : We explore representation of 3D objects in which several distinct 2D views are stored for each object. We demonstrate the ability of a two-layer network of thresholded summation units to support such representations. Using unsupervised Hebbian relaxation, the network learned to recognize ten objects from different viewpoints. The training process led to the emergence of compact representations of the specific input views. When tested on novel views of the same objects, the network exhibited a substantial generalization capability. In simulated psychophysical experiments, the network's behavior was qualitatively similar to that of human subjects.
node11:Academic paper with title and abstract:  Simple neuron models for independent component analysis. : Recently, several neural algorithms have been introduced for Independent Component Analysis. Here we approach the problem from the point of view of a single neuron. First, simple Hebbian-like learning rules are introduced for estimating one of the independent components from sphered data. Some of the learning rules can be used to estimate an independent component which has a negative kurtosis, and the others estimate a component of positive kurtosis. Next, a two-unit system is introduced to estimate an independent component of any kurtosis. The results are then generalized to estimate independent components from non-sphered (raw) mixtures. To separate several independent components, a system of several neurons with linear negative feedback is used. The convergence of the learning rules is rigorously proven without any unnecessary hypotheses on the distributions of the independent components.
node12:Academic paper with title and abstract:  Signal separation by nonlinear Hebbian learning, : 
node13:Academic paper with title and abstract:  Viewpoint invariant face recognition using independent component analysis and attractor networks. : We have explored two approaches to recognizing faces across changes in pose. First, we developed a representation of face images based on independent component analysis (ICA) and compared it to a principal component analysis (PCA) representation for face recognition. The ICA basis vectors for this data set were more spatially local than the PCA basis vectors and the ICA representation had greater invariance to changes in pose. Second, we present a model for the development of viewpoint invariant responses to faces from visual experience in a biological system. The temporal continuity of natural visual experience was incorporated into an attractor network model by Hebbian learning following a lowpass temporal filter on unit activities. When combined with the temporal filter, a basic Hebbian update rule became a generalization of Griniasty et al. (1993), which associates temporally proximal input patterns into basins of attraction. The system acquired rep resentations of faces that were largely independent of pose.
node14:Academic paper with title and abstract:  Invariant face and object recognition in the visual system. : Neurons in the ventral stream of the primate visual system exhibit responses to the images of objects which are invariant with respect to natural transformations such as translation, size, and view. Anatomical and neurophysiological evidence suggests that this is achieved through a series of hierarchical processing areas. In an attempt to elucidate the manner in which such representations are established, we have constructed a model of cortical visual processing which seeks to parallel many features of this system, specifically the multi-stage hierarchy with its topologically constrained convergent connectivity. Each stage is constructed as a competitive network utilising a modified Hebb-like learning rule, called the trace rule, which incorporates previous as well as current neuronal activity. The trace rule enables neurons to learn about whatever is invariant over short time periods (e.g. 0.5 s) in the representation of objects as the objects transform in the real world. The trace rule enables neurons to learn the statistical invariances about objects during their transformations, by associating together representations which occur close together in time. We show that by using the trace rule training algorithm the model can indeed learn to produce transformation invariant responses to natural stimuli such as faces.
node15:Academic paper with title and abstract:  ""Local adaptive learning algorithms for blind separation of natural images"", : In this paper a neural network approach for reconstruction of natural highly correlated images from linear (additive) mixture of them is proposed. A multi-layer architecture with local on-line learning rules is developed to solve the problem of blind separation of sources. The main motivation for using a multi-layer network instead of a single-layer one is to improve the performance and robustness of separation, while applying a very simple local learning rule, which is biologically plausible. Moreover such architecture with on-chip learning is relatively easy implementable using VLSI electronic circuits. Furthermore it enables the extraction of source signals sequentially one after the other, starting from the strongest signal and finishing with the weakest one. The experimental part focuses on separating highly correlated human faces from mixture of them, with additive noise and under unknown number of sources.
node16:Academic paper with title and abstract:  Learning factorial codes by predictability minimization. : I propose a novel general principle for unsupervised learning of distributed non-redundant internal representations of input patterns. The principle is based on two opposing forces. For each representational unit there is an adaptive predictor which tries to predict the unit from the remaining units. In turn, each unit tries to react to the environment such that it minimizes its predictability. This encourages each unit to filter `abstract concepts' out of the environmental input such that these concepts are statistically independent of those upon which the other units focus. I discuss various simple yet potentially powerful implementations of the principle which aim at finding binary factorial codes (Bar-low et al., 1989), i.e. codes where the probability of the occurrence of a particular input is simply the product of the probabilities of the corresponding code symbols. Such codes are potentially relevant for (1) segmentation tasks, (2) speeding up supervised learning, (3) novelty detection. Methods for finding factorial codes automatically implement Occam's razor for finding codes using a minimal number of units. Unlike previous methods the novel principle has a potential for removing not only linear but also non-linear output redundancy. Illustrative experiments show that algorithms based on the principle of predictability minimization are practically feasible. The final part of this paper describes an entirely local algorithm that has a potential for learning unique representations of extended input sequences.
node17:Academic paper with title and abstract:  A fast txed-point algorithm for independent component analysis, : This paper will appear in Neural Computation, 9:1483-1492, 1997. Abstract We introduce a novel fast algorithm for Independent Component Analysis, which can be used for blind source separation and feature extraction. It is shown how a neural network learning rule can be transformed into a txed-point iteration, which provides an algorithm that is very simple, does not depend on any user-detned parameters, and is fast to converge to the most accurate solution allowed by the data. The algorithm tnds, one at a time, all non-Gaussian independent components, regardless of their probability distributions. The computations can be performed either in batch mode or in a semi-adaptive manner. The convergence of the algorithm is rigorously proven, and the convergence speed is shown to be cubic. Some comparisons to gradient based algorithms are made, showing that the new algorithm is usually 10 to 100 times faster, sometimes giving the solution in just a few iterations.
node18:Academic paper with title and abstract:  ""The Nonlinear PCA learning rule and signal separation mathematical analysis"". : ",cora_node,nc
"Classify the essay represented by node10 using its subgraph data (text attributes and connections) as follows.

node0: Proposes MIMD architecture modifications and code scheduling to extract instruction-level parallelism, addressing MIMD limitations.  
node1: Statistical modeling of superscalar processor performance, decomposing program and machine parallelism for analysis.  
node2: Delayed exceptions enable speculative execution with accurate exception handling via hardware/compiler collaboration.  
node3: Boosting statically-scheduled processors with control dependence labeling to achieve dynamic superscalar-like performance.  
node4: Control flow prediction using multiblocks and tables to enhance dynamic ILP processors' parallelism and accuracy.  
node5: Raw architecture uses distributed resources and spatial/temporal scheduling to exploit ILP via compiler optimization.  
node6: Compares predicated execution benefits: partial predication boosts performance 33%, full adds 30% in 8-issue processors.  
node7: Techniques for MIMD architectures to extract ILP via code scheduling and instruction partitioning across processors.  
node8: MISC chip employs asynchronous processing elements and conflict-free messaging for parallel execution with low latency.  
node9: Expandable Split Window paradigm overlaps instruction windows using multiple processors to exploit fine-grain parallelism.  
node10: Framework models superscalar performance through program/machine parallelism decomposition, improving on simulation limits.  
node11: Analyzes control flow constraints, advocating speculative execution and multiprocessors for maximizing program parallelism.  
node12: Reveals ""parallelism at a distance"" in SPEC95, requiring large windows/compiler intervention beyond traditional superscalar methods.  
node13: Compiler heuristics optimize task selection for Multiscalar processors, balancing speculation, communication, and load for ILP.

the connection relationship among the nodes mentioned:
 <node0, node8>,<node0, node12>,<node1, node10>,<node2, node3>,<node2, node11>,<node2, node12>,<node3, node12>,<node4, node9>,<node4, node11>,<node5, node11>,<node6, node12>,<node7, node8>,<node7, node12>,<node9, node12>,<node9, node13>,<node10, node11>,<node10, node12>,<node11, node12>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Rule Learning,"

node0: Proposes MIMD architecture modifications and code scheduling to extract instruction-level parallelism, addressing MIMD limitations.  
node1: Statistical modeling of superscalar processor performance, decomposing program and machine parallelism for analysis.  
node2: Delayed exceptions enable speculative execution with accurate exception handling via hardware/compiler collaboration.  
node3: Boosting statically-scheduled processors with control dependence labeling to achieve dynamic superscalar-like performance.  
node4: Control flow prediction using multiblocks and tables to enhance dynamic ILP processors' parallelism and accuracy.  
node5: Raw architecture uses distributed resources and spatial/temporal scheduling to exploit ILP via compiler optimization.  
node6: Compares predicated execution benefits: partial predication boosts performance 33%, full adds 30% in 8-issue processors.  
node7: Techniques for MIMD architectures to extract ILP via code scheduling and instruction partitioning across processors.  
node8: MISC chip employs asynchronous processing elements and conflict-free messaging for parallel execution with low latency.  
node9: Expandable Split Window paradigm overlaps instruction windows using multiple processors to exploit fine-grain parallelism.  
node10: Framework models superscalar performance through program/machine parallelism decomposition, improving on simulation limits.  
node11: Analyzes control flow constraints, advocating speculative execution and multiprocessors for maximizing program parallelism.  
node12: Reveals ""parallelism at a distance"" in SPEC95, requiring large windows/compiler intervention beyond traditional superscalar methods.  
node13: Compiler heuristics optimize task selection for Multiscalar processors, balancing speculation, communication, and load for ILP.","node0:Academic paper with title and abstract: d d Code Scheduling for Multiple Instruction Stream Architectures: Extensive research has been done on extracting parallelism from single instruction stream processors. This paper presents our investigation into ways to modify MIMD architectures to allow them to extract the instruction level parallelism achieved by current superscalar and VLIW machines. A new architecture is proposed which utilizes the advantages of a multiple instruction stream design while addressing some of the limitations that have prevented MIMD architectures from performing ILP operation. A new code scheduling mechanism is described to support this new architecture by partitioning instructions across multiple processing elements in order to exploit this level of parallelism.
node1:Academic paper with title and abstract: Modeling Superscalar Processors via Statistical Simulation: 
node2:Academic paper with title and abstract: Instructions: Paper and BibTeX entry are available at http://www.complang.tuwien.ac.at/papers/. This paper was published in: Compiler Construction (CC '94), Springer LNCS 786, 1994, pages 158-171 Delayed Exceptions | Speculative Execution of Abstract. Superscalar processors, which execute basic blocks sequentially, cannot use much instruction level parallelism. Speculative execution has been proposed to execute basic blocks in parallel. A pure software approach suffers from low performance, because exception-generating instructions cannot be executed speculatively. We propose delayed exceptions, a combination of hardware and compiler extensions that can provide high performance and correct exception handling in compiler-based speculative execution. Delayed exceptions exploit the fact that exceptions are rare. The compiler assumes the typical case (no exceptions), schedules the code accordingly, and inserts run-time checks and fix-up code that ensure correct execution when exceptions do happen.
node3:Academic paper with title and abstract:  Efficient superscalar performance through boosting. : The foremost goal of superscalar processor design is to increase performance through the exploitation of instruction-level parallelism (ILP). Previous studies have shown that speculative execution is required for high instruction per cycle (IPC) rates in non-numerical applications. The general trend has been toward supporting speculative execution in complicated, dynamically-scheduled processors. Performance, though, is more than just a high IPC rate; it also depends upon instruction count and cycle time. Boosting is an architectural technique that supports general speculative execution in simpler, statically-scheduled processors. Boosting labels speculative instructions with their control dependence information. This labelling eliminates control dependence constraints on instruction scheduling while still providing full dependence information to the hardware. We have incorporated boosting into a trace-based, global scheduling algorithm that exploits ILP without adversely affecting the instruction count of a program. We use this algorithm and estimates of the boosting hardware involved to evaluate how much speculative execution support is really necessary to achieve good performance. We find that a statically-scheduled superscalar processor using a minimal implementation of boosting can easily reach the performance of a much more complex dynamically-scheduled superscalar processor.
node4:Academic paper with title and abstract:  Control Flow Prediction for Dynamic ILP Processors. : We introduce a technique to enhance the ability of dynamic ILP processors to exploit (speculatively executed) parallelism. Existing branch prediction mechanisms used to establish a dynamic window from which ILP can be extracted are limited in their abilities to: (i) create a large, accurate dynamic window, (ii) initiate a large number of instructions into this window in every cycle, and (iii) traverse multiple branches of the control flow graph per prediction. We introduce control flow prediction which uses information in the control flow graph of a program to overcome these limitations. We discuss how information present in the control flow graph can be represented using multiblocks, and conveyed to the hardware using Control Flow Tables and Control Flow Prediction Buffers. We evaluate the potential of control flow prediction on an abstract machine and on a dynamic ILP processing model. Our results indicate that control flow prediction is a powerful and effective assist to the hardware in making more informed run time decisions about program control flow.
node5:Academic paper with title and abstract:  Space-Time Scheduling of Instruction-Level Parallelism on a Raw Machine. : Advances in VLSI technology will enable chips with over a billion transistors within the next decade. Unfortunately, the centralized-resource architectures of modern microprocessors are ill-suited to exploit such advances. Achieving a high level of parallelism at a reasonable clock speed requires distributing the processor resources a trend already visible in the dual-register-file architecture of the Alpha 21264. A Raw microprocessor takes an extreme position in this space by distributing all its resources such as instruction streams, register files, memory ports, and ALUs over a pipelined two-dimensional interconnect, and exposing them fully to the compiler. Compilation for instruction-level parallelism (ILP) on such distributed-resource machines requires both spatial instruction scheduling and traditional temporal instruction scheduling. This paper describes the techniques used by the Raw compiler to handle these issues. Preliminary results from a SUIF-based compiler for sequential programs written in C and Fortran indicate that the Raw approach to exploiting ILP can achieve speedups scalable with the number of processors for applications with such parallelism. The Raw architecture attempts to provide performance that is at least comparable to that provided by scaling an existing architecture, but that can achieve orders of magnitude improvement in performance for applications with a large amount of parallelism. This paper offers some positive results in this direction.
node6:Academic paper with title and abstract:  A Comparison of Full and Partial Predicated Execution Support for ILP Processors. : One can effectively utilize predicated execution to improve branch handling in instruction-level parallel processors. Although the potential benefits of predicated execution are high, the tradeoffs involved in the design of an instruction set to support predicated execution can be difficult. On one end of the design spectrum, architectural support for full predicated execution requires increasing the number of source operands for all instructions. Full predicate support provides for the most flexibility and the largest potential performance improvements. On the other end, partial predicated execution support, such as conditional moves, requires very little change to existing architectures. This paper presents a preliminary study to qualitatively and quantitatively address the benefit of full and partial predicated execution support. With our current compiler technology, we show that the compiler can use both partial and full predication to achieve speedup in large control-intensive programs. Some details of the code generation techniques are shown to provide insight into the benefit of going from partial to full predication. Preliminary experimental results are very encouraging: partial predication provides an average of 33% performance improvement for an 8-issue processor with no predicate support while full predication provides an additional 30% improvement.
node7:Academic paper with title and abstract:  Techniques for extracting instruction level parallelism on MIMD architectures. : Extensive research has been done on extracting parallelism from single instruction stream processors. This paper presents some results of our investigation into ways to modify MIMD architectures to allow them to extract the instruction level parallelism achieved by current superscalar and VLIW machines. A new architecture is proposed which utilizes the advantages of a multiple instruction stream design while addressing some of the limitations that have prevented MIMD architectures from performing ILP operation. A new code scheduling mechanism is described to support this new architecture by partitioning instructions across multiple processing elements in order to exploit this level of parallelism.
node8:Academic paper with title and abstract:  a multiple instruction stream computer. : This paper describes a single chip Multiple Instruction Stream Computer (MISC) capable of extracting instruction level parallelism from a broad spectrum of programs. The MISC architecture uses multiple asynchronous processing elements to separate a program into streams that can be executed in parallel, and integrates a conflict-free message passing system into the lowest level of the processor design to facilitate low latency intra-MISC communication. This approach allows for increased machine parallelism with minimal code expansion, and provides an alternative approach to single instruction stream multi-issue machines such as SuperScalar and VLIW.
node9:Academic paper with title and abstract:  The Expandable Split Window Paradigm for Exploiting Fine-Grain Parallelism, : We propose a new processing paradigm, called the Expandable Split Window (ESW) paradigm, for exploiting fine-grain parallelism. This paradigm considers a window of instructions (possibly having dependencies) as a single unit, and exploits fine-grain parallelism by overlapping the execution of multiple windows. The basic idea is to connect multiple sequential processors, in a decoupled and decentralized manner, to achieve overall multiple issue. This processing paradigm shares a number of properties of the restricted dataflow machines, but was derived from the sequential von Neumann architecture. We also present an implementation of the Expandable Split Window execution model, and preliminary performance results.
node10:Academic paper with title and abstract:  ""A Framework for Statistical Modeling of Superscalar Processor Performance"".Proc. : The current trace-driven simulation approach to determine superscalar processor performance is widely used but has some shortcomings. Modern benchmarks generate extremely long traces, resulting in problems with data storage, as well as very long simulation run times. More fundamentally, simulation generally does not provide significant insight into the factors that determine performance or a characterization of their interactions. This paper proposes a theoretical model of superscalar processor performance that addresses these shortcomings. Performance is viewed as an interaction of program parallelism and machine parallelism. Both program and machine parallelisms are decomposed into multiple component functions. Methods for measuring or computing these functions are described. The functions are combined to provide a model of the interaction between program and machine parallelisms and an accurate estimate of the performance. The computed performance, based on this model, is compared to simulated performance for six benchmarks from the SPEC 92 suite on several configurations of the IBM RS/6000 instruction set architecture.
node11:Academic paper with title and abstract:  Limits of control flow on parallelism. : This paper discusses three techniques useful in relaxing the constraints imposed by control flow on parallelism: control dependence analysis, executing multiple flows of control simultaneously, and speculative execution. We evaluate these techniques by using trace simulations to find the limits of parallelism for machines that employ different combinations of these techniques. We have three major results. First, local regions of code have limited parallelism, and control dependence analysis is useful in extracting global parallelism from different parts of a program. Second, a superscalar processor is fundamentally limited because it cannot execute independent regions of code concurrently. Higher performance can be obtained with machines, such as multiprocessors and dataflow machines, that can simultaneously follow multiple flows of control. Finally, without speculative execution to allow instructions to execute before their control dependences are resolved, only modest amounts of parallelism can be obtained for programs with complex control flow.
node12:Academic paper with title and abstract:  Limits of Instruction-Level Parallelism, : This paper examines the limits to instruction level parallelism that can be found in programs, in particular the SPEC95 benchmark suite. Apart from using a more recent version of the SPEC benchmark suite, it differs from earlier studies in removing non-essential true dependencies that occur as a result of the compiler employing a stack for subroutine linkage. This is a subtle limitation to parallelism that is not readily evident as it appears as a true dependency on the stack pointer. Other methods can be used that do not employ a stack to remove this dependency. In this paper we show that its removal exposes far more parallelism than has been seen previously. We refer to this type of parallelism as ""parallelism at a distance"" because it requires impossibly large instruction windows for detection. We conclude with two observations: 1) that a single instruction window characteristic of superscalar machines is inadequate for detecting parallelism at a distance; and 2) in order to take advantage of this parallelism the compiler must be involved, or separate threads must be explicitly programmed.
node13:Academic paper with title and abstract:  Task selection for a Multiscalar processor. : The Multiscalar architecture advocates a distributed processor organization and task-level speculation to exploit high degrees of instruction level parallelism (ILP) in sequential programs without impeding improvements in clock speeds. The main goal of this paper is to understand the key implications of the architectural features of distributed processor organization and task-level speculation for compiler task selection from the point of view of performance. We identify the fundamental performance issues to be: control ow speculation, data communication, data dependence speculation, load imbalance, and task overhead. We show that these issues are intimately related to a few key characteristics of tasks: task size, inter-task control ow, and inter-task data dependence. We describe compiler heuristics to select tasks with favorable characteristics. We report experimental results to show that the heuristics are successful in boosting overall performance by establishing larger ILP windows.",cora_node,nc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Even in abusive households, biological children should stay with their biological parents. Argument 2: Children in the foster care system end up with issues from the lack of stability in their lives. 

node0:Common sense concept: abusive households
node1:Common sense concept: natural parents
node2:Common sense concept: children should stay
node3:Common sense concept: foster care system
node4:Common sense concept: lack of stability

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node3, node4>,<node4, node2>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: abusive households
node1:Common sense concept: natural parents
node2:Common sense concept: children should stay
node3:Common sense concept: foster care system
node4:Common sense concept: lack of stability","node0:Common sense concept: abusive households
node1:Common sense concept: natural parents
node2:Common sense concept: children should stay
node3:Common sense concept: foster care system
node4:Common sense concept: lack of stability",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: space exploration is imperative Argument 2: Space exploration is too expensive. 

node0:Common sense concept: space exploration
node1:Common sense concept: cost much
node2:Common sense concept: expensive
node3:Common sense concept: imperative

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: space exploration
node1:Common sense concept: cost much
node2:Common sense concept: expensive
node3:Common sense concept: imperative","node0:Common sense concept: space exploration
node1:Common sense concept: cost much
node2:Common sense concept: expensive
node3:Common sense concept: imperative",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Subsidizing stay-at-home-dads is beneficial to society. Argument 2: Stay-at-home dads are the primary caregivers for their family. 

node0:Common sense concept: stay-at-home dads
node1:Common sense concept: money
node2:Common sense concept: subsidizing
node3:Common sense concept: caregivers
node4:Common sense concept: beneficial

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node3>,<node2, node1>,<node3, node4>,<node4, node1>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: stay-at-home dads
node1:Common sense concept: money
node2:Common sense concept: subsidizing
node3:Common sense concept: caregivers
node4:Common sense concept: beneficial","node0:Common sense concept: stay-at-home dads
node1:Common sense concept: money
node2:Common sense concept: subsidizing
node3:Common sense concept: caregivers
node4:Common sense concept: beneficial",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: women should not be going to combat. Argument 2: Women and men both go to combat. 

node0:Common sense concept: women
node1:Common sense concept: equality
node2:Common sense concept: going to combat
node3:Common sense concept: men

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node3, node1>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: women
node1:Common sense concept: equality
node2:Common sense concept: going to combat
node3:Common sense concept: men","node0:Common sense concept: women
node1:Common sense concept: equality
node2:Common sense concept: going to combat
node3:Common sense concept: men",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: School uniforms help people to be smarter. Argument 2: School uniforms help people in hiding their actual intelligence. 

node0:Common sense concept: educate people
node1:Common sense concept: teaching
node2:Common sense concept: to be smarter
node3:Common sense concept: intelligence
node4:Common sense concept: school uniforms
node5:Common sense concept: schools

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node4>,<node1, node2>,<node2, node3>,<node5, node0>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: educate people
node1:Common sense concept: teaching
node2:Common sense concept: to be smarter
node3:Common sense concept: intelligence
node4:Common sense concept: school uniforms
node5:Common sense concept: schools","node0:Common sense concept: educate people
node1:Common sense concept: teaching
node2:Common sense concept: to be smarter
node3:Common sense concept: intelligence
node4:Common sense concept: school uniforms
node5:Common sense concept: schools",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Sex selection can be a dangerous procedure for the mother and baby alike. Argument 2: People should have more control over the sex of their offspring, and abortion has nothing to do with it. 

node0:Common sense concept: people
node1:Common sense concept: control
node2:Common sense concept: sex selection
node3:Common sense concept: dangerous

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node3>,<node2, node1>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: people
node1:Common sense concept: control
node2:Common sense concept: sex selection
node3:Common sense concept: dangerous","node0:Common sense concept: people
node1:Common sense concept: control
node2:Common sense concept: sex selection
node3:Common sense concept: dangerous",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: cosmetic surgery has ruined society. Argument 2: Cosmetic surgery can be addicting. 

node0:Common sense concept: cosmetic surgery
node1:Common sense concept: addicting
node2:Common sense concept: harms people
node3:Common sense concept: ruined society

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: cosmetic surgery
node1:Common sense concept: addicting
node2:Common sense concept: harms people
node3:Common sense concept: ruined society","node0:Common sense concept: cosmetic surgery
node1:Common sense concept: addicting
node2:Common sense concept: harms people
node3:Common sense concept: ruined society",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Gateway drugs lead to addiction. Argument 2: Cannabis has not been proven to be safe. 

node0:Common sense concept: cannabis
node1:Common sense concept: gateway drugs
node2:Common sense concept: safe
node3:Common sense concept: addiction

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node3>,<node1, node2>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: cannabis
node1:Common sense concept: gateway drugs
node2:Common sense concept: safe
node3:Common sense concept: addiction","node0:Common sense concept: cannabis
node1:Common sense concept: gateway drugs
node2:Common sense concept: safe
node3:Common sense concept: addiction",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Cannabis is helpful, and people should be allowed to use it. Argument 2: Cannabis is the choice of many people for ailments. 

node0:Common sense concept: ailments
node1:Common sense concept: treatments
node2:Common sense concept: cannabis
node3:Common sense concept: natural
node4:Common sense concept: allowed to use
node5:Common sense concept: benefit to society
node6:Common sense concept: helpful

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>,<node3, node4>,<node4, node5>,<node5, node6>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: ailments
node1:Common sense concept: treatments
node2:Common sense concept: cannabis
node3:Common sense concept: natural
node4:Common sense concept: allowed to use
node5:Common sense concept: benefit to society
node6:Common sense concept: helpful","node0:Common sense concept: ailments
node1:Common sense concept: treatments
node2:Common sense concept: cannabis
node3:Common sense concept: natural
node4:Common sense concept: allowed to use
node5:Common sense concept: benefit to society
node6:Common sense concept: helpful",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Guantanamo Bay should be shut down. Argument 2: Guantanamo Bay sets a poor example. 

node0:Common sense concept: guantanamo bay
node1:Common sense concept: torturing criminals
node2:Common sense concept: poor example
node3:Common sense concept: shut down

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: guantanamo bay
node1:Common sense concept: torturing criminals
node2:Common sense concept: poor example
node3:Common sense concept: shut down","node0:Common sense concept: guantanamo bay
node1:Common sense concept: torturing criminals
node2:Common sense concept: poor example
node3:Common sense concept: shut down",expla_graph,gc
"Classify the relationship between two entities denoted as source node11 and target node13 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Hong Kong actor and martial artist Jackie Chan with multiple aliases.  
node1: 2000 film ""Quills"" directed by Philip Kaufman.  
node2: British actor Roger Moore, also known as Sir Roger George Moore.  
node3: American actress Anne Bancroft.  
node4: 2000 action-comedy film ""Shanghai Noon.""  
node5: 1969 Ken Russell-directed film ""Women in Love.""  
node6: American actor Christian Slater (Christian Michael Leonard Slater).  
node7: American actor, director, and screenwriter Jon Favreau.  
node8: U.S. actor Tony Shalhoub.  
node9: 2008 ABBA-inspired musical ""Mamma Mia!""  
node10: Film genre focusing on action-oriented storytelling.  
node11: English actress Emily Watson (Emily Anita Watson).  
node12: Film acting award by the National Society of Film Critics.  
node13: 1998 Richard Linklater film ""The Newton Boys.""  
node14: East Asian constitutional monarchy Japan (Nippon, Nihon).  
node15: Southern European republic Italy (Italia, Italian Republic).  
node16: American comedian Steve Zahn (Steven James Zahn).  
node17: American actor, writer, and comedian H. Jon Benjamin.  
node18: Missing.  
node19: Screen Actors Guild award for outstanding film casts.  
node20: Professional managing special effects in media productions.  
node21: Voice actor Michael McConnohie (Geoffrey Chalmers).  
node22: 1999 Chris Columbus film ""Bicentennial Man.""  
node23: Costume designer Ann Roth.  
node24: 1995 romantic drama ""The Bridges of Madison County.""  
node25: 2012 Mike Newell adaptation of ""Great Expectations.""  
node26: Northern Irish actor Liam Neeson.  
node27: 2008 Charlie Kaufman film ""Synecdoche, New York.""  
node28: Genre centered on stories in America's 19th-century Old West.  
node29: English actress Maggie Smith (Dame Margaret Smith).  
node30: Professional providing voices for media characters.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node1, node20>,<node2, node30>,<node3, node19>,<node4, node10>,<node4, node20>,<node4, node28>,<node5, node12>,<node6, node13>,<node6, node19>,<node7, node13>,<node7, node30>,<node8, node30>,<node9, node20>,<node9, node23>,<node10, node13>,<node11, node12>,<node11, node18>,<node11, node19>,<node11, node27>,<node11, node29>,<node12, node24>,<node12, node29>,<node13, node20>,<node13, node26>,<node13, node28>,<node14, node24>,<node15, node24>,<node15, node25>,<node16, node30>,<node17, node26>,<node17, node30>,<node18, node29>,<node19, node29>,<node20, node22>,<node20, node25>,<node21, node30>,<node26, node30>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Friendships Among Celebrities; Films Featuring an Actor; Olympic Athletes by Olympics; Assets of a Business Operation; Award Nominations Received; Participating Countries in the Olympic Games; Film Crew Roles; Categories Within an Award Category; Birthplace of a Person; Export Destinations. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Films Featuring an Actor,"

node0: Hong Kong actor and martial artist Jackie Chan with multiple aliases.  
node1: 2000 film ""Quills"" directed by Philip Kaufman.  
node2: British actor Roger Moore, also known as Sir Roger George Moore.  
node3: American actress Anne Bancroft.  
node4: 2000 action-comedy film ""Shanghai Noon.""  
node5: 1969 Ken Russell-directed film ""Women in Love.""  
node6: American actor Christian Slater (Christian Michael Leonard Slater).  
node7: American actor, director, and screenwriter Jon Favreau.  
node8: U.S. actor Tony Shalhoub.  
node9: 2008 ABBA-inspired musical ""Mamma Mia!""  
node10: Film genre focusing on action-oriented storytelling.  
node11: English actress Emily Watson (Emily Anita Watson).  
node12: Film acting award by the National Society of Film Critics.  
node13: 1998 Richard Linklater film ""The Newton Boys.""  
node14: East Asian constitutional monarchy Japan (Nippon, Nihon).  
node15: Southern European republic Italy (Italia, Italian Republic).  
node16: American comedian Steve Zahn (Steven James Zahn).  
node17: American actor, writer, and comedian H. Jon Benjamin.  
node18: Missing.  
node19: Screen Actors Guild award for outstanding film casts.  
node20: Professional managing special effects in media productions.  
node21: Voice actor Michael McConnohie (Geoffrey Chalmers).  
node22: 1999 Chris Columbus film ""Bicentennial Man.""  
node23: Costume designer Ann Roth.  
node24: 1995 romantic drama ""The Bridges of Madison County.""  
node25: 2012 Mike Newell adaptation of ""Great Expectations.""  
node26: Northern Irish actor Liam Neeson.  
node27: 2008 Charlie Kaufman film ""Synecdoche, New York.""  
node28: Genre centered on stories in America's 19th-century Old West.  
node29: English actress Maggie Smith (Dame Margaret Smith).  
node30: Professional providing voices for media characters.","node0:Entity in the knowledge graph. Entity name: Jackie Chan, Entity alternatives: Chen Yuan Lung, Yuen Lung Chen, Chen Lung, Lung Cheng, Y'uen Lo, Chen Yuen Lung, Cheng Lung, Yuan Lung Chen, Kong-sang Chan, Kung-Fu Master, Yuan-Lou Chen, Chan Kong-sang, Sing Lung, Chen Yuan-lung, Pao Pao, Jacky Chan. Entity description:Hong Kong actor and martial artist
node1:Entity in the knowledge graph. Entity name: Quills, Entity alternatives: . Entity description:2000 film by Philip Kaufman
node2:Entity in the knowledge graph. Entity name: Roger Moore, Entity alternatives: Roger George Moore, Sir Roger George Moore, Sir Roger Moore. Entity description:British actor
node3:Entity in the knowledge graph. Entity name: Anne Bancroft, Entity alternatives: . Entity description:American actress
node4:Entity in the knowledge graph. Entity name: Shanghai Noon, Entity alternatives: Shang-High Noon. Entity description:2000 action comedy movie
node5:Entity in the knowledge graph. Entity name: Women in Love, Entity alternatives: . Entity description:1969 British film directed by Ken Russell
node6:Entity in the knowledge graph. Entity name: Christian Slater, Entity alternatives: Christian Michael Leonard Slater. Entity description:American actor
node7:Entity in the knowledge graph. Entity name: Jon Favreau, Entity alternatives: . Entity description:American actor, director and screenwriter
node8:Entity in the knowledge graph. Entity name: Tony Shalhoub, Entity alternatives: . Entity description:actor from the United States
node9:Entity in the knowledge graph. Entity name: Mamma Mia!, Entity alternatives: . Entity description:2008 romantic comedy musical movie
node10:Entity in the knowledge graph. Entity name: action film, Entity alternatives: action movie, film action, action, movie action. Entity description:film genre
node11:Entity in the knowledge graph. Entity name: Emily Watson, Entity alternatives: Emily Anita Watson. Entity description:English actress
node12:Entity in the knowledge graph. Entity name: National Society of Film Critics Award for Best Actress, Entity alternatives: . Entity description:award
node13:Entity in the knowledge graph. Entity name: The Newton Boys, Entity alternatives: Newton Boys. Entity description:1998 film by Richard Linklater
node14:Entity in the knowledge graph. Entity name: Japan, Entity alternatives: JAP, 🇯🇵, Nippon-koku, JA, State of Japan, jp, Nihon-koku, Land of the Rising Sun, JPN, 🗾, Nippon, Nihon, JP. Entity description:constitutional monarchy in East Asia
node15:Entity in the knowledge graph. Entity name: Italy, Entity alternatives: 🇮🇹, Italia, Italian Republic, IT, it. Entity description:Republic in Southern Europe
node16:Entity in the knowledge graph. Entity name: Steve Zahn, Entity alternatives: Steven James ""Steve"" Zahn. Entity description:American stand-up comedian
node17:Entity in the knowledge graph. Entity name: H. Jon Benjamin, Entity alternatives: . Entity description:American actor, writer and comedian
node18:Missing.
node19:Entity in the knowledge graph. Entity name: Screen Actors Guild Award for Outstanding Performance by a Cast in a Motion Picture, Entity alternatives: . Entity description:award
node20:Entity in the knowledge graph. Entity name: special effects supervisor, Entity alternatives: SFX Supervisor, special effects coordinator. Entity description:individual who works on a commercial, theater, television or film set creating special effects
node21:Entity in the knowledge graph. Entity name: Michael McConnohie, Entity alternatives: Geoffrey Chalmers. Entity description:American voice actor
node22:Entity in the knowledge graph. Entity name: Bicentennial Man, Entity alternatives: . Entity description:1999 film by Chris Columbus
node23:Entity in the knowledge graph. Entity name: Ann Roth, Entity alternatives: . Entity description:American costume designer
node24:Entity in the knowledge graph. Entity name: The Bridges of Madison County, Entity alternatives: '' The Bridges of Madison County '', Bridges of Madison County. Entity description:1995 American romantic drama film
node25:Entity in the knowledge graph. Entity name: Great Expectations, Entity alternatives: . Entity description:2012 film by Mike Newell
node26:Entity in the knowledge graph. Entity name: Liam Neeson, Entity alternatives: . Entity description:Irish actor from Northern Ireland
node27:Entity in the knowledge graph. Entity name: Synecdoche, New York, Entity alternatives: . Entity description:2008 film by Charlie Kaufman
node28:Entity in the knowledge graph. Entity name: Western, Entity alternatives: . Entity description:genre of various arts which tell stories set primarily in the later half of the 19th century in the American Old West
node29:Entity in the knowledge graph. Entity name: Maggie Smith, Entity alternatives: Dame Margaret Natalie Smith, Dame Maggie Smith, Margaret Natalie Smith. Entity description:English actress
node30:Entity in the knowledge graph. Entity name: voice actor, Entity alternatives: voice artist, voice actress. Entity description:person who provides voice-overs for a character in films, animation, video games or in other media",fb15k237,lc
"Classify the relationship between two entities denoted as source node30 and target node14 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: American actress, also known as Michelle Renee Forbes Guajardo.  
node1: Stand-up comedienne Bonnie Hunt.  
node2: British-American actress Jean Simmons.  
node3: Private women's liberal arts college in the U.S., also called Barnard.  
node4: American film/TV actress, also known as Estelle Louise Fletcher.  
node5: American TV program known as The Today Show.  
node6: University also called Wake Forest College.  
node7: English model and actress Elizabeth Jane Hurley.  
node8: Creative professional selecting and assembling sound recordings.  
node9: American poet and author, known as Marguerite Johnson, etc.  
node10: Canadian actress and model Elisha Ann Cuthbert.  
node11: American actress/director/producer Drew Blythe Barrymore.  
node12: English footballer David Robert Joseph Beckham.  
node13: Person who writes plays (alternatives: playwrite, dramatist).  
node14: Sex classification for female animals/plants (symbol: ♀).  
node15: American actress/producer/novelist Lauren Graham.  
node16: Umbrella term for the record and study of past events.  
node17: Award for best film given by BAFTA.  
node18: Film studio executive Joseph Michael Schenck.  
node19: Film director/screenwriter/producer Jim Wilson.  
node20: American actor Sam Rockwell.  
node21: American actress Megan McTavish.  
node22: American actress Samantha Mathis.  
node23: American TV host/reporter/anchor Hoda Kotb.  
node24: Indian actress also known as Raakhee.  
node25: Mexican/Irish-American singer-songwriter and actress Sara Ramirez.  
node26: Missing entity in knowledge graph.  
node27: 2007 film Evan Almighty by Tom Shadyac.  
node28: American actress Winona Laura Horowitz (Winona Ryder).  
node29: American actress Ava Lavinia Gardner.  
node30: Actress Jayma Suzette Mays.  
node31: Irish actor from Northern Ireland, Liam Neeson.

the connection relationship among the nodes mentioned:
 <node0, node10>,<node0, node14>,<node1, node14>,<node1, node20>,<node2, node9>,<node2, node14>,<node2, node22>,<node2, node28>,<node3, node15>,<node3, node16>,<node4, node14>,<node5, node19>,<node5, node23>,<node6, node9>,<node7, node12>,<node7, node14>,<node7, node15>,<node8, node27>,<node9, node13>,<node9, node14>,<node9, node22>,<node9, node28>,<node10, node14>,<node10, node31>,<node11, node14>,<node11, node20>,<node14, node15>,<node14, node21>,<node14, node22>,<node14, node23>,<node14, node24>,<node14, node25>,<node14, node28>,<node14, node29>,<node15, node27>,<node17, node19>,<node18, node29>,<node19, node23>,<node22, node28>,<node26, node27>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Celebrity Friends; Assets of a Business Operation; Fraternities and Sororities at a University; Climate of a Travel Destination; Gender of a Person; Awards Won by a Work; People with an Educational Degree; Olympic Medals by Type; Producer Type for TV Programs; Place of Death. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Gender of a Person,"

node0: American actress, also known as Michelle Renee Forbes Guajardo.  
node1: Stand-up comedienne Bonnie Hunt.  
node2: British-American actress Jean Simmons.  
node3: Private women's liberal arts college in the U.S., also called Barnard.  
node4: American film/TV actress, also known as Estelle Louise Fletcher.  
node5: American TV program known as The Today Show.  
node6: University also called Wake Forest College.  
node7: English model and actress Elizabeth Jane Hurley.  
node8: Creative professional selecting and assembling sound recordings.  
node9: American poet and author, known as Marguerite Johnson, etc.  
node10: Canadian actress and model Elisha Ann Cuthbert.  
node11: American actress/director/producer Drew Blythe Barrymore.  
node12: English footballer David Robert Joseph Beckham.  
node13: Person who writes plays (alternatives: playwrite, dramatist).  
node14: Sex classification for female animals/plants (symbol: ♀).  
node15: American actress/producer/novelist Lauren Graham.  
node16: Umbrella term for the record and study of past events.  
node17: Award for best film given by BAFTA.  
node18: Film studio executive Joseph Michael Schenck.  
node19: Film director/screenwriter/producer Jim Wilson.  
node20: American actor Sam Rockwell.  
node21: American actress Megan McTavish.  
node22: American actress Samantha Mathis.  
node23: American TV host/reporter/anchor Hoda Kotb.  
node24: Indian actress also known as Raakhee.  
node25: Mexican/Irish-American singer-songwriter and actress Sara Ramirez.  
node26: Missing entity in knowledge graph.  
node27: 2007 film Evan Almighty by Tom Shadyac.  
node28: American actress Winona Laura Horowitz (Winona Ryder).  
node29: American actress Ava Lavinia Gardner.  
node30: Actress Jayma Suzette Mays.  
node31: Irish actor from Northern Ireland, Liam Neeson.","node0:Entity in the knowledge graph. Entity name: Michelle Forbes, Entity alternatives: Michelle Renee Forbes Guajardo. Entity description:American actress
node1:Entity in the knowledge graph. Entity name: Bonnie Hunt, Entity alternatives: . Entity description:Stand-up comedienne
node2:Entity in the knowledge graph. Entity name: Jean Simmons, Entity alternatives: . Entity description:British-American actress
node3:Entity in the knowledge graph. Entity name: Barnard College, Entity alternatives: Barnard. Entity description:private women's liberal arts college in the United States
node4:Entity in the knowledge graph. Entity name: Louise Fletcher, Entity alternatives: Estelle Louise Fletcher. Entity description:American film and television actress
node5:Entity in the knowledge graph. Entity name: Today, Entity alternatives: The Today Show. Entity description:American television program
node6:Entity in the knowledge graph. Entity name: Wake Forest University, Entity alternatives: Wake Forest College. Entity description:university
node7:Entity in the knowledge graph. Entity name: Elizabeth Hurley, Entity alternatives: Elizabeth Jane Hurley. Entity description:English model and actress
node8:Entity in the knowledge graph. Entity name: sound editor, Entity alternatives: . Entity description:creative professional responsible for selecting and assembling sound recordings
node9:Entity in the knowledge graph. Entity name: Maya Angelou, Entity alternatives: Marguerite Anne Johnson, Marguerite Annie Johnson, Marguerite Johnson, Marguerite Ann Johnson. Entity description:American poet and author
node10:Entity in the knowledge graph. Entity name: Elisha Cuthbert, Entity alternatives: Elisha Ann Cuthbert. Entity description:Canadian actress and model
node11:Entity in the knowledge graph. Entity name: Drew Barrymore, Entity alternatives: Drew Blythe Barrymore, Drew Blyth Barrymore. Entity description:American actress, director and producer
node12:Entity in the knowledge graph. Entity name: David Beckham, Entity alternatives: David Robert Joseph Beckham. Entity description:English footballer
node13:Entity in the knowledge graph. Entity name: playwright, Entity alternatives: playwrite, dramatist. Entity description:person who writes plays
node14:Entity in the knowledge graph. Entity name: female organism, Entity alternatives: female animal, female, ♀, sex — female, female creature. Entity description:determined sex of an animal or plant. Use Q6581072 for female humans
node15:Entity in the knowledge graph. Entity name: Lauren Graham, Entity alternatives: . Entity description:American actress, producer and novelist
node16:Entity in the knowledge graph. Entity name: history, Entity alternatives: . Entity description:umbrella term covering the record of past events and their study
node17:Entity in the knowledge graph. Entity name: BAFTA Award for Best Film, Entity alternatives: . Entity description:award
node18:Entity in the knowledge graph. Entity name: Joseph M. Schenck, Entity alternatives: Joseph Michael Schenck. Entity description:Film studio executive
node19:Entity in the knowledge graph. Entity name: Jim Wilson, Entity alternatives: . Entity description:film director, screenwriter, film producer
node20:Entity in the knowledge graph. Entity name: Sam Rockwell, Entity alternatives: . Entity description:American actor
node21:Entity in the knowledge graph. Entity name: Megan McTavish, Entity alternatives: . Entity description:American actress
node22:Entity in the knowledge graph. Entity name: Samantha Mathis, Entity alternatives: . Entity description:American actress
node23:Entity in the knowledge graph. Entity name: Hoda Kotb, Entity alternatives: . Entity description:American television reporter, host and anchor
node24:Entity in the knowledge graph. Entity name: Rakhee Gulzar, Entity alternatives: Raakhee. Entity description:Indian actress
node25:Entity in the knowledge graph. Entity name: Sara Ramirez, Entity alternatives: . Entity description:Mexican/Irish-American singer/songwriter and actress
node26:Missing.
node27:Entity in the knowledge graph. Entity name: Evan Almighty, Entity alternatives: . Entity description:2007 American film by Tom Shadyac
node28:Entity in the knowledge graph. Entity name: Winona Ryder, Entity alternatives: Winona Laura Horowitz la mas linda, Winona Laura Horowitz. Entity description:American actress
node29:Entity in the knowledge graph. Entity name: Ava Gardner, Entity alternatives: Ava Lavinia Gardner. Entity description:American actress
node30:Entity in the knowledge graph. Entity name: Jayma Mays, Entity alternatives: Jayma Suzette Mays. Entity description:actress
node31:Entity in the knowledge graph. Entity name: Liam Neeson, Entity alternatives: . Entity description:Irish actor from Northern Ireland",fb15k237,lc
"Classify the relationship between two entities denoted as source node20 and target node28 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: American heavy metal band Dio.  
node1: Rock band No Doubt from the United States.  
node2: Alternative country (insurgent country, alt-country, Americana) is a country music sub-genre.  
node3: Grammy Award for Record of the Year is a music award.  
node4: British musician Noel Gallagher, also known as Noel Thomas David Gallagher.  
node5: Grammy Award for Best Rock Instrumental Performance is an award.  
node6: Royal Academy of Music is a London-based conservatoire.  
node7: British musician Annie Lennox, also known as Ann Lennox.  
node8: Garbage is a US rock band.  
node9: Actress and musician Cree Summer Francks, known as Cree Summer.  
node10: Irish rock musician The Edge (David Howell Evans) is U2's guitarist.  
node11: Kenneth 'Babyface' Edmonds is an American R&B singer, songwriter, and producer.  
node12: Canadian musician David Foster (David Walter Foster) is a record producer and songwriter.  
node13: Buddy Guy is an American blues guitarist and singer.  
node14: Eric Clapton (Eric Patrick Clapton, Slowhand) is an English guitarist and musician.  
node15: The Decemberists are a band.  
node16: British singer-songwriter Adele Adkins (Adele Laurie Blue Adkins).  
node17: Grammy Award for Best Rock Album is an award.  
node18: King Crimson is a British art rock band.  
node19: Post-grunge is a music genre.  
node20: Rock music (rock, rock and roll) originated in 1950s USA as a popular genre.  
node21: Welsh singer Tom Jones, also Sir Thomas John Woodward.  
node22: Taylor Swift (Taylor Alison Swift) is an American singer-songwriter.  
node23: Progressive rock (prog-rock, etc.) is a complex rock subgenre with artistic forms.  
node24: The Police are an English rock band.  
node25: Bon Jovi is a US rock band.  
node26: Canadian-American singer-songwriter Alanis Morissette (Alanis Nadine Morissette).  
node27: Agnosticism holds that metaphysical claims like God's existence are unknown or unknowable.  
node28: The Offspring are a US punk band.  
node29: Country rock is a rock-inspired country music subgenre.  
node30: Island Records is an American record label under Universal Music Group.

the connection relationship among the nodes mentioned:
 <node0, node20>,<node1, node17>,<node1, node19>,<node1, node20>,<node2, node15>,<node3, node11>,<node3, node12>,<node3, node14>,<node3, node16>,<node3, node22>,<node3, node24>,<node3, node26>,<node4, node20>,<node5, node13>,<node5, node14>,<node5, node18>,<node5, node24>,<node6, node7>,<node7, node20>,<node7, node27>,<node7, node30>,<node8, node17>,<node8, node19>,<node8, node20>,<node9, node20>,<node10, node20>,<node10, node30>,<node11, node12>,<node11, node14>,<node11, node30>,<node13, node14>,<node14, node17>,<node14, node20>,<node15, node20>,<node15, node23>,<node16, node20>,<node17, node25>,<node17, node26>,<node18, node23>,<node18, node30>,<node19, node26>,<node19, node28>,<node20, node22>,<node20, node23>,<node20, node24>,<node20, node25>,<node20, node26>,<node20, node29>,<node21, node30>,<node22, node29>,<node23, node26>,<node25, node29>,<node25, node30>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Artists within a Music Genre; Educational Institution of a Campus; Honored Individuals at an Award Ceremony; Pro Athletes in Sports; Places Lived by a Person; TV Programs on a Network; Average Rent by Currency; Birthplace of a Person; Current Clubs of World Cup Squad; Baseball Team Statistics by Season. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Artists within a Music Genre,"

node0: American heavy metal band Dio.  
node1: Rock band No Doubt from the United States.  
node2: Alternative country (insurgent country, alt-country, Americana) is a country music sub-genre.  
node3: Grammy Award for Record of the Year is a music award.  
node4: British musician Noel Gallagher, also known as Noel Thomas David Gallagher.  
node5: Grammy Award for Best Rock Instrumental Performance is an award.  
node6: Royal Academy of Music is a London-based conservatoire.  
node7: British musician Annie Lennox, also known as Ann Lennox.  
node8: Garbage is a US rock band.  
node9: Actress and musician Cree Summer Francks, known as Cree Summer.  
node10: Irish rock musician The Edge (David Howell Evans) is U2's guitarist.  
node11: Kenneth 'Babyface' Edmonds is an American R&B singer, songwriter, and producer.  
node12: Canadian musician David Foster (David Walter Foster) is a record producer and songwriter.  
node13: Buddy Guy is an American blues guitarist and singer.  
node14: Eric Clapton (Eric Patrick Clapton, Slowhand) is an English guitarist and musician.  
node15: The Decemberists are a band.  
node16: British singer-songwriter Adele Adkins (Adele Laurie Blue Adkins).  
node17: Grammy Award for Best Rock Album is an award.  
node18: King Crimson is a British art rock band.  
node19: Post-grunge is a music genre.  
node20: Rock music (rock, rock and roll) originated in 1950s USA as a popular genre.  
node21: Welsh singer Tom Jones, also Sir Thomas John Woodward.  
node22: Taylor Swift (Taylor Alison Swift) is an American singer-songwriter.  
node23: Progressive rock (prog-rock, etc.) is a complex rock subgenre with artistic forms.  
node24: The Police are an English rock band.  
node25: Bon Jovi is a US rock band.  
node26: Canadian-American singer-songwriter Alanis Morissette (Alanis Nadine Morissette).  
node27: Agnosticism holds that metaphysical claims like God's existence are unknown or unknowable.  
node28: The Offspring are a US punk band.  
node29: Country rock is a rock-inspired country music subgenre.  
node30: Island Records is an American record label under Universal Music Group.","node0:Entity in the knowledge graph. Entity name: Dio, Entity alternatives: . Entity description:American heavy metal band
node1:Entity in the knowledge graph. Entity name: No Doubt, Entity alternatives: . Entity description:rock band from the United States
node2:Entity in the knowledge graph. Entity name: alternative country, Entity alternatives: insurgent country, alt-country, Americana. Entity description:sub-genre of country music
node3:Entity in the knowledge graph. Entity name: Grammy Award for Record of the Year, Entity alternatives: Record of the Year. Entity description:award
node4:Entity in the knowledge graph. Entity name: Noel Gallagher, Entity alternatives: Noel Thomas David Gallagher. Entity description:British musician
node5:Entity in the knowledge graph. Entity name: Grammy Award for Best Rock Instrumental Performance, Entity alternatives: . Entity description:award
node6:Entity in the knowledge graph. Entity name: Royal Academy of Music, Entity alternatives: . Entity description:conservatoire in London
node7:Entity in the knowledge graph. Entity name: Annie Lennox, Entity alternatives: Ann Lennox. Entity description:British musician
node8:Entity in the knowledge graph. Entity name: Garbage, Entity alternatives: . Entity description:rock band from the United States
node9:Entity in the knowledge graph. Entity name: Cree Summer, Entity alternatives: Cree Summer Francks. Entity description:Actress and musician
node10:Entity in the knowledge graph. Entity name: The Edge, Entity alternatives: David Evans, David Howell Evans. Entity description:Irish rock musician, guitar player of U2
node11:Entity in the knowledge graph. Entity name: Babyface, Entity alternatives: Kenneth Edmonds, Kenneth ""Babyface"" Edmonds. Entity description:American R&B singer–songwriter and record producer
node12:Entity in the knowledge graph. Entity name: David Foster, Entity alternatives: David Walter Foster. Entity description:Canadian musician, record producer, songwriter
node13:Entity in the knowledge graph. Entity name: Buddy Guy, Entity alternatives: . Entity description:American blues guitarist and singer
node14:Entity in the knowledge graph. Entity name: Eric Clapton, Entity alternatives: Eric Patrick Clapton, Slowhand. Entity description:English musician, singer, songwriter, and guitarist
node15:Entity in the knowledge graph. Entity name: The Decemberists, Entity alternatives: . Entity description:band
node16:Entity in the knowledge graph. Entity name: Adele, Entity alternatives: Adele Adkins, Adele Laurie Blue Adkins. Entity description:British singer-songwriter
node17:Entity in the knowledge graph. Entity name: Grammy Award for Best Rock Album, Entity alternatives: . Entity description:award
node18:Entity in the knowledge graph. Entity name: King Crimson, Entity alternatives: . Entity description:British art rock band
node19:Entity in the knowledge graph. Entity name: post-grunge, Entity alternatives: . Entity description:music genre
node20:Entity in the knowledge graph. Entity name: rock music, Entity alternatives: rock, rock and roll. Entity description:genre of popular music that originated as ""rock and roll"" in 1950s USA
node21:Entity in the knowledge graph. Entity name: Tom Jones, Entity alternatives: Sir Thomas John Woodward. Entity description:Welsh singer
node22:Entity in the knowledge graph. Entity name: Taylor Swift, Entity alternatives: Becky, T-Swizzle, Taylor Alison Swift. Entity description:American singer-songwriter
node23:Entity in the knowledge graph. Entity name: progressive rock, Entity alternatives: classical rock, prog-rock, prog rock, prog, symphonic rock, art rock. Entity description:rock music subgenre that emphasizes complexity and form
node24:Entity in the knowledge graph. Entity name: The Police, Entity alternatives: Police. Entity description:English rock band
node25:Entity in the knowledge graph. Entity name: Bon Jovi, Entity alternatives: . Entity description:rock band from the United States
node26:Entity in the knowledge graph. Entity name: Alanis Morissette, Entity alternatives: Alanis Nadine Morissette. Entity description:Canadian-American singer-songwriter
node27:Entity in the knowledge graph. Entity name: agnosticism, Entity alternatives: . Entity description:view that certain metaphysical claims – such as the existence of God or the supernatural – are unknown and perhaps unknowable
node28:Entity in the knowledge graph. Entity name: The Offspring, Entity alternatives: . Entity description:punk band from the United States
node29:Entity in the knowledge graph. Entity name: country rock, Entity alternatives: . Entity description:rock-inspired country music subgenre
node30:Entity in the knowledge graph. Entity name: Island Records, Entity alternatives: . Entity description:American record label, a division of Universal Music Group",fb15k237,lc
"Classify the relationship between two entities denoted as source node2 and target node23 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: American band Faith No More with no alternative names.  
node1: Television presenter (host, TV presenter) introduces and hosts TV programs.  
node2: Alternative rock (alt rock) – genre of rock music.  
node3: Folk rock – fusion of folk and rock music.  
node4: Brussels-Capital Region (Brussels) – federal region in Belgium with 19 municipalities.  
node5: San Pedro, California – community within Los Angeles, USA.  
node6: English singer-songwriter Kate Bush (Catherine Bush) – musician and record producer.  
node7: Singer-songwriter Ben Harper – musician.  
node8: American TV producer/writer Glen A. Larson.  
node9: American guitarist Trey Anastasio – composer and vocalist.  
node10: Canadian-American actress Catherine O'Hara (Catherine Anne O'Hara) – writer and comedienne.  
node11: Argentine musician Gustavo Cerati – singer-songwriter and composer.  
node12: Missing entity in knowledge graph.  
node13: American rock band Foo Fighters formed in Seattle in 1994.  
node14: American record producer Chris Seefried.  
node15: American actor Dean Stockwell (Robert Dean Stockwell).  
node16: American singer-songwriter Henry Rollins.  
node17: Harmonica (blues harp, mouth organ) – free reed wind instrument.  
node18: Tenor saxophone – type of saxophone.  
node19: Folktronica – music genre blending folk and electronica elements.  
node20: American lyricist Ira Gershwin.  
node21: American actor Keenan Wynn.  
node22: British acid jazz band Jamiroquai.  
node23: American musician Michael Sembello.  
node24: Marriage – social union or legal contract between spouses creating kinship.  
node25: Band The Mothers of Invention.  
node26: Dresden – capital of Free State of Saxony, Germany.  
node27: American actor, screenwriter, and director Clark Gregg.  
node28: Grunge (Seattle sound) – subgenre of alternative rock.  
node29: Screenwriter (writer, scenarist) – writes scripts for TV, films, etc.  
node30: Accordion – musical instrument.  
node31: African Americans – US ethnic group with African ancestry, known by various terms.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node1, node16>,<node2, node6>,<node2, node7>,<node2, node9>,<node2, node11>,<node2, node13>,<node2, node14>,<node2, node16>,<node2, node22>,<node2, node25>,<node2, node28>,<node3, node7>,<node3, node14>,<node3, node19>,<node4, node24>,<node5, node24>,<node6, node24>,<node7, node24>,<node7, node31>,<node8, node24>,<node8, node29>,<node9, node24>,<node10, node24>,<node10, node29>,<node11, node24>,<node12, node22>,<node13, node17>,<node13, node28>,<node13, node30>,<node14, node17>,<node14, node24>,<node15, node24>,<node16, node29>,<node17, node18>,<node17, node25>,<node17, node30>,<node18, node25>,<node20, node24>,<node21, node24>,<node24, node26>,<node24, node27>,<node27, node29>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Top Dog Breeds in a City; Sports Position Players; Olympic Athletes by Sport; Honored Individuals at an Award Ceremony; Revenue in Currency; Olympic Medals Awarded; Artists within a Music Genre; Film Crew Members; Places Lived by a Person; Official Language of a Country. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Artists within a Music Genre,"

node0: American band Faith No More with no alternative names.  
node1: Television presenter (host, TV presenter) introduces and hosts TV programs.  
node2: Alternative rock (alt rock) – genre of rock music.  
node3: Folk rock – fusion of folk and rock music.  
node4: Brussels-Capital Region (Brussels) – federal region in Belgium with 19 municipalities.  
node5: San Pedro, California – community within Los Angeles, USA.  
node6: English singer-songwriter Kate Bush (Catherine Bush) – musician and record producer.  
node7: Singer-songwriter Ben Harper – musician.  
node8: American TV producer/writer Glen A. Larson.  
node9: American guitarist Trey Anastasio – composer and vocalist.  
node10: Canadian-American actress Catherine O'Hara (Catherine Anne O'Hara) – writer and comedienne.  
node11: Argentine musician Gustavo Cerati – singer-songwriter and composer.  
node12: Missing entity in knowledge graph.  
node13: American rock band Foo Fighters formed in Seattle in 1994.  
node14: American record producer Chris Seefried.  
node15: American actor Dean Stockwell (Robert Dean Stockwell).  
node16: American singer-songwriter Henry Rollins.  
node17: Harmonica (blues harp, mouth organ) – free reed wind instrument.  
node18: Tenor saxophone – type of saxophone.  
node19: Folktronica – music genre blending folk and electronica elements.  
node20: American lyricist Ira Gershwin.  
node21: American actor Keenan Wynn.  
node22: British acid jazz band Jamiroquai.  
node23: American musician Michael Sembello.  
node24: Marriage – social union or legal contract between spouses creating kinship.  
node25: Band The Mothers of Invention.  
node26: Dresden – capital of Free State of Saxony, Germany.  
node27: American actor, screenwriter, and director Clark Gregg.  
node28: Grunge (Seattle sound) – subgenre of alternative rock.  
node29: Screenwriter (writer, scenarist) – writes scripts for TV, films, etc.  
node30: Accordion – musical instrument.  
node31: African Americans – US ethnic group with African ancestry, known by various terms.","node0:Entity in the knowledge graph. Entity name: Faith No More, Entity alternatives: . Entity description:American band
node1:Entity in the knowledge graph. Entity name: television presenter, Entity alternatives: host, TV presenter, hostess, television personality, TV personality, TV host, television host. Entity description:person who introduces or hosts television programs
node2:Entity in the knowledge graph. Entity name: alternative rock, Entity alternatives: alt rock, alternative music, pop/rock, alt-rock, alternative. Entity description:genre of rock music
node3:Entity in the knowledge graph. Entity name: folk rock, Entity alternatives: . Entity description:fusion genre of folk and rock music
node4:Entity in the knowledge graph. Entity name: Brussels-Capital Region, Entity alternatives: Brussels Capital Region, Brussels Region, Brussels, BE-BRU. Entity description:federal region of Belgium comprising 19 municipalities
node5:Entity in the knowledge graph. Entity name: San Pedro, Entity alternatives: San Pedro, California. Entity description:community within the city of  Los Angeles, California, United States
node6:Entity in the knowledge graph. Entity name: Kate Bush, Entity alternatives: Catherine Bush. Entity description:English singer, songwriter, musician and record producer
node7:Entity in the knowledge graph. Entity name: Ben Harper, Entity alternatives: . Entity description:singer-songwriter and musician
node8:Entity in the knowledge graph. Entity name: Glen A. Larson, Entity alternatives: . Entity description:American TV producer and writer
node9:Entity in the knowledge graph. Entity name: Trey Anastasio, Entity alternatives: . Entity description:American guitarist, composer, and vocalist
node10:Entity in the knowledge graph. Entity name: Catherine O'Hara, Entity alternatives: Catherine Anne O'Hara. Entity description:Canadian-American actress, writer and comedienne
node11:Entity in the knowledge graph. Entity name: Gustavo Cerati, Entity alternatives: . Entity description:Argentine musician, singer-songwriter and composer
node12:Missing.
node13:Entity in the knowledge graph. Entity name: Foo Fighters, Entity alternatives: . Entity description:American rock band, formed in Seattle in 1994
node14:Entity in the knowledge graph. Entity name: Chris Seefried, Entity alternatives: . Entity description:American record producer
node15:Entity in the knowledge graph. Entity name: Dean Stockwell, Entity alternatives: Robert Dean Stockwell. Entity description:American actor
node16:Entity in the knowledge graph. Entity name: Henry Rollins, Entity alternatives: . Entity description:American singer-songwriter
node17:Entity in the knowledge graph. Entity name: harmonica, Entity alternatives: blues harp, mouth organ, French harp. Entity description:free reed wind instrument
node18:Entity in the knowledge graph. Entity name: tenor saxophone, Entity alternatives: . Entity description:type of saxophone
node19:Entity in the knowledge graph. Entity name: folktronica, Entity alternatives: electro-folk, techno folk, laptop folk, techno-folk, electrofolk. Entity description:genre of music comprising various elements of folk music and electronica
node20:Entity in the knowledge graph. Entity name: Ira Gershwin, Entity alternatives: . Entity description:American lyricist
node21:Entity in the knowledge graph. Entity name: Keenan Wynn, Entity alternatives: . Entity description:American actor
node22:Entity in the knowledge graph. Entity name: Jamiroquai, Entity alternatives: . Entity description:British acid jazz band
node23:Entity in the knowledge graph. Entity name: Michael Sembello, Entity alternatives: . Entity description:American musician
node24:Entity in the knowledge graph. Entity name: marriage, Entity alternatives: husband and wife, wedlock, matrimony, الزواج. Entity description:social union or legal contract between people called spouses that creates kinship
node25:Entity in the knowledge graph. Entity name: The Mothers of Invention, Entity alternatives: . Entity description:band
node26:Entity in the knowledge graph. Entity name: Dresden, Entity alternatives: Elbflorenz. Entity description:capital city of the Free State of Saxony in Germany
node27:Entity in the knowledge graph. Entity name: Clark Gregg, Entity alternatives: . Entity description:American actor, screenwriter and director
node28:Entity in the knowledge graph. Entity name: grunge, Entity alternatives: the Seattle sound, Seattle sound. Entity description:subgenre of alternative rock
node29:Entity in the knowledge graph. Entity name: screenwriter, Entity alternatives: writer, scenarist, scriptwriter. Entity description:writer who writes for TV, films, comics and games
node30:Entity in the knowledge graph. Entity name: accordion, Entity alternatives: . Entity description:musical instrument
node31:Entity in the knowledge graph. Entity name: African Americans, Entity alternatives: Afro-Americans, African American, Black Americans, American Negroes, African-American. Entity description:racial or ethnic group in the United States with African ancestry",fb15k237,lc
"Classify the relationship between two entities denoted as source node20 and target node28 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: 1904 Summer Olympics held in Saint Louis, US (Games of the III Olympiad).  
node1: American actor, producer, and screenwriter John Cusack.  
node2: Actor, director, producer, screenwriter, and editor John Cassavetes.  
node3: American multinational consumer goods company Procter & Gamble.  
node4: Academic publisher of medical and scientific literature (Elsevier).  
node5: Major U.S. city in New York state, known as NYC or Big Apple.  
node6: Medal awarded for first place or high achievement (gold medal).  
node7: 2000 film directed by James Gray titled *The Yards*.  
node8: Actor Jack Warden.  
node9: 1994 crime film *Bullets Over Broadway*.  
node10: American actor Ben Gazzara.  
node11: 2010 American mystery-thriller film *Shanghai*.  
node12: American film director Gordon Douglas.  
node13: American comedy writer and actress Ellie Kemper.  
node14: Southeast European republic named Romania.  
node15: U.S. TV series *Dancing with the Stars*.  
node16: East Asian republic (South Korea).  
node17: 2011 fantasy film *Immortals*.  
node18: U.S. discount retailer based in Arkansas (Walmart).  
node19: Skiing sport involving jumps from hills (ski jumping).  
node20: North American federal republic, United States of America.  
node21: 19th Winter Olympics held in Salt Lake City, 2002.  
node22: Winter sport using a snowboard (snowboarding).  
node23: Artist whose medium is the human body via makeup.  
node24: Highest corporate officer (CEO or managing director).  
node25: North Carolina's capital and Wake County seat (Raleigh).  
node26: American actor Walter Matthau.  
node27: 1949 American drama film *The Heiress*.  
node28: Delaware county in the U.S. (Kent County).  
node29: 2001 war film *Black Hawk Down* directed by Ridley Scott.  
node30: Broward County's county seat in Florida (Fort Lauderdale).

the connection relationship among the nodes mentioned:
 <node0, node6>,<node0, node20>,<node1, node9>,<node1, node11>,<node1, node20>,<node2, node5>,<node2, node20>,<node3, node20>,<node3, node24>,<node4, node20>,<node4, node24>,<node5, node7>,<node5, node8>,<node5, node9>,<node5, node10>,<node5, node12>,<node5, node20>,<node5, node26>,<node5, node27>,<node6, node14>,<node6, node16>,<node6, node20>,<node6, node21>,<node7, node20>,<node7, node23>,<node8, node9>,<node8, node20>,<node9, node20>,<node10, node20>,<node11, node16>,<node11, node20>,<node11, node23>,<node12, node20>,<node13, node20>,<node14, node21>,<node15, node20>,<node16, node19>,<node16, node20>,<node16, node21>,<node17, node20>,<node17, node23>,<node18, node20>,<node18, node24>,<node19, node20>,<node19, node21>,<node20, node21>,<node20, node22>,<node20, node25>,<node20, node26>,<node20, node27>,<node20, node29>,<node20, node30>,<node21, node22>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Awards Won by an Individual; Legislative Members by District; Vacationers at a Location; Second Level Divisions of a Country; Geographical Containment; Music Group Membership; Assets of a Business Operation; Specializations Within a Profession; Celebrities Who Canoodled; Awards Won by a Work. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Second Level Divisions of a Country,"

node0: 1904 Summer Olympics held in Saint Louis, US (Games of the III Olympiad).  
node1: American actor, producer, and screenwriter John Cusack.  
node2: Actor, director, producer, screenwriter, and editor John Cassavetes.  
node3: American multinational consumer goods company Procter & Gamble.  
node4: Academic publisher of medical and scientific literature (Elsevier).  
node5: Major U.S. city in New York state, known as NYC or Big Apple.  
node6: Medal awarded for first place or high achievement (gold medal).  
node7: 2000 film directed by James Gray titled *The Yards*.  
node8: Actor Jack Warden.  
node9: 1994 crime film *Bullets Over Broadway*.  
node10: American actor Ben Gazzara.  
node11: 2010 American mystery-thriller film *Shanghai*.  
node12: American film director Gordon Douglas.  
node13: American comedy writer and actress Ellie Kemper.  
node14: Southeast European republic named Romania.  
node15: U.S. TV series *Dancing with the Stars*.  
node16: East Asian republic (South Korea).  
node17: 2011 fantasy film *Immortals*.  
node18: U.S. discount retailer based in Arkansas (Walmart).  
node19: Skiing sport involving jumps from hills (ski jumping).  
node20: North American federal republic, United States of America.  
node21: 19th Winter Olympics held in Salt Lake City, 2002.  
node22: Winter sport using a snowboard (snowboarding).  
node23: Artist whose medium is the human body via makeup.  
node24: Highest corporate officer (CEO or managing director).  
node25: North Carolina's capital and Wake County seat (Raleigh).  
node26: American actor Walter Matthau.  
node27: 1949 American drama film *The Heiress*.  
node28: Delaware county in the U.S. (Kent County).  
node29: 2001 war film *Black Hawk Down* directed by Ridley Scott.  
node30: Broward County's county seat in Florida (Fort Lauderdale).","node0:Entity in the knowledge graph. Entity name: 1904 Summer Olympics, Entity alternatives: St. Louis 1904, Games of the III Olympiad, Saint Louis 1904. Entity description:Games of the III Olympiad, celebrated in Saint Louis (United States) in 1904
node1:Entity in the knowledge graph. Entity name: John Cusack, Entity alternatives: John Paul Cusack. Entity description:American actor, producer, and screenwriter
node2:Entity in the knowledge graph. Entity name: John Cassavetes, Entity alternatives: John Nicholas Cassavetes. Entity description:actor, director, Producer, Screenwriter, Editor
node3:Entity in the knowledge graph. Entity name: Procter & Gamble, Entity alternatives: P&G, Procter & Gamble Co.. Entity description:American multinational consumer goods company
node4:Entity in the knowledge graph. Entity name: Elsevier, Entity alternatives: . Entity description:academic publishing company that publishes medical and scientific literature
node5:Entity in the knowledge graph. Entity name: New York City, Entity alternatives: New York, New York, the five boroughs, New York, NYC, Big Apple. Entity description:city in state of New York, United States
node6:Entity in the knowledge graph. Entity name: gold medal, Entity alternatives: . Entity description:medal, generally awarded for first place or a high achievement
node7:Entity in the knowledge graph. Entity name: The Yards, Entity alternatives: Yards. Entity description:2000 film by James Gray
node8:Entity in the knowledge graph. Entity name: Jack Warden, Entity alternatives: . Entity description:actor
node9:Entity in the knowledge graph. Entity name: Bullets Over Broadway, Entity alternatives: . Entity description:1994 crime film
node10:Entity in the knowledge graph. Entity name: Ben Gazzara, Entity alternatives: Biagio Anthony Gazzarra, Carlo Biagio Anthony Gazzara. Entity description:American actor
node11:Entity in the knowledge graph. Entity name: Shanghai, Entity alternatives: . Entity description:2010 American mystery/thriller film
node12:Entity in the knowledge graph. Entity name: Gordon Douglas, Entity alternatives: . Entity description:American film director
node13:Entity in the knowledge graph. Entity name: Ellie Kemper, Entity alternatives: Elizabeth Kemper, Elizabeth Claire Kemper, Elizabeth Claire ""Ellie"" Kemper. Entity description:American comedy writer and actress
node14:Entity in the knowledge graph. Entity name: Romania, Entity alternatives: România, Rumania, ro, 🇷🇴, Roumania. Entity description:republic in Southeast Europe
node15:Entity in the knowledge graph. Entity name: Dancing with the Stars, Entity alternatives: . Entity description:U.S. TV series
node16:Entity in the knowledge graph. Entity name: South Korea, Entity alternatives: The Republic of Great Han, Daehan Minguk, ROK, kr, Republic of Korea, S. Korea, Korea Republic, Republic of South Korea, Republic of Great Han, Rep. Korea, 🇰🇷. Entity description:republic in East Asia
node17:Entity in the knowledge graph. Entity name: Immortals, Entity alternatives: . Entity description:2011 fantasy film
node18:Entity in the knowledge graph. Entity name: Walmart, Entity alternatives: Wal-Mart Stores, Inc., Wal-Mart, Wal Mart. Entity description:U.S. discount retailer based in Arkansas
node19:Entity in the knowledge graph. Entity name: ski jumping, Entity alternatives: . Entity description:skiing sport with jumping down a hill
node20:Entity in the knowledge graph. Entity name: United States of America, Entity alternatives: U.S.A., the United States of America, the States, US, USA, America, the US, 🇺🇸, the United States, United States, U.S.. Entity description:federal republic in North America
node21:Entity in the knowledge graph. Entity name: 2002 Winter Olympics, Entity alternatives: SLC 2002, Salt Lake City 2002, Salt Lake 2002. Entity description:19th edition of Winter Olympics, held in Salt Lake City (United States) in 2002
node22:Entity in the knowledge graph. Entity name: snowboarding, Entity alternatives: snowboard. Entity description:winter sport
node23:Entity in the knowledge graph. Entity name: make-up artist, Entity alternatives: MUA, visagist, makeup artist. Entity description:artist whose medium is the human body
node24:Entity in the knowledge graph. Entity name: chief executive officer, Entity alternatives: managing director, Chief executive officer, executive director, CEO, Managing Director. Entity description:highest-ranking corporate officer or administrator
node25:Entity in the knowledge graph. Entity name: Raleigh, Entity alternatives: Raleigh, NC, Raleigh, North Carolina. Entity description:capital city of state of North Carolina, United States; county seat of Wake County, North Carolina
node26:Entity in the knowledge graph. Entity name: Walter Matthau, Entity alternatives: Walter John Matthow. Entity description:American actor
node27:Entity in the knowledge graph. Entity name: The Heiress, Entity alternatives: Heiress. Entity description:1949 American drama film
node28:Entity in the knowledge graph. Entity name: Kent County, Entity alternatives: Kent County, Delaware. Entity description:county in Delaware, United States
node29:Entity in the knowledge graph. Entity name: Black Hawk Down, Entity alternatives: . Entity description:2001 American war movie by Ridley Scott
node30:Entity in the knowledge graph. Entity name: Fort Lauderdale, Entity alternatives: Fort Lauderdale, Florida, Ft. Lauderdale, Florida. Entity description:county seat of Broward County, Florida, United States",fb15k237,lc
"Classify the relationship between two entities denoted as source node2 and target node6 using the union of their corresponding subgraph (text attributes and connections) as follows.

nodex: Each node summarizes an entity with name, alternatives, and concise description under 25 words.  
node0: Postgraduate academic degree (master's degree, master degree, master).  
node1: City in Ontario, Canada.  
node2: University in Ottawa, Ontario, Canada.  
node3: University in Birmingham, UK (Uni of Birmingham, Birmingham University).  
node4: NYC-based university (St. John's/Saint John's University).  
node5: Actor and Marine Corps drill instructor (R. Lee Ermey/Ronald Lee Ermey).  
node6: Science studying crime causes and manifestations.  
node7: Historic English kingdom (927–1707).  
node8: Performance-based art form (drama, poetic drama, literature).  
node9: Undergraduate science degree (BSc, BS, etc.).  
node10: Undergraduate engineering degree (3–5 years).  
node11: Private university in San Diego, California.  
node12: 2008 Stephen Daldry film.  
node13: NYC university (Hunter College/Hunter).  
node14: Missing entity.  
node15: 2009 Guy Ritchie Sherlock Holmes film.  
node16: Book classification system (Library of Congress).  
node17: Canadian province (Ontario, abbrev. ON).  
node18: English leader Oliver Cromwell (Lord Protector).  
node19: Liberal arts college in Oberlin, Ohio.  
node20: 2011 animated sequel film.  
node21: Advanced master's degree (MPhil).  
node22: UK university in Cambridge (Cambridge University).  
node23: 2010 James Mangold action film.  
node24: Institutions preserving cultural/artistic artifacts.  
node25: Southeast Asian constitutional monarchy (Malaysia).  
node26: 1991 Oliver Stone political thriller (JFK).  
node27: 2011 comedy film (Bad Teacher).  
node28: 2012 dystopian film (The Hunger Games).  
node29: Canada's currency (CAD, C$).  
node30: Canadian actor Donald Sutherland.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node4>,<node0, node6>,<node0, node8>,<node0, node13>,<node0, node22>,<node1, node17>,<node2, node9>,<node2, node10>,<node2, node17>,<node2, node29>,<node3, node8>,<node3, node9>,<node4, node9>,<node5, node6>,<node5, node8>,<node6, node8>,<node6, node16>,<node6, node21>,<node6, node22>,<node7, node18>,<node8, node9>,<node8, node13>,<node8, node30>,<node9, node11>,<node9, node19>,<node9, node22>,<node9, node30>,<node12, node25>,<node14, node30>,<node15, node25>,<node16, node17>,<node16, node24>,<node16, node25>,<node17, node29>,<node18, node22>,<node20, node25>,<node21, node22>,<node23, node25>,<node25, node27>,<node25, node28>,<node26, node30>,<node28, node30>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Phone Number Category for Organizations; Major Field of Study for Graduates; Teams of a Professional Athlete; International Organizations and Member States; Specializations Within a Profession; Music Track Contributions; Legislative Members by District; Track Performances by Artists; Players by Position in Historical Football Roster; Baseball Team Statistics by Season. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Major Field of Study for Graduates,"

nodex: Each node summarizes an entity with name, alternatives, and concise description under 25 words.  
node0: Postgraduate academic degree (master's degree, master degree, master).  
node1: City in Ontario, Canada.  
node2: University in Ottawa, Ontario, Canada.  
node3: University in Birmingham, UK (Uni of Birmingham, Birmingham University).  
node4: NYC-based university (St. John's/Saint John's University).  
node5: Actor and Marine Corps drill instructor (R. Lee Ermey/Ronald Lee Ermey).  
node6: Science studying crime causes and manifestations.  
node7: Historic English kingdom (927–1707).  
node8: Performance-based art form (drama, poetic drama, literature).  
node9: Undergraduate science degree (BSc, BS, etc.).  
node10: Undergraduate engineering degree (3–5 years).  
node11: Private university in San Diego, California.  
node12: 2008 Stephen Daldry film.  
node13: NYC university (Hunter College/Hunter).  
node14: Missing entity.  
node15: 2009 Guy Ritchie Sherlock Holmes film.  
node16: Book classification system (Library of Congress).  
node17: Canadian province (Ontario, abbrev. ON).  
node18: English leader Oliver Cromwell (Lord Protector).  
node19: Liberal arts college in Oberlin, Ohio.  
node20: 2011 animated sequel film.  
node21: Advanced master's degree (MPhil).  
node22: UK university in Cambridge (Cambridge University).  
node23: 2010 James Mangold action film.  
node24: Institutions preserving cultural/artistic artifacts.  
node25: Southeast Asian constitutional monarchy (Malaysia).  
node26: 1991 Oliver Stone political thriller (JFK).  
node27: 2011 comedy film (Bad Teacher).  
node28: 2012 dystopian film (The Hunger Games).  
node29: Canada's currency (CAD, C$).  
node30: Canadian actor Donald Sutherland.","node0:Entity in the knowledge graph. Entity name: master's degree, Entity alternatives: masters degree, master degree, master. Entity description:postgraduate academic degree
node1:Entity in the knowledge graph. Entity name: Brantford, Entity alternatives: . Entity description:city in Ontario, Canada
node2:Entity in the knowledge graph. Entity name: Carleton University, Entity alternatives: . Entity description:university in Ottawa, Ontario, Canada
node3:Entity in the knowledge graph. Entity name: University of Birmingham, Entity alternatives: Uni of Birmingham, Birmingham University. Entity description:university in Birmingham, England, United Kingdom
node4:Entity in the knowledge graph. Entity name: St. John's University, Entity alternatives: Saint John's University. Entity description:university in New York City, New York, United States
node5:Entity in the knowledge graph. Entity name: R. Lee Ermey, Entity alternatives: Ronald Lee Ermey. Entity description:American Marine Corps drill instructor; actor
node6:Entity in the knowledge graph. Entity name: criminology, Entity alternatives: . Entity description:science about the causes and manifestations of crime
node7:Entity in the knowledge graph. Entity name: Kingdom of England, Entity alternatives: England. Entity description:historic sovereign kingdom on the British Isles (927–1649; 1660–1707)
node8:Entity in the knowledge graph. Entity name: drama, Entity alternatives: drama after Aristotele, poetic drama, dramatic form. Entity description:artwork intended for performance, formal type of literature
node9:Entity in the knowledge graph. Entity name: Bachelor of Science, Entity alternatives: S.B., Bc., B.S., Sc.B., B.Sc., B Sc, S.B, Scientiæ Baccalaureus, BSc, BS, SB. Entity description:academic degree
node10:Entity in the knowledge graph. Entity name: Bachelor of Engineering, Entity alternatives: BEng, B.Eng., BE. Entity description:undergraduate academic degree awarded to a student after three to five years of studying engineering at university or college.
node11:Entity in the knowledge graph. Entity name: University of San Diego, Entity alternatives: USD. Entity description:private university in San Diego, California, United States
node12:Entity in the knowledge graph. Entity name: The Reader, Entity alternatives: Reader. Entity description:2008 film by Stephen Daldry
node13:Entity in the knowledge graph. Entity name: Hunter College, Entity alternatives: Hunter. Entity description:university
node14:Missing.
node15:Entity in the knowledge graph. Entity name: Sherlock Holmes, Entity alternatives: . Entity description:2009 film by Guy Ritchie
node16:Entity in the knowledge graph. Entity name: Library of Congress Classification, Entity alternatives: . Entity description:classification
node17:Entity in the knowledge graph. Entity name: Ontario, Entity alternatives: Ontario, Canada, ONT, ON. Entity description:province of Canada
node18:Entity in the knowledge graph. Entity name: Oliver Cromwell, Entity alternatives: Cromwell, Lord Protector. Entity description:English military and political leader
node19:Entity in the knowledge graph. Entity name: Oberlin College, Entity alternatives: . Entity description:private liberal arts college in Oberlin, Ohio, United States
node20:Entity in the knowledge graph. Entity name: Kung Fu Panda 2, Entity alternatives: . Entity description:2011 animated film
node21:Entity in the knowledge graph. Entity name: Master of Philosophy, Entity alternatives: M.Phil., MPhil, Ph. M., M. Phil., Ph.M., M.Phil. Entity description:master's degree
node22:Entity in the knowledge graph. Entity name: University of Cambridge, Entity alternatives: Cambridge University, Cambridge. Entity description:collegiate public research university in Cambridge, England, United Kingdom
node23:Entity in the knowledge graph. Entity name: Knight and Day, Entity alternatives: . Entity description:2010 film by James Mangold
node24:Entity in the knowledge graph. Entity name: museum, Entity alternatives: . Entity description:institution that holds artifacts and other objects of scientific, artistic, cultural, historical, or other importance
node25:Entity in the knowledge graph. Entity name: Malaysia, Entity alternatives: 🇲🇾, my. Entity description:federal constitutional monarchy in Southeast Asia
node26:Entity in the knowledge graph. Entity name: JFK, Entity alternatives: . Entity description:1991 American political thriller film directed by Oliver Stone
node27:Entity in the knowledge graph. Entity name: Bad Teacher, Entity alternatives: . Entity description:2011 film by Jake Kasdan
node28:Entity in the knowledge graph. Entity name: The Hunger Games, Entity alternatives: . Entity description:2012 film by Gary Ross
node29:Entity in the knowledge graph. Entity name: Canadian dollar, Entity alternatives: CA$, C$, CAD, $. Entity description:currency of Canada
node30:Entity in the knowledge graph. Entity name: Donald Sutherland, Entity alternatives: Donald Edward McNichol Sutherland. Entity description:Canadian actor",fb15k237,lc
"Classify the relationship between two entities denoted as source node20 and target node10 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Cuba Gooding Jr., American actor.  
node1: Law & Order: SVU, police procedural TV series.  
node2: Laurie Metcalf, American actress.  
node3: Anthony Edwards, actor.  
node4: Lyndsy Fonseca, American actress.  
node5: Annette Bening, American actress.  
node6: La Dolce Vita, 1960 Italian film.  
node7: Nathan Fillion, Canadian-American actor.  
node8: Alfre Woodard, American actress.  
node9: Fine Line Features, film production company.  
node10: Desperate Housewives, comedy-drama TV series.  
node11: Ray, 2004 biographical film.  
node12: Felicity Huffman, American actress.  
node13: Amelia, 2009 Mira Nair film.  
node14: Alison Brie, American actress.  
node15: Ricardo Antonio Chavira, American actor.  
node16: Ray Wise, American actor.  
node17: Drama film genre.  
node18: William Shatner, Canadian actor/director.  
node19: Transamerica, 2005 film.  
node20: Missing.  
node21: Missing.  
node22: Jon Hamm, American actor.  
node23: Screen Actors Guild Cast Award.  
node24: Missing.  
node25: Michael K. Williams, American actor.  
node26: Missing.  
node27: John Slattery, American actor.  
node28: Johnny Depp, actor/musician.  
node29: Alan Alda, actor/director/writer.  
node30: Hilary Swank, actress/producer.  
node31: The English Patient, 1996 romance film.

the connection relationship among the nodes mentioned:
 <node0, node8>,<node0, node23>,<node1, node17>,<node1, node21>,<node2, node8>,<node2, node10>,<node2, node12>,<node2, node15>,<node3, node24>,<node4, node7>,<node4, node10>,<node4, node12>,<node4, node15>,<node4, node27>,<node5, node20>,<node5, node21>,<node5, node23>,<node5, node26>,<node6, node17>,<node6, node20>,<node7, node10>,<node7, node12>,<node7, node15>,<node7, node27>,<node8, node10>,<node8, node12>,<node8, node15>,<node8, node23>,<node9, node20>,<node10, node12>,<node10, node15>,<node10, node17>,<node10, node21>,<node10, node27>,<node11, node17>,<node11, node20>,<node11, node21>,<node11, node23>,<node12, node15>,<node12, node19>,<node12, node27>,<node13, node17>,<node13, node30>,<node14, node22>,<node14, node24>,<node14, node27>,<node15, node27>,<node16, node23>,<node17, node19>,<node17, node31>,<node18, node21>,<node18, node24>,<node20, node30>,<node21, node30>,<node22, node24>,<node22, node27>,<node23, node28>,<node23, node29>,<node23, node30>,<node23, node31>,<node24, node25>,<node24, node27>,<node24, node29>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Service Language of a Phone Number; Writers of a Film; TV Programs Written by a Writer; Taxonomy Subject Entries; Award Nominees; Producer Type for TV Programs; Players by Position in Historical Football Roster; Honored Individuals at an Award Ceremony; Parent Genre of Music; Country of an Administrative Division. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Honored Individuals at an Award Ceremony,"

node0: Cuba Gooding Jr., American actor.  
node1: Law & Order: SVU, police procedural TV series.  
node2: Laurie Metcalf, American actress.  
node3: Anthony Edwards, actor.  
node4: Lyndsy Fonseca, American actress.  
node5: Annette Bening, American actress.  
node6: La Dolce Vita, 1960 Italian film.  
node7: Nathan Fillion, Canadian-American actor.  
node8: Alfre Woodard, American actress.  
node9: Fine Line Features, film production company.  
node10: Desperate Housewives, comedy-drama TV series.  
node11: Ray, 2004 biographical film.  
node12: Felicity Huffman, American actress.  
node13: Amelia, 2009 Mira Nair film.  
node14: Alison Brie, American actress.  
node15: Ricardo Antonio Chavira, American actor.  
node16: Ray Wise, American actor.  
node17: Drama film genre.  
node18: William Shatner, Canadian actor/director.  
node19: Transamerica, 2005 film.  
node20: Missing.  
node21: Missing.  
node22: Jon Hamm, American actor.  
node23: Screen Actors Guild Cast Award.  
node24: Missing.  
node25: Michael K. Williams, American actor.  
node26: Missing.  
node27: John Slattery, American actor.  
node28: Johnny Depp, actor/musician.  
node29: Alan Alda, actor/director/writer.  
node30: Hilary Swank, actress/producer.  
node31: The English Patient, 1996 romance film.","node0:Entity in the knowledge graph. Entity name: Cuba Gooding Jr., Entity alternatives: Cuba Gooding, Jr.. Entity description:American actor
node1:Entity in the knowledge graph. Entity name: Law & Order: Special Victims Unit, Entity alternatives: SVU, Special Victims Unit, Law & Order: SVU. Entity description:American police procedural crime drama television series
node2:Entity in the knowledge graph. Entity name: Laurie Metcalf, Entity alternatives: Lauren Elizabeth Metcalf, Laura Elizabeth Metcalf. Entity description:American actress
node3:Entity in the knowledge graph. Entity name: Anthony Edwards, Entity alternatives: . Entity description:actor
node4:Entity in the knowledge graph. Entity name: Lyndsy Fonseca, Entity alternatives: Lyndsy Marie Fonseca. Entity description:American actress
node5:Entity in the knowledge graph. Entity name: Annette Bening, Entity alternatives: Annette Carol Bening. Entity description:American actress
node6:Entity in the knowledge graph. Entity name: La Dolce Vita, Entity alternatives: Dolce Vita, La dolce vita. Entity description:1960 Italian comedy-drama film
node7:Entity in the knowledge graph. Entity name: Nathan Fillion, Entity alternatives: Nathan Christopher Fillion. Entity description:Canadian-American actor
node8:Entity in the knowledge graph. Entity name: Alfre Woodard, Entity alternatives: . Entity description:American film, stage, and television actress
node9:Entity in the knowledge graph. Entity name: Fine Line Features, Entity alternatives: . Entity description:film production company
node10:Entity in the knowledge graph. Entity name: Desperate Housewives, Entity alternatives: . Entity description:American TV series, comedy-drama
node11:Entity in the knowledge graph. Entity name: Ray, Entity alternatives: . Entity description:2004 biographical film
node12:Entity in the knowledge graph. Entity name: Felicity Huffman, Entity alternatives: Felicity Kendall Huffman. Entity description:American actress
node13:Entity in the knowledge graph. Entity name: Amelia, Entity alternatives: . Entity description:2009 film by Mira Nair
node14:Entity in the knowledge graph. Entity name: Alison Brie, Entity alternatives: Alison Brie Schermerhorn. Entity description:American actress
node15:Entity in the knowledge graph. Entity name: Ricardo Antonio Chavira, Entity alternatives: . Entity description:American actor
node16:Entity in the knowledge graph. Entity name: Ray Wise, Entity alternatives: . Entity description:American actor
node17:Entity in the knowledge graph. Entity name: drama film, Entity alternatives: drama movie. Entity description:film genre
node18:Entity in the knowledge graph. Entity name: William Shatner, Entity alternatives: Bill Shatner. Entity description:Canadian actor, musician, recording artist, author, and film director
node19:Entity in the knowledge graph. Entity name: Transamerica, Entity alternatives: . Entity description:2005 independent comedy-drama film
node20:Missing.
node21:Missing.
node22:Entity in the knowledge graph. Entity name: Jon Hamm, Entity alternatives: Jonathan Daniel Hamm. Entity description:actor
node23:Entity in the knowledge graph. Entity name: Screen Actors Guild Award for Outstanding Performance by a Cast in a Motion Picture, Entity alternatives: . Entity description:award
node24:Missing.
node25:Entity in the knowledge graph. Entity name: Michael K. Williams, Entity alternatives: Michael Williams, Michael Kenneth Williams. Entity description:American actor
node26:Missing.
node27:Entity in the knowledge graph. Entity name: John Slattery, Entity alternatives: John M. Slattery, Jr.. Entity description:American actor
node28:Entity in the knowledge graph. Entity name: Johnny Depp, Entity alternatives: John Christopher ""Johnny"" Depp II, John Christopher Depp II. Entity description:American actor, film producer, and musician
node29:Entity in the knowledge graph. Entity name: Alan Alda, Entity alternatives: Alphonso Joseph D’Abruzzo. Entity description:American actor, director, and writer
node30:Entity in the knowledge graph. Entity name: Hilary Swank, Entity alternatives: Hilary Ann Swank. Entity description:American actress, film producer
node31:Entity in the knowledge graph. Entity name: The English Patient, Entity alternatives: '' The English Patient '', English Patient. Entity description:1996 romantic drama film",fb15k237,lc
"Classify the relationship between two entities denoted as source node21 and target node13 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: James Taylor (James Vernon Taylor): American singer-songwriter and guitarist.  
node1: Robin Gibb (Robin Hugh Gibb): singer, songwriter, and Bee Gees co-founder.  
node2: David Hasselhoff (David Michael Hasselhoff, The Hoff): American actor, singer, producer, and businessman.  
node3: Kris Kristofferson (Kristoffer Kristofferson): American country singer-songwriter and film actor.  
node4: Terminator 3: Rise of the Machines (T3): 2003 US sci-fi film.  
node5: Country music (country and western): American popular music genre.  
node6: Naomi Campbell: British model.  
node7: Jangle pop: music genre.  
node8: Quincy Jones (Quincy Delight Jones, Jr.): American record producer and musician.  
node9: Ricky Nelson (Eric Hilliard Nelson): actor and musician.  
node10: Faith Hill (Audrey Faith Perry): American singer.  
node11: Don Henley (Donald Hugh Henley): American singer-songwriter and producer.  
node12: Patrick Gallagher: Canadian actor.  
node13: Actor (actresses): works in film, TV, theatre, or radio.  
node14: Jazz (jazz music): musical style.  
node15: James Cameron (James Francis Cameron): Canadian film director.  
node16: Gary Busey (William Gary Busey): American actor.  
node17: Robyn Hitchcock: British singer-songwriter and guitarist.  
node18: Richard Benjamin: actor and film director.  
node19: Miles Davis (Miles Dewey Davis III): American jazz musician.  
node20: Orson Welles (George Orson Welles): American actor-director-producer.  
node21: Ricardo Antonio Chavira: American actor.  
node22: Naya Rivera (Naya Marie Rivera Dorsey): American actress and singer.  
node23: Kristen Stewart (Kristen Jaymes Stewart): American actress.  
node24: Traffic: 2000 American crime drama film.  
node25: Catch-22: 1970 satirical comedy-drama war film.  
node26: D. W. Moffett (Donald Warren ""D. W."" Moffett): American actor.  
node27: I'm Not There: 2007 film by Todd Haynes.  
node28: Piranha 3DD: 2012 film by John Gulager.  
node29: Nashville: 1975 film by Robert Altman.  
node30: Jerry Lee Lewis: American singer-songwriter and pianist.

the connection relationship among the nodes mentioned:
 <node0, node5>,<node0, node13>,<node1, node13>,<node2, node13>,<node2, node28>,<node3, node5>,<node3, node13>,<node3, node27>,<node4, node15>,<node5, node9>,<node5, node10>,<node5, node11>,<node5, node30>,<node6, node8>,<node6, node13>,<node7, node17>,<node8, node13>,<node8, node14>,<node8, node19>,<node9, node13>,<node9, node30>,<node10, node13>,<node12, node13>,<node12, node22>,<node13, node15>,<node13, node16>,<node13, node17>,<node13, node18>,<node13, node19>,<node13, node20>,<node13, node22>,<node13, node23>,<node13, node26>,<node13, node30>,<node14, node19>,<node16, node28>,<node16, node29>,<node18, node25>,<node20, node25>,<node24, node26>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Film Distribution Regions; Influences on Individuals or Works; Cause of Death; Instrumentalists of a Music Instrument; Awards Won by Works; Items Appearing in Ranked Lists; Vacationers at a Location; Art Direction in Films; Person's Profession; Olympic Athletes by Country. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Person's Profession,"

node0: James Taylor (James Vernon Taylor): American singer-songwriter and guitarist.  
node1: Robin Gibb (Robin Hugh Gibb): singer, songwriter, and Bee Gees co-founder.  
node2: David Hasselhoff (David Michael Hasselhoff, The Hoff): American actor, singer, producer, and businessman.  
node3: Kris Kristofferson (Kristoffer Kristofferson): American country singer-songwriter and film actor.  
node4: Terminator 3: Rise of the Machines (T3): 2003 US sci-fi film.  
node5: Country music (country and western): American popular music genre.  
node6: Naomi Campbell: British model.  
node7: Jangle pop: music genre.  
node8: Quincy Jones (Quincy Delight Jones, Jr.): American record producer and musician.  
node9: Ricky Nelson (Eric Hilliard Nelson): actor and musician.  
node10: Faith Hill (Audrey Faith Perry): American singer.  
node11: Don Henley (Donald Hugh Henley): American singer-songwriter and producer.  
node12: Patrick Gallagher: Canadian actor.  
node13: Actor (actresses): works in film, TV, theatre, or radio.  
node14: Jazz (jazz music): musical style.  
node15: James Cameron (James Francis Cameron): Canadian film director.  
node16: Gary Busey (William Gary Busey): American actor.  
node17: Robyn Hitchcock: British singer-songwriter and guitarist.  
node18: Richard Benjamin: actor and film director.  
node19: Miles Davis (Miles Dewey Davis III): American jazz musician.  
node20: Orson Welles (George Orson Welles): American actor-director-producer.  
node21: Ricardo Antonio Chavira: American actor.  
node22: Naya Rivera (Naya Marie Rivera Dorsey): American actress and singer.  
node23: Kristen Stewart (Kristen Jaymes Stewart): American actress.  
node24: Traffic: 2000 American crime drama film.  
node25: Catch-22: 1970 satirical comedy-drama war film.  
node26: D. W. Moffett (Donald Warren ""D. W."" Moffett): American actor.  
node27: I'm Not There: 2007 film by Todd Haynes.  
node28: Piranha 3DD: 2012 film by John Gulager.  
node29: Nashville: 1975 film by Robert Altman.  
node30: Jerry Lee Lewis: American singer-songwriter and pianist.","node0:Entity in the knowledge graph. Entity name: James Taylor, Entity alternatives: James Vernon Taylor. Entity description:American singer-songwriter and guitarist
node1:Entity in the knowledge graph. Entity name: Robin Gibb, Entity alternatives: Robin Hugh Gibb. Entity description:singer, songwriter and Bee Gees co-founder
node2:Entity in the knowledge graph. Entity name: David Hasselhoff, Entity alternatives: David Michael Hasselhoff, The Hoff. Entity description:American actor, singer, producer, and businessman
node3:Entity in the knowledge graph. Entity name: Kris Kristofferson, Entity alternatives: Kristoffer Kristofferson, Kristoffer Kristian ""Kris"" Kristofferson, Kristoffer ""Kris"" Kristofferson. Entity description:American country music singer, songwriter, musician, and film actor
node4:Entity in the knowledge graph. Entity name: Terminator 3: Rise of the Machines, Entity alternatives: T3. Entity description:2003 US science fiction film
node5:Entity in the knowledge graph. Entity name: country music, Entity alternatives: country and western, country, country & western. Entity description:genre of American popular music
node6:Entity in the knowledge graph. Entity name: Naomi Campbell, Entity alternatives: . Entity description:British model
node7:Entity in the knowledge graph. Entity name: jangle pop, Entity alternatives: . Entity description:music genre
node8:Entity in the knowledge graph. Entity name: Quincy Jones, Entity alternatives: Quincy Delight Jones, Jr., Q, Quincy Jones, Jr., Quincy Delight Jones, Jr, Quincy. Entity description:American record producer, conductor, arranger, composer, television producer, and trumpeter
node9:Entity in the knowledge graph. Entity name: Ricky Nelson, Entity alternatives: Eric Hilliard Nelson. Entity description:actor, musician, singer
node10:Entity in the knowledge graph. Entity name: Faith Hill, Entity alternatives: Audrey Faith Perry. Entity description:American singer
node11:Entity in the knowledge graph. Entity name: Don Henley, Entity alternatives: Donald Hugh Henley. Entity description:American singer, lyricist, producer and drummer
node12:Entity in the knowledge graph. Entity name: Patrick Gallagher, Entity alternatives: . Entity description:Canadian actor
node13:Entity in the knowledge graph. Entity name: actor, Entity alternatives: actresses, actress, actors. Entity description:person who acts in a dramatic or comic production and works in film, television, theatre, or radio
node14:Entity in the knowledge graph. Entity name: jazz, Entity alternatives: jazz music. Entity description:musical style
node15:Entity in the knowledge graph. Entity name: James Cameron, Entity alternatives: James Francis Cameron. Entity description:Canadian film director
node16:Entity in the knowledge graph. Entity name: Gary Busey, Entity alternatives: William Gary Busey. Entity description:American actor
node17:Entity in the knowledge graph. Entity name: Robyn Hitchcock, Entity alternatives: . Entity description:singer, songwriter, and guitarist from Britain
node18:Entity in the knowledge graph. Entity name: Richard Benjamin, Entity alternatives: . Entity description:actor, film director
node19:Entity in the knowledge graph. Entity name: Miles Davis, Entity alternatives: Miles Dewey Davis, III Davis, Miles Dewey Davis III. Entity description:American jazz musician
node20:Entity in the knowledge graph. Entity name: Orson Welles, Entity alternatives: George Orson Welles. Entity description:American actor, director, writer and producer
node21:Entity in the knowledge graph. Entity name: Ricardo Antonio Chavira, Entity alternatives: . Entity description:American actor
node22:Entity in the knowledge graph. Entity name: Naya Rivera, Entity alternatives: Naya Marie Rivera Dorsey. Entity description:American actress and singer
node23:Entity in the knowledge graph. Entity name: Kristen Stewart, Entity alternatives: Kristen Jaymes Stewart, Kiki. Entity description:American actress
node24:Entity in the knowledge graph. Entity name: Traffic, Entity alternatives: . Entity description:2000 American crime drama film
node25:Entity in the knowledge graph. Entity name: Catch-22, Entity alternatives: . Entity description:1970 satirical comedy-drama war film
node26:Entity in the knowledge graph. Entity name: D. W. Moffett, Entity alternatives: Donald Warren ""D. W."" Moffett. Entity description:American actor
node27:Entity in the knowledge graph. Entity name: I'm Not There, Entity alternatives: . Entity description:2007 film by Todd Haynes
node28:Entity in the knowledge graph. Entity name: Piranha 3DD, Entity alternatives: . Entity description:2012 film by John Gulager
node29:Entity in the knowledge graph. Entity name: Nashville, Entity alternatives: . Entity description:1975 film by Robert Altman
node30:Entity in the knowledge graph. Entity name: Jerry Lee Lewis, Entity alternatives: . Entity description:American singer-songwriter and pianist",fb15k237,lc
"Classify the relationship between two entities denoted as source node26 and target node11 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Cinematographer Conrad Hall, also known as Conrad L. Hall.  
node1: American film studio United Artists with no alternative names.  
node2: Japanese director Shinya Tsukamoto, also a producer, writer, and actor.  
node3: Singer Fergie, also known as Hot Stuff and Stacy Ferguson.  
node4: 2002 American crime film Road to Perdition.  
node5: 2003 action-adventure film Master and Commander: The Far Side of the World.  
node6: American film director and screenwriter Todd Haynes.  
node7: 1998 American fantasy comedy-drama film Pleasantville.  
node8: Missing.  
node9: 1960 Italian comedy-drama film La Dolce Vita.  
node10: Missing.  
node11: Missing.  
node12: Film production company Fine Line Features.  
node13: 2009 musical film Nine directed by Rob Marshall.  
node14: 2002 film Far from Heaven by Todd Haynes.  
node15: American multi-talented artist Pharrell Williams, also known as Skateboard P.  
node16: 2004 drama film Vanity Fair by Mira Nair.  
node17: Actor Dennis Haysbert, full name Dennis Dexter Haysbert.  
node18: Film genre costume drama, also called period drama.  
node19: 2000 Robert Redford film The Legend of Bagger Vance.  
node20: American journalist Joseph Ruttenberg.  
node21: 2006 crime-thriller film The Black Dahlia directed by Brian De Palma.  
node22: Missing.  
node23: 2006 Zhang Yimou film Curse of the Golden Flower.  
node24: Cinematographer, also called director of photography.  
node25: 2003 biographical film American Splendor about Harvey Pekar.  
node26: Cinematographer Tak Fujimoto.  
node27: French-Swiss film director Jean-Luc Godard.  
node28: Russian-American director Lewis Milestone, born Leib Milstein.  
node29: 1982 supernatural horror film Poltergeist.  
node30: 1948 Alfred Hitchcock film Rope.  
node31: 1986 comedy Ferris Bueller's Day Off by John Hughes.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node0, node11>,<node0, node24>,<node1, node22>,<node1, node28>,<node1, node29>,<node1, node30>,<node2, node24>,<node3, node13>,<node4, node11>,<node5, node11>,<node6, node14>,<node7, node8>,<node7, node11>,<node8, node13>,<node8, node23>,<node9, node22>,<node10, node15>,<node10, node22>,<node11, node13>,<node11, node14>,<node11, node19>,<node11, node21>,<node11, node22>,<node11, node23>,<node12, node22>,<node12, node25>,<node14, node17>,<node16, node18>,<node16, node22>,<node20, node24>,<node24, node26>,<node24, node27>,<node26, node31>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Schools from Which Draft Picks are Chosen; Regular Personal Appearances on TV; Risk Factors for Diseases; Adjoining Locations; Basketball Roster Positions; Award Nominations Received; Art Direction in Films; Fraternities and Sororities at a University; Regional Debut Venue for a Film; Film Release Medium and Date. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Award Nominations Received,"

node0: Cinematographer Conrad Hall, also known as Conrad L. Hall.  
node1: American film studio United Artists with no alternative names.  
node2: Japanese director Shinya Tsukamoto, also a producer, writer, and actor.  
node3: Singer Fergie, also known as Hot Stuff and Stacy Ferguson.  
node4: 2002 American crime film Road to Perdition.  
node5: 2003 action-adventure film Master and Commander: The Far Side of the World.  
node6: American film director and screenwriter Todd Haynes.  
node7: 1998 American fantasy comedy-drama film Pleasantville.  
node8: Missing.  
node9: 1960 Italian comedy-drama film La Dolce Vita.  
node10: Missing.  
node11: Missing.  
node12: Film production company Fine Line Features.  
node13: 2009 musical film Nine directed by Rob Marshall.  
node14: 2002 film Far from Heaven by Todd Haynes.  
node15: American multi-talented artist Pharrell Williams, also known as Skateboard P.  
node16: 2004 drama film Vanity Fair by Mira Nair.  
node17: Actor Dennis Haysbert, full name Dennis Dexter Haysbert.  
node18: Film genre costume drama, also called period drama.  
node19: 2000 Robert Redford film The Legend of Bagger Vance.  
node20: American journalist Joseph Ruttenberg.  
node21: 2006 crime-thriller film The Black Dahlia directed by Brian De Palma.  
node22: Missing.  
node23: 2006 Zhang Yimou film Curse of the Golden Flower.  
node24: Cinematographer, also called director of photography.  
node25: 2003 biographical film American Splendor about Harvey Pekar.  
node26: Cinematographer Tak Fujimoto.  
node27: French-Swiss film director Jean-Luc Godard.  
node28: Russian-American director Lewis Milestone, born Leib Milstein.  
node29: 1982 supernatural horror film Poltergeist.  
node30: 1948 Alfred Hitchcock film Rope.  
node31: 1986 comedy Ferris Bueller's Day Off by John Hughes.","node0:Entity in the knowledge graph. Entity name: Conrad Hall, Entity alternatives: Conrad L. Hall. Entity description:cinematographer
node1:Entity in the knowledge graph. Entity name: United Artists, Entity alternatives: . Entity description:American film studio
node2:Entity in the knowledge graph. Entity name: Shinya Tsukamoto, Entity alternatives: . Entity description:Japanese director, producer, writer, and actor
node3:Entity in the knowledge graph. Entity name: Fergie, Entity alternatives: Hot Stuff, Stacy Ferguson, Stacy Ann Ferguson, Fergie Duhamel. Entity description:singer from the United States
node4:Entity in the knowledge graph. Entity name: Road to Perdition, Entity alternatives: . Entity description:2002 American crime film
node5:Entity in the knowledge graph. Entity name: Master and Commander: The Far Side of the World, Entity alternatives: . Entity description:2003 action adventure movie
node6:Entity in the knowledge graph. Entity name: Todd Haynes, Entity alternatives: . Entity description:American film director and screenwriter
node7:Entity in the knowledge graph. Entity name: Pleasantville, Entity alternatives: . Entity description:1998 American fantasy comedy-drama film
node8:Missing.
node9:Entity in the knowledge graph. Entity name: La Dolce Vita, Entity alternatives: Dolce Vita, La dolce vita. Entity description:1960 Italian comedy-drama film
node10:Missing.
node11:Missing.
node12:Entity in the knowledge graph. Entity name: Fine Line Features, Entity alternatives: . Entity description:film production company
node13:Entity in the knowledge graph. Entity name: Nine, Entity alternatives: . Entity description:2009 film by Rob Marshall
node14:Entity in the knowledge graph. Entity name: Far from Heaven, Entity alternatives: . Entity description:2002 film by Todd Haynes
node15:Entity in the knowledge graph. Entity name: Pharrell Williams, Entity alternatives: Skateboard P, Pharrell. Entity description:American rapper, singer, record producer, composer, and fashion designer.
node16:Entity in the knowledge graph. Entity name: Vanity Fair, Entity alternatives: . Entity description:2004 drama film by Mira Nair
node17:Entity in the knowledge graph. Entity name: Dennis Haysbert, Entity alternatives: Dennis Dexter Haysbert. Entity description:actor
node18:Entity in the knowledge graph. Entity name: costume drama, Entity alternatives: period drama. Entity description:film genre
node19:Entity in the knowledge graph. Entity name: The Legend of Bagger Vance, Entity alternatives: Legend of Bagger Vance. Entity description:2000 film by Robert Redford
node20:Entity in the knowledge graph. Entity name: Joseph Ruttenberg, Entity alternatives: . Entity description:American journalist
node21:Entity in the knowledge graph. Entity name: The Black Dahlia, Entity alternatives: Black Dahlia. Entity description:2006 film by Brian De Palma
node22:Missing.
node23:Entity in the knowledge graph. Entity name: Curse of the Golden Flower, Entity alternatives: Mǎn chéng jìn dài huáng jīn jiǎ. Entity description:2006 film directed by Zhang Yimou
node24:Entity in the knowledge graph. Entity name: cinematographer, Entity alternatives: director of photography, DOP. Entity description:chief over the camera and lighting crews working on a film
node25:Entity in the knowledge graph. Entity name: American Splendor, Entity alternatives: . Entity description:2003 American biographical film about Harvey Pekar
node26:Entity in the knowledge graph. Entity name: Tak Fujimoto, Entity alternatives: . Entity description:cinematographer
node27:Entity in the knowledge graph. Entity name: Jean-Luc Godard, Entity alternatives: Jean Luc Godard. Entity description:French-Swiss film director, screenwriter and film critic
node28:Entity in the knowledge graph. Entity name: Lewis Milestone, Entity alternatives: Leib Milstein. Entity description:Russian-American film director
node29:Entity in the knowledge graph. Entity name: Poltergeist, Entity alternatives: . Entity description:1982 American supernatural horror film
node30:Entity in the knowledge graph. Entity name: Rope, Entity alternatives: . Entity description:1948 film by Alfred Hitchcock
node31:Entity in the knowledge graph. Entity name: Ferris Bueller's Day Off, Entity alternatives: . Entity description:1986 film by John Hughes",fb15k237,lc
"Classify the relationship between two entities denoted as source node16 and target node15 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Canadian musician, singer, songwriter (Sarah McLachlan).  
node1: Percussion idiophone instrument (triangle).  
node2: Musical form and genre (blues).  
node3: American record label (Arista Records).  
node4: 1997 David Lynch film (Lost Highway).  
node5: British guitarist (Jimmy Page).  
node6: American rapper, singer, producer, actor with aliases (Snoop Dogg).  
node7: Singer-songwriter and record producer (Static Major).  
node8: R&B singer-songwriter and producer (Babyface).  
node9: Music executive and musician (L.A. Reid).  
node10: Grammy for songs in visual media.  
node11: 1997 sci-fi film (Contact).  
node12: Electronics-based musical instrument.  
node13: Keyboard musical instrument (harpsichord).  
node14: Irish republic with multiple names (Ireland).  
node15: American actress (Emily Osment).  
node16: Non-electric guitar type (acoustic guitar).  
node17: 2004 Peter Berg football film (Friday Night Lights).  
node18: 2003 Hong Kong crime-thriller (Infernal Affairs II).  
node19: American musician (Jon Brion).  
node20: Missing.  
node21: Canadian multi-hyphenate artist (Drake/Aubrey Graham).  
node22: Popular music genre from 1950s rock roots (pop).  
node23: 2012 sci-fi film (Men in Black 3).  
node24: Percussion instrument with jingles (tambourine).  
node25: Fleetwood Mac's singer-songwriter (Stevie Nicks).  
node26: American actress (Vanessa Hudgens).  
node27: English audio engineer/producer (Alan Parsons).  
node28: Textile-washing tool (washboard).  
node29: 2013 Superman film (Man of Steel).  
node30: Missing.  
node31: American musician (Jim O'Rourke).

the connection relationship among the nodes mentioned:
 <node0, node3>,<node0, node16>,<node0, node22>,<node1, node13>,<node1, node16>,<node1, node24>,<node2, node5>,<node2, node25>,<node3, node8>,<node3, node27>,<node4, node14>,<node5, node12>,<node5, node16>,<node5, node24>,<node6, node22>,<node7, node8>,<node7, node22>,<node8, node9>,<node8, node10>,<node8, node16>,<node8, node22>,<node11, node14>,<node12, node16>,<node12, node19>,<node12, node20>,<node12, node24>,<node12, node27>,<node12, node30>,<node12, node31>,<node13, node16>,<node13, node24>,<node13, node28>,<node13, node30>,<node14, node17>,<node14, node18>,<node14, node23>,<node14, node29>,<node14, node31>,<node15, node22>,<node15, node26>,<node16, node19>,<node16, node20>,<node16, node24>,<node16, node27>,<node16, node28>,<node16, node30>,<node16, node31>,<node19, node22>,<node20, node30>,<node21, node22>,<node22, node25>,<node22, node26>,<node24, node25>,<node27, node30>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: TV Programs Written by a Writer; Administrative Parent of an Area; SNL Cast Members by Season; Locations of Events; Type of Appearance in Films; Marriage Type; Degree Holders from an Institution; Siblings of a Person; Instrumentalists of a Music Instrument; Revenue in Currency. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Instrumentalists of a Music Instrument,"

node0: Canadian musician, singer, songwriter (Sarah McLachlan).  
node1: Percussion idiophone instrument (triangle).  
node2: Musical form and genre (blues).  
node3: American record label (Arista Records).  
node4: 1997 David Lynch film (Lost Highway).  
node5: British guitarist (Jimmy Page).  
node6: American rapper, singer, producer, actor with aliases (Snoop Dogg).  
node7: Singer-songwriter and record producer (Static Major).  
node8: R&B singer-songwriter and producer (Babyface).  
node9: Music executive and musician (L.A. Reid).  
node10: Grammy for songs in visual media.  
node11: 1997 sci-fi film (Contact).  
node12: Electronics-based musical instrument.  
node13: Keyboard musical instrument (harpsichord).  
node14: Irish republic with multiple names (Ireland).  
node15: American actress (Emily Osment).  
node16: Non-electric guitar type (acoustic guitar).  
node17: 2004 Peter Berg football film (Friday Night Lights).  
node18: 2003 Hong Kong crime-thriller (Infernal Affairs II).  
node19: American musician (Jon Brion).  
node20: Missing.  
node21: Canadian multi-hyphenate artist (Drake/Aubrey Graham).  
node22: Popular music genre from 1950s rock roots (pop).  
node23: 2012 sci-fi film (Men in Black 3).  
node24: Percussion instrument with jingles (tambourine).  
node25: Fleetwood Mac's singer-songwriter (Stevie Nicks).  
node26: American actress (Vanessa Hudgens).  
node27: English audio engineer/producer (Alan Parsons).  
node28: Textile-washing tool (washboard).  
node29: 2013 Superman film (Man of Steel).  
node30: Missing.  
node31: American musician (Jim O'Rourke).","node0:Entity in the knowledge graph. Entity name: Sarah McLachlan, Entity alternatives: Sarah Ann McLachlan. Entity description:Canadian musician, singer, and songwriter
node1:Entity in the knowledge graph. Entity name: triangle, Entity alternatives: . Entity description:idiophone type of musical instrument in the percussion family
node2:Entity in the knowledge graph. Entity name: blues, Entity alternatives: . Entity description:musical form and a music genre
node3:Entity in the knowledge graph. Entity name: Arista Records, Entity alternatives: . Entity description:American record label
node4:Entity in the knowledge graph. Entity name: Lost Highway, Entity alternatives: . Entity description:1997 film by David Lynch
node5:Entity in the knowledge graph. Entity name: Jimmy Page, Entity alternatives: ZoSo, James Patrick Page. Entity description:British guitarist
node6:Entity in the knowledge graph. Entity name: Snoop Dogg, Entity alternatives: Snoop Doggy Dogg, Cordozar Calvin Broadus, Jr., Calvin Cordozar Broadus, Jr., Snoopzilla, Cordozar Calvin Broadus, Snoop Lion, Bigg Snoop Dogg, Calvin Broadus, Calvin Broadus, Jr.. Entity description:American rapper, singer-songwriter, record producer, and actor
node7:Entity in the knowledge graph. Entity name: Static Major, Entity alternatives: . Entity description:singer-songwriter, record producer
node8:Entity in the knowledge graph. Entity name: Babyface, Entity alternatives: Kenneth Edmonds, Kenneth ""Babyface"" Edmonds. Entity description:American R&B singer–songwriter and record producer
node9:Entity in the knowledge graph. Entity name: L.A. Reid, Entity alternatives: moscassotutto, Antonio M. Reid. Entity description:American musician and executive
node10:Entity in the knowledge graph. Entity name: Grammy Award for Best Song Written for a Motion Picture, Television or Other Visual Media, Entity alternatives: . Entity description:award
node11:Entity in the knowledge graph. Entity name: Contact, Entity alternatives: '' Contact ''. Entity description:1997 American science fiction drama film
node12:Entity in the knowledge graph. Entity name: electronic musical instrument, Entity alternatives: electronic instrument. Entity description:musical instrument that produces its sounds using electronics
node13:Entity in the knowledge graph. Entity name: harpsichord, Entity alternatives: . Entity description:musical instrument played by means of a keyboard
node14:Entity in the knowledge graph. Entity name: Ireland, Entity alternatives: ie, 🇮🇪, Éire, Southern Ireland, Republic of Ireland, Hibernia, IE, Ireland, Republic of, ireland, Eire, IRL. Entity description:republic covering major parts of the island of Ireland
node15:Entity in the knowledge graph. Entity name: Emily Osment, Entity alternatives: Emily Jordan Osment. Entity description:American actress
node16:Entity in the knowledge graph. Entity name: acoustic guitar, Entity alternatives: . Entity description:type of guitar
node17:Entity in the knowledge graph. Entity name: Friday Night Lights, Entity alternatives: . Entity description:2004 film by Peter Berg
node18:Entity in the knowledge graph. Entity name: Infernal Affairs II, Entity alternatives: . Entity description:2003 Hong Kong crime-thriller film
node19:Entity in the knowledge graph. Entity name: Jon Brion, Entity alternatives: . Entity description:American musician
node20:Missing.
node21:Entity in the knowledge graph. Entity name: Drake, Entity alternatives: Aubrey Graham, Champagne Pap, The Boyi, Drizzy Drake, Aubrey Drake Graham. Entity description:Canadian rapper, singer, songwriter, record producer, and actor
node22:Entity in the knowledge graph. Entity name: pop music, Entity alternatives: pop. Entity description:genre of popular music which originated in its modern form in the late-1950s, deriving from rock and roll
node23:Entity in the knowledge graph. Entity name: Men in Black 3, Entity alternatives: . Entity description:2012 science fiction film
node24:Entity in the knowledge graph. Entity name: tambourine, Entity alternatives: . Entity description:musical instrument in the percussion family
node25:Entity in the knowledge graph. Entity name: Stevie Nicks, Entity alternatives: Stephanie Lynn Nicks, Stephanie Lynn ""Stevie"" Nicks. Entity description:American singer and songwriter, member of Fleetwood Mac
node26:Entity in the knowledge graph. Entity name: Vanessa Hudgens, Entity alternatives: Vanessa Anne Hudgens. Entity description:American actress
node27:Entity in the knowledge graph. Entity name: Alan Parsons, Entity alternatives: . Entity description:audio engineer, musician, and record producer from England
node28:Entity in the knowledge graph. Entity name: washboard, Entity alternatives: . Entity description:tool for hand-weashing textiles
node29:Entity in the knowledge graph. Entity name: Man of Steel, Entity alternatives: The Man of Steel. Entity description:2013 superhero film
node30:Missing.
node31:Entity in the knowledge graph. Entity name: Jim O'Rourke, Entity alternatives: . Entity description:American musician",fb15k237,lc
"Classify the product represented by node14 using its subgraph data (text attributes and connections) as follows.

node0: Leather case for Dell Venue Pro11-2500BLK 64GB; black, includes color options; no stylus pen.  
node1: Synthetic leather folio for Dell Venue 8 (3830) in black; non-scratch lining, simple design.  
node2: Green synthetic leather folio for Dell Venue 7 (3730); non-scratch interior, class design.  
node3: Venue 8 tablet case with bonus stylus; leather folio, incompatible with Venue 8 Pro.  
node4: 3-layer PET screen protector for Dell Venue 8; anti-scratch, requires careful installation.  
node5: Dell Venue 8 16GB Android tablet; product content missing.  
node6: Dell Venue 8 32GB Android tablet; product content missing.  
node7: Faux leather sleeve for Venue 11 Pro; includes Bluetooth keyboard, stand, stylus.  
node8: 7-inch leather sleeve for Venue 8 Pro; padded, gold zipper, credit card slots.  
node9: Slim folio for Dell Venue 7 (3730) in purple; includes stylus, magnetic flap, 3 stand angles.  
node10: Leather folio for Dell Venue 8 Android; magnetic closure, horizontal stand, slim design.  
node11: 3-pack screen protectors for Dell Venue 7; 3-layer PET, Japanese material, step-by-step install.  
node12: Hot Pink folio for Venue 8 (3830); synthetic leather, non-scratch lined.  
node13: Hot Pink folio for Venue 7 (3730); synthetic leather, non-scratch interior.  
node14: Magenta leather folio for Venue 7 16GB; magnetic closure, stand function, Android 4.2 fit.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node7>,<node1, node5>,<node1, node7>,<node1, node8>,<node1, node9>,<node1, node10>,<node1, node11>,<node2, node4>,<node2, node6>,<node2, node11>,<node3, node12>,<node6, node10>,<node9, node13>,<node11, node12>,<node11, node13>,<node11, node14>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Electronics,"

node0: Leather case for Dell Venue Pro11-2500BLK 64GB; black, includes color options; no stylus pen.  
node1: Synthetic leather folio for Dell Venue 8 (3830) in black; non-scratch lining, simple design.  
node2: Green synthetic leather folio for Dell Venue 7 (3730); non-scratch interior, class design.  
node3: Venue 8 tablet case with bonus stylus; leather folio, incompatible with Venue 8 Pro.  
node4: 3-layer PET screen protector for Dell Venue 8; anti-scratch, requires careful installation.  
node5: Dell Venue 8 16GB Android tablet; product content missing.  
node6: Dell Venue 8 32GB Android tablet; product content missing.  
node7: Faux leather sleeve for Venue 11 Pro; includes Bluetooth keyboard, stand, stylus.  
node8: 7-inch leather sleeve for Venue 8 Pro; padded, gold zipper, credit card slots.  
node9: Slim folio for Dell Venue 7 (3730) in purple; includes stylus, magnetic flap, 3 stand angles.  
node10: Leather folio for Dell Venue 8 Android; magnetic closure, horizontal stand, slim design.  
node11: 3-pack screen protectors for Dell Venue 7; 3-layer PET, Japanese material, step-by-step install.  
node12: Hot Pink folio for Venue 8 (3830); synthetic leather, non-scratch lined.  
node13: Hot Pink folio for Venue 7 (3730); synthetic leather, non-scratch interior.  
node14: Magenta leather folio for Venue 7 16GB; magnetic closure, stand function, Android 4.2 fit.","node0:Product from Amazon platform with title and content: Title: Specam Folio Stand Leather Case Cover for Dell Venue Pro11-2500BLK 64 GB 10.8&quot; Tablet-Black. Content: Color:Black(please be noted,we also have Dark Blue(ASIN:B00JB259FO),Hot Pink(ASIN:B00JB2A8GY) and Purple(ASIN:B00JB2I9RO) colors,please find the link in the store if you need)Package Included:1*leather case cover for Dell Venue Pro11-2500BLK 64 GB 10.8""(stylus pen isn't included)
node1:Product from Amazon platform with title and content: Title: iShoppingdeals - for Dell Venue 8 (3830) Android Tablet PU Leather Folio Cover Case, Black. Content: Stand It, Store It & Go! This case sports a simple and classy design made from synthetic leather, and the interior is lined with non-scratch material so you don't need to worry about any damages.
node2:Product from Amazon platform with title and content: Title: iShoppingdeals - for Dell Venue 7 Tablet (3730) PU Leather Folio Cover Case, Green. Content: Stand It, Store It & Go! This case sports a simple and classy design made from synthetic leather, and the interior is lined with non-scratch material so you don't need to worry about any damages.
node3:Product from Amazon platform with title and content: Title: ProCase Dell Venue 8 Android Tablet Protective Case with bonus stylus pen - Flip Stand Leather Folio Cover for Dell Venue 8&quot; Android Tablet (Black). Content: Case Compatibility: Compatible with Dell Venue 8 Android Tablet (NOT compatible with Venue 8 Pro Windows Tablet)
node4:Product from Amazon platform with title and content: Title: BIRUGEAR Premium HD Crystal Clear LCD Screen Protector for Dell Venue 8 - 8-inch Android Tablet. Content: Protect your NewDell Venue 8 inch Tabletfrom unwanted scratches withBIRUGEAR Screen Protector.Don't risk permanent damage to your screen when protection is just a click away. Our self-adhesive screen protector is specifically designed to prevent damage from happening while maintaining its full functionality. you have all the perfect protector for your device's Screen you need!Each of the screen protectors contains 3 layers of PET film that made of japanese material. The first and last films are mask films, where the stickers are affixed. The real screen protector for your device is the film in the middle. So, you need to use the stickers to remove the mask films (NOT the stickers themselves).QUICK INSTALLATION GUIDE1) Clean your screen using the wiping cloth.2) Apply the exposed side of the protector to the Tablet.3) Use the 'squeegee' to smooth the screen protector, removing any bubbles4) Remove the second side of the screen protector film.NOTE:- It is important to install in a dust-free environment to avoid particles between your guard and device screen. If bubbles form, use the cleaning cloth and credit card to rub out any bubbles.
node5:Product from Amazon platform with title and content: Title: Dell Venue 8 16 GB Tablet (Android). Content: missing
node6:Product from Amazon platform with title and content: Title: Dell Venue 8 32 GB Tablet (Android). Content: missing
node7:Product from Amazon platform with title and content: Title: Faux Leather Carrying Bag Sleeve Case For Dell Venue 11 Pro Windows 8 Tablet + Includes Bluetooth Keyboard + Metal Stand + Stylus Pen. Content: Irista Carrying Bag SleeveVangoddy's Irista 10-inch Sleeve bag is incredibly light, stylish and portable. Crafted of durable friendly leather with fine stitching. The bag has extra foam padding all around protecting your device from any bumps dents and scratches. It features durable gold zipper/fixtures that allows you to access your stuff with no hassle. The interior is feature with Microsuede anti scratch material. Irista bag was designed to stand up to everyday wear and tear, and it will retain its good looks over time. Built with plenty of organized storage, the main compartment measures 11.25"" x 8"" x 1"" and across on the opposite side of the main compartment you will find 2 extra pockets measuring 8"" x 5.75"". The sleeve also has a unique feature, a center flap that includes a memory card slot, credit card slots and cellphone/mp3 pocket measuring 6"" x 3.75"".The Irista bag takes mobility to a whole new level. Maneuver from the office to the classroom or anywhere you need to go.Here's a bag that's incredibly light yet easily accommodates your main device with accessories and some daily items that you normally carry in your pocket.Suitable for Dell Venue 11 Pro Tablet(All Models)Includes:- Bluetooth Keyboard Silicon Water Resistant Compatible with Bluetooth 2.0 and above- Metal Stand for Tablet, can be used for watching movies, emailing and more- Stylus Presentation Pen. The Stylus pen was build with a Red LED laser pointer and a white LED light (Batteries are Included)
node8:Product from Amazon platform with title and content: Title: Faux Leather Carrying Bag Sleeve Case For Dell Venue 8 Pro 8-inch Tablet (BELL8-Pro81) (BELL8-1818BLK). Content: Irista Carrying Bag SleeveVangoddy's Irista 7-inch Sleeve bag is incredibly light, stylish and portable. Crafted of durable friendly leather with fine stitching. The bag has extra foam padding all around protecting your device from any bumps dents and scratches. It features durable gold zipper/fixtures that allows you to access your stuff with no hassle. The interior is feature with Microsuede anti scratch material. Irista bag was designed to stand up to everyday wear and tear, and it will retain its good looks over time. Built with plenty of organized storage, the main compartment measures 8.75"" x 6.62"" x 1"" and across on the opposite side of the main compartment you will find 2 extra pockets measuring 6.5"" x 4"" (Ideal for cellphone and mp3 Player). The sleeve also has a unique feature, a center flap that includes a memory card slot and credit card slots.The Irista bag takes mobility to a whole new level. Maneuver from the office to the classroom or anywhere you need to go.Here's a bag that's incredibly light yet easily accommodates your main device with accessories and some daily items that you normally carry in your pocket.Suitable for the Dell Venue 8 Pro Tablet (8-inch Display)
node9:Product from Amazon platform with title and content: Title: i-UniK Slim Folio 2013 Dell Venue 7 Andriod 7 inch (Model 3730) Tablet Protection Case with Bonus Stylus [NOT FIT 2014 Model] - (PURPLE). Content: Product FeaturesDesign to become perfect companion to your Dell Venue 7 inch Android Tablet Tablet. It protects your Dell Venue 7 inch Android Tablet Tablet against bumps and scratches with this case. It allows easy access to all functions, On/Off button, Volume control and Mini USB charging/data port. Also, it transforms easily into horizontal stand allows your to watch your tablets hands free and horizontally with 3 different angles. Magnetic flap keeps device secure in case.Product DetailsCustom Fit Dell Venue 7 inch Android Tablet Tablet3 Slots for different horizontal viewing angles, does not stand verticallySlim Folio Design, great for carry aroundStylus Pen Holder, Free Stylus Pen Included!Precise Cut Outs for all Ports, Sensor, Power switch, volume control and Both Front and Back CameraONE YEAR FREE REPLACEMENT WARRANTYDOES NOT FIT OTHER BRANDS OR MODELS OF TABLETS OR Dell Venue 8 inch or 10 inch tablets due to different size and shape.s
node10:Product from Amazon platform with title and content: Title: Infiland Folio PU Leather Slim Fit Stand Case Cover for Dell Venue 8 16GB 32GB Android 4.2 8-inch Tablet (DELL Venue 8 Android 4.2, Black). Content: Protect your new Dell Venue 8 Android tablet with this Infiland Folio Case. Apropos reserved space around the screen, make all functional points of the Android 4.2 can be easily touched. Cover will fold horizontally as a versatile stand to enjoy typing, emailing, gaming or video watching. Magnetic closure, more protective for the screen of you tablet. Infiland- A must have case for Dell Venue 8 !
node11:Product from Amazon platform with title and content: Title: ""BIRUGEAR 3-Pack Premium HD Crystal Clear LCD Screen Protector for Dell Venue 7 - 7'' HD Screen Android Tablet"". Content: Protect your screen from scratches with theBIRUGEAR Screen Protector.Don't risk permanent damage to your screen when protection is just a click away. Our self-adhesive screen protector is specifically designed to prevent damage from happening to your screen while maintaining its full functionality.Each screen protector contains 3 layers of PET film that is made from Japanese material.Installation Guide:1). Start by choosing a brightly lit, dust-free environment and clean the screen thoroughly with provided microfiber cleaning cloth.2). Slowly peel away the film layer labeled ""Step 1"". Hold screen protector along the edges and avoid touching the film and screen surface.3). Before placing screen protector, carefully align the cutouts and edges to your screen and slowly lower the screen protector starting from the bottom and work your way up.4). Gently sweep through the screen surface with the provided squeegee card. Push out any air bubbles towards the nearest edge. Repeat step 4 as necessary.5). Finally, remove the film layer labeled ""Step 2"" and you are done!
node12:Product from Amazon platform with title and content: Title: iShoppingdeals - for Dell Venue 8 (3830) Android Tablet PU Leather Folio Cover Case, Hot Pink. Content: Stand It, Store It & Go! This case sports a simple and classy design made from synthetic leather, and the interior is lined with non-scratch material so you don't need to worry about any damages.
node13:Product from Amazon platform with title and content: Title: iShoppingdeals - for Dell Venue 7 Tablet (3730) PU Leather Folio Cover Case, Hot Pink. Content: Stand It, Store It & Go! This case sports a simple and classy design made from synthetic leather, and the interior is lined with non-scratch material so you don't need to worry about any damages.
node14:Product from Amazon platform with title and content: Title: Infiland Folio PU Leather Slim Fit Stand Case Cover for Dell Venue 7 16GB Android 4.2 7-inch Tablet (DELL Venue 7 16GB Android 4.2, Magenta). Content: Protect your new Dell Venue 7 Android tablet with this Infiland Folio Case. Apropos reserved space around the screen, make all functional points of the Android 4.2 can be easily touched. Cover will fold horizontally as a versatile stand to enjoy typing, emailing, gaming or video watching. Magnetic closure, more protective for the screen of you tablet. Infiland- A must have case for Dell Venue 7 !",products,nc
"Classify the product represented by node9 using its subgraph data (text attributes and connections) as follows.

node0: RC vehicle with drivable/flyable mode, projectile firing, ejectable wheels, and aerial maneuvers for combat play.  
node1: Dino-themed toy for creative destruction, fostering competition, customization, and imaginative role-play for kids.  
node2: 48-piece dinosaur floor puzzle with durable pieces; educational, encourages dinosaur recognition and assembly.  
node3: Superman playset with interactive battles, projectile launcher, swords, and jail for fighting General Zod.  
node4: Fortress-themed destruction toy for imaginative play, customization, and competitive creative interactions.  
node5: 2-in-1 doodling board with water-color and gel-painting sides for mess-free artistic expression.  
node6: Crayola Crayon Maker with Story Studio: product content unavailable.  
node7: Learning board with magnetic writing pad and LCD animations teaching letters, numbers, games, and music.  
node8: VTech Slide And Talk Smart Phone: product content unavailable.  
node9: Toddler-safe crayons aiding motor skills; stackable, non-toxic, and easy to grip for young artists.  
node10: Magnetic gear board with templates to build machines, teaching mechanics and problem-solving.  
node11: Sesame Street Aquadoodle mat with Elmo-themed hide-and-seek; water-activated doodles that dry instantly.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node1, node3>,<node1, node4>,<node1, node5>,<node1, node6>,<node5, node7>,<node5, node8>,<node5, node9>,<node5, node10>,<node5, node11>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Toys & Games,"

node0: RC vehicle with drivable/flyable mode, projectile firing, ejectable wheels, and aerial maneuvers for combat play.  
node1: Dino-themed toy for creative destruction, fostering competition, customization, and imaginative role-play for kids.  
node2: 48-piece dinosaur floor puzzle with durable pieces; educational, encourages dinosaur recognition and assembly.  
node3: Superman playset with interactive battles, projectile launcher, swords, and jail for fighting General Zod.  
node4: Fortress-themed destruction toy for imaginative play, customization, and competitive creative interactions.  
node5: 2-in-1 doodling board with water-color and gel-painting sides for mess-free artistic expression.  
node6: Crayola Crayon Maker with Story Studio: product content unavailable.  
node7: Learning board with magnetic writing pad and LCD animations teaching letters, numbers, games, and music.  
node8: VTech Slide And Talk Smart Phone: product content unavailable.  
node9: Toddler-safe crayons aiding motor skills; stackable, non-toxic, and easy to grip for young artists.  
node10: Magnetic gear board with templates to build machines, teaching mechanics and problem-solving.  
node11: Sesame Street Aquadoodle mat with Elmo-themed hide-and-seek; water-activated doodles that dry instantly.","node0:Product from Amazon platform with title and content: Title: Air Hogs RC Drop Strike - Black. Content: Engage in battle with the ultimate fusion of ground and air RC technology. The Air Hogs Drop Strike can drive, fly, fire projectiles and eject with the all-new chassis release system. The eject able wheelbase is deployable at the push of a button. Upon disconnecting, the Drop Strike takes on aggressive flight characteristics enabling evasive aerial maneuvering. With two adjustable missile bays, the Drop Strike delivers precision firing in both ground-attack and heli modes. Whether on land or in the sky, the Air Hogs Drop Strike is a devastating force to all who stand in its way.
node1:Product from Amazon platform with title and content: Title: Crayola Create 2 Destroy Dino Destruction Stomping Mall. Content: Kids will engage in imaginative role play while tapping into key creativity insights for incorporating challenging interactions, healthy competition with elements of customization and collectability.
node2:Product from Amazon platform with title and content: Title: Melissa &amp; Doug Land of Dinosaurs Floor (48 pc). Content: The dramatic, detailed dinosaurs on this cardboard floor puzzle may be long extinct, but these 48 puzzle pieces will surely last for ages! Four feet long when assembled, the extra-thick puzzle pieces feature an easy-clean surface to keep them looking like new. It's an educational and entertaining challenge for any child to complete the puzzle and name the dinosaurs.
node3:Product from Amazon platform with title and content: Title: Imaginext DC Super Friends Superman Playset. Content: The Imaginext Super Friends Superman Playset is modeled after the new fortress of solitude. It features a disk activation that will open the armory and reveal Superman's suit and cape, he will need this to fight General Zod who is coming to steal the ""codex key"" which holds an important secret. They are able to battle in the front section where the figures will fly at each other when you clip them in then press down on one of two disks. The set also contains a projectile launcher to use against Zod as he approaches. The launcher features a ball joint base and can be positioned in multiple places on the set. Finally the set also contains two swords for superman and zod along with handcuffs and a jail to hold Zod.
node4:Product from Amazon platform with title and content: Title: Crayola Create 2 Destroy Fortress Invasion Double Destruction. Content: Kids will engage in imaginative role play while tapping into key creativity insights for incorporating challenging interactions, healthy competition with elements of customization and collectability.
node5:Product from Amazon platform with title and content: Title: Crayola My First Crayola 2-in-1 Doodle Board. Content: Crayola My First Crayola Mess-Free 2-in-1 Doodle Board will double your child's doodling fun. The water drawing surface reveals brilliant colors with the refillable water pen. Flip it over and you get the feel of finger painting on the sealed gel painting surface.
node6:Product from Amazon platform with title and content: Title: Crayola Crayon Maker with Story Studio. Content: missing
node7:Product from Amazon platform with title and content: Title: Winfun Write N Draw Learning Board. Content: Your little learner will enjoy drawing on the magnetic writing pad. The LCD screen with fun animations will bring out laughes while the 6 interactive modes will teach alphabet, numbers, drawing, spelling, quiz games and music.
node8:Product from Amazon platform with title and content: Title: VTech - Slide And Talk Smart Phone. Content: missing
node9:Product from Amazon platform with title and content: Title: ALEX Toys - Artist Studio, Clickable Finger Crayons, 248/30S. Content: Bright, easy to hold crayons are perfectly sized for young artists to grasp in their palms or place on their fingers. Stackable and durable. Non-toxic. Safe for toddlers. They are a great way to introduce art to the vey young child. Helps with small motor and coordination skills, too. Ages 2 and above.
node10:Product from Amazon platform with title and content: Title: Melissa &amp; Doug Switch and Spin Magnetic Gear Board. Content: Switch & Spin Magnetic Gear Board lets kids build their own toy. Simply choose a picture template from 10 unique designs and place it in the wooden frame. Then add the gears in the color-coded spaces to turn each picture into an amazing kid-powered machine. Or remove the templates to reveal the white magnetic surface&#x2014;perfect for an open-ended exploration of simple mechanics, or a range of counting, adding and problem-solving activities (instructions included). This sturdy, durable set includes a magnetic board with wooden frame, eight magnetic pegs, eight colorful gears, and five double-sided, color-coded design templates.
node11:Product from Amazon platform with title and content: Title: AquaDoodle - Mat - Elmo. Content: Aquadoodle brings the magic of Sesame Street to your finger tips. Now your child can play hide and seek as they find and reveal Elmo in 4 hidden locations. Just add water to the Aquadoodle pen and start to doodle. The drawings quickly dry and disappear leaving a clear surface to be doodled on again. Aquadoodle is safe and mess free, letting your child&#x2019;s creativity soar with zero clean up. Bring the magic of Sesame Street to life with the all-new Hide and Seek Elmo Mat from Aquadoodle.",products,nc
"Classify the product represented by node12 using its subgraph data (text attributes and connections) as follows.

node0: Colorful math-themed border trim for classroom decoration, ideal for bulletin boards and walls.  
node1: Critical thinking questions poster, durable 12x18"", made in USA, exclusive design.  
node2: Desktop references for grades 3-5 with math/language arts facts, name space, 36 per pack.  
node3: Math poster explaining integer operations, 12x18"", curriculum-aligned, USA-made.  
node4: Punctuation rules classroom poster using humorous examples, durable, made in USA.  
node5: Decorative charts for bulletin boards featuring book-themed encouragement for students.  
node6: Science concepts bulletin board with illustrations and labels, aids vocabulary and ESL learning.  
node7: Motivational poster encouraging math/science study, 12x18"" USA-made exclusive.  
node8: Artistic Tree of Life poster, 24x36"", stylish and affordable decoration.  
node9: Reading strategies posters with activities to improve comprehension and vocabulary.  
node10: Order of operations math poster, 12x18"", curriculum-aligned, USA-made exclusive.  
node11: Poster featuring famous writers, 24x36 inches.  
node12: Poster listing 151 commonly misspelled words for educational use.  
node13: Light filters with magnetic panels to reduce classroom glare, two color options.  
node14: Life science posters on cells and photosynthesis with activities for classroom use.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node1, node3>,<node1, node4>,<node1, node5>,<node1, node6>,<node4, node7>,<node4, node9>,<node4, node10>,<node4, node11>,<node4, node12>,<node4, node13>,<node7, node8>,<node7, node14>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Home & Kitchen,"

node0: Colorful math-themed border trim for classroom decoration, ideal for bulletin boards and walls.  
node1: Critical thinking questions poster, durable 12x18"", made in USA, exclusive design.  
node2: Desktop references for grades 3-5 with math/language arts facts, name space, 36 per pack.  
node3: Math poster explaining integer operations, 12x18"", curriculum-aligned, USA-made.  
node4: Punctuation rules classroom poster using humorous examples, durable, made in USA.  
node5: Decorative charts for bulletin boards featuring book-themed encouragement for students.  
node6: Science concepts bulletin board with illustrations and labels, aids vocabulary and ESL learning.  
node7: Motivational poster encouraging math/science study, 12x18"" USA-made exclusive.  
node8: Artistic Tree of Life poster, 24x36"", stylish and affordable decoration.  
node9: Reading strategies posters with activities to improve comprehension and vocabulary.  
node10: Order of operations math poster, 12x18"", curriculum-aligned, USA-made exclusive.  
node11: Poster featuring famous writers, 24x36 inches.  
node12: Poster listing 151 commonly misspelled words for educational use.  
node13: Light filters with magnetic panels to reduce classroom glare, two color options.  
node14: Life science posters on cells and photosynthesis with activities for classroom use.","node0:Product from Amazon platform with title and content: Title: Teacher Created Resources Math Straight Border Trim, Multi Color (4681). Content: Use this colorful border trim to liven up your classroom! Create fresh looks for bulletin boards, windows, walls, and class projects. Layer them for extra impact. Or mix and match them with coordinating products (stickers, notepads, awards, etc.)
node1:Product from Amazon platform with title and content: Title: Questions: Building the Foundation for Critical Thinking - Classroom Poster. Content: Questions: Building the Foundation for Critical Thinking - Classroom Poster 12"" x 18"" Poster on High Quality heavy 80lb satin cover paper - durable and can stand up to all kinds of abuse and it won't pucker and wrinkle like others do. Proudly Made in the U.S.A. PosterEnvy EXCLUSIVE! That means you won't find it anywhere else in the world! Proudly Made in the U.S.A.
node2:Product from Amazon platform with title and content: Title: Desk Toppers&reg; Reference Name Plates: Grades 3-5 (Zaner-Bloser). Content: Provide students with a handy, desktop reference of critical math and language arts facts. Bold, uncluttered design ensures easy, at-a-glance use. Writing space for child's name allows printing or handwriting practice. Three design formats, each with customized content for specific grade levels. 36 per pack, 18"" x 3 3/4"" each..Ideal for teaching: 3rd Grade to 5th Grade (Ages 10 to 12)
node3:Product from Amazon platform with title and content: Title: missing. Content: Adding & Subtracting Positive & Negative Integers - Classroom Math Poster 12 inches x 18 inches - Perfect for Classrooms - Printed on High Quality Paper - Fits the National Education Curriculum Frameworks for Mathematics! PosterEnvy EXCLUSIVE! Fits the National Education Curriculum Frameworks for Mathematics!
node4:Product from Amazon platform with title and content: Title: missing. Content: Let's Eat Grandpa! Punctuation Rocks! - Classroom Poster 12"" x 18"" Classroom Poster Printed on High Quality Paper Designed by Teachers to Fit the National Curriculum Frameworks for Language Arts Proudly made in the U.S.A.
node5:Product from Amazon platform with title and content: Title: Teacher Created Resources Book Lovers Bulletin Board Display Set from Mary Engelbreit (4439). Content: Decorate classroom walls and bulletin boards with these encouraging charts that students can't help but read.
node6:Product from Amazon platform with title and content: Title: Creative Teaching Press Science Power Practice Mini-Bulletin Board. Content: Use the detailed illustrations and labels in this mini bulletin board to teach a variety of science concepts, reinforce skills, and enhance vocabulary development. Partial sets shown. Perfect for ESL/ELL!
node7:Product from Amazon platform with title and content: Title: missing. Content: ""I Want You to Study Science & Math"" Classroom Motivational Poster 12"" x 18"" PosterEnvy Exclusive! Proudly Made in the U.S.A.
node8:Product from Amazon platform with title and content: Title: The Tree of Life Poster Poster Print, 24x36. Content: Decorate your home or office with high quality posters. The Tree of Life Poster is that perfect piece that matches your style, interests, and budget.
node9:Product from Amazon platform with title and content: Title: Mcdonald Publishing Reading Strategies Teaching Poster Set. Content: MC-P162 Use these posters to teach your students key strategies they can use before, during, and after reading in order to improve their comprehension and uncover the meaning of unknown words. Package includes 4 posters, 4 reproducible activity sheets, and a teacher's guide Features: -Product Type: Posters.-Country of Manufacture: United States.Dimensions: -Overall Product Weight: 0.54.
node10:Product from Amazon platform with title and content: Title: Remember Order of Operations - Classroom Math Poster. Content: Remember Order of Operations - Classroom Math Poster 12 inches x 18 inches - Perfect for Classrooms - Printed on High Quality Paper PosterEnvy EXCLUSIVE! Fits the National Educational Curriculum Framework Standards for Math!
node11:Product from Amazon platform with title and content: Title: (24x36) Famous Writers Poster. Content: (24x36) Famous Writers Poster
node12:Product from Amazon platform with title and content: Title: (13x19) Top 151 Commonly Misspelled Words Educational Poster. Content: (13x19) Top 151 Commonly Misspelled Words Educational Poster
node13:Product from Amazon platform with title and content: Title: Educational Insights Classroom Light Filters Whisper Wht St/4. Content: Fluorescent lights are a staple in classrooms, but their harsh glare and flickering light can cause eyestrain, headaches, and anxiety in students. Cover your classroom fluorescent lights with these fabric panels that fit over standard ceiling fixtures with sturdy, sewn-in magnets. Each set includes four 2&#x2019; x 4&#x2019; heat-resistant panels in either Tranquil Blue or Whisper White. For use with fluorescent lights only.
node14:Product from Amazon platform with title and content: Title: Mcdonald Publishing Mc-p077 Life Science Teaching Poster Set. Content: Here are clear, detailed illustrations of four important life science concepts: animal cells, plant cells, plants and photosynthesis, and the characteristics of living things. Package includes 4 posters, 4 reproducible activity sheets, and a teacher's gui",products,nc
"Classify the product represented by node8 using its subgraph data (text attributes and connections) as follows.

node0: Fluval U3 underwater filter cartridge with dual filtration sides: polyester for debris and carbon for chemical cleanup, paired with foam pad.  
node1: Fluval C4 Power Filter: content unavailable.  
node2: API Filstar XP filter pads with graduated holes for ultra-fine filtration, designed for improved canister media.  
node3: Fluval BioMax bio rings foster beneficial bacteria, reduce ammonia/nitrates, fits U-series freshwater/marine filters.  
node4: 12-pack Fluval U2 Poly/Carbon cartridges for two-stage filtration, suits freshwater, marine, or reptile U2 systems.  
node5: Carib Sea Crushed Coral contains aragonite for pH buffering, ideal for undergravel systems, 25x stronger than rivals.  
node6: Marineland Magnum 250-GPH canister filter with dual filtration; includes manuals.  
node7: Aqueon 24"" LED aquarium light offers energy efficiency and longevity over traditional T8 bulbs.  
node8: AquaClear 110/50/402 impeller shaft (1x2x4"") for power filter/pump maintenance.  
node9: EHEIM Substrat Pro sintered glass media enhances bacterial growth and reduces maintenance via open structure.  
node10: Penn Plax Cascade 400 internal filter provides 3-stage filtration, adjustable flow, and includes sponge/carbon cartridges.  
node11: SunSun JUP-23 UV sterilizer kills algae/microorganisms, submersible with built-in pump for freshwater/saltwater.  
node12: 3-pack Marineland Magnum canister filter gaskets for replacement use.  
node13: TetraColor Cichlid Pellets: content unavailable.  
node14: AquaClear Powerhead 30 circulates/aerates up to 30 gallons, includes adjustable flow, suction cups, and safety features.  
node15: AquaClear 110 activated carbon (9.2 oz) removes odors/discoloration in 60-110 gallon tanks.  
node16: AquaClear 30 power filter: content unavailable.  
node17: Fluval 04/05 series output nozzle prevents tubing kinks, ensures proper filter function.  
node18: Marina S10 slim power filter with Ceramitek cartridges, quiet operation, and adjustable flow for freshwater/saltwater.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node3>,<node0, node4>,<node1, node5>,<node1, node6>,<node1, node7>,<node1, node8>,<node1, node9>,<node1, node10>,<node5, node11>,<node6, node8>,<node6, node12>,<node6, node13>,<node8, node14>,<node8, node15>,<node8, node16>,<node8, node17>,<node10, node18>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Pet Supplies,"

node0: Fluval U3 underwater filter cartridge with dual filtration sides: polyester for debris and carbon for chemical cleanup, paired with foam pad.  
node1: Fluval C4 Power Filter: content unavailable.  
node2: API Filstar XP filter pads with graduated holes for ultra-fine filtration, designed for improved canister media.  
node3: Fluval BioMax bio rings foster beneficial bacteria, reduce ammonia/nitrates, fits U-series freshwater/marine filters.  
node4: 12-pack Fluval U2 Poly/Carbon cartridges for two-stage filtration, suits freshwater, marine, or reptile U2 systems.  
node5: Carib Sea Crushed Coral contains aragonite for pH buffering, ideal for undergravel systems, 25x stronger than rivals.  
node6: Marineland Magnum 250-GPH canister filter with dual filtration; includes manuals.  
node7: Aqueon 24"" LED aquarium light offers energy efficiency and longevity over traditional T8 bulbs.  
node8: AquaClear 110/50/402 impeller shaft (1x2x4"") for power filter/pump maintenance.  
node9: EHEIM Substrat Pro sintered glass media enhances bacterial growth and reduces maintenance via open structure.  
node10: Penn Plax Cascade 400 internal filter provides 3-stage filtration, adjustable flow, and includes sponge/carbon cartridges.  
node11: SunSun JUP-23 UV sterilizer kills algae/microorganisms, submersible with built-in pump for freshwater/saltwater.  
node12: 3-pack Marineland Magnum canister filter gaskets for replacement use.  
node13: TetraColor Cichlid Pellets: content unavailable.  
node14: AquaClear Powerhead 30 circulates/aerates up to 30 gallons, includes adjustable flow, suction cups, and safety features.  
node15: AquaClear 110 activated carbon (9.2 oz) removes odors/discoloration in 60-110 gallon tanks.  
node16: AquaClear 30 power filter: content unavailable.  
node17: Fluval 04/05 series output nozzle prevents tubing kinks, ensures proper filter function.  
node18: Marina S10 slim power filter with Ceramitek cartridges, quiet operation, and adjustable flow for freshwater/saltwater.","node0:Product from Amazon platform with title and content: Title: Fluval U3 Underwater Filter Poly/Carbon. Content: Fluval Poly/Carbon Cartridges features two sides for effective chemical filtration, the crucial second stage in the filtration process. The polyester filter pad side filters out fine debris and contaminants. The carbon side filters out harmful liquid substances, colorants and odors. The Fluval Poly/Carbon Cartridge works in part with the Fluval Filter Foam Pad to help keep your aquarium healthy and clean.
node1:Product from Amazon platform with title and content: Title: Fluval C4 Power Filter. Content: missing
node2:Product from Amazon platform with title and content: Title: API Filstar XP Filter Super Micro-Filtration Pads, 2-Count. Content: New and improved canister filter media designed to fit the FilStar XP. Graduated hole sizes allows for increased cleaning efficacy. For ultra-fine filtration and polishing.
node3:Product from Amazon platform with title and content: Title: Fluval U Underwater Filter BioMax. Content: Fluval BioMax provides an optimal environment for beneficial bacteria growth. The bio rings have a complex pore system creating an optimal environment where beneficial bacteria can thrive. It also reduces and controls ammonia and nitrate. Fluval BioMax is for freshwater and marine environments, and fits the U series filter models: U2,U3 and U4.
node4:Product from Amazon platform with title and content: Title: Hagen 12-Pack Fluval U2 Poly/Carbon Cartridge Aquarium Water Filter. Content: Fluval Poly/Carbon Cartridges features two sides for effective chemical filtration, the crucial second stage in the filtration process. The polyester filter pad side filters out fine debris and contaminants. The Carbon side filters out harmful liquid substances, colorants and odors. For freshwater, marine or reptile environments. For U series filter model: U2.
node5:Product from Amazon platform with title and content: Title: Carib Sea ACS00120 Crushed Coral for Aquarium, 15-Pound. Content: The only crushed coral with aragonite, which provides up to 25 times the buffering power of other crushed corals. Dolomite or oyster shell. Use in under gravel filtered systems or reverse flow beds. A solid and economical performer.
node6:Product from Amazon platform with title and content: Title: Marineland Hang on Tank (HOT) Magnum Filter, 250-GPH. Content: The only hang-on-the-tank canister filter that's powerful enough to do the work of two filtration systems.Link to User Manual:http://www.marineland.com/Products/aquarium-filters-and-protein-skimmers/~/media/E4EAFD39F9E24A709F6193657C87A12C.ashxLink to Quick Set up Guide:http://www.marineland.com/Products/aquarium-filters-and-protein-skimmers/~/media/9F0033CC90DB4A788E4DDDE5FF36D284.ashx
node7:Product from Amazon platform with title and content: Title: Aqueon LED Aquarium Light Fixture, 24-Inch. Content: The Aqueon Modular LED Aquarium Light last longer and is more energy efficient than standard T8 Fluorescent lighting.
node8:Product from Amazon platform with title and content: Title: AquaClear Impeller Shaft for Power Filter and Powerhead Pumps. Content: This impeller shaft is used for AquaClear 110 power filter. Also used for AquaClear powerhead pump models 50, 402. Measures 1-inch length by 2-inch width by 4-inch height.
node9:Product from Amazon platform with title and content: Title: EHEIM Substrat Pro Biological Filter Media (Sintered Pearl-Shaped Glass) 1L. Content: EHEIM Substrat Pro Biological filter media is specially shaped to create a better water throughflow to provide longer intervals between required maintenance. Its open structure for enhanced water penetration provides better bacterial colonization.
node10:Product from Amazon platform with title and content: Title: Penn Plax Cascade 400 Internal Filter for Aquariums. Content: Cascade Internal Filters are designed to provide better filtration and aeration above and below the surface. Fully submersible, these versatile filters provide physical, chemical and biological filtration. Each filter has an adjustable & directional water flow output and a spray bar option that will distribute water evenly to aid aeration. The round directional flow spout has a connector where you can connect to your flexible tubing to drive water fountains or other accessories. Mounts quicky using the included suction cups and can be placed horizonally making it easy to place and hide in your tank. Great for aquariums and terrariums, these filters give you crystal clear water in your fresh or salt water environments. One bio-sponge and one activated carbon cartridge included. Unit runs on 110V and is UL Approved.
node11:Product from Amazon platform with title and content: Title: SunSun JUP-23 13W UV Sterilizer Submersible Pump. Content: This amazing SunSun JUP-23 submersible UV sterilizer allows simple and effective UV control of harmful microorganisms & free-floating algae. Compact and versatile units are ready to install - no additional tubing or circulation pump required. Built-in pump directs waterborne organisms past the UV-C lamp for clean, clear aquarium water. Install in vertical or horizontal position right in your aquarium or sump. For fresh, saltwater aquariums or garden ponds. Includes UV unit with built-in pump and UV ballast, UV-C lamp and suction cup mounting brackets.
node12:Product from Amazon platform with title and content: Title: Marineland (Aquaria) AMLPR1414 3-Pack Aquarium Rubber Gasket Replacement Set for Magnum Canister Filter. Content: Marineland rubber gasket is a replacement part for Marineland power filters. Fits for Magnum canister filter. Features with high quality components. It will only use when current gasket is succumbs to wear and tear. Includes 3 gaskets per pack.
node13:Product from Amazon platform with title and content: Title: Tetra 77269 TetraColor 2-in-1 Large Cichlid Pellets, 2.64-Pound. Content: missing
node14:Product from Amazon platform with title and content: Title: AquaClear Powerhead 30 - 110 V, 175 Gallons per Hour. Content: The AquaClear Powerhead 30 is a multifunctional pump for aquariums up to 30 gallons that delivers outstanding performance in a variety of applications. It can efficiently drive under-gravel filters, circulate and aerate aquarium water, and attach to filtration accessories such as the AquaClear Quick Filter to support crystal clear water conditions. The Powerhead 30 can be used to raise oxygen levels, which is important when there are increases in water temperature or fish population, as well as during the treatment of diseases. It can also be connected to drive protein skimmers, which are essential devices for most marine aquariums. The Powerhead is indispensable in smaller reef aquariums where it can be easily hidden and still provide highly beneficial currents. Freshwater aquariums also benefit from additional currents in many applications. In addition to being the ultimate submersible pump in its category, the Powerhead also includes the following design, safety and utility innovations: a compact, energy-efficient, and completely submersible motor unit that is insulated in epoxy resin to protect against harsh fresh and salt water environments; adjustable flow control; convenient suction cups for easy installation; and an output hose adapter that allows easy attachments to protein skimmers, spray bars, and other accessories. Using a Powerhead in combination with an AquaClear Quick Filter provides additional safe mechanical filtration for cleaner water conditions and the protection of baby fish.
node15:Product from Amazon platform with title and content: Title: Hagen 6-Pack AquaClear 9-Ounce Activated Carbon Water Filter Insert for Aquarium. Content: AquaClear 110 Activated Carbon Filter Insert improves water clarity for fresh and saltwater aquariums. Exclusively designed for the AquaClear 110 Power Filter, it provides superior adsorption qualities which eliminate odors, discoloration and impurities. Net Weight: 9.2 OZ(260g)AquaClear 110 Activated Carbon Filter Insert for use in 60-110 US Gallon (227-416L)aquariums.
node16:Product from Amazon platform with title and content: Title: AquaClear 30 Power Filter - 110 V, UL Listed (Includes AquaClear 30 Carbon, AquaClear 30 Foam &amp; AquaClear 30 BioMax). Content: missing
node17:Product from Amazon platform with title and content: Title: Hagen A20001 Fluval Output Nozzle, 04 and 05 Series. Content: The Fluval Output Nozzle is a replacement part for the Fluval 04/05 Series with the non-kink tubing. The output nozzle helps ensure that your filter works properly and it is important to ensure maximum filtration.
node18:Product from Amazon platform with title and content: Title: Marina S10 Power Filter. Content: The Slim S10 Power Filter's unique design is compact and slim, thus reducing space behind your aquarium. The filter comes equipped with an adjustable flow control so you can control the water flow level in your tank. The Slim S10 Power Filter's motor is submerged in the tank for a quiet operation and an easy start-up since no priming is required. Installation and maintenance are quick, easy and convenient and the Slim S10 Power Filter includes 2 filter cartridges: 1 Bio-Carb and 1 Bio-Clear. Both cartridges contain Ceramitek, which is engineered to optimize biological filtration, for a healthy aquarium.",products,nc
"Classify the product represented by node8 using its subgraph data (text attributes and connections) as follows.

node0: Automated power supply tester with LCD, tests all connectors and voltages, alarms for faults.  
node1: 12-inch ATX 24-pin power extension cable connecting motherboard and power supply.  
node2: PCI test card with LCDs for BIOS code decoding and power supply status monitoring.  
node3: Compact LCD power supply tester with voltage monitoring and alarms for ATX faults.  
node4: 4-in-1 cable tester for network, phone, USB, and BNC cables, detects faults like shorts and opens.  
node5: Bi-directional IDE-SATA converter supporting 3.5/5.25-inch drives with LED indicators and no drivers.  
node6: Thermaltake power supply tester for diagnosing unit stability and voltage issues.  
node7: 18-inch IDE ribbon cable supporting UDMA/ATA for two internal hard drives with lifetime warranty.  
node8: Molex to dual SATA power adapter for connecting SATA drives to older power supplies.  
node9: Adapter converting 4-pin ATX power connector to 8-pin EPS for CPU compatibility.  
node10: Right-angle SATA cable for compact PC setups, enhancing airflow and space management.  
node11: Bi-directional SATA-IDE adapter enabling drive connection between legacy and modern systems.  
node12: ASUS AM3+ motherboard with SATA 6Gb/s, USB 3.0, military-grade durability for AMD systems.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node3>,<node0, node4>,<node0, node5>,<node0, node6>,<node0, node7>,<node5, node8>,<node5, node9>,<node5, node10>,<node5, node11>,<node5, node12>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Electronics,"

node0: Automated power supply tester with LCD, tests all connectors and voltages, alarms for faults.  
node1: 12-inch ATX 24-pin power extension cable connecting motherboard and power supply.  
node2: PCI test card with LCDs for BIOS code decoding and power supply status monitoring.  
node3: Compact LCD power supply tester with voltage monitoring and alarms for ATX faults.  
node4: 4-in-1 cable tester for network, phone, USB, and BNC cables, detects faults like shorts and opens.  
node5: Bi-directional IDE-SATA converter supporting 3.5/5.25-inch drives with LED indicators and no drivers.  
node6: Thermaltake power supply tester for diagnosing unit stability and voltage issues.  
node7: 18-inch IDE ribbon cable supporting UDMA/ATA for two internal hard drives with lifetime warranty.  
node8: Molex to dual SATA power adapter for connecting SATA drives to older power supplies.  
node9: Adapter converting 4-pin ATX power connector to 8-pin EPS for CPU compatibility.  
node10: Right-angle SATA cable for compact PC setups, enhancing airflow and space management.  
node11: Bi-directional SATA-IDE adapter enabling drive connection between legacy and modern systems.  
node12: ASUS AM3+ motherboard with SATA 6Gb/s, USB 3.0, military-grade durability for AMD systems.","node0:Product from Amazon platform with title and content: Title: Thermaltake Dr. Power II Automated Power Supply Tester Oversized LCD for All Power Supplies - AC0015. Content: Dr. Power II is a fully automated diagnostic tool that allows full testing of the power supply and the output voltages of all of the rails and connectors to assist with diagnosis and troubleshooting of stability or non-posting issues due to faulty or unstable power supply. Support all ATX power supplies and all applicable connectors (Main 24Pin, Aux 4/8pin, Molex, 6/8Pin PCI-E, SATA) to ensure the whole power supply is running within specification. Large OCD readout shows all voltages actively within 1/10th of a volt and allows for easy diagnosis of trouble connectors or power supply units. Alarm system will notify user of abnormal behavior by the power supply to assist with easier troubleshooting of stability problems.
node1:Product from Amazon platform with title and content: Title: KOZMICC 24 Pin ATX Power Extension Cable (Power Supply to Motherboard) 12 inch. Content: 12 Inch ATX 24 Pin Motherboard Power Cable Extension. Molex-24 Pin Male to Female Power Extension.
node2:Product from Amazon platform with title and content: Title: Elston PCI LCD Diagnostic Test Card Ver 6.0. Content: Troubleshoot desktop motherboards that include at least one PCI slot. With two LCD displays for full text feedback, this test card decodes BIOS codes by displaying diagnostic information in plain text. You won&#039;t have to look a code up in a decoder booklet! The card also indicates the power supply status via on-board voltage LEDs.
node3:Product from Amazon platform with title and content: Title: Apevia LCD ATX Power Supply Tester tests all power connectors and shows all power voltages on +12V1/+5V/+3.3V/5VSB/+12V2/-12V and P.G. with alarm warning on LCD screen.. Content: Apevia's LCD Power Supply Tester allows fast and easy test for your power supply. Pocket size with a LCD screen to show all the ATX power voltages on +12V1/+5V/+3.3V/5VSB/+12V2/-12V and P.G. With alarm warning any abnormal voltage, this power supply tester is one of the best in the market. Just connect the 20-pin or 24-pin main connector from the ATX power supply to this LCD power supply tester and plug in P4/P6/P8 to show the voltage on the screen. Made of quality aluminum material, this power supply tester helps you easily diagnosis the problem source and prevent possible damage to your system. It's a small investment for a ""must have"" tool for pc builders. -Easy to use ATX power supply tester with LCD screen -Check eact ATX power supply connector -Accurate voltage indicating +/-0.1V or +12V1/+5V/+3.3V/5VSB/12V2/-12V -P.G. value display -Lower and higher P.G. values alarm -Low voltage alarm -Over voltage alarm -No voltage alarm
node4:Product from Amazon platform with title and content: Title: 4-in-1 Remote RJ11 RJ45 USB BNC LAN Network Phone Cable Tester Meter. Content: Specifications:Cable Tested:UTP and STP LAN cables, terminated in RJ-45 male connectors (EIA/TIA 568); RJ-11 cables with male connectors, 2 to 6 conductors installed;USB cables with Type A flat plug on one end and type B square Plug on other end;BNC cables with male connectorsFaults Indicated: No Connections, Shorts, Opens and CrossoverLow Battery Indicator: LED lights to indicate low batteryPower: 1 x 9 V 6F22 DC Alkaline Battery (Battery Not Included)Color: GreyItem dimensions: Appox. 162 x 85 x 25mm (6.38 x 3.35 x 0.98 inch)Item weight: 164g (Battery excluded)Package dimensions: 225 x 110 x 43 mmPackage weight: 215gItem Includes:1 x 4-in-1 Network Cable Tester1 x Far End Remote Jack (USB RJ45 RJ11) (Attached to the main unit)1 x BNC Remote Jack1 x Carrying bag1 x Instruction Manual
node5:Product from Amazon platform with title and content: Title: Syba SD-ADA50016 IDE/SATA Converter Bi-directional IDE to SATA. Content: Unique bi-directional SATA &#x2013; IDE converter. Supports 3.5-inch SATA and IDE (ATA) hard drive. Supports 5.25-inch SATA and IDE (ATA) optical drives. Power-On and HDD-Activity LED indicators. Ultra low power consumption. Connectors: one IDE (ATA) connector, one SATA host connector (Yellow), one SATA device connector (Black) and one 4-pin FDD power connector. Two independent Ultra ATA channels with 128/256 bytes buffer per channel. Driverless. No driver is needed. Serial ATA Interface: Complies with SATA 1.0a specification. Supports SATA Generation 1 with transfer rate up to 1.5Gbps (150MB/s). Supports Spread Spectrum in receiver. Supports SATA power saving mode: Partial and Slumber. IDE (ATA) Interface: Complies with ATA Specification. Complies with Ultra ATA 133 with transfer rate up to 133MB/s. Supports PIO mode o, 1, 2, 3, 4, 5, 6, MDMA mode 0, 1, 2 and Ultra DMA mode 0, 1, 2, 3, 4, 5, 6. Supports Master/Slave/Cable Select mode by configuration switches
node6:Product from Amazon platform with title and content: Title: A2358 Dr. Power Supply Tester. Content: Thermaltake A2358 Dr. Power Supply Tester A2358 Testing Equipment
node7:Product from Amazon platform with title and content: Title: Tripp Lite P906-18I Internal Dual Ultra 33/66/100 UATA/UDMA EIDE 2-Drive Ribbon Cable (18 Inches). Content: Tripp Lite enhanced IDE (EIDE) ribbon cable connects up to two internal IDE hard drives to a controller card. This internal dual Ultra DMA/ATA ribbon supports UDMA/33, ATA/66 and ATA/100. This 18-inch cable is constructed with 80 conductor ribbon and contains three 40-pin socket connectors (one for the controller card and the other two for drives). Tripp Lite warrants this product to be free from defects in materials and workmanship for life.
node8:Product from Amazon platform with title and content: Title: Connectland CL-CAB40021 Molex to SATA Power Cable. Content: Molex 4pin to 2x 15pin SATA power cable. The length is 5.5 inch. Provide power to SATA HDD via PCI power supply
node9:Product from Amazon platform with title and content: Title: HDE EPS 8-Pin Power to ATX 4-Pin Cable. Content: So you have an ATX power supply with the usual 4-pin connector for those extra 12 volts to the CPU, right? And you want to upgrade or you just bought a new board, but you can't plug that 4-pin connector into an 8-pin 12-volt socket. Then you need to adapt!
node10:Product from Amazon platform with title and content: Title: 18 Inch SATA 7 Pin Serial ATA Hard Drive Cable With 1 Right Angle Connector - Red. Content: If you're one of the growing numbers of PC users with a mini or micro form factor case, you know that you don't have a lot of room to spare. These right-angle Serial ATA cables guarantee you'll be able to plug in your high-performance Serial ATA 150 hard drives, no matter how tight your space is. With their thin, narrow construction, these flexible cables improve airflow and reduce clutter in your case, helping to keep your case clean and cool.
node11:Product from Amazon platform with title and content: Title: StarTech.com Bi-Directional SATA IDE Adapter Converter (PATA2SATA3). Content: The PATA2SATA3 is a bi-directional SATA IDE adapter/converter that lets you connect a Serial ATA drive to a legacy IDE port, or an IDE drive to a SATA motherboard port. A cost-effective solution for upgrading existing IDE systems to support SATA hard drives or optical drives, the SATA/IDE adapter eliminates the expense of having to purchase a controller card while saving the expansion slot that would be required for card installation. In addition to SATA hard drive installation, the adapter can be reversed in order to connect older IDE drives to a newer SATA-enabled motherboard, making it easy to retrieve old files from a previous system.
node12:Product from Amazon platform with title and content: Title: ASUS SABERTOOTH 990FX R2.0 AM3+ AMD 990FX SATA 6Gb/s USB 3.0 ATX AMD Motherboard. Content: This board supports the AMD Socket AM3+ for AMD FX Series CPU up to 8 cores and is also compatible with previous generation AMD Socket AM3 processors. The TUF Series delivers preeminent stability, all-around compatibility, and extreme durability, providing the most reliable computing experience. The SABERTOOTH 990FX R2.0 endures a Promised Reliability Strict Test Program, to ensure safe and smooth operation even in the most challenging conditions. Exclusive TUF features make this motherboard unique and innovative. ASUS implements cutting-edge thermal solutions CeraM!X and TUF Thermal Radar. CeraM!X is a premium ceramic coating technology that provides a 50% larger surface for heat dissipation. TUF Thermal Radar is a unique solution that embeds 10 hardware sensors on the motherboard to provide real-time thermal detection with &#xA0;detailed information for every critical component. ASUS&#x2019; new DIGI+ Power Control technology includes multiple digital voltage controllers, allowing ultra-precise modulation and tuning for both the CPU and DRAM. ASUS E.S.P (Efficient Switching Power) not only provides more switching power for the motherboard, but also offers higher efficiency with lower power loss and less waste heat generated. MemOK! ensures memory boot compatibility, and ESD Guards provides unique protection of motherboard components from unexpected electrostatic discharges. This motherboard also comes with Quad-GPU SLI and Quad-GPU CrossFireX Support, providing flexible multi-GPU solutions, allowing the user to experience a brand new gaming style never experienced before. For ultimate durability, the SABERTOOTH 990FX R2.0 uses military standard TUF capacitors, chokes and MOSFETS to ensure superior life-span even under the most demanding conditions.",products,nc
"Classify the product represented by node14 using its subgraph data (text attributes and connections) as follows.

node0: Desert cotton scarf, 42""x42"", protects face from sand; traditional Arab keffiyeh, used by soldiers, versatile for neck/warmth.  
node1: Black skull balaclava, all-season, helmet-compatible, seamless comfort, eye-catching design.  
node2: Motorcycle throttle control reduces hand fatigue, fits most grips, prevents ""creep,"" available in two sizes.  
node3: Neoprene reversible skull full-face mask for motorcycle/bike use, one-size package.  
node4: Left-handed tactical leg holster for medium-large pistols, dual thumb-breaks, adjustable strap, made in USA.  
node5: Ergonomic motorcycle grips with vibration-dampening, airflow notches, knurled chrome accents.  
node6: DOT-approved German-style half helmet with goggles, X-large, requires head measurement for fit.  
node7: Skull-patterned bandana, single-unit, no hat included.  
node8: Deluxe black balaclava with storm gear front, one-size, non-irritating seams, fits helmets.  
node9: Universal motorcycle throttle lock, aluminum alloy, one-hand operation, adjustable tension.  
node10: Leather motorcycle gloves, premium material, durable, for riding comfort on bikes/ATVs.  
node11: Motorcycle luck bell/key ring, decorative angel-themed charm for riders.  
node12: DOT-certified helmet with vents, shield kit, scratch-resistant bag, 3.97 lbs, medium size.  
node13: Two white helmet decals, weather-resistant vinyl, easy-install stickers for motorcycles.  
node14: Raider half helmet with forehead vents, optional neck curtain, ideal for motorcycle/scooter use.  
node15: Matte black dual-visor helmet, removable sun visor, retractable smoke shield, Outlaw brand.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node3>,<node1, node4>,<node1, node5>,<node1, node6>,<node1, node7>,<node1, node8>,<node2, node6>,<node2, node9>,<node2, node10>,<node2, node11>,<node6, node12>,<node6, node13>,<node6, node14>,<node6, node15>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Automotive,"

node0: Desert cotton scarf, 42""x42"", protects face from sand; traditional Arab keffiyeh, used by soldiers, versatile for neck/warmth.  
node1: Black skull balaclava, all-season, helmet-compatible, seamless comfort, eye-catching design.  
node2: Motorcycle throttle control reduces hand fatigue, fits most grips, prevents ""creep,"" available in two sizes.  
node3: Neoprene reversible skull full-face mask for motorcycle/bike use, one-size package.  
node4: Left-handed tactical leg holster for medium-large pistols, dual thumb-breaks, adjustable strap, made in USA.  
node5: Ergonomic motorcycle grips with vibration-dampening, airflow notches, knurled chrome accents.  
node6: DOT-approved German-style half helmet with goggles, X-large, requires head measurement for fit.  
node7: Skull-patterned bandana, single-unit, no hat included.  
node8: Deluxe black balaclava with storm gear front, one-size, non-irritating seams, fits helmets.  
node9: Universal motorcycle throttle lock, aluminum alloy, one-hand operation, adjustable tension.  
node10: Leather motorcycle gloves, premium material, durable, for riding comfort on bikes/ATVs.  
node11: Motorcycle luck bell/key ring, decorative angel-themed charm for riders.  
node12: DOT-certified helmet with vents, shield kit, scratch-resistant bag, 3.97 lbs, medium size.  
node13: Two white helmet decals, weather-resistant vinyl, easy-install stickers for motorcycles.  
node14: Raider half helmet with forehead vents, optional neck curtain, ideal for motorcycle/scooter use.  
node15: Matte black dual-visor helmet, removable sun visor, retractable smoke shield, Outlaw brand.","node0:Product from Amazon platform with title and content: Title: Desert Sand/Yellow &amp; Black Shemagh Arab Keffiyeh Neck Scarf. Content: Yellow Sand/Black Shemagh Arab Keffiyeh Neck Scarf - 100% cotton material. Desert Sand/Yellow & Black. Size 42"" x 42"" (inches). Traditional desert Arab head dress, which evolved from turbans in ancient times. Essential for protecting the eyes, nose, mouth, ears and face from sand. Can also be used as a neck warmer or hand towel. Scarf is high quality stitch. Worn by soldiers in Iraq and Afghanistan and abroad. Retains heat and absorbs sweat in warm/hot conditions. Imported. The keffiyeh is also known as a shmagh, shemagh or yashmag, a ghutra or a hatta, and is a traditional headdress of Arab men, made of a square of cloth (""scarf""), folded and wrapped in various styles around the head. It is commonly found in arid climate areas to provide protection from direct sun exposure, as well as for occasional use in protecting the mouth and eyes from blown dust and sand. Worn and known by Palestinians.
node1:Product from Amazon platform with title and content: Title: Schampa Traditional Lightweight Skull Balaclava (Black, One Size). Content: Schampa Black Traditional Lightweight Skull Balaclava works great under any style helmet. There is a choice of skull designs. It is suitable for any season usage. It has no seam in the front for an enhanced comfort, these eye catching balaclavas are great alone or with any style helmet.
node2:Product from Amazon platform with title and content: Title: CrampBuster Motorcycle Cruise Assist - Standard/Black. Content: CrampBuster Motorcycle Cruise Assist Full throttle control with a relaxed handReduces hand fatigue and crampingComfortably fits your handEasier throttle operationEliminates throttle ""creep""Doesnt lock throttle onWide version also availableSize Information There are two diameters the ""Standard"" is 1 18"" diameter and fits most stock grips. The ""Oversize"" which is 1 38"" diameter and is designed mainly for the larger grips. Your grip needs to be larger than 1 38"" diameter or the oversize will only slip and not work. If your grip is 1 38"" or smaller you need the Standard CrampBuster.
node3:Product from Amazon platform with title and content: Title: ZPS Neoprene Skull Full Face Reversible Motorcycle bicycle Mask. Content: Package Content: 1xNeoprene Skull Full Face Reversible Motorcycle bicycle Mask
node4:Product from Amazon platform with title and content: Title: UTG Special Operations Universal Tactical Black Leg Holster (Left Handed). Content: UTG's Special Ops Leg Holster has a universal design that fits most medium to large frame pistols, with double thumb-break security system that offers full control of your weapon. Features include a deluxe non-slip holster pad, non-slip fully adjustable and removable leg strap for comfort and additional retention. This Special Ops Holster is for the left-handed shooter.Features and Specifications:Universal design for most medium to large pistolsDouble thumb-break security system for full control of your weaponDeluxe non-slip holster padFully adjustable and elastic, non-slip, and removable leg strap for comfort and retentionWeight: 0.9 poundsMaterial: Synthetic leatherAbout UTG and Leapers, Inc.Leapers, Inc., headquartered in Michigan, has been in the business of supplying shooting, hunting, and outdoor gear since 1991. By setting un-compromised high standards for all of their business operations, Leapers' goal is to provide total solutions by paying close attention to industry trends and customer feedback, with a focus on making the best-in-class niche products available for hunting, shooting, and outdoor enthusiasts.In 2009, Leapers made an important decision to start our Made-In-the-USA Manufacturing Operation. With a full commitment to serving more customers in the market with 922R compliant products, Leapers has begun making unique mounting systems under the UTG PRO brand in Michigan and will continue to be innovators in the hunting, shooting, and outdoor industries.
node5:Product from Amazon platform with title and content: Title: Kuryakyn 6235 ISO Grips. Content: Combining style and comfort, our grips are a quantum leap forward! Like the popular ISO-Pegs, these grips provide a soft, non-slip surface that dampens operating vibration. Recessed areas between the ISO-Pads permit air flow for added comfort in hot weather. The knurled chrome accent ring adds a classy detail.
node6:Product from Amazon platform with title and content: Title: Flat Matte Black German Style Motorcycle Cruiser Touring Scooter Half Helmet DOT with Pilot Goggles (Xlarge). Content: MEASURING YOUR HEAD before purchase: A small metal tape measure, or a cloth tape may be used to take your measurement. If possible, have a helper do the measuring in order to get a more accurate measurement. The circumference of the head should be measured at a point approximately one inch above the eyebrows, or at whatever point gives the largest possible measurement. Then check the SIZE CHART above for a correct custom fit.
node7:Product from Amazon platform with title and content: Title: Skull Bandana. Content: Includes: Bandana.. Not Included: Hat.
node8:Product from Amazon platform with title and content: Title: Schampa Pharaoh Deluxe Balaclava , Distinct Name: Black, Size: OSFM, Gender: Mens/Unisex, Primary Color: Black BLCLV012. Content: Distinct Name: BlackSize: OSFMGender: Mens/UnisexPrimary Color: BlackWarmSkin top with a StormGear front panelMade for the individual who likes the sheer extremesFits excellently with all helmets or can be worn aloneFlat-seamed to reduce irritationExtended back panel for added protectionOne size fits most
node9:Product from Amazon platform with title and content: Title: Go Cruise/2wheelride GCA1bk Universal Throttle Lock. Content: The new Go Cruise Aluminum is CNC'D from 6061 aluminum alloy.We keep clean design & affordable price for our customers as usual. The new tension gear design allows you quickly open/close by one hand, and easily to set tension you need.
node10:Product from Amazon platform with title and content: Title: missing. Content: These Raider Leather Motorcycle Riding Gloves offer great comfort and are perfect to wear while riding motorcycles and ATVs. They are made from premium materials that provide long lasting durability.
node11:Product from Amazon platform with title and content: Title: Guardian&reg; Never Ride Faster Than Your Angel Can Fly Motorcycle Biker Luck Riding Bell or Key Ring. Content: Show your pride and serious dedication to riding with this beautiful bell to adorn your motorcycle or trike through good times and bad. Don't forget your Bell Hanger! Rid yourself of those evil road spirits today!
node12:Product from Amazon platform with title and content: Title: missing. Content: SH-WS0015 Size: Medium Features: -Helmet.-Front brow vents allow for air circulation around head and reduce heat and moisture.-Sculpted top vents follow lines of helmet from front to rear for great look.-Screw on shield kit makes removal and replacement of shield easier for consumers.-Shipped in scratch resistant helmet bag.-UV clear coated paint.-10&quot; H x 13&quot; W x 10.2&quot; D, 3.97 lbs. Specifications: -Dot FMVSS N.218 approved. Warranty: -Manufacturer provides 90 days warranty.
node13:Product from Amazon platform with title and content: Title: 2 DOT HELMET DECALS STICKER PACK WHITE SHIPPING CYCLE. Content: Die cut from Premium Vinyl with a 7+ year exterior life. Sticker has no background. Will not fade like printed decals. Place on any smooth/clean surface. Easy to Install, Easy to remove.
node14:Product from Amazon platform with title and content: Title: missing. Content: The Raider Deluxe Half Helmet is ideal for use on your motorcycle or scooter. It features dual forehead vents that help keep you cool and comes with an optional zippered neck curtain.
node15:Product from Amazon platform with title and content: Title: Outlaw T-72 Matte Black Dual-Visor Motorcycle Half Helmet - Large. Content: Outlaw T-72 Matte Black Dual-Visor Motorcycle Half HelmetThis T-72 half helmet by Outlaw has a matte black finish. It also features a bolted removable sun visor and a drop-down, retractable, push-and-pull smoke shield.",products,nc
"Classify the product represented by node11 using its subgraph data (text attributes and connections) as follows.

node0: Derm Renewal Gel-Cream hydrates oily skin with AHAs, peptides, ceramides, improving youthfulness and even tone.  
node1: Purifying gel with 1% salicylic acid (BHA) targets acne, excess oil, tightens pores, and smooths skin with natural ingredients.  
node2: Sensitive skin lotion moisturizes, tones, and soothes; alcohol-free, fragrance-free, enhances skincare benefits.  
node3: Oxygen Puractive mist purifies, detoxifies, and soothes with plant extracts, providing a matte complexion.  
node4: Renewing cream uses AHAs (lactic acid) and peptides to soften skin, improve youthfulness without irritation.  
node5: Eye contour serum reduces wrinkles, dark circles, and puffiness using argireline, myoxinol, and matrixyl.  
node6: Organic energizing mask hydrates and oxygenates with antioxidants, revitalizing dull skin naturally.  
node7: Sensitive skin mist hydrates and tones; alcohol-free, gentle post-cleansing for soothing care.  
node8: Acne-treatment gel with AHA/BHA (glycolic, salicylic) improves oily skin and evens tone.  
node9: Anti-aging serum uses growth factors to delay visible aging, refine skin, and boost cellular repair.  
node10: Oxygen mist purifies, refreshes, and soothes, delivering a matte finish without alcohol.  
node11: Lipiad Complex nourishes dry skin with argan oil and lycopene, reducing water loss and smoothing texture.  
node12: Hydrating cream combats dryness, improves elasticity, and serves as an excellent makeup base.  
node13: 10% Vitamin C serum with peptides fights aging via antioxidants and brightens skin.  
node14: Gentle cleansing milk removes makeup and impurities while soothing the skin.  
node15: Ceramide serum nourishes, reduces irritation, and protects skin from environmental stress.  
node16: Enzymatic exfoliant removes dead skin, refines texture, and brightens with BHA and kaolin.  
node17: Algomask+ decongests, hydrates, and reduces redness via chitosan and thermo-cooling effects.  
node18: Vasco-Tonic serum reduces redness and tones sensitive skin.  
node19: Mega 10 Plus moisturizer delivers vitamins A-E and CoQ10 for anti-aging hydration.  
node20: Collagen gel revitalizes dry skin, improving moisture and youthful appearance as an under-cream treatment.  
node21: Exfoliating glow pads blend DHA and AHA/BHA for even tans, reducing sunspots and fine lines.  
node22: 20% Vitamin C serum brightens, reduces wrinkles, and evens tone with hyaluronic acid and ferulic acid.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node3>,<node0, node4>,<node0, node5>,<node0, node20>,<node1, node3>,<node1, node5>,<node1, node9>,<node1, node10>,<node1, node12>,<node1, node16>,<node2, node9>,<node2, node10>,<node2, node11>,<node2, node12>,<node2, node13>,<node3, node7>,<node3, node10>,<node3, node14>,<node3, node15>,<node4, node8>,<node4, node9>,<node4, node11>,<node4, node16>,<node5, node11>,<node5, node15>,<node5, node17>,<node5, node18>,<node5, node19>,<node6, node11>,<node7, node8>,<node8, node11>,<node9, node11>,<node11, node13>,<node11, node15>,<node11, node16>,<node11, node18>,<node11, node20>,<node14, node15>,<node15, node20>,<node16, node17>,<node18, node20>,<node19, node21>,<node19, node22>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Beauty,"

node0: Derm Renewal Gel-Cream hydrates oily skin with AHAs, peptides, ceramides, improving youthfulness and even tone.  
node1: Purifying gel with 1% salicylic acid (BHA) targets acne, excess oil, tightens pores, and smooths skin with natural ingredients.  
node2: Sensitive skin lotion moisturizes, tones, and soothes; alcohol-free, fragrance-free, enhances skincare benefits.  
node3: Oxygen Puractive mist purifies, detoxifies, and soothes with plant extracts, providing a matte complexion.  
node4: Renewing cream uses AHAs (lactic acid) and peptides to soften skin, improve youthfulness without irritation.  
node5: Eye contour serum reduces wrinkles, dark circles, and puffiness using argireline, myoxinol, and matrixyl.  
node6: Organic energizing mask hydrates and oxygenates with antioxidants, revitalizing dull skin naturally.  
node7: Sensitive skin mist hydrates and tones; alcohol-free, gentle post-cleansing for soothing care.  
node8: Acne-treatment gel with AHA/BHA (glycolic, salicylic) improves oily skin and evens tone.  
node9: Anti-aging serum uses growth factors to delay visible aging, refine skin, and boost cellular repair.  
node10: Oxygen mist purifies, refreshes, and soothes, delivering a matte finish without alcohol.  
node11: Lipiad Complex nourishes dry skin with argan oil and lycopene, reducing water loss and smoothing texture.  
node12: Hydrating cream combats dryness, improves elasticity, and serves as an excellent makeup base.  
node13: 10% Vitamin C serum with peptides fights aging via antioxidants and brightens skin.  
node14: Gentle cleansing milk removes makeup and impurities while soothing the skin.  
node15: Ceramide serum nourishes, reduces irritation, and protects skin from environmental stress.  
node16: Enzymatic exfoliant removes dead skin, refines texture, and brightens with BHA and kaolin.  
node17: Algomask+ decongests, hydrates, and reduces redness via chitosan and thermo-cooling effects.  
node18: Vasco-Tonic serum reduces redness and tones sensitive skin.  
node19: Mega 10 Plus moisturizer delivers vitamins A-E and CoQ10 for anti-aging hydration.  
node20: Collagen gel revitalizes dry skin, improving moisture and youthful appearance as an under-cream treatment.  
node21: Exfoliating glow pads blend DHA and AHA/BHA for even tans, reducing sunspots and fine lines.  
node22: 20% Vitamin C serum brightens, reduces wrinkles, and evens tone with hyaluronic acid and ferulic acid.","node0:Product from Amazon platform with title and content: Title: GM Collin Derm Renewal Gel-Cream 1.7 oz.. Content: A skin renewing formula with AHAs (glycolic and salicylic acids) that hydrates, improves oily skin related conditions and the youthful appearance of the skin. Evens out skin tone. An innovative combination of AHAs with the addition of peptide and ceramide for even more toned youthful-looking skin.
node1:Product from Amazon platform with title and content: Title: GM G.M. COLLIN GEL PURIFIANT PURACNE OXYGEN PURIFYING GEL OILY OR ACNE-PRONE SKIN 500ml - 17fl oz. Content: Alcohol and fragance-free formula enriched with BHA (1% salicylic acid). Deeply cleanses out impurities caused by acne and excess oil. Also contains AHA and 100% natural ingredients to purify and detoxify the skin. Pores appear visibly tighter, the skin instantly looks smoother and healthier.
node2:Product from Amazon platform with title and content: Title: G.M. COLLIN - Sensiderm Treating Lotion 7 oz. Content: For Sensitive SkinG.M. COLLIN Sensiderm Treating Lotion is A moisturizing fluid to meet the needs of sensitive skin of all types. Hydrating, toning and soothing treating lotion. Alcohol-free and fragrance-free. Helps maximize skin care benefits.Net Weight:6.75 oz.
node3:Product from Amazon platform with title and content: Title: G.M. Collin Lotion Traitante Oxygen Puractive + Treating Mist, 7 oz.. Content: G.M. Collin oxygen puractive plus treating lotion for normal to oily skin. Formulated with seven plant extracts and 100% natural ingredients, proactive treating lotion purifies, detoxifies, and soothes the skin. The result is an even complexion for a smooth and matte finish. Alcohol and fragrance free. G.M. Collin oxygen puractive plus treating lotion ingredients : water/EAU, hexylene glycol, butylene glycol, peg 60 glycerides, caprylyl glycol, glycerin, carbomer, nordihydroguaiaretic acid, oleanolic acid, zinc acetyl methionine, lactobacillus bulgaricus ferment filtrate, magnesium aspartate, zinc gluconate, copper gluconate, peg 40 hydrogenated castor oil, peumus boldus leaf extract, xanthan gum, aloe barbadensis (aloe vera) leaf juice, pelargonium graveolens (geranium) oil, mentha arvensis oil, cymbopogon martini (palma rosa) oil, citrus aurantium dulcis (orange) oil, disodium edta, potassium sorbate, allantoin, potassium ascorbyl tocopheryl phosphate (vitamin C, vitamin E), sodium copper chlorophyllin. Purifies skin. Matte finish. Helps maximize skin care benefits.
node4:Product from Amazon platform with title and content: Title: G.M. Collin Facial Treatment Derm Renewal Cream, 1.7 Fluid Ounce. Content: A renewing cream with a performing high technology patented complex offering the full benefits of ahas without the sting. Lactic acid and arginine work in synergy to improve the youthful appearance of the skin and even out skin tone, while peptide and ceramide normalize the lipid barrier. The skin is left soft and revitalized. Leaves skin soft and revitalized. Youthful look. AHA.
node5:Product from Amazon platform with title and content: Title: G. M. Collin Bota-Peptide Eye Contour, 0.7 Fluid Ounce. Content: A formula containing argireline, myoxinol and matrixyl that provides a visible dermo-decontracting and smoothing effect on expression lines and wrinkles around the eyes. Helps improve the appearance of wrinkles, dark circles and puffiness.
node6:Product from Amazon platform with title and content: Title: G.M. COLLIN - Bio Organique Energizing Mask. Content: Immerse yourself into the perfect hydration that only nature can truly provide with the zest of Energizing Mask. The Mask soothes, detoxifies, and thoroughly oxygenates the skin, returning its brilliant glow naturally, for a complexion that is revitalized and reawakened.Barbados Cherry -Barbados Cherry is nature's most amazingly potent antioxidant, which neutralizes freeradicals to prevent the onset of premature skin aging.Apricot -A natural antioxidant, it efficiently neutralizes free radicals, strengthens the hydro-lipidicbarrier, and prevents dehydration.Formulated with organic fruits, vegetables, and plants. Does not contain harmful chemicals or animal-based ingredients.Hydrating and oxygenating mask, revitalizes and brightens skin tone with Ecocertified Tapioca Starch. Returns a healthy glow to tired and dull skin.Net Weight:50 ml/1.7 oz.
node7:Product from Amazon platform with title and content: Title: G.M. Collin Sensiderm Treating Mist 7oz. Content: GM Collin Sensiderm Treating Mist - For Sensitive Skin. Alcohol and fragrance free lotion to hydrate, tone, and sooth sensitive skin. Helps maximize skin care benefits.Directions: After thorough rinsing of cleanser, spray and massage carefully. Follow with appropriate GM Collin skin care cream.GM Collin Sensiderm Treating Mist Ingredients:Water, Hamamelis Virginiana (Witch Hazel) Flower Water, Tilia Cordata (Linden) Flower Water, Honey Extract, Sodium PCA, Betaine, Sorbitol, Glycine, Alanine, Proline, Serine, Threonine, Arginine, Lysine, Glutamic Acid, Butylene Glycol, Rubus Fructicosus (Blackberry) Leaf Water, Vaccinium Augustifolium (Blueberry) Leaf Water, Vaccinium Augustifolium (Blueberry) Flower Water, Polysorbate 20, Aloe Barbadensis (Aloe Vera) Leaf Juice, Propylene Glycol, Phenoxyethanol, Methylparaben, Butylparaben, Ethylparaben, Propylparaben, Disodium EDTA, Citric Acid, Allantoin, Blue 1.
node8:Product from Amazon platform with title and content: Title: GM Collin Derm Renewal Gel 1.7 oz.. Content: A renewing, purifying acne-treatment gel that improves the oily to acne-prone related skin conditions with AHA and BHA (glycolic and salicylic acids). Evens out skin tone.
node9:Product from Amazon platform with title and content: Title: G.M. Collin Advanced Repair Serum, 1 Fluid Ounce. Content: Discover an innovation inspired by the latest breakthrough in gene science and growth factor technology. G.M. Collin introduces an advanced anti aging serum that incorporates growth factors to synchronize cellular rhythm and optimize the skin's natural repair and protection processes, to prevent and delay the visible signs of aging. Refines skin surface. Improves appearance. Cellular anti aging care.
node10:Product from Amazon platform with title and content: Title: G.M. Collin Oxygen PURACTIVE Treating Lotion - 7 oz. Content: AKA OXYGEN PURACTIVE+ TREATING MIST; A fragrance-free and alcohol free mist that purifies, refreshes, and soothes. Evens out the skin promoting a matte and softer complexion.
node11:Product from Amazon platform with title and content: Title: G.M. COLLIN - Lipiad Advanced Complex 0.54oz. Content: For Normal to Dry SkinG.M. Collin Lipiad Advanced Complex is a nourishing, rejuvenating and repairing elixir enriched with Moroccan Argan Oil, Lupine Extract and Lycopene to help maintain skin's optimal moisture and prevent signs of premature aging. It provides a pleasant dry emollient feeling that instantly comforts dry skin. The result is a a visibly smoother, revitalized and more resilient skin.- Nourishes the skin with nutrients that maintain healthy hydration.- Regenerates, promotes healing, and restores the barrier function.- Inhibits Elastase, protects DNA, and acts as anti-lipoperoxidizing agent.- Improves skin texture.- Relaxes the features to visibly diminish fine lines and wrinkles.- Clinical results demonstrated a 54% reduction in transepidermal water loss in just 28 days.Net Weight:16 ml/0.54 oz.
node12:Product from Amazon platform with title and content: Title: G.M. COLLIN - Hydramucine Cream. Content: For normal to dry skin.G.M. COLLIN Hydramucine Cream acts as a hydrating / anti-dehydrating agent to provide moisturizing benefits. Hydrating and anti-dehydrating cream. Improves the skin's visible elasticity. Excellent make-up base.Net Weight:1.7 oz.
node13:Product from Amazon platform with title and content: Title: G.M. Collin Vital-C 10% Plus Peptides Serum, 1.0 Fluid Ounce. Content: Inspired from the hometic approach, based on the synergy of a powerful antioxidant complex formulated with L-ascorbic acid globularia cordifoilia callus culture extract, artemia extract, peptide Q10 and matrixyl 3000.
node14:Product from Amazon platform with title and content: Title: GM Collin Bio Organique Cleansing Milk 8oz. Content: Refresh and cleanse your skin with the gentle dew of nature. The Milk's tender touch removes impurities from the skin, the essential first step in your skin care routine. Sublimely mild and soothing, its dynamic natural formulation also simultaneously removes makeup, leaving the skin lusciously lucent.
node15:Product from Amazon platform with title and content: Title: G. M. Collin Facial Treatment Daily Ceramide Comfort, 0.84 Fluid Ounce. Content: A daily capsule to nourish and reduce visible signs of stress and irritation while minimizing moisture loss. For all skin types. 100% genuine. Anti aging serum. Protects skin against environmental elements.
node16:Product from Amazon platform with title and content: Title: G.M. Collin Facial Cleansing Exfozyme, 1.7 Fluid Ounce. Content: G.M. Collin EXF ounce me exfoliant enzymatic exfoliant to remove dead skin cells for healthier skin. Refines skin texture and brightens the complexion. G.M. Collin EXF ounce me exfoliant ingredients : water, kaolin, bentonite, zinc oxide, peg 7 glyceryl cocoate, cetearyl alcohol, ceteareth 20, peg 100 stearate, glyceryl stearate, butylene glycol, glycerin, simmondsia chinensis (jojoba) seed oil, titanium dioxide, magnesium carbonate, citrus timonium (lemon) peel oil, mentha arvensis oil, silica, protease, magnesium aluminum silicate, cellulose gum, propylene glycol, diazolidinyl urea, methylparaben, propylparaben, citric acid, BHA. Should be applied on damp skin. After cleansing, apply a thin layer, enough to cover the skin. Avoid eyelid area. Leave to work for 10 to 15 minutes. Rinse thoroughly. Follow with G.M. Collin treating lotion. Exfoliation. Promotes skin care.
node17:Product from Amazon platform with title and content: Title: Gm G.m Collin Algomask+ Clinical Moisturizer Treatment. Content: A thermo-corrective treatment creating a cooling effect on the skin to decongest, moisturize and soothe ALGOMASK + is enriched in Chitosan for immediate and long-lasting hydration. Its thermo-cooling effect on the skin makes it a remarkable decongesting treatment particularly for reducing diffuse redness and improving acne. Its vaso-constricting, firming action makes it an excellent clinical treatment for aging, sagging skin. Containing seaweed extracts and regenerating silicium, this treatment is equally popular with skin suffering from irritation or dehydration. Recommended for all skin types, it provides an instant radiance effect. If You have any questions feel free to ask!
node18:Product from Amazon platform with title and content: Title: GM Collin Vasco-Tonic Concentrate 1 oz.. Content: An effective serum that helps visibly reduce skin's redness and tone surface tissue. For sensitive skin of all types.
node19:Product from Amazon platform with title and content: Title: Dr. Dennis Gross Skincare Age Erase Moisture with Mega 10 Plus, 1.7 fl. oz.. Content: Age Erase Moisture provides anti-aging hydration with mega 10 plus, a complex developed by Dr. Gross, which contains 10 essential nutrients for optimal skin health. Formulated with a super blend of vitamins A through E, this nourishing cream also boasts COQ10, phospholipids, and chelators for daily protection against fine lines, wrinkles, dehydration, and environmental impurities. Active vitamin D enhances the benefits of the vitamins and antioxidants found in the formula. Like taking a daily vitamin &#x2013; this formula contains all the topical nutrition Dr. Gross recommends for your skin. Usage directions: smooth over clean, dry skin on face, neck and d&#xE9;collet&#xE9;. For AM/PM use.
node20:Product from Amazon platform with title and content: Title: GM Collin Native Collagen Gel 1.7 oz.. Content: Indications: Visibly re-energizing. Dermo-dynamic gel. Moisturizes, invigorates, tones and improves the youthful appearance of the skin.Use: Apply under the skin care cream: for dry, dehydrated, atonic or mature skins. After the G.M. Collin cleansing milk and treating lotion, spread a thin film of gel. Massage thoroughly. Add a suitable quantity of skin care cream and massageFrequency: As an intensive program: Morning and evening. As a maintenance program: Morning or evening or as recommended by your skin care professional.
node21:Product from Amazon platform with title and content: Title: Dr. Dennis Gross Skincare Alpha Beta Glow Pad For Face - 20 Packettes. Content: Alpha Beta Glow Pad is the only anti-aging, exfoliating sunless tanner that contains active Vitamin D (the sun vitamin) to provide smoother, healthier skin and natural radiance year-round.Microencapsulated DHA and Soy Proteins deliver color deep into skin to prevent fading through surface exfoliation. Alpha & Beta Hydroxy Acids exfoliate, tighten pores, eliminate blackheads and help fade existing sunspots for an even, streak-free glow.Vitamin D is known for enhancing the benefits of the additional vitamins and antioxidants found in the formula.Glow Pad transforms dull texture & tone into radiant, glowing skin better than Mother Nature herself - reducing the need for foundation and concealer.
node22:Product from Amazon platform with title and content: Title: SALE - Best Natural Vitamin C Serum for Your Face with Vitamin E + Hyaluronic Acid + Ferulic Acid | COMES WITH FREE E-BOOK | High Potency Natural Vitamin C 20% Serum Guaranteed to Leave You with Super Soft, Radiant, Supple, and Youthful Skin | Your Most Potent Anti-aging and Anti-wrinkle Solution | Brightening Formula Addresses Brown Spots, Dark Spots and Uneven Skin Tone | 100% MONEY BACK GUARANTEE. Content: Don't Buy Our Vitamin C Serum If You're Only Looking For Average ResultsDo You Suffer From the Following Problems?:~ Dry and dull skin~ Wrinkles and fine lines~ Aging of the skin~ Loss of elasticity and firmness~ Sun spots, dark spots, and age spotsTry Our Serum RISK-FREE With Our 30 Days Money Back GuaranteeWhat Our Vitamin C Serum Will Do To Your Skin:~ Soft and radiant skin~ Plumper and firmer skin~ Reduced wrinkles and fine lines~ Reduced pore size~ Younger looking skin~ An evened-out skin tone complexion&#x2605;Our serum is made with 100% natural ingredients in the USA at an FDA approved facility.&#x2605;We produce in small batches to guarantee freshness and potency.&#x2605;Receive a free e-Book when you purchase our serum&#x2605;Try it RISK-FREE with our 365 days 100% money back guarantee - even if the bottle is empty!Due to High Demand, Supplies Run Low - Click ""Add to Cart"" At The Top Of The Page!",products,nc
"Classify the product represented by node13 using its subgraph data (text attributes and connections) as follows.

node0: Combines Zeolite and ceramic for ammonia removal and biological filtration; disposable every 2 weeks for goldfish tanks.  
node1: Quiet in-tank filter with adjustable suction cups; ideal for turtle tanks and shallow water with Bio-Bag cartridge.  
node2: Stress Coat Water Conditioner with missing content details.  
node3: Floating food sticks for water turtles and amphibians; high in protein and vitamins, enriched with calcium.  
node4: Fully submersible heater with TruTemp dial for ±0.5°F accuracy in aquariums.  
node5: 3-pack replacement cartridges for Mini Might filters.  
node6: Dimmable LED bulb (E12 base) equivalent to 60W, 500 lumens for decorative lighting.  
node7: Three-stage terrarium filter for shallow water, removes debris and ammonia with reptile-safe lid.  
node8: Hang-on filter with UV sterilization for clear water, removes algae and parasites in freshwater/saltwater.  
node9: Premium adsorbent removing organics, controls ammonia/nitrates; renews via bleach treatment for freshwater/marine.  
node10: Nylon media bags for AquaClear 50 filters, simplifying maintenance in fresh/saltwater.  
node11: Activated carbon inserts (3-pack) for AquaClear 30 filters, enhances water clarity and purity.  
node12: High-performance pump (900 GPH) with ceramic components, quiet and energy-efficient for freshwater/saltwater.  
node13: Cleans cyanobacteria stains in marine tanks safely, works in 48 hours without harming marine life.  
node14: Target feeder with 21-35"" extendable tube for precise coral and aquatic animal feeding.  
node15: LED aquarium light with remote, adjustable mounts, for freshwater tanks with customizable lighting.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node1, node3>,<node1, node4>,<node1, node5>,<node1, node6>,<node1, node7>,<node2, node4>,<node2, node9>,<node2, node10>,<node2, node11>,<node4, node12>,<node4, node13>,<node4, node14>,<node4, node15>,<node8, node14>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Pet Supplies,"

node0: Combines Zeolite and ceramic for ammonia removal and biological filtration; disposable every 2 weeks for goldfish tanks.  
node1: Quiet in-tank filter with adjustable suction cups; ideal for turtle tanks and shallow water with Bio-Bag cartridge.  
node2: Stress Coat Water Conditioner with missing content details.  
node3: Floating food sticks for water turtles and amphibians; high in protein and vitamins, enriched with calcium.  
node4: Fully submersible heater with TruTemp dial for ±0.5°F accuracy in aquariums.  
node5: 3-pack replacement cartridges for Mini Might filters.  
node6: Dimmable LED bulb (E12 base) equivalent to 60W, 500 lumens for decorative lighting.  
node7: Three-stage terrarium filter for shallow water, removes debris and ammonia with reptile-safe lid.  
node8: Hang-on filter with UV sterilization for clear water, removes algae and parasites in freshwater/saltwater.  
node9: Premium adsorbent removing organics, controls ammonia/nitrates; renews via bleach treatment for freshwater/marine.  
node10: Nylon media bags for AquaClear 50 filters, simplifying maintenance in fresh/saltwater.  
node11: Activated carbon inserts (3-pack) for AquaClear 30 filters, enhances water clarity and purity.  
node12: High-performance pump (900 GPH) with ceramic components, quiet and energy-efficient for freshwater/saltwater.  
node13: Cleans cyanobacteria stains in marine tanks safely, works in 48 hours without harming marine life.  
node14: Target feeder with 21-35"" extendable tube for precise coral and aquatic animal feeding.  
node15: LED aquarium light with remote, adjustable mounts, for freshwater tanks with customizable lighting.","node0:Product from Amazon platform with title and content: Title: Marina Slim Filter Zeolite Plus Ceramic Cartridge - 3-Pack. Content: The Marina Slim Filter Zeolite Plus Ceramic Cartridge combines Zeolite and Ceramitek in one cartridge for a healthy aquarium. The Zeolite effectively adsorbs toxic ammonia and reduces stress on fish, while the Ceramitek, a highly porous ceramic biological filter medium optimizes biological filtration. The easy-to-use disposable cartridge should be replaced every two weeks. Never replace all filter cartridges at the same time in order to ensure constant presence of beneficial bacteria. The Marina Slim Filter Zeolite Plus Ceramic is best used in goldfish aquariums.
node1:Product from Amazon platform with title and content: Title: Tetra Whisper In-Tank Filter. Content: For the ultimate in convenience and quiet, choose a Whisper In-Tank Filter. These filters mount on the inside of the aquarium, rather than hanging from the outside -- making it possible to place the tank flush against a wall. In-Tank Filters are unusually quiet, since the motor is under the water. Offering the same quality and performance as an external filter, the Whisper In-Tank Filter will function in as little as 2 inches of water -- making it ideal for turtle tanks, or for creating a waterfall inside the tank.The Whisper In-Tank filter features adjusts easily to high or low water levels with mounting suction cups and/or bracket. Each filter comes with one pre-assembled Whisper Bio-Bag filter cartridge.
node2:Product from Amazon platform with title and content: Title: API Stress Coat Water Conditioner, 16-Ounce. Content: missing
node3:Product from Amazon platform with title and content: Title: Tetra ReptoMin Floating Food Sticks. Content: A long-standing favorite among breeders and pet turtle enthusiasts alike, ReptoMin is a floating food stick for all water turtles, amphibians, and other aquatic reptiles. High in nutritional value and manufactured to strict quality standards, ReptoMin products have proven to be readily accepted by dozens of species. Vitamin and calcium enriched, ReptoMin is a protein rich, scientifically formulated food. ReptoMin is available in a variety of package sizes.
node4:Product from Amazon platform with title and content: Title: EHEIM Jager Aquarium Thermostat Heater 150W. Content: All 9 EHEIM Heater models are 100% fully submersible and come with a new TruTemp dial that allows the user to recalibrate the heater within a +/- 0.5F degree accurancy for precise temperature readings.
node5:Product from Amazon platform with title and content: Title: AQUARIUS 3-Pack Mini Might Filter Replacement Cartridge for Aquarium. Content: Aquarius AQ0083 Mini Might Filter Replacement Cartridge 3-Pack
node6:Product from Amazon platform with title and content: Title: Feit Electric CFC/DM/500/LED LED Light Bulb, Candelabra E12, 7W (60W Equivalent) Dimmable 3000K 500 Lumens. Content: Chandelier LED Candelabra Base LED 500 Lumens 60 Watt EQ - Fully Dimmable General Purpose chandelier led great for decorative lamps and fixtures.
node7:Product from Amazon platform with title and content: Title: Tetra ReptoFilter for Terrariums. Content: Using Whisper filtration technology, the ReptoFilter provides quality three-stage filtration, removing debris, discoloration, and odors and ammonia from terrariums with up to 20 gallons of water. The design allows for operation in shallow-water environments, making it ideal for creating waterfalls. A top lid keeps reptiles out of the filter chamber while providing easy access for replacing filter cartridges.
node8:Product from Amazon platform with title and content: Title: Aquatop PF40-UV Hang-On Filter with UV Sterilization. Content: The pfuv-15 is capable of filtering up to 64-gallons per hour with an adjustable flow rate, making it suitable for freshwater and saltwater aquariums up to 15-gallons. This convenient hang on back style filter has a built-in, self-adjusting surface skimmer for cleaning the surface of the water and to promote gas exchange. The featured uv sterilizer of the pfuv-15 requires no extra plumbing, allowing for a quick and easy installation. The uv sterilizer of the pfuv-15 helps eliminate unwanted algae blooms, keeping aquarium water crystal clear and aids in the health of your aquatic creatures by eradicating free-floating parasites. The pf-uv series comes equipped for mechanical and chemical filtration. With a replaceable filter pad enhanced with aquatop's bamboo carbon, uv sterilization and a self-adjusting surface skimmer, the pfuv-15 is a one-of-a-kind filter for all your aquarium needs.
node9:Product from Amazon platform with title and content: Title: Seachem Purigen 250ml. Content: Purigen&#xAE; is a premium synthetic adsorbent that is unlike any other filtration product. It is not a mixture of ion exchangers or adsorbents, but a unique macro-porous synthetic polymer that removes soluble and insoluble impurities from water at a rate and capacity that exceeds all others by over 500%. Purigen&#xAE; controls ammonia, nitrites and nitrates by removing nitrogenous organic waste that would otherwise release these harmful compounds. Purigen&#x2019;s&#x2122; impact on trace elements is minimal. It significantly raises redox. It polishes water to unparalleled clarity. Purigen&#xAE; darkens progressively as it exhausts, and is easily renewed by treating with bleach. Purigen&#xAE; is designed for both marine and freshwater use.
node10:Product from Amazon platform with title and content: Title: Hagen AquaClear 50 Nylon Bag, 2-Pack. Content: The AquaClear Filter Media Bag makes media maintenance extremely simple. The fine mesh holds small grained filter media and the bags may be used in both fresh and saltwater aquariums. It is designed to fit the AquaClear 50 Power Filter.
node11:Product from Amazon platform with title and content: Title: Aquaclear Activated Carbon Insert, 30-Gallon Aquariums, 3-Pack. Content: AquaClear 30 Activated Carbon Filter Insert improves water clarity for freshwater and marine aquariums. AquaClear 30 Activated Carbon Filter Insert provides superior adsorption qualities which eliminate odors, discoloration and impurities. It is designed to fit the AquaClear 30 Power Filter.
node12:Product from Amazon platform with title and content: Title: Eheim 1262 Pump. Content: Eheim pumps have superior quality ; ceramic shaft, ceramic and carbon bearing.& These pumps are suitable for use in or out of fresh or salt water.& These pumps are nearly silent and& have low energy consumption.&& Eheim 1262 Universal Pump: Pump Output: 900 gph Delivery Head: 11`6"" Power Consumption: 80 W (120V/60Hz) Hose Connection (Suction Side): 1"" Hose Connection (Pressure Side): 3/4"" Dimensions: 8.6"" x 4.6"" x 6.3"" Weight:& 5.7 lbs Centrifugal pump suitable for permanent use, both above and below water.Not Self-priming.Integrated pre-filter. Suction intake nozzle for hose connections. Can be unscrewed and sealed if suction is effected via pre-filter.Variable attachment base for optimum assembly. Models 1260, 1262 Performance Curve 1260: Max Pump Output: 635gph, Max Delivery Head: 12`1``, Max Power: 65W1262: Max Pump Output: 900gph, Max Delivery Head: 11`6``, Max Power: 80W
node13:Product from Amazon platform with title and content: Title: Boyd Chemiclean Red Cyano Bacteria Remover Treatment - 2 grams. Content: Boyd Enterprises Chemiclean cleans stains from red, black, blue-green, and methane (bubble) producing cyanobacteria in marine aquariums. It is completely safe for all fish, corals, invertebrates, desirable macro algae, and nitrifying bacteria in reef systems. It's simple, quick and easy to use. Chemiclean works within 48 hours oxidizing trapped organic sludge and promotes an ideal enzyme balance. Chemiclean will clean stains from red cyanobacteria in aquariums. Size: 2 grams.
node14:Product from Amazon platform with title and content: Title: Kent Marine 00856 SeaSquirt Feeder. Content: The Kent Marine Sea Squirt makes it possible to target-feed liquid supplements to corals or other aquatic animals so they receive the nutrients for proper health and growth. The Sea Squirt features a 21-inch graduated tube that extends to 35-inch for deep aquariums and hard-to-reach areas. A unique probe is included to feed solid foods to anemones, eels, lionfish, and other organisms that require a careful approach. Disassembles for easy cleanup.
node15:Product from Amazon platform with title and content: Title: Current USA Satellite Freshwater LED Plus Light for Aquarium. Content: The Satellite Freshwater LED Plus includes a LED Plus fixture, 2 adjustable docking mounts, 1 12V DC UL Transformer and 1 Wireless LED Remote Control.",products,nc
"Classify the product represented by node15 using its subgraph data (text attributes and connections) as follows.

node0: Heavy-duty 4'x6' tumbling mat with handles and extensions, 2"" thick foam, easy storage, not for professional use.  
node1: 9' pink gymnastics beam for home/school training, aids in rolls, cartwheels, and dance moves.  
node2: 10' plastic roller coaster toy for preschoolers, detachable car, backyard/playroom use, versatile play options.  
node3: Portable crib converting to playpen, solid pine, patented rail system, includes mattress pad and tools.  
node4: Gymnastics set for 18"" dolls: outfit, medal, slippers, wrist guards, and hair tie.  
node5: Folding 4x8' exercise mat with PU leather, high-density foam for yoga/Pilates, easy storage.  
node6: Durable tumbling mats with Velcro ends, non-skid vinyl, cross-linked foam, CPSIA-compliant.  
node7: Lightweight foam balance beam (55""x6""), non-slip surface, improves balance and coordination.  
node8: Soft leather gymnastics grips with Velcro, customizable fit, ideal for uneven bars.  
node9: 8' padded balance beam with 12"" risers, USA-made for studios, available in aluminum/folding options.  
node10: 4x6' pink gymnastics mat with high-density foam for competitive use, durable closed-cell material.  
node11: Colorful tumbling mats (2' folding panels), 18oz vinyl, cross-linked foam, CPSIA-safe.  
node12: Foldable 4x8' mats (1.5""/2"" thick), 8 colors, hook/loop fasteners for modular setups.  
node13: White communion/wedding dress set for 18"" dolls, includes shoes and headband.  
node14: Same as node8: soft leather gymnastics grips with Velcro, customizable fit for uneven bars.  
node15: Dual bunk travel case for 18"" dolls, includes bed/bedding, secure storage, mesh pockets.  
node16: Black patent bow shoes for 18"" dolls, slip-on style, suitable for special occasions.  
node17: Moon-star print PJ set for 18"" dolls, cami and shorts, ideal for lounging.  
node18: 4x6' gymnastics mat with high-density foam, durable closed-cell material for competitive use.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node3>,<node0, node4>,<node0, node5>,<node0, node6>,<node0, node11>,<node0, node12>,<node1, node4>,<node1, node7>,<node1, node9>,<node1, node12>,<node4, node8>,<node4, node9>,<node4, node10>,<node4, node13>,<node4, node14>,<node4, node15>,<node4, node16>,<node4, node17>,<node10, node18>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Toys & Games,"

node0: Heavy-duty 4'x6' tumbling mat with handles and extensions, 2"" thick foam, easy storage, not for professional use.  
node1: 9' pink gymnastics beam for home/school training, aids in rolls, cartwheels, and dance moves.  
node2: 10' plastic roller coaster toy for preschoolers, detachable car, backyard/playroom use, versatile play options.  
node3: Portable crib converting to playpen, solid pine, patented rail system, includes mattress pad and tools.  
node4: Gymnastics set for 18"" dolls: outfit, medal, slippers, wrist guards, and hair tie.  
node5: Folding 4x8' exercise mat with PU leather, high-density foam for yoga/Pilates, easy storage.  
node6: Durable tumbling mats with Velcro ends, non-skid vinyl, cross-linked foam, CPSIA-compliant.  
node7: Lightweight foam balance beam (55""x6""), non-slip surface, improves balance and coordination.  
node8: Soft leather gymnastics grips with Velcro, customizable fit, ideal for uneven bars.  
node9: 8' padded balance beam with 12"" risers, USA-made for studios, available in aluminum/folding options.  
node10: 4x6' pink gymnastics mat with high-density foam for competitive use, durable closed-cell material.  
node11: Colorful tumbling mats (2' folding panels), 18oz vinyl, cross-linked foam, CPSIA-safe.  
node12: Foldable 4x8' mats (1.5""/2"" thick), 8 colors, hook/loop fasteners for modular setups.  
node13: White communion/wedding dress set for 18"" dolls, includes shoes and headband.  
node14: Same as node8: soft leather gymnastics grips with Velcro, customizable fit for uneven bars.  
node15: Dual bunk travel case for 18"" dolls, includes bed/bedding, secure storage, mesh pockets.  
node16: Black patent bow shoes for 18"" dolls, slip-on style, suitable for special occasions.  
node17: Moon-star print PJ set for 18"" dolls, cami and shorts, ideal for lounging.  
node18: 4x6' gymnastics mat with high-density foam, durable closed-cell material for competitive use.","node0:Product from Amazon platform with title and content: Title: ""ECR4Kids Tumbling Mat, 4 Sections, 4' by 6'"". Content: Heavy-duty multi-panel tumbling mat from ECR4Kids in bright primary colors. Features convenient handles and ""hook & loop"" extensions for extending with additional mats. Dense 2""-thick Polyurethane foam. Folds easily for storage. Wipes clean, easy to sanitize. Not intended for use with weights and heavy machinery or as professional athletic mat. Measures 72"" by 48"" by 2"".
node1:Product from Amazon platform with title and content: Title: Pink Gymnastics Folding Training Low Beam (9 Feet Long). Content: For gymnastics school training and home training use. It is perfect for forwards and backwards rolls, cartwheels, dance jumps, turns, cartwheels, round off and backsprings, etc...
node2:Product from Amazon platform with title and content: Title: Step 2 Up &amp; Down Roller Coaster. Content: It may not feature any loop-de-loops or terrifying hairpin turns, but preschoolers will likely find this 10-foot-long roller coaster every bit as thrilling as grownups find the amusement park version. Molded in brightly colored plastic, it's built for years of wear in either the backyard or the playroom. The set's components fit together to form a downhill ride with another smaller hill about halfway through. What we loved most about this set is the fact that the individual parts are just as much fun as the fully assembled kit. The car, bright yellow with a sturdy handle, could just as easily be used around the house if the child is too young for the coaster. And the ramp system is plenty of fun to roll cars, balls, or anything else. Perhaps our tiny toy tester said it best: ""Wheee!""--John Moe
node3:Product from Amazon platform with title and content: Title: Dream On Me 2 in 1 Portable Folding Stationary Side Crib, Espresso. Content: The Dream On Me, 2-in-1 portable folding crib, features a United States Patented rail system for ease in converting crib to playpen with one hand. The unique hinges allow the crib to fold flat for compact storage or travel. Included is the stationary (non drop side) rail design which provides the utmost in product safety. Made of solid Pine and having a beautiful Non-toxic finish, this portable crib is one of the most convenient portable cribs on the market. 1"" Mattress pad and all tools for easy assembly included.
node4:Product from Amazon platform with title and content: Title: Gymnastics Outfit. Fits 18&quot; Dolls Like American Girl&reg;. Content: Gymnastic set with zipper closure. Zipper closure has been improved for better quality. This item includes Gymnastics outfit, Medal,Slippers, Wrist Guards and Hair Tie.
node5:Product from Amazon platform with title and content: Title: ""Black New 4'x8'x2&quot;Thick Folding Panel Gymnastic Mat Gym Fitness Exercise Mat R4"". Content: This 8-foot exercise mat makes it easier to work-out at home. It's made from high-density, foam providing you with a comfortable spot to do crunches, yoga, Pilates and other floor exercises. Folds to 1/4 the size with a sewn in handle for convenient storage and transport. Also features non-absorbent PU leather which makes it easy to clean. We purchase our products directly from the manufacturer, so you know getting the best prices available. Closed dimensions: 8""(L) x 48""(W) x 24""(H) Each panel: 48"" x 24"" (2"" thick) Flat Dimensions: 8' x 4' (2"" thick)
node6:Product from Amazon platform with title and content: Title: Tumbl Trak Purple Tumbling Panel Mat with 2-Feet Folding Panels. Content: Tumbl Trak&#x2019;s Tumbling Mats are the highest quality gymnastic mats available on the market today.&#xA0;Each mat offers 2&#x2019; wide folding panels in a variety of colors with Velcro on two ends. Our Tumbling Mats are made with 18 oz. vinyl and industry standard, cross-linked polyethylene foam. The non-skid material on the bottom of the mat prevents it from sliding or moving when in use. They do not contain lead and have passed testing requirements enacted by the Consumer Protection Safety Improvement Act of 2008.
node7:Product from Amazon platform with title and content: Title: Foam Balance Beam. Content: Improve balance and coordination with our Foam Balance Beam at a fraction of the price! The balance beam is constructed out of strong, sturdy foam and features a non-slip surface. It is super light, making it easy to transport. Dimensions - 55 inches long, 6 inches wide, and 3 inches high. Colors may vary.
node8:Product from Amazon platform with title and content: Title: Ginnasta USA Power Cuff Zebra Velcro Gymnastics Grips - Ladies Uneven Bars. Content: You've never worn grips like these... Ginnasta USA uses leather that is specifically formulated and treated for gymnastics use. YOU CAN DO THINGS WITH THESE GRIPS THAT OTHER BRANDS SAY NOT TO! Why wear stiff, uncomfortable grips that take time to break in, and stretch out to the wrong size? Gymnasts of all levels are thrilled with Ginnasta USA grips because you can put them on, chalk them up and go! Even with the use of water and wire brushing, our grips stay soft and do not become brittle and hard. HOW TO MEASURE FOR PROPER SIZING: You will need to find your wrist/hand connection (this is where your wrist and hand meet, and there is a creased line there. This is the exact point to start measuring from). Now make sure your hand and fingers are totally straight and flat (don't cup your palm, and don't stretch your fingers backward either). Measure from the wrist/hand connection (that creased line) to the very tip and end of your middle finger (the longest one). Be precise and don't round up or down! Now find your measurement above under ""Grip Size"", and if your measurement borders between 2 sizes, choose the smaller one. If you need help, just call us! 1-877-559-2001
node9:Product from Amazon platform with title and content: Title: Balance Beam - BB8-P-12 - Padded Suede 8 Foot Balance Beam (Pink) with 12&quot; Riser Legs. Content: KGS proudly manufactures its products in the USA using only top quality materials, components and workmanship. KGS products can be found in many notable performing arts centers, dance and gymnastics studios and academics worldwide. Beams are available in a wide selection of sizes and configurations. ******See also our Aluminum Balance Beams and Folding Beams starting at $104.95
node10:Product from Amazon platform with title and content: Title: ""4'x6'x2&quot; Pink Gymnastics Tumbling Martial Arts V2 Folding Mat"". Content: Brand New! Professionally made for the best quality. This high-density cross-linked polyethylene foam (closed cell) is firm and is used for competitive gymnastics, it will last much longer than soft open cell foam.
node11:Product from Amazon platform with title and content: Title: Tumbl Trak Purple, Pink, Light Blue, Lime Green, Yellow Bright Pastel Tumbling Panel Mat with 2-Feet Folding Panels. Content: Tumbl Trak&#x2019;s Tumbling Mats are the highest quality gymnastic mats available on the market today.&#xA0;Each mat offers 2&#x2019; wide folding panels in a variety of colors with Velcro on two ends. Our Tumbling Mats are made with 18 oz. vinyl and industry standard, cross-linked polyethylene foam. The non-skid material on the bottom of the mat prevents it from sliding or moving when in use. They do not contain lead and have passed testing requirements enacted by the Consumer Protection Safety Improvement Act of 2008.
node12:Product from Amazon platform with title and content: Title: 8 COLOR OPTIONS We Sell Mats 1.5&quot; and 2&quot; Thick 4x8 Gymnastics Tumbling Exercise Folding Martial Arts Mats with Hook and Loop Fasteners on All 4 Sides Highest Quality Crosslink Polyethylene Foam Core. Content: We Sell Mats 1.5"" and 2"" Thick Gymnastics Tumbling Exercise Martial Arts Yoga Pilates Folding Mats. Constructed with The Highest Quality Crosslink Polyethylene Foam. Folds into 4 sections for easy carry and storage. Heavy Duty 18oz. Vinyl Covering. Hook and Loop Fasteners on all 4 sides makes it easy to connect mats together in any configuration.
node13:Product from Amazon platform with title and content: Title: My First Communion - White Satin Communion / Wedding Dress with Matching Headband and White Leather Dress Shoes - 18 Inch Doll Clothes. Content: DreamWorld Collections - 18 Inch American Girl Doll Clothes
node14:Product from Amazon platform with title and content: Title: Ginnasta USA Power Cuff Zebra Velcro Gymnastics Grips - Ladies Uneven Bars. Content: You've never worn grips like these... Ginnasta USA uses leather that is specifically formulated and treated for gymnastics use. YOU CAN DO THINGS WITH THESE GRIPS THAT OTHER BRANDS SAY NOT TO! Why wear stiff, uncomfortable grips that take time to break in, and stretch out to the wrong size? Gymnasts of all levels are thrilled with Ginnasta USA grips because you can put them on, chalk them up and go! Even with the use of water and wire brushing, our grips stay soft and do not become brittle and hard. HOW TO MEASURE FOR PROPER SIZING: You will need to find your wrist/hand connection (this is where your wrist and hand meet, and there is a creased line there. This is the exact point to start measuring from). Now make sure your hand and fingers are totally straight and flat (don't cup your palm, and don't stretch your fingers backward either). Measure from the wrist/hand connection (that creased line) to the very tip and end of your middle finger (the longest one). Be precise and don't round up or down! Now find your measurement above under ""Grip Size"", and if your measurement borders between 2 sizes, choose the smaller one. If you need help, just call us! 1-877-559-2001
node15:Product from Amazon platform with title and content: Title: Badger Basket Double Doll Travel Case with Bunk Bed and Bedding (Dark Pink). Content: Pack your two favorite 18 inch dolls and their accessories, zip, and go. Our soft case also includes a travel bunk bed, pillows, and blankets so your weary dolls can slumber comfortably anywhere. Convenient tote handles (one on top and one on the side), and a card holder on the front for adding a name or address tag (paper card not included). Secure your dolls inside with the hook-and-loop straps. Front window is useful if you have multiple dolls to pack and store. No need to unzip to see who is inside. Travel bunk bed folds flat and stores inside. Ample room inside the case for additional clothing and accessories (not included). Mesh pockets inside to hold small items. Heavy duty resin zipper with dual pulls. Fits 18 inch dolls such as american girl, madame alexander, and our generation. Spot clean travel case and travel bed as needed with a damp cloth and mild detergent. Allow to air dry. Do not heavily soak nor immerse the travel case nor the travel bed in water. Hand wash pillows and blankets and allow to air dry. Grab tabs at either ends of the zipper help you hold the case steady when opening or closing. Travel case is made with 100% polyester oxford fabric with pe foam filling. Bed, pillows, and blankets are made with durable 80% polyester/20% cotton fabric with white binding on all edges. Pillow has polyester filling. For three years old and up. Dolls and clothing/accessories shown in the photos not included. This item is a toy only and is never to be used with real infants or pets. Actual product may vary slightly from shown. All measurements approximate. This item ships in its original carton which may include a photo of the product. Warning: choking hazard - small parts. Not for children under 3 yrs. Do not store the travel case where it is below freezing temperatures because it may cause damage to the clear PVC vinyl viewing window. Travel case: 15. 75"" x 6. 25"" x 20. 5"" high. Bed: 19. 75"" L x 11. 25"" W x 15"" high.
node16:Product from Amazon platform with title and content: Title: Black Patent Doll Shoes with Bow, Dress Shoes Fits 18 Inch American Girl Dolls, Black Patent Bow Shoe Slip Ons. Content: These slip on style dress shoes feature a beautiful patent bow at the toe. 18"" doll shoes are perfect for the next special occasion! 2013 Sophia's- All Rights Reserved. Not affiliated with American Girl, Reg. Trademark of American Girl, LLC.
node17:Product from Amazon platform with title and content: Title: Pink Cami &amp; Boy Short Set, Doll Underwear Or PJ Set Fits 18&quot; American Girl Dolls. Content: This moon and stars print pajama set is perfect for your 18"" doll while lounging in the bedroom with your favorite book. Doll and slippers not included. 2013 Sophia's- All Rights Reserved
node18:Product from Amazon platform with title and content: Title: ""4'x6'x2&quot; Gymnastics Tumbling Martial Arts V4 Folding Mat"". Content: Brand New! Professionally made for the best quality. This high-density cross-linked polyethylene foam (closed cell) is firm and is used for competitive gymnastics, it will last much longer than soft open cell foam.",products,nc
"Classify the product represented by node5 using its subgraph data (text attributes and connections) as follows.

node0: Metal camera extender with 360° ballhead for GoPro and digital cameras.  
node1: Handlebar/seatpost mount for GoPro Hero 2/3, compatible with bicycles.  
node2: Bike-mounted GoPro clamp with adjustable arm for 19-35mm tubes, polycarbonate/stainless steel.  
node3: Underwater monopod (18-53"") with quick release, extends for safe shark/camera distance.  
node4: Polarizer filter for GoPro Hero3+, improves photo/video clarity.  
node5: Small travel case for GoPro Hero3+/3/2 with foam, 1-year warranty.  
node6: 2 Sony NP-BX1 batteries + charger, 3-year warranty, fits listed cameras.  
node7: Timelapse accessory for 360° photos/videos, supports GoPro/phones up to 750g.  
node8: Tripod mount for GoPro quick-release cameras, excludes HERO5, 1-year warranty.  
node9: Rugged Pelican 1510 case with rollers, watertight, FFA carry-on compliant.  
node10: Anti-fog silica inserts (8) for GoPros; reusable after baking, 4-5 uses per insert.  
node11: Floating GoPro grip/buoy with bright design, prevents camera loss in water.  
node12: J-hook buckle adapter for GoPro chest straps (Hero2/3).  
node13: Extendable monopod (20-90cm) for selfies and hard-to-reach shots.  
node14: Dive tank O-ring keychain kit for emergency seal replacements.  
node15: Brushless gimbal stabilizer for GoPro3/3+, 2-axis, 2+ hr battery life.  
node16: Large zip case organizes GoPro + accessories, durable travel protection.  
node17: 8 anti-fog inserts absorb moisture for clear GoPro footage in cold.  
node18: Aluminum thumbscrew for GoPro mounts, durable for extreme sports.  
node19: Detachable umbrella pole shelf (12""), holds 10+ lbs for condiments/essentials.  
node20: 15 anti-fog inserts for GoPro HERO series; reusable after baking.  
node21: Hard-shell case with foam for GoPro and accessories, travel-friendly.  
node22: Padded dividers for Pelican 1450 case, grey single-layer set.  
node23: Canon NP-E3 rechargeable battery (2200mAh) for EOS 1Ds Mark II.  
node24: Chest harness for GoPro, captures lower-angle footage during sports.

the connection relationship among the nodes mentioned:
 <node0, node3>,<node0, node4>,<node0, node5>,<node0, node6>,<node0, node7>,<node0, node8>,<node0, node9>,<node1, node2>,<node2, node11>,<node2, node12>,<node2, node13>,<node3, node14>,<node4, node15>,<node5, node11>,<node5, node16>,<node5, node17>,<node5, node18>,<node5, node19>,<node5, node20>,<node8, node12>,<node8, node21>,<node8, node22>,<node9, node23>,<node10, node11>,<node11, node24>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Electronics,"

node0: Metal camera extender with 360° ballhead for GoPro and digital cameras.  
node1: Handlebar/seatpost mount for GoPro Hero 2/3, compatible with bicycles.  
node2: Bike-mounted GoPro clamp with adjustable arm for 19-35mm tubes, polycarbonate/stainless steel.  
node3: Underwater monopod (18-53"") with quick release, extends for safe shark/camera distance.  
node4: Polarizer filter for GoPro Hero3+, improves photo/video clarity.  
node5: Small travel case for GoPro Hero3+/3/2 with foam, 1-year warranty.  
node6: 2 Sony NP-BX1 batteries + charger, 3-year warranty, fits listed cameras.  
node7: Timelapse accessory for 360° photos/videos, supports GoPro/phones up to 750g.  
node8: Tripod mount for GoPro quick-release cameras, excludes HERO5, 1-year warranty.  
node9: Rugged Pelican 1510 case with rollers, watertight, FFA carry-on compliant.  
node10: Anti-fog silica inserts (8) for GoPros; reusable after baking, 4-5 uses per insert.  
node11: Floating GoPro grip/buoy with bright design, prevents camera loss in water.  
node12: J-hook buckle adapter for GoPro chest straps (Hero2/3).  
node13: Extendable monopod (20-90cm) for selfies and hard-to-reach shots.  
node14: Dive tank O-ring keychain kit for emergency seal replacements.  
node15: Brushless gimbal stabilizer for GoPro3/3+, 2-axis, 2+ hr battery life.  
node16: Large zip case organizes GoPro + accessories, durable travel protection.  
node17: 8 anti-fog inserts absorb moisture for clear GoPro footage in cold.  
node18: Aluminum thumbscrew for GoPro mounts, durable for extreme sports.  
node19: Detachable umbrella pole shelf (12""), holds 10+ lbs for condiments/essentials.  
node20: 15 anti-fog inserts for GoPro HERO series; reusable after baking.  
node21: Hard-shell case with foam for GoPro and accessories, travel-friendly.  
node22: Padded dividers for Pelican 1450 case, grey single-layer set.  
node23: Canon NP-E3 rechargeable battery (2200mAh) for EOS 1Ds Mark II.  
node24: Chest harness for GoPro, captures lower-angle footage during sports.","node0:Product from Amazon platform with title and content: Title: XShot Pro Camera Extender for GoPro and Digital Cameras - All Metal Construction with 360&deg; Ballhead - XSPRO. Content: missing
node1:Product from Amazon platform with title and content: Title: Wild-us Sports Camera Handlebar Seatpost Rack Mount Bicycle Holder Bracket Compatible with Gopro HD Hero 2 3 Promotion Sale. Content: Wild-us Sports Camera Handlebar Seatpost Rack Mount Bicycle Holder Bracket Compatible with Gopro HD Hero 2 3 Promotion Sale
node2:Product from Amazon platform with title and content: Title: GoPro Handlebar Seatpost Mount. Content: Part of the beauty of the GoPro HD Hero Camera is its go-anywhere versatility. And to make the most of it, you may want to be able to mount the camera securely to your bike. With the GoPro Mounting Clamp, you can attach your camera to any round or semi-round tube from 19 - 35mm in diameter. So you can have your camera on the chainstays, seatpost, handlebars, or even on the fork legs. Whatever view you choose, you can capture it.The GoPro Handlebar Mounting Clamp&nbsp;includes the tool-free handlebar clamp and a three-way adjustable pivot arm so you can position the camera housing at any angle relative to the clamp.Product FeaturesMaterial: polycarbonate, stainless steelDimensions:Zoom Length:Effective Focal Length:Field of View:Aperature:Resolution:Megapixels:Memory Card Type:Video Size:Video Formats:Video Processor:Sensor:Photo Formats:Frame Rates:Battery Type:ISO Range:LCD Size:Manual Exposure:Manual Focus:Flash:Mic Type:Operating System:PC Connection:Attachment Type:Weight:Recommended Use: filming bike rides, kiteboarding, windsurfingManufacturer Warranty: 1 year
node3:Product from Amazon platform with title and content: Title: SeaLife AquaPod Underwater Camera Monopod with Quick Release Plate &amp; GoPro Mount. Content: TheSeaLife AquaPodallows for close up underwater photos and videos while maintaining a comfortable distance between you and your subject. It's ideal for exciting shark images and video, as well as other dangerous ocean species. Rotate the camera on the AquaPod to easily take self-portait images. Easy to use and hold steady, both above and below the water, the AquaPod extends from18 inches(46cm) to53 inches(135cm).Key Features:&bull; Fits all SeaLife cameras as well as all other cameras with a standard 1/4-20 tripod mount&bull; Includes GoPro adapter and quick release mounting plate&bull; Built-in self image mirror&bull; Anodized aluminum and stainless steel hardware&bull; Includes lanyard with clip and rubber grip for secure hold&bull; Compact and lightweight for easy travel&bull; Extends from 18 inches (46 cm) to 53 inches (135 cm)
node4:Product from Amazon platform with title and content: Title: GoPro Hero3+ Polarizer Glass Filter-Venture3+-GoPro Hero3 Plus Accessory. Content: missing
node5:Product from Amazon platform with title and content: Title: Smatree&reg; SmaCase G160 EVA Carrying and Travel Case (8.6&quot; X6.7&quot; X2.7&quot;) with Foam for Gopro&reg; HD Hero3+, 3, 2, 1 Camera camcorder and Essential Accessories - Black. Content: Product Features&#x2022; Compatibility: GoPro hero3+,hero3 cameras&#x2022; Size: Small(storage one camera and essential accessory)&#x2022; Item model number: SmaCase G160&#x2022; Recommended Use: Carrying on trips&#x2022; Manufacturer Warranty: 1 yearPlease pay attention!If you have any questions with the items, please feel free to contact us by email. We will always endeavor to assist with our quality service, to meet all of our clients' need, offer best solutions and do effective actions is our initial but final aim.Thank your for your time.
node6:Product from Amazon platform with title and content: Title: Wasabi Power Battery (2-Pack) and Charger for Sony NP-BX1, NP-BX1/M8 and Sony Cyber-shot DSC-HX50V, DSC-HX300, DSC-RX1, DSC-RX1R, DSC-RX100, DSC-RX100 II, DSC-RX100M II, DSC-RX100 III, DSC-RX100M3, DSC-WX300, HDR-AS10, HDR-AS15, HDR-AS30V, HDR-AS100V, HDR-AS100VR, HDR-CX240, HDR-MV1, HDR-PJ275. Content: The Wasabi Power NPBX1 battery and charger kit includes 2 batteries and one charger with a European plug and car adapter. All items meet or exceed OEM standards and come with a 3-year manufacturer warranty. Batteries replace Sony NP-BX1.Compatible with the following Sony models:DSC-HX50VDSC-HX300DSC-RX1DSC-RX1RDSC-RX100DSC-RX100 II (RX100M2)DSC-RX100 III (RX100M3)DSC-WX300HDR-AS10HDR-AS15HDR-AS30VHDR-AS100VHDR-AS100VRHDR-CX240HDR-MV1HDR-PJ275
node7:Product from Amazon platform with title and content: Title: Veho VCC-100-XL MUVI X-Lapse 360-Degree Photography and Timelapse Accessory for iPhone/Action Cameras/Time Lapse Cameras (Black). Content: The MUVI X-Lapse is the must have accessory for every film maker who wants to add something different to their movie edits. The MUVI X-Lapse enables a film maker to take up to 360&#xB0; degree sweeping time-lapse images that when edited together create an amazing movie effect.It has both male and female standard 1/4 -20 UNC tripod screw threads for both mounting cameras on and also for mounting the MUVI X-Lapse onto a tripod, perfect for lightweight action cameras with a continuous photo mode such as the MUVI HD or GoPro or standard cameras with a time-lapse feature up to a weight of 750 grams. For cameras that are slightly top heavy the MUVI X-Lapse has integral fold out feet to support and distribute the weight. As well as using with camcorders/cameras the MUVI X-Lapse ships with a holder for iPhone/Smartphone and in conjunction with a multitude of smartphone apps enables even the most inexperienced user to make super cool sweeping time-lapse movies. Another option for the most creative of photographers is creating panoramic super wide angle photos by using the MUVI X-Lapse to slowly sweep a panoramic view while the camera or smartphone takes intermittent shots. NB -The MUVI X-Lapse does not come with an app or software but these are readily available on app stores and the internet.
node8:Product from Amazon platform with title and content: Title: GoPro Tripod Mount. Content: Tripod mount for attaching your quick-release GoPro camera to a standard tripod.Compatible with all GoPro quick-release cameras including the Helmet HERO Wide, Motorsports HERO Wide, Motorsports HERO, Surf HERO, and WIDE HERO cameras. Not compatible with the Digital HERO 5 Wrist Camera.What's Included:&#x2022;1 Tripod Mount&#x2022;Warranty: One Year
node9:Product from Amazon platform with title and content: Title: Pelican 1510-004-110 Case with Padded Dividers, Black. Content: This rugged Pelican case has everything you need to keep your valuable equipment safe and secure. It features easy roller wheels, double throw latches and watertight construction. It also comes with an easy to adjust single layer padded divider set.This case meets the FFA requirements for maximum carry-on size and has a retractable handle.
node10:Product from Amazon platform with title and content: Title: NoFog Anti-Fog Inserts compatible with GoPro&reg; HERO&reg; Cameras - 8 Pack by The Accessory Pro. Content: About InsertsNoFog Inserts are Anti-Fog Inserts for ALL GoPro HERO cameras. Place them into the GoPro housing to prevent fogging in all weather conditions.They are made of absorbent silica paper, just like the GoPro product.You get 8 reusable inserts to keep you fog free for years.CompatabilityNoFog Inserts are compatable with ALL GoPro HERO cameras.- HERO2 & HERO Owners - Place 1 insert on each side of the camera.- HERO3 Owners - Place 1 insert on the side with the lens and 1 in the bottom.- HERO3+ Owners - Place 1 insert in the bottom.How To Use- Cut inserts along perforation (do not tear, this will cause dust)- Initially, bake Inserts at 300F (150C ) for 5 minutes in the oven to activate.- Place into the GoPro housing, the extras into a Ziplock bag.- Make sure the GoPro is fully sealed.- NoFog Inserts can be used 4-5 times before needing re-baked.- Keep NoFog away from children, these should not be ingested. If so, follow silica gel poison control guidelines.NoFog Inserts are designed for use with GOPRO products. Camera pictured is NOT included. GOPRO, HERO, & NAKED are trademarks or registered trademarks of Woodman Labs, Inc. in the United States and other countries.
node11:Product from Amazon platform with title and content: Title: Bobbing Buoy - Floating Hand Grip Monopod for GoPro&reg; HERO Cameras. Content: **Beware of counterfeit GoPro Aftermarket Accessories** The Bobbing Buoy is the first of it's kind floatingFORGoPro. Designed to save your camera if dropped in the water, it doubles as gripANDa floatation device. Unlike others on the market it will not block the view of your LCD screen. The Bobbing Buoy floats sticking straight up out of the water and it's bright yellow color makes it easy to spot when in bob's up and down. Save yourself the heartache of watching your camera sink to the bottom of the ocean - float your GoPro with Bobbing Buoy!Compatible with all GoPro HERO Camera models including: HD HERO2, HD Helmet HERO, HD Motorsports HERO, HD Surf HERO, HD NakedTM HERO, HD HERO 960 and even the older SD model.Contour Roam, Contour GPS, Contour+ (with Drift GoPro Mount Adapter)
node12:Product from Amazon platform with title and content: Title: JMT OEM Sports J-hook Buckle Vertical Surface Mount Adapter for Gopro Suptig Hd Hero 2 3 Chest Strap Belt. Content: Fit both GoPro SupTig Hero 2 3 Chest StrapContains:1x J Buckle
node13:Product from Amazon platform with title and content: Title: Gopromate(TM) Extendable Handheld Monopod Pole for Gopro Hero1 Hero 2 Hero 3 Black. Content: High QualityTake self photos without asking for assistance! Shot above the crowd in a party! Shot some corners you might not reach! Extend from 20 to 90 cm.Easy to use! Just set the timer, extend the rod and you are ready to shoot!Capture photos or video above the crowds or in hard to reach places.Hold camera steady when it is shrinked.Non-slip handle.Unique totatable head for easy adjustment to any angel.Dischargeable wrist strip.Easily fits any standard photos or video mount.
node14:Product from Amazon platform with title and content: Title: Scuba Diving Tank O-Ring Dive Kit Keychain with Pick (FREE SHIPPING), Nitrox. Content: Innovative's Dive Tank Key Chain is an interesting way to carry your save a dive ""O"" ring kit. Now you won't be left out of your dive when your old ""O"" ring blows. These neat little scuba tank keychains come with
node15:Product from Amazon platform with title and content: Title: Feiyu G3 Steadycam Handheld Gimbal Gopro Hero 3 3+ Brushless Handle Camera Mount. Content: Specification- Handheld brushless two-axis camera mount for photography- Battery: 3x3.7V Li-ion battery- Dynamic precision: 1- Static precision: 0.1- Working voltage: 8-18V- Max.angle: -55~ +55for roll, -180~+60for pitch- Balance stable angle: Roll angle 0, pitch angle -90~ +30FeatureSteadycam, by Steady+ cam (the first three letters of ""camera"") make up, G3 Steadycam handheld gimbal is light weight, easy to carry, simple to use, power-and-go, also has electronic slow to follow mode which a mechanical stabilizer cannot do that, and it can steady the up and down before and after. Compatible use with GOPRO3 , GOPRO3+Convenient and practical power switch design, integration lightweight design and delicate appearance. It can help you easily to achieve the shooting of fast moving, chasing, steering, and low angle.It equipped with four batteries and one battery charge. Each battery type is 16340, and capacity is 1800mAh. You just need to use three batteries and one can be used as backup. The use time is over 2 hours.Kindly remind you: You should first amount the GOPRO to gimbal, then put on the batteries and power on. Otherwise it will cause the phenomena of gimbal disorderly shaking.FY-G3 steadycam gimbal test video: http://youtu.be/jlgZXJBJtT0G3 Steadycam Handheld Gimbal Introduce:http://v.youku.com/v_show/id_XNjc4ODIwNjk2.html
node16:Product from Amazon platform with title and content: Title: Ipow Gopro Case Carry Travel Protective Storage Bag Case Pouch for Gopro Hero 1/2/3/3+ Camera and Accessories (Larger). Content: the Ipow case -Love your Gopro camera ,then choose the Ipow case.If you are not sure how to carry the camera , Batteries ,2 SD cards and so on,Now Stop throwing everything in a bag and get organized with our Ipow Case,which solution for all of your organizational and protective needs.Our case itself has many structure to it and definitely seems to be sturdy enouth,durable and soft inner material ,which can store and provide protection for your equipment.Perfect for throwing in your backpack after skiing ,biking ,surfing and sky diving,etc.In additon ,this compact zip case keeps your GoPro cam perfectly organized and securely protected in any situation and at any given time.Organizes the following. if don't have all that, Less fits too:Gopros,memory card,batteries,Cables,manuals,thumbscrew ,Clip mounts ,Telescoping Extension Pole etcThe large open slot is big enough to store the WiFi remote, mounting adapters, extra camera housing door and even a wall charger.Advantages :The size of the case is large but still lightweight.It's convenient for you to take with your cameras and accessories when you travel outdoor.In addition,because it have compact internal design ,which make it easy for you to access to get the accessories.Because of its big size,not like other small ,it can hold much things as the above describle.So you can take what you want.You need a superior case at an affordable price - Ipow has made it a possibility!Color:BlackSize:LargePacking List:1 x Camera Storage case
node17:Product from Amazon platform with title and content: Title: SANDMARC Anti-Fog Inserts for GoPro&reg; HERO&reg; Cameras - 8 Pack. Content: When taking shots with GoPro under cold conditions, the GoPro housing tends to get warm and create a fog. All your footage, which you thought was epic, is now down the drain covered with fog. The SANDMARC Anti-fog Inserts will do the trick, absorbing fog moisture and keeping your shots on the clear.
node18:Product from Amazon platform with title and content: Title: Smatree 1pc Aluminum Long(2&quot;)Thumbscrew/Thumb Screw Set Mount for GoPro Cameras - Aluminum Bolt Nut Screw Knob-for Sport Camera Gopro Hero Hd, Hero1, Hero2, Hero3 ,Hero3+ and all GoPro Tripod Adapter Mounts and Extension Arms (Black). Content: Smatree 1pc Long(2"")Thumbscrew Set for GoPro Cameras1.Mucheasier to tighten and loosen.2.Features high strength and compressive,durable.3.A small rubber ring at the base is good forconsistent fasteningwithout the need for thread locker materials.4.These screws never loosened a bit,pefect for the Extreme Sports,like Bicycle climbing.Off-road cycling, outdoor rock climbing, mountain downhill, extreme rafting, desert crossing, autocrossThere're four colors available for you to choose,blue,golden,back,silver.5.With our thumbscrew,it will make your gopro cool and awesome.
node19:Product from Amazon platform with title and content: Title: UPSHELF Detachable Umbrella Pole Shelf, Brown. Content: The new, original concept Upshelf is an easily detachable shelf that secures firmly to most sizes of popular umbrella and canopy tent poles (round or square). Whether in your backyard, at the beach, camping, tailgating, flea markets, cafes or patios, you choose the most effective position on the pole for your use, the Upshelf installs in just seconds. Then the Upshelf provides you with a sturdy, secure platform to keep essentials without taking up precious table space. Use it for condiments; salt & pepper shakers, ketchup, mustard, sugar, etc. Load it up with beverages or snacks. Keep the table pretty with flowers on your Upshelf, or set the mood with candles. At the beach, keep sunscreen, cell phones and food out of the sand and when camping, out of the dirt. The detachable Upshelf removes easily from the pole in seconds, without tools, so you can stow it away when folding or moving your umbrella, or collapsing your tent. Dishwasher safe for easy cleaning and UV protected for long life, the durable and tough Upshelf is proudly made in the USA from high quality ABS. Just under 12"" in diameter, the versatile Upshelf is large enough to be useful, but not so big as to get in the way and can hold 10+ lbs.
node20:Product from Amazon platform with title and content: Title: FogFree 15 Anti-Fog Inserts for GoPro HERO3+ HERO3 HERO2 (Original FogFree). Content: What's in the package?The package includes the equivalent to 15 reusable moisture absorbing anti-fog inserts.How to use?Bake the anti-fog inserts at 300F (150C) for 5 minutes to remove any moisture contained in the inserts. Place 2 inserts inside the housing, one on each side of the camera.After following the activation procedure, each pair can be used up to 4-5 times before having to be baked again to remove moisture.CompatibilityFogFree anti-fog inserts are compatible with all GoPro HERO3+, HERO3, HERO2 and HERO housings as well as other camera and housing systems.Disclaimer- Read and follow instructions prior to use;- Keep inserts and plastic packaging away from children;- Make sure that the anti-fog inserts are not obstructing the o-ring seal when closed;- Price does not include camera, housing or any other accessories depicted in the pictures in this listing, other than the anti-fog strips themselves;- Designed for use with GOPRO products. GOPRO is a registered trademarks of Woodman Labs, Inc. in the United States and other countries.
node21:Product from Amazon platform with title and content: Title: POV Case 3.0 Small GoPro-edition Blue (for HD Hero 1,2 3,3+). Content: Instead of wrapping your GoPro in a pair of socks and trusting that it'll stay in one piece, stick it in the SP Gadgets P. O. V. Small Case when you're traveling. The hard nylon shell is full of soft foam, with velour-lined cutouts to hold your camera, BacPac, batteries, remote, extra cables, and all sorts of accessories.
node22:Product from Amazon platform with title and content: Title: Pelican Padded Divider set for the 1450 Case, Single Layer - Grey. Content: Main dividers that span the length of the case are complimented by varying sizes of subdividers.
node23:Product from Amazon platform with title and content: Title: Canon EOS 1Ds Mark II Digital Camera Battery NIMH (2200 mAh) - Replacement for Canon NP-E3 NIMH Battery. Content: SDNPE3 NI-MH Battery - Rechargeable Ultra High Capacity (12V 2200 mAh) - Replacement for Canon NP-E3 Battery
node24:Product from Amazon platform with title and content: Title: GoPro Chest Mount Harness for HERO Cameras. Content: Chest Harness for your quick-release HERO camera. Makes it easy to capture immersive video and photo footage from, well your chest. Perfect for skiing, mountain biking, motocross, paddle sports, or any activity where you want to get a ""lower than the helmet"" view of the action. See more of your arms, knees poles, and skis while skiing or your arms and handlebars while biking or riding your motorcycle. Recommended as a more immersive way to film than on the helmet.",products,nc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Which are less healthy, the cupcakes or the strawberries?

node0:Object in an image. Name: flowers; (x,y,w,h): (351, 219, 59, 35)
node1:Object in an image. Name: glass; (x,y,w,h): (150, 130, 350, 245)
node2:Object in an image. Name: shelf; (x,y,w,h): (0, 169, 174, 47)
node3:Object in an image. Name: strawberries; (x,y,w,h): (272, 267, 19, 21)
node4:Object in an image. Name: food; (x,y,w,h): (339, 128, 26, 26)
node5:Object in an image. Name: food; (x,y,w,h): (395, 118, 31, 25)
node6:Object in an image. Name: sign; (x,y,w,h): (98, 124, 35, 33)
node7:Object in an image. Name: food; (x,y,w,h): (43, 141, 117, 57)
node8:Object in an image. Name: food; (x,y,w,h): (223, 127, 59, 45)
node9:Object in an image. Name: nut; (x,y,w,h): (333, 127, 5, 5)
node10:Object in an image. Name: nut; (x,y,w,h): (327, 127, 5, 5)
node11:Object in an image. Name: cake; attribute: white; (x,y,w,h): (349, 215, 69, 71)
node12:Object in an image. Name: sign; (x,y,w,h): (295, 104, 29, 22)
node13:Object in an image. Name: brownies; (x,y,w,h): (275, 124, 66, 42)
node14:Object in an image. Name: nut; (x,y,w,h): (302, 139, 17, 10)
node15:Object in an image. Name: cheesecake; attribute: large, cream colored; (x,y,w,h): (14, 43, 122, 38)
node16:Object in an image. Name: nut; (x,y,w,h): (303, 127, 10, 8)
node17:Object in an image. Name: tray; attribute: full; (x,y,w,h): (80, 249, 181, 106)
node18:Object in an image. Name: cake; (x,y,w,h): (261, 239, 102, 66)
node19:Object in an image. Name: cupcakes; attribute: on; (x,y,w,h): (93, 112, 136, 73)
node20:Object in an image. Name: tray; (x,y,w,h): (1, 298, 134, 77)

the connection relationship among the nodes mentioned:
 <node1, node2>,<node1, node6>,<node1, node7>,<node1, node18>,<node1, node20>,<node3, node11>,<node3, node17>,<node3, node18>,<node4, node5>,<node4, node8>,<node4, node9>,<node4, node10>,<node4, node13>,<node4, node14>,<node4, node16>,<node4, node19>,<node5, node8>,<node5, node9>,<node5, node10>,<node5, node13>,<node5, node16>,<node6, node8>,<node7, node8>,<node7, node13>,<node8, node9>,<node8, node10>,<node8, node13>,<node8, node14>,<node8, node16>,<node8, node19>,<node9, node10>,<node9, node16>,<node9, node19>,<node10, node16>,<node10, node19>,<node11, node18>,<node12, node19>,<node13, node19>,<node14, node19>,<node16, node19>,<node17, node18>,<node17, node20>,<node19, node2>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",cupcakes,"node0:Object in an image. Name: flowers; (x,y,w,h): (351, 219, 59, 35)
node1:Object in an image. Name: glass; (x,y,w,h): (150, 130, 350, 245)
node2:Object in an image. Name: shelf; (x,y,w,h): (0, 169, 174, 47)
node3:Object in an image. Name: strawberries; (x,y,w,h): (272, 267, 19, 21)
node4:Object in an image. Name: food; (x,y,w,h): (339, 128, 26, 26)
node5:Object in an image. Name: food; (x,y,w,h): (395, 118, 31, 25)
node6:Object in an image. Name: sign; (x,y,w,h): (98, 124, 35, 33)
node7:Object in an image. Name: food; (x,y,w,h): (43, 141, 117, 57)
node8:Object in an image. Name: food; (x,y,w,h): (223, 127, 59, 45)
node9:Object in an image. Name: nut; (x,y,w,h): (333, 127, 5, 5)
node10:Object in an image. Name: nut; (x,y,w,h): (327, 127, 5, 5)
node11:Object in an image. Name: cake; attribute: white; (x,y,w,h): (349, 215, 69, 71)
node12:Object in an image. Name: sign; (x,y,w,h): (295, 104, 29, 22)
node13:Object in an image. Name: brownies; (x,y,w,h): (275, 124, 66, 42)
node14:Object in an image. Name: nut; (x,y,w,h): (302, 139, 17, 10)
node15:Object in an image. Name: cheesecake; attribute: large, cream colored; (x,y,w,h): (14, 43, 122, 38)
node16:Object in an image. Name: nut; (x,y,w,h): (303, 127, 10, 8)
node17:Object in an image. Name: tray; attribute: full; (x,y,w,h): (80, 249, 181, 106)
node18:Object in an image. Name: cake; (x,y,w,h): (261, 239, 102, 66)
node19:Object in an image. Name: cupcakes; attribute: on; (x,y,w,h): (93, 112, 136, 73)
node20:Object in an image. Name: tray; (x,y,w,h): (1, 298, 134, 77)","node0:Object in an image. Name: flowers; (x,y,w,h): (351, 219, 59, 35)
node1:Object in an image. Name: glass; (x,y,w,h): (150, 130, 350, 245)
node2:Object in an image. Name: shelf; (x,y,w,h): (0, 169, 174, 47)
node3:Object in an image. Name: strawberries; (x,y,w,h): (272, 267, 19, 21)
node4:Object in an image. Name: food; (x,y,w,h): (339, 128, 26, 26)
node5:Object in an image. Name: food; (x,y,w,h): (395, 118, 31, 25)
node6:Object in an image. Name: sign; (x,y,w,h): (98, 124, 35, 33)
node7:Object in an image. Name: food; (x,y,w,h): (43, 141, 117, 57)
node8:Object in an image. Name: food; (x,y,w,h): (223, 127, 59, 45)
node9:Object in an image. Name: nut; (x,y,w,h): (333, 127, 5, 5)
node10:Object in an image. Name: nut; (x,y,w,h): (327, 127, 5, 5)
node11:Object in an image. Name: cake; attribute: white; (x,y,w,h): (349, 215, 69, 71)
node12:Object in an image. Name: sign; (x,y,w,h): (295, 104, 29, 22)
node13:Object in an image. Name: brownies; (x,y,w,h): (275, 124, 66, 42)
node14:Object in an image. Name: nut; (x,y,w,h): (302, 139, 17, 10)
node15:Object in an image. Name: cheesecake; attribute: large, cream colored; (x,y,w,h): (14, 43, 122, 38)
node16:Object in an image. Name: nut; (x,y,w,h): (303, 127, 10, 8)
node17:Object in an image. Name: tray; attribute: full; (x,y,w,h): (80, 249, 181, 106)
node18:Object in an image. Name: cake; (x,y,w,h): (261, 239, 102, 66)
node19:Object in an image. Name: cupcakes; attribute: on; (x,y,w,h): (93, 112, 136, 73)
node20:Object in an image. Name: tray; (x,y,w,h): (1, 298, 134, 77)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What is the man that is walking wearing?

node0:Object in an image. Name: woman; (x,y,w,h): (687, 288, 34, 100)
node1:Object in an image. Name: shirt; attribute: orange; (x,y,w,h): (628, 283, 43, 61)
node2:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (570, 296, 28, 37)
node3:Object in an image. Name: shorts; attribute: white; (x,y,w,h): (486, 351, 36, 33)
node4:Object in an image. Name: woman; (x,y,w,h): (4, 293, 65, 95)
node5:Object in an image. Name: water; (x,y,w,h): (0, 287, 247, 95)
node6:Object in an image. Name: woman; attribute: walking; (x,y,w,h): (555, 275, 47, 138)
node7:Object in an image. Name: stroller; (x,y,w,h): (699, 327, 46, 71)
node8:Object in an image. Name: bridge; attribute: wood; (x,y,w,h): (117, 0, 679, 392)
node9:Object in an image. Name: shorts; attribute: blue; (x,y,w,h): (449, 336, 26, 25)
node10:Object in an image. Name: bag; attribute: tan; (x,y,w,h): (570, 299, 32, 66)
node11:Object in an image. Name: man; (x,y,w,h): (480, 261, 47, 191)
node12:Object in an image. Name: shirt; attribute: red; (x,y,w,h): (486, 287, 37, 65)
node13:Object in an image. Name: man; attribute: walking; (x,y,w,h): (444, 278, 36, 108)
node14:Object in an image. Name: cap; attribute: black; (x,y,w,h): (455, 281, 11, 8)
node15:Object in an image. Name: child; attribute: young; (x,y,w,h): (711, 344, 27, 48)
node16:Object in an image. Name: building; attribute: modern; (x,y,w,h): (658, 196, 140, 101)

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node3>,<node0, node6>,<node0, node7>,<node0, node10>,<node0, node11>,<node0, node12>,<node0, node15>,<node1, node2>,<node1, node6>,<node1, node10>,<node1, node11>,<node1, node12>,<node1, node13>,<node1, node14>,<node2, node11>,<node2, node12>,<node2, node13>,<node3, node6>,<node3, node7>,<node3, node13>,<node3, node15>,<node4, node5>,<node4, node8>,<node5, node8>,<node5, node13>,<node6, node7>,<node6, node9>,<node6, node11>,<node6, node12>,<node6, node13>,<node6, node14>,<node6, node15>,<node7, node10>,<node7, node11>,<node9, node10>,<node9, node11>,<node9, node12>,<node10, node11>,<node10, node12>,<node10, node13>,<node11, node13>,<node11, node14>,<node11, node15>,<node12, node13>,<node13, node14>,<node14, node16>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",cap,"node0:Object in an image. Name: woman; (x,y,w,h): (687, 288, 34, 100)
node1:Object in an image. Name: shirt; attribute: orange; (x,y,w,h): (628, 283, 43, 61)
node2:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (570, 296, 28, 37)
node3:Object in an image. Name: shorts; attribute: white; (x,y,w,h): (486, 351, 36, 33)
node4:Object in an image. Name: woman; (x,y,w,h): (4, 293, 65, 95)
node5:Object in an image. Name: water; (x,y,w,h): (0, 287, 247, 95)
node6:Object in an image. Name: woman; attribute: walking; (x,y,w,h): (555, 275, 47, 138)
node7:Object in an image. Name: stroller; (x,y,w,h): (699, 327, 46, 71)
node8:Object in an image. Name: bridge; attribute: wood; (x,y,w,h): (117, 0, 679, 392)
node9:Object in an image. Name: shorts; attribute: blue; (x,y,w,h): (449, 336, 26, 25)
node10:Object in an image. Name: bag; attribute: tan; (x,y,w,h): (570, 299, 32, 66)
node11:Object in an image. Name: man; (x,y,w,h): (480, 261, 47, 191)
node12:Object in an image. Name: shirt; attribute: red; (x,y,w,h): (486, 287, 37, 65)
node13:Object in an image. Name: man; attribute: walking; (x,y,w,h): (444, 278, 36, 108)
node14:Object in an image. Name: cap; attribute: black; (x,y,w,h): (455, 281, 11, 8)
node15:Object in an image. Name: child; attribute: young; (x,y,w,h): (711, 344, 27, 48)
node16:Object in an image. Name: building; attribute: modern; (x,y,w,h): (658, 196, 140, 101)","node0:Object in an image. Name: woman; (x,y,w,h): (687, 288, 34, 100)
node1:Object in an image. Name: shirt; attribute: orange; (x,y,w,h): (628, 283, 43, 61)
node2:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (570, 296, 28, 37)
node3:Object in an image. Name: shorts; attribute: white; (x,y,w,h): (486, 351, 36, 33)
node4:Object in an image. Name: woman; (x,y,w,h): (4, 293, 65, 95)
node5:Object in an image. Name: water; (x,y,w,h): (0, 287, 247, 95)
node6:Object in an image. Name: woman; attribute: walking; (x,y,w,h): (555, 275, 47, 138)
node7:Object in an image. Name: stroller; (x,y,w,h): (699, 327, 46, 71)
node8:Object in an image. Name: bridge; attribute: wood; (x,y,w,h): (117, 0, 679, 392)
node9:Object in an image. Name: shorts; attribute: blue; (x,y,w,h): (449, 336, 26, 25)
node10:Object in an image. Name: bag; attribute: tan; (x,y,w,h): (570, 299, 32, 66)
node11:Object in an image. Name: man; (x,y,w,h): (480, 261, 47, 191)
node12:Object in an image. Name: shirt; attribute: red; (x,y,w,h): (486, 287, 37, 65)
node13:Object in an image. Name: man; attribute: walking; (x,y,w,h): (444, 278, 36, 108)
node14:Object in an image. Name: cap; attribute: black; (x,y,w,h): (455, 281, 11, 8)
node15:Object in an image. Name: child; attribute: young; (x,y,w,h): (711, 344, 27, 48)
node16:Object in an image. Name: building; attribute: modern; (x,y,w,h): (658, 196, 140, 101)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. On which side is the chair?

node0:Object in an image. Name: floor; (x,y,w,h): (54, 145, 367, 227)
node1:Object in an image. Name: ground; (x,y,w,h): (6, 0, 148, 40)
node2:Object in an image. Name: shoe; (x,y,w,h): (236, 285, 32, 24)
node3:Object in an image. Name: man; (x,y,w,h): (194, 91, 116, 218)
node4:Object in an image. Name: head; attribute: bald; (x,y,w,h): (248, 91, 22, 35)
node5:Object in an image. Name: head; (x,y,w,h): (432, 193, 27, 26)
node6:Object in an image. Name: suit; attribute: black; (x,y,w,h): (374, 221, 116, 152)
node7:Object in an image. Name: net; attribute: black; (x,y,w,h): (9, 351, 42, 25)
node8:Object in an image. Name: chair; attribute: green; (x,y,w,h): (368, 270, 132, 103)
node9:Object in an image. Name: man; (x,y,w,h): (373, 193, 117, 184)
node10:Object in an image. Name: racket; (x,y,w,h): (191, 180, 30, 23)

the connection relationship among the nodes mentioned:
 <node0, node5>,<node0, node6>,<node0, node7>,<node0, node8>,<node0, node9>,<node2, node6>,<node2, node8>,<node2, node9>,<node3, node5>,<node3, node6>,<node3, node9>,<node3, node10>,<node9, node8>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",right,"node0:Object in an image. Name: floor; (x,y,w,h): (54, 145, 367, 227)
node1:Object in an image. Name: ground; (x,y,w,h): (6, 0, 148, 40)
node2:Object in an image. Name: shoe; (x,y,w,h): (236, 285, 32, 24)
node3:Object in an image. Name: man; (x,y,w,h): (194, 91, 116, 218)
node4:Object in an image. Name: head; attribute: bald; (x,y,w,h): (248, 91, 22, 35)
node5:Object in an image. Name: head; (x,y,w,h): (432, 193, 27, 26)
node6:Object in an image. Name: suit; attribute: black; (x,y,w,h): (374, 221, 116, 152)
node7:Object in an image. Name: net; attribute: black; (x,y,w,h): (9, 351, 42, 25)
node8:Object in an image. Name: chair; attribute: green; (x,y,w,h): (368, 270, 132, 103)
node9:Object in an image. Name: man; (x,y,w,h): (373, 193, 117, 184)
node10:Object in an image. Name: racket; (x,y,w,h): (191, 180, 30, 23)","node0:Object in an image. Name: floor; (x,y,w,h): (54, 145, 367, 227)
node1:Object in an image. Name: ground; (x,y,w,h): (6, 0, 148, 40)
node2:Object in an image. Name: shoe; (x,y,w,h): (236, 285, 32, 24)
node3:Object in an image. Name: man; (x,y,w,h): (194, 91, 116, 218)
node4:Object in an image. Name: head; attribute: bald; (x,y,w,h): (248, 91, 22, 35)
node5:Object in an image. Name: head; (x,y,w,h): (432, 193, 27, 26)
node6:Object in an image. Name: suit; attribute: black; (x,y,w,h): (374, 221, 116, 152)
node7:Object in an image. Name: net; attribute: black; (x,y,w,h): (9, 351, 42, 25)
node8:Object in an image. Name: chair; attribute: green; (x,y,w,h): (368, 270, 132, 103)
node9:Object in an image. Name: man; (x,y,w,h): (373, 193, 117, 184)
node10:Object in an image. Name: racket; (x,y,w,h): (191, 180, 30, 23)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What kind of animal is in the snow?

node0:Object in an image. Name: paw; (x,y,w,h): (119, 228, 23, 15)
node1:Object in an image. Name: paw; (x,y,w,h): (87, 220, 28, 27)
node2:Object in an image. Name: eye; (x,y,w,h): (275, 159, 5, 4)
node3:Object in an image. Name: rock; (x,y,w,h): (457, 170, 42, 14)
node4:Object in an image. Name: paw; (x,y,w,h): (157, 216, 25, 12)
node5:Object in an image. Name: paw; (x,y,w,h): (73, 240, 25, 14)
node6:Object in an image. Name: bear; attribute: walking; (x,y,w,h): (256, 94, 97, 103)
node7:Object in an image. Name: snow; attribute: white, abundant; (x,y,w,h): (0, 2, 499, 329)
node8:Object in an image. Name: bear; attribute: large, white, walking; (x,y,w,h): (43, 99, 139, 155)
node9:Object in an image. Name: bear; attribute: white, walking, young; (x,y,w,h): (380, 101, 106, 86)
node10:Object in an image. Name: leg; (x,y,w,h): (87, 176, 43, 73)
node11:Object in an image. Name: eye; (x,y,w,h): (66, 176, 7, 5)
node12:Object in an image. Name: nose; attribute: black; (x,y,w,h): (51, 195, 11, 8)
node13:Object in an image. Name: ear; (x,y,w,h): (85, 152, 13, 13)

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node10>,<node1, node4>,<node2, node8>,<node2, node9>,<node3, node6>,<node3, node9>,<node4, node10>,<node5, node10>,<node6, node7>,<node6, node8>,<node6, node9>,<node8, node7>,<node9, node7>,<node10, node11>,<node10, node12>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",bear,"node0:Object in an image. Name: paw; (x,y,w,h): (119, 228, 23, 15)
node1:Object in an image. Name: paw; (x,y,w,h): (87, 220, 28, 27)
node2:Object in an image. Name: eye; (x,y,w,h): (275, 159, 5, 4)
node3:Object in an image. Name: rock; (x,y,w,h): (457, 170, 42, 14)
node4:Object in an image. Name: paw; (x,y,w,h): (157, 216, 25, 12)
node5:Object in an image. Name: paw; (x,y,w,h): (73, 240, 25, 14)
node6:Object in an image. Name: bear; attribute: walking; (x,y,w,h): (256, 94, 97, 103)
node7:Object in an image. Name: snow; attribute: white, abundant; (x,y,w,h): (0, 2, 499, 329)
node8:Object in an image. Name: bear; attribute: large, white, walking; (x,y,w,h): (43, 99, 139, 155)
node9:Object in an image. Name: bear; attribute: white, walking, young; (x,y,w,h): (380, 101, 106, 86)
node10:Object in an image. Name: leg; (x,y,w,h): (87, 176, 43, 73)
node11:Object in an image. Name: eye; (x,y,w,h): (66, 176, 7, 5)
node12:Object in an image. Name: nose; attribute: black; (x,y,w,h): (51, 195, 11, 8)
node13:Object in an image. Name: ear; (x,y,w,h): (85, 152, 13, 13)","node0:Object in an image. Name: paw; (x,y,w,h): (119, 228, 23, 15)
node1:Object in an image. Name: paw; (x,y,w,h): (87, 220, 28, 27)
node2:Object in an image. Name: eye; (x,y,w,h): (275, 159, 5, 4)
node3:Object in an image. Name: rock; (x,y,w,h): (457, 170, 42, 14)
node4:Object in an image. Name: paw; (x,y,w,h): (157, 216, 25, 12)
node5:Object in an image. Name: paw; (x,y,w,h): (73, 240, 25, 14)
node6:Object in an image. Name: bear; attribute: walking; (x,y,w,h): (256, 94, 97, 103)
node7:Object in an image. Name: snow; attribute: white, abundant; (x,y,w,h): (0, 2, 499, 329)
node8:Object in an image. Name: bear; attribute: large, white, walking; (x,y,w,h): (43, 99, 139, 155)
node9:Object in an image. Name: bear; attribute: white, walking, young; (x,y,w,h): (380, 101, 106, 86)
node10:Object in an image. Name: leg; (x,y,w,h): (87, 176, 43, 73)
node11:Object in an image. Name: eye; (x,y,w,h): (66, 176, 7, 5)
node12:Object in an image. Name: nose; attribute: black; (x,y,w,h): (51, 195, 11, 8)
node13:Object in an image. Name: ear; (x,y,w,h): (85, 152, 13, 13)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Does the checkered shirt appear to be white?

node0:Object in an image. Name: bag; attribute: leather; (x,y,w,h): (393, 124, 40, 94)
node1:Object in an image. Name: leaves; attribute: green; (x,y,w,h): (408, 25, 42, 29)
node2:Object in an image. Name: watch; attribute: gold; (x,y,w,h): (307, 191, 13, 8)
node3:Object in an image. Name: cap; attribute: worn; (x,y,w,h): (123, 49, 38, 25)
node4:Object in an image. Name: elephant; attribute: colorful; (x,y,w,h): (133, 156, 32, 25)
node5:Object in an image. Name: field; attribute: grassy; (x,y,w,h): (324, 153, 75, 159)
node6:Object in an image. Name: fence; attribute: tan, wood; (x,y,w,h): (29, 87, 44, 53)
node7:Object in an image. Name: palm tree; attribute: green; (x,y,w,h): (366, 13, 106, 49)
node8:Object in an image. Name: plant; attribute: green; (x,y,w,h): (3, 7, 116, 81)
node9:Object in an image. Name: grass; attribute: dry, brown; (x,y,w,h): (321, 133, 73, 56)
node10:Object in an image. Name: umbrella; attribute: large, white; (x,y,w,h): (364, 83, 112, 106)
node11:Object in an image. Name: man; attribute: walking; (x,y,w,h): (76, 49, 124, 287)
node12:Object in an image. Name: shirt; attribute: checkered, plaid, red; (x,y,w,h): (252, 113, 70, 103)
node13:Object in an image. Name: animal; attribute: blond; (x,y,w,h): (417, 80, 19, 11)
node14:Object in an image. Name: shirt; attribute: blue; (x,y,w,h): (203, 91, 75, 111)
node15:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (78, 84, 102, 128)
node16:Object in an image. Name: sandal; (x,y,w,h): (77, 313, 38, 13)
node17:Object in an image. Name: woman; (x,y,w,h): (387, 94, 67, 223)
node18:Object in an image. Name: shoe; (x,y,w,h): (407, 303, 40, 16)
node19:Object in an image. Name: men; attribute: smiling, happy; (x,y,w,h): (247, 81, 82, 239)
node20:Object in an image. Name: building; attribute: small, brown; (x,y,w,h): (56, 4, 286, 110)
node21:Object in an image. Name: skirt; attribute: gray; (x,y,w,h): (255, 196, 74, 118)
node22:Object in an image. Name: ceiling; (x,y,w,h): (56, 18, 127, 48)
node23:Object in an image. Name: house; attribute: brown; (x,y,w,h): (54, 4, 188, 110)

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node5>,<node0, node9>,<node0, node12>,<node0, node14>,<node0, node19>,<node1, node20>,<node2, node5>,<node2, node11>,<node2, node14>,<node2, node17>,<node3, node8>,<node4, node12>,<node4, node14>,<node4, node19>,<node5, node11>,<node5, node12>,<node5, node17>,<node5, node18>,<node5, node19>,<node5, node21>,<node6, node11>,<node6, node15>,<node7, node20>,<node7, node23>,<node9, node10>,<node9, node11>,<node9, node12>,<node9, node14>,<node9, node17>,<node9, node19>,<node10, node12>,<node10, node14>,<node10, node19>,<node11, node12>,<node11, node14>,<node11, node19>,<node11, node21>,<node12, node14>,<node12, node15>,<node12, node17>,<node13, node19>,<node13, node20>,<node14, node15>,<node14, node17>,<node14, node19>,<node15, node19>,<node17, node19>,<node17, node21>,<node18, node19>,<node18, node21>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",no,"node0:Object in an image. Name: bag; attribute: leather; (x,y,w,h): (393, 124, 40, 94)
node1:Object in an image. Name: leaves; attribute: green; (x,y,w,h): (408, 25, 42, 29)
node2:Object in an image. Name: watch; attribute: gold; (x,y,w,h): (307, 191, 13, 8)
node3:Object in an image. Name: cap; attribute: worn; (x,y,w,h): (123, 49, 38, 25)
node4:Object in an image. Name: elephant; attribute: colorful; (x,y,w,h): (133, 156, 32, 25)
node5:Object in an image. Name: field; attribute: grassy; (x,y,w,h): (324, 153, 75, 159)
node6:Object in an image. Name: fence; attribute: tan, wood; (x,y,w,h): (29, 87, 44, 53)
node7:Object in an image. Name: palm tree; attribute: green; (x,y,w,h): (366, 13, 106, 49)
node8:Object in an image. Name: plant; attribute: green; (x,y,w,h): (3, 7, 116, 81)
node9:Object in an image. Name: grass; attribute: dry, brown; (x,y,w,h): (321, 133, 73, 56)
node10:Object in an image. Name: umbrella; attribute: large, white; (x,y,w,h): (364, 83, 112, 106)
node11:Object in an image. Name: man; attribute: walking; (x,y,w,h): (76, 49, 124, 287)
node12:Object in an image. Name: shirt; attribute: checkered, plaid, red; (x,y,w,h): (252, 113, 70, 103)
node13:Object in an image. Name: animal; attribute: blond; (x,y,w,h): (417, 80, 19, 11)
node14:Object in an image. Name: shirt; attribute: blue; (x,y,w,h): (203, 91, 75, 111)
node15:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (78, 84, 102, 128)
node16:Object in an image. Name: sandal; (x,y,w,h): (77, 313, 38, 13)
node17:Object in an image. Name: woman; (x,y,w,h): (387, 94, 67, 223)
node18:Object in an image. Name: shoe; (x,y,w,h): (407, 303, 40, 16)
node19:Object in an image. Name: men; attribute: smiling, happy; (x,y,w,h): (247, 81, 82, 239)
node20:Object in an image. Name: building; attribute: small, brown; (x,y,w,h): (56, 4, 286, 110)
node21:Object in an image. Name: skirt; attribute: gray; (x,y,w,h): (255, 196, 74, 118)
node22:Object in an image. Name: ceiling; (x,y,w,h): (56, 18, 127, 48)
node23:Object in an image. Name: house; attribute: brown; (x,y,w,h): (54, 4, 188, 110)","node0:Object in an image. Name: bag; attribute: leather; (x,y,w,h): (393, 124, 40, 94)
node1:Object in an image. Name: leaves; attribute: green; (x,y,w,h): (408, 25, 42, 29)
node2:Object in an image. Name: watch; attribute: gold; (x,y,w,h): (307, 191, 13, 8)
node3:Object in an image. Name: cap; attribute: worn; (x,y,w,h): (123, 49, 38, 25)
node4:Object in an image. Name: elephant; attribute: colorful; (x,y,w,h): (133, 156, 32, 25)
node5:Object in an image. Name: field; attribute: grassy; (x,y,w,h): (324, 153, 75, 159)
node6:Object in an image. Name: fence; attribute: tan, wood; (x,y,w,h): (29, 87, 44, 53)
node7:Object in an image. Name: palm tree; attribute: green; (x,y,w,h): (366, 13, 106, 49)
node8:Object in an image. Name: plant; attribute: green; (x,y,w,h): (3, 7, 116, 81)
node9:Object in an image. Name: grass; attribute: dry, brown; (x,y,w,h): (321, 133, 73, 56)
node10:Object in an image. Name: umbrella; attribute: large, white; (x,y,w,h): (364, 83, 112, 106)
node11:Object in an image. Name: man; attribute: walking; (x,y,w,h): (76, 49, 124, 287)
node12:Object in an image. Name: shirt; attribute: checkered, plaid, red; (x,y,w,h): (252, 113, 70, 103)
node13:Object in an image. Name: animal; attribute: blond; (x,y,w,h): (417, 80, 19, 11)
node14:Object in an image. Name: shirt; attribute: blue; (x,y,w,h): (203, 91, 75, 111)
node15:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (78, 84, 102, 128)
node16:Object in an image. Name: sandal; (x,y,w,h): (77, 313, 38, 13)
node17:Object in an image. Name: woman; (x,y,w,h): (387, 94, 67, 223)
node18:Object in an image. Name: shoe; (x,y,w,h): (407, 303, 40, 16)
node19:Object in an image. Name: men; attribute: smiling, happy; (x,y,w,h): (247, 81, 82, 239)
node20:Object in an image. Name: building; attribute: small, brown; (x,y,w,h): (56, 4, 286, 110)
node21:Object in an image. Name: skirt; attribute: gray; (x,y,w,h): (255, 196, 74, 118)
node22:Object in an image. Name: ceiling; (x,y,w,h): (56, 18, 127, 48)
node23:Object in an image. Name: house; attribute: brown; (x,y,w,h): (54, 4, 188, 110)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Who is wearing a hat?

node0:Object in an image. Name: backpack; (x,y,w,h): (321, 120, 23, 35)
node1:Object in an image. Name: man; (x,y,w,h): (303, 106, 40, 102)
node2:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (305, 121, 35, 35)
node3:Object in an image. Name: person; (x,y,w,h): (404, 109, 63, 107)
node4:Object in an image. Name: dirt; attribute: red; (x,y,w,h): (1, 132, 499, 194)
node5:Object in an image. Name: roof; attribute: pointy; (x,y,w,h): (388, 48, 112, 42)
node6:Object in an image. Name: horse; attribute: standing, brown; (x,y,w,h): (139, 120, 158, 183)
node7:Object in an image. Name: clothes; attribute: white; (x,y,w,h): (433, 202, 36, 66)
node8:Object in an image. Name: tail; (x,y,w,h): (271, 166, 26, 47)
node9:Object in an image. Name: tail; (x,y,w,h): (42, 154, 26, 63)
node10:Object in an image. Name: man; (x,y,w,h): (19, 130, 31, 90)
node11:Object in an image. Name: cap; attribute: tan; (x,y,w,h): (399, 102, 9, 6)
node12:Object in an image. Name: blanket; attribute: blue; (x,y,w,h): (182, 152, 59, 41)
node13:Object in an image. Name: people; (x,y,w,h): (264, 112, 16, 48)
node14:Object in an image. Name: horse; attribute: standing, brown; (x,y,w,h): (41, 129, 105, 118)
node15:Object in an image. Name: pine tree; attribute: tall; (x,y,w,h): (0, 0, 500, 148)
node16:Object in an image. Name: leg; (x,y,w,h): (128, 184, 9, 42)
node17:Object in an image. Name: hat; (x,y,w,h): (211, 122, 26, 21)
node18:Object in an image. Name: boots; (x,y,w,h): (29, 211, 20, 9)
node19:Object in an image. Name: man; (x,y,w,h): (383, 107, 29, 87)
node20:Object in an image. Name: boots; (x,y,w,h): (204, 226, 33, 30)
node21:Object in an image. Name: guy; (x,y,w,h): (204, 123, 34, 134)
node22:Object in an image. Name: boy; attribute: little; (x,y,w,h): (433, 180, 38, 125)
node23:Object in an image. Name: leg; (x,y,w,h): (59, 178, 15, 51)
node24:Object in an image. Name: sandals; (x,y,w,h): (436, 282, 34, 23)
node25:Object in an image. Name: people; (x,y,w,h): (341, 109, 18, 93)
node26:Object in an image. Name: leg; (x,y,w,h): (68, 182, 24, 52)
node27:Object in an image. Name: leg; (x,y,w,h): (115, 183, 16, 47)

the connection relationship among the nodes mentioned:
 <node0, node3>,<node0, node6>,<node0, node13>,<node0, node17>,<node0, node19>,<node0, node21>,<node0, node25>,<node1, node0>,<node1, node2>,<node1, node3>,<node1, node6>,<node1, node8>,<node1, node12>,<node1, node13>,<node1, node17>,<node1, node19>,<node1, node21>,<node1, node25>,<node2, node3>,<node2, node6>,<node2, node13>,<node2, node17>,<node2, node19>,<node2, node21>,<node2, node25>,<node3, node6>,<node3, node8>,<node3, node13>,<node3, node19>,<node3, node25>,<node6, node4>,<node6, node9>,<node6, node10>,<node6, node14>,<node6, node16>,<node6, node18>,<node6, node19>,<node6, node23>,<node6, node25>,<node6, node26>,<node6, node27>,<node8, node12>,<node8, node19>,<node8, node21>,<node8, node25>,<node9, node10>,<node9, node12>,<node9, node16>,<node9, node18>,<node9, node26>,<node9, node27>,<node10, node14>,<node10, node16>,<node10, node23>,<node10, node26>,<node10, node27>,<node12, node6>,<node12, node14>,<node12, node25>,<node13, node14>,<node13, node17>,<node13, node19>,<node13, node21>,<node13, node25>,<node14, node4>,<node14, node17>,<node14, node18>,<node14, node20>,<node14, node21>,<node16, node18>,<node16, node21>,<node16, node23>,<node16, node26>,<node16, node27>,<node17, node25>,<node18, node23>,<node18, node26>,<node18, node27>,<node19, node11>,<node19, node25>,<node21, node6>,<node21, node17>,<node21, node20>,<node21, node25>,<node21, node26>,<node21, node27>,<node22, node7>,<node22, node24>,<node23, node26>,<node23, node27>,<node26, node27>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",guy,"node0:Object in an image. Name: backpack; (x,y,w,h): (321, 120, 23, 35)
node1:Object in an image. Name: man; (x,y,w,h): (303, 106, 40, 102)
node2:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (305, 121, 35, 35)
node3:Object in an image. Name: person; (x,y,w,h): (404, 109, 63, 107)
node4:Object in an image. Name: dirt; attribute: red; (x,y,w,h): (1, 132, 499, 194)
node5:Object in an image. Name: roof; attribute: pointy; (x,y,w,h): (388, 48, 112, 42)
node6:Object in an image. Name: horse; attribute: standing, brown; (x,y,w,h): (139, 120, 158, 183)
node7:Object in an image. Name: clothes; attribute: white; (x,y,w,h): (433, 202, 36, 66)
node8:Object in an image. Name: tail; (x,y,w,h): (271, 166, 26, 47)
node9:Object in an image. Name: tail; (x,y,w,h): (42, 154, 26, 63)
node10:Object in an image. Name: man; (x,y,w,h): (19, 130, 31, 90)
node11:Object in an image. Name: cap; attribute: tan; (x,y,w,h): (399, 102, 9, 6)
node12:Object in an image. Name: blanket; attribute: blue; (x,y,w,h): (182, 152, 59, 41)
node13:Object in an image. Name: people; (x,y,w,h): (264, 112, 16, 48)
node14:Object in an image. Name: horse; attribute: standing, brown; (x,y,w,h): (41, 129, 105, 118)
node15:Object in an image. Name: pine tree; attribute: tall; (x,y,w,h): (0, 0, 500, 148)
node16:Object in an image. Name: leg; (x,y,w,h): (128, 184, 9, 42)
node17:Object in an image. Name: hat; (x,y,w,h): (211, 122, 26, 21)
node18:Object in an image. Name: boots; (x,y,w,h): (29, 211, 20, 9)
node19:Object in an image. Name: man; (x,y,w,h): (383, 107, 29, 87)
node20:Object in an image. Name: boots; (x,y,w,h): (204, 226, 33, 30)
node21:Object in an image. Name: guy; (x,y,w,h): (204, 123, 34, 134)
node22:Object in an image. Name: boy; attribute: little; (x,y,w,h): (433, 180, 38, 125)
node23:Object in an image. Name: leg; (x,y,w,h): (59, 178, 15, 51)
node24:Object in an image. Name: sandals; (x,y,w,h): (436, 282, 34, 23)
node25:Object in an image. Name: people; (x,y,w,h): (341, 109, 18, 93)
node26:Object in an image. Name: leg; (x,y,w,h): (68, 182, 24, 52)
node27:Object in an image. Name: leg; (x,y,w,h): (115, 183, 16, 47)","node0:Object in an image. Name: backpack; (x,y,w,h): (321, 120, 23, 35)
node1:Object in an image. Name: man; (x,y,w,h): (303, 106, 40, 102)
node2:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (305, 121, 35, 35)
node3:Object in an image. Name: person; (x,y,w,h): (404, 109, 63, 107)
node4:Object in an image. Name: dirt; attribute: red; (x,y,w,h): (1, 132, 499, 194)
node5:Object in an image. Name: roof; attribute: pointy; (x,y,w,h): (388, 48, 112, 42)
node6:Object in an image. Name: horse; attribute: standing, brown; (x,y,w,h): (139, 120, 158, 183)
node7:Object in an image. Name: clothes; attribute: white; (x,y,w,h): (433, 202, 36, 66)
node8:Object in an image. Name: tail; (x,y,w,h): (271, 166, 26, 47)
node9:Object in an image. Name: tail; (x,y,w,h): (42, 154, 26, 63)
node10:Object in an image. Name: man; (x,y,w,h): (19, 130, 31, 90)
node11:Object in an image. Name: cap; attribute: tan; (x,y,w,h): (399, 102, 9, 6)
node12:Object in an image. Name: blanket; attribute: blue; (x,y,w,h): (182, 152, 59, 41)
node13:Object in an image. Name: people; (x,y,w,h): (264, 112, 16, 48)
node14:Object in an image. Name: horse; attribute: standing, brown; (x,y,w,h): (41, 129, 105, 118)
node15:Object in an image. Name: pine tree; attribute: tall; (x,y,w,h): (0, 0, 500, 148)
node16:Object in an image. Name: leg; (x,y,w,h): (128, 184, 9, 42)
node17:Object in an image. Name: hat; (x,y,w,h): (211, 122, 26, 21)
node18:Object in an image. Name: boots; (x,y,w,h): (29, 211, 20, 9)
node19:Object in an image. Name: man; (x,y,w,h): (383, 107, 29, 87)
node20:Object in an image. Name: boots; (x,y,w,h): (204, 226, 33, 30)
node21:Object in an image. Name: guy; (x,y,w,h): (204, 123, 34, 134)
node22:Object in an image. Name: boy; attribute: little; (x,y,w,h): (433, 180, 38, 125)
node23:Object in an image. Name: leg; (x,y,w,h): (59, 178, 15, 51)
node24:Object in an image. Name: sandals; (x,y,w,h): (436, 282, 34, 23)
node25:Object in an image. Name: people; (x,y,w,h): (341, 109, 18, 93)
node26:Object in an image. Name: leg; (x,y,w,h): (68, 182, 24, 52)
node27:Object in an image. Name: leg; (x,y,w,h): (115, 183, 16, 47)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Is the bag in the bottom part or in the top of the photo?

node0:Object in an image. Name: man; (x,y,w,h): (336, 313, 120, 168)
node1:Object in an image. Name: jacket; attribute: blue; (x,y,w,h): (354, 352, 95, 128)
node2:Object in an image. Name: face; (x,y,w,h): (536, 69, 184, 271)
node3:Object in an image. Name: field; attribute: baseball; (x,y,w,h): (0, 366, 197, 189)
node4:Object in an image. Name: plate; (x,y,w,h): (288, 594, 325, 167)
node5:Object in an image. Name: mouth; (x,y,w,h): (584, 262, 74, 29)
node6:Object in an image. Name: napkin; attribute: brown; (x,y,w,h): (408, 520, 213, 141)
node7:Object in an image. Name: bag; (x,y,w,h): (377, 551, 172, 99)
node8:Object in an image. Name: stadium; (x,y,w,h): (0, 0, 1022, 763)
node9:Object in an image. Name: jacket; attribute: black; (x,y,w,h): (195, 423, 187, 194)
node10:Object in an image. Name: man; (x,y,w,h): (865, 0, 158, 241)
node11:Object in an image. Name: cap; attribute: gray; (x,y,w,h): (339, 314, 71, 34)
node12:Object in an image. Name: woman; (x,y,w,h): (0, 448, 288, 317)
node13:Object in an image. Name: cheese; (x,y,w,h): (326, 634, 271, 104)
node14:Object in an image. Name: guy; (x,y,w,h): (288, 51, 681, 716)
node15:Object in an image. Name: jacket; attribute: black; (x,y,w,h): (493, 255, 484, 510)
node16:Object in an image. Name: man; (x,y,w,h): (173, 383, 208, 248)
node17:Object in an image. Name: pole; (x,y,w,h): (236, 155, 13, 237)
node18:Object in an image. Name: eye glasses; (x,y,w,h): (534, 157, 176, 89)
node19:Object in an image. Name: chair; (x,y,w,h): (944, 528, 80, 237)
node20:Object in an image. Name: number; (x,y,w,h): (1005, 576, 13, 19)

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node3>,<node0, node11>,<node0, node15>,<node0, node16>,<node1, node3>,<node1, node15>,<node1, node16>,<node2, node10>,<node2, node11>,<node3, node9>,<node3, node14>,<node3, node16>,<node4, node12>,<node4, node15>,<node5, node2>,<node6, node9>,<node6, node12>,<node6, node16>,<node7, node9>,<node7, node12>,<node7, node15>,<node7, node16>,<node9, node12>,<node9, node15>,<node10, node18>,<node11, node15>,<node11, node17>,<node12, node13>,<node12, node14>,<node12, node15>,<node13, node4>,<node13, node15>,<node14, node16>,<node14, node17>,<node14, node18>,<node14, node19>,<node14, node20>,<node15, node16>,<node15, node17>,<node15, node19>,<node15, node20>,<node16, node9>,<node17, node3>,<node20, node19>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",bottom,"node0:Object in an image. Name: man; (x,y,w,h): (336, 313, 120, 168)
node1:Object in an image. Name: jacket; attribute: blue; (x,y,w,h): (354, 352, 95, 128)
node2:Object in an image. Name: face; (x,y,w,h): (536, 69, 184, 271)
node3:Object in an image. Name: field; attribute: baseball; (x,y,w,h): (0, 366, 197, 189)
node4:Object in an image. Name: plate; (x,y,w,h): (288, 594, 325, 167)
node5:Object in an image. Name: mouth; (x,y,w,h): (584, 262, 74, 29)
node6:Object in an image. Name: napkin; attribute: brown; (x,y,w,h): (408, 520, 213, 141)
node7:Object in an image. Name: bag; (x,y,w,h): (377, 551, 172, 99)
node8:Object in an image. Name: stadium; (x,y,w,h): (0, 0, 1022, 763)
node9:Object in an image. Name: jacket; attribute: black; (x,y,w,h): (195, 423, 187, 194)
node10:Object in an image. Name: man; (x,y,w,h): (865, 0, 158, 241)
node11:Object in an image. Name: cap; attribute: gray; (x,y,w,h): (339, 314, 71, 34)
node12:Object in an image. Name: woman; (x,y,w,h): (0, 448, 288, 317)
node13:Object in an image. Name: cheese; (x,y,w,h): (326, 634, 271, 104)
node14:Object in an image. Name: guy; (x,y,w,h): (288, 51, 681, 716)
node15:Object in an image. Name: jacket; attribute: black; (x,y,w,h): (493, 255, 484, 510)
node16:Object in an image. Name: man; (x,y,w,h): (173, 383, 208, 248)
node17:Object in an image. Name: pole; (x,y,w,h): (236, 155, 13, 237)
node18:Object in an image. Name: eye glasses; (x,y,w,h): (534, 157, 176, 89)
node19:Object in an image. Name: chair; (x,y,w,h): (944, 528, 80, 237)
node20:Object in an image. Name: number; (x,y,w,h): (1005, 576, 13, 19)","node0:Object in an image. Name: man; (x,y,w,h): (336, 313, 120, 168)
node1:Object in an image. Name: jacket; attribute: blue; (x,y,w,h): (354, 352, 95, 128)
node2:Object in an image. Name: face; (x,y,w,h): (536, 69, 184, 271)
node3:Object in an image. Name: field; attribute: baseball; (x,y,w,h): (0, 366, 197, 189)
node4:Object in an image. Name: plate; (x,y,w,h): (288, 594, 325, 167)
node5:Object in an image. Name: mouth; (x,y,w,h): (584, 262, 74, 29)
node6:Object in an image. Name: napkin; attribute: brown; (x,y,w,h): (408, 520, 213, 141)
node7:Object in an image. Name: bag; (x,y,w,h): (377, 551, 172, 99)
node8:Object in an image. Name: stadium; (x,y,w,h): (0, 0, 1022, 763)
node9:Object in an image. Name: jacket; attribute: black; (x,y,w,h): (195, 423, 187, 194)
node10:Object in an image. Name: man; (x,y,w,h): (865, 0, 158, 241)
node11:Object in an image. Name: cap; attribute: gray; (x,y,w,h): (339, 314, 71, 34)
node12:Object in an image. Name: woman; (x,y,w,h): (0, 448, 288, 317)
node13:Object in an image. Name: cheese; (x,y,w,h): (326, 634, 271, 104)
node14:Object in an image. Name: guy; (x,y,w,h): (288, 51, 681, 716)
node15:Object in an image. Name: jacket; attribute: black; (x,y,w,h): (493, 255, 484, 510)
node16:Object in an image. Name: man; (x,y,w,h): (173, 383, 208, 248)
node17:Object in an image. Name: pole; (x,y,w,h): (236, 155, 13, 237)
node18:Object in an image. Name: eye glasses; (x,y,w,h): (534, 157, 176, 89)
node19:Object in an image. Name: chair; (x,y,w,h): (944, 528, 80, 237)
node20:Object in an image. Name: number; (x,y,w,h): (1005, 576, 13, 19)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Where is the canopy?

node0:Object in an image. Name: legs; (x,y,w,h): (430, 193, 56, 139)
node1:Object in an image. Name: wheel; (x,y,w,h): (20, 192, 107, 102)
node2:Object in an image. Name: window; (x,y,w,h): (45, 86, 130, 54)
node3:Object in an image. Name: tongue; (x,y,w,h): (204, 186, 19, 13)
node4:Object in an image. Name: ear; (x,y,w,h): (243, 113, 27, 32)
node5:Object in an image. Name: head; (x,y,w,h): (188, 109, 82, 95)
node6:Object in an image. Name: nose; (x,y,w,h): (193, 162, 24, 14)
node7:Object in an image. Name: eye; (x,y,w,h): (220, 134, 12, 8)
node8:Object in an image. Name: man; (x,y,w,h): (263, 0, 129, 332)
node9:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (283, 0, 109, 144)
node10:Object in an image. Name: jeans; (x,y,w,h): (221, 194, 55, 120)
node11:Object in an image. Name: street sign; attribute: metal; (x,y,w,h): (65, 22, 20, 32)
node12:Object in an image. Name: car; attribute: yellow; (x,y,w,h): (0, 84, 427, 214)
node13:Object in an image. Name: pole; (x,y,w,h): (70, 52, 8, 66)
node14:Object in an image. Name: road; (x,y,w,h): (0, 258, 499, 74)
node15:Object in an image. Name: window; (x,y,w,h): (371, 34, 55, 110)
node16:Object in an image. Name: man; (x,y,w,h): (71, 48, 71, 67)
node17:Object in an image. Name: hair; (x,y,w,h): (193, 0, 95, 60)
node18:Object in an image. Name: paper; (x,y,w,h): (47, 91, 115, 49)
node19:Object in an image. Name: spots; (x,y,w,h): (287, 224, 17, 19)
node20:Object in an image. Name: legs; (x,y,w,h): (260, 262, 69, 70)
node21:Object in an image. Name: dog; attribute: white; (x,y,w,h): (187, 109, 312, 223)
node22:Object in an image. Name: couple; (x,y,w,h): (168, 0, 224, 332)
node23:Object in an image. Name: canopy; (x,y,w,h): (0, 0, 499, 41)
node24:Object in an image. Name: shirt; attribute: yellow; (x,y,w,h): (433, 90, 25, 60)
node25:Object in an image. Name: mirror; (x,y,w,h): (159, 116, 28, 17)
node26:Object in an image. Name: woman; attribute: blond; (x,y,w,h): (166, 0, 124, 332)
node27:Object in an image. Name: person; (x,y,w,h): (434, 67, 58, 98)

the connection relationship among the nodes mentioned:
 <node0, node8>,<node0, node12>,<node0, node20>,<node0, node21>,<node0, node22>,<node1, node10>,<node1, node21>,<node1, node22>,<node1, node26>,<node2, node4>,<node2, node5>,<node2, node7>,<node2, node8>,<node2, node9>,<node2, node21>,<node2, node22>,<node2, node26>,<node3, node8>,<node3, node21>,<node4, node7>,<node4, node8>,<node4, node9>,<node4, node15>,<node4, node18>,<node4, node25>,<node5, node8>,<node5, node18>,<node5, node21>,<node5, node25>,<node6, node8>,<node6, node21>,<node7, node8>,<node7, node9>,<node7, node18>,<node8, node9>,<node8, node10>,<node8, node15>,<node8, node16>,<node8, node17>,<node8, node18>,<node8, node21>,<node8, node24>,<node8, node25>,<node8, node26>,<node8, node27>,<node9, node15>,<node9, node17>,<node9, node18>,<node9, node24>,<node9, node25>,<node9, node26>,<node9, node27>,<node10, node19>,<node10, node20>,<node11, node13>,<node11, node17>,<node11, node22>,<node11, node26>,<node12, node24>,<node12, node27>,<node13, node22>,<node13, node26>,<node15, node22>,<node15, node24>,<node15, node26>,<node15, node27>,<node16, node22>,<node16, node26>,<node18, node21>,<node18, node22>,<node18, node25>,<node18, node26>,<node19, node26>,<node20, node21>,<node20, node26>,<node21, node14>,<node21, node25>,<node22, node24>,<node22, node27>,<node23, node14>,<node26, node10>,<node26, node14>,<node27, node24>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",road,"node0:Object in an image. Name: legs; (x,y,w,h): (430, 193, 56, 139)
node1:Object in an image. Name: wheel; (x,y,w,h): (20, 192, 107, 102)
node2:Object in an image. Name: window; (x,y,w,h): (45, 86, 130, 54)
node3:Object in an image. Name: tongue; (x,y,w,h): (204, 186, 19, 13)
node4:Object in an image. Name: ear; (x,y,w,h): (243, 113, 27, 32)
node5:Object in an image. Name: head; (x,y,w,h): (188, 109, 82, 95)
node6:Object in an image. Name: nose; (x,y,w,h): (193, 162, 24, 14)
node7:Object in an image. Name: eye; (x,y,w,h): (220, 134, 12, 8)
node8:Object in an image. Name: man; (x,y,w,h): (263, 0, 129, 332)
node9:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (283, 0, 109, 144)
node10:Object in an image. Name: jeans; (x,y,w,h): (221, 194, 55, 120)
node11:Object in an image. Name: street sign; attribute: metal; (x,y,w,h): (65, 22, 20, 32)
node12:Object in an image. Name: car; attribute: yellow; (x,y,w,h): (0, 84, 427, 214)
node13:Object in an image. Name: pole; (x,y,w,h): (70, 52, 8, 66)
node14:Object in an image. Name: road; (x,y,w,h): (0, 258, 499, 74)
node15:Object in an image. Name: window; (x,y,w,h): (371, 34, 55, 110)
node16:Object in an image. Name: man; (x,y,w,h): (71, 48, 71, 67)
node17:Object in an image. Name: hair; (x,y,w,h): (193, 0, 95, 60)
node18:Object in an image. Name: paper; (x,y,w,h): (47, 91, 115, 49)
node19:Object in an image. Name: spots; (x,y,w,h): (287, 224, 17, 19)
node20:Object in an image. Name: legs; (x,y,w,h): (260, 262, 69, 70)
node21:Object in an image. Name: dog; attribute: white; (x,y,w,h): (187, 109, 312, 223)
node22:Object in an image. Name: couple; (x,y,w,h): (168, 0, 224, 332)
node23:Object in an image. Name: canopy; (x,y,w,h): (0, 0, 499, 41)
node24:Object in an image. Name: shirt; attribute: yellow; (x,y,w,h): (433, 90, 25, 60)
node25:Object in an image. Name: mirror; (x,y,w,h): (159, 116, 28, 17)
node26:Object in an image. Name: woman; attribute: blond; (x,y,w,h): (166, 0, 124, 332)
node27:Object in an image. Name: person; (x,y,w,h): (434, 67, 58, 98)","node0:Object in an image. Name: legs; (x,y,w,h): (430, 193, 56, 139)
node1:Object in an image. Name: wheel; (x,y,w,h): (20, 192, 107, 102)
node2:Object in an image. Name: window; (x,y,w,h): (45, 86, 130, 54)
node3:Object in an image. Name: tongue; (x,y,w,h): (204, 186, 19, 13)
node4:Object in an image. Name: ear; (x,y,w,h): (243, 113, 27, 32)
node5:Object in an image. Name: head; (x,y,w,h): (188, 109, 82, 95)
node6:Object in an image. Name: nose; (x,y,w,h): (193, 162, 24, 14)
node7:Object in an image. Name: eye; (x,y,w,h): (220, 134, 12, 8)
node8:Object in an image. Name: man; (x,y,w,h): (263, 0, 129, 332)
node9:Object in an image. Name: shirt; attribute: white; (x,y,w,h): (283, 0, 109, 144)
node10:Object in an image. Name: jeans; (x,y,w,h): (221, 194, 55, 120)
node11:Object in an image. Name: street sign; attribute: metal; (x,y,w,h): (65, 22, 20, 32)
node12:Object in an image. Name: car; attribute: yellow; (x,y,w,h): (0, 84, 427, 214)
node13:Object in an image. Name: pole; (x,y,w,h): (70, 52, 8, 66)
node14:Object in an image. Name: road; (x,y,w,h): (0, 258, 499, 74)
node15:Object in an image. Name: window; (x,y,w,h): (371, 34, 55, 110)
node16:Object in an image. Name: man; (x,y,w,h): (71, 48, 71, 67)
node17:Object in an image. Name: hair; (x,y,w,h): (193, 0, 95, 60)
node18:Object in an image. Name: paper; (x,y,w,h): (47, 91, 115, 49)
node19:Object in an image. Name: spots; (x,y,w,h): (287, 224, 17, 19)
node20:Object in an image. Name: legs; (x,y,w,h): (260, 262, 69, 70)
node21:Object in an image. Name: dog; attribute: white; (x,y,w,h): (187, 109, 312, 223)
node22:Object in an image. Name: couple; (x,y,w,h): (168, 0, 224, 332)
node23:Object in an image. Name: canopy; (x,y,w,h): (0, 0, 499, 41)
node24:Object in an image. Name: shirt; attribute: yellow; (x,y,w,h): (433, 90, 25, 60)
node25:Object in an image. Name: mirror; (x,y,w,h): (159, 116, 28, 17)
node26:Object in an image. Name: woman; attribute: blond; (x,y,w,h): (166, 0, 124, 332)
node27:Object in an image. Name: person; (x,y,w,h): (434, 67, 58, 98)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What color is the tent?

node0:Object in an image. Name: dress; attribute: brown; (x,y,w,h): (267, 103, 68, 182)
node1:Object in an image. Name: goat; attribute: black; (x,y,w,h): (234, 226, 71, 111)
node2:Object in an image. Name: bandana; (x,y,w,h): (186, 55, 23, 28)
node3:Object in an image. Name: bags; (x,y,w,h): (105, 242, 52, 109)
node4:Object in an image. Name: horse; attribute: white; (x,y,w,h): (386, 72, 78, 150)
node5:Object in an image. Name: hand; (x,y,w,h): (132, 221, 16, 24)
node6:Object in an image. Name: woman; attribute: standing; (x,y,w,h): (132, 52, 123, 312)
node7:Object in an image. Name: eye; (x,y,w,h): (302, 84, 9, 5)
node8:Object in an image. Name: head; (x,y,w,h): (291, 60, 35, 48)
node9:Object in an image. Name: woman; attribute: standing; (x,y,w,h): (265, 60, 74, 276)
node10:Object in an image. Name: horses; (x,y,w,h): (0, 61, 156, 201)
node11:Object in an image. Name: tent; attribute: yellow; (x,y,w,h): (384, 19, 115, 27)
node12:Object in an image. Name: leg; (x,y,w,h): (161, 237, 25, 105)
node13:Object in an image. Name: arm; (x,y,w,h): (198, 108, 29, 101)
node14:Object in an image. Name: hand; (x,y,w,h): (219, 204, 16, 25)
node15:Object in an image. Name: foot; (x,y,w,h): (219, 343, 32, 18)
node16:Object in an image. Name: ear; (x,y,w,h): (193, 79, 8, 8)
node17:Object in an image. Name: rocks; (x,y,w,h): (374, 280, 13, 9)
node18:Object in an image. Name: leg; (x,y,w,h): (369, 138, 35, 108)
node19:Object in an image. Name: pants; attribute: purple; (x,y,w,h): (158, 237, 81, 114)
node20:Object in an image. Name: ground; attribute: rocky; (x,y,w,h): (1, 111, 498, 263)
node21:Object in an image. Name: scarf; attribute: red; (x,y,w,h): (292, 60, 49, 65)
node22:Object in an image. Name: tail; attribute: white; (x,y,w,h): (429, 87, 34, 122)
node23:Object in an image. Name: horse; attribute: brown; (x,y,w,h): (216, 76, 196, 168)
node24:Object in an image. Name: purse; attribute: black; (x,y,w,h): (117, 147, 43, 51)

the connection relationship among the nodes mentioned:
 <node0, node4>,<node0, node5>,<node0, node6>,<node0, node10>,<node0, node13>,<node0, node14>,<node0, node17>,<node0, node18>,<node0, node22>,<node0, node24>,<node1, node3>,<node1, node5>,<node1, node6>,<node1, node12>,<node1, node17>,<node1, node19>,<node2, node8>,<node2, node9>,<node2, node10>,<node2, node21>,<node3, node6>,<node3, node9>,<node3, node12>,<node3, node19>,<node4, node7>,<node4, node8>,<node4, node9>,<node4, node21>,<node4, node23>,<node5, node9>,<node5, node23>,<node6, node7>,<node6, node8>,<node6, node9>,<node6, node10>,<node6, node17>,<node6, node18>,<node6, node21>,<node6, node23>,<node7, node16>,<node8, node16>,<node9, node10>,<node9, node12>,<node9, node13>,<node9, node14>,<node9, node16>,<node9, node17>,<node9, node18>,<node9, node19>,<node9, node22>,<node9, node24>,<node10, node13>,<node10, node14>,<node10, node16>,<node10, node23>,<node13, node23>,<node13, node24>,<node16, node21>,<node16, node23>,<node18, node22>,<node21, node22>,<node22, node23>,<node23, node24>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",yellow,"node0:Object in an image. Name: dress; attribute: brown; (x,y,w,h): (267, 103, 68, 182)
node1:Object in an image. Name: goat; attribute: black; (x,y,w,h): (234, 226, 71, 111)
node2:Object in an image. Name: bandana; (x,y,w,h): (186, 55, 23, 28)
node3:Object in an image. Name: bags; (x,y,w,h): (105, 242, 52, 109)
node4:Object in an image. Name: horse; attribute: white; (x,y,w,h): (386, 72, 78, 150)
node5:Object in an image. Name: hand; (x,y,w,h): (132, 221, 16, 24)
node6:Object in an image. Name: woman; attribute: standing; (x,y,w,h): (132, 52, 123, 312)
node7:Object in an image. Name: eye; (x,y,w,h): (302, 84, 9, 5)
node8:Object in an image. Name: head; (x,y,w,h): (291, 60, 35, 48)
node9:Object in an image. Name: woman; attribute: standing; (x,y,w,h): (265, 60, 74, 276)
node10:Object in an image. Name: horses; (x,y,w,h): (0, 61, 156, 201)
node11:Object in an image. Name: tent; attribute: yellow; (x,y,w,h): (384, 19, 115, 27)
node12:Object in an image. Name: leg; (x,y,w,h): (161, 237, 25, 105)
node13:Object in an image. Name: arm; (x,y,w,h): (198, 108, 29, 101)
node14:Object in an image. Name: hand; (x,y,w,h): (219, 204, 16, 25)
node15:Object in an image. Name: foot; (x,y,w,h): (219, 343, 32, 18)
node16:Object in an image. Name: ear; (x,y,w,h): (193, 79, 8, 8)
node17:Object in an image. Name: rocks; (x,y,w,h): (374, 280, 13, 9)
node18:Object in an image. Name: leg; (x,y,w,h): (369, 138, 35, 108)
node19:Object in an image. Name: pants; attribute: purple; (x,y,w,h): (158, 237, 81, 114)
node20:Object in an image. Name: ground; attribute: rocky; (x,y,w,h): (1, 111, 498, 263)
node21:Object in an image. Name: scarf; attribute: red; (x,y,w,h): (292, 60, 49, 65)
node22:Object in an image. Name: tail; attribute: white; (x,y,w,h): (429, 87, 34, 122)
node23:Object in an image. Name: horse; attribute: brown; (x,y,w,h): (216, 76, 196, 168)
node24:Object in an image. Name: purse; attribute: black; (x,y,w,h): (117, 147, 43, 51)","node0:Object in an image. Name: dress; attribute: brown; (x,y,w,h): (267, 103, 68, 182)
node1:Object in an image. Name: goat; attribute: black; (x,y,w,h): (234, 226, 71, 111)
node2:Object in an image. Name: bandana; (x,y,w,h): (186, 55, 23, 28)
node3:Object in an image. Name: bags; (x,y,w,h): (105, 242, 52, 109)
node4:Object in an image. Name: horse; attribute: white; (x,y,w,h): (386, 72, 78, 150)
node5:Object in an image. Name: hand; (x,y,w,h): (132, 221, 16, 24)
node6:Object in an image. Name: woman; attribute: standing; (x,y,w,h): (132, 52, 123, 312)
node7:Object in an image. Name: eye; (x,y,w,h): (302, 84, 9, 5)
node8:Object in an image. Name: head; (x,y,w,h): (291, 60, 35, 48)
node9:Object in an image. Name: woman; attribute: standing; (x,y,w,h): (265, 60, 74, 276)
node10:Object in an image. Name: horses; (x,y,w,h): (0, 61, 156, 201)
node11:Object in an image. Name: tent; attribute: yellow; (x,y,w,h): (384, 19, 115, 27)
node12:Object in an image. Name: leg; (x,y,w,h): (161, 237, 25, 105)
node13:Object in an image. Name: arm; (x,y,w,h): (198, 108, 29, 101)
node14:Object in an image. Name: hand; (x,y,w,h): (219, 204, 16, 25)
node15:Object in an image. Name: foot; (x,y,w,h): (219, 343, 32, 18)
node16:Object in an image. Name: ear; (x,y,w,h): (193, 79, 8, 8)
node17:Object in an image. Name: rocks; (x,y,w,h): (374, 280, 13, 9)
node18:Object in an image. Name: leg; (x,y,w,h): (369, 138, 35, 108)
node19:Object in an image. Name: pants; attribute: purple; (x,y,w,h): (158, 237, 81, 114)
node20:Object in an image. Name: ground; attribute: rocky; (x,y,w,h): (1, 111, 498, 263)
node21:Object in an image. Name: scarf; attribute: red; (x,y,w,h): (292, 60, 49, 65)
node22:Object in an image. Name: tail; attribute: white; (x,y,w,h): (429, 87, 34, 122)
node23:Object in an image. Name: horse; attribute: brown; (x,y,w,h): (216, 76, 196, 168)
node24:Object in an image. Name: purse; attribute: black; (x,y,w,h): (117, 147, 43, 51)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What is the man to the right of the appliance holding, coffee or beer?

node0:Object in an image. Name: shirt; attribute: blue; (x,y,w,h): (219, 71, 47, 55)
node1:Object in an image. Name: man; (x,y,w,h): (352, 41, 146, 343)
node2:Object in an image. Name: boots; attribute: brown; (x,y,w,h): (387, 357, 57, 26)
node3:Object in an image. Name: house; (x,y,w,h): (3, 12, 496, 369)
node4:Object in an image. Name: man; attribute: sitting; (x,y,w,h): (194, 51, 75, 108)
node5:Object in an image. Name: toolbox; attribute: black; (x,y,w,h): (39, 293, 87, 46)
node6:Object in an image. Name: refrigerator; attribute: tall; (x,y,w,h): (444, 38, 55, 226)
node7:Object in an image. Name: man; attribute: crouching; (x,y,w,h): (166, 221, 132, 161)
node8:Object in an image. Name: man; (x,y,w,h): (77, 52, 117, 270)
node9:Object in an image. Name: shirt; attribute: gray; (x,y,w,h): (94, 94, 109, 123)
node10:Object in an image. Name: hat; attribute: red; (x,y,w,h): (222, 221, 49, 24)
node11:Object in an image. Name: tools; (x,y,w,h): (55, 284, 83, 58)
node12:Object in an image. Name: cabinets; (x,y,w,h): (325, 0, 130, 125)
node13:Object in an image. Name: appliance; attribute: stainless steel, silver; (x,y,w,h): (204, 141, 160, 71)
node14:Object in an image. Name: floor; (x,y,w,h): (0, 213, 497, 170)
node15:Object in an image. Name: window; attribute: glass; (x,y,w,h): (273, 40, 44, 70)
node16:Object in an image. Name: wall; (x,y,w,h): (318, 13, 107, 106)
node17:Object in an image. Name: cap; attribute: black; (x,y,w,h): (394, 39, 54, 45)
node18:Object in an image. Name: shirt; attribute: red; (x,y,w,h): (167, 249, 130, 135)
node19:Object in an image. Name: head; attribute: bald; (x,y,w,h): (103, 51, 45, 56)
node20:Object in an image. Name: beer; (x,y,w,h): (402, 161, 14, 51)
node21:Object in an image. Name: cap; (x,y,w,h): (230, 56, 22, 7)

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node8>,<node0, node9>,<node0, node12>,<node0, node15>,<node0, node16>,<node0, node19>,<node1, node4>,<node1, node7>,<node1, node10>,<node1, node13>,<node1, node15>,<node1, node18>,<node1, node20>,<node1, node21>,<node2, node7>,<node2, node18>,<node4, node8>,<node4, node9>,<node4, node12>,<node4, node15>,<node4, node16>,<node4, node19>,<node5, node7>,<node5, node18>,<node6, node12>,<node6, node13>,<node6, node16>,<node6, node17>,<node6, node20>,<node7, node8>,<node7, node11>,<node8, node10>,<node8, node11>,<node8, node13>,<node8, node15>,<node8, node16>,<node8, node21>,<node9, node13>,<node11, node18>,<node12, node15>,<node12, node21>,<node13, node20>,<node15, node16>,<node15, node17>,<node15, node21>,<node16, node21>,<node19, node21>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",beer,"node0:Object in an image. Name: shirt; attribute: blue; (x,y,w,h): (219, 71, 47, 55)
node1:Object in an image. Name: man; (x,y,w,h): (352, 41, 146, 343)
node2:Object in an image. Name: boots; attribute: brown; (x,y,w,h): (387, 357, 57, 26)
node3:Object in an image. Name: house; (x,y,w,h): (3, 12, 496, 369)
node4:Object in an image. Name: man; attribute: sitting; (x,y,w,h): (194, 51, 75, 108)
node5:Object in an image. Name: toolbox; attribute: black; (x,y,w,h): (39, 293, 87, 46)
node6:Object in an image. Name: refrigerator; attribute: tall; (x,y,w,h): (444, 38, 55, 226)
node7:Object in an image. Name: man; attribute: crouching; (x,y,w,h): (166, 221, 132, 161)
node8:Object in an image. Name: man; (x,y,w,h): (77, 52, 117, 270)
node9:Object in an image. Name: shirt; attribute: gray; (x,y,w,h): (94, 94, 109, 123)
node10:Object in an image. Name: hat; attribute: red; (x,y,w,h): (222, 221, 49, 24)
node11:Object in an image. Name: tools; (x,y,w,h): (55, 284, 83, 58)
node12:Object in an image. Name: cabinets; (x,y,w,h): (325, 0, 130, 125)
node13:Object in an image. Name: appliance; attribute: stainless steel, silver; (x,y,w,h): (204, 141, 160, 71)
node14:Object in an image. Name: floor; (x,y,w,h): (0, 213, 497, 170)
node15:Object in an image. Name: window; attribute: glass; (x,y,w,h): (273, 40, 44, 70)
node16:Object in an image. Name: wall; (x,y,w,h): (318, 13, 107, 106)
node17:Object in an image. Name: cap; attribute: black; (x,y,w,h): (394, 39, 54, 45)
node18:Object in an image. Name: shirt; attribute: red; (x,y,w,h): (167, 249, 130, 135)
node19:Object in an image. Name: head; attribute: bald; (x,y,w,h): (103, 51, 45, 56)
node20:Object in an image. Name: beer; (x,y,w,h): (402, 161, 14, 51)
node21:Object in an image. Name: cap; (x,y,w,h): (230, 56, 22, 7)","node0:Object in an image. Name: shirt; attribute: blue; (x,y,w,h): (219, 71, 47, 55)
node1:Object in an image. Name: man; (x,y,w,h): (352, 41, 146, 343)
node2:Object in an image. Name: boots; attribute: brown; (x,y,w,h): (387, 357, 57, 26)
node3:Object in an image. Name: house; (x,y,w,h): (3, 12, 496, 369)
node4:Object in an image. Name: man; attribute: sitting; (x,y,w,h): (194, 51, 75, 108)
node5:Object in an image. Name: toolbox; attribute: black; (x,y,w,h): (39, 293, 87, 46)
node6:Object in an image. Name: refrigerator; attribute: tall; (x,y,w,h): (444, 38, 55, 226)
node7:Object in an image. Name: man; attribute: crouching; (x,y,w,h): (166, 221, 132, 161)
node8:Object in an image. Name: man; (x,y,w,h): (77, 52, 117, 270)
node9:Object in an image. Name: shirt; attribute: gray; (x,y,w,h): (94, 94, 109, 123)
node10:Object in an image. Name: hat; attribute: red; (x,y,w,h): (222, 221, 49, 24)
node11:Object in an image. Name: tools; (x,y,w,h): (55, 284, 83, 58)
node12:Object in an image. Name: cabinets; (x,y,w,h): (325, 0, 130, 125)
node13:Object in an image. Name: appliance; attribute: stainless steel, silver; (x,y,w,h): (204, 141, 160, 71)
node14:Object in an image. Name: floor; (x,y,w,h): (0, 213, 497, 170)
node15:Object in an image. Name: window; attribute: glass; (x,y,w,h): (273, 40, 44, 70)
node16:Object in an image. Name: wall; (x,y,w,h): (318, 13, 107, 106)
node17:Object in an image. Name: cap; attribute: black; (x,y,w,h): (394, 39, 54, 45)
node18:Object in an image. Name: shirt; attribute: red; (x,y,w,h): (167, 249, 130, 135)
node19:Object in an image. Name: head; attribute: bald; (x,y,w,h): (103, 51, 45, 56)
node20:Object in an image. Name: beer; (x,y,w,h): (402, 161, 14, 51)
node21:Object in an image. Name: cap; (x,y,w,h): (230, 56, 22, 7)",scene_graph,gc
"Classify the wikipedia page represented by node12 using its subgraph data (text attributes and connections) as follows.

node0: World Wide Web invented by Tim Berners-Lee in 1989 uses HTML/HTTP for global hypertext systems, enabling internet browsing via browsers.  
node1: UDP Helper Address routes broadcast traffic across subnets, enabling DHCP/BOOTP services, configured via routers to forward UDP messages between networks.  
node2: MUSIC/SP was McGill University's IBM mainframe-based multi-user system, featuring file compression, access control, and support for programming languages, evolving into internet tools.  
node3: Cleanfeed filters Usenet spam by blocking repeated patterns and domains, developed to combat spam floods and updated through community efforts.
node4: Wine is an open-source compatibility layer enabling Windows apps to run on Unix-like systems via emulation, reverse-engineering, and translating system calls.  
node5: Chicken is a R5RS-compliant Scheme compiler converting code to C, focusing on practical applications, portability, and performance under a BSD license.  
node6: DHCP dynamically assigns IP addresses and network configs via UDP, using DORA (Discovery/Offer/Request/Ack) for devices across subnets, with security risks and relay agents.  
node7: CS-Script enables C#-based .NET/Mono scripting, integrates with IDEs like Visual Studio, and allows embedding scripts in applications with minimal runtime dependencies.
node8: Proxy server intermediates client-server requests, enabling anonymity, caching, filtering, and network security via types like reverse and anonymizing proxies.  
node9: Explicit Congestion Notification (ECN) signals network congestion via IP header markings, reducing latency by avoiding packet drops.  
node10: Open-source IRC client for Windows using Versus scripting and object-oriented OVS for customizable chat functionality.  
node11: RAD PHP tool generating web apps with CRUD, AJAX, database integration, and business logic for rapid development.  
node12: DARPA-funded web caching project producing Harvest Object Cache, influencing Squid and NetCache technologies.  
node13: Commercial web caching system based on Harvest’s tech, later sold to Blue Coat for enterprise use.  
node14: UDP-based protocol coordinating web caches via ICP messages to locate objects in sibling/parent caches.  
node15: Kernel blending monolithic and microkernel traits, exemplified by Microsoft’s Windows NT for modular performance.  
node16: HTTP notification protocol (GENA) used in UPnP for event-based communication via multicast and intermediaries.  
node17: Free software advocate, co-founder of FSFE, promoting open-source and leading projects like Kolab and Vereign.
node18: Scripting languages automate tasks in environments like shells and browsers, often interpreted, with examples including Python and JavaScript for domain-specific or general use.  
node19: Common Lisp Object System (CLOS) enables dynamic OOP in Common Lisp, supporting multiple inheritance, generic functions, and runtime modifications via the Metaobject Protocol.  
node20: GNU Guile is a Scheme-based extension language for GNU software, embedding efficiency and flexibility, aiming to support multiple languages and replace Emacs Lisp.  
node21: Lists notable cybersecurity hacking incidents, documenting significant breaches and attacks in computing history.  
node22: Nuprl is a formal proof system for mathematics and software verification, based on type theory, developed at Cornell for theorem proving and digital libraries.  
node23: References in computing enable indirect data access via memory addresses or identifiers, used in programming for efficiency and flexibility, with risks like dangling pointers.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node3>,<node0, node6>,<node0, node8>,<node0, node11>,<node0, node12>,<node0, node16>,<node0, node18>,<node0, node20>,<node0, node21>,<node0, node22>,<node0, node23>,<node1, node6>,<node2, node15>,<node4, node18>,<node5, node19>,<node5, node20>,<node6, node8>,<node6, node9>,<node7, node18>,<node10, node18>,<node12, node13>,<node12, node14>,<node13, node14>,<node17, node20>,<node19, node20>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",internet protocols,"node0: World Wide Web invented by Tim Berners-Lee in 1989 uses HTML/HTTP for global hypertext systems, enabling internet browsing via browsers.  
node1: UDP Helper Address routes broadcast traffic across subnets, enabling DHCP/BOOTP services, configured via routers to forward UDP messages between networks.  
node2: MUSIC/SP was McGill University's IBM mainframe-based multi-user system, featuring file compression, access control, and support for programming languages, evolving into internet tools.  
node3: Cleanfeed filters Usenet spam by blocking repeated patterns and domains, developed to combat spam floods and updated through community efforts.
node4: Wine is an open-source compatibility layer enabling Windows apps to run on Unix-like systems via emulation, reverse-engineering, and translating system calls.  
node5: Chicken is a R5RS-compliant Scheme compiler converting code to C, focusing on practical applications, portability, and performance under a BSD license.  
node6: DHCP dynamically assigns IP addresses and network configs via UDP, using DORA (Discovery/Offer/Request/Ack) for devices across subnets, with security risks and relay agents.  
node7: CS-Script enables C#-based .NET/Mono scripting, integrates with IDEs like Visual Studio, and allows embedding scripts in applications with minimal runtime dependencies.
node8: Proxy server intermediates client-server requests, enabling anonymity, caching, filtering, and network security via types like reverse and anonymizing proxies.  
node9: Explicit Congestion Notification (ECN) signals network congestion via IP header markings, reducing latency by avoiding packet drops.  
node10: Open-source IRC client for Windows using Versus scripting and object-oriented OVS for customizable chat functionality.  
node11: RAD PHP tool generating web apps with CRUD, AJAX, database integration, and business logic for rapid development.  
node12: DARPA-funded web caching project producing Harvest Object Cache, influencing Squid and NetCache technologies.  
node13: Commercial web caching system based on Harvest’s tech, later sold to Blue Coat for enterprise use.  
node14: UDP-based protocol coordinating web caches via ICP messages to locate objects in sibling/parent caches.  
node15: Kernel blending monolithic and microkernel traits, exemplified by Microsoft’s Windows NT for modular performance.  
node16: HTTP notification protocol (GENA) used in UPnP for event-based communication via multicast and intermediaries.  
node17: Free software advocate, co-founder of FSFE, promoting open-source and leading projects like Kolab and Vereign.
node18: Scripting languages automate tasks in environments like shells and browsers, often interpreted, with examples including Python and JavaScript for domain-specific or general use.  
node19: Common Lisp Object System (CLOS) enables dynamic OOP in Common Lisp, supporting multiple inheritance, generic functions, and runtime modifications via the Metaobject Protocol.  
node20: GNU Guile is a Scheme-based extension language for GNU software, embedding efficiency and flexibility, aiming to support multiple languages and replace Emacs Lisp.  
node21: Lists notable cybersecurity hacking incidents, documenting significant breaches and attacks in computing history.  
node22: Nuprl is a formal proof system for mathematics and software verification, based on type theory, developed at Cornell for theorem proving and digital libraries.  
node23: References in computing enable indirect data access via memory addresses or identifiers, used in programming for efficiency and flexibility, with risks like dangling pointers.","node0:Wikipedia entry. Entry name: World_Wide_Web. Entry content: world wide web world wide web www commonly known web information system documents web resources identified uniform resource locators urls nowiki https //www.example.com/ /nowiki may interlinked hypertext accessible internet resources www may accessed users software application called web browser english scientist tim berners-lee invented world wide web 1989 wrote first web browser 1990 employed cern near geneva switzerland browser released outside cern 1991 first research institutions starting january 1991 general public august 1991 world wide web central development information age primary tool billions people use interact internet web resources may type downloaded media web pages hypertext media formatted hypertext markup language html formatting allows embedded hyperlinks contain urls permit users navigate web resources addition text web pages may contain images video audio software components rendered user web browser coherent pages multimedia content multiple web resources common theme common domain name make website websites stored computers running program called web server responds requests made internet web browsers running user computer website content largely provided publisher interactively users contribute content content depends upon users actions websites may provided myriad informative entertainment commercial governmental non-governmental reasons tim berners-lee vision global hyperlinked information system became possibility second half 1980s 1985 global internet began proliferate europe domain name system upon uniform resource locator built came 1988 first direct ip connection europe north america made berners-lee began openly discuss possibility web-like system cern working cern berners-lee became frustrated inefficiencies difficulties posed finding information stored different computers march 12 1989 submitted memorandum titled information management proposal management cern system called mesh referenced enquire database software project built 1980 used term web described elaborate information management system based links embedded text imagine references document associated network address thing referred reading document could skip click mouse system explained could referred using one existing meanings word hypertext term says coined 1950s reason proposal continues hypertext links could encompass multimedia documents including graphics speech video berners-lee goes use term hypermedia help colleague fellow hypertext enthusiast robert cailliau published formal proposal 12 november 1990 build hypertext project called worldwideweb one word web hypertext documents viewed browsers using client–server architecture point html http already development two months first web server month completing first successful test proposal estimated read-only web would developed within three months would take six months achieve creation new links new material readers authorship becomes universal well automatic notification reader new material interest him/her become available read-only goal met accessible authorship web content took longer mature wiki concept webdav blogs web 2.0 rss/atom proposal modelled sgml reader dynatext electronic book technology spin-off institute research information scholarship brown university dynatext system licensed cern key player extension sgml iso 8879:1986 hypermedia within hytime considered expensive inappropriate licensing policy use general high energy physics community namely fee document document alteration next computer used berners-lee world first web server also write first web browser worldwideweb 1990 christmas 1990 berners-lee built tools necessary working web first web browser web editor well first web server first web site described project published 20 december 1990 first web page may lost paul jones unc-chapel hill north carolina announced may 2013 berners-lee gave says oldest known web page 1991 visit unc jones stored magneto-optical drive next computer 6 august 1991 berners-lee published short summary world wide web project newsgroup alt.hypertext date sometimes confused public availability first web servers occurred months earlier another example confusion several news media reported first photo web published berners-lee 1992 image cern house band les horribles cernettes taken silvano de gennaro gennaro disclaimed story writing media totally distorting words sake cheap sensationalism first server outside europe installed stanford linear accelerator center slac palo alto california host spires-hep database accounts differ substantially date event world wide web consortium timeline says december 1992 whereas slac claims december 1991 w3c document titled little history world wide web underlying concept hypertext originated previous projects 1960s hypertext editing system hes brown university ted nelson project xanadu douglas engelbart on-line system nls nelson engelbart turn inspired vannevar bush microfilm-based memex described 1945 essay may think berners-lee breakthrough marry hypertext internet book explains repeatedly suggested marriage two technologies possible members technical communities one took invitation finally assumed project process developed three essential technologies world wide web several differences hypertext systems available time web required unidirectional links rather bidirectional ones making possible someone link another resource without action owner resource also significantly reduced difficulty implementing web servers browsers comparison earlier systems turn presented chronic problem link rot unlike predecessors hypercard world wide web non-proprietary making possible develop servers clients independently add extensions without licensing restrictions 30 april 1993 cern announced world wide web would free anyone fees due coming two months announcement server implementation gopher protocol longer free use produced rapid shift away gopher towards web early popular web browser violawww unix x window system scholars generally agree turning point world wide web began introduction mosaic web browser 1993 graphical browser developed team national center supercomputing applications university illinois urbana–champaign ncsa-uiuc led marc andreessen funding mosaic came us high-performance computing communications initiative high performance computing act 1991 one several computing developments initiated us senator al gore prior release mosaic graphics commonly mixed text web pages web popularity less older protocols use internet gopher wide area information servers wais mosaic graphical user interface allowed web become far popular internet protocol world wide web consortium w3c founded tim berners-lee left european organization nuclear research cern october 1994 founded massachusetts institute technology laboratory computer science mit/lcs support defense advanced research projects agency darpa pioneered internet year later second site founded inria french national computer research lab support european commission dg infso 1996 third continental site created japan keio university end 1994 total number websites still relatively small many notable websites already active foreshadowed inspired today popular services connected internet websites created around world motivated international standards development protocols formatting berners-lee continued stay involved guiding development web standards markup languages compose web pages advocated vision semantic web world wide web enabled spread information internet easy-to-use flexible format thus played important role popularising use internet although two terms sometimes conflated popular use world wide web synonymous internet web information space containing hyperlinked documents resources identified uris implemented client server software using internet protocols tcp/ip http berners-lee knighted 2004 queen elizabeth ii services global development internet never patented invention terms internet world wide web often used without much distinction however two terms mean thing internet global system interconnected computer networks contrast world wide web global collection documents resources linked hyperlinks uris web resources accessed using http https application-level internet protocols use internet transport protocols viewing web page world wide web normally begins either typing url page web browser following hyperlink page resource web browser initiates series background communication messages fetch display requested page 1990s using browser view web pages—and move one web page another hyperlinks—came known 'browsing 'web surfing channel surfing 'navigating web early studies new behaviour investigated user patterns using web browsers one study example found five user patterns exploratory surfing window surfing evolved surfing bounded navigation targeted navigation following example demonstrates functioning web browser accessing page url codice_1 browser resolves server name url codice_2 internet protocol address using globally distributed domain name system dns lookup returns ip address 203.0.113.4 2001 db8:2e :7334 browser requests resource sending http request across internet computer address requests service specific tcp port number well known http service receiving host distinguish http request network protocols may servicing http protocol normally uses port number 80 https protocol normally port number 443 content http request simple two lines text computer receiving http request delivers web server software listening requests port 80 web server fulfil request sends http response back browser indicating success followed content requested page hypertext markup language html basic web page might look like web browser parses html interprets markup paragraph surrounds words format text screen many web pages use html reference urls resources images embedded media scripts affect page behaviour cascading style sheets affect page layout browser makes additional http requests web server internet media types receives content web server browser progressively renders page onto screen specified html additional resources hypertext markup language html standard markup language creating web pages web applications cascading style sheets css javascript forms triad cornerstone technologies world wide web web browsers receive html documents web server local storage render documents multimedia web pages html describes structure web page semantically originally included cues appearance document html elements building blocks html pages html constructs images objects interactive forms may embedded rendered page html provides means create structured documents denoting structural semantics text headings paragraphs lists links quotes items html elements delineated tags written using angle brackets tags directly introduce content page tags surround provide information document text may include tags sub-elements browsers display html tags use interpret content page html embed programs written scripting language javascript affects behavior content web pages inclusion css defines look layout content world wide web consortium w3c maintainer html css standards encouraged use css explicit presentational html web pages contain hyperlinks related pages perhaps downloadable files source documents definitions web resources underlying html hyperlink looks like collection useful related resources interconnected via hypertext links dubbed web information publication internet created tim berners-lee first called worldwideweb original camelcase subsequently discarded november 1990 hyperlink structure www described webgraph nodes web graph correspond web pages urls directed edges hyperlinks time many web resources pointed hyperlinks disappear relocate replaced different content makes hyperlinks obsolete phenomenon referred circles link rot hyperlinks affected often called dead links ephemeral nature web prompted many efforts archive web sites internet archive active since 1996 best known efforts many hostnames used world wide web begin www long-standing practice naming internet hosts according services provide hostname web server often www way may ftp ftp server news nntp usenet news server host names appear domain name system dns subdomain names www.example.com use www required technical policy standard many web sites use first web server nxoc01.cern.ch according paolo palazzi worked cern along tim berners-lee popular use www subdomain accidental world wide web project page intended published www.cern.ch info.cern.ch intended cern home page however dns records never switched practice prepending www institution website domain name subsequently copied many established websites still use prefix employ subdomain names www2 secure en special purposes many web servers set main domain name e.g. example.com www subdomain e.g. www.example.com refer site others require one form may map different web sites use subdomain name useful load balancing incoming web traffic creating cname record points cluster web servers since currently subdomain used cname result achieved using bare domain root user submits incomplete domain name web browser address bar input field web browsers automatically try adding prefix www beginning possibly .com .org .net end depending might missing example entering may transformed nowiki http //www.microsoft.com/ /nowiki 'openoffice nowiki http //www.openoffice.org /nowiki feature started appearing early versions firefox still working title 'firebird early 2003 earlier practice browsers lynx reported microsoft granted us patent idea 2008 mobile devices english www usually read double-u double-u double-u users pronounce dub-dub-dub particularly new zealand stephen fry podgrams series podcasts pronounces wuh wuh wuh english writer douglas adams quipped independent sunday 1999 world wide web thing know whose shortened form takes three times longer say short mandarin chinese world wide web commonly translated via phono-semantic matching wàn wéi wǎng satisfies www literally means myriad dimensional net translation reflects design concept proliferation world wide web tim berners-lee web-space states world wide web officially spelled three separate words capitalised intervening hyphens use www prefix declining especially web 2.0 web applications sought brand domain names make easily pronounceable mobile web grew popularity services like gmail.com outlook.com myspace.com facebook.com twitter.com often mentioned without adding www indeed .com domain scheme specifiers codice_3 codice_4 start web uri refer hypertext transfer protocol http secure respectively specify communication protocol use request response http protocol fundamental operation world wide web added encryption layer https essential browsers send retrieve confidential data passwords banking information web browsers usually automatically prepend nowiki http // /nowiki user-entered uris omitted web page also written webpage document suitable world wide web web browsers web browser displays web page monitor mobile device term web page usually refers visible may also refer contents computer file usually text file containing hypertext written html comparable markup language typical web pages provide hypertext browsing web pages via hyperlinks often referred links web browsers frequently access multiple web resource elements reading style sheets scripts images presenting web page network web browser retrieve web page remote web server web server may restrict access private network corporate intranet web browser uses hypertext transfer protocol http make requests web server static web page delivered exactly stored web content web server file system contrast dynamic web page generated web application usually driven server-side software dynamic web pages help browser client enhance web page user input server static web page sometimes called flat page/stationary page web page delivered user exactly stored contrast dynamic web pages generated web application consequently static web page displays information users contexts subject modern capabilities web server negotiate content-type language document versions available server configured server-side dynamic web page web page whose construction controlled application server processing server-side scripts server-side scripting parameters determine assembly every new web page proceeds including setting client-side processing client-side dynamic web page processes web page using html scripting running browser loads javascript scripting languages determine way html received page parsed document object model dom represents loaded web page client-side techniques dynamically update change dom way dynamic web page reloaded user computer program change variable content updating information could come server changes made page dom may may truncate browsing history create saved version go back dynamic web page update using ajax technologies neither create page go back truncate web browsing history forward displayed page using ajax technologies end user gets one dynamic page managed single page web browser actual web content rendered page vary ajax engine sits browser requesting parts dom dom client application server dhtml umbrella term technologies methods used create web pages static web pages though fallen common use since popularization ajax term rarely used client-side-scripting server-side scripting combination make dynamic web experience browser javascript scripting language initially developed 1995 brendan eich netscape use within web pages standardised version ecmascript make web pages interactive web applications also use javascript techniques ajax asynchronous javascript xml client-side script delivered page make additional http requests server either response user actions mouse movements clicks based elapsed time server responses used modify current page rather creating new page response server needs provide limited incremental information multiple ajax requests handled time users interact page data retrieved web pages may also regularly poll server check whether new information available website collection related web resources including web pages multimedia content typically identified common domain name published least one web server notable examples wikipedia.org google.com amazon.com website may accessible via public internet protocol ip network internet private local area network lan referencing uniform resource locator url identifies site websites many functions used various fashions website personal website corporate website company government website organization website etc websites typically dedicated particular topic purpose ranging entertainment social networking providing news education publicly accessible websites collectively constitute world wide web private websites company website employees typically part intranet web pages building blocks websites documents typically composed plain text interspersed formatting instructions hypertext markup language html xhtml may incorporate elements websites suitable markup anchors web pages accessed transported hypertext transfer protocol http may optionally employ encryption http secure https provide security privacy user user application often web browser renders page content according html markup instructions onto display terminal hyperlinking web pages conveys reader site structure guides navigation site often starts home page containing directory site web content websites require user registration subscription access content examples subscription websites include many business sites news websites academic journal websites gaming websites file-sharing websites message boards web-based email social networking websites websites providing real-time stock market data well sites providing various services end users access websites range devices including desktop laptop computers tablet computers smartphones smart tvs web browser commonly referred browser software user agent accessing information world wide web connect website server display pages user needs web browser program program user runs download format display web page user computer addition allowing users find displaying moving web pages web browser usually features like keeping bookmarks recording history managing cookies see home pages may facilities recording passwords logging web sites popular browsers chrome firefox safari internet explorer edge web server server software hardware dedicated running said software satisfy world wide web client requests web server general contain one websites web server processes incoming network requests http several related protocols primary function web server store process deliver web pages clients communication client server takes place using hypertext transfer protocol http pages delivered frequently html documents may include images style sheets scripts addition text content user agent commonly web browser web crawler initiates communication making request specific resource using http server responds content resource error message unable resource typically real file server secondary storage necessarily case depends web server implemented primary function serve content full implementation http also includes ways receiving content clients feature used submitting web forms including uploading files many generic web servers also support server-side scripting using active server pages asp php hypertext preprocessor scripting languages means behaviour web server scripted separate files actual server software remains unchanged usually function used generate html documents dynamically on-the-fly opposed returning static documents former primarily used retrieving modifying information databases latter typically much faster easily cached deliver dynamic content web servers also frequently found embedded devices printers routers webcams serving local network web server may used part system monitoring administering device question usually means additional software installed client computer since web browser required included operating systems http cookie also called web cookie internet cookie browser cookie simply cookie small piece data sent website stored user computer user web browser user browsing cookies designed reliable mechanism websites remember stateful information items added shopping cart online store record user browsing activity including clicking particular buttons logging recording pages visited past also used remember arbitrary pieces information user previously entered form fields names addresses passwords credit card numbers cookies perform essential functions modern web perhaps importantly authentication cookies common method used web servers know whether user logged account logged without mechanism site would know whether send page containing sensitive information require user authenticate logging security authentication cookie generally depends security issuing website user web browser whether cookie data encrypted security vulnerabilities may allow cookie data read hacker used gain access user data used gain access user credentials website cookie belongs see cross-site scripting cross-site request forgery examples tracking cookies especially third-party tracking cookies commonly used ways compile long-term records individuals browsing histories potential privacy concern prompted european u.s. lawmakers take action 2011 european law requires websites targeting european union member states gain informed consent users storing non-essential cookies device google project zero researcher jann horn describes ways cookies read intermediaries like wi-fi hotspot providers recommends use browser incognito mode circumstances web search engine internet search engine software system designed carry web search internet search means search world wide web systematic way particular information specified web search query search results generally presented line results often referred search engine results pages serps information may mix web pages images videos infographics articles research papers types files search engines also mine data available databases open directories unlike web directories maintained human editors search engines also maintain real-time information running algorithm web crawler internet content capable searched web search engine generally described deep web deep web invisible web hidden web parts world wide web whose contents indexed standard web search engines opposite term deep web surface web accessible anyone using internet computer scientist michael k. bergman credited coining term deep web 2001 search indexing term content deep web hidden behind http forms includes many common uses web mail online banking services users must pay protected paywall video demand online magazines newspapers among others content deep web located accessed direct url ip address may require password security access past public website page web cache server computer located either public internet within enterprise stores recently accessed web pages improve response time users content requested within certain time original request web browsers also implement browser cache writing recently obtained data local data storage device http requests browser may ask data changed since last access web pages resources may contain expiration information control caching secure sensitive data online banking facilitate frequently updated sites news media even sites highly dynamic content may permit basic resources refreshed occasionally web site designers find worthwhile collate resources css data javascript site-wide files cached efficiently enterprise firewalls often cache web resources requested one user benefit many users search engines store cached content frequently accessed websites criminals web become venue spread malware engage range cybercrimes including identity theft fraud espionage intelligence gathering web-based vulnerabilities outnumber traditional computer security concerns measured google one ten web pages may contain malicious code web-based attacks take place legitimate websites measured sophos hosted united states china russia common malware threats sql injection attacks websites html uris web vulnerable attacks like cross-site scripting xss came introduction javascript exacerbated degree web 2.0 ajax web design favours use scripts today one estimate 70 websites open xss attacks users phishing another common threat web february 2013 rsa security division emc estimated global losses phishing 1.5 billion 2012 two well-known phishing methods covert redirect open redirect proposed solutions vary large security companies like mcafee already design governance compliance suites meet post-9/11 regulations like finjan recommended active real-time inspection programming code content regardless source argued enterprises see web security business opportunity rather cost centre others call ubiquitous always-on digital rights management enforced infrastructure replace hundreds companies secure data networks jonathan zittrain said users sharing responsibility computing safety far preferable locking internet every time client requests web page server identify request ip address usually logs also unless set web browsers record requested web pages viewable history feature usually cache much content locally unless server-browser communication uses https encryption web requests responses travel plain text across internet viewed recorded cached intermediate systems another way hide personally identifiable information using vpn vpn encrypts online traffic masks original ip address lowering chance user identification web page asks user supplies personally identifiable information—such real name address e-mail address etc.—web-based entities associate current web traffic individual website uses http cookies username password authentication tracking techniques relate web visits identifiable information provided way possible web-based organisation develop build profile individual people use site sites may able build record individual includes information leisure activities shopping interests profession aspects demographic profile profiles obviously potential interest marketeers advertisers others depending website terms conditions local laws apply information profiles may sold shared passed organisations without user informed many ordinary people means little unexpected e-mails in-box uncannily relevant advertising future web page others mean time spent indulging unusual interest result deluge targeted marketing may unwelcome law enforcement counter terrorism espionage agencies also identify target track individuals based interests proclivities web social networking sites try get users use real names interests locations rather pseudonyms executives believe makes social networking experience engaging users hand uploaded photographs unguarded statements identified individual may regret exposure employers schools parents relatives may influenced aspects social networking profiles text posts digital photos posting individual intend audiences on-line bullies may make use personal information harass stalk users modern social networking websites allow fine grained control privacy settings individual posting complex easy find use especially beginners photographs videos posted onto websites caused particular problems add person face on-line profile modern potential facial recognition technology may possible relate face previously anonymous images events scenarios imaged elsewhere due image caching mirroring copying difficult remove image world wide web web standards include many interdependent standards specifications govern aspects internet world wide web even web-focused standards directly indirectly affect development administration web sites web services considerations include interoperability accessibility usability web pages web sites web standards broader sense consist following web standards fixed sets rules constantly evolving set finalized technical specifications web technologies web standards developed standards organizations—groups interested often competing parties chartered task standardization—not technologies developed declared standard single individual company crucial distinguish specifications development ones already reached final development status case w3c specifications highest maturity level methods accessing web alternative mediums formats facilitate use individuals disabilities disabilities may visual auditory physical speech-related cognitive neurological combination accessibility features also help people temporary disabilities like broken arm ageing users abilities change web receives information well providing information interacting society world wide web consortium claims essential web accessible provide equal access equal opportunity people disabilities tim berners-lee noted power web universality access everyone regardless disability essential aspect many countries regulate web accessibility requirement websites international co-operation w3c web accessibility initiative led simple guidelines web content authors well software developers use make web accessible persons may may using assistive technology w3c internationalisation activity assures web technology works languages scripts cultures beginning 2004 2005 unicode gained ground eventually december 2007 surpassed ascii western european web frequently used character encoding originally allowed resources identified uri subset us-ascii allows characters—any character universal character set—and resource identified iri language
node1:Wikipedia entry. Entry name: UDP_Helper_Address. Entry content: udp helper address udp helper address special router configuration used forward broadcast network traffic client machine one subnet server another subnet internet protocol requires every network interface assigned least one unique ip address groups machines similar addresses considered part logical subnet one method assigning ip addresses dhcp addresses typically issued dhcp server running one hosts one machines subnet clients dhcp server respond broadcast dhcp requests issue address dhcp servers may hosted different subnet default routers pass broadcast messages nodes outside subnet resolve udp helper address established router configuration forward broadcast network traffic outside local subnet dhcp client outside dhcp server subnet broadcasts address request helper forwards message dhcp server server chooses address sends client unicast message using helper send message back client subnet address reserved limited time dhcp server waits response client responds another broadcast message dhcp server distributes address helper addresses also used forward udp traffic example bootp cisco first implementation protocol introduced version 10 router software implemented use router configuration commands codice_1 codice_2 enable forwarding user datagram protocol udp broadcasts including bootp received interface use ip helper-address command interface configuration mode disable forwarding broadcast packets specific addresses use form command ip helper-address vrf name global address redundancy vrg-name use udp helper addresses cause issues windows based network configurations see microsoft knowledge base details according microsoft issues stem fact ports 137,138 forwarded default cisco routers since ports used netbios help determine network configuration added broadcasts confuse system
node2:Wikipedia entry. Entry name: MUSIC/SP. Entry content: music/sp music/sp multi-user system interactive computing/system product originally mcgill university system interactive computing developed mcgill university 1970s early ibm time-sharing system called rax remote access computing system system ran ibm s/360 s/370 4300-series mainframe hardware offered novel features time file access control data compression designed allow academics students create run programs interactively terminals era mainframe computing still done punched cards years development continued system evolved embrace email internet eventually world wide web peak late 1980s 250 universities colleges high school districts used system north south america europe asia file system music/sp file system unique number respects single system-wide file index owner userid file name hashed locate file index file system could located single i/o operation however presented flat file system user lacked directory structure commonly offered dos microsoft windows unix systems 1990 tree-structured directory view file system overlaid bringing system line file systems available default information stored files compressed offered considerable saving disk space file system fairly sophisticated access control scheme allowing owner control could read write append execute file also concept public file visible users private file visible owner version 2.3 even private files listed common library result two users could files name 4.0 limitation removed virtual memory initial versions system provided support virtual memory address translation one active user could reside core memory time swapping disk used time-share different users variable-length timeslice used virtual memory support introduced 1985 allowed multiple users core memory time removed many restrictions size programs could run provided significant performance improvement system performance also improved pre-loading commonly used modules virtual memory startup time could available users simultaneously programming languages system designed support academic computing teaching computer science rich suite programming languages available system nucleus written ibm/370 assembler native applications written fortran system supported waterloo watfiv watbol compilers also provided compilers pascal c pl/i basic apl algol rpg gpss system missing command scripting language rexx ported cms 1984 later 1986 complete user interface written entirely rexx e-mail internet e-mail one major applications music/sp e-mail interface initially provided access local e-mail networks developed expanded provide access bitnet internet based e-mail music/sp direct access internet 1990 university wisconsin wiscnet tcp/ip code ported system allowing system provide access internet services compatibility ibm systems major feature system ability run programs designed run ibm mainstream operating system mvs accomplished using mvs emulator intercepted system calls supervisor call instruction svc level third-party applications ran mode rather write version application music/sp developers would usually start mvs version rebuild run mvs emulation mode since mvs emulation limited subset real thing applications generally ran efficiently music/sp features one major advantage system educational environments use special lines called control cards top file source files supported language could automatically directed appropriate compiler fortran default compiled linked executed compilation linkage execution options also specified control cards simply entering filename command line wide variety terminals supported 1980 including ebcdic-based units using ibm-proprietary protocols asynchronous ascii-based units since terminals connected various types front-end processors per common ibm timesharing practice could therefore function without cpu attention considerable amount time music used variable-length time slices could compute-bound processing reach maximum several seconds per time slice conversely user filled output buffer reached conversational read timeslice would end immediately sim390 emulator runs microsoft windows contains demonstration system music/sp freely available demonstration system also run hercules users run windows
node3:Wikipedia entry. Entry name: Cleanfeed_(Usenet_spam_filter). Entry content: cleanfeed usenet spam filter cleanfeed spam filter use usenet news groups well blocking spam also able block binary image posts non-binary news groups html posts acts looking repeated patterns duplicate messages able identify known spamming sites domains published artistic license cleanfeed originally developed maintained jeremy nixon later marco d'itri last formal update released 5th aug 2001 beta release made available 1 may 2002 recommended version deploy 2007 steve crook began producing series updates initially designed counter hipcrime floods later releases include number new features patches later developed pyclean python equivalent cleanfeed
node4:Wikipedia entry. Entry name: Wine_(software). Entry content: wine software wine recursive backronym wine emulator free open-source compatibility layer aims allow computer programs application software computer games developed microsoft windows run unix-like operating systems wine also provides software library known winelib developers compile windows applications help port unix-like systems wine provides windows runtime environment translates windows system calls posix-compliant system calls recreating directory structure windows systems providing alternative implementations windows system libraries system services codice_1 various components internet explorer windows registry editor msiexec wine predominantly written using black-box testing reverse-engineering avoid copyright issues selection wine emulator name wine project result naming discussion august 1993 credited david niemi confusion caused early faq using windows emulator invalid sources appear wine project name set code emulation virtualization occurs running windows application wine emulation usually would refer execution compiled code intended one processor x86 interpreting/recompiling software running different processor powerpc name sometimes appears forms wine wine project developers agreed standardize form wine wine primarily developed linux macos well-maintained packages available platforms 2007 survey desktoplinux.com 38,500 linux desktop users 31.5 respondents reported using wine run windows applications plurality larger x86 virtualization programs combined well larger 27.9 reported running windows applications bob amstadt initial project leader eric youngdale started wine project 1993 way run windows applications linux inspired two sun microsystems products wabi solaris operating system public windows initiative attempt get windows api fully reimplemented public domain iso standard rejected due pressure microsoft 1996 wine originally targeted 16-bit applications windows 3.x focuses 32-bit 64-bit versions become standard newer operating systems project originated discussions usenet comp.os.linux june 1993 alexandre julliard led project since 1994 project proven time-consuming difficult developers mostly incomplete incorrect documentation windows api microsoft extensively documents win32 functions areas file formats protocols publicly available specification microsoft windows also includes undocumented low-level functions undocumented behavior obscure bugs wine must duplicate precisely order allow applications work properly consequently wine team reverse-engineered many function calls file formats areas thunking wine project originally released wine mit license x window system owing concern proprietary versions wine contributing changes back core project work march 2002 used lgpl licensing wine officially entered beta version 0.9 25 october 2005 version 1.0 released 17 june 2008 15 years development version 1.2 released 16 july 2010 version 1.4 7 march 2012 version 1.6 18 july 2013. version 1.8 19 december 2015 development versions released roughly every two weeks wine-staging relatively independently maintained set relatively aggressive patches deemed ready winehq developers merging wine repository still considered useful wine-compholio fork mainly covers experimental functions bug fixes since january 2017 patches wine-staging begins actively merged winehq upstream wine-compholio transferred project alistair leslie-hughes key winehq developer main corporate sponsor wine codeweavers employs julliard many wine developers work wine crossover codeweavers supported version wine crossover includes application-specific tweaks considered suitable winehq version well additional proprietary components involvement corel time assisted project chiefly employing julliard others work corel interest porting wordperfect office office suite linux especially corel linux corel later cancelled linux-related projects microsoft made major investments corel stopping wine effort corporate sponsors include google hired codeweavers fix wine picasa ran well enough ported directly linux using binary windows google later paid improvements wine support adobe photoshop cs2 wine also regular beneficiary google summer code program goal wine implement windows apis fully partially required programs users wine wish run top unix-like system programming interfaces microsoft windows family oses consist largely dynamic-link libraries dlls contain huge number wrapper sub-routines system calls kernel ntos kernel-mode program ntoskrnl.exe typical windows program calls windows dlls turn calls user-mode gdi/user32 libraries turn uses kernel32.dll win32 subsystem responsible dealing kernel system calls system-call layer considered private microsoft programmers documentation publicly available published interfaces rely subsystems running top kernel besides number programming interfaces implemented services run separate processes applications communicate user-mode services rpcs wine implements windows application binary interface abi entirely user space rather kernel module wine mostly mirrors hierarchy services normally provided kernel windows instead provided daemon known wineserver whose task implement basic windows functionality well integration x window system translation signals native windows exceptions although wineserver implements aspects windows kernel possible use native windows drivers due wine underlying architecture prevents certain applications games working example using starforce copy-protection requires virtual device drivers installed wine allows loading windows dlls unix shared objects windows programs builtin implementation basic windows dlls namely ntdll kernel32 gdi32 user32 uses shared object method must use functions host operating system well higher-level libraries wined3d free use dll format many cases users choose load dll windows instead one implemented wine provide functionalities yet implemented wine may also cause malfunctions relies something else present wine wine tracks state implementation automated unit testing done every git commit office software make use complex gpu-accelerated graphics apis computer games run games properly wine would forward drawing instructions host os even translate something host understand directx collection microsoft apis rendering audio input 2019 wine 4.0 contains directx 12 implementation vulkan api directx 11.2 opengl wine 4.0 also allows wine run vulkan applications handing draw commands host os case macos translating metal api moltenvk much wine directx effort goes building wined3d translation layer direct3d directdraw api calls opengl 2019 component supports directx 11 wine good enough run overwatch d3d11 besides used wine wined3d dlls also useful windows operating system allowing older graphic cards run games using newer directx versions old ddraw-based games render correctly work ongoing move direct3d backend vulkan api direct3d 12 support 4.0 provided vkd3d subproject wined3d 2019 experimentally ported use vulkan api wine patched alternatively run direct3d 9 without translation via free open-source gallium3d state tracker dx9 gallium3d layer allows direct pass-through drawing commands wine usually invoked command-line interpreter codice_2 utility codice_3 starts graphical user interface controls adjusting basic options gui configuration utility included wine winecfg makes configuring wine easier making unnecessary edit registry directly although needed done included registry editor similar windows regedit applications require tweaking simply installing application order work properly manually configuring wine use certain windows dlls wine project integrate workarounds wine codebase instead preferring focus solely improving wine implementation windows api approach focuses wine development long-term compatibility makes difficult users run applications require workarounds consequently many third-party applications created ease use applications n't work box within wine wine wiki maintains page current obsolete third-party applications developers direct3d portions wine continued implement new features pixel shaders increase game support wine also use native dlls directly thus increasing functionality license windows needed unless dlls distributed application wine also includes open-source implementations several windows programs notepad wordpad control iexplore explorer wine application database appdb community-maintained on-line database windows programs works wine well work wine ensures good backward compatibility legacy windows applications including written windows 3.1x wine mimic different windows versions required programs going far back windows version 2.0 however windows 1.x windows 2.x support removed wine development version 1.3.12 dosbox installed system see ms-dos wine development version 1.3.12 later nevertheless show windows 2.0 option windows version mimic wine still wo n't run windows 2.0 programs ms-dos windows functions currently integrated backward compatibility wine superior windows newer versions windows force users upgrade legacy windows applications many cases wine offer better legacy support newer versions windows compatibility mode wine run 16-bit windows programs 64-bit operating system uses x86-64 64-bit cpu functionality found 64-bit versions microsoft windows wine partially supports windows console applications user choose backend use manage console choices include raw streams curses user32 using raw streams curses backends windows applications run unix terminal preliminary support 64-bit windows applications added wine 1.1.10 december 2008. support considered stable two versions wine built separately result building wine64 produces environment capable running x86-64 applications wine stable support wow64 build allows 32-bit 64-bit windows applications run inside wine instance perform build one must first build 64-bit version build 32-bit version referencing 64-bit version like microsoft wow64 32-bit build process add parts necessary handling 32-bit programs 64-bit build functionality seen least 2010 early versions microsoft windows run top ms-dos windows programs may depend ms-dos programs runnable wine good support ms-dos starting development version 1.3.12 wine tries running ms-dos programs dosbox dosbox available system however due bug current versions wine incorrectly identify windows 1.x windows 2.x programs ms-dos programs attempting run dosbox work wine provides winelib allows shared-object implementations windows api used actual libraries unix program allows windows code built native unix executables since october 2010 winelib also works arm platform support solaris sparc dropped version 1.5.26 wine provides support arm well arm64/aarch64 processors windows flavors run wine run arm/win32 applications intended unlocked windows rt devices windows rt programs windows ce support either x86 arm missing unofficial pre-alpha proof-of-concept version called winece allows support 4 3 february 2013 fosdem talk brussels alexandre julliard demonstrated early demo wine running google android operating system experimental builds wine android x86 arm released late 2017 routinely updated official developers ever since default builds implement cross-architecture emulation via qemu result arm versions run arm applications use win32 api wine default uses specialized windows builds gecko mono substitute microsoft internet explorer .net framework wine built-in implementations jscript vbscript possible download run microsoft installers programs winetricks manually wine known good support versions internet explorer reasonably recent versions internet explorer 8 windows xp version reports usable rating wine appdb out-of-the-box winetricks offer auto-installation internet explorer 6 8 versions reasonably expected work built-in workarounds alternative installing internet explorer directly use now-defunct ies4linux compatible latest versions wine development ies4linux inactive core wine development aims correct implementation windows api whole sometimes lagged areas compatibility certain applications direct3d example remained unimplemented 1998 although newer releases increasingly complete implementation codeweavers markets crossover specifically running microsoft office major windows applications including games codeweavers employs alexandre julliard work wine contributes code wine project lgpl codeweavers also released new version called crossover mac intel-based apple macintosh computers 10 january 2007 crossover includes functionality crossover games crossover pro lines therefore crossover games crossover pro longer available single products crossover games optimized running windows video games unlike crossover n't focus providing stable version wine instead experimental features provided support newer games findev inc. produced proprietary cedega software formerly known winex cedega represented fork last mit-licensed version wine 2002 much like crossover games findev cedega targeted towards running windows video games 7 january 2011 findev inc. announced continued development cedega technology gametree developer program findev inc. allowed members keep using cedega id password 28 february 2011 findev also produced cider library apple–intel architecture macintoshes instead end-user product cider like winelib wrapper allowing developers adapt games run natively intel mac without changes source code russian company etersoft developing proprietary version wine since 2006 wine etersoft supports popular russian applications example 1c enterprise 1c company etersoft going issue wine etersoft cad oriented towards cad systems autocad bricscad compass-3d darwine port wine libraries darwin macos powerpc intel x86 architectures patches x86 version merged back main branch wine 2009 development ppc version abandoned mike kronenberg previously created winehelper darwine add gui macos style app interacting wine later replaced winebottler darwine provides macos compatible packages compiled wine repository pipelight team produced custom version wine wine-compholio acts wrapper windows npapi plugins within linux browsers tool permits linux users run microsoft silverlight microsoft equivalent adobe flash unity web plugin along variety npapi plugins project provides extensive set patches upstream wine project occasionally get approved added upstream wine pipelight largely obsolete modern browsers longer support npapi plugins silverlight deprecated microsoft 21 august 2018 valve announced new variation wine named proton designed integrate linux version company steam software including steam installations built linux-based steamos operating system steam machine computers valve goal proton enable steam users linux play games lack native linux port particularly back-catalog games ultimately integration steam well improvements game support relative mainline wine give users simple plug-and-play experience would get playing game natively linux proton entered public beta immediately upon announced valve already collaborating codeweavers since 2016 develop improvements wine gaming performance already merged upstream wine project specific improvements incorporated proton include vulkan-based direct3d 10 11 12 implementations via vkd3d dxvk multi-threaded performance improvements via esync improved handling fullscreen games better automatic game controller hardware support proton fully open-source available via github projects using wine source code include wine project received number technical philosophical complaints concerns years wine ability run windows binary code concerns raised native windows viruses malware affecting unix-like operating systems wine run malware programs running wine confined current user privileges restricting undesirable consequences reason developers wine recommend never running superuser malware research software zerowine runs wine linux virtual machine keep malware completely isolated host system alternative improve security without slowness using virtual machine run wine lxc container like anbox software default android another security concern implemented specifications ill-designed allow security compromise wine implements specs also implement security vulnerabilities contain instance problem 2006 windows metafile vulnerability saw wine implementing vulnerable setabortproc escape common concern wine existence means vendors less likely write native linux macos bsd applications example worth considering ibm 1994 operating system os/2 warp article describes weaknesses os/2 killed first one wine project responds complaints one wiki pages also wine wiki page claims wine help break chicken-and-egg problem linux desktop use wine gaming proved specifically controversial linux community feel preventing least hindering growth native linux gaming platform microsoft made public statements wine however windows update software block updates microsoft applications running wine 16 february 2005 ivan leo puoti discovered microsoft started checking windows registry wine configuration key would block windows update component puoti noted also first time microsoft acknowledges existence wine wine ceo frank ruben
node5:Wikipedia entry. Entry name: Chicken_(Scheme_implementation). Entry content: chicken scheme implementation chicken stylized chicken programming language specifically compiler interpreter implement dialect programming language scheme compiles scheme source code standard c. mostly r5rs compliant offers many extensions standard newer r7rs standard supported extension library chicken free open-source software available bsd license implemented mostly scheme parts c performance make embedding c programs easier chicken focus quickly clear slogan practical portable scheme system chicken main focus practical application scheme writing real-world software scheme well known use computer science curricula programming language experimentation seen little use business industry chicken community produced large set libraries perform variety tasks chicken wiki software running also chicken program also contains list software written chicken chicken goal portable compiling intermediate representation case portable c gambit bigloo programs written chicken compiled common popular operating systems linux macos unix-like systems windows haiku mobile platforms ios android also built-in support cross-compiling programs extensions allows used various embedded system platforms like many scheme compilers chicken uses standard c intermediate representation scheme program translated c chicken compiler c compiler translates c program machine code target computer architecture producing executable program universal availability c makes useful purpose chicken design inspired 1994 paper henry baker outlined innovative strategy compile scheme c. scheme program compiled c functions c functions never reach return statement instead call new continuation complete continuations c functions passed extra arguments c functions calculated compiler far essence continuation-passing style baker novel idea use c call stack scheme heap hence normal c stack operations automatic variable creation variable-sized array allocation used stack fills stack pointer reaches top stack garbage collection initiated design used copying garbage collector originally devised c. j. cheney copies live continuations live objects heap despite c code copy c stack frames scheme objects require knowledge c implementation full scheme heap consists c stack nursery together two heaps required generational garbage collector approach gives speed c stack many operations allows use continuations simple calls c functions baker solution guarantees asymptotic tail recursive behavior required scheme language standard implementation chicken scheme compiler even asymptotically safe space chicken scheme mostly r5rs-compliant notable limitations deviations r7rs compatibility supplied extension library core system basic support utf-8 characters however string indexing manipulation procedures utf-8 aware extension library exists adds support full utf-8 awareness chicken large software repository added libraries programs termed eggs system similar rubygems initially eggs developed one central svn repository creating tag would automatically cause new version extension become available download currently eggs developed anywhere version control system still maintaining semi-automatic release management using popular code hosting sites release method vcs-agnostic sense user need vcses installed developer free host anywhere choose even choose avoid public version control distribute plain tarballs released eggs latest version tested automatically part continuous integration process canonical test server exists core system eggs tested daily recent development version catch regressive bugs recent stable version ensure everything works users stable system also anyone volunteer supply testing capacity different hardware operating systems core releases chicken supports r5rs standard scheme also adds nonstandard features available scheme implementations chicken compiling c makes possible inject custom c code compiled result eases integrating c libraries foreign function interface supports converting back forth built-in c types corresponding scheme objects also extension libraries exist interfacing python lua java via java native interface jni bridge relatively easy cross-compile scheme code another platform example embedded use device make cross-compiling possible scheme code chicken imposes model separate compiling compiled module consists two shared libraries one library contains actual code used runtime compiled target platform import module used load code runs compile-time host platform procedural macro code chicken compiler also easily cross-compiled translation c achieved one simply use c compiler set build another platform since version 4 chicken built-in module system support low-level hygienic macros explicit renaming macros version 4 available add-on library standard syntax-rules macros also supported implicit renaming macros basically reversed version explicit renaming mechanism trades performance convenience identifier explicitly injected unhygienic automatically renamed avoid name capture performance cost occurs implicit renaming requires macro-expander retraverse expressions two times cost paid expansion time macro author must consider longer compiling times acceptable since version 4.11 chicken comes shipped debugger named feathers scheme code compiled needed debugging option debugging events injected specific points code implemented calls c function relatively low-overhead actually debugging code debugging try make tcp connection feathers server process possibly different machine process halted user may set breakpoints start program breakpoint hit client process debugged enters command loop allows interrogation client read variables mutate chicken supports local flow analysis allows compiler catch variable type errors compile-time perform type specialisation specialisation makes possible remove several safety checks type detection runtime type deduced compile-time results improved run-time performance scrutinizer allow cross-module flow analysis used optimize code part one compiling unit module
node6:Wikipedia entry. Entry name: Dynamic_Host_Configuration_Protocol. Entry content: dynamic host configuration protocol dynamic host configuration protocol dhcp network management protocol used udp/ip networks whereby dhcp server dynamically assigns ip address network configuration parameters device network communicate ip networks dhcp server enables computers request ip addresses networking parameters automatically internet service provider isp reducing need network administrator user manually assign ip addresses network devices absence dhcp server computer device network needs manually assigned ip address assign apipa address enable communicate outside local subnet dhcp implemented networks ranging size home networks large campus networks regional internet service provider networks router residential gateway enabled act dhcp server residential network routers receive globally unique ip address within isp network within local network dhcp server assigns local ip address device connected network 1984 reverse address resolution protocol rarp defined rfc 903 introduced allow simple devices diskless workstations dynamically obtain suitable ip address however acted data link layer made implementation difficult many server platforms also required server present individual network link rarp superseded bootstrap protocol bootp defined rfc 951 september 1985 introduced concept relay agent allowed forwarding bootp packets across networks allowing one central bootp server serve hosts many ip subnets dhcp based bootp dynamically allocate ip addresses pool reclaim longer use also used deliver wide range extra configuration parameters ip clients including platform-specific parameters dhcp first defined rfc 1531 october 1993 due errors editorial process almost immediately reissued rfc 1541 four years later dhcpinform message type small changes added rfc 2131 remains standard ipv4 networks dhcpv6 initially described rfc 3315 2003 updated many subsequent rfcs rfc 3633 added dhcpv6 mechanism prefix delegation stateless address autoconfiguration added rfc 3736 udp/ip defines devices one network communicate devices another network dhcp server manage udp/ip settings devices network automatically dynamically assigning ip addresses devices dhcp operates based client–server model computer device connects network dhcp client software sends dhcp broadcast query requesting necessary information dhcp server network may service request dhcp server manages pool ip addresses information client configuration parameters default gateway domain name name servers time servers receiving dhcp request dhcp server may respond specific information client previously configured administrator specific address information valid entire network time period allocation lease valid dhcp client typically queries information immediately booting periodically thereafter expiration information dhcp client refreshes assignment initially requests parameter values dhcp server may assign new address based assignment policies set administrators large networks consist multiple links single dhcp server may service entire network aided dhcp relay agents located interconnecting routers agents relay messages dhcp clients dhcp servers located different subnets depending implementation dhcp server may three methods allocating ip addresses dhcp used internet protocol version 4 ipv4 ipv6 versions serve purpose details protocol ipv4 ipv6 differ sufficiently may considered separate protocols ipv6 operation devices may alternatively use stateless address autoconfiguration ipv6 hosts may also use link-local addressing achieve operations restricted local network link dhcp employs connectionless service model using user datagram protocol udp implemented two udp port numbers operations bootstrap protocol bootp udp port number 67 destination port server udp port number 68 used client dhcp operations fall four phases server discovery ip lease offer ip lease request ip lease acknowledgement stages often abbreviated dora discovery offer request acknowledgement dhcp operation begins clients broadcasting request client server different subnets dhcp helper dhcp relay agent may used clients requesting renewal existing lease may communicate directly via udp unicast since client already established ip address point additionally broadcast flag 1 bit 2 byte flags field bits reserved set 0 client use indicate way broadcast unicast receive dhcpoffer 0x8000 broadcast 0x0000 unicast usually dhcpoffer sent unicast hosts accept unicast packets ip addresses configured flag used work around issue dhcp client broadcasts dhcpdiscover message network subnet using destination address 255.255.255.255 limited broadcast specific subnet broadcast address directed broadcast dhcp client may also request last known ip address client remains connected network server may grant request otherwise depends whether server set authoritative authoritative server denies request causing client issue new request non-authoritative server simply ignores request leading implementation-dependent timeout client expire request ask new ip address example htype set 1 specify medium used ethernet hlen set 6 ethernet address mac address 6 octets long chaddr set mac address used client options set well dhcp server receives dhcpdiscover message client ip address lease request dhcp server reserves ip address client makes lease offer sending dhcpoffer message client message contains client client id traditionally mac address ip address server offering subnet mask lease duration ip address dhcp server making offer dhcp server may also take notice hardware-level mac address underlying transport layer according current rfcs transport layer mac address may used client id provided dhcp packet dhcp server determines configuration based client hardware address specified chaddr client hardware address field server 192.168.1.1 specifies client ip address yiaddr ip address field response dhcp offer client replies dhcprequest message broadcast server requesting offered address client receive dhcp offers multiple servers accept one dhcp offer based required server identification option request broadcast messaging servers informed whose offer client accepted dhcp servers receive message withdraw offers made client return offered ip address pool available addresses dhcp server receives dhcprequest message client configuration process enters final phase acknowledgement phase involves sending dhcpack packet client packet includes lease duration configuration information client might requested point ip configuration process completed protocol expects dhcp client configure network interface negotiated parameters client obtains ip address probe newly received address e.g arp address resolution protocol prevent address conflicts caused overlapping address pools dhcp servers dhcp client may request information server sent original dhcpoffer client may also request repeat data particular application example browsers use dhcp inform obtain web proxy settings via client sends request dhcp server release dhcp information client deactivates ip address client devices usually know users may unplug network protocol mandate sending dhcp release dhcp server provide optional configuration parameters client rfc 2132 describes available dhcp options defined internet assigned numbers authority iana dhcp bootp parameters dhcp client select manipulate overwrite parameters provided dhcp server unix-like systems client-level refinement typically takes place according values configuration file /etc/dhclient.conf options octet strings varying length first octet option code second octet number following octets remaining octets code dependent example dhcp message-type option offer would appear 0x35 0x01 0x02 0x35 code 53 dhcp message type 0x01 means one octet follows 0x02 value offer following tables list available dhcp options listed rfc 2132 iana registry option exists identify vendor functionality dhcp client information variable-length string characters octets meaning specified vendor dhcp client one method dhcp client utilize communicate server using certain type hardware firmware set value dhcp requests called vendor class identifier vci option 60 method allows dhcp server differentiate two kinds client machines process requests two types modems appropriately types set-top boxes also set vci option 60 inform dhcp server hardware type functionality device value option set gives dhcp server hint required extra information client needs dhcp response relay agent information option option 82 specifies container attaching sub-options dhcp requests transmitted dhcp relay dhcp server small networks one ip subnet managed dhcp clients communicate directly dhcp servers however dhcp servers also provide ip addresses multiple subnets case dhcp client yet acquired ip address communicate directly dhcp server using ip routing routable ip address know link layer address router know ip address dhcp server order allow dhcp clients subnets directly served dhcp servers communicate dhcp servers dhcp relay agents installed subnets dhcp client broadcasts local link relay agent receives broadcast transmits one dhcp servers using unicast relay agent stores ip address field giaddr field dhcp packet dhcp server uses giaddr-value determine subnet relay agent received broadcast allocates ip address subnet dhcp server replies client sends reply giaddr-address using unicast relay agent retransmits response local network situation communication relay agent dhcp server typically uses source destination udp port 67 dhcp ensures reliability several ways periodic renewal rebinding failover dhcp clients allocated leases last period time clients begin attempt renew leases half lease interval expired sending unicast dhcprequest message dhcp server granted original lease server unreachable fail respond dhcprequest however case client repeats dhcprequest time time dhcp server comes back becomes reachable dhcp client succeed contacting renew lease dhcp server unreachable extended period time dhcp client attempt rebind broadcasting dhcprequest rather unicasting broadcast dhcprequest message reach available dhcp servers dhcp server able renew lease time order rebinding work client successfully contacts backup dhcp server server must accurate information client binding maintaining accurate binding information two servers complicated problem servers able update lease database must mechanism avoid conflicts updates independent servers proposal implementing fault-tolerant dhcp servers submitted internet engineering task force never formalized rebinding fails lease eventually expire lease expires client must stop using ip address granted lease time restart dhcp process beginning broadcasting codice_1 message since lease expired accept ip address offered new ip address presumably different dhcp server able use network however since ip address changed ongoing connections broken 2018 dhcp remains widely-used automatically assign ip addresses newer iterations assigning ip addresses include dhcpv6 slaac base dhcp include mechanism authentication vulnerable variety attacks attacks fall three main categories client way validate identity dhcp server unauthorized dhcp servers commonly called rogue dhcp operated networks providing incorrect information dhcp clients serve either denial-of-service attack preventing client gaining access network connectivity man-in-the-middle attack dhcp server provides dhcp client server ip addresses ip address one dns servers attacker convince dhcp client dns lookups dns server therefore provide answers dns queries client turn allows attacker redirect network traffic allowing eavesdrop connections client network servers contacts simply replace network servers dhcp server secure mechanism authenticating client clients gain unauthorized access ip addresses presenting credentials client identifiers belong dhcp clients also allows dhcp clients exhaust dhcp server store ip addresses—by presenting new credentials time asks address client consume available ip addresses particular network link preventing dhcp clients getting service dhcp provide mechanisms mitigating problems relay agent information option protocol extension rfc 3046 usually referred industry actual number option 82 allows network operators attach tags dhcp messages messages arrive network operator trusted network tag used authorization token control client access network resources client access network upstream relay agent lack authentication prevent dhcp server operator relying authorization token another extension authentication dhcp messages rfc 3118 provides mechanism authenticating dhcp messages 2002 nowiki rfc 3118 /nowiki seen widespread adoption problems managing keys large numbers dhcp clients 2007 book dsl technologies remarked numerous security vulnerabilities identified security measures proposed rfc 3118 fact combined introduction 802.1x slowed deployment take-rate authenticated dhcp never widely deployed 2010 book notes implementations dhcp authentication challenges key management processing delays due hash computation deemed heavy price pay perceived benefits architectural proposals 2008 involve authenticating dhcp requests using 802.1x pana transport eap ietf proposal made including eap dhcp so-called eapodhcp appear progressed beyond ietf draft level last dates 2010
node7:Wikipedia entry. Entry name: CS-Script. Entry content: cs-script cs-script free open-source scripting platform enables creating scripts ecma-compliant c syntax scripts access .net framework mono apis cs-script offers standalone script execution well hosting script engine clr apps newer edition product called cs-script.core works .net core existing .net development tools e.g visual studio sharp develop used allowing editing debugging scripts within traditional .net-aware development environments additionally cs-script support added notepad++ visual studio code via plugins flashdevelop uses cs-script internal scripting engine bring script engine file 100 kb size system .net runtime installed script run scripts run system clr installed including mono cs-script truly object-oriented language supports vb.net c++/cli j .net functionality available including fcl com interop remoting wpf wcf easily available debugger rich ide visual studio third-party ides execution model within script .net application static void main interpretation statement script done even statement frequently used throughout code strong typing luxury available scripting languages software development tasks done language gui development script application becomes easy scripting system extended using new assemblies written .net languages com components script easily converted application vice versa functionality clr application extended scripting run within wsh mixed one wsf file external links
node8:Wikipedia entry. Entry name: Proxy_server. Entry content: proxy server computer networks proxy server server computer system application acts intermediary requests clients seeking resources servers client connects proxy server requesting service file connection web page resource available different server proxy server evaluates request way simplify control complexity proxies invented add structure encapsulation distributed systems proxy server may reside user local computer point user computer destination servers internet open proxy forwarding proxy server accessible internet user 2008 gordon lyon estimates hundreds thousands open proxies internet anonymous open proxy allows users conceal ip address browsing web using internet services varying degrees anonymity however well number methods 'tricking client revealing regardless proxy used reverse proxy surrogate proxy server appears clients ordinary server reverse proxies forward requests one ordinary servers handle request response proxy server returned came directly original server leaving client knowledge original server reverse proxies installed neighborhood one web servers traffic coming internet destination one neighborhood web servers goes proxy server use reverse originates counterpart forward proxy since reverse proxy sits closer web server serves restricted set websites several reasons installing reverse proxy servers content-filtering web proxy server provides administrative control content may relayed one directions proxy commonly used commercial non-commercial organizations especially schools ensure internet usage conforms acceptable use policy content filtering proxy often support user authentication control web access also usually produces logs either give detailed information urls accessed specific users monitor bandwidth usage statistics may also communicate daemon-based and/or icap-based antivirus software provide security virus malware scanning incoming content real time enters network many workplaces schools colleges restrict web sites online services accessible available buildings governments also censor undesirable content done either specialized proxy called content filter commercial free products available using cache-extension protocol icap allows plug-in extensions open caching architecture websites commonly used students circumvent filters access blocked content often include proxy user access websites filter trying block requests may filtered several methods url dns blacklists blacklist url regex filtering mime filtering content keyword filtering products known employ content analysis techniques look traits commonly used certain types content providers blacklists often provided maintained web-filtering companies often grouped categories pornography gambling shopping social networks etc. assuming requested url acceptable content fetched proxy point dynamic filter may applied return path example jpeg files could blocked based fleshtone matches language filters could dynamically detect unwanted language content rejected http fetch error may returned requester web filtering companies use internet-wide crawling robot assesses likelihood content certain type resultant database corrected manual labor based complaints known flaws content-matching algorithms proxies scan outbound content e.g. data loss prevention scan content malicious software web filtering proxies able peer inside secure sockets http transactions assuming chain-of-trust ssl/tls transport layer security tampered ssl/tls chain-of-trust relies trusted root certificate authorities workplace setting client managed organization trust might granted root certificate whose private key known proxy consequently root certificate generated proxy installed browser ca list staff situations proxy analysis contents ssl/tls transaction becomes possible proxy effectively operating man-in-the-middle attack allowed client trust root certificate proxy owns destination server filters content based origin request use proxy circumvent filter example server using ip-based geolocation restrict service certain country accessed using proxy located country access service web proxies common means bypassing government censorship although 3 internet users use circumvention tools cases users circumvent proxies filter using blacklists using services designed proxy information non-blacklisted location proxies installed order eavesdrop upon data-flow client machines web content sent accessed – including passwords submitted cookies used – captured analyzed proxy operator reason passwords online services webmail banking always exchanged cryptographically secured connection ssl chaining proxies reveal data original requester possible obfuscate activities eyes user destination however traces left intermediate hops could used offered trace user activities policies administrators proxies unknown user may fall victim false sense security details sight mind inconvenience risk proxy users may find blocked certain web sites numerous forums web sites block ip addresses proxies known spammed trolled site proxy bouncing used maintain privacy caching proxy server accelerates service requests retrieving content saved previous request made client even clients caching proxies keep local copies frequently requested resources allowing large organizations significantly reduce upstream bandwidth usage costs significantly increasing performance isps large businesses caching proxy caching proxies first kind proxy server web proxies commonly used cache web pages web server poorly implemented caching proxies cause problems inability use user authentication proxy designed mitigate specific link related issues degradation performance enhancing proxy peps typically used improve tcp performance presence high round-trip times high packet loss wireless mobile phone networks highly asymmetric links featuring different upload download rates peps make efficient use network example merging tcp acks acknowledgements compressing data sent application layer translation proxy proxy server used localize website experience different markets traffic global audience routed translation proxy source website visitors browse proxied site requests go back source site pages rendered original language content response replaced translated content passes back proxy translations used translation proxy either machine translation human translation combination machine human translation different translation proxy implementations different capabilities allow customization source site local audience excluding source content substituting source content original local content proxy used automatically repair errors proxied content instance bikiniproxy system instruments javascript code fly order detect automatically repair errors happening browser.. another kind repair done proxy fix accessibility issues anonymous proxy server sometimes called web proxy generally attempts anonymize web surfing different varieties anonymizers destination server server ultimately satisfies web request receives requests anonymizing proxy server thus receive information end user address requests anonymous anonymizing proxy server however degree trust present proxy server user many proxy servers funded continued advertising link user access control proxy servers implement logon requirement large organizations authorized users must log gain access web organization thereby track usage individuals anonymizing proxy servers may forward data packets header lines http_via http_x_forwarded_for http_forwarded may reveal ip address client anonymizing proxy servers known elite high-anonymity proxies make appear proxy server client website could still suspect proxy used client sends packets include cookie previous visit use high-anonymity proxy server clearing cookies possibly cache would solve problem advertisers use proxy servers validating checking quality assurance geotargeted ads geotargeting ad server checks request source ip address uses geo-ip database determine geographic source requests using proxy server physically located inside specific country city gives advertisers ability test geotargeted ads proxy keep internal network structure company secret using network address translation help security internal network makes requests machines users local network anonymous proxies also combined firewalls incorrectly configured proxy provide access network otherwise isolated internet proxies allow web sites make web requests externally hosted resources e.g images music files etc cross-domain restrictions prohibit web site linking directly outside domains proxies also allow browser make web requests externally hosted content behalf website cross-domain restrictions place protect websites likes data theft prohibit browser directly accessing outside domains secondary market brokers use web proxy servers buy large stocks limited products limited sneakers tickets web proxies forward http requests request client regular http request except full url passed instead path request sent proxy server proxy makes request specified returns response web proxies allow http connect method set forwarding arbitrary data connection common policy forward port 443 allow https traffic examples web proxy servers include apache mod_proxy traffic server haproxy iis configured proxy e.g. application request routing nginx privoxy squid varnish reverse proxy wingate ziproxy tinyproxy rabbit4 polipo clients problem complex multiple proxy-servers solved client-serer proxy auto-config protocol pac file socks also forwards arbitrary data connection phase similar http connect web proxies also known intercepting proxy inline proxy forced proxy transparent proxy intercepts normal communication without requiring special client configuration clients need aware existence proxy transparent proxy normally located client internet proxy performing functions gateway router 'transparent proxy proxy modify request response beyond required proxy authentication identification 'non-transparent proxy proxy modifies request response order provide added service user agent group annotation services media type transformation protocol reduction anonymity filtering tcp intercept traffic filtering security feature protects tcp servers tcp syn flood attacks type denial-of-service attack tcp intercept available ip traffic 2009 security flaw way transparent proxies operate published robert auger computer emergency response team issued advisory listing dozens affected transparent intercepting proxy servers intercepting proxies commonly used businesses enforce acceptable use policy ease administrative overheads since client browser configuration required second reason however mitigated features active directory group policy dhcp automatic proxy detection intercepting proxies also commonly used isps countries save upstream bandwidth improve customer response times caching common countries bandwidth limited e.g island nations must paid diversion interception tcp connection creates several issues firstly original destination ip port must somehow communicated proxy always possible e.g. gateway proxy reside different hosts class cross site attacks depend certain behaviour intercepting proxies check access information original intercepted destination problem may resolved using integrated packet-level application level appliance software able communicate information packet handler proxy intercepting also creates problems http authentication especially connection-oriented authentication ntlm client browser believes talking server rather proxy cause problems intercepting proxy requires authentication user connects site also requires authentication finally intercepting connections cause problems http caches requests responses become uncacheable shared cache integrated firewall proxy servers router/firewall host proxy communicating original destination information done method example microsoft tmg wingate interception also performed using cisco wccp web cache control protocol proprietary protocol resides router configured cache allowing cache determine ports traffic sent via transparent redirection router redirection occur one two ways gre tunneling osi layer 3 mac rewrites osi layer 2 traffic reaches proxy machine interception commonly performed nat network address translation setups invisible client browser leave proxy visible web server devices internet side proxy recent linux bsd releases provide tproxy transparent proxy performs ip-level osi layer 3 transparent interception spoofing outbound traffic hiding proxy ip address network devices several methods often used detect presence intercepting proxy server cgi web proxy accepts target urls using web form user browser window processes request returns results user browser consequently used device network allow true proxy settings changed first recorded cgi proxy named rover time renamed 1998 cgiproxy developed american computer scientist james marshall early 1996 article unix review rich morin majority cgi proxies powered one cgiproxy written perl language glype written php language phproxy written php language april 2016 cgiproxy received 2 million downloads glype received almost million downloads whilst phproxy still receives hundreds downloads per week despite waning popularity due vpns privacy methods still several thousand cgi proxies online cgi proxies set purposes making websites accessible disabled people since shut due excessive traffic usually caused third party advertising service means bypass local filtering since many users n't care collateral damage causing became necessary organizations hide proxies disclosing urls take trouble contact organization demonstrate genuine need suffix proxy allows user access web content appending name proxy server url requested content e.g en.wikipedia.org. suffixproxy.com suffix proxy servers easier use regular proxy servers offer high levels anonymity primary use bypassing web filters however rarely used due advanced web filters tor short onion router system intended enable online anonymity tor client software routes internet traffic worldwide volunteer network servers order conceal user location usage someone conducting network surveillance traffic analysis using tor makes difficult trace internet activity including visits web sites online posts instant messages communication forms back user intended protect users personal freedom privacy ability conduct confidential business keeping internet activities monitored onion routing refers layered nature encryption service original data encrypted re-encrypted multiple times sent successive tor relays one decrypts layer encryption passing data next relay ultimately destination reduces possibility original data unscrambled understood transit tor client free software additional charges use network i2p anonymous network 'i2p proxy network aiming online anonymity implements garlic routing enhancement tor onion routing i2p fully distributed works encrypting communications various layers relaying network routers run volunteers various locations keeping source information hidden i2p offers censorship resistance goals i2p protect users personal freedom privacy ability conduct confidential business user i2p runs i2p router computer node i2p router takes care finding peers building anonymizing tunnels i2p provides proxies protocols http irc socks ... software free open-source network free charge use 'proxy refers layer-7 application osi reference model network address translation nat similar proxy operates layer-3 client configuration layer-3 nat configuring gateway sufficient however client configuration layer-7 proxy destination packets client generates must always proxy server layer-7 proxy server reads packet finds true destination nat operates layer-3 less resource-intensive layer-7 proxy also less flexible compare two technologies might encounter terminology known 'transparent firewall transparent firewall means proxy uses layer-7 proxy advantages without knowledge client client presumes gateway nat layer-3 idea inside packet method layer-3 packets sent layer-7 proxy investigation dns proxy server takes dns queries usually local network forwards internet domain name server may also cache dns records client programs socks-ify allows adaptation networked software connect external networks via certain types proxy servers mostly socks
node9:Wikipedia entry. Entry name: Explicit_Congestion_Notification. Entry content: explicit congestion notification explicit congestion notification ecn extension internet protocol transmission control protocol defined rfc 3168 2001 ecn allows end-to-end notification network congestion without dropping packets ecn optional feature may used two ecn-enabled endpoints underlying network infrastructure also supports conventionally tcp/ip networks signal congestion dropping packets ecn successfully negotiated ecn-aware router may set mark ip header instead dropping packet order signal impending congestion receiver packet echoes congestion indication sender reduces transmission rate detected dropped packet rather responding properly ignoring bits outdated faulty network equipment historically dropped mangled packets ecn bits set measurements suggested fraction web servers public internet setting ecn prevents network connections reduced less 1 passive support existed ubuntu linux since 12.04 windows server since 2012 passive support popular websites increased 8.5 2012 70 may 2017 adoption across internet requires clients actively request ecn june 2015 apple announced ecn enabled default supported future products help drive adoption ecn signaling industry-wide ecn requires specific support internet layer transport layer following reasons without ecn congestion indication echo achieved indirectly detection lost packets ecn congestion indicated setting ecn field within ip packet ce echoed back receiver transmitter setting proper bits header transport protocol example using tcp congestion indication echoed back setting ece bit ecn uses two least significant right-most bits diffserv field ipv4 ipv6 header encode four different code points endpoints support ecn mark packets ect 0 ect 1 packet traverses active queue management aqm queue e.g. queue uses random early detection red experiencing congestion corresponding router supports ecn may change code point codice_5 instead dropping packet act referred “ marking ” purpose inform receiving endpoint impending congestion receiving endpoint congestion indication handled upper layer protocol transport layer protocol needs echoed back transmitting node order signal reduce transmission rate ce indication handled effectively upper layer protocol supports ecn used conjunction upper layer protocols tcp support congestion control method echoing ce indication transmitting endpoint tcp supports ecn using two flags tcp header first ecn-echo ece used echo back congestion indication i.e signal sender reduce amount information sends second congestion window reduced cwr acknowledge congestion-indication echoing received use ecn tcp connection optional ecn used must negotiated connection establishment including suitable options syn syn-ack segments ecn negotiated tcp connection sender indicates ip packets carry tcp segments connection carrying traffic ecn capable transport marking ect code point allows intermediate routers support ecn mark ip packets ce code point instead dropping order signal impending congestion upon receiving ip packet congestion experienced code point tcp receiver echoes back congestion indication using ece flag tcp header endpoint receives tcp segment ece bit reduces congestion window packet drop acknowledges congestion indication sending segment cwr bit set node keeps transmitting tcp segments ece bit set receives segment cwr bit set see affected packets tcpdump use filter predicate codice_6 since transmission control protocol tcp perform congestion control control packets pure acks syn fin segments control packets usually marked ecn-capable 2009 proposal suggests marking syn-ack packets ecn-capable improvement known ecn+ shown provide dramatic improvements performance short-lived tcp connections ecn also defined transport layer protocols perform congestion control notably dccp stream control transmission protocol sctp general principle similar tcp although details on-the-wire encoding differ principle possible use ecn protocols layered udp however udp requires congestion control performed application current networking apis give access ecn bits since ecn effective combination active queue management aqm policy benefits ecn depend precise aqm used observations however appear hold across different aqms expected ecn reduces number packets dropped tcp connection avoiding retransmission reduces latency especially jitter effect drastic tcp connection single outstanding segment able avoid rto timeout often case interactive connections remote logins transactional protocols http requests conversational phase smtp sql requests effects ecn bulk throughput less clear modern tcp implementations fairly good resending dropped segments timely manner sender window large use ecn found detrimental performance highly congested networks using aqm algorithms never drop packets modern aqm implementations avoid pitfall dropping rather marking packets high load many modern implementations tcp/ip protocol suite support ecn however usually ship ecn disabled windows versions since windows server 2008 windows vista support ecn tcp since windows server 2012 enabled default windows server versions data center transmission control protocol dctcp used previous windows versions non-server versions disabled default ecn support enabled using shell command freebsd 8.0 netbsd 4.0 implement ecn support tcp activated sysctl interface setting 1 value parameter likewise sysctl used openbsd since version 2.4.20 linux kernel released november 2002 linux supports three working modes ecn tcp configured sysctl interface setting parameter one following values beginning version 4.1 linux kernel released june 2015 mechanism specified rfc 3168 section 6.1.1.1 enabled default ecn enabled value 1 fallback mechanism attempts ecn connectivity initial setup outgoing connections graceful fallback transmissions without ecn capability mitigating issues ecn-intolerant hosts firewalls mac os x 10.5 10.6 implement ecn support tcp controlled using boolean sysctl variables first variable enables ecn incoming connections already ecn flags set second one tries initiate outgoing connections ecn enabled variables default set enable respective behavior june 2015 apple inc. announced os x 10.11 released later year would ecn turned default never happened macos sierra ecn enabled 50 percent tcp sessions june 2015 apple inc. announced ios 9 next version ios would support ecn turned default tcp ecn negotiation enabled 5 randomly selected connections wi-fi ethernet ios 9 50 randomly selected connections wi-fi ethernet cellular carriers ios 10 100 ios 11 solaris kernel supports three states ecn tcp default behavior solaris 11 full ecn usage activated via since ecn marking routers dependent form active queue management routers must configured suitable queue discipline order perform ecn marking cisco ios routers perform ecn marking configured wred queuing discipline since version 12.2 8 t. linux routers perform ecn marking configured one red gred queue disciplines explicit ecn parameter using sfb discipline using codel fair queuing fq_codel discipline cake queuing discipline modern bsd implementations freebsd netbsd openbsd support ecn marking altq queueing implementation number queuing disciplines notably red blue freebsd 11 included codel pie fq-codel fq-pie queuing disciplines implementation ipfw/dummynet framework ecn marking capability data center transmission control protocol data center tcp dctcp utilizes ecn enhance transmission control protocol congestion control algorithm used data center networks whereas standard tcp congestion control algorithm able detect presence congestion dctcp using ecn able gauge extent congestion dctcp modifies tcp receiver always relay exact ecn marking incoming packets cost ignoring function meant preserve signalling reliability makes dctcp sender vulnerable loss acks receiver mechanism detect cope algorithms provide equivalent better receiver feedback reliable approach active research topic
node10:Wikipedia entry. Entry name: Visual_IRC. Entry content: visual irc visual irc virc open-source internet relay chat client windows operating system unlike many irc clients nearly functionality virc driven included irc script result program behavior extended changed without altering source code much source code birc virc 2 related utilities released gpl project web site sourceforge versus scripting language originally developed irc client bisual irc currently used visual irc similar many ways scripting languages used ircii mirc well tcl c. name versus chosen could shortened vs common abbreviation vircscript language used visual irc '96 '98 versus remained mostly backward compatible vircscript existing documentation commentary mentioned vs remained mostly accurate applied versus name also alluded birc origins replacement virc object versus ovs refers object-oriented features versus scripts define classes work objects methods instead textual data aliases however practice ovs mostly used manipulate vcl objects make virc interface scripts stored files usually .vsc file extension though .lib extension sometimes used versus script file simply contains statements interpreted script loaded blocks defined script see replace blocks defined name previous scripts aliases methods including constructors destructors events menu items toolbar items referred routines code blocks hello world code example example count ten example make everyone current channel operator
node11:Wikipedia entry. Entry name: Scriptcase. Entry content: scriptcase scriptcase rad development platform php applications web oriented installed server internet acts like platform developers allows use graphical interface directly web browser automatically generate codes developed netmake year 2000 used mac windows linux operating system using scriptcase php developers generate complete online applications scriptcaseis rapid web development tool aims reduce development time increase productivity developers need xamp like environment web server like apache incl php dabase like mysql browser desktop accessible via network internet develop applications hosting applications server needs webserver incl php database programs finally developed deployed scriptcase longer necessary run application scriptcase used create crud create read update delete applications also enables add custom code manage business rules validation scriptcase lets create forms queries php ranging simple forms forms high level complex elements manipulate data databases mysql postgresql sqlite interbase firebird access oracle ms sqlserver db2 sybase informix odbc connections permits development javascript methods used within ajax events create applications ajax set features services easy fast hand coding navigation pages sections automatic validation fields date currency zip code social security number among others generated reports exported ms word ms excel pdf printed complex sql statements used sub-select joins even stored procedures scriptcase allows users write php handle exceptions create complex validation scriptcase compatible rtl right left writing support right left writing prevalent arabic languages also possible create infrastructure menus login screen security system authentication create tabs group forms queries executed page platform development began 2000 since receiving regular updates addresses web application developers desktops mobiles two ways enables starting developers limited knowledge programming php java basic knowledge databases sql build applications reads updates data web databases also aims experienced developer scriptcase put lot focus business logic rather editing forms build database connections etc pricing model shift buying software till end 2016 lease service 2016 due publication ceo subscribers current users scriptcase nov 14th 2016 prices currently 400- 600 buying software depending many databases supported per developer platform development started 2000 since tool received periodic updates improvements -was sold customers beta mode -big changes interface -native support ajax -internationalization support -graphics flash -new implementations jquery support -focused editing field types creating option edit fields -the biggest change performance 5 times faster -integration paypal -multi-thread processing scriptcase consolidation one strongest tools bi business intelligence migrating features help end user make decisions made major changes grid application option end users create group within application based fields defined developer add totals create graphics addition new graphic application added simplify creation applications implemented new filter functionality dynamic summary grid applications created new graphic application support user-defined combined final graphics new refined filter restricting values according universe exists database group buttons new chart toolbar button editor comes important implementations business intelligence complete redesign charts grids abstracts – pivot tables dashboards significant improvements security pdf report module menu interface redesign development improvement performance php7 among implementations scriptcase still allows advanced settings generated applications meet requirements complex systems also documentation generator integrate whole team
node12:Wikipedia entry. Entry name: Harvest_project. Entry content: harvest project harvest darpa funded research project internet research task force research group resource discovery ietf-rd hosted university colorado boulder provided web cache developed standards internet cache protocol summary object interchange format spawned many technologies software products conclusion project 1996 development harvest object cache continued university edinburgh releasing version 1.5 open source squid cache commercial netcache based harvest object cache
node13:Wikipedia entry. Entry name: NetCache. Entry content: netcache netcache former web cache software product owned developed netapp 1997 2006 hardware product family incorporating netcache software netcache software started commercial fork harvest object cache developed internet middleware corporation imc consisted former harvest project developers including peter b. danzig professor university southern california late 1996 software named internet middleware object cache referred cached 2 later cached 3 1997 imc acquired netapp software renamed netcache danzig becoming chief architect cto netcache division 2006 netapp sold netcache business technology blue coat systems similar line proxysg appliances became expensive product existing netapp customers hardware netcache appliance included netapp data ontap microkernel write anywhere file layout file system achieving four times throughput software equivalents available time according netapp comparisons starting ontap version 9.5 similar functionality introduced flexcache name november 2005 three hardware models offered former models include
node14:Wikipedia entry. Entry name: Internet_Cache_Protocol. Entry content: internet cache protocol internet cache protocol icp udp-based protocol used coordinating web caches purpose find appropriate location retrieve requested object situation multiple caches use single site icp use caches efficiently possible minimize number remote requests originating server hierarchically queried cache either parent sibling parents usually sit closer internet connection child child cache find object query usually sent parent cache fetch cache pass request siblings caches equal hierarchical status whose purpose distribute load amongst siblings request comes one cache cluster siblings icp used query siblings object requested sibling object usually transferred instead queried original server often called near miss — object found cache “ miss ” loaded nearby cache instead remote server icp protocol designed lightweight order minimize round-trip time caches intended unreliable quick connections approach reduce numbers server retrievals also prevent storage multiple copies instance data leads potential drawback increased intercache communication slow system icp protocol described rfc 2186 application hierarchical web caching rfc 2187 web proxies support icp include htcp designed successor icp attempts handle various problems found icp deployments icp message consists two sections header header length fixed 20 octets five 32-bit words data data variable length limited maximum icp message size including header 16,384 octets icp header consists 8 fields 2 optional fields fifth sixth field optional pink background table appropriately named “ options ” “ option data ”
node15:Wikipedia entry. Entry name: Hybrid_kernel. Entry content: hybrid kernel hybrid kernel operating system kernel architecture attempts combine aspects benefits microkernel monolithic kernel architectures used computer operating systems traditional kernel categories monolithic kernels microkernels nanokernels exokernels seen extreme versions microkernels hybrid category controversial due similarity hybrid kernels ordinary monolithic kernels term dismissed linus torvalds simple marketing idea behind hybrid kernel kernel structure similar microkernel implement structure manner monolithic kernel contrast microkernel nearly operating system services hybrid kernel still kernel space none reliability benefits services user space microkernel however ordinary monolithic kernel none performance overhead message passing context switching kernel user mode normally comes microkernel one prominent example hybrid kernel microsoft windows nt kernel powers operating systems windows nt family including windows 10 windows server 2019 powers windows phone 8 windows phone 8.1 xbox one nt-based windows classified hybrid kernel macrokernel rather monolithic kernel emulation subsystems run user-mode server processes rather kernel mode monolithic kernel large number design goals resemble design goals mach particular separation os personalities general kernel design conversely reason nt microkernel system system components run address space kernel would case monolithic design traditional monolithic design would microkernel per se kernel would implement broadly similar functionality nt microkernel kernel-mode subsystems windows nt design includes many objectives mach archetypal microkernel system one important structure collection modules communicate via well-known interfaces small microkernel limited core functions first-level interrupt handling thread scheduling synchronization primitives allows possibility using either direct procedure calls interprocess communication ipc communicate modules hence potential location modules different address spaces example either kernel space server processes design goals shared mach included support diverse architectures kernel abstractions general enough allow multiple operating system personalities implemented top object-oriented organisation primary operating system personality windows windows api always present emulation subsystem implements windows personality called client/server runtime subsystem csrss.exe versions nt prior 4.0 subsystem process also contained window manager graphics device interface graphics device drivers performance reasons however version 4.0 later modules often implemented user mode even monolithic systems especially designed without internal graphics support run kernel-mode subsystem applications run nt written one os personalities usually windows api native nt api documentation publicly available exception routines used device driver development os personality implemented via set user-mode dlls see dynamic-link library mapped application processes address spaces required together emulation subsystem server process described previously applications access system services calling os personality dlls mapped address spaces turn call nt run-time library ntdll.dll also mapped process address space nt run-time library services requests trapping kernel mode either call kernel-mode executive routines make local procedure calls lpcs appropriate user-mode subsystem server processes turn use nt api communicate application processes kernel-mode subsystems xnu kernel apple inc. acquired developed use macos ios watchos tvos operating systems released free open source software part darwin operating system xnu acronym x unix originally developed next nextstep operating system xnu hybrid kernel combining version 2.5 mach kernel developed carnegie mellon university components 4.3bsd object-oriented api writing drivers called driver kit apple acquired next mach component upgraded osfmk 7.3 microkernel apple uses heavily modified osfmk 7.3 functioning hybrid kernel parts freebsd included osfmk 7.3 includes applicable code university utah mach 4 kernel applicable code many mach 3.0 variants sprouted original carnegie mellon university mach 3.0 kernel bsd components upgraded code freebsd project driver kit replaced c++ api writing drivers called i/o kit like modern kernels xnu hybrid containing features monolithic microkernels attempting make best use technologies message passing capability microkernels enabling greater modularity larger portions os benefit protected memory well retaining speed monolithic kernels certain critical tasks xnu runs arm part ios ia-32 x86-64 based processors
node16:Wikipedia entry. Entry name: GENA. Entry content: gena gena stands general event notification architecture gena base defines http notification architecture transmits notifications http resources http resource could object might need send receive notification example distribution list buddy list print job etc defined internet-draft draft-cohen-gena-p-base-01.txt expired gena base client arbiter provides ability send receive notifications using http tcp/ip administratively scoped unreliable multicast udp provisions made use intermediary arbiters called subscription arbiters handle routing notifications intended destination july 13–14 1998 university california irvine convened wisen workshop internet-scale event notification event brought together number experts various fields included presentation gena josh cohen microsoft delegates showcased event notification architectures haggled requirements josh final slide includes bullet points gena implemented microsoft products wish collaborate agree standard gena comply interest event notification appears waned 1998 participants unable come common definitions required definition notification services protocols gena briefly considered use internet printing protocol found niche part universal plug play upnp architecture gena base client arbiter
node17:Wikipedia entry. Entry name: Georg_C._F._Greve. Entry content: georg c. f. greve georg c. f. greve born 10 march 1973 helgoland germany software developer physicist author currently co-founder president vereign working technology politics since founded free software foundation europe fsfe 2001 greve working full-time president fsfe since early 2001 june 2009 handed presidency fsfe karsten gerloff responsibilities fsfe included coordination general assembly supporting local representatives work working political legal issues well projects giving speeches informing journalists spread knowledge free software addition georg greve also worked consultant representing google ooxml standardisation process iso project reviewer european commission greve married currently lives switzerland 2010 greve awarded cross merit ribbon federal republic germany verdienstkreuz bande greve degree physics biophysics physical oceanography astronomy minor fields study computer science department university hamburg interdisciplinary diploma thesis written field nanotechnology scanning probe microscopy greve first software development 12 years old first publication program professional journal 1992 partly financed studies managed software development evaluate squid-sensor data biomagnetometic laboratory university medical center hamburg-eppendorf hamburg germany 1993 came across free software gnu project linux 1998 european speaker gnu project began writing brave gnu world monthly column free computer software featuring interesting gnu projects month published internet many ten languages international printed magazines including german linux-magazin name brave gnu world reference aldous huxley novel brave new world early 2001 initiated free software foundation europe fsfe fsf europe first free software foundation outside united states america transnational free software foundation greve invited expert “ commission intellectual property rights ” uk government represented coordination circle german civil society first phase united nations un world summit information society wsis part german governmental delegation also networked civil society working groups european level well thematic working group patents copyrights trademarks pct free software 2010 2017 served ceo well president later member board kolab systems ag küsnacht switzerland developers kolab server late 2017 greve known advocate open source co-founded company called vereign enable authentic communication blockchain federated networks claus h. bressmer
node18:Wikipedia entry. Entry name: Scripting_language. Entry content: scripting language scripting script language programming language special run-time environment automates execution tasks tasks could alternatively executed one-by-one human operator scripting languages often interpreted rather compiled primitives usually elementary tasks api calls language allows combined programs environments automated scripting include software applications web pages within web browser usage shells operating systems os embedded systems well numerous games scripting language viewed domain-specific language particular environment case scripting application also known extension language scripting languages also sometimes referred high-level programming languages operate high level abstraction control languages particularly job control languages mainframes term scripting language also used loosely refer dynamic high-level general-purpose languages perl powershell python tcl term script often used small programs thousand lines code languages domain-specific languages text-processing languages sed awk languages originally developed use within particular environment later developed portable domain-specific general-purpose languages conversely many general-purpose languages dialects used scripting languages article discusses scripting languages narrow sense languages specific environment spectrum scripting languages ranges small highly domain-specific languages general-purpose programming languages used scripting standard examples scripting languages specific environments include bash unix unix-like operating systems ecmascript javascript web browsers visual basic applications microsoft office applications lua language designed widely used extension language python general-purpose language also commonly used extension language ecmascript still primarily scripting language web browsers also used general-purpose language emacs lisp dialect lisp emacs editor visual basic applications dialect visual basic examples scripting language dialects general-purpose languages game systems notably second life virtual world trainz franchise railroad simulators extensively extended functionality scripting extensions linden scripting language trainzscript games like wesnoth variety actual games played players scripts written users typical scripting languages intended fast learn write either short source code files interactively read–eval–print loop repl language shell generally implies relatively simple syntax semantics typically script code written scripting language executed start finish script explicit entry point example uncommon characterise java scripting language lengthy syntax rules classes exist files directly possible execute java interactively source files contain definitions must invoked externally host application application launcher public class helloworld piece code intended print hello world nothing main declared helloworld class contrast python allows definition functions single file avoid functions altogether use imperative programming style even use interactively codice_1 one line python code prints hello world declarative statement like main required scripting language usually interpreted source code bytecode contrast software environment scripts written typically written compiled language distributed machine code form scripting languages may designed use end users program—end-user development—or may internal use developers write portions program scripting language scripting languages typically use abstraction form information hiding spare users details internal variable types data storage memory management scripts often created modified person executing also often distributed large portions games written scripting language early mainframe computers 1950s non-interactive instead using batch processing ibm job control language jcl archetype languages used control batch processing first interactive shells developed 1960s enable remote operation first time-sharing systems used shell scripts controlled running computer programs within computer program shell calvin mooers trac language generally credited inventing command substitution ability embed commands scripts interpreted insert character string script multics calls active functions louis pouzin wrote early processor command scripts called runcom ctss around 1964 stuart madnick mit wrote scripting language ibm cp/cms 1966 originally called processor command later named exec multics included offshoot ctss runcom also called runcom exec eventually replaced exec 2 rexx languages tcl lua specifically designed general-purpose scripting languages could embedded application languages visual basic applications vba provided strong integration automation facilities underlying system embedding general-purpose scripting languages instead developing new language application also obvious benefits relieving application developer need code language translator scratch allowing user apply skills learned elsewhere software incorporates several different scripting languages modern web browsers typically provide language writing extensions browser several standard embedded languages controlling browser including javascript dialect ecmascript xul scripting often contrasted system programming ousterhout dichotomy programming large programming small view scripting particularly glue code connecting software components language specialized purpose glue language pipelines shell scripting archetypal examples glue languages perl initially developed fill role web development considered use glue languages interfacing database web server substantial amount logic written script better characterized simply another software component glue glue languages especially useful writing maintaining glue language examples macro languages exposed operating system application components serve glue languages include visual basic applications wordbasic lotusscript corelscript hummingbird basic quickscript saxbasic winwrap basic tools like awk also considered glue languages language implemented windows script host engine vbscript jscript vba default windows third-party engines including implementations rexx perl tcl python xslt ruby modern pascal delphi c majority applications access use operating system components via object models functions devices like programmable calculators may also glue languages operating systems pdas windows ce may available native third-party macro tools glue applications together addition implementations common glue languages—including windows nt ms-dos unix shells rexx modern pascal php perl depending upon os version wsh default script engines vbscript jscript available programmable calculators programmed glue languages three ways example texas instruments ti-92 factory default programmed command script language inclusion scripting glue language lua ti-nspire series calculators could seen successor primary on-board high-level programming languages graphing calculators often basic variants sometimes lisp derivatives uncommonly c derivatives many cases glue together calculator functions—such graphs lists matrices etc third-party implementations comprehensive basic version may closer variants listed glue languages article available—and attempts implement perl rexx various operating system shells ti hp graphing calculators also mentioned pc-based c cross-compilers ti hp machines used conjunction tools convert c perl rexx awk well shell scripts perl modern pascal vbscript perl make possible write program glue language eventual implementation compiled program calculator major class scripting languages grown automation job control relates starting controlling behavior system programs sense one might think shells descendants ibm jcl job control language used exactly purpose many languages interpreters double command-line interpreters unix shell ms-dos codice_2 others applescript offer use english-like commands build scripts advent graphical user interfaces specialized kind scripting language emerged controlling computer languages interact graphic windows menus buttons human user would simulating actions user languages typically used automate user actions languages also called macros control simulated key presses mouse clicks well tapping pressing touch-activated screen languages could principle used control gui application practice use limited use needs support application operating system exceptions limitation gui scripting languages based recognizing graphical objects display screen pixels gui scripting languages depend support operating system application application specific languages split many different categories i.e standalone based app languages executable internal application specific languages postscript xml gscript widely distributed scripts respectively implemented adobe ms google among others include idiomatic scripting language tailored needs application user likewise many computer game systems use custom scripting language express programmed actions non-player characters game environment languages sort designed single application may superficially resemble specific general-purpose language e.g quakec modeled c custom features distinguish emacs lisp fully formed capable dialect lisp contains many special features make useful extending editing functions emacs application-specific scripting language viewed domain-specific programming language specialized single application number languages designed purpose replacing application-specific scripting languages embeddable application programs application programmer working c another systems language includes hooks scripting language control application languages may technically equivalent application-specific extension language application embeds common language user gets advantage able transfer skills application application generic alternative simply provide library often c library general-purpose language use control application without modifying language specific domain javascript began primarily still language scripting inside web browsers however standardisation language ecmascript made popular general-purpose embeddable language particular mozilla implementation spidermonkey embedded several environments yahoo widget engine applications embedding ecmascript implementations include adobe products adobe flash actionscript adobe acrobat scripting pdf files tcl created extension language come used frequently general-purpose language roles similar python perl ruby hand rexx originally created job control language widely used extension language well general-purpose language perl general-purpose language oraperl 1990 dialect consisting perl 4 binary oracle call interface compiled however since replaced library perl module dbd :oracle complex task-oriented applications may incorporate expose embedded programming language allow users control give functionality available user interface matter sophisticated example autodesk maya 3d authoring tools embed mel scripting language blender uses python fill role types applications need faster feature addition tweak-and-run cycles e.g game engines also use embedded language development allows prototype features faster tweak freely without need user intimate knowledge inner workings application rebuild tweak take significant amount time scripting languages used purpose range common famous lua python lesser-known ones angelscript squirrel ch another c compatible scripting option industry embed c/c++ application programs
node19:Wikipedia entry. Entry name: Common_Lisp_Object_System. Entry content: common lisp object system common lisp object system clos facility object-oriented programming part ansi common lisp clos powerful dynamic object system differs radically oop facilities found static languages c++ java clos inspired earlier lisp object systems mit flavors commonloops although general either originally proposed add-on clos adopted part ansi standard common lisp adapted lisp dialects eulisp emacs lisp basic building blocks clos classes methods instances classes generic functions clos provides macros define codice_1 codice_2 codice_3 instances created function codice_4 classes multiple superclasses list slots member variables c++/java parlance special metaclass slots allocated class instances class share slot instance slot name value slot accessed name using function codice_5 additionally special generic functions defined write read values slots slot clos class must unique name clos multiple dispatch system means methods specialized upon required arguments oo languages single-dispatch meaning methods specialized first argument another unusual feature methods belong classes classes provide namespace generic functions methods methods defined separately classes special access e.g self protected class slots methods clos grouped generic functions generic function object callable like function associates collection methods shared name argument structure specialized different arguments since common lisp provides non-clos classes structures built-in data types numbers strings characters symbols ... clos dispatch works also non-clos classes clos also supports dispatch individual objects eql specializers clos default support dispatch common lisp data types example dispatch work fully specialized array types types introduced codice_6 however common lisp implementations provide metaobject protocol allows generic functions provide application specific specialization dispatch rules dispatch clos also different oo languages dispatch mechanism works runtime adding removing methods thus may lead changed effective methods even generic function called arguments runtime changing method combination also may lead different effective methods example like oo systems dynamic languages clos enforce encapsulation slot accessed using codice_5 function via optionally auto-generated accessor methods access via codice_5 know name slot cl programmers use language package facility declare functions data structures intended export apart normal primary methods also codice_9 codice_10 codice_11 auxiliary methods former two invoked prior primary method particular order based class hierarchy codice_11 method control whether primary method executed additionally programmer specify whether possible primary methods along class hierarchy called one providing closest match standard method-combination provides primary around methods explained method-combinations method types new simple complex method-combinations method types defined clos allows multiple inheritance default order methods executed multiple inheritance correct programmer may resolve diamond inheritance problems specifying order method combinations clos dynamic meaning contents also structure objects modified runtime clos supports changing class definitions on-the-fly even instances class question already exist well changing class membership given instance codice_13 operator clos also allows one add redefine remove methods runtime circle-ellipse problem readily solved clos oop design patterns either disappear qualitatively simpler clos prototype language classes must defined objects instantiated members class outside ansi common lisp standard widely implemented extension clos called metaobject protocol mop mop defines standard interface underpinnings clos implementation treating classes slot-descriptions generic-functions methods instances metaclasses allows definition new metaclasses modification clos behavior flexibility clos mop prefigures aspect-oriented programming later developed engineers gregor kiczales mop defines behavior whole object system set protocols defined terms clos thus possible create new object-systems extending changing provided clos functionality book art metaobject protocol describes use implementation clos mop various common lisp implementations slightly different support meta-object protocol closer project aims provide missing features flavors successor new flavors object system mit lisp machine large parts lisp machine operating systems many applications use flavors new flavors flavors introduced multiple inheritance mixins among features flavors mostly obsolete though implementations common lisp exist flavors using message passing paradigm new flavors introduced generic functions commonloops successor loops xerox interlisp-d commonloops implemented common lisp portable implementation called portable commonloops pcl first implementation clos pcl widely ported still provides base clos implementation several common lisp implementations pcl implemented mostly portable common lisp system dependent parts power expressivity clos well historical availability tinyclos simplified portable clos implementation written gregor kiczales use scheme clos-like mop-based object systems become de facto norm lisp dialect implementations well finding way languages oop facilities
node20:Wikipedia entry. Entry name: GNU_Guile. Entry content: gnu guile gnu ubiquitous intelligent language extensions gnu guile preferred extension language system gnu project features implementation programming language scheme first version released 1993 addition large parts scheme standards guile scheme includes modularized extensions many different programming tasks extending programs guile offers libguile allows language embedded programs integrated closely c language application programming interface api similarly new data types subroutines defined c api made available extensions guile guile used programs gnucash lilypond gnu guix guix system distribution guixsd gnu debugger guile scheme general-purpose high-level programming language whose flexibility allows expressing concepts fewer lines code would possible languages c. example hygienic macro system allows adding domain specific syntax-elements without modifying guile guile implements scheme standard r5rs r6rs several scheme requests implementation srfi many extensions core idea guile scheme developer implements critical algorithms data structures c c++ exports functions types use interpreted code application becomes library primitives orchestrated interpreter combining efficiency compiled code flexibility interpretation thus guile scheme languages implemented guile extended new data types subroutines implemented c api standard distribution offers modules portable operating system interface posix system calls scheduling foreign function interface s-expression based xml processing sxml sxpath sxslt http world wide web apis delimited continuations array programming functionality guile programs use facilities slib portable scheme library using continuations call/cc requirement scheme standard guile copies execution stack heap back foreign code may pointers scheme objects guile uses conservative boehm–demers–weiser bdw garbage collector guile manual gives details inception early history language brief summary follows success emacs free software community highly extensible customizable application via extension partly implementation language emacs lisp community began consider design strategy could apply rest gnu system tom lord initially began work embeddable language runtime named gnu extension language gel based aubrey jaffer scheme implementation scm turn based george carrette siod lord convinced richard stallman make gel official extension language gnu project based argument scheme cleaner lisp dialect emacs lisp gel could evolve implement languages runtime namely emacs lisp lord discovered gel naming conflict another programming language solicited suggestions new name several contributions several usenet newsgroups lord controversially chose guile suggestion lee thomas development guile gel public release extension language tcl gaining popularity pushed universal extension language stallman saw tcl underpowered extension language posted criticism comp.lang.tcl newsgroup initiated flamewar known tcl war since public announcement guile project coincided tcl debate become common misconception guile began reaction initial release guile development languished many years 2009–2010 saw major improvements guile 2.0 released 2011 new compiler infrastructure virtual machine implementation switch boehm–demers–weiser garbage collector many improvements guile scheme language major changes one goals guile allow languages used alongside scheme guile would effectively language-neutral runtime environment various attempts made past versions dialect scheme essentially differing c-like syntax translation emacs lisp tcl converter motivated tkwww something roughly resembling language logo version 2.0 project successfully transitioned compiler tower approach allowing definition compilers one language another typically higher-level one lower-level intermediate representation eventually virtual machine bytecode native machine code several past unfinished attempts replace supplement emacs emacs lisp elisp extension language guile parallel efforts supporting languages guile version 2.0 guile new attempt implementing elisp guile compiler tower replacing emacs elisp implementation libguile begun made significant progress google summer code projects guile-based emacs could offer better execution performance emacs lisp support new emacs lisp language features easily make guile libraries written programming languages available emacs lisp code allow writing emacs extensions programming languages supported guile remaining fully backward compatible existing emacs lisp code bases implementation reached stage guile emacs able reliably run emacs lisp code remaining problems possible problems involve different internal representation emacs lisp strings scheme strings difference emacs lisp scheme treat boolean false empty list objects emacs lisp macros integrating scheme emacs lisp designed concurrency portability guile platforms supported emacs concerns raised emacs community include relative sizes emacs guile communities whether would cause splitting community emacs extensible programming languages emacs lisp
node21:Wikipedia entry. Entry name: List_of_security_hacking_incidents. Entry content: list security hacking incidents timeline computer security hacker history covers important noteworthy events history security hacking cracking
node22:Wikipedia entry. Entry name: Nuprl. Entry content: nuprl nuprl proof development system providing computer-mediated analysis proofs formal mathematical statements tools software verification optimization originally developed 1980s robert lee constable others system maintained prl project cornell university currently supported version nuprl 5 also known fdl formal digital library nuprl functions automated theorem proving system also used provide proof assistance nuprl uses type system based martin-löf intuitionistic type theory model mathematical statements digital library mathematical theories constructed analyzed variety editors including graphical user interface web-based editor emacs mode variety evaluators inference engines operate statements library translators also allow statements manipulated java ocaml programs overall system controlled variant ml nuprl 5 architecture described distributed open architecture intended primarily used web service rather standalone software interested using web service migrating theories older versions nuprl contact email address given nuprl system web page nuprl first released 1984 first described detail book implementing mathematics nuprl proof development system published 1986 nuprl 2 first unix version nuprl 3 provided machine proof mathematical problems related girard paradox higman lemma nuprl 4 first version developed world wide web used verify cache coherency protocols computer systems current system architecture implemented nuprl 5 first proposed 2000 conference paper reference manual nuprl 5 published 2002 nuprl subject many computer science publications recent 2014 jonprl redprl systems also based computational type theory redprl explicitly inspired nuprl
node23:Wikipedia entry. Entry name: Reference_(computer_science). Entry content: reference computer science computer science reference value enables program indirectly access particular datum variable value record computer memory storage device reference said refer datum accessing datum called dereferencing reference reference distinct datum typically references data stored memory given system reference implemented physical address data stored memory storage device reason reference often erroneously confused pointer address said point data however reference may also implemented ways offset difference datum address fixed base address index array abstractly handle broadly networking references may network addresses urls concept reference must confused values keys identifiers uniquely identify data item give access non-trivial lookup operation table data structure references widely used programming especially efficiently pass large mutable data arguments procedures share data among various uses particular reference may point variable record contains references data idea basis indirect addressing many linked data structures linked lists references cause significant complexity program partially due possibility dangling wild references partially topology data references directed graph whose analysis quite complicated references increase flexibility objects stored allocated passed areas code long one access reference data one access data data need moved also make sharing data different code areas easier keeps reference mechanism references varying implementation fundamental programming language feature common nearly modern programming languages even languages support direct use references internal implicit use example call reference calling convention implemented either explicit implicit use references pointers primitive due intimate relationship underlying hardware one powerful efficient types references however also due relationship pointers require strong understanding programmer details memory architecture pointers store memory location address instead value directly inappropriate use pointers lead undefined behavior program particularly due dangling pointers wild pointers smart pointers opaque data structures act like pointers accessed particular methods handle abstract reference may represented various ways common example file handles file data structure c standard i/o library used abstract file content usually represents file requesting lock file specific position within file content reading file distributed computing reference may contain address identifier may also include embedded specification network protocols used locate access referenced object way information encoded serialized thus example wsdl description remote web service viewed form reference includes complete specification locate bind particular web service reference live distributed object another example complete specification construct small software component called proxy subsequently engage peer-to-peer interaction local machine may gain access data replicated exists weakly consistent message stream cases reference includes full set instructions recipe access data sense serves purpose identifier address memory generally reference considered piece data allows unique retrieval another piece data includes primary keys databases keys associative array set keys k set data objects well-defined single-valued function k ∪ null defines type reference null image key referring anything meaningful alternative representation function directed graph called reachability graph datum represented vertex edge u v datum u refers datum v maximum out-degree one graphs valuable garbage collection used separate accessible inaccessible objects many data structures large complex objects composed smaller objects objects typically stored one two ways internal storage usually efficient space cost references dynamic allocation metadata time cost associated dereferencing reference allocating memory smaller objects internal storage also enhances locality reference keeping different parts large object close together memory however variety situations external storage preferred languages java smalltalk python scheme support internal storage languages objects uniformly accessed references assembly languages first languages used typical express references using either raw memory addresses indexes tables work somewhat tricky use address tells nothing value points even large interpret information encoded program logic result misinterpretations occur incorrect programs causing bewildering errors one earliest opaque references lisp language cons cell simply record containing two references lisp objects including possibly cons cells simple structure commonly used build singly linked lists also used build simple binary trees so-called dotted lists terminate null reference value another early language fortran explicit representation references use implicitly call-by-reference calling semantics pointer still one popular types references today similar assembly representation raw address except carries static datatype used compile-time ensure data refers misinterpreted however c weak type system violated using casts explicit conversions various pointer types pointer types integers misinterpretation still possible difficult successor c++ tried increase type safety pointers new cast operators smart pointers standard library still retained ability circumvent safety mechanisms compatibility number popular mainstream languages today eiffel java c visual basic adopted much opaque type reference usually referred simply reference references types like c pointers indicating interpret data reference typesafe interpreted raw address unsafe conversions permitted fortran reference best thought alias another object scalar variable row column array syntax dereference reference manipulate contents referent directly fortran references null languages references facilitate processing dynamic structures linked lists queues trees settings concept mutable variables data modified often makes implicit use references standard ml ocaml many functional languages values persistent modified assignment assignable reference cells serve unavoidable purposes mutable references imperative languages make capability modified explicit reference cells hold value given polymorphic type codice_1 codice_2 replaced type value pointed mutable references pointed different objects lifetime example permits building circular data structures reference cell functionally equivalent array length 1 preserve safety efficient implementations references type-cast ml pointer arithmetic performed important note functional paradigm many structures would represented using pointers language like c represented using facilities powerful algebraic datatype mechanism programmer able enjoy certain properties guarantee immutability programming even though compiler often uses machine pointers hood languages like perl support symbolic references string values contain names variables value regular reference dereferenced perl considers symbolic reference gives variable name given value php similar feature form codice_3 syntax many object oriented languages make extensive use references may use references access assign objects references also used function/method calls message passing reference counts frequently used perform garbage collection unused objects",wikics,nc
"Classify the wikipedia page represented by node24 using its subgraph data (text attributes and connections) as follows.

node0: Texas Instruments' Lisp machine from the 1980s used for AI software development, featuring NuBus and specialized 32-bit processors.  
node1: XML is a markup language for structuring data, enabling web services and standards via schemas like XSD, emphasizing simplicity and machine-readability.  
node2: Lists free/open-source web apps, server-side software, and alternatives to proprietary services like productivity and collaboration tools.  
node3: Microsoft's event-driven Visual Basic (VB) for rapid app development, legacy VB6 persists despite 2008 retirement, succeeded by VB.NET.  
node4: Executable-space protection uses NX bits or emulation to block code execution in memory regions, enhancing security against buffer overflow exploits.  
node5: Semantic file systems organize data by meaning/associations, enabling intuitive queries beyond traditional hierarchical structures, with indexing challenges.
node6: Database is an organized data collection managed by DBMS, using models like relational, for storage, retrieval, and management across systems.  
node7: Zend Engine is PHP's open-source scripting engine, optimizing performance and memory, developed by Zend Technologies for PHP since version 4.  
node8: FFADO provides open-source FireWire audio drivers for Linux, supporting Jack and replacing the FreeBOB project for multi-device compatibility.  
node9: The circuit breaker design pattern prevents system failures by detecting faults and temporarily blocking requests to unreliable external services.  
node10: Cross-platform software runs on multiple OS/architectures, using frameworks like Qt or Java, facing challenges in compatibility and testing.
node11: Von Neumann architecture is a stored-program computer design with shared memory for instructions/data, known for its bottleneck and widespread use despite Harvard architecture alternatives.  
node12: MySQL is an open-source RDBMS using SQL, developed by MySQL AB, acquired by Oracle, offering dual licensing and widely used in web apps like WordPress and Facebook.  
node13: SolidDB is an in-memory RDBMS with disk options, high availability, and used in telecom/network systems, acquired by IBM then sold to Unicom Global.  
node14: SchoolTool is a GPL-licensed student information system built with Python/Zope, tracking school data and offering customizable tools for education institutions.
node15: Manages computer hardware/software, enabling multitasking, resource allocation, and user interaction. Includes desktop (Windows, macOS, Linux) and mobile (Android, iOS) systems.  
node16: IBM's web analytics tool using ETL to process server logs into databases; discontinued in 2014 after acquisition and rebranding.  
node17: Uses segmentation, paging, and protection keys to control memory access, preventing unauthorized use via exceptions like segmentation faults.
node18: Server-side scripting language created in 1994 by Rasmus Lerdorf, evolved through versions, uses Zend Engine, open-source, widely used for web development, faced Unicode challenges.  
node19: Log-structured flash file system for Linux, uses circular logging, garbage collection, and wear-leveling; part of OpenWRT, compared to UBIFS/YAFFS.  
node20: Acorn's ARM-based OS from 1987, evolved through spin-offs, modular design, open-sourced parts, used in embedded systems and emulators.  
node21: MIT's Lisp-based language (1971), featured multithreading, user data types, influenced Scheme/Lisp, used for Zork and interactive fiction.
node22: IBM's TPF is a real-time mainframe OS for high-volume transactions, used in banking and airlines, featuring i-streams, database systems, and support for assembly/C programming with record locking.  
node23: Mailsite is commercial mail server software for Windows, offering Outlook compatibility, mobile sync, and scalable packages for businesses and service providers.  
node24: Scuttle is an open-source PHP/MySQL social bookmarking tool with tagging, multilingual support, and anti-spam features, lacking a free admin backend.  
node25: OpenLisp is an ISO-compliant Lisp dialect with C/Java integration, used in CAD and education, offering a REPL/compiler but restricted to non-commercial use.  
node26: Multimedia databases (MMDB) store diverse media types (text/audio/video) with metadata, enabling cross-format queries and presentation across applications.

the connection relationship among the nodes mentioned:
 <node0, node21>,<node0, node25>,<node1, node6>,<node1, node18>,<node1, node24>,<node1, node25>,<node2, node12>,<node2, node14>,<node2, node18>,<node2, node24>,<node3, node6>,<node3, node10>,<node3, node12>,<node3, node15>,<node3, node18>,<node4, node15>,<node4, node17>,<node5, node19>,<node6, node9>,<node6, node12>,<node6, node13>,<node6, node15>,<node6, node16>,<node6, node18>,<node6, node26>,<node7, node18>,<node8, node15>,<node10, node15>,<node10, node16>,<node10, node18>,<node10, node24>,<node11, node15>,<node11, node17>,<node12, node15>,<node12, node18>,<node12, node24>,<node12, node25>,<node14, node15>,<node15, node16>,<node15, node17>,<node15, node18>,<node15, node19>,<node15, node20>,<node15, node21>,<node15, node22>,<node15, node23>,<node15, node24>,<node15, node25>,<node15, node26>,<node17, node20>,<node17, node22>,<node18, node24>,<node21, node25>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",web technology,"node0: Texas Instruments' Lisp machine from the 1980s used for AI software development, featuring NuBus and specialized 32-bit processors.  
node1: XML is a markup language for structuring data, enabling web services and standards via schemas like XSD, emphasizing simplicity and machine-readability.  
node2: Lists free/open-source web apps, server-side software, and alternatives to proprietary services like productivity and collaboration tools.  
node3: Microsoft's event-driven Visual Basic (VB) for rapid app development, legacy VB6 persists despite 2008 retirement, succeeded by VB.NET.  
node4: Executable-space protection uses NX bits or emulation to block code execution in memory regions, enhancing security against buffer overflow exploits.  
node5: Semantic file systems organize data by meaning/associations, enabling intuitive queries beyond traditional hierarchical structures, with indexing challenges.
node6: Database is an organized data collection managed by DBMS, using models like relational, for storage, retrieval, and management across systems.  
node7: Zend Engine is PHP's open-source scripting engine, optimizing performance and memory, developed by Zend Technologies for PHP since version 4.  
node8: FFADO provides open-source FireWire audio drivers for Linux, supporting Jack and replacing the FreeBOB project for multi-device compatibility.  
node9: The circuit breaker design pattern prevents system failures by detecting faults and temporarily blocking requests to unreliable external services.  
node10: Cross-platform software runs on multiple OS/architectures, using frameworks like Qt or Java, facing challenges in compatibility and testing.
node11: Von Neumann architecture is a stored-program computer design with shared memory for instructions/data, known for its bottleneck and widespread use despite Harvard architecture alternatives.  
node12: MySQL is an open-source RDBMS using SQL, developed by MySQL AB, acquired by Oracle, offering dual licensing and widely used in web apps like WordPress and Facebook.  
node13: SolidDB is an in-memory RDBMS with disk options, high availability, and used in telecom/network systems, acquired by IBM then sold to Unicom Global.  
node14: SchoolTool is a GPL-licensed student information system built with Python/Zope, tracking school data and offering customizable tools for education institutions.
node15: Manages computer hardware/software, enabling multitasking, resource allocation, and user interaction. Includes desktop (Windows, macOS, Linux) and mobile (Android, iOS) systems.  
node16: IBM's web analytics tool using ETL to process server logs into databases; discontinued in 2014 after acquisition and rebranding.  
node17: Uses segmentation, paging, and protection keys to control memory access, preventing unauthorized use via exceptions like segmentation faults.
node18: Server-side scripting language created in 1994 by Rasmus Lerdorf, evolved through versions, uses Zend Engine, open-source, widely used for web development, faced Unicode challenges.  
node19: Log-structured flash file system for Linux, uses circular logging, garbage collection, and wear-leveling; part of OpenWRT, compared to UBIFS/YAFFS.  
node20: Acorn's ARM-based OS from 1987, evolved through spin-offs, modular design, open-sourced parts, used in embedded systems and emulators.  
node21: MIT's Lisp-based language (1971), featured multithreading, user data types, influenced Scheme/Lisp, used for Zork and interactive fiction.
node22: IBM's TPF is a real-time mainframe OS for high-volume transactions, used in banking and airlines, featuring i-streams, database systems, and support for assembly/C programming with record locking.  
node23: Mailsite is commercial mail server software for Windows, offering Outlook compatibility, mobile sync, and scalable packages for businesses and service providers.  
node24: Scuttle is an open-source PHP/MySQL social bookmarking tool with tagging, multilingual support, and anti-spam features, lacking a free admin backend.  
node25: OpenLisp is an ISO-compliant Lisp dialect with C/Java integration, used in CAD and education, offering a REPL/compiler but restricted to non-commercial use.  
node26: Multimedia databases (MMDB) store diverse media types (text/audio/video) with metadata, enabling cross-format queries and presentation across applications.","node0:Wikipedia entry. Entry name: TI_Explorer. Entry content: ti explorer texas instruments explorer family lisp machine computers computers sold texas instruments 1980s explorer based design lisp machines incorporated based mit lisp machine explorer used development deployment artificial-intelligence software notable also early use nubus system bus explorer computer family explorer used development deployment artificial-intelligence software later models based special 32-bit microprocessor developed texas instruments supported execution lisp software hardware operating system explorer written lisp machine lisp also supported common lisp notable application spike scheduling system hubble space telescope spike developed texas instruments explorer workstations
node1:Wikipedia entry. Entry name: XML. Entry content: xml extensible markup language xml markup language defines set rules encoding documents format human-readable machine-readable w3c xml 1.0 specification several related specifications—all free open standards—define xml design goals xml emphasize simplicity generality usability across internet textual data format strong support via unicode different human languages although design xml focuses documents language widely used representation arbitrary data structures used web services several schema systems exist aid definition xml-based languages programmers developed many application programming interfaces apis aid processing xml data essence extensible markup languages necessary explained markup language example see markup language § xml standard generalized markup language hundreds document formats using xml syntax developed including rss atom soap svg xhtml xml-based formats become default many office-productivity tools including microsoft office office open xml openoffice.org libreoffice opendocument apple iwork xml also provided base language communication protocols xmpp applications microsoft .net framework use xml files configuration property lists implementation configuration storage built xml many industry data standards e.g hl7 ota fpml mismo niem etc based xml rich features xml schema specification many standards quite complex uncommon specification comprise several thousand pages publishing dita xml industry data standard xml used extensively underpin various publishing formats xml widely used services oriented architecture soa disparate systems communicate exchanging xml messages message exchange format standardised xml schema xsd also referred canonical schema xml come common use interchange data internet ietf superseded gave rules construction internet media types use sending xml also defines media types codice_1 codice_2 say data xml nothing semantics rfc 7303 also recommends xml-based languages given media types ending codice_3 example codice_4 svg guidelines use xml networked context appear rfc 3470 also known ietf bcp 70 document covering many aspects designing deploying xml-based language material section based xml specification exhaustive list constructs appear xml provides introduction key constructs often encountered day-to-day use xml documents consist entirely characters unicode repertoire except small number specifically excluded control characters character defined unicode may appear within content xml document xml includes facilities identifying encoding unicode characters make document expressing characters one reason another used directly unicode code points following ranges valid xml 1.0 documents xml 1.1 extends set allowed characters include plus remaining characters range u+0001–u+001f time however restricts use c0 c1 control characters u+0009 horizontal tab u+000a line feed u+000d carriage return u+0085 next line requiring written escaped form example u+0001 must written codice_22 equivalent case c1 characters restriction backwards incompatibility introduced allow common encoding errors detected code point u+0000 null character permitted xml 1.0 1.1 document unicode character set encoded bytes storage transmission variety different ways called encodings unicode defines encodings cover entire repertoire well-known ones include utf-8 utf-16 many text encodings predate unicode ascii iso/iec 8859 character repertoires almost every case subsets unicode character set xml allows use unicode-defined encodings encodings whose characters also appear unicode xml also provides mechanism whereby xml processor reliably without prior knowledge determine encoding used encodings utf-8 utf-16 necessarily recognized every xml parser xml provides escape facilities including characters problematic include directly example five predefined entities permitted unicode characters may represented numeric character reference consider chinese character 中 whose numeric code unicode hexadecimal 4e2d decimal 20,013 user whose keyboard offers method entering character could still insert xml document encoded either codice_32 codice_33 similarly string 3 jörg could encoded inclusion xml document codice_34 codice_35 permitted however null character one control characters excluded xml even using numeric character reference alternative encoding mechanism base64 needed represent characters comments may appear anywhere document outside markup comments appear xml declaration comments begin codice_36 end codice_37 compatibility sgml string -- double-hyphen allowed inside comments means comments nested ampersand special significance within comments entity character references recognized way represent characters outside character set document encoding example valid comment codice_38 xml 1.0 fifth edition xml 1.1 support direct use almost unicode character element names attributes comments character data processing instructions ones special symbolic meaning xml less-than sign following well-formed xml document including chinese armenian cyrillic characters xml specification defines xml document well-formed text meaning satisfies list syntax rules provided specification key points fairly lengthy list include definition xml document excludes texts contain violations well-formedness rules simply xml xml processor encounters violation required report errors cease normal processing policy occasionally referred draconian error handling stands notable contrast behavior programs process html designed produce reasonable result even presence severe markup errors xml policy area criticized violation postel law conservative send liberal accept xml specification defines valid xml document well-formed xml document also conforms rules document type definition dtd addition well-formed xml document may valid means contains reference document type definition dtd elements attributes declared dtd follow grammatical rules dtd specifies xml processors classified validating non-validating depending whether check xml documents validity processor discovers validity error must able report may continue normal processing dtd example schema grammar since initial publication xml 1.0 substantial work area schema languages xml schema languages typically constrain set elements may used document attributes may applied order may appear allowable parent/child relationships oldest schema language xml document type definition dtd inherited sgml dtds following benefits dtds following limitations two peculiar features distinguish dtds schema types syntactic support embedding dtd within xml documents defining entities arbitrary fragments text and/or markup xml processor inserts dtd xml document wherever referenced like character escapes dtd technology still used many applications ubiquity newer schema language described w3c successor dtds xml schema often referred initialism xml schema instances xsd xml schema definition xsds far powerful dtds describing xml languages use rich datatyping system allow detailed constraints xml document logical structure xsds also use xml-based format makes possible use ordinary xml tools help process xs schema element defines schema relax ng regular language xml next generation initially specified oasis standard part 2 regular-grammar-based validation iso/iec 19757 dsdl relax ng schemas may written either xml based syntax compact non-xml syntax two syntaxes isomorphic james clark conversion tool—trang—can convert without loss information relax ng simpler definition validation framework xml schema making easier use implement also ability use datatype framework plug-ins relax ng schema author example require values xml document conform definitions xml schema datatypes schematron language making assertions presence absence patterns xml document typically uses xpath expressions schematron standard part 3 rule-based validation iso/iec 19757 dsdl dsdl document schema definition languages multi-part iso/iec standard iso/iec 19757 brings together comprehensive set small schema languages targeted specific problems dsdl includes relax ng full compact syntax schematron assertion language languages defining datatypes character repertoire constraints renaming entity expansion namespace-based routing document fragments different validators dsdl schema languages vendor support xml schemas yet extent grassroots reaction industrial publishers lack utility xml schemas publishing schema languages describe structure particular xml format also offer limited facilities influence processing individual xml files conform format dtds xsds ability instance provide infoset augmentation facility attribute defaults relax ng schematron intentionally provide cluster specifications closely related xml developed starting soon initial publication xml 1.0 frequently case term xml used refer xml together one technologies come seen part xml core specifications conceived part xml core failed find wide adoption including xinclude xlink xpointer design goals xml include shall easy write programs process xml documents despite xml specification contains almost information programmers might go processing xml infoset specification provides vocabulary refer constructs within xml document provide guidance access information variety apis accessing xml developed used standardized existing apis xml processing tend fall categories stream-oriented facilities require less memory certain tasks based linear traversal xml document faster simpler alternatives tree-traversal data-binding apis typically require use much memory often found convenient use programmers include declarative retrieval document components via use xpath expressions xslt designed declarative description xml document transformations widely implemented server-side packages web browsers xquery overlaps xslt functionality designed searching large xml databases simple api xml sax lexical event-driven api document read serially contents reported callbacks various methods handler object user design sax fast efficient implement difficult use extracting information random xml since tends burden application author keeping track part document processed better suited situations certain types information always handled way matter occur document pull parsing treats document series items read sequence using iterator design pattern allows writing recursive descent parsers structure code performing parsing mirrors structure xml parsed intermediate parsed results used accessed local variables within functions performing parsing passed function parameters lower-level functions returned function return values higher-level functions examples pull parsers include data :edit :xml perl stax java programming language xmlpullparser smalltalk xmlreader php elementtree.iterparse python system.xml.xmlreader .net framework dom traversal api nodeiterator treewalker pull parser creates iterator sequentially visits various elements attributes data xml document code uses iterator test current item tell example whether start-tag end-tag text inspect attributes local name namespace values xml attributes value text etc also move iterator next item code thus extract information document traverses recursive-descent approach tends lend keeping data typed local variables code parsing sax instance typically requires parser manually maintain intermediate data within stack elements parent elements element parsed pull-parsing code straightforward understand maintain sax parsing code document object model dom api allows navigation entire document tree node objects representing document contents dom document created parser generated manually users limitations data types dom nodes abstract implementations provide programming language-specific bindings dom implementations tend memory intensive generally require entire document loaded memory constructed tree objects access allowed xml data binding binding xml documents hierarchy custom strongly typed objects contrast generic objects created dom parser approach simplifies code development many cases allows problems identified compile time rather run-time suitable applications document structure known fixed time application written example data binding systems include java architecture xml binding jaxb xml serialization .net framework xml serialization gsoap xml appeared first-class data type languages ecmascript xml e4x extension ecmascript/javascript language explicitly defines two specific objects xml xmllist javascript support xml document nodes xml node lists distinct objects use dot-notation specifying parent-child relationships e4x supported mozilla 2.5+ browsers though deprecated adobe actionscript adopted universally similar notations used microsoft linq implementation microsoft .net 3.5 scala uses java vm open-source xmlsh application provides linux-like shell special features xml manipulation similarly treats xml data type using notation resource description framework defines data type codice_42 hold wrapped canonical xml facebook produced extensions php javascript languages add xml core syntax similar fashion e4x namely xhp jsx respectively xml application profile sgml iso 8879 versatility sgml dynamic information display understood early digital media publishers late 1980s prior rise internet mid-1990s practitioners sgml gained experience then-new world wide web believed sgml offered solutions problems web likely face grew dan connolly added sgml list w3c activities joined staff 1995 work began mid-1996 sun microsystems engineer jon bosak developed charter recruited collaborators bosak well connected small community people experience sgml web xml compiled working group eleven members supported roughly 150-member interest group technical debate took place interest group mailing list issues resolved consensus failed majority vote working group record design decisions rationales compiled michael sperberg-mcqueen december 4 1997 james clark served technical lead working group notably contributing empty-element codice_43 syntax name xml names put forward consideration included magma minimal architecture generalized markup applications slim structured language internet markup mgml minimal generalized markup language co-editors specification originally tim bray michael sperberg-mcqueen halfway project bray accepted consulting engagement netscape provoking vociferous protests microsoft bray temporarily asked resign editorship led intense dispute working group eventually solved appointment microsoft jean paoli third co-editor xml working group never met face-to-face design accomplished using combination email weekly teleconferences major design decisions reached short burst intense work august november 1996 first working draft xml specification published design work continued 1997 xml 1.0 became w3c recommendation february 10 1998 xml profile iso standard sgml xml comes sgml unchanged sgml comes separation logical physical structures elements entities availability grammar-based validation dtds separation data metadata elements attributes mixed content separation processing representation processing instructions default angle-bracket syntax removed sgml declaration xml fixed delimiter set adopts unicode document character set sources technology xml tei text encoding initiative defined profile sgml use transfer syntax html elements synchronous resource document character sets separate resource encoding codice_44 attribute invented like http metadata accompanied resource rather needed declaration link ercs extended reference concrete syntax project spread standardization project regarding east asian documents project iso-related china/japan/korea document processing expert group basis xml 1.0 naming rules spread also introduced hexadecimal numeric character references concept references make available unicode characters support ercs xml html better sgml standard 8879 revised 1996 1998 websgml adaptations xml header followed iso hytime ideas developed discussion novel xml included algorithm encoding detection encoding header processing instruction target xml space attribute new close delimiter empty-element tags notion well-formedness opposed validity enables parsing without schema first formalized xml although implemented successfully electronic book technology dynatext software software university waterloo new oxford english dictionary project risp lisp sgml text processor uniscope tokyo us army missile command iads hypertext system mentor graphics context interleaf xerox publishing system two current versions xml first xml 1.0 initially defined 1998 undergone minor revisions since without given new version number currently fifth edition published november 26 2008 widely implemented still recommended general use second xml 1.1 initially published february 4 2004 day xml 1.0 third edition currently second edition published august 16 2006 contains features contentious intended make xml easier use certain cases main changes enable use line-ending characters used ebcdic platforms use scripts characters absent unicode 3.2 xml 1.1 widely implemented recommended use need particular features prior fifth edition release xml 1.0 differed xml 1.1 stricter requirements characters available use element attribute names unique identifiers first four editions xml 1.0 characters exclusively enumerated using specific version unicode standard unicode 2.0 unicode 3.2 fifth edition substitutes mechanism xml 1.1 future-proof reduces redundancy approach taken fifth edition xml 1.0 editions xml 1.1 certain characters forbidden names everything else allowed accommodate suitable name characters future unicode versions fifth edition xml names may contain characters balinese cham phoenician scripts among many others added unicode since unicode 3.2 almost unicode code point used character data attribute values xml 1.0 1.1 document even character corresponding code point defined current version unicode character data attribute values xml 1.1 allows use control characters xml 1.0 robustness control characters introduced xml 1.1 must expressed numeric character references x7f x9f allowed xml 1.0 xml 1.1 even required expressed numeric character references among supported control characters xml 1.1 two line break codes must treated whitespace whitespace characters control codes written directly discussion xml 2.0 although organization announced plans work project xml-sw sw skunkworks written one original developers xml contains proposals xml 2.0 might look like elimination dtds syntax integration namespaces xml base xml information set base standard world wide web consortium also xml binary characterization working group preliminary research use cases properties binary encoding xml information set working group chartered produce official standards since xml definition text-based itu-t iso using name fast infoset binary infoset avoid confusion see itu-t rec x.891 iso/iec 24824-1 xml extensions regularly criticized verbosity complexity redundancy mapping basic tree model xml type systems programming languages databases difficult especially xml used exchanging highly structured data applications primary design goal however xml data binding systems allow applications access xml data directly objects representing data structure data programming language used ensures type safety rather using dom sax retrieve data direct representation xml accomplished automatically creating mapping elements xml schema xsd document members class represented memory criticisms attempt refute claim xml self-describing language though xml specification makes claim json yaml s-expressions frequently proposed simpler alternatives see comparison data serialization formats focus representing highly structured data rather documents may contain highly structured relatively unstructured content however w3c standardized xml schema specifications offer broader range structured xsd data types compared simpler serialization formats offer modularity reuse xml namespace
node2:Wikipedia entry. Entry name: List_of_free_and_open-source_web_applications. Entry content: list free open-source web applications web applications traditional web 2.0 operated software running somewhere list free software used run alternative web applications also listed similar proprietary web applications users may familiar software server-side software often running web server
node3:Wikipedia entry. Entry name: Visual_Basic. Entry content: visual basic visual basic third-generation event-driven programming language microsoft component object model com programming model first released 1991 declared legacy 2008 microsoft intended visual basic relatively easy learn use visual basic derived basic enables rapid application development rad graphical user interface gui applications access databases using data access objects remote data objects activex data objects creation activex controls objects programmer create application using components provided visual basic program time community programmers developed third-party components programs written visual basic also use windows api requires external function declarations final release version 6 1998 known simply visual basic april 8 2008 microsoft stopped supporting visual basic 6.0 ide microsoft visual basic team still maintains compatibility visual basic 6.0 applications windows vista windows server 2008 including r2 windows 7 windows 8 windows 8.1 windows server 2012 windows 10 windows server 2016 windows server 2019 works program 2014 software developers still preferred visual basic 6.0 successor visual basic .net 2014 developers lobbied new version vb6 programming environment 2016 visual basic 6.0 technical impact award 19th annual d.i.c.e awards dialect visual basic visual basic applications vba used macro scripting language within several microsoft applications including microsoft office like basic programming language visual basic designed easy learning curve programmers create simple complex gui applications programming vb combination visually arranging components controls form specifying attributes actions components writing additional lines code functionality since vb defines default attributes actions components programmer develop simple program without writing much code programs built earlier versions suffered performance problems faster computers native code compilation made less issue though vb programs compiled native code executables version 5 still require presence around 1 mb runtime libraries core runtime libraries included default windows 2000 later extended runtime components still installed earlier versions windows 95/98/nt require runtime libraries distributed executable forms created using drag-and-drop techniques tool used place controls e.g. text boxes buttons etc form window controls attributes event handlers associated default values provided control created may changed programmer many attribute values modified run time based user actions changes environment providing dynamic application example code inserted form resize event handler reposition control remains centered form expands fill form etc inserting code event handler keypress text box program automatically translate case text entered even prevent certain characters inserted visual basic create executables exe files activex controls dll files primarily used develop windows applications interface database systems dialog boxes less functionality used provide pop-up capabilities controls provide basic functionality application programmers insert additional logic within appropriate event handlers example drop-down combination box automatically displays list user selects element event handler called executes code programmer created perform action list item alternatively visual basic component user interface instead provide activex objects programs via component object model com allows server-side processing add-in module runtime recovers unused memory using reference counting depends variables passing scope set nothing avoiding problem memory leaks possible languages large library utility objects language provides basic support object-oriented programming unlike many programming languages visual basic generally case-sensitive—though transforms keywords standard case configuration forces case variable names conform case entry symbol table string comparisons case sensitive default visual basic compiler shared visual studio languages c c++ nevertheless default restrictions ide allow creation targets windows model dlls threading models years developers bypassed restrictions visual basic builds upon characteristics basic visual basic 1.0 introduced 1991 drag drop design creating user interface derived prototype form generator developed alan cooper company called tripod microsoft contracted cooper associates develop tripod programmable form system windows 3.0 code name ruby relation later ruby programming language tripod include programming language microsoft decided combine ruby basic language create visual basic ruby interface generator provided visual part visual basic combined eb embedded basic engine designed microsoft abandoned omega database system ruby also provided ability load dynamic link libraries containing additional controls called gizmos later became vbx interface microsoft developed derivatives visual basic use scripting visual basic derived heavily basic subsequently replaced .net platform version derived languages earlier versions visual basic prior version 5 compiled code p-code p-code interpreted language runtime benefits p-code include portability smaller binary file sizes usually slows execution since runtime adds additional layer interpretation visual basic applications require microsoft visual basic runtime msvbvmxx.dll xx relevant version number either 50 60 msvbvm60.dll comes standard windows editions windows 98 windows 7 editions windows 7 include windows 95 machine would however require inclusion installer whichever dll needed program visual basic 5 6 compile code either native p-code either case runtime still required built functions forms management criticisms levelled visual basic editions prior vb.net include versions visual basic development environment 1.0 6.0 retired microsoft 2008 therefore longer supported associated runtime environments also unsupported except visual basic 6 core runtime environment microsoft officially supports lifetime windows 8 windows 10 third party components shipped visual studio 6.0 included support statement legacy visual basic components may still work newer platforms despite unsupported microsoft vendors documentation visual basic 6.0 application programming interface tools best covered last msdn release visual studio.net 2002 later releases msdn focused .net development significant parts visual basic 6.0 programming documentation removed language evolved support older code ended although vendor support visual basic 6 ended product never supported latest versions windows key parts environment still work newer platforms possible get subset development environment working 32-bit 64-bit versions windows vista windows 7 windows 8 windows 10 following code snippet displays message box saying hello world window loads private sub form_load end sub snippet makes counter moves 1 every second label timer control need added form work form closed integer overflow occurs option explicit dim count integer private sub form_load end sub private sub timer1_timer end sub
node4:Wikipedia entry. Entry name: Executable_space_protection. Entry content: executable space protection computer security executable-space protection marks memory regions non-executable attempt execute machine code regions cause exception makes use hardware features nx bit no-execute bit cases software emulation features however technologies somehow emulate supply nx bit usually impose measurable overhead using hardware-supplied nx bit imposes measurable overhead burroughs 5000 offered hardware support executable-space protection introduction 1961 capability remained successors least 2006 implementation tagged architecture word memory associated hidden tag bit designating code data thus user programs write even read program word data words executed operating system mark writable regions memory non-executable may able prevent stack heap memory areas executable helps prevent certain buffer-overflow exploits succeeding particularly inject execute code sasser blaster worms attacks rely part memory usually stack writeable executable attack fails many operating systems implement available executable space protection policy list systems alphabetical order technologies ordered newest oldest technologies summary gives major features technology supports summary structured technology supplying architecture independent emulation functional processors n't hardware supported supported line processors allow grey-area method explicit nx bit n't exist yet hardware allows one emulated way android 2.3 later architectures support non-executable pages default including non-executable stack heap initial support nx bit x86-64 ia-32 processors support first appeared freebsd -current june 8 2004 freebsd releases since 5.3 release linux kernel supports nx bit x86-64 ia-32 processors support modern 64-bit processors made amd intel transmeta via support feature 64-bit mode x86-64 cpus added 2004 andi kleen later year ingo molnar added support 32-bit mode 64-bit cpus features part linux kernel mainline since release kernel version 2.6.8 august 2004 availability nx bit 32-bit x86 kernels may run 32-bit x86 cpus 64-bit ia-32-compatible cpus significant 32-bit x86 kernel would normally expect nx bit amd64 ia-64 supplies nx enabler patch assures kernels attempt use nx bit present desktop linux distributions fedora ubuntu opensuse enable highmem64 option default default kernels required gain access nx bit 32-bit mode pae mode required use nx bit causes boot failures pre-pentium pro including pentium mmx celeron pentium processors without nx support processors support pae amd k6 earlier transmeta crusoe via c3 earlier geode gx lx vmware workstation versions older 4.0 parallels workstation versions older 4.0 microsoft virtual pc virtual server support pae guest fedora core 6 ubuntu 9.10 later provide kernel-pae package supports pae nx nx memory protection always available ubuntu systems hardware support ran 64-bit kernel 32-bit server kernel 32-bit pae desktop kernel linux-image-generic-pae ubuntu 9.10 later also provides pae mode needed hardware nx cpu feature systems lack nx hardware 32-bit kernels provide approximation nx cpu feature via software emulation help block many exploits attacker might run stack heap memory non-execute functionality also present non-x86 processors supporting functionality many releases red hat kernel developer ingo molnar released linux kernel patch named exec shield approximate utilize nx functionality 32-bit x86 cpus.the exec shield patch released linux kernel mailing list may 2 2003 rejected merging base kernel involved intrusive changes core code order handle complex parts emulation exec shield legacy cpu support approximates nx emulation tracking upper code segment limit imposes cycles overhead context switches intents purposes immeasurable legacy cpus without nx bit exec shield fails protect pages code segment limit mprotect call mark higher memory stack executable mark memory limit executable well thus situations exec shield schemes fails cost exec shield low overhead exec shield checks two elf header markings dictate whether stack heap needs executable called pt_gnu_stack pt_gnu_heap respectively exec shield allows controls set binary executables libraries executable loads library requiring given restriction relaxed executable inherit marking restriction relaxed pax nx technology emulate nx functionality use hardware nx bit pax works x86 cpus nx bit 32-bit x86 linux kernel still ship pax may 2007 patch must merged manually pax provides two methods nx bit emulation called segmexec pageexec segmexec method imposes measurable low overhead typically less 1 constant scalar incurred due virtual memory mirroring used separation execution data accesses segmexec also effect halving task virtual address space allowing task access less memory normally could problem task requires access half normal address space rare segmexec cause programs use system memory i.e ram restricts much access 32-bit cpus becomes 1.5 gb rather 3 gb pax supplies method similar exec shield approximation pageexec speedup however higher memory marked executable method loses protections cases pax falls back older variable-overhead method used pageexec protect pages cs limit may become quite high-overhead operation certain memory access patterns pageexec method used cpu supplying hardware nx bit hardware nx bit used thus significant overhead incurred pax supplies mprotect restrictions prevent programs marking memory ways produce memory useful potential exploit policy causes certain applications cease function disabled affected programs pax allows individual control following functions technology binary executable pax ignores pt_gnu_stack pt_gnu_heap past pax configuration option honor settings option removed security reasons deemed useful results pt_gnu_stack normally attained disabling mprotect restrictions program normally mprotect stack load may always true situations fails simply disabling pageexec segmexec effectively remove executable space restrictions giving task protections executable space non-pax system macos intel supports nx bit cpus supported apple mac os x 10.4.4 – first intel release – onwards mac os x 10.4 supported nx stack protection mac os x 10.5 64-bit executables nx stack heap w^x protection includes x86-64 core 2 later 64-bit powerpc g5 macs netbsd 2.0 later december 9 2004 architectures support non-executable stack heap architectures per-page granularity consist alpha amd64 hppa i386 pae powerpc ibm4xx sh5 sparc sun4m sun4d sparc64 architectures support region granularity i386 without pae powerpc macppc architectures benefit non-executable stack heap netbsd default use software emulation offer features architectures technology openbsd operating system known w^x marks writable pages default non-executable processors support 32-bit x86 processors code segment set include part address space provide level executable space protection openbsd 3.3 shipped may 1 2003 first include w^x solaris supported globally disabling stack execution sparc processors since solaris 2.6 1997 solaris 9 2002 support disabling stack execution per-executable basis added starting windows xp service pack 2 2004 windows server 2003 service pack 1 2005 nx features implemented first time x86 architecture executable space protection windows called data execution prevention dep windows xp server 2003 nx protection used critical windows services exclusively default x86 processor supported feature hardware nx features turned automatically windows xp/server 2003 default feature supported x86 processor protection given early implementations dep provided address space layout randomization aslr allowed potential return-to-libc attacks could feasibly used disable dep attack pax documentation elaborates aslr necessary proof-of-concept produced detailing method dep could circumvented absence aslr may possible develop successful attack address prepared data corrupted images mp3s known attacker microsoft added aslr functionality windows vista windows server 2008 platform dep implemented automatic use pae kernel 32-bit windows native support 64-bit kernels windows vista dep works marking certain parts memory intended hold data nx xd bit enabled processor understands non-executable windows version vista whether dep enabled disabled particular process viewed processes/details tab windows task manager windows implements software dep without use nx bit microsoft safe structured exception handling safeseh properly compiled applications safeseh checks exception raised program execution exception handler one defined application originally compiled effect protection attacker able add exception handler stored data page unchecked program input nx supported enabled default windows allows programs control pages disallow execution api well section headers pe file api runtime access nx bit exposed win32 api calls virtualalloc ex virtualprotect ex page may individually flagged executable non-executable despite lack previous x86 hardware support executable non-executable page settings provided since beginning pre-nx cpus presence 'executable attribute effect documented function result programmers used properly pe file format section specify executability execution flag existed since beginning format standard linkers always used flag correctly even long nx bit windows able enforce nx bit old programs assuming programmer complied best practices applications work correctly nx actually enforced cases problems microsoft .net runtime problems nx bit updated microsoft xbox although cpu nx bit newer versions xdk set code segment limit beginning kernel .data section code point normal circumstances starting version 51xx change also implemented kernel new xboxes broke techniques old exploits used become tsr however new versions quickly released supporting new version fundamental exploit unaffected code written executed runtime—a jit compiler prominent example—the compiler potentially used produce exploit code e.g using jit spray flagged execution therefore would trapped return-oriented programming allow attacker execute arbitrary code even executable space protection enforced
node5:Wikipedia entry. Entry name: Semantic_file_system. Entry content: semantic file system semantic file systems file systems used information persistence structure data according semantics intent rather location current file systems allows data addressed content associative access traditional hierarchical file-systems tend impose burden example sub-directory layout contradicting user perception files would stored tag-based interface alleviates hierarchy problem enables users query data intuitive fashion semantic file systems raise technical design challenges indexes words tags elementary signs sort created constantly updated maintained cached performance offer desired random multi-variate access files addition underlying mostly traditional block-based filesystem research specifications implementations
node6:Wikipedia entry. Entry name: Database. Entry content: database database organized collection data generally stored accessed electronically computer system databases complex often developed using formal design modeling techniques database management system dbms software interacts end users applications database capture analyze data dbms software additionally encompasses core facilities provided administer database sum total database dbms associated applications referred database system often term database also used loosely refer dbms database system application associated database computer scientists may classify database-management systems according database models support relational databases became dominant 1980s model data rows columns series tables vast majority use sql writing querying data 2000s non-relational databases became popular referred nosql use different query languages formally database refers set related data way organized access data usually provided database management system dbms consisting integrated set computer software allows users interact one databases provides access data contained database although restrictions may exist limit access particular data dbms provides various functions allow entry storage retrieval large quantities information provides ways manage information organized close relationship term database often used casually refer database dbms used manipulate outside world professional information technology term database often used refer collection related data spreadsheet card index size usage requirements typically necessitate use database management system existing dbmss provide various functions allow management database data classified four main functional groups database dbms conform principles particular database model database system refers collectively database model database management system database physically database servers dedicated computers hold actual databases run dbms related software database servers usually multiprocessor computers generous memory raid disk arrays used stable storage raid used recovery data disks fail hardware database accelerators connected one servers via high-speed channel also used large volume transaction processing environments dbmss found heart database applications dbmss may built around custom multitasking kernel built-in networking support modern dbmss typically rely standard operating system provide functions since dbmss comprise significant market computer storage vendors often take account dbms requirements development plans databases dbmss categorized according database model support relational xml type computer run server cluster mobile phone query language used access database sql xquery internal engineering affects performance scalability resilience security sizes capabilities performance databases respective dbmss grown orders magnitude performance increases enabled technology progress areas processors computer memory computer storage computer networks development database technology divided three eras based data model structure navigational sql/relational post-relational two main early navigational data models hierarchical model codasyl model network model relational model first proposed 1970 edgar f. codd departed tradition insisting applications search data content rather following links relational model employs sets ledger-style tables used different type entity mid-1980s computing hardware become powerful enough allow wide deployment relational systems dbmss plus applications early 1990s however relational systems dominated large-scale data processing applications remain dominant ibm db2 oracle mysql microsoft sql server searched dbms dominant database language standardised sql relational model influenced database languages data models object databases developed 1980s overcome inconvenience object-relational impedance mismatch led coining term post-relational also development hybrid object-relational databases next generation post-relational databases late 2000s became known nosql databases introducing fast key-value stores document-oriented databases competing next generation known newsql databases attempted new implementations retained relational/sql model aiming match high performance nosql compared commercially available relational dbmss introduction term database coincided availability direct-access storage disks drums mid-1960s onwards term represented contrast tape-based systems past allowing shared interactive use rather daily batch processing oxford english dictionary cites 1962 report system development corporation california first use term data-base specific technical sense computers grew speed capability number general-purpose database systems emerged mid-1960s number systems come commercial use interest standard began grow charles bachman author one product integrated data store ids founded database task group within codasyl group responsible creation standardization cobol 1971 database task group delivered standard generally became known codasyl approach soon number commercial products based approach entered market codasyl approach relied manual navigation linked data set formed large network applications could find records one three methods later systems added b-trees provide alternate access paths many codasyl databases also added straightforward query language however final tally codasyl complex required significant training effort produce useful applications ibm also dbms 1966 known information management system ims ims development software written apollo program system/360 ims generally similar concept codasyl used strict hierarchy model data navigation instead codasyl network model concepts later became known navigational databases due way data accessed bachman 1973 turing award presentation programmer navigator ims classified ibm hierarchical database idms cincom systems total database classified network databases ims remains use edgar codd worked ibm san jose california one offshoot offices primarily involved development hard disk systems unhappy navigational model codasyl approach notably lack search facility 1970 wrote number papers outlined new approach database construction eventually culminated groundbreaking relational model data large shared data banks paper described new system storing working large databases instead records stored sort linked list free-form records codasyl codd idea use table fixed-length records table used different type entity linked-list system would inefficient storing sparse databases data one record could left empty relational model solved splitting data series normalized tables relations optional elements moved main table would take room needed data may freely inserted deleted edited tables dbms whatever maintenance needed present table view application/user relational model also allowed content database evolve without constant rewriting links pointers relational part comes entities referencing entities known one-to-many relationship like traditional hierarchical model many-to-many relationship like navigational network model thus relational model express hierarchical navigational models well native tabular model allowing pure combined modeling terms three models application requires instance common use database system track information users name login information various addresses phone numbers navigational approach data would placed single record unused items would simply placed database relational approach data would normalized user table address table phone number table instance records would created optional tables address phone numbers actually provided linking information back together key system relational model bit information used key uniquely defining particular record information collected user information stored optional tables would found searching key instance login name user unique addresses phone numbers user would recorded login name key simple re-linking related data back single collection something traditional computer languages designed navigational approach would require programs loop order collect records relational approach would require loops collect information one record codd suggestions set-oriented language would later spawn ubiquitous sql using branch mathematics known tuple calculus demonstrated system could support operations normal databases inserting updating etc well providing simple system finding returning sets data single operation codd paper picked two people berkeley eugene wong michael stonebraker started project known ingres using funding already allocated geographical database project student programmers produce code beginning 1973 ingres delivered first test products generally ready widespread use 1979 ingres similar system r number ways including use language data access known quel time ingres moved emerging sql standard ibm one test implementation relational model prtv production one business system 12 discontinued honeywell wrote mrds multics two new implementations alphora dataphor rel dbms implementations usually called relational actually sql dbmss 1970 university michigan began development micro information management system based d.l childs set-theoretic data model micro used manage large data sets us department labor u.s. environmental protection agency researchers university alberta university michigan wayne state university ran ibm mainframe computers using michigan terminal system system remained production 1998 1970s 1980s attempts made build database systems integrated hardware software underlying philosophy integration would provide higher performance lower cost examples ibm system/38 early offering teradata britton lee inc. database machine another approach hardware support database management icl cafs accelerator hardware disk controller programmable search capabilities long term efforts generally unsuccessful specialized database machines could keep pace rapid development progress general-purpose computers thus database systems nowadays software systems running general-purpose hardware using general-purpose computer data storage however idea still pursued certain applications companies like netezza oracle exadata ibm started working prototype system loosely based codd concepts system r early 1970s first version ready 1974/5 work started multi-table systems data could split data record optional stored single large chunk subsequent multi-user versions tested customers 1978 1979 time standardized query language – sql – added codd ideas establishing workable superior codasyl pushing ibm develop true production version system r known sql/ds later database 2 db2 larry ellison oracle database simply oracle started different chain based ibm papers system r. though oracle v1 implementations completed 1978 n't oracle version 2 ellison beat ibm market 1979 stonebraker went apply lessons ingres develop new database postgres known postgresql postgresql often used global mission critical applications .org .info domain name registries use primary data store many large companies financial institutions sweden codd paper also read mimer sql developed mid-1970s uppsala university 1984 project consolidated independent enterprise another data model entity–relationship model emerged 1976 gained popularity database design emphasized familiar description earlier relational model later entity–relationship constructs retrofitted data modeling construct relational model difference two become irrelevant 1980s ushered age desktop computing new computers empowered users spreadsheets like lotus 1-2-3 database software like dbase dbase product lightweight easy computer user understand box c. wayne ratliff creator dbase stated dbase different programs like basic c fortran cobol lot dirty work already done data manipulation done dbase instead user user concentrate rather mess dirty details opening reading closing files managing space allocation dbase one top selling software titles 1980s early 1990s 1990s along rise object-oriented programming saw growth data various databases handled programmers designers began treat data databases objects say person data database person attributes address phone number age considered belong person instead extraneous data allows relations data relations objects attributes individual fields term object-relational impedance mismatch described inconvenience translating programmed objects database tables object databases object-relational databases attempt solve problem providing object-oriented language sometimes extensions sql programmers use alternative purely relational sql programming side libraries known object-relational mappings orms attempt solve problem xml databases type structured document-oriented database allows querying based xml document attributes xml databases mostly used applications data conveniently viewed collection documents structure vary flexible highly rigid examples include scientific articles patents tax filings personnel records nosql databases often fast require fixed table schemas avoid join operations storing denormalized data designed scale horizontally recent years strong demand massively distributed databases high partition tolerance according cap theorem impossible distributed system simultaneously provide consistency availability partition tolerance guarantees distributed system satisfy two guarantees time three reason many nosql databases using called eventual consistency provide availability partition tolerance guarantees reduced level data consistency newsql class modern relational databases aims provide scalable performance nosql systems online transaction processing read-write workloads still using sql maintaining acid guarantees traditional database system databases used support internal operations organizations underpin online interactions customers suppliers see enterprise software databases used hold administrative information specialized data engineering data economic models examples include computerized library systems flight reservation systems computerized parts inventory systems many content management systems store websites collections webpages database one way classify databases involves type contents example bibliographic document-text statistical multimedia objects another way application area example accounting music compositions movies banking manufacturing insurance third way technical aspect database structure interface type section lists adjectives used characterize different kinds databases connolly begg define database management system dbms software system enables users define create maintain control access database dbms acronym sometime extended indicated underlying database model rdbms relational oodbms ordbms object orientated model ordbms object-relational extensions indicate characteristic ddbms distributed database management systems functionality provided dbms vary enormously core functionality storage retrieval update data codd proposed following functions services fully-fledged general purpose dbms provide also generally expected dbms provide set utilities purposes may necessary administer database effectively including import export monitoring defragmentation analysis utilities core part dbms interacting database application interface sometimes referred database engine often dbmss configuration parameters statically dynamically tuned example maximum amount main memory server database use trend minimise amount manual configuration cases embedded databases need target zero-administration paramount large major enterprise dbmss tended increase size functionality involved thousands human years development effort lifetime early multi-user dbms typically allowed application reside computer access via terminals terminal emulation software client–server architecture development application resided client desktop database server allowing processing distributed evolved multitier architecture incorporating application servers web servers end user interface via web browser database directly connected adjacent tier general-purpose dbms provide public application programming interfaces api optionally processor database languages sql allow applications written interact database special purpose dbms may use private api specifically customised linked single application example email system performing many functions general-purpose dbms message insertion message deletion attachment handling blocklist lookup associating messages email address forth however functions limited required handle email external interaction database via application program interfaces dbms range database tool allows users execute sql queries textually graphically web site happens use database store search information programmer code interactions database sometimes referred datasource via application program interface api via database language particular api language chosen need supported dbms possible indirectly via pre-processor bridging api api aim database independent odbc commonly known example common api include jdbc ado.net database languages special-purpose languages allow one following tasks sometimes distinguished sublanguages database languages specific particular data model notable examples include database language may also incorporate features like database storage container physical materialization database comprises internal physical level database architecture also contains information needed e.g. metadata data data internal data structures reconstruct conceptual level external level internal level needed putting data permanent storage generally responsibility database engine a.k.a storage engine though typically accessed dbms underlying operating system often using operating systems file systems intermediates storage layout storage properties configuration setting extremely important efficient operation dbms thus closely maintained database administrators dbms operation always database residing several types storage e.g. memory external storage database data additional needed information possibly large amounts coded bits data typically reside storage structures look completely different way data look conceptual external levels ways attempt optimize best possible levels reconstruction needed users programs well computing additional types needed information data e.g. querying database dbmss support specifying character encoding used store data multiple encodings used database various low-level database storage structures used storage engine serialize data model written medium choice techniques indexing may used improve performance conventional storage row-oriented also column-oriented correlation databases often storage redundancy employed increase performance common example storing materialized views consist frequently needed external views query results storing views saves expensive computing time needed downsides materialized views overhead incurred updating keep synchronized original updated database data cost storage redundancy occasionally database employs storage redundancy database objects replication one copies increase data availability improve performance simultaneous multiple end-user accesses database object provide resiliency case partial failure distributed database updates replicated object need synchronized across object copies many cases entire database replicated database security deals various aspects protecting database content owners users ranges protection intentional unauthorized database uses unintentional database accesses unauthorized entities e.g. person computer program database access control deals controlling person certain computer program allowed access information database information may comprise specific database objects e.g. record types specific records data structures certain computations certain objects e.g. query types specific queries using specific access paths former e.g. using specific indexes data structures access information database access controls set special authorized database owner personnel uses dedicated protected security dbms interfaces may managed directly individual basis assignment individuals privileges groups elaborate models assignment individuals groups roles granted entitlements data security prevents unauthorized users viewing updating database using passwords users allowed access entire database subsets called subschemas example employee database contain data individual employee one group users may authorized view payroll data others allowed access work history medical data dbms provides way interactively enter update database well interrogate capability allows managing personal databases data security general deals protecting specific chunks data physically i.e. corruption destruction removal e.g. see physical security interpretation parts meaningful information e.g. looking strings bits comprise concluding specific valid credit-card numbers e.g. see data encryption change access logging records accessed attributes changed changed logging services allow forensic database audit later keeping record access occurrences changes sometimes application-level code used record changes rather leaving database monitoring set attempt detect security breaches database transactions used introduce level fault tolerance data integrity recovery crash database transaction unit work typically encapsulating number operations database e.g. reading database object writing acquiring lock etc abstraction supported database also systems transaction well defined boundaries terms program/code executions included transaction determined transaction programmer via special transaction commands acronym acid describes ideal properties database transaction atomicity consistency isolation durability database built one dbms portable another dbms i.e. dbms run however situations desirable migrate database one dbms another reasons primarily economical different dbmss may different total costs ownership tcos functional operational different dbmss may different capabilities migration involves database transformation one dbms type another transformation maintain possible database related application i.e. related application programs intact thus database conceptual external architectural levels maintained transformation may desired also aspects architecture internal level maintained complex large database migration may complicated costly one-time project factored decision migrate spite fact tools may exist help migration specific dbmss typically dbms vendor provides tools help importing databases popular dbmss designing database application next stage building database typically appropriate general-purpose dbms selected used purpose dbms provides needed user interfaces used database administrators define needed application data structures within dbms respective data model user interfaces used select needed dbms parameters like security related storage allocation parameters etc. database ready data structures needed components defined typically populated initial application data database initialization typically distinct project many cases using specialized dbms interfaces support bulk insertion making operational cases database becomes operational empty application data data accumulated operation database created initialised populated needs maintained various database parameters may need changing database may need tuned tuning better performance application data structures may changed added new related application programs may written add application functionality etc sometimes desired bring database back previous state many reasons e.g. cases database found corrupted due software error updated erroneous data achieve backup operation done occasionally continuously desired database state i.e. values data embedding database data structures kept within dedicated backup files many techniques exist effectively decided database administrator bring database back state e.g. specifying state desired point time database state files used restore state static analysis techniques software verification applied also scenario query languages particular *abstract interpretation framework extended field query languages relational databases way support sound approximation techniques semantics query languages tuned according suitable abstractions concrete domain data abstraction relational database system many interesting applications particular security purposes fine grained access control watermarking etc dbms features might include increasingly calls single system incorporates core functionalities build test deployment framework database management source control borrowing developments software industry market offerings devops database first task database designer produce conceptual data model reflects structure information held database common approach develop entity-relationship model often aid drawing tools another popular approach unified modeling language successful data model accurately reflect possible state external world modeled example people one phone number allow information captured designing good conceptual data model requires good understanding application domain typically involves asking deep questions things interest organization like customer also supplier product sold two different forms packaging product different products plane flies new york dubai via frankfurt one flight two maybe even three answers questions establish definitions terminology used entities customers products flights flight segments relationships attributes producing conceptual data model sometimes involves input business processes analysis workflow organization help establish information needed database left example help deciding whether database needs hold historic data well current data produced conceptual data model users happy next stage translate schema implements relevant data structures within database process often called logical database design output logical data model expressed form schema whereas conceptual data model theory least independent choice database technology logical data model expressed terms particular database model supported chosen dbms terms data model database model often used interchangeably article use data model design specific database database model modeling notation used express design popular database model general-purpose databases relational model precisely relational model represented sql language process creating logical database design using model uses methodical approach known normalization goal normalization ensure elementary fact recorded one place insertions updates deletions automatically maintain consistency final stage database design make decisions affect performance scalability recovery security like depend particular dbms often called physical database design output physical data model key goal stage data independence meaning decisions made performance optimization purposes invisible end-users applications two types data independence physical data independence logical data independence physical design driven mainly performance requirements requires good knowledge expected workload access patterns deep understanding features offered chosen dbms another aspect physical database design security involves defining access control database objects well defining security levels methods data database model type data model determines logical structure database fundamentally determines manner data stored organized manipulated popular example database model relational model sql approximation relational uses table-based format common logical data models databases include object-relational database combines two related structures physical data models include models include specialized models optimized particular types data database management system provides three views database data typically one conceptual logical physical internal view data number different external views allows users see database information business-related way rather technical processing viewpoint example financial department company needs payment details employees part company expenses need details employees interest human resources department thus different departments need different views company database three-level database architecture relates concept data independence one major initial driving forces relational model idea changes made certain level affect view higher level example changes internal level affect application programs written using conceptual level interfaces reduces impact making physical changes improve performance conceptual view provides level indirection internal external one hand provides common view database independent different external view structures hand abstracts away details data stored managed internal level principle every level even every external view presented different data model practice usually given dbms uses data model external conceptual levels e.g. relational model internal level hidden inside dbms depends implementation requires different level detail uses types data structure types separating external conceptual internal levels major feature relational database model implementations dominate 21st century databases database technology active research topic since 1960s academia research development groups companies example ibm research research activity includes theory development prototypes notable research topics included models atomic transaction concept related concurrency control techniques query languages query optimization methods raid database research area several dedicated academic journals example acm transactions database systems -tods data knowledge engineering -dke annual conferences e.g. acm sigmod acm pods vldb ieee icde
node7:Wikipedia entry. Entry name: Zend_Engine. Entry content: zend engine zend engine open source scripting engine interprets php programming language originally developed andi gutmans zeev suraski students technion – israel institute technology later founded company called zend technologies ramat gan israel name zend combination forenames zeev andi first version zend engine appeared 1999 php version 4 written c highly optimized modular back-end first time could used applications outside php zend engine provides memory resource management standard services php language performance reliability extensibility played significant role php increasing popularity followed zend engine ii heart php 5 newest version zend engine iii originally codenamed phpng developed php 7 significantly improves performance source code zend engine freely available zend engine license although parts php license since 2001 part official releases php.net well official git repository github mirror various volunteers contribute php/zend engine codebase zend engine used internally php compiler runtime engine php scripts loaded memory compiled zend opcodes opcodes executed html generated sent client implement web script interpreter need three parts zend takes part 1 completely bit part 2 php takes parts 2 3 zend really forms language core implementing php basics predefined functions
node8:Wikipedia entry. Entry name: FFADO. Entry content: ffado free firewire audio drivers ffado project provide open-source drivers firewire sound interfaces linux project began freebob driver specifically firewire audio devices based technology made bridgeco use interface named bebob current version allows devices accessed via jack audio connection kit jack following presentation paper 2007 linux audio conference outlining future project march 26 2007 announced project would renamed ffado drivers rewritten include support firewire audio chipsets
node9:Wikipedia entry. Entry name: Circuit_breaker_design_pattern. Entry content: circuit breaker design pattern circuit breaker design pattern used modern software development used detect failures encapsulates logic preventing failure constantly recurring maintenance temporary external system failure unexpected system difficulties assume application connects database 100 times per second database fails application designer want error reoccur constantly also want handle error quickly gracefully without waiting tcp connection timeout generally circuit breaker used check availability external service external service database server web service used application circuit breaker detects failures prevents application trying perform action doomed fail safe retry implementations circuit breaker design pattern need retain state connection series requests must offload logic detect failures actual requests therefore state machine within circuit breaker needs operate sense concurrently requests passing one way achieved asynchronously multi-node clustered server state upstream service need reflected across nodes cluster therefore implementations may need use persistent storage layer e.g network cache memcached redis local cache disk memory based record availability application external service circuit breaker records state external service given interval external service used application storage layer queried retrieve current state safe say benefits outweigh consequences implementing circuit breaker negatively affect performance much depends storage layer used generally available resources largest factors regard type cache example disk-based vs. memory-based local vs. network following sample implementation php proof concept stores status mysql server shared memory cache apc following script could run set interval crontab
node10:Wikipedia entry. Entry name: Cross-platform_software. Entry content: cross-platform software computing cross-platform software also multi-platform software platform-independent software computer software implemented multiple computing platforms cross-platform software may divided two types one requires individual building compilation platform supports one directly run platform without special preparation e.g. software written interpreted language pre-compiled portable bytecode interpreters run-time packages common standard components platforms example cross-platform application may run microsoft windows linux macos cross-platform programs may run many existing platforms two platforms cross-platform frameworks qt flutter nativescript xamarin phonegap ionic react native exist aid cross-platform development platform refer type processor cpu hardware given operating system application runs type operating system computer combination type hardware type operating system running example common platform microsoft windows running x86 architecture well-known desktop computer platforms include linux/unix macos cross-platform however many devices smartphones also effectively computer platforms less commonly thought way application software written depend features particular platform—either hardware operating system virtual machine runs java platform virtual machine platform runs many operating systems hardware types common platform software written hardware platform refer instruction set architecture example x86 architecture variants ia-32 x86-64 machines often run one version microsoft windows though run operating systems well including linux openbsd netbsd macos freebsd 32-bit arm architectures newer 64-bit version common smartphones tablet computers run android ios mobile operating systems software platforms either operating system programming environment though commonly combination notable exception java uses operating system independent virtual machine compiled code known world java bytecode examples software platforms previously noted java platform exception general rule operating system software platform java language typically compiles virtual machine virtual cpu runs code written language enables executable binary run systems implement java virtual machine jvm java programs executed natively using java processor n't common mostly used embedded systems java code running jvm access os-related services like disk i/o network access appropriate privileges granted jvm makes system calls behalf java application setup allows users decide appropriate protection level depending acl example disk network access usually enabled desktop applications browser-based applets jni also used enable access operating system specific functions currently java standard edition programs run microsoft windows macos several unix-like operating systems several non-unix-like operating systems like embedded systems mobile applications browser plugins used windows mac based devices android built-in support java also subsets java java card java platform micro edition designed resource-constrained devices piece software considered cross-platform must able function one computer architecture operating system developing program time-consuming task different operating systems different application programming interfaces api example linux uses different api application software windows software written particular operating system automatically work architectures operating system supports one example august 2006 openoffice.org natively run amd64 intel 64 lines processors implementing x86-64 standards computers since changed openoffice.org suite software “ mostly ” ported 64-bit systems also means program written popular programming language c c++ mean run operating systems support programming language—or even operating system different architecture web applications typically described cross-platform ideally accessible various web browsers within different operating systems applications generally employ client–server system architecture vary widely complexity functionality wide variability significantly complicates goal cross-platform capability routinely odds goal advanced functionality basic web applications perform processing stateless server pass result client web browser user interaction application consists simple exchanges data requests server responses types applications norm early phases world wide web application development applications follow simple transaction model identical serving static web pages today still relatively common especially cross-platform compatibility simplicity deemed critical advanced functionalities prominent examples advanced web applications include web interface gmail a9.com google maps website live search service bing microsoft advanced applications routinely depend additional features found recent versions popular web browsers dependencies include ajax javascript dynamic html svg components rich internet applications older versions popular web browsers tend lack support certain features competing interests cross-platform compatibility advanced functionality numerous alternative web application design strategies emerged strategies include graceful degradation attempts provide similar functionality users platforms diminishing functionality least common denominator limited client browsers example user attempting use limited-feature browser access gmail may notice gmail switches basic mode reduced functionality differs cross-platform techniques attempt provide equivalent functionality adequate functionality across platforms multiple codebase applications maintain distinct codebases different hardware os platforms equivalent functionality obviously requires duplication effort maintaining code worthwhile amount platform-specific code high strategy relies one codebase may compiled multiple platform-specific formats one technique conditional compilation technique code common platforms repeated blocks code relevant certain platforms made conditional interpreted compiled needed another technique separation functionality disables functionality supported client browsers operating systems still delivering complete application user see also separation concerns technique used web development interpreted code scripting languages query platform running execute different blocks conditionally third-party libraries attempt simplify cross-platform capability hiding complexities client differentiation behind single unified api responsive web design rwd web design approach aimed crafting visual layout sites provide optimal viewing experience—easy reading navigation minimum resizing panning scrolling—across wide range devices mobile phones desktop computer monitors little platform-specific code used technique one complicated aspect cross-platform web application design need software testing addition complications mentioned previously additional restriction web browsers prohibit installation different versions browser operating system although several development approaches companies use target multiple platforms result software requires substantial manual effort testing maintenance across supported platforms techniques full virtualization sometimes used workaround problem using tools page object model cross platform tests scripted way one test case usable multiple versions app long different versions similar user interfaces versions tested one time one test case web applications becoming increasingly popular many computer users still use traditional application software rely client/web-server architecture distinction traditional web applications always clear features installation methods architectures web traditional applications overlap blur distinction nevertheless simplifying distinction common useful generalization traditionally modern computing application software distributed end-users binary file especially executable files executables support operating system computer architecture built for—which means making single cross-platform executable would something massive task generally replaced offering selection executables platforms supported software distributed binary executable software written c c++ programmer must build software different operating system computer architecture i.e must use toolset translates—transcompiles—a single codebase multiple binary executables example firefox open-source web browser available windows macos powerpc x86 apple inc. calls universal binary linux *bsd multiple computer architectures four platforms case windows macos linux *bsd separate executable distributions although come source code use different toolsets perform different builds may sufficient achieve variety working executables different platforms case software engineer must port i.e amend code suitable new computer architecture operating system example program firefox already runs windows x86 family modified re-built run linux x86 potentially architectures well multiple versions code may stored separate codebases merged one codebase conditional compilation see note porting must accompanied cross-platform building reverse case alternative porting cross-platform virtualization allows applications compiled one cpu operating system run system different cpu and/or operating system without modification source code binaries example apple rosetta built intel-based macintosh computers runs applications compiled previous generation macs used powerpc cpus another example ibm powervm lx86 allows linux/x86 applications run unmodified linux/power operating system script considered cross-platform interpreter available multiple platforms script uses facilities provided language script written python unix-like system likely run little modification windows python also runs windows also one implementation python run scripts e.g. ironpython .net framework goes many open-source programming languages available scripting languages unlike binary executable files script used computers software interpret script script generally stored plain text text file may issues however type new line character sits lines generally however little work done make script written one system run another quite popular cross-platform scripting interpreted languages cross-platform multi-platform term also apply video games released range video game consoles specialized computers dedicated task playing games examples cross-platform video games include miner 2049er fifa video game series nhl series minecraft released across variety gaming platforms wii playstation 3 xbox 360 personal computers pcs mobile devices characteristics particular system may lengthen time taken implement video game across multiple platforms video game may initially released platforms later released remaining platforms typically situation occurs new gaming system released video game developers need acquaint hardware software associated new console games may become cross-platform licensing agreements developers video game console manufacturers limit development game one particular console example disney could create game intention release latest nintendo sony game consoles disney license game sony first disney may exchange required release game solely sony ’ console short time indefinitely—effectively prohibiting cross-platform release duration several developers implemented means play games online using different platforms psyonix epic games microsoft valve corporation possess technology allows xbox 360 playstation 3 gamers play pc gamers leaving decision platform use consumers first game allow level interactivity pc console games quake 3 games feature cross-platform online play include rocket league street fighter v killer instinct paragon fable fortune minecraft better together update windows 10 vr editions pocket edition xbox one cross-platform programming practice actively writing software work one platform different ways approaching problem writing cross-platform application program one approach simply create multiple versions program different source trees —in words microsoft windows version program might one set source code files macintosh version might another foss *nix system might another straightforward approach problem potential considerably expensive development cost development time especially corporate entities idea behind create two different programs ability behave similarly also possible means developing cross-platform application result problems bug tracking fixing two different source trees would different programmers thus different defects version another approach used depend pre-existing software hides differences platforms—called abstraction platform—such program unaware platform running could said programs platform agnostic programs run java virtual machine jvm built fashion applications mix various methods cross-platform programming create final application example firefox web browser uses abstraction build lower-level components separate source subtrees implementing platform-specific features like gui implementation one scripting language help facilitate ease portability firefox implements xul css javascript extending browser addition classic netscape-style browser plugins much browser written xul css javascript well number tools available help facilitate process cross-platform programming certain issues associated cross-platform development include
node11:Wikipedia entry. Entry name: Von_Neumann_architecture. Entry content: von neumann architecture von neumann architecture—also known von neumann model princeton architecture—is computer architecture based 1945 description mathematician physicist john von neumann others first draft report edvac document describes design architecture electronic digital computer components term von neumann architecture evolved mean stored-program computer instruction fetch data operation occur time share common bus referred von neumann bottleneck often limits performance system design von neumann architecture machine simpler harvard architecture machine—which also stored-program system one dedicated set address data buses reading writing memory another set address data buses fetch instructions stored-program digital computer keeps program instructions data read-write random-access memory ram stored-program computers advancement program-controlled computers 1940s colossus eniac programmed setting switches inserting patch cables route data control signals various functional units vast majority modern computers use memory data program instructions von neumann vs. harvard distinction applies cache architecture main memory split cache architecture earliest computing machines fixed programs simple computers still use design either simplicity training purposes example desk calculator principle fixed program computer basic mathematics run word processor games changing program fixed-program machine requires rewiring restructuring redesigning machine earliest computers much programmed designed particular task reprogramming —when possible all—was laborious process started flowcharts paper notes followed detailed engineering designs often-arduous process physically rewiring rebuilding machine could take three weeks set debug program eniac proposal stored-program computer changed stored-program computer includes design instruction set store memory set instructions program details computation stored-program design also allows self-modifying code one early motivation facility need program increment otherwise modify address portion instructions operators manually early designs became less important index registers indirect addressing became usual features machine architecture another use embed frequently used data instruction stream using immediate addressing self-modifying code largely fallen favor since usually hard understand debug well inefficient modern processor pipelining caching schemes large scale ability treat instructions data makes assemblers compilers linkers loaders automated programming tools possible makes programs write programs possible made sophisticated self-hosting computing ecosystem flourish around von neumann architecture machines high level languages leverage von neumann architecture providing abstract machine-independent way manipulate executable code runtime e.g. lisp using runtime information tune just-in-time compilation e.g languages hosted java virtual machine languages embedded web browsers smaller scale repetitive operations bitblt pixel vertex shaders accelerated general purpose processors just-in-time compilation techniques one use self-modifying code remained popular mathematician alan turing alerted problem mathematical logic lectures max newman university cambridge wrote paper 1936 entitled computable numbers application entscheidungsproblem published proceedings london mathematical society described hypothetical machine called universal computing machine known universal turing machine hypothetical machine infinite store memory today terminology contained instructions data john von neumann became acquainted turing visiting professor cambridge 1935 also turing phd year institute advanced study princeton new jersey 1936 – 1937 whether knew turing paper 1936 time clear 1936 konrad zuse also anticipated two patent applications machine instructions could stored storage used data independently j. presper eckert john mauchly developing eniac moore school electrical engineering university pennsylvania wrote stored-program concept december 1943 von neumann involved manhattan project los alamos national laboratory required huge amounts calculation drew eniac project summer 1944 joined ongoing discussions design stored-program computer edvac part group wrote description titled first draft report edvac based work eckert mauchly unfinished colleague herman goldstine circulated von neumann name consternation eckert mauchly paper read dozens von neumann colleagues america europe influenced next round computer designs jack copeland considers historically inappropriate refer electronic stored-program digital computers 'von neumann machines los alamos colleague stan frankel said von neumann regard turing ideas time first draft report circulated turing producing report entitled proposed electronic calculator described engineering programming detail idea machine called automatic computing engine ace presented executive committee british national physical laboratory february 19 1946 although turing knew wartime experience bletchley park proposed feasible secrecy surrounding colossus subsequently maintained several decades prevented saying various successful implementations ace design produced von neumann turing papers described stored-program computers von neumann earlier paper achieved greater circulation computer architecture outlined became known von neumann architecture 1953 publication faster thought symposium digital computing machines edited b. v. bowden section chapter computers america reads follows machine institute advanced studies princeton 1945 professor j. von neumann working moore school engineering philadelphia e.n.i.a.c built issued behalf group co-workers report logical design digital computers report contained detailed proposal design machine since become known e.d.v.a.c electronic discrete variable automatic computer machine recently completed america von neumann report inspired construction e.d.s.a.c electronic delay-storage automatic calculator cambridge see page 130 1947 burks goldstine von neumann published another report outlined design another type machine parallel machine time would exceedingly fast capable perhaps 20,000 operations per second pointed outstanding problem constructing machine development suitable memory instantaneously accessible contents first suggested using special vacuum tube—called selectron —which princeton laboratories rca invented tubes expensive difficult make von neumann subsequently decided build machine based williams memory machine—completed june 1952 princeton—has become popularly known maniac design machine inspired least half dozen machines built america known affectionately johniacs book first two paragraphs chapter ace read follows automatic computation national physical laboratory one modern digital computers embodies developments improvements technique automatic electronic computing recently demonstrated national physical laboratory teddington designed built small team mathematicians electronics research engineers staff laboratory assisted number production engineers english electric company limited equipment far erected laboratory pilot model much larger installation known automatic computing engine although comparatively small bulk containing 800 thermionic valves judged plates xii xiii xiv extremely rapid versatile calculating machine basic concepts abstract principles computation machine formulated dr. a. m. turing f.r.s. paper read london mathematical society 1936 work machines britain delayed war 1945 however examination problems made national physical laboratory mr. j. r. womersley superintendent mathematics division laboratory joined dr. turing small staff specialists 1947 preliminary planning sufficiently advanced warrant establishment special group already mentioned april 1948 latter became electronics section laboratory charge mr. f. m. colebrook first draft described design used many universities corporations construct computers among various computers illiac ordvac compatible instruction sets date information following chronology difficult put proper order dates first running test program dates first time computer demonstrated completed dates first delivery installation decades 1960s 1970s computers generally became smaller faster led evolutions architecture example memory-mapped i/o lets input output devices treated memory single system bus could used provide modular system lower cost sometimes called streamlining architecture subsequent decades simple microcontrollers would sometimes omit features model lower cost size larger computers added features higher performance shared bus program memory data memory leads von neumann bottleneck limited throughput data transfer rate central processing unit cpu memory compared amount memory single bus access one two classes memory time throughput lower rate cpu work seriously limits effective processing speed cpu required perform minimal processing large amounts data cpu continually forced wait needed data move memory since cpu speed memory size increased much faster throughput bottleneck become problem problem whose severity increases every new generation cpu von neumann bottleneck described john backus 1977 acm turing award lecture according backus surely must less primitive way making big changes store pushing vast numbers words back forth von neumann bottleneck tube literal bottleneck data traffic problem importantly intellectual bottleneck kept us tied word-at-a-time thinking instead encouraging us think terms larger conceptual units task hand thus programming basically planning detailing enormous traffic words von neumann bottleneck much traffic concerns significant data find several known methods mitigating von neumann performance bottleneck example following improve performance problem also sidestepped somewhat using parallel computing using example non-uniform memory access numa architecture—this approach commonly employed supercomputers less clear whether intellectual bottleneck backus criticized changed much since 1977 backus proposed solution major influence modern functional programming object-oriented programming much less geared towards pushing vast numbers words back forth earlier languages like fortran internally still computers spend much time even highly parallel supercomputers 1996 database benchmark study found three four cpu cycles spent waiting memory researchers expect increasing number simultaneous instruction streams multithreading single-chip multiprocessing make bottleneck even worse context multi-core processors additional overhead required maintain cache coherence processors threads aside von neumann bottleneck program modifications quite harmful either accident design simple stored-program computer designs malfunctioning program damage programs operating system possibly leading computer crash memory protection forms access control usually protect accidental malicious program modification
node12:Wikipedia entry. Entry name: MySQL. Entry content: mysql mysql s-q-l open-source relational database management system rdbms name combination name co-founder michael widenius daughter sql abbreviation structured query language mysql free open-source software terms gnu general public license also available variety proprietary licenses mysql owned sponsored swedish company mysql ab bought sun microsystems oracle corporation 2010 oracle acquired sun widenius forked open-source mysql project create mariadb mysql component lamp web application software stack others acronym linux apache mysql perl/php/python mysql used many database-driven web applications including drupal joomla phpbb wordpress mysql also used many popular websites including facebook flickr mediawiki twitter youtube mysql written c c++ sql parser written yacc uses home-brewed lexical analyzer mysql works many system platforms including aix bsdi freebsd hp-ux ecomstation i5/os irix linux macos microsoft windows netbsd novell netware openbsd opensolaris os/2 warp qnx oracle solaris symbian sunos sco openserver sco unixware sanos tru64 port mysql openvms also exists mysql server software client libraries use dual-licensing distribution offered gpl version 2 proprietary license support obtained official manual free support additionally available different irc channels forums oracle offers paid support via mysql enterprise products differ scope services price additionally number third party organisations exist provide support services including mariadb percona mysql received positive reviews reviewers noticed performs extremely well average case developer interfaces documentation mention feedback real world via web sites like good also tested fast stable true multi-user multi-threaded sql database server mysql created swedish company mysql ab founded david axmark allan larsson michael monty widenius original development mysql widenius axmark began 1994 first version mysql appeared 23 may 1995 initially created personal usage msql based low-level language isam creators considered slow inflexible created new sql interface keeping api msql keeping api consistent msql system many developers able use mysql instead proprietarily licensed msql antecedent additional milestones mysql development included work version 6 stopped sun microsystems acquisition mysql cluster product uses version 7 decision made jump version 8 next major version number 15 june 2001 nusphere sued mysql ab tcx datakonsult ab original authors michael monty widenius david axmark u.s district court boston breach contract tortious interference third party contracts relationships unfair competition 2002 mysql ab sued progress nusphere copyright trademark infringement united states district court nusphere allegedly violated mysql ab copyright linking mysql gpl'ed code nusphere gemini table without compliance license preliminary hearing judge patti saris 27 february 2002 parties entered settlement talks eventually settled hearing fsf commented judge saris made clear sees gnu gpl enforceable binding license october 2005 oracle corporation acquired innobase oy finnish company developed third-party innodb storage engine allows mysql provide functionality transactions foreign keys acquisition oracle press release mentioned contracts make company software available mysql ab would due renewal presumably renegotiation time 2006 mysql users conference april 2006 mysql ab issued press release confirmed mysql ab innobase oy agreed multi-year extension licensing agreement february 2006 oracle corporation acquired sleepycat software makers berkeley db database engine providing basis another mysql storage engine little effect berkeley db widely used dropped due lack use mysql 5.1.12 pre-ga release mysql 5.1 released october 2006 january 2008 sun microsystems bought mysql ab 1 billion april 2009 oracle corporation entered agreement purchase sun microsystems owners mysql copyright trademark sun board directors unanimously approved deal also approved sun shareholders u.s. government 20 august 2009 14 december 2009 oracle pledged continue enhance mysql done previous four years movement oracle acquisition mysql ab save mysql oracle started one mysql ab founders monty widenius petition 50,000+ developers users called upon european commission block approval acquisition time free software opinion leaders including pamela jones groklaw jan wildeboer carlo piana also acted co-counsel merger regulation procedure advocated unconditional approval merger part negotiations european commission oracle committed mysql server continue least 2015 use dual-licensing strategy long used mysql ab proprietary gpl versions available antitrust eu pressuring divest mysql condition approval merger revealed wikileaks us department justice request oracle pressured eu approve merger unconditionally european commission eventually unconditionally approved oracle acquisition mysql ab 21 january 2010 january 2010 oracle acquisition mysql ab monty widenius started gpl-only fork mariadb mariadb based code base mysql server 5.5 aims maintain compatibility oracle-provided versions mysql offered two different editions open source mysql community server proprietary enterprise server mysql enterprise server differentiated series proprietary extensions install server plugins otherwise shares version numbering system built code base major features available mysql 5.6 developers release minor updates mysql server approximately every two months sources obtained mysql website mysql github repository gpl license using storage engines default innodb mysql comply full sql standard implemented functionality including foreign key references check constraints parsed ignored storage engines mysql version 8.0.15 mysql 5.7 triggers limited one per action timing meaning one trigger defined executed insert operation one insert table triggers defined views mysql database inbuilt functions like unix_timestamp return 0 03:14:07 utc 19 january 2038 recently attempt solve problem assigned internal queue mysql built installed manually source code commonly installed binary package unless special customizations required linux distributions package management system download install mysql minimal effort though configuration often required adjust security optimization settings though mysql began low-end alternative powerful proprietary databases gradually evolved support higher-scale needs well still commonly used small medium scale single-server deployments either component lamp-based web application standalone database server much mysql appeal originates relative simplicity ease use enabled ecosystem open source tools phpmyadmin medium range mysql scaled deploying powerful hardware multi-processor server gigabytes memory however limits far performance scale single server 'scaling larger scales multi-server mysql 'scaling deployments required provide improved performance reliability typical high-end configuration include powerful master database handles data write operations replicated multiple slaves handle read operations master server continually pushes binlog events connected slaves event failure slave promoted become new master minimizing downtime improvements performance achieved caching results database queries memory using memcached breaking database smaller chunks called shards spread across number distributed server clusters logical backup tool included community enterprise editions mysql supports backing storage engines mysql enterprise backup hot backup utility included part mysql enterprise subscription oracle offering native innodb hot backup well backup storage engines oracle mysql offers high availability solution mix tools including mysql router mysql shell based group replication open source tools mariadb offers similar offer terms products mysql also run cloud computing platforms microsoft azure amazon ec2 oracle cloud infrastructure common deployment models mysql cloud graphical user interface gui type interface allows users interact electronic devices programs graphical icons visual indicators secondary notation opposed text-based interfaces typed command labels text navigation guis easier learn command-line interfaces clis require commands typed keyboard third-party proprietary free graphical administration applications front ends available integrate mysql enable users work database structure data visually well-known front ends command-line interface means interacting computer program user issues commands program typing successive lines text command lines mysql ships many command line tools main interface client mysql utilities set utilities designed perform common maintenance administrative tasks originally included part mysql workbench utilities stand-alone download available oracle percona toolkit cross-platform toolkit mysql developed perl percona toolkit used prove replication working correctly fix corrupted data automate repetitive tasks speed servers percona toolkit included several linux distributions centos debian packages available fedora ubuntu well percona toolkit originally developed maatkit late 2011 maatkit longer developed mysql shell tool interactive use administration mysql database supports javascript python sql modes used administration access purposes many programming languages language-specific apis include libraries accessing mysql databases include mysql connector/net integration microsoft visual studio languages c vb commonly used jdbc driver java addition odbc interface called mysql connector/odbc allows additional programming languages support odbc interface communicate mysql database asp coldfusion htsql url-based query method also ships mysql adapter allowing direct interaction mysql database web client via structured urls drivers exists languages like python node.js variety mysql forks exist including following
node13:Wikipedia entry. Entry name: SolidDB. Entry content: soliddb soliddb in-memory relational database management system developed sold unicom global soliddb delivers extreme speed persistent relational in-memory database meets performance reliability demands real-time applications unicom global known unicom government inc. american information technology hardware solutions company founded 1983 provide microcomputer software federal government united states 1986 worked local state federal government agencies 1996 registered url engaged e-commerce soliddb includes in-memory database well traditional disk based database employ sql interface high availability option in-memory disk based engines coexist inside server process single sql statement access data engines high availability option maintains two copies data synchronized times case system failure applications recover access soliddb less second without loss data soliddb easy deploy administer ability embedded directly applications run virtually unattended lower total cost-of-ownership historically used embedded database telecommunications equipment network software similar systems companies using soliddb include alcatel-lucent ericsson cisco systems emc corporation hewlett-packard nokia siemens ag nokia networks solid acquired ibm late 2007 privately held company founded helsinki finland 1992 solid sold unicom global 2014
node14:Wikipedia entry. Entry name: SchoolTool. Entry content: schooltool schooltool gpl licensed free student information system schools around world goals project create simple turnkey student information system including demographics gradebook attendance calendaring reporting primary secondary schools well framework building customized applications configurations individual schools states schooltool built free software/open source software stack licensed gnu general public license version 2 written python using zope 3 framework sub-projects school tool follows schooltool configured default act often called student information system sis focus tracking information related students demographics enrollment grades attendance reporting subset complete “ management information system ” mis schools might also cover systems like accounting schooltool learning management system lms moodle although share overlapping feature sets gradebook schooltool contain curriculum learning objects post product news page october 2016 titled future sielibre schooltool indicates primary schooltool developers moved things accompanied google document explaining decision thanking contributors efforts
node15:Wikipedia entry. Entry name: Operating_system. Entry content: operating system operating system os system software manages computer hardware software resources provides common services computer programs time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources hardware functions input output memory allocation operating system acts intermediary programs computer hardware although application code usually executed directly hardware frequently makes system calls os function interrupted operating systems found many devices contain computer cellular phones video game consoles web servers supercomputers dominant desktop operating system microsoft windows market share around 82.74 macos apple inc. second place 13.23 varieties linux collectively third place 1.57 mobile smartphone tablet combined sector use 2017 70 google android according third quarter 2016 data android smartphones dominant 87.5 percent growth rate 10.3 percent per year followed apple ios 12.1 percent per year decrease market share 5.2 percent operating systems amount 0.3 percent linux distributions dominant server supercomputing sectors specialized classes operating systems embedded real-time systems exist many applications single-tasking system run one program time multi-tasking operating system allows one program running concurrency achieved time-sharing available processor time divided multiple processes processes interrupted repeatedly time slices task-scheduling subsystem operating system multi-tasking may characterized preemptive co-operative types preemptive multitasking operating system slices cpu time dedicates slot programs unix-like operating systems solaris linux—as well non-unix-like amigaos—support preemptive multitasking cooperative multitasking achieved relying process provide time processes defined manner 16-bit versions microsoft windows used cooperative multi-tasking 32-bit versions windows nt win9x used preemptive multi-tasking single-user operating systems facilities distinguish users may allow multiple programs run tandem multi-user operating system extends basic concept multi-tasking facilities identify processes resources disk space belonging multiple users system permits multiple users interact system time time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources multiple users distributed operating system manages group distinct computers makes appear single computer development networked computers could linked communicate gave rise distributed computing distributed computations carried one machine computers group work cooperation form distributed system os distributed cloud computing context templating refers creating single virtual machine image guest operating system saving tool multiple running virtual machines technique used virtualization cloud computing management common large server warehouses embedded operating systems designed used embedded computer systems designed operate small machines like pdas less autonomy able operate limited number resources compact extremely efficient design windows ce minix 3 examples embedded operating systems real-time operating system operating system guarantees process events data specific moment time real-time operating system may single- multi-tasking multitasking uses specialized scheduling algorithms deterministic nature behavior achieved event-driven system switches tasks based priorities external events time-sharing operating systems switch tasks based clock interrupts library operating system one services typical operating system provides networking provided form libraries composed application configuration code construct unikernel specialized single address space machine image deployed cloud embedded environments early computers built perform series single tasks like calculator basic operating system features developed 1950s resident monitor functions could automatically run different programs succession speed processing operating systems exist modern complex forms early 1960s hardware features added enabled use runtime libraries interrupts parallel processing personal computers became popular 1980s operating systems made similar concept used larger computers 1940s earliest electronic digital systems operating systems electronic systems time programmed rows mechanical switches jumper wires plug boards special-purpose systems example generated ballistics tables military controlled printing payroll checks data punched paper cards programmable general purpose computers invented machine languages consisting strings binary digits 0 1 punched paper tape introduced sped programming process stern 1981 early 1950s computer could execute one program time user sole use computer limited period time would arrive scheduled time program data punched paper cards punched tape program would loaded machine machine would set work program completed crashed programs could generally debugged via front panel using toggle switches panel lights said alan turing master early manchester mark 1 machine already deriving primitive conception operating system principles universal turing machine later machines came libraries programs would linked user program assist operations input output generating computer code human-readable symbolic code genesis modern-day operating system however machines still ran single job time cambridge university england job queue one time washing line clothes line tapes hung different colored clothes-pegs indicate job-priority improvement atlas supervisor introduced manchester atlas commissioned 1962 considered many first recognisable modern operating system brinch hansen described significant breakthrough history operating systems 1950s many major features pioneered field operating systems mainframe computers including batch processing input/output interrupt buffering multitasking spooling runtime libraries link-loading programs sorting records files features included included application software option application programmers rather separate operating system used applications 1959 share operating system released integrated utility ibm 704 later 709 7090 mainframes although quickly supplanted ibsys/ibjob 709 7090 7094 1960s ibm os/360 introduced concept single os spanning entire product line crucial success system/360 machines ibm current mainframe operating systems distant descendants original system applications written os/360 still run modern machines os/360 also pioneered concept operating system keeps track system resources used including program data space allocation main memory file space secondary storage file locking update process terminated reason resources re-claimed operating system alternative cp-67 system s/360-67 started whole line ibm operating systems focused concept virtual machines operating systems used ibm s/360 series mainframes included systems developed ibm cos/360 compatibility operating system dos/360 disk operating system tss/360 time sharing system tos/360 tape operating system bos/360 basic operating system acp airline control program well non-ibm systems mts michigan terminal system music multi-user system interactive computing orvyl stanford timesharing system control data corporation developed scope operating system 1960s batch processing cooperation university minnesota kronos later nos operating systems developed 1970s supported simultaneous batch timesharing use like many commercial timesharing systems interface extension dartmouth basic operating systems one pioneering efforts timesharing programming languages late 1970s control data university illinois developed plato operating system used plasma panel displays long-distance time sharing networks plato remarkably innovative time featuring real-time chat multi-user graphical games 1961 burroughs corporation introduced b5000 mcp master control program operating system b5000 stack machine designed exclusively support high-level languages machine language assembler indeed mcp first os written exclusively high-level language espol dialect algol mcp also introduced many ground-breaking innovations first commercial implementation virtual memory development as/400 ibm made approach burroughs license mcp run as/400 hardware proposal declined burroughs management protect existing hardware production mcp still use today unisys clearpath/mcp line computers univac first commercial computer manufacturer produced series exec operating systems like early main-frame systems batch-oriented system managed magnetic drums disks card readers line printers 1970s univac produced real-time basic rtb system support large-scale time sharing also patterned dartmouth bc system general electric mit developed general electric comprehensive operating supervisor gecos introduced concept ringed security privilege levels acquisition honeywell renamed general comprehensive operating system gcos digital equipment corporation developed many operating systems various computer lines including tops-10 tops-20 time sharing systems 36-bit pdp-10 class systems widespread use unix tops-10 particularly popular system universities early arpanet community rt-11 single-user real-time os pdp-11 class minicomputer rsx-11 corresponding multi-user os late 1960s late 1970s several hardware capabilities evolved allowed similar ported software run one system early systems utilized microprogramming implement features systems order permit different underlying computer architectures appear others series fact 360s 360/40 except 360/165 360/168 microprogrammed implementations enormous investment software systems made since 1960s caused original computer manufacturers continue develop compatible operating systems along hardware notable supported mainframe operating systems include first microcomputers capacity need elaborate operating systems developed mainframes minis minimalistic operating systems developed often loaded rom known monitors one notable early disk operating system cp/m supported many early microcomputers closely imitated microsoft ms-dos became widely popular operating system chosen ibm pc ibm version called ibm dos pc dos 1980s apple computer inc. apple inc. abandoned popular apple ii series microcomputers introduce apple macintosh computer innovative graphical user interface gui mac os introduction intel 80386 cpu chip october 1985 32-bit architecture paging capabilities provided personal computers ability run multitasking operating systems like earlier minicomputers mainframes microsoft responded progress hiring dave cutler developed vms operating system digital equipment corporation would lead development windows nt operating system continues serve basis microsoft operating systems line steve jobs co-founder apple inc. started next computer inc. developed nextstep operating system nextstep would later acquired apple inc. used along code freebsd core mac os x macos latest name change gnu project started activist programmer richard stallman goal creating complete free software replacement proprietary unix operating system project highly successful duplicating functionality various parts unix development gnu hurd kernel proved unproductive 1991 finnish computer science student linus torvalds cooperation volunteers collaborating internet released first version linux kernel soon merged gnu user space components system software form complete operating system since combination two major components usually referred simply linux software industry naming convention stallman free software foundation remain opposed preferring name gnu/linux berkeley software distribution known bsd unix derivative distributed university california berkeley starting 1970s freely distributed ported many minicomputers eventually also gained following use pcs mainly freebsd netbsd openbsd unix originally written assembly language ken thompson wrote b mainly based bcpl based experience multics project b replaced c unix rewritten c developed large complex family inter-related operating systems influential every modern operating system see history unix-like family diverse group operating systems several major sub-categories including system v bsd linux name unix trademark open group licenses use operating system shown conform definitions unix-like commonly used refer large set operating systems resemble original unix unix-like systems run wide variety computer architectures used heavily servers business well workstations academic engineering environments free unix variants linux bsd popular areas four operating systems certified open group holder unix trademark unix hp hp-ux ibm aix descendants original system v unix designed run respective vendor hardware contrast sun microsystems solaris run multiple types hardware including x86 sparc servers pcs apple macos replacement apple earlier non-unix mac os hybrid kernel-based bsd variant derived nextstep mach freebsd unix interoperability sought establishing posix standard posix standard applied operating system although originally created various unix variants subgroup unix family berkeley software distribution family includes freebsd netbsd openbsd operating systems commonly found webservers although also function personal computer os internet owes much existence bsd many protocols commonly used computers connect send receive data network widely implemented refined bsd world wide web also first demonstrated number computers running os based bsd called nextstep 1974 university california berkeley installed first unix system time students staff computer science department began adding new programs make things easier text editors berkeley received new vax computers 1978 unix installed school undergraduates modified unix even order take advantage computer hardware possibilities defense advanced research projects agency us department defense took interest decided fund project many schools corporations government organizations took notice started use berkeley version unix instead official one distributed steve jobs upon leaving apple inc. 1985 formed next inc. company manufactured high-end computers running variation bsd called nextstep one computers used tim berners-lee first webserver create world wide web developers like keith bostic encouraged project replace non-free code originated bell labs done however sued two years legal disputes bsd project spawned number free derivatives netbsd freebsd 1993 openbsd netbsd 1995 macos formerly mac os x later os x line open core graphical operating systems developed marketed sold apple inc. latest pre-loaded currently shipping macintosh computers macos successor original classic mac os apple primary operating system since 1984 unlike predecessor macos unix operating system built technology developed next second half 1980s apple purchased company early 1997 operating system first released 1999 mac os x server 1.0 followed march 2001 client version mac os x v10.0 cheetah since six distinct client server editions macos released two merged os x 10.7 lion prior merging macos server edition macos server architecturally identical desktop counterpart usually ran apple line macintosh server hardware macos server included work group management administration software tools provide simplified access key network services including mail transfer agent samba server ldap server domain name server others mac os x v10.7 lion server aspects mac os x server integrated client version product re-branded os x dropping mac name server tools offered application linux kernel originated 1991 project linus torvalds university student finland posted information project newsgroup computer students programmers received support assistance volunteers succeeded creating complete functional kernel linux unix-like developed without unix code unlike bsd variants open license model linux kernel code available study modification resulted use wide range computing machinery supercomputers smart-watches although estimates suggest linux used 1.82 desktop laptop pcs widely adopted use servers embedded systems cell phones linux superseded unix many platforms used supercomputers including top 385 many computers also green500 different order linux runs top 10 linux also commonly used small energy-efficient computers smartphones smartwatches linux kernel used popular distributions red hat debian ubuntu linux mint google android chrome os chromium os microsoft windows family proprietary operating systems designed microsoft corporation primarily targeted intel architecture based computers estimated 88.9 percent total usage share web connected computers latest version windows 10 2011 windows 7 overtook windows xp common version use microsoft windows first released 1985 operating environment running top ms-dos standard operating system shipped intel architecture personal computers time 1995 windows 95 released used ms-dos bootstrap backwards compatibility win9x could run real-mode ms-dos 16-bit windows 3.x drivers windows released 2000 last version win9x family later versions based windows nt kernel current client versions windows run ia-32 x86-64 32-bit arm microprocessors addition itanium still supported older server version windows server 2008 r2 past windows nt supported additional architectures server editions windows widely used recent years microsoft expended significant capital effort promote use windows server operating system however windows usage servers widespread personal computers windows competes linux bsd server market share reactos windows-alternative operating system developed principles windows without using microsoft code many operating systems significant day longer amigaos os/2 ibm microsoft classic mac os non-unix precursor apple macos beos xts-300 risc os morphos haiku baremetal freemint still used niche markets continue developed minority platforms enthusiast communities specialist applications openvms formerly dec still active development hewlett-packard yet operating systems used almost exclusively academia operating systems education research operating system concepts typical example system fulfills roles minix example singularity used purely research another example oberon system designed eth zürich niklaus wirth jürg gutknecht group students former computer systems institute 1980s used mainly research teaching daily work wirth group operating systems failed win significant market share introduced innovations influenced mainstream operating systems least bell labs plan 9 components operating system exist order make different parts computer work together user software needs go operating system order use hardware whether simple mouse keyboard complex internet component aid firmware device drivers kernel provides basic level control computer hardware devices manages memory access programs ram determines programs get access hardware resources sets resets cpu operating states optimal operation times organizes data long-term non-volatile storage file systems media disks tapes flash memory etc operating system provides interface application program computer hardware application program interact hardware obeying rules procedures programmed operating system operating system also set services simplify development execution application programs executing application program involves creation process operating system kernel assigns memory space resources establishes priority process multi-tasking systems loads program binary code memory initiates execution application program interacts user hardware devices interrupts central operating systems provide efficient way operating system interact react environment alternative operating system watch various sources input events polling require action found older systems small stacks 50 60 bytes unusual modern systems large stacks interrupt-based programming directly supported modern cpus interrupts provide computer way automatically saving local register contexts running specific code response events even basic computers support hardware interrupts allow programmer specify code may run event takes place interrupt received computer hardware automatically suspends whatever program currently running saves status runs computer code previously associated interrupt analogous placing bookmark book response phone call modern operating systems interrupts handled operating system kernel interrupts may come either computer hardware running program hardware device triggers interrupt operating system kernel decides deal event generally running processing code amount code run depends priority interrupt example person usually responds smoke detector alarm answering phone processing hardware interrupts task usually delegated software called device driver may part operating system kernel part another program device drivers may relay information running program various means program may also trigger interrupt operating system program wishes access hardware example may interrupt operating system kernel causes control passed back kernel kernel processes request program wishes additional resources wishes shed resources memory triggers interrupt get kernel attention modern microprocessors cpu mpu support multiple modes operation cpus capability offer least two modes user mode supervisor mode general terms supervisor mode operation allows unrestricted access machine resources including mpu instructions user mode operation sets limits instruction use typically disallows direct access machine resources cpus might modes similar user mode well virtual modes order emulate older processor types 16-bit processors 32-bit one 32-bit processors 64-bit one power-on reset system begins supervisor mode operating system kernel loaded started boundary user mode supervisor mode also known kernel mode established supervisor mode used kernel low level tasks need unrestricted access hardware controlling memory accessed communicating devices disk drives video display devices user mode contrast used almost everything else application programs word processors database managers operate within user mode access machine resources turning control kernel process causes switch supervisor mode typically transfer control kernel achieved executing software interrupt instruction motorola 68000 codice_1 instruction software interrupt causes microprocessor switch user mode supervisor mode begin executing code allows kernel take control user mode programs usually access restricted set microprocessor instructions generally execute instructions could potentially cause disruption system operation supervisor mode instruction execution restrictions typically removed allowing kernel unrestricted access machine resources term user mode resource generally refers one cpu registers contain information running program n't allowed alter attempts alter resources generally causes switch supervisor mode operating system deal illegal operation program attempting example forcibly terminating killing program among things multiprogramming operating system kernel must responsible managing system memory currently use programs ensures program interfere memory already use another program since programs time share program must independent access memory cooperative memory management used many early operating systems assumes programs make voluntary use kernel memory manager exceed allocated memory system memory management almost never seen since programs often contain bugs cause exceed allocated memory program fails may cause memory used one programs affected overwritten malicious programs viruses may purposefully alter another program memory may affect operation operating system cooperative memory management takes one misbehaved program crash system memory protection enables kernel limit process access computer memory various methods memory protection exist including memory segmentation paging methods require level hardware support 80286 mmu n't exist computers segmentation paging certain protected mode registers specify cpu memory address allow running program access attempts access addresses trigger interrupt cause cpu re-enter supervisor mode placing kernel charge called segmentation violation seg-v short since difficult assign meaningful result operation usually sign misbehaving program kernel generally resorts terminating offending program reports error windows versions 3.1 level memory protection programs could easily circumvent need use general protection fault would produced indicating segmentation violation occurred however system would often crash anyway use virtual memory addressing paging segmentation means kernel choose memory program may use given time allowing operating system use memory locations multiple tasks program tries access memory n't current range accessible memory nonetheless allocated kernel interrupted way would program exceed allocated memory see section memory management unix kind interrupt referred page fault kernel detects page fault generally adjusts virtual memory range program triggered granting access memory requested gives kernel discretionary power particular application memory stored even whether actually allocated yet modern operating systems memory accessed less frequently temporarily stored disk media make space available use programs called swapping area memory used multiple programs memory area contains swapped exchanged demand virtual memory provides programmer user perception much larger amount ram computer really multitasking refers running multiple independent computer programs computer giving appearance performing tasks time since computers one two things one time generally done via time-sharing means program uses share computer time execute operating system kernel contains scheduling program determines much time process spends executing order execution control passed programs control passed process kernel allows program access cpu memory later control returned kernel mechanism another program may allowed use cpu so-called passing control kernel applications called context switch early model governed allocation time programs called cooperative multitasking model control passed program kernel may execute long wants explicitly returning control kernel means malicious malfunctioning program may prevent programs using cpu hang entire system enters infinite loop modern operating systems extend concepts application preemption device drivers kernel code operating system preemptive control internal run-times well philosophy governing preemptive multitasking ensuring programs given regular time cpu implies programs must limited much time allowed spend cpu without interrupted accomplish modern operating system kernels make use timed interrupt protected mode timer set kernel triggers return supervisor mode specified time elapsed see sections interrupts dual mode operation many single user operating systems cooperative multitasking perfectly adequate home computers generally run small number well tested programs amigaos exception preemptive multitasking first version windows nt first version microsoft windows enforced preemptive multitasking n't reach home user market windows xp since windows nt targeted professionals access data stored disks central feature operating systems computers store data disks using files structured specific ways order allow faster access higher reliability make better use drive available space specific way files stored disk called file system enables files names attributes also allows stored hierarchy directories folders arranged directory tree early operating systems generally supported single type disk drive one kind file system early file systems limited capacity speed kinds file names directory structures could use limitations often reflected limitations operating systems designed making difficult operating system support one file system many simpler operating systems support limited range options accessing storage systems operating systems like unix linux support technology known virtual file system vfs operating system unix supports wide array storage devices regardless design file systems allowing accessed common application programming interface api makes unnecessary programs knowledge device accessing vfs allows operating system provide programs access unlimited number devices infinite variety file systems installed use specific device drivers file system drivers connected storage device hard drive accessed device driver device driver understands specific language drive able translate language standard language used operating system access disk drives unix language block devices kernel appropriate device driver place access contents disk drive raw format may contain one file systems file system driver used translate commands used access specific file system standard set commands operating system use talk file systems programs deal file systems basis filenames directories/folders contained within hierarchical structure create delete open close files well gather various information including access permissions size free space creation modification dates various differences file systems make supporting file systems difficult allowed characters file names case sensitivity presence various kinds file attributes makes implementation single interface every file system daunting task operating systems tend recommend using support natively file systems specifically designed example ntfs windows ext3 reiserfs linux however practice third party drivers usually available give support widely used file systems general-purpose operating systems example ntfs available linux ntfs-3g ext2/3 reiserfs available windows third-party software support file systems highly varied among modern operating systems although several common file systems almost operating systems include support drivers operating systems vary file system support disk formats may installed windows file system usually limited application certain media example cds must use iso 9660 udf windows vista ntfs file system operating system installed possible install linux onto many types file systems unlike operating systems linux unix allow file system used regardless media stored whether hard drive disc cd dvd ... usb flash drive even contained within file located another file system device driver specific type computer software developed allow interaction hardware devices typically constitutes interface communicating device specific computer bus communications subsystem hardware connected providing commands and/or receiving data device end requisite interfaces operating system software applications specialized hardware-dependent computer program also operating system specific enables another program typically operating system applications software package computer program running operating system kernel interact transparently hardware device usually provides requisite interrupt handling necessary necessary asynchronous time-dependent hardware interfacing needs key design goal device drivers abstraction every model hardware even within class device different newer models also released manufacturers provide reliable better performance newer models often controlled differently computers operating systems expected know control every device future solve problem operating systems essentially dictate every type device controlled function device driver translate operating system mandated function calls device specific calls theory new device controlled new manner function correctly suitable driver available new driver ensures device appears operate usual operating system point view versions windows vista versions linux 2.6 driver execution co-operative meaning driver entered infinite loop would freeze system recent revisions operating systems incorporate kernel preemption kernel interrupts driver give tasks separates process receives response device driver gives tasks currently operating systems support variety networking protocols hardware applications using means computers running dissimilar operating systems participate common network sharing resources computing files printers scanners using either wired wireless connections networks essentially allow computer operating system access resources remote computer support functions could resources connected directly local computer includes everything simple communication using networked file systems even sharing another computer graphics sound hardware network services allow resources computer accessed transparently ssh allows networked users direct access computer command line interface client/server networking allows program computer called client connect via network another computer called server servers offer host various services network computers users services usually provided ports numbered access points beyond server ip address port number usually associated maximum one running program responsible handling requests port daemon user program turn access local hardware resources computer passing requests operating system kernel many operating systems support one vendor-specific open networking protocols well example sna ibm systems decnet systems digital equipment corporation microsoft-specific protocols smb windows specific protocols specific tasks may also supported nfs file access protocols like esound esd easily extended network provide sound local applications remote system sound hardware computer secure depends number technologies working properly modern operating system provides access number resources available software running system external devices like networks via kernel operating system must capable distinguishing requests allowed processed others processed systems may simply distinguish privileged non-privileged systems commonly form requester identity user name establish identity may process authentication often username must quoted username may password methods authentication magnetic cards biometric data might used instead cases especially connections network resources may accessed authentication reading files network share also covered concept requester identity authorization particular services resources accessible requester logged system tied either requester user account variously configured groups users requester belongs addition allow disallow model security system high level security also offers auditing options would allow tracking requests access resources reading file internal security security already running program possible possibly harmful requests must carried interrupts operating system kernel programs directly access hardware resources secured external security involves request outside computer login connected console kind network connection external requests often passed device drivers operating system kernel passed onto applications carried directly security operating systems long concern highly sensitive data held computers commercial military nature united states government department defense dod created trusted computer system evaluation criteria tcsec standard sets basic requirements assessing effectiveness security became vital importance operating system makers tcsec used evaluate classify select trusted operating systems considered processing storage retrieval sensitive classified information network services include offerings file sharing print services email web sites file transfer protocols ftp compromised security front line security hardware devices known firewalls intrusion detection/prevention systems operating system level number software firewalls available well intrusion detection/prevention systems modern operating systems include software firewall enabled default software firewall configured allow deny network traffic service application running operating system therefore one install running insecure service telnet ftp threatened security breach firewall would deny traffic trying connect service port alternative strategy sandbox strategy available systems meet popek goldberg virtualization requirements operating system running user programs native code instead either emulates processor provides host p-code based system java internal security especially relevant multi-user systems allows user system private files users tamper read internal security also vital auditing use since program potentially bypass operating system inclusive bypassing auditing every computer operated individual requires user interface user interface usually referred shell essential human interaction supported user interface views directory structure requests services operating system acquire data input hardware devices keyboard mouse credit card reader requests operating system services display prompts status messages output hardware devices video monitor printer two common forms user interface historically command-line interface computer commands typed line-by-line graphical user interface visual environment commonly wimp present modern computer systems support graphical user interfaces gui often include computer systems original implementation classic mac os gui integrated kernel technically graphical user interface operating system service incorporating support one operating system kernel allow gui responsive reducing number context switches required gui perform output functions operating systems modular separating graphics subsystem kernel operating system 1980s unix vms many others operating systems built way linux macos also built way modern releases microsoft windows windows vista implement graphics subsystem mostly user-space however graphics drawing routines versions windows nt 4.0 windows server 2003 exist mostly kernel space windows 9x little distinction interface kernel many computer operating systems allow user install create user interface desire x window system conjunction gnome kde plasma 5 commonly found setup unix unix-like bsd linux solaris systems number windows shell replacements released microsoft windows offer alternatives included windows shell shell separated windows numerous unix-based guis existed time derived x11 competition among various vendors unix hp ibm sun led much fragmentation though effort standardize 1990s cose cde failed various reasons eventually eclipsed widespread adoption gnome k desktop environment prior free software-based toolkits desktop environments motif prevalent toolkit/desktop combination basis upon cde developed graphical user interfaces evolve time example windows modified user interface almost every time new major version windows released mac os gui changed dramatically introduction mac os x 1999 real-time operating system rtos operating system intended applications fixed deadlines real-time computing applications include small embedded systems automobile engine controllers industrial robots spacecraft industrial control large-scale computing systems early example large-scale real-time operating system transaction processing facility developed american airlines ibm sabre airline reservations system embedded systems fixed deadlines use real-time operating system vxworks pikeos ecos qnx montavista linux rtlinux windows ce real-time operating system shares similar apis desktop windows shares none desktop windows codebase symbian os also rtos kernel eka2 starting version 8.0b embedded systems use operating systems palm os bsd linux although operating systems support real-time computing operating system development one complicated activities computing hobbyist may engage hobby operating system may classified one whose code directly derived existing operating system users active developers cases hobby development support homebrew computing device example simple single-board computer powered 6502 microprocessor development may architecture already widespread use operating system development may come entirely new concepts may commence modeling existing operating system either case hobbyist his/her developer may interact small sometimes unstructured group individuals like interests examples hobby operating system include syllable templeos application software generally written use specific operating system sometimes even specific hardware porting application run another os functionality required application may implemented differently os names functions meaning arguments etc requiring application adapted changed otherwise maintained unix first operating system written assembly language making portable systems different native pdp-11 cost supporting operating systems diversity avoided instead writing applications software platforms java qt abstractions already borne cost adaptation specific operating systems system libraries another approach operating system vendors adopt standards example posix os abstraction layers provide commonalities reduce porting costs
node16:Wikipedia entry. Entry name: IBM_Unica_NetInsight. Entry content: ibm unica netinsight ibm unica netinsight web analytics application utilizes extract transform load methodology populate database queried using browser-based interface netinsight family tools unica nettracker affinium netinsight first released june 2006 version 7.0 release version 8.0 affinium netinsight renamed unica netinsight dropping along rest unica products affinium brand ibm acquires unica corporation unica netinsight software adopts ibm name ibm unica netinsight april 2014 ibm announced unica netinsight would discontinued netinsight extract transform load process read log files virtually format including logs web servers proxy servers streaming media servers ftp servers well processing normal server log files netinsight use log files derived page tags replace augment log file data netinsight stores processed log files database oracle database microsoft sql server ibm db2 netezza appliance
node17:Wikipedia entry. Entry name: Memory_protection. Entry content: memory protection memory protection way control memory access rights computer part modern instruction set architectures operating systems main purpose memory protection prevent process accessing memory allocated prevents bug malware within process affecting processes operating system protection may encompass accesses specified area memory write accesses attempts execute contents area attempt access unowned memory results hardware fault called segmentation fault storage violation exception generally causing abnormal termination offending process memory protection computer security includes additional techniques address space layout randomization executable space protection segmentation refers dividing computer memory segments reference memory location includes value identifies segment offset within segment x86 architecture multiple segmentation features helpful using protected memory architecture x86 architecture global descriptor table local descriptor tables used reference segments computer memory pointers memory segments x86 processors also stored processor segment registers initially x86 processors 4 segment registers cs code segment ss stack segment ds data segment es extra segment later another two segment registers added – fs gs paging memory address space divided equal-sized blocks called pages using virtual memory hardware page reside location computer physical memory flagged protected virtual memory makes possible linear virtual memory address space use access blocks fragmented physical memory address space computer architectures support paging also use pages basis memory protection page table maps virtual memory physical memory page table usually invisible process page tables make easier allocate additional memory new page allocated anywhere physical memory impossible application access page explicitly allocated every memory address either points page allocated application generates interrupt called page fault unallocated pages pages allocated application addresses application point view page fault may necessarily indicate error page faults used memory protection operating system may manage page table way reference page previously swapped disk causes page fault operating system intercepts page fault loads required memory page application continues fault occurred scheme known virtual memory allows in-memory data currently use moved disk storage back way transparent applications increase overall memory capacity systems page fault mechanism also used executable space protection w^x memory protection key mpk mechanism divides physical memory blocks particular size e.g. 4 kib associated numerical value called protection key process also protection key value associated memory access hardware checks current process protection key matches value associated memory block accessed exception occurs mechanism introduced system/360 architecture available today system z mainframes heavily used system z operating systems subsystems system/360 protection keys described associated physical addresses different protection key mechanism used architectures hewlett-packard/intel ia-64 hewlett-packard pa-risc associated virtual addresses allow multiple keys per process itanium pa architectures translations tlb entries keys itanium access ids pa associated running process several protection key registers 16 itanium 4 hp/pa translation selected virtual address key compared protection key registers match plus possible checks access permitted none match fault exception generated software fault handler desired check missing key larger list keys maintained software thus protection key registers inside processor may treated software-managed cache larger list keys associated process pa 15–18 bits key itanium mandates least 18 keys usually associated protection domains libraries modules etc x86 protection keys architecture allows tagging virtual addresses user pages 16 protection keys pages tagged protection key constitute protection domain new register contains permissions associated protection domain load store operations checked page table permissions protection key permissions associated protection domain virtual address allowed permissions allow access protection key permissions set user space allowing applications directly restrict access application data without os intervention since protection keys associated virtual address protection domains per address space processes running different address spaces use 16 domains simulation use monitoring program interpret machine code instructions computer architectures instruction set simulator provide memory protection using segmentation-like scheme validating target address length instruction real time actually executing simulator must calculate target address length compare list valid address ranges holds concerning thread environment dynamic memory blocks acquired since thread inception plus valid shared static memory slots meaning valid may change throughout thread life depending upon context may sometimes allowed alter static block storage sometimes depending upon current mode execution may may depend storage key supervisor state generally advisable use method memory protection adequate facilities exist cpu takes valuable processing power computer however generally used debugging testing purposes provide extra fine level granularity otherwise generic storage violations indicate precisely instruction attempting overwrite particular section storage may storage key unprotected storage capability-based addressing method memory protection unused modern commercial computers method pointers replaced protected objects called capabilities created using privileged instructions may executed kernel process authorized effectively lets kernel control processes may access objects memory need use separate address spaces context switches commercial products used capability based security plessey system 250 ibm system/38 intel iapx 432 architecture keykos capability approaches widely used research systems eros combex darpa browser used conceptually basis virtual machines notably smalltalk java currently darpa-funded cheri project university cambridge working create modern capability machine also supports legacy software dynamic tainting technique protecting programs illegal memory accesses memory allocated runtime technique taints memory corresponding pointer using taint mark taint marks suitably propagated program executes checked every time memory address accessed pointer p taint marks associated p differ execution stopped illegal access reported sparc m7 processors higher implement dynamic tainting hardware oracle markets feature silicon secured memory ssm previously branded application data integrity adi lowrisc cpu design includes dynamic tainting name tagged memory protection level particular implementation may measured closely adheres principle minimum privilege different operating systems use different forms memory protection separation although memory protection common mainframes many minicomputer systems 1960s true memory separation used home computer operating systems os/2 risc os released 1987 prior systems lack protection even used form interprocess communication sending pointer processes possible processes access system memory windows 9x family operating systems operating systems implement memory protection include unix-like systems codice_1 system call used control memory protection
node18:Wikipedia entry. Entry name: PHP. Entry content: php php hypertext preprocessor simply php general-purpose programming language originally designed web development originally created rasmus lerdorf 1994 php reference implementation produced php group php originally stood personal home page stands recursive initialism php hypertext preprocessor php code may executed command line interface cli embedded html code used combination various web template systems web content management systems web frameworks php code usually processed php interpreter implemented module web server common gateway interface cgi executable web server outputs results interpreted executed php code may type data generated html code binary image data php used many programming tasks outside web context standalone graphical applications robotic drone control standard php interpreter powered zend engine free software released php license php widely ported deployed web servers almost every operating system platform free charge php language evolved without written formal specification standard 2014 original implementation acting de facto standard implementations aimed follow since 2014 work gone create formal php specification majority sites web using php still version 5.6 older versions prior 7.1 longer officially supported php development team security support provided longer third parties debian php development began 1994 rasmus lerdorf wrote several common gateway interface cgi programs c used maintain personal homepage extended work web forms communicate databases called implementation personal home page/forms interpreter php/fi php/fi could used build simple dynamic web applications accelerate bug reporting improve code lerdorf initially announced release php/fi personal home page tools php tools version 1.0 usenet discussion group comp.infosystems.www.authoring.cgi june 8 1995 release already basic functionality php today included perl-like variables form handling ability embed html syntax resembled perl simpler limited less consistent early php intended new programming language grew organically lerdorf noting retrospect n't know stop never intent write programming language ... absolutely idea write programming language kept adding next logical step way development team began form months work beta testing officially released php/fi 2 november 1997 fact php originally designed instead developed organically led inconsistent naming functions inconsistent ordering parameters cases function names chosen match lower-level libraries php wrapping early versions php length function names used internally hash function names chosen improve distribution hash values zeev suraski andi gutmans rewrote parser 1997 formed base php 3 changing language name recursive acronym php hypertext preprocessor afterwards public testing php 3 began official launch came june 1998 suraski gutmans started new rewrite php core producing zend engine 1999 also founded zend technologies ramat gan israel may 22 2000 php 4 powered zend engine 1.0 released august 2008 branch reached version 4.4.9 php 4 longer development security updates released july 14 2004 php 5 released powered new zend engine ii php 5 included new features improved support object-oriented programming php data objects pdo extension defines lightweight consistent interface accessing databases numerous performance enhancements 2008 php 5 became stable version development late static binding missing php added version 5.3 many high-profile open-source projects ceased support php 4 new code february 5 2008 gophp5 initiative provided consortium php developers promoting transition php 4 php 5 time php interpreters became available existing 32-bit 64-bit operating systems either building php source code using pre-built binaries php versions 5.3 5.4 available microsoft windows binary distributions 32-bit ia-32 builds requiring windows 32-bit compatibility mode using internet information services iis 64-bit windows platform php version 5.5 made 64-bit x86-64 builds available microsoft windows official security support php 5.6 ended 31 december 2018 debian 8.0 jessie extend support june 2020 php received mixed reviews due lacking native unicode support core language level 2005 project headed andrei zmievski initiated bring native unicode support throughout php embedding international components unicode icu library representing text strings utf-16 internally since would cause major changes internals language user code planned release version 6.0 language along major features development however shortage developers understood necessary changes performance problems arising conversion utf-16 rarely used web context led delays project result php 5.3 release created 2009 many non-unicode features back-ported php 6 notably namespaces march 2010 project current form officially abandoned php 5.4 release prepared containing remaining non-unicode features php 6 traits closure re-binding initial hopes new plan would formed unicode integration none adopted 2014 2015 new major php version developed numbered php 7 numbering version involved debate php 6 unicode experiment never released several articles book titles referenced php 6 name might caused confusion new release reuse name vote name php 7 chosen foundation php 7 php branch originally dubbed php next generation phpng authored dmitry stogov xinchen hui nikita popov aimed optimize php performance refactoring zend engine retaining near-complete language compatibility wordpress-based benchmarks served main benchmark suite phpng project showed almost 100 increase performance changes phpng also expected make easier improve performance future compact data structures changes seen better suited successful migration just-in-time jit compiler significant changes reworked zend engine called zend engine 3 succeeding zend engine 2 used php 5 major internal changes phpng must receive new major version number php rather minor php 5 release according php release process major versions php allowed break backward-compatibility code therefore php 7 presented opportunity improvements beyond phpng require backward-compatibility breaks particular involved following changes php 7 also included new language features notably introduces return type declarations functions complement existing parameter type declarations support scalar types integer float string boolean parameter return type declarations beginning june 28 2011 php development team implemented timeline release new versions php system least one release occur every month per year minor release occur may include new features every minor release least supported two years security bug fixes followed least one year security fixes total three-year release process every minor release new features unless small self-contained introduced minor release three-year release process mascot php project elephpant blue elephant php logo side designed vincent pontier 1998 php letters forming shape elephant viewed sideways angle elephpant sometimes differently colored plush toy form many variations mascot made years elephpants based original design vincent pontier considered official community highly collectible extremely rare different variations listed field guide elephpants following hello world program written php code embedded html document doctype html title php hello world program /title php echo p hello world /p however requirement exists php code embedded html simplest version hello world may written like closing tag omitted preferred files containing pure php code well requirement php file contain php code interpreter output data outside php tags unchanged simple text file containing codice_13 give output php interpreter executes php code within delimiters anything outside delimiters processed php although non-php text still subject control structures described php code common delimiters php open close php sections shortened form also exists short delimiter makes script files less portable since support disabled local php configuration therefore discouraged recommendation echo short tag prior php 5.4.0 short syntax echo works codice_14 configuration setting enabled php 5.4.0 later always available purpose delimiters separate php code non-php content javascript code html markup first form delimiters php xhtml xml documents creates correctly formed xml processing instructions means resulting mixture php code markup server-side file well-formed xml variables prefixed dollar symbol type need specified advance php 5 introduced type hinting allows functions force parameters objects specific class arrays interfaces callback functions however php 7.0 type hints could used scalar types integer string unlike function class names variable names case sensitive double-quoted heredoc strings provide ability interpolate variable value string php treats newlines whitespace manner free-form language statements terminated semicolon php three types comment syntax /* */ marks block inline comments // used one-line comments codice_15 statement one several facilities php provides output text terms keywords language syntax php similar c style syntax conditions loops function returns similar syntax languages c c++ c java perl php stores integers platform-dependent range either 64-bit 32-bit 128-bit signed integer equivalent c-language long type unsigned integers converted signed values certain situations behavior different programming languages integer variables assigned using decimal positive negative octal hexadecimal binary notations floating point numbers also stored platform-specific range specified using floating point notation two forms scientific notation php native boolean type similar native boolean types java c++ using boolean type conversion rules non-zero values interpreted true zero false perl c++ null data type represents variable value codice_16 allowed value data type old versions interpreter allowed multiple copies value exist variables resource type represent references resources external sources typically created functions particular extension processed functions extension examples include file image database resources arrays contain elements type php handle including resources objects even arrays order preserved lists values hashes keys values two intermingled php also supports strings used single quotes double quotes nowdoc heredoc syntax standard php library spl attempts solve standard problems implements efficient data access interfaces classes php defines large array functions core language many also available various extensions functions well documented online php documentation however built-in library wide variety naming conventions associated inconsistencies described history custom functions may defined developer function myage int birthyear string echo currently myage 1995 old 2019 output sample program currently 24 years old lieu function pointers functions php referenced string containing name manner normal php functions used example callbacks within function tables user-defined functions may created time without prototyped functions may defined inside code blocks permitting run-time decision whether function defined codice_17 function determines whether function given name already defined function calls must use parentheses exception zero-argument class constructor functions called php operator codice_18 case parentheses optional php 5.3 support anonymous functions closures exist php codice_19 exists since php 4.0.1 merely thin wrapper around codice_20 allows normal php functions created program execution php 5.3 added syntax define anonymous function closure capture variables surrounding scope function getadder x adder getadder 8 echo adder 2 // prints 10 example codice_21 function creates closure using passed argument keyword codice_22 imports variable lexical context takes additional argument returns created closure caller function first-class object meaning stored variable passed parameter functions etc unusually dynamically typed language php supports type declarations function parameters enforced runtime supported classes interfaces since php 5.0 arrays since php 5.1 callables since php 5.4 scalar integer float string boolean types since php 7.0 php 7.0 also type declarations function return types expressed placing type name list parameters preceded colon example codice_23 function earlier example could annotated types like php 7 function getadder int x closure adder getadder 8 echo adder 2 // prints 10 echo adder null // throws exception incorrect type passed adder getadder // would also throw exception default scalar type declarations follow weak typing principles example parameter type codice_24 php would allow integers also convertible numeric strings floats booleans passed function would convert however php 7 strict typing mode used disallows conversions function calls returns within file basic object-oriented programming functionality added php 3 improved php 4 allowed php gain abstraction making creative tasks easier programmers using language object handling completely rewritten php 5 expanding feature set enhancing performance previous versions php objects handled like value types drawback method code make heavy use php reference variables wanted modify object passed rather creating copy new approach objects referenced handle value php 5 introduced private protected member variables methods along abstract classes final classes abstract methods final methods also introduced standard way declaring constructors destructors similar object-oriented languages c++ standard exception handling model furthermore php 5 added interfaces allowed multiple interfaces implemented special interfaces allow objects interact runtime system objects implementing arrayaccess used array syntax objects implementing iterator iteratoraggregate used codice_6 language construct virtual table feature engine static variables bound name instead reference compile time developer creates copy object using reserved word codice_26 zend engine check whether codice_27 method defined call default codice_27 copy object properties codice_27 method defined responsible setting necessary properties created object convenience engine supply function imports properties source object programmer start by-value replica source object override properties need changed following basic example object-oriented programming php php abstract class user class student extends user class teacher extends user students teachers echo students \n foreach students student echo teachers \n foreach teachers teacher // output program // students // hello name alice learn computer science // hello name bob learn computer science // hello name charlie learn business studies // teachers // hello name dan teach computer science information security // hello name erin teach computer science 3d graphics programming // hello name frankie teach online marketing business studies e-commerce visibility php properties methods defined using keywords codice_30 codice_31 codice_32 default public var used codice_33 synonym codice_30 items declared codice_30 accessed everywhere codice_32 limits access inherited classes class defines item codice_31 limits visibility class defines item objects type access private protected members even though instance original complete widely used php implementation powered zend engine known simply php disambiguate implementations sometimes unofficially called zend php zend engine compiles php source code on-the-fly internal format execute thus works interpreter also reference implementation php php formal specification semantics zend php define semantics php due complex nuanced semantics php defined zend works difficult competing implementations offer complete compatibility php single-request-per-script-execution model fact zend engine interpreter leads inefficiency result various products developed help improve php performance order speed execution time compile php source code every time web page accessed php scripts also deployed php engine internal format using opcode cache works caching compiled form php script opcodes shared memory avoid overhead parsing compiling code every time script runs opcode cache zend opcache built php since version 5.5 another example widely used opcode cache alternative php cache apc available pecl extension zend php still popular implementation several implementations developed compilers support jit compilation hence offer performance benefits zend php expense lacking full php compatibility alternative implementations include following php free software released php license stipulates restriction use php makes php license incompatible general public license gpl zend license incompatible due advertising clause similar original bsd license php includes various free open-source libraries source distribution uses resulting php binary builds php fundamentally internet-aware system built-in modules accessing file transfer protocol ftp servers many database servers including postgresql mysql microsoft sql server sqlite embedded database ldap servers others numerous functions familiar c programmers stdio family available standard php builds php allows developers write extensions c add functionality php language php extensions compiled statically php loaded dynamically runtime numerous extensions written add support windows api process management unix-like operating systems multibyte strings unicode curl several popular compression formats php features made available extensions include integration irc dynamic generation images adobe flash content php data objects pdo abstraction layer used accessing databases even speech synthesis language core functions dealing strings arrays also implemented extensions php extension community library pecl project repository extensions php language projects zephir provide ability php extensions created high-level language compiled native php extensions approach instead writing php extensions directly c simplifies development extensions reduces time required programming testing php group consisted ten people thies c. arntzen stig bakken shane caraveo andi gutmans rasmus lerdorf sam ruby sascha schumann zeev suraski jim winstead andrei zmievski zend technologies provides php certification based php 5.5 exam programmers become certified php developers two primary ways adding support php web server – native web server module cgi executable php direct module interface called server application programming interface sapi supported many web servers including apache http server microsoft iis netscape defunct iplanet web servers omnihttpd support internet server application programming interface isapi microsoft web server module interface php module support web server always used common gateway interface cgi fastcgi processor case web server configured use php cgi executable process requests php files php-fpm fastcgi process manager alternative fastcgi implementation php bundled official php distribution since version 5.3.3 compared older fastcgi implementation contains additional features mostly useful heavily loaded web servers using php command-line scripting php command-line interface cli executable needed php supports cli server application programming interface sapi php 4.3.0 main focus sapi developing shell applications using php quite differences cli sapi sapis although share many behaviors php direct module interface called sapi different web servers case php 5 apache 2.0 windows provided form dll file called module among functions provides interface php web server implemented form server understands form known sapi different kinds sapis various web server extensions example addition listed sapis php language include common gateway interface cgi command-line interface cli php also used writing desktop graphical user interface gui applications using php-gtk extension php-gtk included official php distribution extension used php versions 5.1.0 newer common way installing php-gtk compiling source code php installed used cloud environments software development kits sdks provided using cloud-specific features example numerous configuration options supported affecting core php features extensions configuration file codice_40 searched different locations depending way php used configuration file split various sections configuration options also set within web server configuration php general-purpose scripting language especially suited server-side web development case php generally runs web server php code requested file executed php runtime usually create dynamic web page content dynamic images used websites elsewhere also used command-line scripting client-side graphical user interface gui applications php deployed web servers many operating systems platforms used many relational database management systems rdbms web hosting providers support php use clients available free charge php group provides complete source code users build customize extend use originally designed create dynamic web pages php focuses mainly server-side scripting similar server-side scripting languages provide dynamic content web server client microsoft asp.net sun microsystems javaserver pages codice_41 php also attracted development many software frameworks provide building blocks design structure promote rapid application development rad include prado cakephp symfony codeigniter laravel yii framework phalcon zend framework offering features similar web frameworks lamp architecture become popular web industry way deploying web applications php commonly used p bundle alongside linux apache mysql although p may also refer python perl mix three similar packages wamp mamp also available windows macos first letter standing respective operating system although php apache provided part macos base install users packages seek simpler installation mechanism easily kept date 20 million internet domains web services hosted servers php installed codice_42 recorded popular apache http server module php used server-side programming language 79.1 websites 83.5 previously language could determined web content management systems written php include mediawiki joomla ez publish ez platform silverstripe wordpress drupal moodle websites written php back-end and/or user-facing portion include facebook digg tumblr dailymotion slack specific advanced usage scenarios php offers well defined documented way writing custom extensions c c++ besides extending language form additional libraries extensions providing way improving execution speed critical room improvements using true compiled language php also offers well defined ways embedding software projects way php easily used internal scripting language another project also providing tight interfacing project specific internal data structures php received mixed reviews due lacking support multithreading core language level though using threads made possible pthreads pecl extension php used 240 million websites 39 sampled installed 2.1 million web servers command line interface php-cli two activex windows script host scripting engines php produced php 5 used web last updated security updates january 2019 php 5.6.40 2017 3 vulnerabilities listed national vulnerability database linked php historically 30 vulnerabilities listed since 1996 database linked php technical security flaws language core libraries frequent 22 2009 1 total although php applies 20 programs listed recognizing programmers make mistakes languages include taint checking automatically detect lack input validation induces many issues feature developed php inclusion release rejected several times past advanced protection patches suhosin hardening-patch especially designed web hosting environments historically old versions php configuration parameters default values runtime settings made php applications prone security issues among codice_43 codice_44 configuration directives best known latter made url parameters become php variables opening path serious security vulnerabilities allowing attacker set value uninitialized global variable interfere execution php script support magic quotes register globals settings deprecated php 5.3.0 removed php 5.4.0 another example potential runtime-settings vulnerability comes failing disable php execution example using codice_45 configuration directive directory uploaded files stored enabling result execution malicious code embedded within uploaded files best practice either locate image directory outside document root available web server serve via intermediary script disable php execution directory stores uploaded files also enabling dynamic loading php extensions via codice_46 configuration directive shared web hosting environment lead security issues implied type conversions result different values treated equal sometimes programmer intent lead security issues example result comparison codice_47 first compared value treated scientific notation value zero errors like resulted authentication vulnerabilities simple machines forum typo3 phpbb md5 password hashes compared recommended way use hash_equals timing attack safety codice_48 identity operator codice_49 results codice_50 2013 analysis 170,000 website defacements published zone-h frequently 53 used technique exploitation file inclusion vulnerability mostly related insecure usage php functions codice_51 codice_52 codice_53
node19:Wikipedia entry. Entry name: JFFS2. Entry content: jffs2 journalling flash file system version 2 jffs2 log-structured file system use flash memory devices successor jffs jffs2 included linux kernel since september 23 2001 merged linux kernel mainline part kernel version 2.4.10 release jffs2 also available bootloaders like das u-boot open firmware ecos rtos rtems rtos redboot prominent usage jffs2 comes openwrt least three file systems developed jffs2 replacements logfs ubifs yaffs jffs2 introduced jffs changes files directories logged flash nodes two types jffs nodes start valid created become obsolete newer version created elsewhere unlike jffs however circular log instead jffs2 deals blocks unit size erase segment flash medium blocks filled one time nodes bottom clean block one contains valid nodes dirty block contains least one obsolete node free block contains nodes garbage collector runs background turning dirty blocks free blocks copying valid nodes new block skipping obsolete ones done erases dirty block tags special marker designating free block prevent confusion power lost erase operation make wear-levelling even prevent erasures concentrated mostly-static file systems garbage collector occasionally also consume clean blocks due log-structured design jffs2 disadvantages include following
node20:Wikipedia entry. Entry name: History_of_RISC_OS. Entry content: history risc os risc os computer operating system developed acorn computers arm-based acorn archimedes range originally released 1987 soon followed next version became completed made available april 1989 released earliest version a5000 1991 contained series new features 1996 risc os shipped 500,000 systems. released riscos ltd rol july 1999 based continued development rol march 1999 licensed rights risc os element 14 renamed acorn eventually new owner pace micro technology according company 6,400 copies rom sold production ceased mid-2005. launched may 2001 rol subscription scheme allowing users access latest os updates upgrades released soft-loadable rom images separate rom boot os stored loaded boot time shipped may 2002 following november 2002 final release june 2004 rol released rom based month dubbed play risc os gui convention calling three mouse buttons 'select 'menu 'adjust rol sold 500th adjust rom early 2006. released october 2002 castle technology acorn clone iyonix pc separate evolution based upon ncos work done pace set-top boxes october 2006 castle announced source sharing license plan elements shared source initiative ssi managed risc os open ltd rool risc os 5 since released fully free open source apache 2.0 license older longer maintained risc os 6 older not. also announced october 2006 rol next generation stream operating system first product launched name continuation select scheme beta-version available 2007 free download subscribers select scheme april 2009 final release shipped latest release risc os rol shipped december 2009 os designed united kingdom acorn 32-bit arm based acorn archimedes released first version 1987 arthur operating system first public release os arthur 1.20 june 1987 bundled desktop graphical user interface gui mostly comprises assembly language software modules desktop module written features colour-scheme typically described technicolour graphical desktop runs top command-line driven operating system owes much acorn earlier mos operating system bbc micro range 8-bit microcomputers arthur originally conceived intended deliver similar functionality operating system bbc master series computers mos reaction fact advanced operating system research project arx would ready time archimedes arthur project team led paul fellows given five months develop entirely ground up—with directive make like bbc micro intended stop-gap operating system acorn development arx could completed however latter delayed time eventually dropped became apparent arthur development could extended window manager full desktop environment also small enough run first 512k machines floppy disc whereas arx required 4 megabytes hard drive os development carried using prototype arm-based system connected bbc computer moving onto prototype acorn archimedes a500 arthur multitasking operating system offered support adding application-level cooperative multitasking version operating system released externally internally development desktop window management continued addition cooperative multitasking system invented neil raine used memory management hardware swap-out one task bring another call-and-return wimp-poll call applications obliged make get messages desktop transformed single-application-at-a-time system one could operate full multi-tasking desktop transformation took place version 1.6 though made public released name change arthur risc os version 2.0 software made arthur 1.2 run risc os 2 later underneath desktop original arthur os core api interfaces modular structures remain heart versions titles work however used undocumented features side effects cases apis became deprecated 2011 business insider listed arthur one ten operating systems time forgot next version became completed made available april 1989 risc os rapid development arthur 1.2 failure arx project first release called arthur 2 renamed risc os 2 first sold risc os 2.00 april 1989 operating system implements co-operative multitasking limitations multi-threaded uses adfs file system floppy hard disc access initially ran 512 kb set roms wimp interface offers standard features fixes many bugs hindered arthur lacks virtual memory extensive memory protection applications protected many functions implemented 'modules full access memory time release main advantage os rom booted quickly easy crash impossible permanently break os software high performance due much system written arm assembly language os designed users mind rather os designers organised relatively small kernel defines standard software interface extension modules required conform much system functionality implemented modules coded rom though supplanted evolved versions loaded ram among kernel facilities general mechanism named callback handler allows supervisor module perform process multiplexing facility used module forming part standard editor program provide terminal emulator window console applications approach made possible advanced users implement modules giving risc os ability pre-emptive multitasking slightly updated version risc os 2.01 released later support arm3 processor shipped acorn archimedes a540 acorn r225/r260 introduced number new features including multitasking filer operations applications fonts rom limit number open windows ability move windows screen safe shutdown pinboard arm3 support grouping icon bar icons 128 tasks ability read ms-dos format discs use named hard discs improved configuration also included way multiple windows change settings risc os 3.00 released earliest version a5000 1991 almost four times size risc os 2 runs 2 mb rom improves multitasking also places popular base applications rom risc os 3.00 several bugs replaced risc os 3.1 months later upgraded roms supplied cost postage risc os 3.1 released later sold built a3010 a3020 a4000 a4 later a5000 models also made available replacement roms a5000 earlier archimedes machines last risc os version suitable machines three variants released risc os 3.10 base version risc os 3.11 included slight update fixes serial port issues risc os 3.19 german translation risc os 3.50 sold 1994 first risc pcs due different hardware architecture risc pc including arm 6 processor 16- 24-bit colour different io chip iomd risc os 3.50 made available older archimedes series arm2 3 machines risc os 3.5 somewhat shoehorned 2 mb footprint moved rom applications risc os 3.1 onto hard drive proved unpopular later moved back rom version introduced issues backward compatibility particularly games risc os 3.60 followed 1995 os features much improved hard disk access networking enhanced include tcp/ip standard addition acorn existing proprietary econet system hardware support also improved risc pcs could use arm7 processors acorn a7000 machine arm7500 processor also supported risc os 3.6 twice size risc os 3.5 shipping 4 mb two rom chips risc os 3.70 released 1996 primary changes os support strongarm processor made available upgrade risc pc required extensive code changes due strongarm split data instruction cache harvard architecture 32-bit interrupt modes risc os 3.71 small update released support hardware acorn a7000+ arm7500fe processor fe offered hardware support floating point mathematics usually emulated one risc os software modules risc os 3.60 also formed foundation ncos shipped acorn netchannel ncs acorn officially halted work areas except set-top boxes january 1999 company renamed element 14 14th element periodic table silicon new goal become purely silicon design business like previous successful spin arm acorn 1990 risc os development halted development os 4.0 riscpc 2 phoebe 2100 whose completion also cancelled beta version os 3.8 ursula original riscpc previously released developers project code names phoebe hardware ursula software chandler graphics processor chip taken names characters tv series friends phoebe ursula twin sisters series led number rescue efforts try keep acorn desktop computer business alive acorn held discussions many interested parties eventually agreed exclusively licence risc os riscos ltd formed consortium dealers developers end-users pace purchased rights use develop ncos also number projects bring advantages risc operating system platforms creation rox desktop provide risc os-like interface unix linux systems separate work pace resulted code fork continued subsequent licensing agreement castle technology causing much community debate time debate remains ongoing 2011 march 1999 new company called riscos ltd founded licensed rights risc os element 14 eventually new owner pace micro technology continued development os 3.8 releasing risc os 4 july 1999 whilst hardware support phoebe needed core improvements risc os 3.80 could finished released included according company 6,400 copies risc os 4.02 rom sold production ceased mid-2005 1999 2000 riscos ltd also released versions risc os 4 support several additional hardware platforms microdigital mico microdigital omega riscstation r7500 castle kinetic riscpc 2003 version risc os 4 released support millipede graphics alphalock podule risc os 4 also available various hardware emulators operating systems september 2003 virtualacorn released commercial emulator virtualrpc included copy risc os 4.02 december 2008 riscos ltd made 4.02 available non-commercial emulators £5 product called virtually free may 2001 company launched risc os select subscription scheme allowing users access latest os updates upgrades released soft-loadable rom images separate rom boot os stored loaded boot time providing soft-loads physical rom costs eliminated updates able delivered accelerated speed frequency also allowed company subsidise retail price rom releases generally culmination last select upgrades extra minor changes may 2002 final release select 1 shipped included november 2002 final release select 2 shipped included june 2004 final release select 3 shipped included also june 2004 riscos ltd released rom based version 4.39 dubbed risc os adjust name play risc os gui convention calling three mouse buttons 'select 'menu 'adjust riscos ltd sold 500th adjust rom early 2006 features introduced 4.39 include user customization graphical user interface release select scheme made risc os six branding mentioned a9home released 2006 uses version 4.42 adjust 32 developed supports 32-bit addressing modes found later arm architectures october 2006 shortly castle technology announced shared source initiative riscos ltd announced risc os six next generation stream operating system first product launched risc os six name continuation select scheme select 4 beta-version risc os 6 preview 1 select 4i1 available 2007 free download subscribers select scheme present subscribers whose subscription renewed 30 may 2004 since lapsed risc os six brought portability stability internal structure improvements including full 26/32-bit neutrality highly modularised legacy hardware specific features abstracted code separated easier future maintenance development teletext support device interrupt handler software-based graphics operations real-time clock mouse pointer cmos ram support hardware timer support abstracted kernel separate modules legacy components like vidc driver obsolete functionality bbc micro abstracted aif transient utility executable checking introduced also protect rogue software graphics acceleration modules may provided sm501 graphics chip a9home viewfinder agp podule cards april 2008 final release select 4 shipped included select 4 releases initially compatible acorn risc pc a7000 machines riscstation r7500 microdigital omega mico computers officially supported company test machines available requires proprietary software code rights lack detailed technical information microdigital omega also cited another reason support hardware difficult april 2009 final release select 5 shipped included final release risc os riscos ltd select 6i1 shipped december 2009 includes risc os 5 separate evolution castle technology ltd based upon work done pace ncos based set top boxes risc os 5 written support castle iyonix pc acorn-compatible runs intel xscale arm processor although wealth software updated older applications run risc os 5 via emulator called aemulor since armv5 xscale processor support 26-bit addressing modes likewise risc os 5 ported run properly new cpu abstraction graphics hardware interfaces created allow example use standard graphics cards instead acorn vidc chip july 2003 castle technology ltd bought head licence risc os pace micro october 2006 castle technology ltd announced plan release elements risc os 5 source sharing license shared source initiative ssi joint venture castle risc os open limited rool newly formed software development company aims accelerate development encourage uptake os custom dual license released source freely available may modified redistributed without royalty non-commercial use commercial usage incur per-unit license fee castle ssi made phased releases source code starting may 2007 october 2008 enough source released build almost complete iyonix rom image late 2011 possible build complete rom images published sources full source code available tarballs cvs web interface cvs archive addition prebuilt images available stable releases development nightly builds rool maintains shared source tree builds international developer community non-profit basis support encourage development rool castle intend provide risc os consultancy clients requiring embedded arm solutions already major market os ports risc os 5 available a7000/a7000+ riscpc rpcemu omap3 beagleboard derivatives omap4 pandaboard pandaboard es am5728 titanium raspberry pi xscale iyonix october 2018 risc os 5 re-licensed apache 2.0 license
node21:Wikipedia entry. Entry name: MDL_(programming_language). Entry content: mdl programming language mdl datatypes lisp mit design language programming language descendant language lisp initial purpose provide high level language support dynamic modeling group massachusetts institute technology mit project mac initially developed 1971 pdp-10 computer time-sharing operating system named incompatible timesharing system later ran tenex tops-20 bsd aegis initial development team consisted gerald sussman carl hewitt artificial intelligence lab chris reeve bruce daniels david cressey dynamic modeling group later stu galley also dynamic modeling group wrote mdl documentation mdl initially called muddle style self-deprecating humor widely understood appreciated outside project mac early citadels information technology name sanitized mdl mdl provides several enhancements classic lisp supports several built-in data types including lists strings arrays user-defined data types offers multithreaded expression evaluation coroutines variables carry local value within scope global value passing data scopes advanced built-in functions supported interactive debugging mdl programs incremental development reconstruction source programs object programs although mdl obsolete features incorporated later versions lisp gerald sussman went develop scheme language collaboration guy steele later wrote specifications common lisp java carl hewitt already published idea language planner mdl project began subsequent thinking planner reflected lessons learned building mdl planner concepts influenced languages prolog smalltalk smalltalk simula turn influenced hewitt future work actor model largest influence mdl software genre interactive fiction game named zork sometimes called dungeon first written mdl later reeve daniels galley members dynamic modeling went start infocom company produced many early commercial works interactive fiction original source code mainframe environment snippet shown downloaded originally russian mirror syntaxhighlight /syntaxhighlight
node22:Wikipedia entry. Entry name: Transaction_Processing_Facility. Entry content: transaction processing facility transaction processing facility tpf ibm real-time operating system mainframe computers descended ibm system/360 family including zseries system z9 tpf delivers fast high-volume high-throughput transaction processing handling large continuous loads essentially simple transactions across large geographically dispersed networks industrial-strength transaction processing systems notably ibm cics ims tpf specialty extreme volume large numbers concurrent users fast response times example visa credit card transaction processing peak holiday shopping season tpf passenger reservation application pars international version ipars used many airlines one tpf major optional components high performance specialized database facility called tpf database facility tpfdf close cousin tpf transaction monitor alcs developed ibm integrate tpf services common mainframe operating system mvs z/os tpf evolved airlines control program acp free package developed mid-1960s ibm association major north american european airlines 1979 ibm introduced tpf replacement acp — priced software product new name suggests greater scope evolution non-airline related entities tpf traditionally ibm system/370 assembly language environment performance reasons many tpf assembler applications persist however recent versions tpf encourage use c. another programming language called sabretalk born died tpf ibm announced delivery current release tpf dubbed z/tpf v1.1 september 2005 significantly z/tpf adds 64-bit addressing mandates use 64-bit gnu development tools gcc compiler dignus systems/c++ systems/c supported compilers z/tpf dignus compilers offer reduced source code changes moving tpf 4.1 z/tpf current users include sabre reservations visa inc. authorizations american airlines american express authorizations dxc technology shares reservations formerly eds hpes holiday inn central reservations amtrak marriott international travelport galileo apollo worldspan axess japan gds citibank air canada trenitalia reservations delta air lines reservations operations japan airlines tpf capable running multiprocessor systems one cpu within lpar cpus referred instruction streams simply i-streams running lpar one i-stream tpf said running tightly coupled tpf adheres smp concepts concept numa-based distinctions memory addresses exist depth cpu ready list measured incoming transaction received queued i-stream lowest demand thus maintaining continuous load balancing among available processors cases loosely coupled configurations populated multiprocessor cpcs central processing complex i.e physical machine packaged one system cabinet smp takes place within cpc described whereas sharing inter-cpc resources takes place described loosely coupled tpf architecture memory except 4kb-sized prefix area shared among i-streams instances memory-resident data must kept separated i-stream programmer typically allocates storage area number subsections equal number i-streams accesses desired i-stream associated area taking base address allocated area adding product i-stream relative number times size subsection tpf capable supporting multiple mainframes size — single i-stream multiple i-stream connecting operating common database currently 32 ibm mainframes may share tpf database system operation would called 32-way loosely coupled simplest loosely coupled system would two ibm mainframes sharing one dasd direct access storage device case control program would equally loaded core program record dasd could potentially accessed either mainframe order serialize accesses data records loosely coupled system practice known record locking must used means one mainframe processor obtains hold record mechanism must prevent processors obtaining hold communicate requesting processors waiting within tightly coupled system easy manage i-streams via use record hold table however lock obtained offboard tpf processor dasd control unit external process must used historically record locking accomplished dasd control unit via rpq known llf limited locking facility later ellf extended llf ellf replaced multipathing lock facility mplf run clustered loosely coupled z/tpf requires either mplf disk control units alternative locking device called coupling facility records absolutely must managed record locking process processor shared tpf record accesses done using record type ordinal defined record type tpf system 'fred gave 100 records ordinals processor shared scheme record type 'fred ordinal 5 would resolve exactly file address dasd — clearly necessitating use record locking mechanism processor shared records tpf system accessed via exactly file address resolve exactly location processor unique record one defined processor expected loosely coupled complex record type 'fred perhaps 100 ordinals however user 2 processors examines file address record type 'fred ordinal 5 resolves note different physical address used tpf general-purpose operating system gpos tpf specialized role process transaction input messages return output messages 1:1 basis extremely high volume short maximum elapsed time limits tpf built-in graphical user interface functionality tpf never offered direct graphical display facilities implement host would considered unnecessary potentially harmful diversion real-time system resources tpf user interface command-line driven simple text display terminals scroll upwards mouse-driven cursors windows icons tpf prime cras computer room agent set — best thought operator console character messages intended mode communications human users work accomplished via use command line similar unix without x several products available connect prime cras provide graphical interface functions tpf operator tpf operations server graphical interfaces end users desired must provided external systems systems perform analysis character content see screen scrape convert message to/from desired graphical form depending context specialized purpose operating system tpf host compiler/assembler text editor implement concept desktop one might expect find gpos tpf application source code commonly stored external systems likewise built offline starting z/tpf 1.1 linux supported build platform executable programs intended z/tpf operation must observe elf format s390x-ibm-linux using tpf requires knowledge command guide since support online command directory man /help facility users might accustomed commands created shipped ibm system administration tpf called functional messages -- commonly referred z-messages prefixed letter z letters reserved customers may write commands tpf implements debugging distributed client-server mode necessary system headless multi-processing nature pausing entire system order trap single task would highly counter-productive debugger packages developed 3rd party vendors took different approaches break/continue operations required tpf host implementing unique communications protocols used traffic human developer running debugger client server-side debug controller well form function debugger program operations client side two examples 3rd party debugger packages step step trace bedford associates cmstpf tpf/gi ztpfgi tpf software inc.. neither package wholly compatible ibm offering ibm debugging client offering packaged ide called ibm tpf toolkit tpf highly optimized permit messages supported network either switched another location routed application specific set programs permit extremely efficient accesses database records historically data tpf system fit fixed record core block sizes 381 1055 4k bytes due part physical record sizes blocks located dasd much overhead saved freeing part operating system breaking large data entities smaller ones file operations reassembling read operations since ibm hardware i/o via use channels channel programs tpf would generate small efficient channel programs i/o — name speed since early days also placed premium size storage media — memory disk tpf applications evolved powerful things using little resource today much limitations removed fact legacy support smaller-than-4k dasd records still used advances made dasd technology read/write 4k record efficient 1055 byte record advances increased capacity device longer premium placed ability pack data smallest model possible tpf also program segments allocated 381 1055 4k byte-sized records different points history segment consisted single record typically comprehensive application requiring perhaps tens even hundreds segments first forty years tpf history segments never link-edited instead relocatable object code direct output assembler laid memory internally self-referential relocatable symbols resolved entire image written file later loading system created challenging programming environment segments related one another could directly address control transfer implemented enter/back system service acp/tpf earliest days circa 1965 memory space severely limited gave rise distinction file-resident core-resident programs -- frequently used application programs written memory never removed core-residency rest stored file read demand backing memory buffers released post-execution introduction c language tpf version 3.0 first implemented conformant segment conventions including absence linkage editing scheme quickly demonstrated impractical anything simplest c programs tpf 4.1 truly fully linked load modules introduced tpf compiled z/os c/c++ compiler using tpf-specific header files linked iewl resulting z/os-conformant load module manner could considered traditional tpf segment tpf loader extended read z/os-unique load module file format lay file-resident load modules sections memory meanwhile assembly language programs remained confined tpf segment model creating obvious disparity applications written assembler written higher level languages hll z/tpf 1.1 source language types conceptually unified fully link-edited conform elf specification segment concept became obsolete meaning program written source language -- including assembler -- may size furthermore external references became possible separate source code programs segments could directly linked together shared object value point critical legacy applications benefit improved efficiency simple repackaging -- calls made members single shared object module much shorter pathlength run time compared calling system enter/back service members shared object may share writeable data regions directly thanks copy-on-write functionality also introduced z/tpf 1.1 coincidentally reinforces tpf reentrancy requirements concepts file- core- residency also made obsolete due z/tpf design point sought programs resident memory times since z/tpf maintain call stack high-level language programs gave hll programs ability benefit stack-based memory allocation deemed beneficial extend call stack assembly language programs optional basis ease memory pressure ease recursive programming z/tpf executable programs packaged elf shared objects historically step previous core blocks— memory— also 381 1055 4 k bytes size since memory blocks size overhead obtaining memory found systems discarded programmer merely needed decide size block would fit need ask tpf would maintain list blocks use simply hand first block available list physical memory divided sections reserved size 1055 byte block always came section returned overhead needed add address appropriate physical block table list compaction data collection required applications got advanced demands memory increased c became available memory chunks indeterminate large size required gave rise use heap storage memory management routines ease overhead tpf memory broken frames— 4 kb size 1 mb z/tpf application needs certain number bytes number contiguous frames required fill need granted
node23:Wikipedia entry. Entry name: Mailsite. Entry content: mailsite mailsite commercial mail server calendar software contact manager collaborative software developed rockliffe systems mailsite one first mail servers run windows nt using internet standards version 1.2 released 1996 mailsite continual development since 1996 version 10 released 2013 mailsite runs single windows server cluster windows server computers mailsite works natively microsoft outlook versions 2007 2013 mail calendar contacts without requiring outlook plug-ins mailsite includes exchange activesync eas server synchronizing mail calendar contacts mobile devices mailsite also works internet standards-based mail clients mozilla thunderbird mailsite sold three package configurations different markets mailsite se single-server package small medium enterprises mailsite le multi-server package large enterprises mailsite sp provides advanced multi-server clustering service providers hosting companies internet service providers telecommunication companies mailsite provides comprehensive set features groupware mailsite provides native support mail calendar contact sync clients mail
node24:Wikipedia entry. Entry name: Scuttle_(software). Entry content: scuttle software scuttle php/mysql-based open source social bookmarking application contains code php-based projects drupal jquery scuttle offers functionality social bookmarking websites tagging rss multiple languages security settings public private also supports bookmark imports delicious delicious api means programs widgets might also work backups available via xml mysql backend lacks administrator backend although one commercially available called scuttle plus advanced semantic scuttle provides anti-spam protection structured tags collaborative tag description
node25:Wikipedia entry. Entry name: OpenLisp. Entry content: openlisp openlisp programming language lisp family developed christian jullien conforms international standard islisp published jointly international organization standardization iso international electrotechnical commission iec iso/iec 13816:1997 e revised iso/iec 13816:2007 e written programming languages c lisp runs common operating systems openlisp designated islisp implementation also contains many common lisp-compatible extensions hashtable readtable package defstruct sequences rational numbers libraries network socket regular expression xml portable operating system interface posix sql lightweight directory access protocol ldap openlisp includes interpreter associated read–eval–print loop repl lisp assembly program lap backend compiler language c. main goal lisp version implement fully compliant islisp system launched codice_1 flag strictly restricted iso/iec 13816:2007 e specification secondary goal provide complete embeddable lisp system linkable c/c++ java via java native interface jni callback mechanism used communicate external program goals usable scripting language glue language produce standalone program executables despite name openlisp proprietary software interpreter available free charge noncommercial use openlisp mainly runs console mode codice_2 microsoft windows terminal emulator unix-based systems alternate solutions include running openlisp emacs via setting emacs codice_3 using integrated development environment ide supports openlisp syntax lispide daansystems natively internally openlisp uses virtual memory allocate extend objects automatically small objects type allocated using bibop big bag pages memory organization large objects use proxy point real object lisp heap conservative garbage collection mark sweep coalescing heap sweep phase configured use threads openlisp uses tagged architecture 4 bits tag 32-bit 5 bits tag 64-bit fast type checking small integer float symbol cons string vector small integers 28 bits 32-bit 59 bits 64-bit unboxed large 32/64-bit integers boxed required islisp arbitrary-precision arithmetic bignums also implemented characters hence strings either 8-bit ansi ebcdic 16/32-bit unicode support enabled lisp kernel native interpreter basic libraries hand coded language c lap intermediate language produced compiler translated c c backend code generator 1988 first motive behind openlisp implement lisp subset extend emact emacs clone islisp became obvious choice quickly development ensued openlisp claims extremely portable runs many operating systems including windows unix posix based linux macos freebsd openbsd netbsd solaris hp-ux aix cygwin qnx dos os/2 pocket pc openvms z/os official website download section contains 50 different versions openlisp interact modules written c using foreign function interface ffi islisp streams extended support network socket codice_4 directory includes samples hypertext transfer protocol http javascript object notation json post office protocol 3 pop3 simple mail transfer protocol smtp telnet rss simplified extensible markup language xml reader convert xml lisp basic sql module used mysql odbc sqlite postgresql comma-separated values csv module read write csv files developer tools include data logging pretty-printer profiler design contract programming unit tests well known algorithms available codice_5 directory dantzig simplex algorithm dijkstra algorithm ford–fulkerson algorithm modules shipped using bsd licenses prefix open refers open systems open-source model name chosen 1993 replace mlisp internal code name already used gosling emacs successor mocklisp openlisp programming language different openlisp project begun 1997 implement locator/identifier separation protocol section describes compiler transforms lisp code c. fibonacci number function classic definition used benchmarks efficient way compute codice_6 lisp compiler translates lisp source code following intermediate code followed peephole optimization pass uses intermediate format analyze optimize instructions optimization final lap code finally c code generator uses lap code translate instructions c. static pointer oldefcompiled1 olfib_00 p1 _l003 _l004 openlisp accepts lines unlimited length recommended style line text code 80 characters per line chosen sdf public access unix system nonprofit public access unix systems internet one programming languages available online bricsys uses openlisp implement autolisp bricscad computer-aided design cad system meva entirely written openlisp università degli studi di palermo uses openlisp teach lisp
node26:Wikipedia entry. Entry name: Multimedia_database. Entry content: multimedia database multimedia database mmdb collection related multimedia data multimedia data include one primary media data types text images graphic objects including drawings sketches illustrations animation sequences audio video multimedia database management system mmdbms framework manages different types data potentially represented wide diversity formats wide array media sources provides support multimedia data types facilitate creation storage access query control multimedia database multimedia database mmdb hosts one multimedia data types i.e text images graphic objects audio video animation sequences data types broadly categorized three classes additionally multimedia database mmdb needs manage additional information pertaining actual multimedia data information following last three types called metadata describe several different aspects media data media keyword data media feature data used indices searching purpose media format data used present retrieved information like traditional databases multimedia databases address following requirements multimedia databases ability uniformly query data media data textual data represented different formats ability simultaneously query different media sources conduct classical database operations across query support ability retrieve media objects local storage device good manner storage support ability take response generated query develop presentation response terms audio-visual media ability deliver presentation presentation delivery support examples multimedia database application areas",wikics,nc
"Classify the wikipedia page represented by node11 using its subgraph data (text attributes and connections) as follows.

node0: Dependency theory in database theory studies functional and multivalued dependencies to optimize data integrity through algorithms like the chase.  
node1: Kpatch enables live Linux kernel patching without reboots using ftrace, enhancing system uptime via function-level replacements and security updates.  
node2: Identity-based security uses user identities and attributes to control access across devices/networks, preventing spoofing and enabling fine-grained policies.  
node3: Windows Mail is an email client for Windows 8/10, offering IMAP/POP support and Microsoft service integration, succeeding Outlook Express with a modern UI but no newsgroups.  
node4: Access control manages physical/digital access via credentials, multi-factor authentication, and models like ACLs, addressing risks like tailgating and unauthorized entry.  
node5: Databases organize data using DBMS, with relational models and SQL dominant; evolved from early navigational systems to include NoSQL and ACID properties for storage/retrieval.
node6: Windows 10 Mobile's version history, including release dates, updates (Threshold 2, Redstone series), end-of-support timeline, and development halt post-2017.  
node7: TACACS protocols (TACACS+, XTACACS) for network authentication, their evolution, port usage, security features, and comparison with RADIUS.  
node8: Kernel's role in OS management, memory/process control, security isolation, and design types (monolithic vs. microkernel) for system efficiency and stability.  
node9: Authentication methods (knowledge, possession, biometrics), multifactor security, and applications in verifying digital/physical identities against fraud.  
node10: MacPup OS based on Puppy Linux, featuring a Mac-like interface, Enlightenment WM, Firefox, and lightweight live-ram functionality.  
node11: E-commerce identity verification processes, including authentication factors, three-step access control (ID, auth, authz), and trust mechanisms for secure transactions.  
node12: Unified Access Management (UAM) centralizes identity management across hybrid cloud/on-premise systems, enabling SSO, MFA, and streamlined access control.
node13: South African government implements biometric systems to reduce fraud, enhance security, and improve service delivery across departments like agriculture and correctional services.  
node14: Windows 8 introduces touchscreen optimization, Start Screen, Metro-style apps, cloud integration, and security features like NFC, while facing criticism for usability issues.  
node15: Authorization defines access rights/privileges for resources via policies, enforced through access control to ensure security, adhering to least privilege principles.  
node16: CUPS is an open-source Unix printing system using IPP, supporting diverse protocols/drivers, enabling network printing, and integrated into Linux/macOS since 2002.
node17: Email authentication methods like SPF, DKIM, DMARC validate email origins, combat phishing/spam via domain and message validation.  
node18: Timeline of DOS operating systems from 1973 to 2016, detailing x86-based DOS releases and their evolution.  
node19: Firewalls monitor network traffic using filters, proxies, or NAT to block threats, categorized as network or host-based security systems.  
node20: Microsoft CryptoAPI enables Windows crypto services via CSPs, evolved to CNG for broader algorithms and security updates.  
node21: Smart cards integrate circuits for secure ID, finance, and access control, featuring encryption, biometrics, and applications like eID and transit systems.
node22: Biometrics uses body traits (physiological/behavioral) for authentication, addressing security, privacy, and multimodal system challenges in identification and surveillance.  
node23: EXist is an open-source XML/JSON NoSQL database using XQuery, supporting document storage and W3C standards with version updates since 2000.  
node24: IncludeOS is a minimalist unikernel OS for cloud/IoT, enabling C++ apps to run lightweight, fast-booting systems with minimal resource use.  
node25: Multi-factor authentication combines knowledge, possession, and inherence factors (e.g., passwords + OTPs) to enhance security, though vulnerable to phishing and requiring balanced usability.  
node26: Windows Mixed Reality offers AR/VR via HoloLens and HMDs, integrating spatial sound and motion tracking for immersive experiences on Windows 10.

the connection relationship among the nodes mentioned:
 <node0, node5>,<node1, node8>,<node1, node24>,<node2, node4>,<node2, node9>,<node2, node19>,<node3, node6>,<node3, node14>,<node3, node26>,<node4, node5>,<node4, node8>,<node4, node9>,<node4, node11>,<node4, node13>,<node4, node15>,<node4, node16>,<node4, node21>,<node4, node22>,<node4, node25>,<node5, node18>,<node5, node22>,<node5, node23>,<node6, node14>,<node6, node26>,<node7, node9>,<node8, node10>,<node8, node24>,<node9, node11>,<node9, node12>,<node9, node15>,<node9, node16>,<node9, node17>,<node9, node19>,<node9, node20>,<node9, node21>,<node9, node22>,<node9, node25>,<node11, node15>,<node11, node21>,<node11, node22>,<node11, node25>,<node12, node15>,<node12, node25>,<node13, node22>,<node14, node21>,<node15, node19>,<node15, node21>,<node15, node25>,<node19, node25>,<node20, node21>,<node20, node26>,<node21, node22>,<node21, node25>,<node22, node25>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",computer security,"node0: Dependency theory in database theory studies functional and multivalued dependencies to optimize data integrity through algorithms like the chase.  
node1: Kpatch enables live Linux kernel patching without reboots using ftrace, enhancing system uptime via function-level replacements and security updates.  
node2: Identity-based security uses user identities and attributes to control access across devices/networks, preventing spoofing and enabling fine-grained policies.  
node3: Windows Mail is an email client for Windows 8/10, offering IMAP/POP support and Microsoft service integration, succeeding Outlook Express with a modern UI but no newsgroups.  
node4: Access control manages physical/digital access via credentials, multi-factor authentication, and models like ACLs, addressing risks like tailgating and unauthorized entry.  
node5: Databases organize data using DBMS, with relational models and SQL dominant; evolved from early navigational systems to include NoSQL and ACID properties for storage/retrieval.
node6: Windows 10 Mobile's version history, including release dates, updates (Threshold 2, Redstone series), end-of-support timeline, and development halt post-2017.  
node7: TACACS protocols (TACACS+, XTACACS) for network authentication, their evolution, port usage, security features, and comparison with RADIUS.  
node8: Kernel's role in OS management, memory/process control, security isolation, and design types (monolithic vs. microkernel) for system efficiency and stability.  
node9: Authentication methods (knowledge, possession, biometrics), multifactor security, and applications in verifying digital/physical identities against fraud.  
node10: MacPup OS based on Puppy Linux, featuring a Mac-like interface, Enlightenment WM, Firefox, and lightweight live-ram functionality.  
node11: E-commerce identity verification processes, including authentication factors, three-step access control (ID, auth, authz), and trust mechanisms for secure transactions.  
node12: Unified Access Management (UAM) centralizes identity management across hybrid cloud/on-premise systems, enabling SSO, MFA, and streamlined access control.
node13: South African government implements biometric systems to reduce fraud, enhance security, and improve service delivery across departments like agriculture and correctional services.  
node14: Windows 8 introduces touchscreen optimization, Start Screen, Metro-style apps, cloud integration, and security features like NFC, while facing criticism for usability issues.  
node15: Authorization defines access rights/privileges for resources via policies, enforced through access control to ensure security, adhering to least privilege principles.  
node16: CUPS is an open-source Unix printing system using IPP, supporting diverse protocols/drivers, enabling network printing, and integrated into Linux/macOS since 2002.
node17: Email authentication methods like SPF, DKIM, DMARC validate email origins, combat phishing/spam via domain and message validation.  
node18: Timeline of DOS operating systems from 1973 to 2016, detailing x86-based DOS releases and their evolution.  
node19: Firewalls monitor network traffic using filters, proxies, or NAT to block threats, categorized as network or host-based security systems.  
node20: Microsoft CryptoAPI enables Windows crypto services via CSPs, evolved to CNG for broader algorithms and security updates.  
node21: Smart cards integrate circuits for secure ID, finance, and access control, featuring encryption, biometrics, and applications like eID and transit systems.
node22: Biometrics uses body traits (physiological/behavioral) for authentication, addressing security, privacy, and multimodal system challenges in identification and surveillance.  
node23: EXist is an open-source XML/JSON NoSQL database using XQuery, supporting document storage and W3C standards with version updates since 2000.  
node24: IncludeOS is a minimalist unikernel OS for cloud/IoT, enabling C++ apps to run lightweight, fast-booting systems with minimal resource use.  
node25: Multi-factor authentication combines knowledge, possession, and inherence factors (e.g., passwords + OTPs) to enhance security, though vulnerable to phishing and requiring balanced usability.  
node26: Windows Mixed Reality offers AR/VR via HoloLens and HMDs, integrating spatial sound and motion tracking for immersive experiences on Windows 10.","node0:Wikipedia entry. Entry name: Dependency_theory_(database_theory). Entry content: dependency theory database theory dependency theory subfield database theory studies implication optimization problems related logical constraints commonly called dependencies databases best known class dependencies functional dependencies form foundation keys database relations another important class dependencies multivalued dependencies key algorithm dependency theory chase much theory devoted study
node1:Wikipedia entry. Entry name: Kpatch. Entry content: kpatch kpatch feature linux kernel implements live patching running kernel allows kernel patches applied kernel still running avoiding need rebooting system new kernel contains desired patches kpatch aims maximize system uptime availability time kpatch allows kernel-related security updates applied without deferring scheduled downtimes internally kpatch allows entire functions running kernel replaced patched versions safely stopping running processes live patching performed kpatch developed red hat source code licensed terms gnu general public license version 2 gplv2 may 2014 kpatch submitted inclusion linux kernel mainline minimalistic foundations live patching merged linux kernel mainline kernel version 4.0 released april 12 2015 internally kpatch consists two parts core kernel module executes live patching mechanism altering kernel inner workings set userspace utilities prepares individual hot patch kernel modules source diffs manages application live kernel patching performed function level meaning kpatch replace entire functions running kernel patched versions using facilities provided ftrace route around old versions functions way hot patches also easily undone changes kernel internal data structures possible however security patches one natural candidates used kpatch rarely contain changes kernel data structures kpatch ensures hot patches applied atomically safely stopping running processes hot patch applied ensuring none stopped processes running inside functions patched approach simplifies whole live patching mechanism prevents certain issues associated way data structures used original patched versions functions downside approach also leaves possibility hot patch fail introduces small amount latency required stopping running processes red hat announced publicly released kpatch february 2014 terms gnu general public license version 2 gplv2 shortly suse released live kernel patching implementation called kgraft kpatch merged linux kernel mainline submitted inclusion may 2014. kpatch included red hat enterprise linux 7.0 released june 10 2014 technology preview minimalistic foundations live kernel patching merged linux kernel mainline kernel version 4.0 released april 12 2015 foundations based primarily kernel ftrace functionality form common core capable supporting hot patching kpatch kgraft providing application programming interface api kernel modules contain hot patches application binary interface abi userspace management utilities however common core included linux kernel 4.0 supports x86 architecture provide mechanisms ensuring function-level consistency hot patches applied since april 2015 ongoing work porting kpatch common live patching core provided linux kernel mainline however implementation required function-level consistency mechanisms delayed call stacks provided linux kernel may unreliable situations involve assembly code without proper stack frames result porting work remains progress attempt improve reliability kernel call stacks specialized sanity-check userspace utility also developed
node2:Wikipedia entry. Entry name: Identity-based_security. Entry content: identity-based security identity-based security approach control access digital product service based authenticated identity individual allows organizations grant access specific users access variety digital services using credentials ensuring accurate match users entitled actually receive also permitting access constraints company device location application type attributes underpinning identity-based security approach identity-based access control ibac identity-based licensing concept nist defines identity-based security policies policies based identities and/or attributes object system resource accessed subject user group users process device requesting access advantages identity-based security approach include ability exercise fine-grained control allowed use services functions users perform device-agnostic offering possibility enforce access control policy across variety devices smartphones tablets pcs identity-based security network security approach put forward cyberoam includes security components provides visibility control user activity particular network offers network security system includes user human identity part firewall rule matching criteria concept includes treating user identity eighth layer also known human layer network protocol stack thus attaching user identity security authenticating authorizing auditing network takes different step conventional security appliances bind security ip-addresses approach allows organisations create security policies align users groups rather ip addresses ultimately gives precise control access network—and access identity-based security prevents systems address spoofing attacks combining point encryption authentication access control single unit
node3:Wikipedia entry. Entry name: Mail_(Windows). Entry content: mail windows mail email newsgroup client developed microsoft included windows 8 8.1 10 operating systems main function mail sending receiving email successor outlook express either included released windows 9x family older versions windows nt family windows mail announced microsoft successor outlook express october 10 2005 via community website channel 9 initial version featured fundamental changes new user interface much way new features origins windows mail traced back pre-release version outlook express 7 included early builds windows vista known codename longhorn version outlook express introduced various changes user interface relied winfs management storage contacts data retaining support post office protocol pop internet message access protocol imap email protocols outlook express 7 dropped support http omission inherited windows mail windows mail user interface changed match look feel windows vista interface features imported microsoft outlook 2003 including right-hand reading pane microsoft help groups added preconfigured link microsoft newsgroups additional functionality layered top standard newsgroup functionality individual threads marked question answered question postings may rated well windows mail uses ipv6 domain name servers resolves ipv6 mail messages stored individual files instead single database file transactional index database based extensible storage engine enables real-time searching improves stability reliability stored data case corruption indices rebuilt mail files account setup information longer stored windows registry instead stored alongside mail making possible copy entire windows mail configuration mail store another machine single step bayesian junk-mail filtering top-level domain blocking encoding blocking added phishing filter incorporated well protecting users web sites identified malicious removed features windows mail include windows mail documented application programming interface api based component object model com predecessor outlook express also featured api undocumented except simple mapi messaging functionality windows vista supports american english french german spanish international sort windows mail absent windows 7 time microsoft intended spin several windows components independently developed apps introduced part windows essentials software suite thus windows mail omitted favor windows live mail made available windows xp vista 7 policy eventually reverted successors windows essentials apps gradually reintegrated windows 8 8.1 10 components windows live mail succeeded mail mail added windows 8 one many apps written run full-screen snapped per microsoft metro design language philosophy n't share code windows mail windows live mail lacks newsgroups support windows store app mail included app container calendar people three uninstalled reinstalled separately mail windows 8 comes preset server configurations popular email services outlook.com exchange gmail aol mail yahoo mail imap accounts configured directly support pop even though app run windows desktop multi-window support like many microsoft apps introduced windows 8 many features hidden charms initially hidden toolbar bottom screen revealed right-clicking users subscribed microsoft account sync configurations mail across different computers mail preset server configurations outlook.com exchange gmail icloud yahoo mail aol mail custom imap accounts still added pop support returned mail calendar still windows store apps app container updated together third sibling people moved container standalone app users set windows 10 mail use system theme choose custom accent color background image light/dark preference multi-window support open email messages new window emails listed mail jumplist mail uses settings panel email sorting tools second pane toolbar viewing pane like vista version mail version important controls readily visible accounts grouped relabeled folders created within app existing folders edited deleted mail default folders possible use outlook.com aliases mentions mail like microsoft outlook mail allows users set quick actions delete set flag archive respond messages system notifications swipe gestures mail rss reader ability customize default type font microsoft announced plans add features microsoft outlook outlook express mail uses invoke search – contrary microsoft products use
node4:Wikipedia entry. Entry name: Access_control. Entry content: access control fields physical security information security access control ac selective restriction access place resource act accessing may mean consuming entering using permission access resource called authorization locks login credentials two analogous mechanisms access control geographical access control may enforced personnel e.g. border guard bouncer ticket checker device turnstile may fences avoid circumventing access control alternative access control strict sense physically controlling access system checking authorized presence see e.g ticket controller transportation variant exit control e.g shop checkout country term access control refers practice restricting entrance property building room authorized persons physical access control achieved human guard bouncer receptionist mechanical means locks keys technological means access control systems like mantrap within environments physical key management may also employed means managing monitoring access mechanically keyed areas access certain small assets physical access control matter access control system determines allowed enter exit allowed exit enter allowed enter exit historically partially accomplished keys locks door locked someone key enter door depending lock configured mechanical locks keys allow restriction key holder specific times dates mechanical locks keys provide records key used specific door keys easily copied transferred unauthorized person mechanical key lost key holder longer authorized use protected area locks must re-keyed electronic access control uses computers solve limitations mechanical locks keys wide range credentials used replace mechanical keys electronic access control system grants access based credential presented access granted door unlocked predetermined time transaction recorded access refused door remains locked attempted access recorded system also monitor door alarm door forced open held open long unlocked credential presented reader reader sends credential information usually number control panel highly reliable processor control panel compares credential number access control list grants denies presented request sends transaction log database access denied based access control list door remains locked match credential access control list control panel operates relay turn unlocks door control panel also ignores door open signal prevent alarm often reader provides feedback flashing red led access denied flashing green led access granted description illustrates single factor transaction credentials passed around thus subverting access control list example alice access rights server room bob alice either gives bob credential bob takes access server room prevent two-factor authentication used two factor transaction presented credential second factor needed access granted another factor pin second credential operator intervention biometric input three types factors authenticating information passwords common means verifying user identity access given information systems addition fourth factor authentication recognized someone know whereby another person knows provide human element authentication situations systems set allow scenarios example user may password forgotten smart card scenario user known designated cohorts cohorts may provide smart card password combination extant factor user question thus provide two factors user missing credential giving three factors overall allow access credential physical/tangible object piece knowledge facet person physical enables individual access given physical facility computer-based information system typically credentials something person knows number pin something access badge something biometric feature combination items known multi-factor authentication typical credential access card key-fob newer software also turn users smartphones access devices many card technologies including magnetic stripe bar code wiegand 125 khz proximity 26-bit card-swipe contact smart cards contactless smart cards also available key-fobs compact id cards attach key ring biometric technologies include fingerprint facial recognition iris recognition retinal scan voice hand geometry built-in biometric technologies found newer smartphones also used credentials conjunction access software running mobile devices addition older traditional card access technologies newer technologies near field communication nfc bluetooth low energy also potential communicate user credentials readers system building access access control point door turnstile parking gate elevator physical barriers granting access electronically rely users credentials biometric fingerprints face card readers pin typically access point door electronic advanced access control door contain several elements basic stand-alone electric lock lock unlocked operator switch automate operator intervention replaced reader reader could keypad code entered could card reader could biometric reader readers usually make access decision send card number access control panel verifies number access list monitor door position magnetic door switch used concept door switch unlike refrigerators car doors generally entry controlled exit uncontrolled cases exit also controlled second reader used opposite side door cases exit controlled free exit device called request-to-exit rex used request-to-exit devices push-button motion detector button pushed motion detector detects motion door door alarm temporarily ignored door opened exiting door without electrically unlock door called mechanical free egress important safety feature cases lock must electrically unlocked exit request-to-exit device also unlocks door access control decisions made comparing credential access control list look-up done host server access control panel reader development access control systems seen steady push look-up central host edge system reader predominant topology circa 2009 hub spoke control panel hub readers spokes look-up control functions control panel spokes communicate serial connection usually rs-485 manufactures pushing decision making edge placing controller door controllers ip enabled connect host database using standard networks access control readers may classified functions able perform readers may additional features lcd function buttons data collection purposes i.e clock-in/clock-out events attendance reports camera/speaker/microphone intercom smart card read/write support access control readers may also classified type identification technology 1 serial controllers controllers connected host pc via serial rs-485 communication line via 20ma current loop older systems external rs-232/485 converters internal rs-485 cards installed standard pcs rs-485 communication ports advantages disadvantages 2 serial main sub-controllers door hardware connected sub-controllers a.k.a door controllers door interfaces sub-controllers usually make access decisions instead forward requests main controllers main controllers usually support 16 32 sub-controllers advantages disadvantages 3 serial main controllers intelligent readers door hardware connected directly intelligent semi-intelligent readers readers usually make access decisions forward requests main controller connection main controller unavailable readers use internal database make access decisions record events semi-intelligent reader database function without main controller used areas require high security main controllers usually support 16 64 readers advantages disadvantages ones listed second paragraph 4 serial controllers terminal servers spite rapid development increasing use computer networks access control manufacturers remained conservative rush introduce network-enabled products pressed solutions network connectivity many chose option requiring less efforts addition terminal server device converts serial data transmission via lan wan advantages disadvantages rs-485-related advantages disadvantages also apply 5 network-enabled main controllers topology nearly described second third paragraphs advantages disadvantages apply on-board network interface offers couple valuable improvements transmission configuration user data main controllers faster may done parallel makes system responsive interrupt normal operations special hardware required order achieve redundant host pc setup case primary host pc fails secondary host pc may start polling network controllers disadvantages introduced terminal servers listed fourth paragraph also eliminated 6 ip controllers controllers connected host pc via ethernet lan wan advantages disadvantages 7 ip readers readers connected host pc via ethernet lan wan advantages disadvantages advantages disadvantages ip controllers apply ip readers well common security risk intrusion access control system simply following legitimate user door referred tailgating often legitimate user hold door intruder risk minimized security awareness training user population active means turnstiles high security applications risk minimized using sally port sometimes called security vestibule mantrap operator intervention required presumably assure valid identification second common risk levering door open relatively difficult properly secured doors strikes high holding force magnetic locks fully implemented access control systems include forced door monitoring alarms vary effectiveness usually failing high false positive alarms poor database configuration lack active intrusion monitoring newer access control systems incorporate type door prop alarm inform system administrators door left open longer specified length time third common security risk natural disasters order mitigate risk natural disasters structure building quality network computer equipment vital organizational perspective leadership need adopt implement hazards plan incident response plan highlights incident plan determined national incident management system must include pre-incident planning incident actions disaster recovery action review similar levering crashing cheap partition walls shared tenant spaces divisional wall vulnerability vulnerability along lines breaking sidelights spoofing locking hardware fairly simple elegant levering strong magnet operate solenoid controlling bolts electric locking hardware motor locks prevalent europe us also susceptible attack using doughnut shaped magnet also possible manipulate power lock either removing adding current although access control systems incorporate battery back-up systems locks almost always located secure side door access cards proven vulnerable sophisticated attacks enterprising hackers built portable readers capture card number user proximity card hacker simply walks user reads card presents number reader securing door possible card numbers sent clear encryption used counter dual authentication methods card plus pin always used many access control credentials unique serial numbers programmed sequential order manufacturing known sequential attack intruder credential used system simply increment decrement serial number find credential currently authorized system ordering credentials random unique serial numbers recommended counter threat finally electric locking hardware still mechanical keys fail-over mechanical key locks vulnerable bumping need know principle enforced user access controls authorization procedures objective ensure authorized individuals gain access information systems necessary undertake duties computer security general access control includes authentication authorization audit narrow definition access control would cover access approval whereby system makes decision grant reject access request already authenticated subject based subject authorized access authentication access control often combined single operation access approved based successful authentication based anonymous access token authentication methods tokens include passwords biometric scans physical keys electronic keys devices hidden paths social barriers monitoring humans automated systems access-control model entities perform actions system called subjects entities representing resources access may need controlled called objects see also access control matrix subjects objects considered software entities rather human users human users effect system via software entities control although systems equate subjects user ids processes started user default authority level control fine-grained enough satisfy principle least privilege arguably responsible prevalence malware systems see computer insecurity models example object-capability model software entity potentially act subject object access-control models tend fall one two classes based capabilities based access control lists acls capability-based acl-based models mechanisms allow access rights granted members group subjects often group modeled subject access control systems provide essential services authorization identification authentication access approval accountability access accounts enforced many types controls telecommunication term access control defined u.s. federal standard 1037c following meanings definition depends several technical terms federal standard 1037c object-oriented programming languages access control part apparatus achieving encapsulation one four fundamentals object-oriented programming goal establish clear separation interface visible accessible parts class implementation internal representation helper methods also known data hiding ensures exclusive data access class members variables methods protects object integrity preventing corruption client programmer/ client classes rule thumb use restrictive access level data unless compelling reason expose also helps reduce interdependencies classes leading lower coupling fewer regression bugs object-oriented programming access control typically implemented using access modifiers object class although access modifiers may syntactically different languages attempt achieve goal define variables methods visible several programming languages e.g java c++ c ruby use public protected private access modifiers keywords allow programmer establish access levels classes class members data methods exact use programming language varied depending language philosophy similarities differences note ruby private methods always self implicit receiver therefore used current object languages mechanisms override access modifies gain access private components object one example friend class c++ special public member methods accessors aka getters mutator methods often called setters used control changes class variables order prevent unauthorized access data corruption public policy access control restrict access systems authorization track monitor behavior within systems accountability implementation feature using trusted systems security social control
node5:Wikipedia entry. Entry name: Database. Entry content: database database organized collection data generally stored accessed electronically computer system databases complex often developed using formal design modeling techniques database management system dbms software interacts end users applications database capture analyze data dbms software additionally encompasses core facilities provided administer database sum total database dbms associated applications referred database system often term database also used loosely refer dbms database system application associated database computer scientists may classify database-management systems according database models support relational databases became dominant 1980s model data rows columns series tables vast majority use sql writing querying data 2000s non-relational databases became popular referred nosql use different query languages formally database refers set related data way organized access data usually provided database management system dbms consisting integrated set computer software allows users interact one databases provides access data contained database although restrictions may exist limit access particular data dbms provides various functions allow entry storage retrieval large quantities information provides ways manage information organized close relationship term database often used casually refer database dbms used manipulate outside world professional information technology term database often used refer collection related data spreadsheet card index size usage requirements typically necessitate use database management system existing dbmss provide various functions allow management database data classified four main functional groups database dbms conform principles particular database model database system refers collectively database model database management system database physically database servers dedicated computers hold actual databases run dbms related software database servers usually multiprocessor computers generous memory raid disk arrays used stable storage raid used recovery data disks fail hardware database accelerators connected one servers via high-speed channel also used large volume transaction processing environments dbmss found heart database applications dbmss may built around custom multitasking kernel built-in networking support modern dbmss typically rely standard operating system provide functions since dbmss comprise significant market computer storage vendors often take account dbms requirements development plans databases dbmss categorized according database model support relational xml type computer run server cluster mobile phone query language used access database sql xquery internal engineering affects performance scalability resilience security sizes capabilities performance databases respective dbmss grown orders magnitude performance increases enabled technology progress areas processors computer memory computer storage computer networks development database technology divided three eras based data model structure navigational sql/relational post-relational two main early navigational data models hierarchical model codasyl model network model relational model first proposed 1970 edgar f. codd departed tradition insisting applications search data content rather following links relational model employs sets ledger-style tables used different type entity mid-1980s computing hardware become powerful enough allow wide deployment relational systems dbmss plus applications early 1990s however relational systems dominated large-scale data processing applications remain dominant ibm db2 oracle mysql microsoft sql server searched dbms dominant database language standardised sql relational model influenced database languages data models object databases developed 1980s overcome inconvenience object-relational impedance mismatch led coining term post-relational also development hybrid object-relational databases next generation post-relational databases late 2000s became known nosql databases introducing fast key-value stores document-oriented databases competing next generation known newsql databases attempted new implementations retained relational/sql model aiming match high performance nosql compared commercially available relational dbmss introduction term database coincided availability direct-access storage disks drums mid-1960s onwards term represented contrast tape-based systems past allowing shared interactive use rather daily batch processing oxford english dictionary cites 1962 report system development corporation california first use term data-base specific technical sense computers grew speed capability number general-purpose database systems emerged mid-1960s number systems come commercial use interest standard began grow charles bachman author one product integrated data store ids founded database task group within codasyl group responsible creation standardization cobol 1971 database task group delivered standard generally became known codasyl approach soon number commercial products based approach entered market codasyl approach relied manual navigation linked data set formed large network applications could find records one three methods later systems added b-trees provide alternate access paths many codasyl databases also added straightforward query language however final tally codasyl complex required significant training effort produce useful applications ibm also dbms 1966 known information management system ims ims development software written apollo program system/360 ims generally similar concept codasyl used strict hierarchy model data navigation instead codasyl network model concepts later became known navigational databases due way data accessed bachman 1973 turing award presentation programmer navigator ims classified ibm hierarchical database idms cincom systems total database classified network databases ims remains use edgar codd worked ibm san jose california one offshoot offices primarily involved development hard disk systems unhappy navigational model codasyl approach notably lack search facility 1970 wrote number papers outlined new approach database construction eventually culminated groundbreaking relational model data large shared data banks paper described new system storing working large databases instead records stored sort linked list free-form records codasyl codd idea use table fixed-length records table used different type entity linked-list system would inefficient storing sparse databases data one record could left empty relational model solved splitting data series normalized tables relations optional elements moved main table would take room needed data may freely inserted deleted edited tables dbms whatever maintenance needed present table view application/user relational model also allowed content database evolve without constant rewriting links pointers relational part comes entities referencing entities known one-to-many relationship like traditional hierarchical model many-to-many relationship like navigational network model thus relational model express hierarchical navigational models well native tabular model allowing pure combined modeling terms three models application requires instance common use database system track information users name login information various addresses phone numbers navigational approach data would placed single record unused items would simply placed database relational approach data would normalized user table address table phone number table instance records would created optional tables address phone numbers actually provided linking information back together key system relational model bit information used key uniquely defining particular record information collected user information stored optional tables would found searching key instance login name user unique addresses phone numbers user would recorded login name key simple re-linking related data back single collection something traditional computer languages designed navigational approach would require programs loop order collect records relational approach would require loops collect information one record codd suggestions set-oriented language would later spawn ubiquitous sql using branch mathematics known tuple calculus demonstrated system could support operations normal databases inserting updating etc well providing simple system finding returning sets data single operation codd paper picked two people berkeley eugene wong michael stonebraker started project known ingres using funding already allocated geographical database project student programmers produce code beginning 1973 ingres delivered first test products generally ready widespread use 1979 ingres similar system r number ways including use language data access known quel time ingres moved emerging sql standard ibm one test implementation relational model prtv production one business system 12 discontinued honeywell wrote mrds multics two new implementations alphora dataphor rel dbms implementations usually called relational actually sql dbmss 1970 university michigan began development micro information management system based d.l childs set-theoretic data model micro used manage large data sets us department labor u.s. environmental protection agency researchers university alberta university michigan wayne state university ran ibm mainframe computers using michigan terminal system system remained production 1998 1970s 1980s attempts made build database systems integrated hardware software underlying philosophy integration would provide higher performance lower cost examples ibm system/38 early offering teradata britton lee inc. database machine another approach hardware support database management icl cafs accelerator hardware disk controller programmable search capabilities long term efforts generally unsuccessful specialized database machines could keep pace rapid development progress general-purpose computers thus database systems nowadays software systems running general-purpose hardware using general-purpose computer data storage however idea still pursued certain applications companies like netezza oracle exadata ibm started working prototype system loosely based codd concepts system r early 1970s first version ready 1974/5 work started multi-table systems data could split data record optional stored single large chunk subsequent multi-user versions tested customers 1978 1979 time standardized query language – sql – added codd ideas establishing workable superior codasyl pushing ibm develop true production version system r known sql/ds later database 2 db2 larry ellison oracle database simply oracle started different chain based ibm papers system r. though oracle v1 implementations completed 1978 n't oracle version 2 ellison beat ibm market 1979 stonebraker went apply lessons ingres develop new database postgres known postgresql postgresql often used global mission critical applications .org .info domain name registries use primary data store many large companies financial institutions sweden codd paper also read mimer sql developed mid-1970s uppsala university 1984 project consolidated independent enterprise another data model entity–relationship model emerged 1976 gained popularity database design emphasized familiar description earlier relational model later entity–relationship constructs retrofitted data modeling construct relational model difference two become irrelevant 1980s ushered age desktop computing new computers empowered users spreadsheets like lotus 1-2-3 database software like dbase dbase product lightweight easy computer user understand box c. wayne ratliff creator dbase stated dbase different programs like basic c fortran cobol lot dirty work already done data manipulation done dbase instead user user concentrate rather mess dirty details opening reading closing files managing space allocation dbase one top selling software titles 1980s early 1990s 1990s along rise object-oriented programming saw growth data various databases handled programmers designers began treat data databases objects say person data database person attributes address phone number age considered belong person instead extraneous data allows relations data relations objects attributes individual fields term object-relational impedance mismatch described inconvenience translating programmed objects database tables object databases object-relational databases attempt solve problem providing object-oriented language sometimes extensions sql programmers use alternative purely relational sql programming side libraries known object-relational mappings orms attempt solve problem xml databases type structured document-oriented database allows querying based xml document attributes xml databases mostly used applications data conveniently viewed collection documents structure vary flexible highly rigid examples include scientific articles patents tax filings personnel records nosql databases often fast require fixed table schemas avoid join operations storing denormalized data designed scale horizontally recent years strong demand massively distributed databases high partition tolerance according cap theorem impossible distributed system simultaneously provide consistency availability partition tolerance guarantees distributed system satisfy two guarantees time three reason many nosql databases using called eventual consistency provide availability partition tolerance guarantees reduced level data consistency newsql class modern relational databases aims provide scalable performance nosql systems online transaction processing read-write workloads still using sql maintaining acid guarantees traditional database system databases used support internal operations organizations underpin online interactions customers suppliers see enterprise software databases used hold administrative information specialized data engineering data economic models examples include computerized library systems flight reservation systems computerized parts inventory systems many content management systems store websites collections webpages database one way classify databases involves type contents example bibliographic document-text statistical multimedia objects another way application area example accounting music compositions movies banking manufacturing insurance third way technical aspect database structure interface type section lists adjectives used characterize different kinds databases connolly begg define database management system dbms software system enables users define create maintain control access database dbms acronym sometime extended indicated underlying database model rdbms relational oodbms ordbms object orientated model ordbms object-relational extensions indicate characteristic ddbms distributed database management systems functionality provided dbms vary enormously core functionality storage retrieval update data codd proposed following functions services fully-fledged general purpose dbms provide also generally expected dbms provide set utilities purposes may necessary administer database effectively including import export monitoring defragmentation analysis utilities core part dbms interacting database application interface sometimes referred database engine often dbmss configuration parameters statically dynamically tuned example maximum amount main memory server database use trend minimise amount manual configuration cases embedded databases need target zero-administration paramount large major enterprise dbmss tended increase size functionality involved thousands human years development effort lifetime early multi-user dbms typically allowed application reside computer access via terminals terminal emulation software client–server architecture development application resided client desktop database server allowing processing distributed evolved multitier architecture incorporating application servers web servers end user interface via web browser database directly connected adjacent tier general-purpose dbms provide public application programming interfaces api optionally processor database languages sql allow applications written interact database special purpose dbms may use private api specifically customised linked single application example email system performing many functions general-purpose dbms message insertion message deletion attachment handling blocklist lookup associating messages email address forth however functions limited required handle email external interaction database via application program interfaces dbms range database tool allows users execute sql queries textually graphically web site happens use database store search information programmer code interactions database sometimes referred datasource via application program interface api via database language particular api language chosen need supported dbms possible indirectly via pre-processor bridging api api aim database independent odbc commonly known example common api include jdbc ado.net database languages special-purpose languages allow one following tasks sometimes distinguished sublanguages database languages specific particular data model notable examples include database language may also incorporate features like database storage container physical materialization database comprises internal physical level database architecture also contains information needed e.g. metadata data data internal data structures reconstruct conceptual level external level internal level needed putting data permanent storage generally responsibility database engine a.k.a storage engine though typically accessed dbms underlying operating system often using operating systems file systems intermediates storage layout storage properties configuration setting extremely important efficient operation dbms thus closely maintained database administrators dbms operation always database residing several types storage e.g. memory external storage database data additional needed information possibly large amounts coded bits data typically reside storage structures look completely different way data look conceptual external levels ways attempt optimize best possible levels reconstruction needed users programs well computing additional types needed information data e.g. querying database dbmss support specifying character encoding used store data multiple encodings used database various low-level database storage structures used storage engine serialize data model written medium choice techniques indexing may used improve performance conventional storage row-oriented also column-oriented correlation databases often storage redundancy employed increase performance common example storing materialized views consist frequently needed external views query results storing views saves expensive computing time needed downsides materialized views overhead incurred updating keep synchronized original updated database data cost storage redundancy occasionally database employs storage redundancy database objects replication one copies increase data availability improve performance simultaneous multiple end-user accesses database object provide resiliency case partial failure distributed database updates replicated object need synchronized across object copies many cases entire database replicated database security deals various aspects protecting database content owners users ranges protection intentional unauthorized database uses unintentional database accesses unauthorized entities e.g. person computer program database access control deals controlling person certain computer program allowed access information database information may comprise specific database objects e.g. record types specific records data structures certain computations certain objects e.g. query types specific queries using specific access paths former e.g. using specific indexes data structures access information database access controls set special authorized database owner personnel uses dedicated protected security dbms interfaces may managed directly individual basis assignment individuals privileges groups elaborate models assignment individuals groups roles granted entitlements data security prevents unauthorized users viewing updating database using passwords users allowed access entire database subsets called subschemas example employee database contain data individual employee one group users may authorized view payroll data others allowed access work history medical data dbms provides way interactively enter update database well interrogate capability allows managing personal databases data security general deals protecting specific chunks data physically i.e. corruption destruction removal e.g. see physical security interpretation parts meaningful information e.g. looking strings bits comprise concluding specific valid credit-card numbers e.g. see data encryption change access logging records accessed attributes changed changed logging services allow forensic database audit later keeping record access occurrences changes sometimes application-level code used record changes rather leaving database monitoring set attempt detect security breaches database transactions used introduce level fault tolerance data integrity recovery crash database transaction unit work typically encapsulating number operations database e.g. reading database object writing acquiring lock etc abstraction supported database also systems transaction well defined boundaries terms program/code executions included transaction determined transaction programmer via special transaction commands acronym acid describes ideal properties database transaction atomicity consistency isolation durability database built one dbms portable another dbms i.e. dbms run however situations desirable migrate database one dbms another reasons primarily economical different dbmss may different total costs ownership tcos functional operational different dbmss may different capabilities migration involves database transformation one dbms type another transformation maintain possible database related application i.e. related application programs intact thus database conceptual external architectural levels maintained transformation may desired also aspects architecture internal level maintained complex large database migration may complicated costly one-time project factored decision migrate spite fact tools may exist help migration specific dbmss typically dbms vendor provides tools help importing databases popular dbmss designing database application next stage building database typically appropriate general-purpose dbms selected used purpose dbms provides needed user interfaces used database administrators define needed application data structures within dbms respective data model user interfaces used select needed dbms parameters like security related storage allocation parameters etc. database ready data structures needed components defined typically populated initial application data database initialization typically distinct project many cases using specialized dbms interfaces support bulk insertion making operational cases database becomes operational empty application data data accumulated operation database created initialised populated needs maintained various database parameters may need changing database may need tuned tuning better performance application data structures may changed added new related application programs may written add application functionality etc sometimes desired bring database back previous state many reasons e.g. cases database found corrupted due software error updated erroneous data achieve backup operation done occasionally continuously desired database state i.e. values data embedding database data structures kept within dedicated backup files many techniques exist effectively decided database administrator bring database back state e.g. specifying state desired point time database state files used restore state static analysis techniques software verification applied also scenario query languages particular *abstract interpretation framework extended field query languages relational databases way support sound approximation techniques semantics query languages tuned according suitable abstractions concrete domain data abstraction relational database system many interesting applications particular security purposes fine grained access control watermarking etc dbms features might include increasingly calls single system incorporates core functionalities build test deployment framework database management source control borrowing developments software industry market offerings devops database first task database designer produce conceptual data model reflects structure information held database common approach develop entity-relationship model often aid drawing tools another popular approach unified modeling language successful data model accurately reflect possible state external world modeled example people one phone number allow information captured designing good conceptual data model requires good understanding application domain typically involves asking deep questions things interest organization like customer also supplier product sold two different forms packaging product different products plane flies new york dubai via frankfurt one flight two maybe even three answers questions establish definitions terminology used entities customers products flights flight segments relationships attributes producing conceptual data model sometimes involves input business processes analysis workflow organization help establish information needed database left example help deciding whether database needs hold historic data well current data produced conceptual data model users happy next stage translate schema implements relevant data structures within database process often called logical database design output logical data model expressed form schema whereas conceptual data model theory least independent choice database technology logical data model expressed terms particular database model supported chosen dbms terms data model database model often used interchangeably article use data model design specific database database model modeling notation used express design popular database model general-purpose databases relational model precisely relational model represented sql language process creating logical database design using model uses methodical approach known normalization goal normalization ensure elementary fact recorded one place insertions updates deletions automatically maintain consistency final stage database design make decisions affect performance scalability recovery security like depend particular dbms often called physical database design output physical data model key goal stage data independence meaning decisions made performance optimization purposes invisible end-users applications two types data independence physical data independence logical data independence physical design driven mainly performance requirements requires good knowledge expected workload access patterns deep understanding features offered chosen dbms another aspect physical database design security involves defining access control database objects well defining security levels methods data database model type data model determines logical structure database fundamentally determines manner data stored organized manipulated popular example database model relational model sql approximation relational uses table-based format common logical data models databases include object-relational database combines two related structures physical data models include models include specialized models optimized particular types data database management system provides three views database data typically one conceptual logical physical internal view data number different external views allows users see database information business-related way rather technical processing viewpoint example financial department company needs payment details employees part company expenses need details employees interest human resources department thus different departments need different views company database three-level database architecture relates concept data independence one major initial driving forces relational model idea changes made certain level affect view higher level example changes internal level affect application programs written using conceptual level interfaces reduces impact making physical changes improve performance conceptual view provides level indirection internal external one hand provides common view database independent different external view structures hand abstracts away details data stored managed internal level principle every level even every external view presented different data model practice usually given dbms uses data model external conceptual levels e.g. relational model internal level hidden inside dbms depends implementation requires different level detail uses types data structure types separating external conceptual internal levels major feature relational database model implementations dominate 21st century databases database technology active research topic since 1960s academia research development groups companies example ibm research research activity includes theory development prototypes notable research topics included models atomic transaction concept related concurrency control techniques query languages query optimization methods raid database research area several dedicated academic journals example acm transactions database systems -tods data knowledge engineering -dke annual conferences e.g. acm sigmod acm pods vldb ieee icde
node6:Wikipedia entry. Entry name: Windows_10_Mobile_version_history. Entry content: windows 10 mobile version history windows 10 mobile mobile operating system developed microsoft released manufacturing november 20 2015 made generally available march 17 2016 october 2017 microsoft announced would pause active development windows 10 mobile last feature update fall creators update future development windows 10 mobile limited maintenance releases security patches windows 10 mobile november update also known version 1511 codenamed threshold 2 first major update windows 10 mobile one series updates threshold codenames carries build number 10.0.10586 released public november 12 2015 update reached end service january 9 2018 windows 10 mobile anniversary update also known version 1607 codenamed redstone 1 second major update windows 10 mobile first series updates redstone codenames carries build number 10.0.14393 first preview released february 19 2016 released public august 16 2016 update reached end service release build 14393.2551 october 9 2018 windows 10 mobile creators update also known version 1703 codenamed redstone 2 third major update windows 10 mobile second series updates redstone codenames carries build number 10.0.15063 first preview released insiders august 17 2016 released public april 25 2017 update reached end service release build 15063.1868 june 11 2019 windows 10 mobile fall creators update also known version 1709 codenamed redstone 3 third major update windows 10 mobile third series updates redstone codenames carries build number 10.0.15254 despite sharing codename version number pc version windows 10 fall creators update redstone 3 update still build part redstone 2 branch first preview released insiders april 14 2017 released public october 24 2017 update set reached end service december 10 2019
node7:Wikipedia entry. Entry name: TACACS. Entry content: tacacs terminal access controller access-control system tacacs usually pronounced like tack-axe refers family related protocols handling remote authentication related services networked access control centralized server original tacacs protocol dates back 1984 used communicating authentication server common older unix networks spawned related protocols tacacs originally developed 1984 bbn technologies administering milnet ran unclassified network traffic darpa time would later evolve u.s. department defense niprnet originally designed means automate authentication – allowing someone already logged one host network connect another network without needing re-authenticate – first formally described bbn brian anderson december 1984 ietf rfc 927 cisco systems began supporting tacacs networking products late 1980s eventually adding several extensions protocol 1990 cisco extensions top tacacs became proprietary protocol called extended tacacs xtacacs although tacacs xtacacs open standards craig finseth university minnesota cisco assistance published description protocols 1993 ietf rfc 1492 informational purposes tacacs defined rfc 1492 uses either tcp udp port 49 default tacacs allows client accept username password send query tacacs authentication server sometimes called tacacs daemon simply tacacsd tacacsd uses tcp usually runs port 49 would determine whether accept deny authentication request send response back tip routing node accepting dial-up line connections user would normally want log would allow access based upon response way process making decision opened algorithms data used make decision complete control whomever running tacacs daemon xtacacs stands extended tacacs provides additional functionality tacacs protocol also separates authentication authorization accounting aaa functions separate processes even allowing handled separate servers technologies tacacs+ radius generally replaced tacacs xtacacs recently built updated networks tacacs+ entirely new protocol compatible predecessors tacacs xtacacs tacacs+ uses tcp radius operates udp since tcp connection oriented protocol tacacs+ implement transmission control radius however detect correct transmission errors like packet loss timeout etc since rides udp connectionless radius encrypts users password travels radius client radius server information username authorization accounting transmitted clear text therefore vulnerable different types attacks tacacs+ encrypts information mentioned therefore vulnerabilities present radius protocol tacacs+ cisco designed extension tacacs encrypts full content packet moreover provides granular control command command authorization
node8:Wikipedia entry. Entry name: Kernel_(operating_system). Entry content: kernel operating system kernel computer program core computer operating system complete control everything system systems one first programs loaded start-up bootloader handles rest start-up well input/output requests software translating data-processing instructions central processing unit handles memory peripherals like keyboards monitors printers speakers critical code kernel usually loaded separate area memory protected access application programs less critical parts operating system kernel performs tasks running processes managing hardware devices hard disk handling interrupts protected kernel space contrast application programs like browsers word processors audio video players use separate area memory user space separation prevents user data kernel data interfering causing instability slowness well preventing malfunctioning application programs crashing entire operating system kernel interface low-level abstraction layer process makes requests kernel called system call kernel designs differ manage system calls resources monolithic kernel runs operating system instructions address space speed microkernel runs processes user space modularity kernel primary function mediate access computer resources including key aspects necessary resource management definition execution domain address space protection mechanism used mediate access resources within domain kernels also provide methods synchronization inter-process communication ipc implementations may within kernel kernel also rely processes running although kernel must provide inter-process communication order provide access facilities provided kernels must also provide running programs method make requests access facilities kernel full access system memory must allow processes safely access memory require often first step virtual addressing usually achieved paging and/or segmentation virtual addressing allows kernel make given physical address appear another address virtual address virtual address spaces may different different processes memory one process accesses particular virtual address may different memory another process accesses address allows every program behave one apart kernel running thus prevents applications crashing many systems program virtual address may refer data currently memory layer indirection provided virtual addressing allows operating system use data stores like hard drive store would otherwise remain main memory ram result operating systems allow programs use memory system physically available program needs data currently ram cpu signals kernel happened kernel responds writing contents inactive memory block disk necessary replacing data requested program program resumed point stopped scheme generally known demand paging virtual addressing also allows creation virtual partitions memory two disjointed areas one reserved kernel kernel space applications user space applications permitted processor address kernel memory thus preventing application damaging running kernel fundamental partition memory space contributed much current designs actual general-purpose kernels almost universal systems although research kernels e.g singularity take approaches perform useful functions processes need access peripherals connected computer controlled kernel device drivers device driver computer program enables operating system interact hardware device provides operating system information control communicate certain piece hardware driver important vital piece program application design goal driver abstraction function driver translate os-mandated abstract function calls programming calls device-specific calls theory device work correctly suitable driver device drivers used things video cards sound cards printers scanners modems lan cards common levels abstraction device drivers 1 hardware side 2 software side example show user something screen application would make request kernel would forward request display driver responsible actually plotting character/pixel kernel must maintain list available devices list may known advance e.g embedded system kernel rewritten available hardware changes configured user typical older pcs systems designed personal use detected operating system run time normally called plug play plug play system device manager first performs scan different hardware buses peripheral component interconnect pci universal serial bus usb detect installed devices searches appropriate drivers device management os-specific topic drivers handled differently kind kernel design every case kernel provide i/o allow drivers physically access devices port memory location important decisions made designing device management system designs accesses may involve context switches making operation cpu-intensive easily causing significant performance overhead computing system call process requests service operating system kernel normally permission run system calls provide interface process operating system operations interacting system require permissions available user level process e.g i/o performed device present system form communication processes requires use system calls system call mechanism used application program request service operating system use machine-code instruction causes processor change mode example would supervisor mode protected mode operating system performs actions like accessing hardware devices memory management unit generally operating system provides library sits operating system normal programs usually c library glibc windows api library handles low-level details passing information kernel switching supervisor mode system calls include close open read wait write actually perform useful work process must able access services provided kernel implemented differently kernel provide c library api turn invokes related kernel functions method invoking kernel function varies kernel kernel memory isolation use impossible user process call kernel directly would violation processor access control rules possibilities important consideration design kernel support provides protection faults fault tolerance malicious behaviours security two aspects usually clearly distinguished adoption distinction kernel design leads rejection hierarchical structure protection mechanisms policies provided kernel classified according several criteria including static enforced compile time dynamic enforced run time pre-emptive post-detection according protection principles satisfy e.g denning whether hardware supported language based whether open mechanism binding policy many support hierarchical protection domains typically implemented using cpu modes many kernels provide implementation capabilities i.e objects provided user code allow limited access underlying object managed kernel common example occurs file handling file representation information stored permanent storage device kernel may able perform many different operations e.g read write delete execute file contents user level application may permitted perform operations e.g may allowed read file common implementation kernel provide object application typically called file handle application may invoke operations validity kernel checks time operation requested system may extended cover objects kernel manages indeed objects provided user applications efficient simple way provide hardware support capabilities delegate mmu responsibility checking access-rights every memory access mechanism called capability-based addressing commercial computer architectures lack mmu support capabilities alternative approach simulate capabilities using commonly supported hierarchical domains approach protected object must reside address space application access kernel also maintains list capabilities memory application needs access object protected capability performs system call kernel checks whether application capability grants permission perform requested action permitted performs access either directly delegating request another user-level process performance cost address space switching limits practicality approach systems complex interactions objects used current operating systems objects accessed frequently expected perform quickly approaches protection mechanism firmware supported instead simulated higher levels e.g simulating capabilities manipulating page tables hardware direct support possible performance implications lack hardware support may issue however systems choose use language-based protection important kernel design decision choice abstraction levels security mechanisms policies implemented kernel security mechanisms play critical role supporting security higher levels one approach use firmware kernel support fault tolerance see build security policy malicious behavior top adding features cryptography mechanisms necessary delegating responsibility compiler approaches delegate enforcement security policy compiler and/or application level often called language-based security lack many critical security mechanisms current mainstream operating systems impedes implementation adequate security policies application abstraction level fact common misconception computer security security policy implemented application regardless kernel support typical computer systems today use hardware-enforced rules programs allowed access data processor monitors execution stops program violates rule e.g. user process read write kernel memory systems lack support capabilities processes isolated using separate address spaces calls user processes kernel regulated requiring use one above-described system call methods alternative approach use language-based protection language-based protection system kernel allow code execute produced trusted language compiler language may designed impossible programmer instruct something violate security requirement advantages approach include disadvantages include examples systems language-based protection include jx microsoft singularity edsger dijkstra proved logical point view atomic lock unlock operations operating binary semaphores sufficient primitives express functionality process cooperation however approach generally held lacking terms safety efficiency whereas message passing approach flexible number approaches either lower- higher-level available well many modern kernels providing support systems shared memory remote procedure calls idea kernel i/o devices handled uniformly processes parallel co-operating processes first proposed implemented brinch hansen although similar ideas suggested 1967 hansen description common processes called internal processes i/o devices called external processes similar physical memory allowing applications direct access controller ports registers cause controller malfunction system crash depending complexity device devices get surprisingly complex program use several different controllers providing abstract interface manage device important interface normally done device driver hardware abstraction layer frequently applications require access devices kernel must maintain list devices querying system way done bios one various system buses pci/pcie usb application requests operation device displaying character kernel needs send request current active video driver video driver turn needs carry request example inter process communication ipc naturally listed tasks features provided many ways differ design implementation principle separation mechanism policy substantial difference philosophy micro monolithic kernels mechanism support allows implementation many different policies policy particular mode operation instance mechanism may provide user log-in attempts call authorization server determine whether access granted policy may authorization server request password check encrypted password stored database mechanism generic policy could easily changed e.g requiring use security token mechanism policy integrated module minimal microkernel basic policies included mechanisms allows running top kernel remaining part operating system applications decide policies adopt memory management high level process scheduling file system management etc. monolithic kernel instead tends include many policies therefore restricting rest system rely per brinch hansen presented arguments favour separation mechanism policy failure properly fulfill separation one major causes lack substantial innovation existing operating systems problem common computer architecture monolithic design induced kernel mode user mode architectural approach protection technically called hierarchical protection domains common conventional commercial systems fact every module needing protection therefore preferably included kernel link monolithic design privileged mode reconducted key issue mechanism-policy separation fact privileged mode architectural approach melds together protection mechanism security policies major alternative architectural approach capability-based addressing clearly distinguishes two leading naturally microkernel design see separation protection security monolithic kernels execute code address space kernel space microkernels try run services user space aiming improve maintainability modularity codebase kernels fit exactly one categories rather found two designs called hybrid kernels exotic designs nanokernels exokernels available seldom used production systems xen hypervisor example exokernel monolithic kernel os services run along main kernel thread thus also residing memory area approach provides rich powerful hardware access developers unix developer ken thompson maintain easier implement monolithic kernel microkernels main disadvantages monolithic kernels dependencies system components bug device driver might crash entire system fact large kernels become difficult maintain monolithic kernels traditionally used unix-like operating systems contain operating system core functions device drivers traditional design unix systems monolithic kernel one single program contains code necessary perform every kernel-related task every part accessed programs put library kernel space device drivers scheduler memory handling file systems network stacks many system calls provided applications allow access services monolithic kernel initially loaded subsystems may needed tuned point fast faster one specifically designed hardware although relevant general sense modern monolithic kernels linux freebsd fall category unix-like operating systems feature ability load modules runtime thereby allowing easy extension kernel capabilities required helping minimize amount code running kernel space monolithic kernel advantages hinge points work monolithic kernel done via system calls interfaces usually kept tabular structure access subsystem within kernel disk operations essentially calls made within programs checked copy request passed system call hence far travel monolithic linux kernel made extremely small ability dynamically load modules also ease customization fact versions small enough fit together large number utilities programs single floppy disk still provide fully functional operating system one popular mulinux ability miniaturize kernel also led rapid growth use linux embedded systems types kernels consist core functions operating system device drivers ability load modules runtime provide rich powerful abstractions underlying hardware provide small set simple hardware abstractions use applications called servers provide functionality particular approach defines high-level virtual interface hardware set system calls implement operating system services process management concurrency memory management several modules run supervisor mode design several flaws limitations microkernel also abbreviated μk uk term describing approach operating system design functionality system moved traditional kernel set servers communicate minimal kernel leaving little possible system space much possible user space microkernel designed specific platform device ever going needs operate microkernel approach consists defining simple abstraction hardware set primitives system calls implement minimal os services memory management multitasking inter-process communication services including normally provided kernel networking implemented user-space programs referred servers microkernels easier maintain monolithic kernels large number system calls context switches might slow system typically generate overhead plain function calls parts really require privileged mode kernel space ipc inter-process communication basic scheduler scheduling primitives basic memory handling basic i/o primitives many critical parts running user space complete scheduler memory handling file systems network stacks micro kernels invented reaction traditional monolithic kernel design whereby system functionality put one static program running special system mode processor microkernel fundamental tasks performed able access necessarily hardware manage memory coordinate message passing processes systems use micro kernels qnx hurd case qnx hurd user sessions entire snapshots system views referred essence microkernel architecture illustrates advantages micro kernels use message passing system sort handle requests one server another message passing system generally operates port basis microkernel example request memory sent port opened microkernel request sent within microkernel steps similar system calls rationale would bring modularity system architecture would entail cleaner system easier debug dynamically modify customizable users needs performing part operating systems like gnu hurd minix mklinux qnx redox os although micro kernels small combination required auxiliary code fact often larger monolithic kernels advocates monolithic kernels also point two-tiered structure microkernel systems operating system interact directly hardware creates not-insignificant cost terms system efficiency types kernels normally provide minimal services defining memory address spaces inter-process communication ipc process management functions running hardware processes handled directly micro kernels proponents micro kernels point monolithic kernels disadvantage error kernel cause entire system crash however microkernel kernel process crashes still possible prevent crash system whole merely restarting service caused error services provided kernel networking implemented user-space programs referred servers servers allow operating system modified simply starting stopping programs machine without networking support instance networking server started task moving kernel move data various applications servers creates overhead detrimental efficiency micro kernels comparison monolithic kernels disadvantages microkernel exist however disadvantages micro kernels extremely context based example work well small single purpose critical systems many processes need run complications process management effectively mitigated microkernel allows implementation remaining part operating system normal application program written high-level language use different operating systems top unchanged kernel also possible dynamically switch among operating systems one active simultaneously computer kernel grows grows size vulnerability trusted computing base besides reducing security problem enlarging memory footprint mitigated degree perfecting virtual memory system computer architectures virtual memory support reduce kernel footprint extensive editing performed carefully remove unneeded code difficult non-obvious interdependencies parts kernel millions lines code early 1990s due various shortcomings monolithic kernels versus microkernels monolithic kernels considered obsolete virtually operating system researchers result design linux monolithic kernel rather microkernel topic famous debate linus torvalds andrew tanenbaum merit sides argument presented tanenbaum–torvalds debate monolithic kernels designed code address space kernel space developers argue necessary increase performance system developers also maintain monolithic systems extremely efficient well written monolithic model tends efficient use shared kernel memory rather slower ipc system microkernel designs typically based message passing performance microkernels poor 1980s early 1990s however studies empirically measured performance microkernels analyze reasons inefficiency explanations data left folklore assumption due increased frequency switches kernel-mode user-mode increased frequency inter-process communication increased frequency context switches fact guessed 1995 reasons poor performance microkernels might well 1 actual inefficiency whole microkernel approach 2 particular concepts implemented microkernels 3 particular implementation concepts therefore remained studied solution build efficient microkernel unlike previous attempts apply correct construction techniques end hierarchical protection domains architecture leads design monolithic kernel significant performance drawback time interaction different levels protection i.e process manipulate data structure 'user mode 'supervisor mode since requires message copying value mid-1990s researchers abandoned belief careful tuning could reduce overhead dramatically recently newer microkernels optimized performance l4 k42 addressed problems hybrid kernels used commercial operating systems microsoft windows nt 3.1 nt 3.5 nt 3.51 nt 4.0 2000 xp vista 7 8 8.1 10 apple inc macos uses hybrid kernel called xnu based upon code osf/1 mach kernel osfmk 7.3 freebsd monolithic kernel similar micro kernels except include additional code kernel-space increase performance kernels represent compromise implemented developers demonstrated pure micro kernels provide high performance types kernels extensions micro kernels properties monolithic kernels unlike monolithic kernels types kernels unable load modules runtime hybrid kernels micro kernels non-essential code kernel-space order code run quickly would user-space hybrid kernels compromise monolithic microkernel designs implies running services network stack filesystem kernel space reduce performance overhead traditional microkernel still running kernel code device drivers servers user space many traditionally monolithic kernels least adding actively exploiting module capability well known kernels linux kernel modular kernel essentially parts built core kernel binary binaries load memory demand important note code tainted module potential destabilize running kernel many people become confused point discussing micro kernels possible write driver microkernel completely separate memory space test going live kernel module loaded accesses monolithic portion memory space adding needs therefore opening doorway possible pollution advantages modular hybrid kernel modules generally communicate kernel using module interface sort interface generalized although particular given operating system always possible use modules often device drivers may need flexibility module interface affords essentially two system calls often safety checks done monolithic kernel may done twice disadvantages modular approach nanokernel delegates virtually services including even basic ones like interrupt controllers timer device drivers make kernel memory requirement even smaller traditional microkernel exokernels still-experimental approach operating system design differ types kernels functionality limited protection multiplexing raw hardware providing hardware abstractions top develop applications separation hardware protection hardware management enables application developers determine make efficient use available hardware specific program exokernels extremely small however accompanied library operating systems see also unikernel providing application developers functionalities conventional operating system major advantage exokernel-based systems incorporate multiple library operating systems exporting different api example one high level ui development one real-time control strictly speaking operating system thus kernel required run computer programs directly loaded executed bare metal machine provided authors programs willing work without hardware abstraction operating system support early computers operated way 1950s early 1960s reset reloaded execution different programs eventually small ancillary programs program loaders debuggers left memory runs loaded rom developed formed basis became early operating system kernels bare metal approach still used today video game consoles embedded systems general newer computers use modern operating systems kernels 1969 rc 4000 multiprogramming system introduced system design philosophy small nucleus upon operating systems different purposes could built orderly manner would called microkernel approach decade preceding unix computers grown enormously power point computer operators looking new ways get people use spare time machines one major developments era time-sharing whereby number users would get small slices computer time rate appeared connected slower machine development time-sharing systems led number problems one users particularly universities systems developed seemed want hack system get cpu time reason security access control became major focus multics project 1965 another ongoing issue properly handling computing resources users spent time staring terminal thinking input instead actually using resources computer time-sharing system give cpu time active user periods finally systems typically offered memory hierarchy several layers deep partitioning expensive resource led major developments virtual memory systems commodore amiga released 1985 among first certainly successful home computers feature advanced kernel architecture amigaos kernel executive component exec.library uses microkernel message-passing design kernel components like graphics.library direct access hardware memory protection kernel almost always running user mode special actions executed kernel mode user-mode applications ask operating system execute code kernel mode design phase unix programmers decided model every high-level device file believed purpose computation data transformation instance printers represented file known location data copied file printed systems provide similar functionality tended virtualize devices lower level devices files would instances lower level concept virtualizing system file level allowed users manipulate entire system using existing file management utilities concepts dramatically simplifying operation extension paradigm unix allows programmers manipulate files using series small programs using concept pipes allowed users complete operations stages feeding file chain single-purpose tools although end result using smaller programs way dramatically increased flexibility well ease development use allowing user modify workflow adding removing program chain unix model operating system consists two parts first huge collection utility programs drive operations second kernel runs programs unix programming standpoint distinction two fairly thin kernel program running supervisor mode acts program loader supervisor small utility programs making rest system provide locking i/o services programs beyond kernel n't intervene user space years computing model changed unix treatment everything file byte stream longer universally applicable although terminal could treated file byte stream printed read seem true graphical user interface networking posed another problem even network communication compared file access low-level packet-oriented architecture dealt discrete chunks data whole files capability computers grew unix became increasingly cluttered code also modularity unix kernel extensively scalable kernels might 100,000 lines code seventies eighties kernels modern unix successors like linux 13 million lines modern unix-derivatives generally based module-loading monolithic kernels examples linux kernel many distributions well berkeley software distribution variant kernels freebsd dragonflybsd openbsd netbsd macos apart alternatives amateur developers maintain active operating system development community populated self-written hobby kernels mostly end sharing many features linux freebsd dragonflybsd openbsd netbsd kernels and/or compatible apple first launched classic mac os 1984 bundled macintosh personal computer apple moved nanokernel design mac os 8.6 modern macos originally named mac os x based darwin uses hybrid kernel called xnu created combining 4.3bsd kernel mach kernel microsoft windows first released 1985 add-on ms-dos dependence another operating system initial releases windows prior windows 95 considered operating environment confused operating system product line continued evolve 1980s 1990s windows 9x series adding 32-bit addressing pre-emptive multitasking ended release windows 2000 microsoft also developed windows nt operating system similar interface intended high-end business users line started release windows nt 3.1 1993 introduced general users release windows xp october 2001—replacing windows 9x completely different much sophisticated operating system line continues windows 10 architecture windows nt kernel considered hybrid kernel kernel contains tasks window manager ipc managers client/server layered subsystem model supervisory program supervisor computer program usually part operating system controls execution routines regulates work scheduling input/output operations error actions similar functions regulates flow work data processing system historically term essentially associated ibm line mainframe operating systems starting os/360 operating systems supervisor generally called kernel 1970s ibm abstracted supervisor state hardware resulting hypervisor enabled full virtualization i.e capacity run multiple operating systems machine totally independently hence first system called virtual machine vm although mach developed carnegie mellon university 1985 1994 best-known general-purpose microkernel microkernels developed specific aims l4 microkernel family mainly l3 l4 kernel created demonstrate microkernels necessarily slow newer implementations fiasco pistachio able run linux next l4 processes separate address spaces additionally qnx microkernel principally used embedded systems open-source software minix originally created educational purposes focussed highly reliable self-healing microkernel os
node9:Wikipedia entry. Entry name: Authentication. Entry content: authentication authentication authentikos real genuine αὐθέντης authentes author act proving assertion identity computer system user contrast identification act indicating person thing identity authentication process verifying identity might involve validating personal identity documents verifying authenticity website digital certificate determining age artifact carbon dating ensuring product document counterfeit authentication relevant multiple fields art antiques anthropology common problem verifying given artifact produced certain person certain place period history computer science verifying user identity often required allow access confidential data systems authentication considered three types first type authentication accepting proof identity given credible person first-hand evidence identity genuine authentication required art physical objects proof could friend family member colleague attesting item provenance perhaps witnessed item creator possession autographed sports memorabilia could involve someone attesting witnessed object signed vendor selling branded items implies authenticity may evidence every step supply chain authenticated centralized authority-based trust relationships back secure internet communication known public certificate authorities decentralized peer-based trust also known web trust used personal services email files pretty good privacy gnu privacy guard trust established known individuals signing cryptographic key key signing parties instance second type authentication comparing attributes object known objects origin example art expert might look similarities style painting check location form signature compare object old photograph archaeologist hand might use carbon dating verify age artifact chemical spectroscopic analysis materials used compare style construction decoration artifacts similar origin physics sound light comparison known physical environment used examine authenticity audio recordings photographs videos documents verified created ink paper readily available time item implied creation attribute comparison may vulnerable forgery general relies facts creating forgery indistinguishable genuine artifact requires expert knowledge mistakes easily made amount effort required considerably greater amount profit gained forgery art antiques certificates great importance authenticating object interest value certificates however also forged authentication poses problem instance son han van meegeren well-known art-forger forged work father provided certificate provenance well see article jacques van meegeren criminal civil penalties fraud forgery counterfeiting reduce incentive falsification depending risk getting caught currency financial instruments commonly use second type authentication method bills coins cheques incorporate hard-to-duplicate physical features fine printing engraving distinctive feel watermarks holographic imagery easy trained receivers verify third type authentication relies documentation external affirmations criminal courts rules evidence often require establishing chain custody evidence presented accomplished written evidence log testimony police detectives forensics staff handled antiques accompanied certificates attesting authenticity signed sports memorabilia usually accompanied certificate authenticity external records problems forgery perjury also vulnerable separated artifact lost computer science user given access secure systems based user credentials imply authenticity network administrator give user password provide user key card access device allow system access case authenticity implied guaranteed consumer goods pharmaceuticals perfume fashion clothing use three forms authentication prevent counterfeit goods taking advantage popular brand reputation damaging brand owner sales reputation mentioned item sale reputable store implicitly attests genuine first type authentication second type authentication might involve comparing quality craftsmanship item expensive handbag genuine articles third type authentication could presence trademark item legally protected marking identifying feature aids consumers identification genuine brand-name goods software companies taken great steps protect counterfeiters including adding holograms security rings security threads color shifting ink ways someone may authenticated fall three categories based known factors authentication something user knows something user something user authentication factor covers range elements used authenticate verify person identity prior granted access approving transaction request signing document work product granting authority others establishing chain authority security research determined positive authentication elements least two preferably three factors verified three factors classes elements factor weakest level authentication single component one three categories factors used authenticate individual ’ identity use one factor offer much protection misuse malicious intrusion type authentication recommended financial personally relevant transactions warrant higher level security multi-factor authentication involves two authentication factors something know something something two-factor authentication special case multi-factor authentication involving exactly two factors example using bankcard something user along pin something user knows provides two-factor authentication business networks may require users provide password knowledge factor pseudorandom number security token ownership factor access very-high-security system might require mantrap screening height weight facial fingerprint checks several inherence factor elements plus pin day code knowledge factor elements still two-factor authentication frequent types authentication available use authenticating online users differ level security provided combining factors one three categories factors authentication u.s. government national information assurance glossary defines strong authentication layered authentication approach relying two authenticators establish identity originator receiver information european central bank ecb defined strong authentication procedure based two three authentication factors factors used must mutually independent least one factor must non-reusable non-replicable except case inherence factor must also incapable stolen internet european well us-american understanding strong authentication similar multi-factor authentication 2fa exceeding rigorous requirements fast identity online fido alliance striving establish technical specifications strong authentication conventional computer systems authenticate users initial log-in session cause critical security flaw resolve problem systems need continuous user authentication methods continuously monitor authenticate users based biometric trait study used behavioural biometrics based writing styles continuous authentication method recent research shown possibility using smartphones ’ sensors accessories extract behavioral attributes touch dynamics keystroke dynamics gait recognition attributes known behavioral biometrics could used verify identify users implicitly continuously smartphones authentication systems built based behavioral biometric traits known active continuous authentication systems term digital authentication also known electronic authentication refers group processes confidence user identities established presented via electronic methods information system also referred e-authentication digital authentication process creates technical challenges need authenticate individuals entities remotely network american national institute standards technology nist created generic model digital authentication describes processes used accomplish secure authentication authentication information pose special problems electronic communication vulnerability man-in-the-middle attacks whereby third party taps communication stream poses two communicating parties order intercept information extra identity factors required authenticate party identity counterfeit products often offered consumers authentic counterfeit consumer goods electronics music apparel counterfeit medications sold legitimate efforts control supply chain educate consumers help ensure authentic products sold used even security printing packages labels nameplates however subject counterfeiting secure key storage device used authentication consumer electronics network authentication license management supply chain management etc generally device authenticated needs sort wireless wired digital connection either host system network nonetheless component authenticated need electronic nature authentication chip mechanically attached read connector host e.g authenticated ink tank use printer products services secure coprocessors applied offer solution much difficult counterfeit options time easily verified packaging labeling engineered help reduce risks counterfeit consumer goods theft resale products package constructions difficult copy pilfer-indicating seals counterfeit goods unauthorized sales diversion material substitution tampering reduced anti-counterfeiting technologies packages may include authentication seals use security printing help indicate package contents counterfeit subject counterfeiting packages also include anti-theft devices dye-packs rfid tags electronic article surveillance tags activated detected devices exit points require specialized tools deactivate anti-counterfeiting technologies used packaging include literary forgery involve imitating style famous author original manuscript typewritten text recording available medium packaging – anything box e-mail headers help prove disprove authenticity document however text audio video copied new media possibly leaving informational content use authentication various systems invented allow authors provide means readers reliably authenticate given message originated relayed involve authentication factors like opposite problem detection plagiarism information different author passed person work common technique proving plagiarism discovery another copy similar text different attribution cases excessively high quality style mismatch may raise suspicion plagiarism literacy authentication readers ’ process questioning veracity aspect literature verifying questions via research fundamental question authentication literature – one believe related authentication project therefore reading writing activity students documents relevant research process builds students critical literacy documentation materials literature go beyond narrative texts likely include informational texts primary sources multimedia process typically involves internet hands-on library research authenticating historical fiction particular readers consider extent major historical events well culture portrayed e.g. language clothing food gender roles believable period historically fingerprints used authoritative method authentication court cases us elsewhere raised fundamental doubts fingerprint reliability outside legal system well fingerprints shown easily spoofable british telecom top computer-security official noting fingerprint readers already tricked one spoof another hybrid two-tiered authentication methods offer compelling solution private keys encrypted fingerprint inside usb device computer data context cryptographic methods developed see digital signature challenge-response authentication currently spoofable originator key compromised originator anyone attacker knows n't know compromise irrelevant known whether cryptographically based authentication methods provably secure since unanticipated mathematical developments may make vulnerable attack future occur may call question much authentication past particular digitally signed contract may questioned new attack cryptography underlying signature discovered process authorization distinct authentication whereas authentication process verifying say authorization process verifying permitted trying mean authorization presupposes authentication anonymous agent could authorized limited action set one familiar use authentication authorization access control computer system supposed used authorized must attempt detect exclude unauthorized access therefore usually controlled insisting authentication procedure establish degree confidence identity user granting privileges established identity
node10:Wikipedia entry. Entry name: Macpup. Entry content: macpup macpup operating system based puppy linux puppy normal jwm window manager available also includes enlightenment wm users quickly switch window managers without rebooting macpup enlightenment interface installed features mac os x-like dockbar many enlightenment themes available macpup comes firefox web browser like parent macpup run ram live .iso uses 184mb ram
node11:Wikipedia entry. Entry name: E-commerce_identification_and_identification_types. Entry content: e-commerce identification identification types whole new range techniques developed identify people since 1960s measurement analysis parts bodies dna profiles forms identification used ensure citizens eligible rights benefits vote without fear impersonation private individuals used seals signatures centuries lay claim real personal estate. “ generally amount proof identity required gain access something proportionate value sought estimated 4 online transactions use methods simple passwords security systems resources generally follows three-step process ” identification authentication authorization today high level trust critical ecommerce transactions traditional face-to-face transactions scheme established maintained whereby users properly consistently effectively efficiently identified systems accessed identity verification service often employed ensure users customers provide information associated identity real person authentication verification identity entity requesting access system process determining whether someone something fact declared private public computer networks including internet authentication commonly done use logon passwords knowledge password assumed guarantee user authentic user registers initially registered someone else using assigned self-declared password subsequent use user must know use previously declared password weakness system transactions significant exchange money passwords often stolen accidentally revealed forgotten reason internet business many transactions require stringent authentication process use digital certificates issued verified certificate authority ca part public key infrastructure considered likely become standard way perform authentication internet logically authentication precedes authorization although may often seem combined authorization process giving someone permission something multi-user computer systems system administrator defines system users allowed access system privileges use access file directories hours access amount allocated storage space forth assuming someone logged computer operating system application system application may want identify resources user given session thus authorization sometimes seen preliminary setting permissions system administrator actual checking permission values set user getting access logically authorization preceded authentication
node12:Wikipedia entry. Entry name: Unified_access_management. Entry content: unified access management unified access management uam refers identity management solution used enterprises manage digital identities provide secure access users across multiple devices applications cloud on-premise unified access management solutions provide single platform manage access across diverse set users devices applications whether on-premise cloud unified access management uam evolution identity access management iam systems goal unified access management similar identity access management manage identities individual entities people devices authentication authorization roles privileges within across enterprise systems secure manner bolsters productivity traditional identity access management tools work well addressing specific portions enterprise specific app environments on-premises cloud specific users employees vs. external partners however many businesses must harness multiple iam solutions example may use microsoft active directory web access management tool manage access on-premise applications require identity-as-a-service idaas solutions manage access cloud software service saas apps managing multiple identities access management systems burden information technology departments adds cost requiring maintenance multiple solutions often requires users provisioned de-provisioned multiple systems given iam system may manage access specific devices specific systems fragmented identity management enterprise may able provide true single sign multi-factor authentication effective user lifecycle management slowing digital transformation significant financial impact forrester found 4.47 million annual loss productivity due poor access management per every 10,000 employees hybrid environments complicate access management many organizations able dispense on-premises systems example 2018 47 decision makers surveyed reported majority organization ’ custom applications still run on-premises extensive cost moving legacy systems means organizations likely remain hybrid time uam introduced onelogin uam differs iam providing umbrella solution central cloud directory single source truth identities access cloud directory integrates on-premise identity providers cloud identity providers requests information identity providers updates user lifecycle management work one place cloud directory let uam update appropriate identity providers uam provides functionality needed secure access across users devices typically includes
node13:Wikipedia entry. Entry name: Biometrics_use_by_the_South_African_government. Entry content: biometrics use south african government biometric part attempts reduce incidences fraud corruption well deliver efficient services citizens south african government embarking program employing biometric identification systems certain programs instances south african government started implementing biometrics program following departments department agriculture head office pretoria identified need implement stringent system control mechanisms including financial system logging onto secure applications logging onto staff members personal workstations department applied strict password management policy different systems finance persal government standard salary payment system leave performance management etc regulated constant changing passwords resulted forgotten passwords lock-outs employees sitting next access one another passwords resulted downtime administrative burden staff pressing concerns increased opportunity costs also noticed unauthorized individuals after-hours access facilities department implemented fingerprint biometric reader computers eliminated passwords altogether furthermore readers also installed key access control points meant staff could n't log machines n't first gain access control points also meant staff could regulated hours supposed working allowed work system automatically logged computer 'clocked work area meant less wastage stricter security thus implementation biometric system ensures superior security measures ease use centralized databank access control information fact staff n't need carry access control instruments work except fingers part strive increase security reduce corruption within facilities department correctional services launched biometric security system august 2006 system included fingerprint access closed circuit television systems turnstile gates department recognized system would effective staff members would fully committed well-trained operating system included proactive monitoring form risk well acting promptly breach security take place system grounded principle fail-over case power loss unforeseen circumstances would switch fully functioning secondary site future foreseen improvements system include closed circuit television monitoring individual cell amongst others south africa approximately 48 million citizens one requires government-issued official identification booklet proof identity document needed public services also everyday actions renting dvd opening bank store account document based secure form identification individual fingerprint need undeniable process time consuming paper based resulted government archives contain 45 million paper files home affairs national identification system project known hanis implemented move away paper system would hanis replace existing system world class digital database also ensure real time processing verification accessibility every new existing fingerprint nec automatic fingerprint identification system afis selected offer solution south african government needed fingerprint recognition technologies host accuracy rate 99.9 system works fast process many 70,000 searches one day allows hanis produce largest citizen identification database world department home affairs however faced quite number challenges ensure successful complete implementation project data integrity compromised duplicated and/or missing data elements data inconsistency lack security around data stores led fraud corruption furthers contaminated data integrity relational linkages formalised different data-stores npr hanis edms shows little relational integrity immigration data stores based expired light-weight pc based technologies immigration visitor data shows integrated cohesive structure segmented data stores refugees deportation asylum seekers visitors visas movement control department working address issues benefits sight however paperless environment shorter queues reduction bureaucratic delays accuracy system dramatically reduce possibility identity theft fraud south african police service saps implemented biometric system 2001 secure integrated justice system ijs finger- palm prints convicted criminals captured automated fingerprint identification system afis – database used identity management idm used monitor criminals well track wanted criminals portable readers powered sagem morphotouch rapid technology used roadblocks around country identify wanted criminals bring justice afis implemented ideco group also completed hanis system discussed additional uses biometrics police services fingerprint readers fake fingerprint detection functionality access control departments secure sensitive information e.g forensic laboratories stolen vehicle departments etc. fingerprints also used sole method criminal record background checks commercial purposes – use name surname identification number much potential abuse system failure led much fraud full set fingerprints required criminal record check done individual companies want make use service called afiswitch enrolled afis service significantly faster turnaround time 48 hours opposed weeks traditional system checking criminal records south africa social assistance program government largest poverty alleviation intervention budget allocation approximately r100 billion provides social grants 15,8 million beneficiaries reduce levels deprivation enable participate economy budget vote speech 2 may 2012 minister social development bathabile dlamini conceded south african social security agency sassa incomplete information beneficiary details social grant system prone fraud misappropriation funds country social assistance touches high proportion citizens incorporates dealing enormous monetary amounts fraud misappropriation funds slap face truly need tolerated part strategy address problem sassa announced social assistance beneficiaries re-registered biometric enrollment system following enrollment biometric system analyse physical behavioural traits fingerprints iris face voice hand geometry verify identity beneficiary system allow effective authentication beneficiaries drastically reduce opportunities fraud sassa process implementing system phase 1 already completed biometric identification systems however fool proof accurately functioning systems rely two fundamental premises – permanence uniqueness relevant biometric trait certain furthermore may problems extracting biometric traits – example system environmental problems recent years significant growth biometric research resulted advancements field accurate cost effective secure robust biometric systems developed – hoped allow effective implementation system sassa main reasons implementing biometrics system south african government seem eradication crime corruption enhancing service delivery citizens country problems faced expected poor infrastructure lack funds perseverance however government able succeed efforts becoming effective use biometrics
node14:Wikipedia entry. Entry name: Features_new_to_Windows_8. Entry content: features new windows 8 transition windows 7 windows 8 introduced number new features across various aspects operating system include greater focus optimizing operating system touchscreen-based devices tablets cloud computing windows 8 introduces new windows runtime winrt platform used create new type application officially known windows store apps commonly called metro-style apps apps run within secure sandbox share data apps common apis winrt com-based api allows use various programming languages code apps including c++ c++/cx c visual basic .net html5 javascript metro-style apps packaged distributed via appx new file format package management unlike desktop applications metro-style apps sideloaded subject licensing conditions windows 8.1 update allows sideloading apps windows 8.1 pro devices joined active directory domain windows 8 two apps may snap side widescreen display allow multi-tasking forming sidebar separates apps windows 8.1 apps continually resized desired width snapped apps may occupy half screen large screens allow four apps snapped upon launching app windows allows user pick snapped view app open term metro-style apps referred metro design language prominently used windows 8 recent microsoft products reports surfaced microsoft employees told stop using term due potential trademark issues unspecified partner microsoft spokesperson however denied reports stated metro-style merely codename new application platform windows 8 introduces apis support near field communication nfc windows 8 devices allowing functionality like launching urls/applications sharing information devices via nfc windows store digital distribution platform built windows 8 manner similar apple app store google play allows distribution purchase apps designed windows 8 developers still able advertise desktop software windows store well ensure secure high quality windows store means distributing winrt-based apps consumer-oriented versions windows 8 windows 8.1 windows store features redesigned interface improved app discovery recommendations offers automatic updates apps windows 8 features redesigned user interface built upon metro design language optimizations touchscreens metro-style apps either run full-screen environment snapped side screen alongside another app desktop snapping requires screen resolution 1366×768 higher windows 8.1 lowers snapping requirement screen resolution 1024x768 users switch apps desktop clicking top left corner swiping left side touchscreen invoke sidebar displays currently opened metro-style apps right-clicking upper left corner provides context menu options switch open apps traditional desktop accessible tile start screen launching desktop app shortcut cycles programs regardless type interface also incorporates taskbar right side screen known charms lowercase accessed app desktop sliding right edge touchscreen compatible trackpad moving mouse cursor one right corners screen pressing charms include search share start devices settings charms start charm invokes dismisses start screen charms invoke context-sensitive sidebars used access app system functionality aforementioned changes involving use hot corners user interface navigation windows 8 fundamentally different compared previous versions windows assist new users operating system microsoft incorporated tutorial appears installation windows 8 also first sign-in new user account visually instructs users move mouse cursor corner screen swipe corners devices touchscreens interact operating system tutorial disabled appear new user accounts windows 8.1 introduces navigation hints instructions displayed first use operating system also includes help support app windows 8.1 aforementioned hotspots upper right upper left corners disabled pressing right-clicking bottom left corner screen opens quick link menu menu contains shortcuts frequently used areas control panel file explorer programs features run search power options task manager windows 8.1 quick link menu includes options shut restart device windows 8.1 update introduced changes facilitate mouse-oriented means switching closing metro-style apps patterned upon mechanics used desktop programs windows user interlace lieu recent apps sidebar computer icons opened apps displayed taskbar desktop programs shortcuts apps also pinned taskbar mouse connected auto-hiding titlebar minimize close buttons displayed within apps mouse moved toward top screen number apps included standard installation windows 8 including mail email client people contact manager messaging im client calendar calendaring app photos image viewer music audio player video video player camera webcam digital camera client skydrive reader e-book reader six apps expose bing services search news finance weather travel sports windows 8.1 adds calculator alarm clock sound recorder reading list food drink health fitness help tips scan file manager integrated skydrive app windows 8 also includes metro-style system component called pc settings exposes small portion control panel settings windows 8.1 improves component include options previously exclusive control panel windows 8.1 update adds additional options pc settings windows 8 introduces new form start menu called start screen resembles home screen windows phone shown place desktop startup start screen serves primary method launching applications consists grid app tiles arranged columnar groups groups arranged without group names app tiles either small taking 1 square large taking 2 squares size also display dynamic content provided corresponding apps notifications slide shows users arrange individual app tiles entire groups additional section start screen called apps accessed via right click mouse upward swipe display installed apps categorized names semantic zoom feature available start screen apps view enables users target specific area group screen start screen uninstall apps directly windows 8.1 makes following changes start screen windows 8.1 reverts two changes featured windows 8 windows 8 removed start button taskbar favor ways invoking start screen windows 8.1 restores button windows 8 also showed start screen upon logon opposed editions windows show desktop windows 8.1 user may choose one see first windows 8.1 update boots desktop default non-tablet devices introduces ability switch taskbar start screen open metro-style app directing mouse cursor toward bottom screen windows 8.1 introduces new slide shutdown option allows users drag partially revealed lock screen image toward bottom screen shut operating system windows 8.1 update introduces visible power button start screen power button appear hardware device types default new account profiles windows 8.1 update also receive four additional tiles pinned start screen pc pc settings documents pictures windows rt pc settings tile added windows 8 searching start screen clicking search charm display search results within full-screen interface unlike previous versions windows searching start menu returned results multiple sources simultaneously windows 8 searches individual categories apps settings files default windows 8 searches apps user begins searching start screen search charm also search categories user interface via keyboard shortcuts pressing opens search charm search apps searches files searches settings search queries also redirected specific categories apps entered searching apps windows 8 display list apps support search charm frequently used apps prioritized users pin individual apps always appear search charm also search directly within apps user redirects entered search query specific app presses within app already open searching files windows 8 highlight words phrases match search query provide suggestions based content properties files appear information files associated programs sizes appear directly beneath filenames user hovers file mouse cursor long presses finger tooltip appear display additional information windows 8.1 searching longer opens full-screen interface results instead displayed metro-style flyout interface windows 8.1 also reinstates unified local search results optionally provide results bing dubbed smart search windows 8.1 bing optionally analyze user search habits return relevant content stored locally internet enabled smart search exposes additional search categories within user interface web images web videos accessed via new keyboard shortcut new full screen hero interface powered bing display aggregated multimedia photos youtube videos songs/albums xbox music content news articles wikipedia entries related search query like predecessor windows 8.1 allows users search setting file categories option search category apps removed interface keyboard shortcut previously associated functionality displays unified search results search charm also longer search within apps directly display list compatible apps search content within apps users must first open app available use search feature within app interface windows 8.1 update enhances bing smart search feature providing support natural language queries detect misspellings display apps settings relevant query example typing get apps windows display shortcut windows store windows 8.1 update also introduces visible search button start screen acts shortcut metro-style flyout interface windows 8 introduces redesigned lock screen interface based metro design language lock screen displays customizable background image current date time notifications apps detailed app status updates two new login methods optimized touch screens also available including four-digit pin picture password users allow use certain gestures performed selected picture log gestures take account shape start end points well direction however shapes gestures limited tapping tracing line circle microsoft found limiting gestures increased speed sign-ins three times compared allowing freeform methods wrong gestures always deny login lock pc five unsuccessful attempts text password provided windows 8.1 introduces ability display photo slide show lock screen feature display images local remote directories includes additional options use photos optimized current screen resolution disable slide show device running battery power display lock screen slide show instead turning screen period user inactivity lock screen also display interactive toast notifications examples users answer calls instant messages received skype contacts dismiss alarm notifications lock screen users also take photos without dismissing lock screen windows 8 introduces new forms notifications metro-style apps certain events file explorer pc settings component includes options globally disable toast notifications app notifications lock screen notification sounds notifications also disabled per-app basis settings charm windows 8 provides additional options suppress toast notifications 1 hour 3 hour 8 hour time intervals windows 8.1 introduces quiet hours feature also available windows phone allows users suppress notifications based time day e.g. notifications disabled 12:00 6:00 pm windows 8 allows users link profiles microsoft account provide additional functionality synchronization user data settings including belonging desktop allows integration microsoft services xbox live xbox music xbox video gaming multimedia skydrive online file storage windows 8 includes improved support multi-monitor configurations taskbar optionally shown multiple displays display also show dedicated taskbar addition options available prevent taskbar buttons appearing certain monitors wallpapers also spanned across multiple displays display separate wallpaper windows 8.1 includes improved support high-resolution monitors desktop scaling feature helps resize items desktop solve visibility problems screens high native resolution windows 8.1 also introduces per-display dpi scaling provides option scale 200 windows explorer renamed file explorer incorporates ribbon toolbar designed bring forward commonly used commands easy access button advances user back level folder hierarchy removed explorer windows xp also restored additionally file explorer features redesigned preview pane takes advantage widescreen layouts file explorer also provides built-in function mounting iso img vhd files virtual drives easier management files folders windows 8 introduces ability move selected files folders via drag drop parent folder subfolder listed within breadcrumb hierarchy address bar file explorer progress windows file operations also redesigned offering ability show multiple operations graph tracking transfer speeds ability pause resume file transfer new interface also introduced managing file name collisions file operation allowing users easily control conflicting files copied libraries introduced windows 7 individual icons changed user interface previously users change icons manually editing configuration files windows 8.1 however longer creates default libraries new users display libraries listing file explorer default instead windows 8.1 introduces shortcuts default user profile folders documents downloads pictures etc within pc location file explorer windows 8 ships internet explorer 10 run either desktop program operates similarly internet explorer 9 app new full-screen interface optimized use touchscreens internet explorer 10 also contains integrated version flash player available full desktop limited form within metro app windows 8.1 ships internet explorer 11 includes tab syncing webgl spdy support along expanded developer tools metro version also adds access favorites split-screen snapping multiple tabs additional option always display address bar tabs also available metro version also detect highlight phone numbers web page turn clickable links clicked initiate call compatible app skype windows 8 includes overhauled version task manager features following changes windows 8 introduces revised virtual also known on-screen keyboard interface optimized touchscreen devices includes wider spacing keys designed prevent common typing errors occur using touchscreens pressing holding key reveals related keys accessed via press swipe suggestions incomplete words available emoji characters also supported windows 8.1 introduces ability swipe space bar desired direction suggested word switch on-screen suggestions windows 8.1 update introduces new gesture allows users tap twice hold second tap drag drop highlighted text objects visible option hide show virtual keyboard also available windows 8 displays peek button password text boxes optionally allows users view passwords entered order ensure typed correctly feature disabled via group policy file history continuous data protection component file history automatically creates incremental backups files stored libraries including users participating homegroup user-specified folders different storage device another internal external hard drive storage space network share specific revisions files tracked restored using history functions file explorer file history replaces backup restore shadow copy known windows explorer previous versions main backup tool windows 8 unlike shadow copy performs block-level tracking files file history utilizes usn journal track changes simply copies revisions files backup location unlike backup restore file history back files encrypted efs windows 8 adds native support usb 3.0 allows faster data transfers improved power management compatible devices native stack includes support newer efficient usb attached scsi uas protocol turned default even usb 2.0 devices although must however supporting firmware/hardware take advantage windows 8.1 enhanced support power saving features usb storage devices addition without problems poorly implemented hardware degrading user experience hangs disconnects support advanced format hard drives without emulation included first time port windows arm architecture also created windows 8 known windows rt specifically optimized mobile devices tablets windows rt able run third-party windows store apps comes preinstalled version office 2013 specially redesigned touchscreen use windows 8.1 improves hardware support directx 11.2 alongside existing winpe-based windows setup used installations initiated booting dvd usb network upgrade assistant offered provide simpler faster process upgrading windows 8 previous versions windows program runs compatibility check scan device hardware software windows 8 compatibility allows user purchase download generate installation media dvd usb flash drive install windows 8 new installation process also allows users transfer user data clean installation windows similar program branded windows 8 setup used installations user already product key windows 8 implements oem activation 3.0 allows microsoft digitally distribute windows licenses original equipment manufacturers oems windows 8 devices store product keys directly firmware rather printed certificate authenticity coa sticker new system designed prevent oem product keys used computers licensed also allows installer automatically detect accept product key event re-installation windows 8.1 update adds new installation mode known wimboot wim image contains windows installation left compressed rather extracted system configured use files directly within system image installation method primarily designed reduce footprint windows installation devices small amounts storage system image also doubles recovery image speeding refresh reset operations supported systems unified extensible firmware interface uefi windows located solid-state drive emmc windows 8 incorporates improved support mobile broadband first-class method internet connectivity upon insertion sim card operating system automatically determine user carrier configure relevant connection settings using access point name database operating system also monitor mobile data usage changes behavior accordingly reduce bandwidth use metered networks carriers also offer dedicated windows store apps account management also installed automatically part connection process functionality demonstrated app could also display monthly data usage statistics live tile windows 8 also reduces need third-party drivers software implement mobile broadband providing generic driver providing integrated airplane mode option windows 8 supports geolocation windows 8.1 adds support nfc printing mobile broadband tethering auto-triggered vpn geofencing windows 8.1 update provides options network settings charm show estimated data usage selected network designate network metered connection windows 8 defaults hybrid boot mode operating system shut hibernates kernel allowing faster boot subsequent startup improvements compounded using processor cores startup default create seamless transition power-on self-test windows startup process manufacturers logos shown windows boot screen compatible systems uefi advanced startup menu uses graphical interface mouse touch support place text-based menu used previous versions increased boot speed devices uefi make difficult access using keyboard shortcuts boot menu launched within windows—using either pc settings app holding shift clicking restart option power menu using new -o switch shutdown.exe though legacy version advanced startup menu still enabled instead uefi firmware exposed windows via class drivers updated firmware capsules distributed update driver signed package inf file security catalog similarly devices driver installed windows prepares update installed next boot windows boot manager renders status information device boot screen windows 8 includes wddm 1.2 directx graphics infrastructure dxgi 1.2 desktop window manager runs times even systems unsupported graphics cards dwm also supports software rendering also includes support stereoscopic 3d content major features include preemptive multitasking finer granularity dma buffer primitive triangle pixel instruction-level reduced memory footprint improved resource sharing improved timeout detection recovery 16-bit color surface formats 565 5551 4444 mandatory windows 8 direct3d 11 video supports yuv 4:4:4/4:2:2/4:2:0/4:1:1 video formats 8 10 16-bit precision well 4 8-bit palettized formats windows 8.1 introduces wddm 1.3 adds support miracast enables wireless wired delivery compressed standard- high-definition video desktops tablets mobile phones devices windows 8 adds support printer driver architecture version 4 adds metro friendly interface well changes way architecture written windows 8.1 adds support wi-fi direct printing nfc printing native apis 3d printing xml-based 3d manufacturing format 3mf windows powershell microsoft task automation framework consisting command-line shell associated scripting language built .net framework powershell provides full access com wmi enabling administrators perform administrative tasks local remote windows systems windows 8 includes windows powershell v3.0 windows 8.1 comes windows powershell v4.0 features host new commands managing start screen windows defender windows components hardware network windows go feature exclusive enterprise version windows 8 allows organization provision bootable usb flash drives windows installation allowing users access managed environment compatible pc windows 8.1 updates feature enable booting usb composite device storage smart card function action center introduced windows 7 expanded include controls notifications new categories smartscreen status drive health status file history device software updates new automatic maintenance feature periodically perform number maintenance tasks diagnostics updates malware scans improve system performance pc settings app windows 8 used interact windows update although traditional interface control panel retained windows 8 able distribute firmware updates compatible devices configured automatically download windows updates metered networks new set windows powershell cmdlets enable adding removing features windows programs features applet control panel deployment image servicing management dism utility windows 8 includes features previously available imagex able periodically check component store corruption repair report amount disk space use winsxs folder also determine cleanup performed windows 8 detect system experiencing issues preventing system functioning correctly automatically launch advanced startup menu access diagnostic repair functions system recovery windows 8 introduced new functions known collectively push-button reset allows user re-install windows without needing use installation media feature consists reset refresh functions accessible within advanced boot options menu pc settings options reboot system windows recovery environment perform requested operation refresh preserves user profiles settings windows store apps reset performs clean installation windows reset function may also perform specialized disk wiping formatting procedures added security operations remove installed desktop applications system users also create custom disk image use refresh reset windows 8 introduces virtual smart card support digital certificate smart card stored onto user machine protected trusted platform module thereby eliminating need user physically insert smart card though entering pin still required virtual smart card support enables new two-factor authentication scenarios windows 8.1 improves functionality simplifying device enrollment process virtual smart cards introduces additional virtual smart card functionality metro-style applications enrollment management features via winrt apis windows 8.1 features pervasive support biometric authentication throughout operating system includes native fingerprint registration feature enables use fingerprint tasks signing device purchasing apps windows store consenting authentication prompts e.g. user account control windows 8.1 also introduces new winrt apis biometrics windows rt logging microsoft account automatically activates passive device encryption feature-limited version bitlocker seamlessly encrypts contents mobile devices protect contents windows 8.1 device encryption similarly available x86-based windows devices automatically encrypting user data soon operating system configured user signs microsoft account supported active directory network recovery key generated saved directly user account unlike bitlocker device encryption x86-based devices requires device meet connected standby specifications among requirements requires device use solid state storage ram soldered directly motherboard trusted platform module tpm 2.0 chip windows 8.1 introduces assigned access formerly called kiosk mode restricts windows device running single predetermined metro-style app windows 8.1 slated include provable pc health feature would allow owners subject devices connected network remote pc analysis provable pc health connected devices would periodically send various configuration-related information cloud service would provide suggestions remediation upon detection issue however feature dropped operating system general availability windows 8 integrates windows live family safety operating system allowing parents restrict user activity via web filtering application restriction computer usage time limits parental controls functionality introduced windows vista previously partially removed windows 7 made part windows live family safety instead notable change family safety administrators specify time periods computer usage example administrator restrict user account remained signed total time period one hour previous versions windows administrators could restrict accounts based time day windows 8 introduced four new features offer security startup process uefi secure boot trusted boot measured boot early launch anti-malware elam four secure boot native feature windows 8 part uefi startup uefi firmware checks validity digital signature present windows boot loader bootmgfw.efi signed microsoft public key signature check happens every time computer booted prevents malware infecting system operating system loads uefi firmware allow signatures keys enrolled database prior windows 8 release microsoft announced certified computers ship microsoft public key enrolled secure boot enabled default however following announcement company accused critics free open-source software advocates including free software foundation trying use secure boot hinder outright prevent installation alternative operating systems linux microsoft denied secure boot requirement intended serve form lock-in clarified x86 certified systems arm systems must allow secure boot enter custom mode disabled trusted boot feature windows boot loader ensures integrity microsoft components loaded memory including elam loads last elam ensures third-party boot drivers trustworthy loaded elam check fails elam use either windows defender third-party compatible antivirus 2011 build conference anaheim california microsoft showed windows 8 machine prevent infected usb flash memory compromising boot process measured boot attest state client machine sending details configuration remote machine feature relies attestation feature trusted platform module designed verify boot integrity client windows platform binary table allows executable files stored within uefi firmware execution startup microsoft states feature meant allow critical software persist even operating system changed reinstalled 'clean configuration specifically anti-theft security software also mis-used including lenovo lenovo service engine feature windows 8 includes updated windows defender antivirus program defends system broad range malware including computer viruses computer worms spyware windows 8.1 augments network inspection system nis network intrusion detection system feature present microsoft security essentials since july 2010 windows 8 includes various features controlled keyboard shortcuts hyper-v native hypervisor previously offered windows server included windows 8 pro replacing windows virtual pc hosted hypervisor storage spaces storage virtualization technology succeeds logical disk manager allows organization physical disks logical volumes similar logical volume manager linux raid1 raid5 higher abstraction level storage space behaves like physical disk user thin provisioning available disk space spaces organized within storage pool i.e collection physical disks span multiple disks different sizes performance technology usb sata sas process adding new disks replacing failed older disks fully automatic controlled powershell commands storage pool host multiple storage spaces storage spaces built-in resiliency disk failures achieved either disk mirroring striping parity across physical disks storage pool refs filesystem limited 4 pb 4096 tb limits total number storage pools number storage spaces within pool review ars technica concluded storage spaces windows 8 good foundation current iteration simply flawed recommend circumstances microsoft mvp helge klein also criticized storage spaces unsuitable touted market soho users storage spaces enhanced windows server 2012 r2 tiering caching support used caching ssd new features added windows 8.1 instead windows 8.1 gained support specific features sshd drives e.g host-hinted lba caching tp_042v14_sata31_hybrid information windows 8.1 also gained support nvm express nvme new industry standard protocol pcie-attached storage pcie flash cards
node15:Wikipedia entry. Entry name: Authorization. Entry content: authorization authorization function specifying access rights/privileges resources related information security computer security general access control particular formally authorize define access policy example human resources staff normally authorized access employee records policy usually formalized access control rules computer system operation system uses access control rules decide whether access requests authenticated consumers shall approved granted disapproved rejected resources include individual files item data computer programs computer devices functionality provided computer applications examples consumers computer users computer software hardware computer access control computer systems networks rely access policies access control process divided following phases policy definition phase access authorized policy enforcement phase access requests approved disapproved authorization function policy definition phase precedes policy enforcement phase access requests approved disapproved based previously defined authorizations modern multi-user operating systems include access control thereby rely authorization access control also uses authentication verify identity consumers consumer tries access resource access control process checks consumer authorized use resource authorization responsibility authority department manager within application domain often delegated custodian system administrator authorizations expressed access policies types policy definition application e.g form access control list capability policy administration point e.g xacml basis principle least privilege consumers authorized access whatever need jobs older single user operating systems often weak non-existent authentication access control systems anonymous consumers guests consumers required authenticate often limited authorization distributed system often desirable grant access without requiring unique identity familiar examples access tokens include keys certificates tickets grant access without proving identity trusted consumers often authorized unrestricted access resources system must verified access control system make access approval decision partially trusted guests often restricted authorization order protect resources improper access usage access policy operating systems default grant consumers full access resources others opposite insisting administrator explicitly authorizes consumer use resource even access controlled combination authentication access control lists problems maintaining authorization data trivial often represents much administrative burden managing authentication credentials often necessary change remove user authorization done changing deleting corresponding access rules system using atomic authorization alternative per-system authorization management trusted third party securely distributes authorization information public policy authorization feature trusted systems used security social control banking authorization hold placed customer account purchase made using debit card credit card publishing sometimes public lectures freely available texts published without approval author called unauthorized texts example 2002 'the theory everything origin fate universe collected stephen hawking lectures published without permission per copyright law
node16:Wikipedia entry. Entry name: CUPS. Entry content: cups cups formerly acronym common unix printing system modular printing system unix-like computer operating systems allows computer act print server computer running cups host accept print jobs client computers process send appropriate printer cups consists print spooler scheduler filter system converts print data format printer understand backend system sends data print device cups uses internet printing protocol ipp basis managing print jobs queues also provides traditional command line interfaces system v berkeley print systems provides support berkeley print system line printer daemon protocol limited support server message block smb protocol system administrators configure device drivers cups supplies editing text files adobe postscript printer description ppd format number user interfaces different platforms configure cups built-in web-based interface cups free software provided apache license michael sweet owned easy software products started developing cups 1997 first public betas appeared 1999 original design cups used line printer daemon protocol lpd protocol due limitations lpd vendor incompatibilities internet printing protocol ipp chosen instead cups quickly adopted default printing system linux distributions march 2002 apple inc. adopted cups printing system mac os x 10.2 february 2007 apple inc. hired chief developer michael sweet purchased cups source code cups provides mechanism allows print jobs sent printers standard fashion print-data goes scheduler sends jobs filter system converts print job format printer understand filter system passes data backend —a special filter sends print data device network connection system makes extensive use postscript rasterization data convert data format suitable destination printer cups offers standard modularised printing system process numerous data formats print server cups difficult find standard printer management system would accommodate wide variety printers market using printer languages formats instance system v berkeley printing systems largely incompatible required complicated scripts workarounds convert program data format printable format often could detect file format sent printer thus could automatically correctly convert data stream additionally data conversion performed individual workstations rather central server cups allows printer manufacturers printer-driver developers easily create drivers work natively print server processing occurs server allowing easier network-based printing unix printing systems samba installed users address printers remote windows computers generic postscript drivers used printing across network cups scheduler implements internet printing protocol ipp http/1.1 helper application cups-lpd converts line printer daemon protocol lpd requests ipp scheduler also provides web-based interface managing print jobs configuration server documentation cups authorization module controls ipp http messages pass system ipp/http packets authorized sent client module listens processes incoming connections client module also responsible executing external cgi programs needed support web-based printers classes job status monitoring administration module processed requests sends ipp module performs uniform resource identifier uri validation prevent client sidestepping access controls authentication http server uri text string indicates name address used refer abstract physical resource network scheduler allows classes printers applications send requests groups printers class allowing scheduler direct job first available printer class jobs module manages print jobs sending filter backend processes final conversion printing monitoring status messages processes cups scheduler utilizes configuration module parses configuration files initializes cups data structures starts stops cups program configuration module stop cups services configuration file processing restart service processing complete logging module handles logging scheduler events access error page log files main module handles timeouts dispatch i/o requests client connections watching signals handling child process errors exits reloading server configuration files needed modules used scheduler include cups process variety data formats print server converts print-job data final language/format printer via series filters uses mime types identifying file formats cups system assigned print job scheduler passed cups filter system converts data format suitable printer start-up cups daemon loads two mime databases codice_1 defines known file types cups accept data codice_2 defines programs process particular mime type codice_1 file syntax codice_4 example detect html file following entry would applicable codice_5 second line matches file contents specified mime type determining first kilobyte text file holds printable characters characters include html markup pattern matches filter system would mark file mime type text/html codice_2 file syntax codice_8 source field designates mime type determined looking codice_1 file destination field lists type output requested determines program used also retrieved codice_1 cost field assists selection sets filters converting file last field program determines filter program use perform data conversion examples filtering process works taking input data pre-formatted six arguments determines type data input filter used use mime databases instance image data detected processed particular filter html data detected processed another filter cups convert supplied data either postscript data directly raster data converted postscript data additional filter applied called prefilter runs postscript data another postscript converter add printer specific options like selecting page ranges print setting n -up mode device-specific things pre-filtering done data either sent directly cups backend using postscript printer passed another filter like foomatic linuxprinting.org alternatively passed ghostscript converts postscript intermediary cups-raster format intermediary raster format passed onto final filter converts raster data printer-specific format default filters included cups include however several alternatives integrate cups hplip previously known hp-ijs provides linux+cups drivers hp printers gutenprint previously known gimp-print range high-quality printer drivers mostly inkjet printers turboprint linux another range quality printer drivers wide range printers backends ways cups sends data printers several backends available cups parallel serial usb ports cups-pdf pdf virtual printing well network backends operate via ipp jetdirect appsocket line printer daemon lpd smb protocols new codice_11 backend cups 1.4 provides bonjour dns-sd based printer discovery cups 1.6 bonjour printer discovery sharing using avahi also supported cups provides system v berkeley printing commands users continue traditional commands printing via cups cups uses port 631 tcp udp standard ipp port optionally port 515 inetd launchd solaris service management facility xinetd use cups-lpd helper program support lpd printing cups installed codice_12 system v printing system command codice_13 berkeley printing system commands installed compatible programs allows standard interface cups allows maximum compatibility existing applications rely printing systems several tools exist help set cups platforms cups web-based administration interface runs port 631 particularly helps organisations need monitor print jobs add print queues printers remotely cups 1.0 provided simple class job printer-monitoring interface web browsers cups 1.1 replaced interface enhanced administration interface allows users add modify delete configure control classes jobs printers cups 1.2 later provide revamped web interface features improved readability design support automatically discovered printers better access system logs advanced settings gnome print settings formerly called cups manager add new cups printers manage cups printers queues gnome widget toolkit gtk+ included integrated printing support based cups version 2.10 released 2006 ubuntu accessed graphical menu system administration printing kdeprint framework kde contains various gui-tools act cups front-ends allows administration classes print queues print jobs includes printer wizard assist adding new printers amongst features kdeprint first appeared kde 2.2 kdeprint supports several different printing platforms cups one best-supported replaced previous version printing support kde qtcups backwards compatible module kde kprinter dialogue-box program serves main tool sending jobs print device also started command line kdeprint includes system pre-filter jobs handed cups handle jobs converting files pdf filters described pair desktop/xml files kdeprint main components include mac os x 10.5 printers configured print fax panel system preferences printer proxy applications display print queues allow additional configuration printers set earlier versions mac os x also included printer setup utility supplied configuration options missing earlier versions print fax preference pane printersetup system manage cups queues takes approach assigning text file describe print queue 'printersetupfiles may added text files called 'printersetuplists allows logical grouping printers printersetup project remains infancy starting red hat linux 9 red hat provided integrated print manager based cups integrated gnome allowed adding printers via user interface similar one microsoft windows uses new printer could added using add new printer wizard along changing default printer-properties window containing list installed printers jobs could also started stopped using print manager printer could paused using context menu pops printer icon right-clicked eric raymond criticised system piece luxury ignorance raymond attempted install cups using fedora core 1 print manager found non-intuitive criticised interface designers designing user point-of-view mind found idea printer queues obvious users create queues local computer queues actually created cups server also found plethora queue type options confusing could choose networked cups ipp networked unix lpd networked windows smb networked novell ncp networked jetdirect found help file singularly unhelpful largely irrelevant user needs raymond used cups general topic show user interface design linux desktops needs rethinking careful design stated meta-problem configuration wizard approved rituals gui standardized clicky buttons help popping browser etc etc n't central attribute supposed achieve discoverability quality every point interface prompts actions attached learn next project quality easy software products original creators cups created gui provided support many printers implemented postscript rip esp print pro ran windows unix linux longer available support product ended december 31 2007 cups initially called common unix printing system name shortened cups beginning cups 1.4 due legal concerns unix trademark
node17:Wikipedia entry. Entry name: Email_authentication. Entry content: email authentication email authentication validation collection techniques aimed providing verifiable information origin email messages validating domain ownership message transfer agents mta participated transferring possibly modifying message original base internet email simple mail transfer protocol smtp feature forged sender addresses emails practice known email spoofing widely used phishing email spam various types fraud combat large number competing email authentication proposals developed fairly recently three widely adopted – spf dkim dmarc results validation used automated email filtering assist recipients selecting appropriate action article cover user authentication email submission retrieval early 1980s simple mail transfer protocol smtp designed provided real verification sending user system problem email systems run trusted corporations universities since commercialization internet early 1990s spam phishing crimes increasingly involve email email authentication necessary first step towards identifying origin messages thereby making policies laws enforceable hinging domain ownership stance emerged early 2000 implies coarse-grained authentication given domains appear right part email addresses sign fine-grain authentication user level achieved means pretty good privacy s/mime present digital identity needs managed individual smtp defines message transport message content thus defines mail envelope parameters envelope sender header except trace information body message std 10 define smtp envelope std 11 define message header body formally referred internet message format smtp defines trace information message saved header using following two fields mail user agent mua knows outgoing mail smtp server configuration mta relay server typically determines server connect looking mx mail exchange dns resource record recipient domain name path depicted left reconstructed ground trace header fields host adds top header receives message important realize first lines top header usually trusted recipient fact lines written machines recipient administrative management domain admd act upon explicit mandate contrast lines prove involvement b well purported author mua could counterfeit created c. codice_1 field shown epoch-making piece header codice_2 written e mail delivery agent mda based message envelope additional trace fields designed email authentication populate top header normally messages sent author admd go directly destination mx b → figures sender admd add authentication tokens message goes boxes common cases schematized follows spf allows receiver check email claimed come specific domain comes ip address authorized domain administrators usually domain administrator authorize ip addresses used outbound mtas including proxy smarthost ip address sending mta guaranteed valid transmission control protocol establishes connection checking remote host reachable receiving mail server receives codice_3 smtp command soon connection set codice_4 beginning message contain domain name spf verifier queries domain name system dns matching spf record exists specify ip addresses authorized domain administrator result pass fail intermediate result systems generally take account anti-spam filtering dkim checks message content deploying digital signatures rather using digital certificates keys signature-verification distributed via dns way message gets associated domain name dkim-compliant domain administrator generates one pairs asymmetric keys hands private keys signing mta publishes public keys dns dns labels structured codice_5 selector identifies key pair codice_6 fixed keyword followed signing domain name publication occurs authority domain admd injecting message smtp transport system signing mta creates digital signature covers selected fields header body beginning signature cover substantive header fields codice_7 codice_8 codice_9 codice_10 added message header trace field number relays receive forward message every hop signature verified retrieving public key dns long intermediate relays n't modify signed parts message dkim-signatures remain valid dmarc allows specification policy authenticated messages built top two existing mechanisms sender policy framework spf domainkeys identified mail dkim allows administrative owner domain publish policy dns records specify mechanism dkim spf employed sending email domain check codice_7 field presented end users receiver deal failures reporting mechanism actions performed policies range methods proposed either deprecated yet gained widespread support included sender id certified server validation domainkeys adsp allows specification policy messages signed author domain message go dkim authentication first adsp demand punishing treatment message signed author domain —as per codice_7 header field adsp record codice_13 published dns label codice_14 adsp designed domains heavily abused phishing similar fraud may want forgo mail facilities mailing lists non delivery reports happen remain unsigned exchange cut abuse adsp demoted historic november 2013 vbr adds vouch already authenticated identity method requires globally recognized authorities certify reputation domains sender apply reference vouching authority reference accepted published dns branch managed authority vouched sender add codice_15 header field messages sends also add dkim signature use authentication method spf receiver validating sender identity verify vouch claimed codice_15 looking reference applications avoid using method means authentication nevertheless often carried results written codice_1 header field besides tcp information required smtp specification ip reverse confirmed looking ip address name found indication ip set properly dns reverse resolution range ip addresses delegated admd uses remain managed network provider latter case useful identity related message obtained rfc 8601 defines trace header field codice_18 receiver record results email authentication checks carried multiple results multiple methods reported field separated semicolons wrapped appropriate example following field purportedly written codice_19 reports spf dkim results first token field name codice_19 id authentication server token known authserv-id receiver supporting rfc 8601 responsible remove rename false header claiming belong domain downstream filters get confused however filters still need configured know identities domain may use mail user agent mua slightly harder learn identities trust since users receive email multiple domains—e.g. multiple email addresses -— domains could let codice_18 fields pass looked neutral way malicious sender forge authserv-id user would trust message arrived different domain legitimate codice_18 typically appears codice_1 field domain message relayed additional codice_1 fields may appear top header message got transferred internally servers belonging trusted admd internet assigned numbers authority maintains registry email authentication parameters parameters need registered though example local policy values designed site internal use correspond local configuration need registration hand header field meant report results based data already present message data retrieved third parties global reputation systems compliant rfc 7601 example attempt register add dnswl results field rejected basis
node18:Wikipedia entry. Entry name: Timeline_of_DOS_operating_systems. Entry content: timeline dos operating systems article presents timeline events history x86 dos disk operating systems 1973 2016 operating systems named dos generally part scope timeline dos releases forms
node19:Wikipedia entry. Entry name: Firewall_(computing). Entry content: firewall computing computing firewall network security system monitors controls incoming outgoing network traffic based predetermined security rules firewall typically establishes barrier trusted internal network untrusted external network internet firewalls often categorized either network firewalls host-based firewalls network firewalls filter traffic two networks run network hardware host-based firewalls run host computers control network traffic machines term firewall originally referred wall intended confine fire within building later uses refer similar structures metal sheet separating engine compartment vehicle aircraft passenger compartment term applied late 1980s network technology emerged internet fairly new terms global use connectivity predecessors firewalls network security routers used late 1980s separated networks one another thus halting spread problems one network another first reported type network firewall called packet filter packet filters act inspecting packets transferred computers packet match packet filter set filtering rules packet filter either drops silently discards packet rejects packet discards generates internet control message protocol notification sender else allowed pass packets may filtered source destination network addresses protocol source destination port numbers bulk internet communication 20th early 21st century used either transmission control protocol tcp user datagram protocol udp conjunction well-known ports enabling firewalls era distinguish thus control specific types traffic web browsing remote printing email transmission file transfer unless machines side packet filter used non-standard ports first paper published firewall technology 1988 engineers digital equipment corporation dec developed filter systems known packet filter firewalls bell labs bill cheswick steve bellovin continued research packet filtering developed working model company based original first generation architecture 1989–1990 three colleagues bell laboratories dave presotto janardan sharma kshitij nigam developed second generation firewalls calling circuit-level gateways second-generation firewalls perform work first-generation predecessors also maintain knowledge specific conversations endpoints remembering port number two ip addresses using layer 4 transport layer osi model conversation allowing examination overall exchange nodes type firewall potentially vulnerable denial-of-service attacks bombard firewall fake connections attempt overwhelm firewall filling connection state memory marcus ranum wei xu peter churchyard released application firewall known firewall toolkit fwtk october 1993 became basis gauntlet firewall trusted information systems key benefit application layer filtering understand certain applications protocols file transfer protocol ftp domain name system dns hypertext transfer protocol http useful able detect unwanted application service attempting bypass firewall using disallowed protocol allowed port detect protocol abused harmful way 2012 so-called next-generation firewall ngfw wider deeper inspection application layer example existing deep packet inspection functionality modern firewalls extended include firewalls generally categorized network-based host-based network-based firewalls positioned gateway computers lans wans intranets either software appliances running general-purpose hardware hardware-based firewall computer appliances firewall appliances may also offer functionality internal network protect acting dhcp vpn server network host-based firewalls positioned network node control network traffic machines host-based firewall may daemon service part operating system agent application endpoint security protection advantages disadvantages however role layered security firewalls also vary type depending communication originates intercepted state communication traced network layer firewalls also called packet filters operate relatively low level tcp/ip protocol stack allowing packets pass firewall unless match established rule set firewall administrator may define rules default rules may apply term packet filter originated context bsd operating systems network layer firewalls generally fall two sub-categories stateful stateless commonly used packet filters various versions unix ipfw freebsd mac os x 10.7 npf netbsd pf mac os x 10.4 openbsd bsds iptables ipchains linux ipfilter application-layer firewalls work application level tcp/ip stack i.e. browser traffic telnet ftp traffic may intercept packets traveling application application firewalls function determining whether process accept given connection application firewalls accomplish function hooking socket calls filter connections application layer lower layers osi model application firewalls hook socket calls also referred socket filters application firewalls work much like packet filter application filters apply filtering rules allow/block per process basis instead filtering connections per port basis generally prompts used define rules processes yet received connection rare find application firewalls combined used conjunction packet filter also application firewalls filter connections examining process id data packets rule set local process involved data transmission extent filtering occurs defined provided rule set given variety software exists application firewalls complex rule sets standard services sharing services per-process rule sets limited efficacy filtering every possible association may occur processes also per-process rule sets defend modification process via exploitation memory corruption exploits limitations application firewalls beginning supplanted new generation application firewalls rely mandatory access control mac also referred sandboxing protect vulnerable services proxy server running either dedicated hardware software general-purpose machine may act firewall responding input packets connection requests example manner application blocking packets proxy server gateway one network another specific network application sense functions proxy behalf network user proxies make tampering internal system external network difficult misuse one internal system would necessarily cause security breach exploitable outside firewall long application proxy remains intact properly configured conversely intruders may hijack publicly reachable system use proxy purposes proxy masquerades system internal machines use internal address spaces enhances security crackers may still employ methods ip spoofing attempt pass packets target network firewalls often network address translation nat functionality hosts protected behind firewall commonly addresses private address range defined rfc 1918 firewalls often functionality hide true address computer connected network originally nat function developed address limited number ipv4 routable addresses could used assigned companies individuals well reduce amount therefore cost obtaining enough public addresses every computer organization although nat considered security feature hiding addresses protected devices become often used defense network reconnaissance
node20:Wikipedia entry. Entry name: Microsoft_CryptoAPI. Entry content: microsoft cryptoapi microsoft windows platform specific cryptographic application programming interface also known variously cryptoapi microsoft cryptography api ms-capi simply capi application programming interface included microsoft windows operating systems provides services enable developers secure windows-based applications using cryptography set dynamically linked libraries provides abstraction layer isolates programmers code used encrypt data crypto api first introduced windows nt 4.0 enhanced subsequent versions cryptoapi supports public-key symmetric key cryptography though persistent symmetric keys supported includes functionality encrypting decrypting data authentication using digital certificates also includes cryptographically secure pseudorandom number generator function cryptgenrandom cryptoapi works number csps cryptographic service providers installed machine csps modules actual work encoding decoding data performing cryptographic functions vendors hsms may supply csp works hardware windows vista features update crypto api known cryptography api next generation cng better api factoring allow functions work using wide range cryptographic algorithms includes number newer algorithms part national security agency nsa suite b also flexible featuring support plugging custom cryptographic apis cng runtime however cng key storage providers still support symmetric keys cng works user kernel mode also supports algorithms cryptoapi microsoft provider implements cng housed bcrypt.dll cng also supports elliptic curve cryptography uses shorter keys expected level security efficient rsa cng api integrates smart card subsystem including base smart card cryptographic service provider base csp module encapsulates smart card api smart card manufacturers make devices compatible rather provide from-scratch solution cng also adds support dual_ec_drbg pseudorandom number generator defined nist sp 800-90a could expose user eavesdropping national security agency since contains kleptographic backdoor unless developer remembers generate new base points different cryptographically secure pseudorandom number generator true random number generator publish generated seed order remove nsa backdoor also slow used called explicitly cng also replaces default prng ctr_drbg using aes block cipher earlier rng defined superseded fips 186-2 based either des sha-1 broken ctr_drbg one two algorithms nist sp 800-90 endorsed schneier hash_drbg
node21:Wikipedia entry. Entry name: Smart_card. Entry content: smart card smart card chip card integrated circuit card icc physical electronic authorization device used control access resource typically plastic credit card sized card embedded integrated circuit many smart cards include pattern metal contacts electrically connect internal chip others contactless smart cards provide personal identification authentication data storage application processing applications include identification financial mobile phones sim public transit computer security schools healthcare smart cards may provide strong security authentication single sign-on sso within organizations several nations deployed smart cards throughout populations 1968 1969 helmut gröttrup jürgen dethloff filled several patents around identification card 1974 roland moreno patented secured memory card later dubbed smart card 1976 jürgen dethloff introduced known element called secret identify gate user usp 4105156 1977 michel ugon honeywell bull invented first microprocessor smart card two chips one microprocessor one memory 1978 patented self-programmable one-chip microcomputer spom defines necessary architecture program chip three years later motorola used patent cp8 time bull 1,200 patents related smart cards 2001 bull sold cp8 division together patents schlumberger subsequently combined internal smart card department cp8 create axalto 2006 axalto gemplus time world top two smart-card manufacturers merged became gemalto 2008 dexa systems spun schlumberger acquired enterprise security services business included smart-card solutions division responsible deploying first large-scale smart-card management systems based public key infrastructure pki first mass use cards telephone card payment french payphones starting 1983 télécarte microchips integrated french carte bleue debit cards 1992 customers inserted card merchant point-of-sale pos terminal typed personal identification number pin transaction accepted limited transactions paying small highway tolls processed without pin smart-card-based electronic purse systems store funds card readers need network connectivity entered european service mid-1990s common germany geldkarte austria quick wertkarte belgium proton france moneo netherlands chipknip chipper decommissioned 2001 switzerland cash norway mondex spain monedero 4b sweden cash decommissioned 2004 finland avant uk mondex denmark danmønt portugal porta-moedas multibanco private electronic purse systems also deployed marines corps usmc parris island allowing small amount payments cafeteria since 1990s smart cards subscriber identity modules sims used gsm mobile-phone equipment mobile phones widely used across world smart cards become common europay mastercard visa emv -compliant cards equipment widespread deployment led european countries united states started later deploying emv technology 2014 deployment still progress 2018 typically country national payment association coordination mastercard international visa international american express japan credit bureau jcb jointly plan implement emv systems historically 1993 several international payment companies agreed develop smart-card specifications debit credit cards original brands mastercard visa europay first version emv system released 1994 1998 specifications became stable emvco maintains specifications emvco purpose assure various financial institutions retailers specifications retain backward compatibility 1998 version emvco upgraded specifications 2000 2004 emv compliant cards first accepted malaysia 2005 later united states 2014 mastercard first company allowed use technology united states united states felt pushed use technology increase identity theft credit card information stolen target late 2013 one largest indicators american credit card information safe target made decision april 30 2014 would try implement smart chip technology order protect future credit card identity theft 2014 consensus america enough security measures avoid credit card theft smart chip necessary cost smart chip technology significant corporations want pay united states debate came online credit theft insecure enough united states invest technology adaptation emv increased significantly 2015 liability shifts occurred october credit card companies contactless smart cards require physical contact card reader becoming popular payment ticketing typical uses include mass transit motorway tolls visa mastercard implemented version deployed 2004–2006 u.s. visa current offering called visa contactless contactless fare collection systems incompatible though mifare standard card nxp semiconductors considerable market share us europe use contactless smart cards transport also grown use low cost chips nxp mifare ultralight paper/card/pet rather pvc reduced media cost used low cost tickets short term transport passes 1 year typically cost typically 10 pvc smart card larger memory distributed vending machines ticket offices agents use paper/pet less harmful environment traditional pvc cards greenpeace confidex see also transport/transit/id applications smart cards also introduced identification entitlement regional national international organizations uses include citizen cards drivers ’ licenses patient cards malaysia compulsory national id mykad enables eight applications 18 million users contactless smart cards part icao biometric passports enhance security international travel smart card may following generic characteristics since april 2009 japanese company manufactured reusable financial smart cards made paper contact smart cards contact area approximately comprising several gold-plated contact pads pads provide electrical connectivity inserted reader used communications medium smart card host e.g. computer point sale terminal mobile telephone cards contain batteries power supplied card reader iso/iec 7810 iso/iec 7816 series standards define chips financial cards used subscriber identity modules sims mobile phones programmed differently embedded different piece pvc chip manufacturers building demanding gsm/3g standards example although emv standard allows chip card draw 50 terminal cards normally well telephone industry 6 limit allows smaller cheaper financial card terminals communication protocols contact smart cards include t=0 character-level transmission protocol defined iso/iec 7816-3 t=1 block-level transmission protocol defined iso/iec 7816-3 contactless smart cards communicate powered reader rf induction technology data rates 106–848 kbit/s cards require proximity antenna communicate like smart cards contacts contactless cards internal power source instead use inductor capture incident radio-frequency interrogation signal rectify use power card electronics contactless smart media made pvc paper/card pet finish meet different performance cost durability requirements apdu transmission contactless interface defined iso/iec 14443-4 hybrid cards implement contactless contact interfaces single card dedicated modules/storage processing dual-interface cards implement contactless contact interfaces single card shared storage processing example porto multi-application transport card called andante uses chip contact contactless iso/iec 14443 type b interfaces ccid chip card interface device usb protocol allows smart card connected computer using standard usb interface allows smart card used security token authentication data encryption bitlocker typical ccid usb dongle may contain sim smart cards serve credit atm cards fuel cards mobile phone sims authorization cards pay television household utility pre-payment cards high-security identification access badges public transport public phone payment cards smart cards may also used electronic wallets smart card chip loaded funds pay parking meters vending machines merchants cryptographic protocols protect exchange money smart card machine connection bank needed holder card may use even owner examples proton geldkarte chipknip moneo german geldkarte also used validate customer age vending machines cigarettes best known payment cards classic plastic card roll-outs started 2005 u.s. asia europe followed 2006 contactless non-pin transactions cover payment range 5–50 iso/iec 14443 paypass implementation paypass implementations conform emv non-emv cards work like magnetic stripe cards common u.s. paypass magstripe visa msd cards hold maintain account balance payment passes without pin usually off-line mode security transaction greater magnetic stripe card transaction emv cards either contact contactless interfaces work normal emv card contact interface via contactless interface work somewhat differently card commands enabled improved features lower power shorter transaction times subscriber identity modules used mobile-phone systems reduced-size smart cards using otherwise identical technologies smart-cards authenticate identity sometimes employ public key infrastructure pki card stores encrypted digital certificate issued pki provider along relevant information examples include u.s. department defense dod common access card cac cards used governments citizens include biometric identification data cards provide superior two- three-factor authentication smart cards always privacy-enhancing subject may carry incriminating information card contactless smart cards read within wallet even garment simplify authentication however criminals may access data cards cryptographic smart cards often used single sign-on advanced smart cards include specialized cryptographic hardware uses algorithms rsa digital signature algorithm dsa today cryptographic smart cards generate key pairs board avoid risk one copy key since design usually n't way extract private keys smart card smart cards mainly used digital signatures secure identification common way access cryptographic smart card functions computer use vendor-provided pkcs 11 library microsoft windows cryptographic service provider csp api also supported widely used cryptographic algorithms smart cards excluding gsm so-called crypto algorithm triple des rsa key set usually loaded des generated rsa card personalization stage smart cards also made support national institute standards technology nist standard personal identity verification fips 201 turkey implemented first smart card driver license system 1987 turkey high level road accidents decided develop use digital tachograph devices heavy vehicles instead existing mechanical ones reduce speed violations since 1987 professional driver licenses turkey issued smart cards professional driver required insert driver license digital tachograph starting drive tachograph unit records speed violations driver gives printed report driving hours driver also monitored reported 1990 european union conducted feasibility study bevac consulting engineers titled feasibility study respect european electronic drivers license based smart-card behalf directorate general vii study chapter seven describes turkey experience argentina mendoza province began using smart card driver licenses 1995 mendoza also high level road accidents driving offenses poor record recovering fines smart licenses hold up-to-date records driving offenses unpaid fines also store personal information license type number photograph emergency medical information blood type allergies biometrics fingerprints stored chip card holder wishes argentina government anticipates system help collect 10 million per year fines 1999 gujarat first indian state introduce smart card license system 2005 issued 5 million smart card driving licenses people 2002 estonian government started issue smart cards named id kaart primary identification citizens replace usual passport domestic eu use 2010 1 million smart cards issued total population 1.3 million widely used internet banking buying public transport tickets authorization various websites etc start 2009 entire population belgium issued eid cards used identification cards contain two certificates one authentication one signature signature legally enforceable services belgium use eid authorization spain started issuing national id cards dni form smart cards 2006 gradually replaced older ones smart cards idea many bureaucratic acts could done online failure administration adapt still mostly requires paper documents personal presence august 14 2012 id cards pakistan replaced smart card third generation chip-based identity document produced according international standards requirements card 36 physical security features latest encryption codes smart card replaced nicop id card overseas pakistani smart cards may identify emergency responders skills cards like allow first responders bypass organizational paperwork focus time emergency resolution 2004 smart card alliance expressed needs enhance security increase government efficiency reduce identity fraud protect personal privacy establishing mandatory government-wide standard secure reliable forms identification emergency response personnel carry cards positively identified emergency situations widepoint corporation smart card provider fema produces cards contain additional personal information medical records skill sets 2007 open mobile alliance oma proposed new standard defining v1.0 smart card web server scws http server embedded sim card intended smartphone user non-profit trade association simalliance promoting development adoption scws simalliance states scws offers end-users familiar os-independent browser-based interface secure personal sim data mid-2010 simalliance reported widespread industry acceptance scws. ref name= http //www.simalliance.org/en t=/documentmanager/sfdoc.file.supply fileid=1279268442341 /ref oma maintaining standard approving v1.1 standard may 2009 v1.2 expected approved october 2012 smart cards also used identify user accounts arcade machines smart cards used transit passes integrated ticketing used many public transit operators card users may also make small purchases using cards operators offer points usage exchanged retailers benefits examples include singapore cepas ontario presto card hong kong octopus card london oyster card ireland leap card brussels mobib québec opus card san francisco clipper card auckland hop brisbane go card perth smartrider sydney opal card victoria myki however present privacy risk allow mass transit operator government track individual movement finland example data protection ombudsman prohibited transport operator helsinki metropolitan area council ytv collecting information despite ytv argument card owner right list trips paid card earlier information used investigation myyrmanni bombing uk department transport mandated smart cards administer travel entitlements elderly disabled residents schemes let residents use cards bus passes also used taxi concessionary transport one example smartcare go scheme provided ecebs uk systems use itso ltd specification schemes uk include period travel passes carnets tickets day passes stored value used pay journeys concessions school pupils students job seekers also supported mostly based itso ltd specification many smart transport schemes include use low cost smart tickets simple journeys day passes visitor passes examples include glasgow spt subway smart tickets made paper pet thinner pvc smart card e.g confidex smart media smart tickets supplied pre-printed over-printed printed demand smart cards used security token mozilla firefox web browser use smart cards store certificates use secure web browsing disk encryption systems veracrypt microsoft bitlocker use smart cards securely hold encryption keys also add another layer encryption critical parts secured disk gnupg well known encryption suite also supports storing keys smart card smart cards also used single sign-on log computers smart cards provided students schools colleges uses include smart health cards improve security privacy patient information provide secure carrier portable medical records reduce health care fraud support new processes portable medical records provide secure access emergency medical information enable compliance government initiatives e.g. organ donation mandates provide platform implement applications needed health care organization smart cards widely used encrypt digital television streams videoguard specific example smart card security worked malaysian government promotes mykad single system smart-card applications mykad started identity cards carried citizens resident non-citizens available applications include identity travel documents drivers license health information electronic wallet atm bank-card public toll-road transit payments public key encryption infrastructure personal information inside mykad card read using special apdu commands smart cards advertised suitable personal identification tasks engineered tamper resistant chip usually implements cryptographic algorithm however several methods recovering algorithm internal state differential power analysis involves measuring precise time electric current required certain encryption decryption operations deduce on-chip private key used public key algorithms rsa implementations symmetric ciphers vulnerable timing power attacks well smart cards physically disassembled using acid abrasives solvents technique obtain unrestricted access on-board microprocessor although techniques may involve risk permanent damage chip permit much detailed information e.g. photomicrographs encryption hardware extracted benefits smart cards directly related volume information applications programmed use card single contact/contactless smart card programmed multiple banking credentials medical entitlement driver license/public transport entitlement loyalty programs club memberships name multi-factor proximity authentication embedded smart cards increase security services card example smart card programmed allow contactless transaction also within range another device like uniquely paired mobile phone significantly increase security smart card governments regional authorities save money improved security better data reduced processing costs savings help reduce public budgets enhance public services many examples uk many using common open lasseo specification individuals better security convenience using smart cards perform multiple services example need replace one card wallet lost stolen data storage card reduce duplication even provide emergency medical information first main advantage smart cards flexibility smart cards multiple functions simultaneously id credit card stored-value cash card repository personal information telephone numbers medical history card easily replaced lost requirement pin form security provides additional security unauthorised access information others first attempt use illegally card would deactivated card reader second main advantage security smart cards electronic key rings giving bearer ability access information physical places without need online connections encryption devices user encrypt decrypt information without relying unknown therefore potentially untrustworthy appliances atms smart cards flexible providing authentication different level bearer counterpart finally information user smart cards provide parties useful devices customizing products services general benefits smart cards smart cards used electronic commerce internet though business model used current electronic commerce applications still use full potential electronic medium advantage smart cards electronic commerce use customize services example order service supplier deliver customized service user may need provide supplier profile boring time-consuming activity smart card contain non-encrypted profile bearer user get customized services even without previous contacts supplier plastic paper card chip embedded fairly flexible larger chip higher probability normal use could damage cards often carried wallets pockets harsh environment chip antenna contactless cards pvc cards crack break bent/flexed excessively however large banking systems failure-management costs offset fraud reduction production use disposal pvc plastic known harmful environment plastics alternative materials including chlorine free plastics paper available smart applications account holder computer hosts malware smart card security model may broken malware override communication input via keyboard output via application screen user application man-in-the-browser malware e.g. trojan silentbanker could modify transaction unnoticed user banks like fortis belfius belgium rabobank netherlands combine smart card unconnected card reader avoid problem customer enters challenge received bank website pin transaction amount reader reader returns 8-digit signature signature manually entered personal computer verified bank preventing point-of-sale-malware changing transaction amount smart cards also targets security attacks attacks range physical invasion card electronics non-invasive attacks exploit weaknesses card software hardware usual goal expose private encryption keys read manipulate secure data funds attacker develops non-invasive attack particular smart card model typically able perform attack cards model seconds often using equipment disguised normal smart card reader manufacturers may develop new card models additional information security may costly inconvenient users upgrade vulnerable systems tamper-evident audit features smart card system help manage risks compromised cards another problem lack standards functionality security address problem berlin group launched eridane project propose new functional security framework smart-card based point interaction poi equipment
node22:Wikipedia entry. Entry name: Biometrics. Entry content: biometrics biometrics technical term body measurements calculations refers metrics related human characteristics biometrics authentication realistic authentication used computer science form identification access control also used identify individuals groups surveillance biometric identifiers distinctive measurable characteristics used label describe individuals biometric identifiers often categorized physiological versus behavioral characteristics physiological characteristics related shape body examples include limited fingerprint palm veins face recognition dna palm print hand geometry iris recognition retina odour/scent behavioral characteristics related pattern behavior person including limited typing rhythm gait voice researchers coined term behaviometrics describe latter class biometrics traditional means access control include token-based identification systems driver license passport knowledge-based identification systems password personal identification number since biometric identifiers unique individuals reliable verifying identity token knowledge-based methods however collection biometric identifiers raises privacy concerns ultimate use information many different aspects human physiology chemistry behavior used biometric authentication selection particular biometric use specific application involves weighting several factors jain et al 1999 identified seven factors used assessing suitability trait use biometric authentication proper biometric use application dependent certain biometrics better others based required levels convenience security single biometric meet requirements every possible application block diagram illustrates two basic modes biometric system first verification authentication mode system performs one-to-one comparison captured biometric specific template stored biometric database order verify individual person claim three steps involved verification person first step reference models users generated stored model database second step samples matched reference models generate genuine impostor scores calculate threshold third step testing step process may use smart card username id number e.g pin indicate template used comparison 'positive recognition common use verification mode aim prevent multiple people using identity second identification mode system performs one-to-many comparison biometric database attempt establish identity unknown individual system succeed identifying individual comparison biometric sample template database falls within previously set threshold identification mode used either 'positive recognition user provide information template used 'negative recognition person system establishes whether person implicitly explicitly denies latter function achieved biometrics since methods personal recognition passwords pins keys ineffective first time individual uses biometric system called enrollment enrollment biometric information individual captured stored subsequent uses biometric information detected compared information stored time enrollment note crucial storage retrieval systems secure biometric system robust first block sensor interface real world system acquire necessary data times image acquisition system change according characteristics desired second block performs necessary pre-processing remove artifacts sensor enhance input e.g removing background noise use kind normalization etc third block necessary features extracted step important step correct features need extracted optimal way vector numbers image particular properties used create template template synthesis relevant characteristics extracted source elements biometric measurement used comparison algorithm discarded template reduce filesize protect identity enrollee enrollment phase template simply stored somewhere card within database matching phase obtained template passed matcher compares existing templates estimating distance using algorithm e.g hamming distance matching program analyze template input output specified use purpose e.g entrance restricted area selection biometrics practical application depending upon characteristic measurements user requirements selecting particular biometric factors consider include performance social acceptability ease circumvention and/or spoofing robustness population coverage size equipment needed identity theft deterrence selection biometric based user requirements considers sensor device availability computational time reliability cost sensor size power consumption multimodal biometric systems use multiple sensors biometrics overcome limitations unimodal biometric systems instance iris recognition systems compromised aging irises electronic fingerprint recognition worsened worn-out cut fingerprints unimodal biometric systems limited integrity identifier unlikely several unimodal systems suffer identical limitations multimodal biometric systems obtain sets information marker i.e. multiple images iris scans finger information different biometrics requiring fingerprint scans using voice recognition spoken passcode multimodal biometric systems fuse unimodal systems sequentially simultaneously combination thereof series refer sequential parallel hierarchical serial integration modes respectively fusion biometrics information occur different stages recognition system case feature level fusion data features extracted multiple biometrics fused matching-score level fusion consolidates scores generated multiple classifiers pertaining different modalities finally case decision level fusion final results multiple classifiers combined via techniques majority voting feature level fusion believed effective levels fusion feature set contains richer information input biometric data matching score output decision classifier therefore fusion feature level expected provide better recognition results spoof attacks consist submitting fake biometric traits biometric systems major threat curtail security multi-modal biometric systems commonly believed intrinsically robust spoof attacks recent studies shown evaded spoofing even single biometric trait following used performance metrics biometric systems early cataloguing fingerprints dates back 1891 juan vucetich started collection fingerprints criminals argentina josh ellenbogen nitzan lebovic argued biometrics originated identification systems criminal activity developed alphonse bertillon 1853–1914 francis galton theory fingerprints physiognomy according lebovic galton work led application mathematical models fingerprints phrenology facial characteristics part absolute identification key inclusion exclusion populations accordingly biometric system absolute political weapon era form soft control theoretician david lyon showed past two decades biometric systems penetrated civilian market blurred lines governmental forms control private corporate control kelly gates identified 9/11 turning point cultural language present language cultural studies aftermath 9/11 moment articulation objects events necessary connection come together new discourse formation established automated facial recognition homeland security technology kelly gates biometric future facial recognition technology culture surveillance new york 2011 p. 100 adaptive biometric systems aim auto-update templates model intra-class variation operational data two-fold advantages systems solving problem limited training data tracking temporal variations input data adaptation recently adaptive biometrics received significant attention research community research direction expected gain momentum key promulgated advantages first adaptive biometric system one longer needs collect large number biometric samples enrollment process second longer necessary enrol retrain system scratch order cope changing environment convenience significantly reduce cost maintaining biometric system despite advantages several open issues involved systems mis-classification error false acceptance biometric system cause adaptation using impostor sample however continuous research efforts directed resolve open issues associated field adaptive biometrics information adaptive biometric systems found critical review rattani et al recent times biometrics based brain electroencephalogram heart electrocardiogram signals emerged research group university kent led ramaswamy palaniappan shown people certain distinct brain heart patterns specific individual another example finger vein recognition using pattern-recognition techniques based images human vascular patterns advantage 'futuristic technology fraud resistant compared conventional biometrics like fingerprints however technology generally cumbersome still issues lower accuracy poor reproducibility time new generation biometrical systems called biometrics intent aims scan intent technology analyze physiological features eye movement body temperature breathing etc predict dangerous behaviour hostile intent materializes action portability side biometric products vendors embracing significantly miniaturized biometric authentication systems bas thereby driving elaborate cost savings especially large-scale deployments operator signature biometric mode manner person using device complex system recorded verification template one potential use type biometric signature distinguish among remote users telerobotic surgery systems utilize public networks communication john michael mike mcconnell former vice admiral united states navy former director u.s. national intelligence senior vice president booz allen hamilton promoted development future capability require biometric authentication access certain public networks keynote speech 2009 biometric consortium conference basic premise proposal person uniquely authenticated using biometrics computer fact also agent performing potentially malicious actions computer however control computer subverted example computer part botnet controlled hacker knowledge identity user terminal materially improve network security aid law enforcement activities recently another approach biometric security developed method scans entire body prospects guarantee better identification prospect method globally accepted complex prospects concerned privacy rather tags tattoos biometric techniques may used identify individual animals zebra stripes blood vessel patterns rodent ears muzzle prints bat wing patterns primate facial recognition koala spots tried biometrics considered also instrumental development state authority put foucauldian terms discipline biopower turning human subject collection biometric parameters biometrics would dehumanize person infringe bodily integrity ultimately offend human dignity well-known case italian philosopher giorgio agamben refused enter united states protest united states visitor immigrant status indicator us-visit program requirement visitors fingerprinted photographed agamben argued gathering biometric data form bio-political tattooing akin tattooing jews holocaust according agamben biometrics turn human persona bare body agamben refers two words used ancient greeks indicating life zoe life common animals humans life bios life human context meanings purposes agamben envisages reduction bare bodies whole humanity new bio-political relationship citizens state turning citizens pure biological life zoe depriving humanity bios biometrics would herald new world dark matters surveillance blackness surveillance scholar simone browne formulates similar critique agamben citing recent study relating biometrics r found gender classification system researched inclined classify africans males mongoloids females consequently browne argues conception objective biometric technology difficult systems subjectively designed vulnerable cause errors described study stark expansion biometric technologies public private sector magnifies concern increasing commodification biometrics private sector adds danger loss human value indeed corporations value biometric characteristics individuals value browne goes suggest modern society incorporate biometric consciousness entails informed public debate around technologies application accountability state private sector ownership access one body data intellectual property generated one body data must understood right scholars emphasized however globalized world confronted huge mass people weak absent civil identities developing countries weak unreliable documents poorer people countries even unreliable documents without certified personal identities certainty right civil liberty one claim rights including right refuse identified identifiable subject public identity sense biometrics could play pivotal role supporting promoting respect human dignity fundamental rights biometrics intent poses risks paper harvard international review prof nayef al-rodhan cautions high risks miscalculations wrongful accusations infringements civil liberties critics us also signalled conflict 4th amendment possible data obtained biometric enrollment may used ways enrolled individual consented example biometric features could disclose physiological and/or pathological medical conditions e.g. fingerprint patterns related chromosomal diseases iris patterns could reveal genetic sex hand vein patterns could reveal vascular diseases behavioral biometrics could reveal neurological diseases etc. moreover second generation biometrics notably behavioral electro-physiologic biometrics e.g. based electrocardiography electroencephalography electromyography could also used emotion detection three categories privacy concerns thieves get access secure properties chance thieves stalk assault property owner gain access item secured biometric device damage owner could irreversible potentially cost secured property example 2005 malaysian car thieves cut finger mercedes-benz s-class owner attempting steal car context biometric systems presentation attacks may also called spoofing attacks per recent iso/iec 30107 standard presentation attacks defined presentation biometric capture subsystem goal interfering operation biometric system attacks either impersonation obfuscation attacks impersonation attacks try gain access pretending someone else obfuscation attacks may example try evade face detection face recognition systems recently several methods proposed counteract presentation attacks automated detection presentation attack called presentation attack detection pad one advantage passwords biometrics re-issued token password lost stolen cancelled replaced newer version naturally available biometrics someone face compromised database cancel reissue electronic biometric identifier stolen nearly impossible change biometric feature renders person biometric feature questionable future use authentication case hacking security-clearance-related background information office personnel management opm united states cancelable biometrics way incorporate protection replacement features biometrics create secure system first proposed ratha et al cancelable biometrics refers intentional systematically repeatable distortion biometric features order protect sensitive user-specific data cancelable feature compromised distortion characteristics changed biometrics mapped new template used subsequently cancelable biometrics one major categories biometric template protection purpose besides biometric cryptosystem biometric cryptosystem error-correcting coding techniques employed handle intraclass variations ensures high level security limitations specific input format small intraclass variations several methods generating new exclusive biometrics proposed first fingerprint-based cancelable biometric system designed developed tulyakov et al essentially cancelable biometrics perform distortion biometric image features matching variability distortion parameters provides cancelable nature scheme proposed techniques operate using recognition engines teoh et al savvides et al whereas methods dabbah et al take advantage advancement well-established biometric research recognition front-end conduct recognition although increases restrictions protection system makes cancellable templates accessible available biometric technologies soft biometrics traits physical behavioral adhered human characteristics derived way human beings normally distinguish peers e.g height gender hair color used complement identity information provided primary biometric identifiers although soft biometric characteristics lack distinctiveness permanence recognize individual uniquely reliably easily faked provide evidence users identity could beneficial words despite fact unable individualize subject effective distinguishing people combinations personal attributes like gender race eye color height visible identification marks used improve performance traditional biometric systems soft biometrics easily collected actually collected enrollment two main ethical issues raised soft biometrics first soft biometric traits strongly cultural based e.g. skin colors determining ethnicity risk support racist approaches biometric sex recognition best recognizes gender tertiary sexual characters unable determine genetic chromosomal sexes soft biometrics aging recognition often deeply influenced ageist stereotypes etc second soft biometrics strong potential categorizing profiling people risking supporting processes stigmatization exclusion many countries including united states planning share biometric data nations testimony us house appropriations committee subcommittee homeland security biometric identification 2009 kathleen kraninger robert mocny commented international cooperation collaboration respect biometric data follows according article written 2009 s. magnuson national defense magazine entitled defense department pressure share biometric data united states bilateral agreements nations aimed sharing biometric data quote article certain members civilian community worried biometric data used full disclosure may forthcoming particular unclassified report united states defense science board task force defense biometrics states wise protect sometimes even disguise true total extent national capabilities areas related directly conduct security-related activities also potentially applies biometrics goes say classic feature intelligence military operations short goal preserve security 'sources methods countries using biometrics include australia brazil canada cyprus greece china gambia germany india iraq ireland israel italy malaysia netherlands new zealand nigeria norway pakistan south africa saudi arabia tanzania ukraine united arab emirates united kingdom united states venezuela among low middle income countries roughly 1.2 billion people already received identification biometric identification program also numerous countries applying biometrics voter registration similar electoral purposes according international idea ’ icts elections database countries using 2017 biometric voter registration bvr armenia angola bangladesh bhutan bolivia brazil burkina faso cambodia cameroon chad colombia comoros congo democratic republic costa rica ivory coast dominican republic fiji gambia ghana guatemala india iraq kenya lesotho liberia malawi mali mauritania mexico morocco mozambique namibia nepal nicaragua nigeria panama peru philippines senegal sierra leone solomon islands somaliland swaziland tanzania uganda uruguay venezuela yemen zambia zimbabwe india national id program called aadhaar largest biometric database world biometrics-based digital identity assigned person lifetime verifiable online instantly public domain time anywhere paperless way designed enable government agencies deliver retail public service securely based biometric data fingerprint iris scan face photo along demographic data name age gender address parent/spouse name mobile phone number person data transmitted encrypted form internet authentication aiming free limitations physical presence person given place 550 million residents enrolled assigned 480 million aadhaar national identification numbers 7 november 2013 aims cover entire population 1.2 billion years however challenged critics privacy concerns possible transformation state surveillance state banana republic.§ project also met mistrust regarding safety social protection infrastructures tackle fear amongst people india supreme court put new ruling action stated privacy seen fundamental right 24 august 2017 new law established
node23:Wikipedia entry. Entry name: EXist. Entry content: exist exist-db exist short open source software project nosql databases built xml technology classified nosql document-oriented database system native xml database provides support xml json html binary documents unlike relational database management systems rdbms nosql databases exist-db provides xquery xslt query application programming languages exist-db released version 2.1 gnu lgpl exist-db created 2000 wolfgang meier major versions released 1.0 september 2006 2.0 february 2013 3.0 february 2017 4.0 february 2018 5.0.0-rc1 june 2018. exist-db awarded best xml database year infoworld 2006 company called exist solutions gmbh germany promotes software.. o'reilly book exist-db co-authored adam retter erik siegel exist-db allows software developers persist xml/json/binary documents without writing extensive middleware exist-db follows extends many w3c xml standards xquery exist-db also supports rest interfaces interfacing ajax-type web forms applications xforms may save data using lines code webdav interface exist-db allows users drag drop xml files directly exist-db database exist-db automatically indexes documents using keyword indexing system exist-db support following standards technologies
node24:Wikipedia entry. Entry name: IncludeOS. Entry content: includeos includeos minimal open source unikernel operating system cloud services iot includeos allows users run c++ applications cloud without operating system includeos adds operating system functionality application allowing oneself create 'virtual machine application includeos applications boot tens milliseconds require megabytes disk memory minimalist architecture includeos means virtual memory space turn therefore concept system calls user space
node25:Wikipedia entry. Entry name: Multi-factor_authentication. Entry content: multi-factor authentication multi-factor authentication mfa authentication method computer user granted access successfully presenting two pieces evidence factors authentication mechanism knowledge something user user knows possession something user user inherence something user user two-factor authentication also known 2fa type subset multi-factor authentication method confirming users claimed identities using combination two different factors 1 something know 2 something 3 something good example two-factor authentication withdrawing money atm correct combination bank card something user possesses pin something user knows allows transaction carried two examples supplement user-controlled password one-time password otp code generated received authenticator e.g security token smartphone user possesses two-step verification two-step authentication method confirming user claimed identity utilizing something know password second factor something something example second step user repeating back something sent out-of-band mechanism second step might six digit number generated app common user authentication system use multiple authentication factors prove one identity based premise unauthorized actor unlikely able supply factors required access authentication attempt least one components missing supplied incorrectly user identity established sufficient certainty access asset e.g. building data protected multi-factor authentication remains blocked authentication factors multi-factor authentication scheme may include knowledge factors commonly used form authentication form user required prove knowledge secret order authenticate password secret word string characters used user authentication commonly used mechanism authentication many multi-factor authentication techniques rely password one factor authentication variations include longer ones formed multiple words passphrase shorter purely numeric personal identification number pin commonly used atm access traditionally passwords expected memorized many secret questions born poor examples knowledge factor may known wide group people able researched possession factors something user user used authentication centuries form key lock basic principle key embodies secret shared lock key principle underlies possession factor authentication computer systems security token example possession factor disconnected tokens connections client computer typically use built-in screen display generated authentication data manually typed user connected tokens devices physically connected computer used devices transmit data automatically number different types including card readers wireless tags usb tokens software token a.k.a soft token type two-factor authentication security device may used authorize use computer services software tokens stored general-purpose electronic device desktop computer laptop pda mobile phone duplicated contrast hardware tokens credentials stored dedicated hardware device therefore duplicated absent physical invasion device soft token may device user interacts typically x.509v3 certificate loaded onto device stored securely serve purpose factors associated user usually biometric methods including fingerprint face voice iris recognition behavioral biometrics keystroke dynamics also used increasingly fourth factor coming play involving physical location user hard wired corporate network user could allowed login utilizing pin code network entering code soft token well could required could seen acceptable standard access office controlled systems network admission control work similar ways level network access contingent specific network device connected wifi vs wired connectivity also allows user move offices dynamically receive level network access many multi-factor authentication vendors offer mobile phone-based authentication methods include push-based authentication qr code based authentication one-time password authentication event-based time-based sms-based verification sms-based verification suffers security concerns phones cloned apps run several phones cell-phone maintenance personnel read sms texts least cell phones compromised general meaning phone longer something user major drawback authentication including something user possesses user must carry around physical token usb stick bank card key similar practically times loss theft risks many organizations forbid carrying usb electronic devices premises owing malware data theft-risks important machines usb ports reason physical tokens usually scale typically requiring new token new account system procuring subsequently replacing tokens kind involves costs addition inherent conflicts unavoidable trade-offs usability security two-step authentication involving mobile phones smartphones provides alternative dedicated physical devices authenticate people use personal access codes device i.e something individual user knows plus one-time-valid dynamic passcode typically consisting 4 6 digits passcode sent mobile device sms generated one-time passcode-generator app cases advantage using mobile phone need additional dedicated token users tend carry mobile devices around times sms broadly-adopted multi-factor authentication method consumer-facing accounts notwithstanding popularity sms verification security advocates publicly criticized july 2016 united states nist draft guideline proposed deprecating form authentication year later nist reinstated sms verification valid authentication channel finalized guideline 2016 2017 respectively google apple started offering user two-step authentication push notification alternative method security mobile-delivered security tokens fully depends mobile operator operational security easily breached wiretapping sim cloning national security agencies advances research two-factor authentication mobile devices consider different methods second factor implemented posing hindrance user continued use improvements accuracy mobile hardware gps microphone gyro/acceleromoter ability use second factor authentication becoming trustworthy example recording ambient noise user location mobile device comparing recording ambient noise computer room user trying authenticate one able effective second factor authentication also reduces amount time effort needed complete process payment card industry pci data security standard requirement 8.3 requires use mfa remote network access originates outside network card data environment cde beginning pci-dss version 3.2 use mfa required administrative access cde even user within trusted network second payment services directive require strong customer authentication electronic payments european economic area september 14 2019 details authentication federal employees contractors usa defined homeland security presidential directive 12 hspd-12 existing authentication methodologies involve explained three types basic factors authentication methods depend one factor difficult compromise single-factor methods regulatory standards access federal government systems require use multi-factor authentication access sensitive resources example logging network devices perform administrative tasks accessing computer using privileged login nist special publication 800-63-3 discusses various forms two-factor authentication provides guidance using business processes requiring different levels assurance 2005 united states federal financial institutions examination council issued guidance financial institutions recommending financial institutions conduct risk-based assessments evaluate customer awareness programs develop security measures reliably authenticate customers remotely accessing online financial services officially recommending use authentication methods depend one factor specifically user knows determine user identity response publication numerous authentication vendors began improperly promoting challenge-questions secret images knowledge-based methods multi-factor authentication due resulting confusion widespread adoption methods august 15 2006 ffiec published supplemental guidelineswhich states definition true multi-factor authentication system must use distinct instances three factors authentication defined use multiple instances single factor according proponents multi-factor authentication could drastically reduce incidence online identity theft online fraud victim password would longer enough give thief permanent access information however many multi-factor authentication approaches remain vulnerable phishing man-in-the-browser man-in-the-middle attacks multi-factor authentication may ineffective modern threats like atm skimming phishing malware may 2017 o2 telefónica german mobile service provider confirmed cybercriminals exploited ss7 vulnerabilities bypass sms based two-step authentication unauthorized withdrawals users bank accounts criminals first infected account holder computers attempt steal bank account credentials phone numbers attackers purchased access fake telecom provider set-up redirect victim phone number handset controlled finally attackers logged victims online bank accounts requested money accounts withdrawn accounts owned criminals sms passcodes routed phone numbers controlled attackers criminals transferred money many multi-factor authentication products require users deploy client software make multi-factor authentication systems work vendors created separate installation packages network login web access credentials vpn connection credentials products may four five different software packages push client pc order make use token smart card translates four five packages version control performed four five packages check conflicts business applications access operated using web pages possible limit overheads outlined single application multi-factor authentication solutions virtual tokens hardware token products software must installed end users drawbacks multi-factor authentication keeping many approaches becoming widespread consumers difficulty keeping track hardware token usb plug many consumers technical skills needed install client-side software certificate generally multi-factor solutions require additional investment implementation costs maintenance hardware token-based systems proprietary vendors charge annual fee per user deployment hardware tokens logistically challenging hardware tokens may get damaged lost issuance tokens large industries banking even within large enterprises needs managed addition deployment costs multi-factor authentication often carries significant additional support costs 2008 survey 120 u.s. credit unions credit union journal reported support costs associated two-factor authentication report software certificates software toolbar approaches reported highest support costs research deployments multi-factor authentication schemes shown one elements tends impact adoption systems line business organization deploys multi-factor authentication system examples cited include u.s. federal government employs elaborate system physical tokens backed robust public key infrastructure well private banks tend prefer multi-factor authentication schemes customers involve accessible less expensive means identity verification app installed onto customer-owned smartphone despite variations exist among available systems organizations may choose multi-factor authentication system deployed within organization tends remain place users invariably acclimate presence use system embrace time normalized element daily process interaction relevant information system 2013 kim dotcom claimed invented two-factor authentication 2000 patent briefly threatened sue major web services however european patent office revoked patent light earlier 1998 us patent held several popular web services employ multi-factor authentication usually optional feature deactivated default many internet services among google amazon aws use open time-based one-time password algorithm totp support two-step authentication
node26:Wikipedia entry. Entry name: Windows_Mixed_Reality. Entry content: windows mixed reality windows mixed reality mixed reality platform introduced part windows 10 operating system provides holographic mixed reality experiences compatible head-mounted displays flagship device microsoft hololens announced windows 10 next chapter press event january 21 2015 provides mixed reality experience live presentation physical real-world elements incorporated virtual elements referred holograms microsoft perceived exist together shared environment variant windows augmented reality computers augment real-world physical environment virtual elements windows mixed reality features augmented-reality operating environment universal windows platform app run platform also used virtual reality headsets designed use windows 10 fall creators update built specifications implemented part windows mixed reality lack support holographic experiences premier device windows mixed reality microsoft hololens smart-glasses headset cordless self-contained windows 10 computer running windows 10 holographic uses various sensors high-definition stereoscopic 3d optical head-mounted display spatial sound allow augmented reality applications natural user interface user interacts gaze voice hand gestures codenamed project baraboo hololens development five years announcement 2015 conceived earlier original pitch made late 2007 would become kinect technology platform microsoft targeted hololens release windows 10 timeframe microsoft hololens development edition begin shipping march 30 2016 available application developers united states canada list price us 3000 although development edition considered consumer-ready hardware february 2016 microsoft set time frame consumer availability hololens hololens chief inventor alex kipman stating hololens consumer release market ready companies samsung electronics asus expressed interest working microsoft produce mixed-reality products based hololens intel made direct competitor called project alloy system called merged reality however cancelled september 22 2017 october 2016 hardware event microsoft announced multiple oems would release virtual reality headsets windows holographic platform based microsoft reference designs enabling room-scale virtual reality without external sensors components january 2017 prototypes presented consumer electronics show release later year microsoft later announced planned release development kits headsets game developers conference devices would supported windows 10 creators update game developers conference 2017 microsoft stated intended support windows mixed reality headsets xbox one 2018 specifically noting capabilities then-upcoming xbox one x hardware revision company later stated initially focusing pc platforms first wanted focus wireless vr solutions consoles october 2017 microsoft officially launched windows mixed reality lineup third-party headsets use windows 10 fall creators update including launch lineup headsets acer dell hp lenovo future products asus samsung officially referred windows mixed reality immersive headsets unlike hololens devices compatible virtual reality software underlying ecosystem referred windows mixed reality regardless experience immersive headsets feature integrated motion tracking eschewing standalone sensors contain cameras used track handheld motion controller accessories may bundled headset distributed optional accessories immersive headsets currently compatible mixed reality software obtained microsoft store universal apps software using steam virtual reality platform used htc vive ability run desktop software added windows 10 may 2019 update microsoft classifies minimum recommended system requirements windows mixed reality windows mixed reality pcs 60 fps windows mixed reality ultra pcs 90 fps minimum requirements specify intel core i5-7200u better laptops 8 gb ram intel hd graphics 620 better directx 12 support usb 3.0 hdmi displayport connections bluetooth 4.0 support controllers verge noted users wo n't need high-end gaming pc meet recommendations mixed reality portal universal windows platform app serves front-end windows mixed reality features 3d environment users explore customize application shortcuts virtual desktops feature originally launched one environment cliff house second skyloft added april 2018 update",wikics,nc
"Classify the wikipedia page represented by node14 using its subgraph data (text attributes and connections) as follows.

node0: Internet layer manages internetworking via IP, ICMP, and IGMP, enabling packet routing across networks without end-to-end guarantees.  
node1: Neighbor Discovery Protocol (NDP) handles IPv6 link-layer addressing, security, and router detection via ICMPv6, improving on IPv4's ARP.  
node2: SQL injection attacks exploit code vulnerabilities to manipulate databases; prevented via parameterized queries and input escaping.  
node3: Rewrite engines create user-friendly URLs for web apps, enhancing SEO and abstraction of dynamic content structures.  
node4: HP-UX is Hewlett Packard's Unix OS for PA-RISC/Itanium, featuring security partitions, clustering, and virtualization support.
node5: BlackBerry's evolution from dominant smartphone brand to licensed partners, facing Android/iOS competition, with OS transitions and market decline post-2013.  
node6: SILC protocol offers secure conferencing via encrypted channels, key exchange, and authentication, contrasting IRC with stronger privacy and server compromise resistance.  
node7: BBM, Blackberry's messaging app, expanded to iOS/Android, peaked at 889M users, but consumer version shut in 2019; enterprise edition persists with encryption.  
node8: ICMP hole punching enables NAT traversal using ICMP packets and third-party servers or autonomous methods for peer-to-peer connections.
node9: L2TPv3 is an IETF standard for Layer 2 tunneling over IP, simplifying MPLS with reduced features like teletraffic engineering.  
node10: MAC sublayer manages medium access, addressing, and error control in IEEE 802 networks, part of the data link layer with LLC.  
node11: QUIC is a Google-developed UDP-based transport protocol improving TCP performance via multiplexing, reduced latency, and integrated encryption (now HTTP/3).  
node12: WireGuard is a secure, lightweight VPN protocol with minimal code, using modern encryption for faster, simpler secure connections.  
node13: Signal Protocol offers end-to-end encryption via Double Ratchet Algorithm, used in apps like Signal and WhatsApp for secure messaging and calls.  
node14: ECN is an IP/TCP extension signaling network congestion via packet marking instead of dropping, reducing latency and retransmissions.  
node15: ICMP handles network error reporting and diagnostics (e.g., ping/traceroute), part of the IP suite but not a transport protocol.
node16: IPv6 replaces IPv4, using 128-bit addresses to solve address exhaustion, enhancing routing, security, and multicast features via IETF standards.  
node17: VyOS is a Debian-based open-source network OS offering router/firewall functionality for physical/virtual systems, competing with commercial solutions.  
node18: Microsoft Notification Protocol (MSNP) powers Microsoft Messenger/Skype, evolving through versions to block outdated clients and add features like webcam support.  
node19: Boa was a lightweight, discontinued open-source web server for embedded systems, used by Slashdot but limited in scalability and security.  
node20: HTCP manages HTTP caches via UDP/TCP, enabling coordination, monitoring, and cache updates using standardized headers and port 4827.  
node21: FASP is a UDP-based proprietary protocol for high-speed data transfer, optimized for latency/jitter, with AES encryption for secure, fast uploads.  
node22: Hiawatha is a secure, lightweight web server prioritizing safety with features like CGI timeouts, banning, and built-in firewall rules for old hardware.  
node23: Zephyr, an MIT-developed UDP-based messaging protocol, enables presence detection and secure instant messaging via Kerberos, still used in academic networks.  
node24: XCAP uses HTTP to manage XML configurations (e.g., SIP presence lists), allowing precise subtree edits per XPath standards for communication services.
node25: Tunneling_protocol encapsulates data across networks via GRE, L2TP, SSH, or IPsec for secure private communications and firewall bypass.  
node26: SPDY optimized web speed via compression/multiplexing, required TLS, influenced HTTP/2, and was deprecated by browsers.  
node27: Multicast Listener Discovery (MLD) identifies IPv6 multicast listeners on a link, akin to IGMP for IPv4, per RFCs 3810/4604.  
node28: Reverse Address Resolution Protocol (RARP) retrieves IP addresses using MAC addresses, now obsolete, replaced by DHCP/BOOTP (RFC 903).

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node6>,<node0, node9>,<node0, node10>,<node0, node11>,<node0, node14>,<node0, node15>,<node0, node16>,<node0, node21>,<node0, node23>,<node0, node24>,<node0, node25>,<node0, node26>,<node0, node27>,<node0, node28>,<node1, node6>,<node1, node9>,<node1, node10>,<node1, node11>,<node1, node14>,<node1, node15>,<node1, node16>,<node1, node21>,<node1, node23>,<node1, node24>,<node1, node25>,<node1, node26>,<node1, node27>,<node1, node28>,<node2, node22>,<node3, node22>,<node4, node16>,<node4, node22>,<node5, node7>,<node6, node10>,<node6, node14>,<node6, node15>,<node6, node16>,<node6, node25>,<node7, node13>,<node7, node18>,<node7, node23>,<node8, node15>,<node9, node10>,<node9, node12>,<node9, node14>,<node9, node15>,<node9, node16>,<node9, node17>,<node9, node25>,<node10, node11>,<node10, node14>,<node10, node15>,<node10, node16>,<node10, node21>,<node10, node23>,<node10, node24>,<node10, node25>,<node10, node26>,<node10, node27>,<node10, node28>,<node11, node14>,<node11, node15>,<node11, node16>,<node11, node20>,<node11, node21>,<node11, node25>,<node11, node26>,<node12, node13>,<node12, node16>,<node12, node17>,<node13, node18>,<node13, node23>,<node14, node15>,<node14, node16>,<node14, node21>,<node14, node23>,<node14, node24>,<node14, node25>,<node14, node26>,<node14, node27>,<node14, node28>,<node15, node16>,<node15, node21>,<node15, node23>,<node15, node24>,<node15, node25>,<node15, node26>,<node15, node27>,<node15, node28>,<node16, node20>,<node16, node21>,<node16, node22>,<node16, node23>,<node16, node24>,<node16, node25>,<node16, node26>,<node16, node27>,<node16, node28>,<node18, node23>,<node19, node22>,<node21, node25>,<node23, node25>,<node24, node25>,<node25, node26>,<node25, node27>,<node25, node28>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",internet protocols,"node0: Internet layer manages internetworking via IP, ICMP, and IGMP, enabling packet routing across networks without end-to-end guarantees.  
node1: Neighbor Discovery Protocol (NDP) handles IPv6 link-layer addressing, security, and router detection via ICMPv6, improving on IPv4's ARP.  
node2: SQL injection attacks exploit code vulnerabilities to manipulate databases; prevented via parameterized queries and input escaping.  
node3: Rewrite engines create user-friendly URLs for web apps, enhancing SEO and abstraction of dynamic content structures.  
node4: HP-UX is Hewlett Packard's Unix OS for PA-RISC/Itanium, featuring security partitions, clustering, and virtualization support.
node5: BlackBerry's evolution from dominant smartphone brand to licensed partners, facing Android/iOS competition, with OS transitions and market decline post-2013.  
node6: SILC protocol offers secure conferencing via encrypted channels, key exchange, and authentication, contrasting IRC with stronger privacy and server compromise resistance.  
node7: BBM, Blackberry's messaging app, expanded to iOS/Android, peaked at 889M users, but consumer version shut in 2019; enterprise edition persists with encryption.  
node8: ICMP hole punching enables NAT traversal using ICMP packets and third-party servers or autonomous methods for peer-to-peer connections.
node9: L2TPv3 is an IETF standard for Layer 2 tunneling over IP, simplifying MPLS with reduced features like teletraffic engineering.  
node10: MAC sublayer manages medium access, addressing, and error control in IEEE 802 networks, part of the data link layer with LLC.  
node11: QUIC is a Google-developed UDP-based transport protocol improving TCP performance via multiplexing, reduced latency, and integrated encryption (now HTTP/3).  
node12: WireGuard is a secure, lightweight VPN protocol with minimal code, using modern encryption for faster, simpler secure connections.  
node13: Signal Protocol offers end-to-end encryption via Double Ratchet Algorithm, used in apps like Signal and WhatsApp for secure messaging and calls.  
node14: ECN is an IP/TCP extension signaling network congestion via packet marking instead of dropping, reducing latency and retransmissions.  
node15: ICMP handles network error reporting and diagnostics (e.g., ping/traceroute), part of the IP suite but not a transport protocol.
node16: IPv6 replaces IPv4, using 128-bit addresses to solve address exhaustion, enhancing routing, security, and multicast features via IETF standards.  
node17: VyOS is a Debian-based open-source network OS offering router/firewall functionality for physical/virtual systems, competing with commercial solutions.  
node18: Microsoft Notification Protocol (MSNP) powers Microsoft Messenger/Skype, evolving through versions to block outdated clients and add features like webcam support.  
node19: Boa was a lightweight, discontinued open-source web server for embedded systems, used by Slashdot but limited in scalability and security.  
node20: HTCP manages HTTP caches via UDP/TCP, enabling coordination, monitoring, and cache updates using standardized headers and port 4827.  
node21: FASP is a UDP-based proprietary protocol for high-speed data transfer, optimized for latency/jitter, with AES encryption for secure, fast uploads.  
node22: Hiawatha is a secure, lightweight web server prioritizing safety with features like CGI timeouts, banning, and built-in firewall rules for old hardware.  
node23: Zephyr, an MIT-developed UDP-based messaging protocol, enables presence detection and secure instant messaging via Kerberos, still used in academic networks.  
node24: XCAP uses HTTP to manage XML configurations (e.g., SIP presence lists), allowing precise subtree edits per XPath standards for communication services.
node25: Tunneling_protocol encapsulates data across networks via GRE, L2TP, SSH, or IPsec for secure private communications and firewall bypass.  
node26: SPDY optimized web speed via compression/multiplexing, required TLS, influenced HTTP/2, and was deprecated by browsers.  
node27: Multicast Listener Discovery (MLD) identifies IPv6 multicast listeners on a link, akin to IGMP for IPv4, per RFCs 3810/4604.  
node28: Reverse Address Resolution Protocol (RARP) retrieves IP addresses using MAC addresses, now obsolete, replaced by DHCP/BOOTP (RFC 903).","node0:Wikipedia entry. Entry name: Internet_layer. Entry content: internet layer internet layer group internetworking methods protocols specifications internet protocol suite used transport network packets originating host across network boundaries necessary destination host specified ip address internet layer derives name function facilitating internetworking concept connecting multiple networks gateways internet layer include protocols fulfill purpose maintaining link states local nodes usually use protocols based framing packets specific link types protocols belong link layer internet-layer protocols use ip-based packets common design aspect internet layer robustness principle liberal accept conservative send misbehaving host deny internet service many users internet layer three basic functions version 4 internet protocol ipv4 transmit receive operations ip capable automatic intentional fragmentation defragmentation packets based example maximum transmission unit mtu link elements however feature dropped ipv6 communications end points hosts perform path mtu discovery assure end-to-end transmissions n't exceed maximum discovered operation internet layer responsible reliable transmission provides unreliable service best effort delivery means network makes guarantees proper arrival packets accordance end-to-end principle change previous protocols used early arpanet since packet delivery across diverse networks inherently unreliable failure-prone operation burden providing reliability placed end points communication path i.e. hosts rather network one reasons resiliency internet individual link failures proven scalability function providing reliability service duty higher level protocols transmission control protocol tcp transport layer ipv4 checksum used protect header datagram checksum ensures information received header accurate however ipv4 attempt detect errors may occurred data packet ipv6 include header checksum instead relying link layer assure data integrity entire packet including checksum primary protocols internet layer internet protocol ip implemented two versions ipv4 ipv6 internet control message protocol icmp primarily used error diagnostic functions different implementations exist ipv4 ipv6 internet group management protocol igmp used ipv4 hosts adjacent ip multicast routers establish multicast group memberships internet protocol security ipsec suite protocols securing ip communications authenticating encrypting ip packet data stream ipsec also includes protocols key exchange ipsec originally designed base specification ipv6 1995 later adapted ipv4 found widespread use securing virtual private networks internet layer tcp/ip model easily compared directly network layer layer 3 open systems interconnection osi protocol stack internet layer often improperly called network layer although overlap two models use different classification methods
node1:Wikipedia entry. Entry name: Neighbor_Discovery_Protocol. Entry content: neighbor discovery protocol neighbor discovery protocol ndp nd protocol internet protocol suite used internet protocol version 6 ipv6 operates link layer internet model rfc 1122 responsible gathering various information required internet communication including configuration local connections domain name servers gateways used communicate distant systems protocol defines five different icmpv6 packet types perform functions ipv6 similar address resolution protocol arp internet control message protocol icmp router discovery router redirect protocols ipv4 however provides many improvements ipv4 counterparts rfc 4861 section 3.1 example includes neighbor unreachability detection nud thus improving robustness packet delivery presence failing routers links mobile nodes inverse neighbor discovery ind protocol extension rfc 3122 allows nodes determine advertise ipv6 address corresponding given link-layer address similar reverse arp ipv4 secure neighbor discovery protocol send security extension ndp uses cryptographically generated addresses cga resource public key infrastructure rpki provide alternative mechanism securing ndp cryptographic method independent ipsec neighbor discovery proxy nd proxy rfc 4389 provides service similar ipv4 proxy arp allows bridging multiple network segments within single subnet prefix bridging done link layer ndp defines five icmpv6 packet types purpose router solicitation router advertisement neighbor solicitation neighbor advertisement network redirects messages used provide following functionality iana maintains list current ndp options published
node2:Wikipedia entry. Entry name: SQL_injection. Entry content: sql injection sql injection code injection technique used attack data-driven applications malicious sql statements inserted entry field execution e.g dump database contents attacker sql injection must exploit security vulnerability application software example user input either incorrectly filtered string literal escape characters embedded sql statements user input strongly typed unexpectedly executed sql injection mostly known attack vector websites used attack type sql database sql injection attacks allow attackers spoof identity tamper existing data cause repudiation issues voiding transactions changing balances allow complete disclosure data system destroy data make otherwise unavailable become administrators database server 2012 study observed average web application received 4 attack campaigns per month retailers received twice many attacks industries first public discussions sql injection started appearing around 1998 example 1998 article phrack magazine sql injection sqli considered one top 10 web application vulnerabilities 2007 2010 open web application security project 2013 sqli rated number one attack owasp top ten four main sub-classes sql injection storm worm one representation compounded sqli classification represents state sqli respecting evolution 2010—further refinement underway form injection occurs user input filtered escape characters passed sql statement results potential manipulation statements performed database end-user application following line code illustrates vulnerability sql code designed pull records specified username table users however username variable crafted specific way malicious user sql statement may code author intended example setting username variable using comments even block rest query three types sql comments three lines space end renders one following sql statements parent language code used authentication procedure example could used force selection every data field users rather one specific user name coder intended evaluation 1'= 1 always true following value username statement would cause deletion users table well selection data userinfo table essence revealing information every user using api allows multiple statements input renders final sql statement follows specified sql server implementations allow multiple statements executed one call way sql apis php codice_1 function allow security reasons prevents attackers injecting entirely separate queries n't stop modifying queries blind sql injection used web application vulnerable sql injection results injection visible attacker page vulnerability may one displays data display differently depending results logical statement injected legitimate sql statement called page type attack traditionally considered time-intensive new statement needed crafted bit recovered depending structure attack may consist many unsuccessful requests recent advancements allowed request recover multiple bits unsuccessful requests allowing consistent efficient extraction several tools automate attacks location vulnerability target information established one type blind sql injection forces database evaluate logical statement ordinary application screen example book review website uses query string determine book review display url codice_2 would cause server run query would populate review page data review id 5 stored table bookreviews query happens completely server user know names database table fields user know query string user sees url returns book review hacker load urls codice_3 codice_3 may result queries respectively original review loads 1=1 url blank error page returned 1=2 url returned page created alert user input invalid words caught input test script site likely vulnerable sql injection attack query likely passed successfully cases hacker may proceed query string designed reveal version number mysql running server codice_3 would show book review server running mysql 4 blank error page otherwise hacker continue use code within query strings glean information server another avenue attack discovered goals achieved second order sql injection occurs submitted values contain malicious commands stored rather executed immediately cases application may correctly encode sql statement store valid sql another part application without controls protect sql injection might execute stored sql statement attack requires knowledge submitted values later used automated web application security scanners would easily detect type sql injection may need manually instructed check evidence attempted sql injection well known attack easily prevented simple measures apparent sql injection attack talktalk 2015 bbc reported security experts stunned large company would vulnerable development platforms parameterized statements work parameters used sometimes called placeholders bind variables instead embedding user input statement placeholder store value given type arbitrary sql fragment hence sql injection would simply treated strange probably invalid parameter value many cases sql statement fixed parameter scalar table user input assigned bound parameter easily put using parameterized queries definitely prevent sql injection mainly means variables n't query strings would accept arbitrary sql inputs however parameters given types definitely necessary parameterized queries require developer define code therefore without parameterized queries anyone could put kind sql code field database erased parameters set username person would able put username without kind code using object-relational mapping libraries avoids need write sql code orm library effect generate parameterized sql statements object-oriented code straightforward though error-prone way prevent injections escape characters special meaning sql manual sql dbms explains characters special meaning allows creating comprehensive blacklist characters need translation instance every occurrence single quote codice_6 parameter must replaced two single quotes codice_7 form valid sql string literal example php usual escape parameters using function codice_8 sending sql query function prepends backslashes following characters codice_9 codice_10 codice_11 codice_12 codice_6 codice_14 codice_15 function normally used make data safe sending query mysql php similar functions database systems pg_escape_string postgresql function codice_16 works escaping characters used especially querying databases escaping functions php returns string backslashes characters need quoted database queries etc characters single quote double quote backslash nul null byte routinely passing escaped strings sql error prone easy forget escape given string creating transparent layer secure input reduce error-proneness entirely eliminate integer float boolean string parameters checked value valid representation given type strings must follow strict pattern date uuid alphanumeric etc checked match pattern limiting permissions database login used web application needed may help reduce effectiveness sql injection attacks exploit bugs web application example microsoft sql server database logon could restricted selecting system tables would limit exploits try insert javascript text columns database
node3:Wikipedia entry. Entry name: Rewrite_engine. Entry content: rewrite engine rewrite engine software component performs rewriting uniform resource locators modifying appearance modification called url rewriting way implementing url mapping routing within web application engine typically component web server web application framework rewritten urls sometimes known short pretty fancy urls search engine friendly sef urls slugs used provide shorter relevant-looking links web pages technique adds layer abstraction files used generate web page url presented outside world web sites dynamic content use urls generate pages server using query string parameters often rewritten resemble urls static pages site subdirectory hierarchy example url wiki page might rewritten blog might url encodes dates entry altered like also allows user change url see postings available december simply removing text encoding day '19 though navigating directory site pass specialized terms url search engine search term would allow users search directly browser example url entered browser location bar urlencoded browser makes http request server could rewrite several benefits using url rewriting however drawbacks well user wants modify url retrieve new data url rewriting may hinder construction custom queries due lack named variables example may difficult determine date following format case original query string useful since query variables indicated month day many web frameworks include url rewriting either directly extension modules software development perspective url rewriting aid code modularization control flow making useful feature modern web frameworks
node4:Wikipedia entry. Entry name: HP-UX. Entry content: hp-ux hp-ux hewlett packard unix hewlett packard enterprise proprietary implementation unix operating system based unix system v initially system iii first released 1984 recent versions support hp 9000 series computer systems based pa-risc instruction set architecture hp integrity systems based intel itanium architecture earlier versions hp-ux supported hp integral pc hp 9000 series 200 300 400 computer systems based motorola 68000 series processors well hp 9000 series 500 computers based hp proprietary focus architecture hp-ux first unix offer access control lists file access permissions alternative standard unix permissions system hp-ux also among first unix systems include built-in logical volume manager hp long partnership veritas software uses vxfs primary file system one six commercial operating systems versions certified open group unix 03 standard others macos solaris inspur k-ux huawei euleros aix hp-ux 11i offers common shared disks clustered file system hp serviceguard cluster solution hp-ux hp global workload management adjusts workloads optimize performance integrates instant capacity demand installed resources paid 30-minute increments needed peak workload demands hp-ux offers operating system-level virtualization features hardware partitions isolated os virtual partitions cell-based servers hp integrity virtual machines hpvm integrity servers hpvm supports guests running hp-ux 11i v3 hosts – guests run linux windows openvms 8.4 hp-ux hp supports online vm guest migration encryption secure guest contents migration hp-ux 11i v3 scales follows superdome 2 32 intel itanium 9560 processors 11i v2 release introduced kernel-based intrusion detection strong random number generation stack buffer overflow protection security partitioning role-based access management various open-source security tools hp classifies operating system security features three categories data system identity release 6.x together 3.x introduced context dependent files cdf feature method allowing fileserver serve different configurations binaries even architectures different client machines heterogeneous environment directory containing files suid bit set made hidden ordinary root processes normal use scheme sometimes exploited intruders hide malicious programs data cdfs cdf filesystem dropped release 10.0 hp-ux operating systems supports variety pa-risc systems 11.0 added support integrity-based servers transition pa-risc itanium hp-ux 11i v1.5 first version supported itanium introduction hp-ux 11i v2 operating system supported architectures hp-ux 11i supports hp integrity servers hp bl server blade family servers use intel itanium architecture hp-ux 11i v2 11i v3 support hp cx series servers cx stands carrier grade used mainly telco industry -48v dc support nebs certified systems contain itanium mad6m processors discontinued hp-ux supports hp rx series servers prior release hp-ux version 11.11 hp used decimal version numbering scheme first number giving major release number following decimal showing minor release 11.11 hp made marketing decision name releases 11 followed v decimal-number version intended indicate os internet-enabled effective result dual version-numbering scheme hp bundles hp-ux 11i programs packages call operating environments oes following lists currently available hp-ux 11i v3 oes
node5:Wikipedia entry. Entry name: BlackBerry. Entry content: blackberry blackberry line smartphones tablets services originally designed marketed canadian company blackberry limited formerly known research motion rim currently designed manufactured marketed tcl communication brand blackberry mobile bb merah putih optiemus infracom global indonesian south asian markets respectively using blackberry brand license blackberry one prominent smartphone vendors world specializing secure communications mobile productivity well-known keyboards devices peak september 2013 85 million blackberry subscribers worldwide however blackberry since lost dominant position market due success android ios platforms numbers fallen 23 million march 2016 blackberry line traditionally uses proprietary operating system developed blackberry limited known blackberry os 2013 blackberry introduced blackberry 10 major revamp platform based qnx operating system blackberry 10 meant replace aging blackberry os platform new system line user experiences modern smartphone operating systems first bb10 powered device blackberry z10 followed all-touch keyboard-equipped models including blackberry q10 blackberry classic blackberry z30 stereo speakers blackberry passport blackberry leap 2015 blackberry re-focused business strategy began release android-based smartphones beginning blackberry priv slider blackberry dtek50 september 28 2016 blackberry announced would cease designing phones favor licensing partners tcl communication became global licensee brand name blackberry mobile optiemus infracom name blackberry mobile india bb merah putih also serve licensees brand serving indian indonesian markets respectively february 2017 blackberry mobile released blackberry keyone known physical keyboard 4.5 inch screen great battery life last device designed blackberry limited blackberry mobile latest android smartphone blackberry key2 officially announced june 7 2018 released july 13th year us devices along bb merah purih blackberry aurora make blackberry current lineup june 2018 blackberry key2 launched international markets india licensee optiemus infracom key2 first blackberry-branded smartphone sport dual camera setup incorporates features portrait mode optical zoom august 2018 launch blackberry key2 optiemus infracom announced launch evolve evolve x smartphones indian market sold exclusively amazon india smartphones conceptualized designed manufactured india evolve series officially announced august 2 2018 research motion rim founded waterloo ontario first developed inter ctive pager 900 announced september 18 1996 inter ctive pager 900 clamshell-type device allowed two-way paging success 900 inter ctive pager 800 created ibm bought us 10 million worth february 4 1998 next device released inter ctive pager 950 august 26 1998 first device carry blackberry name blackberry 850 email pager released january 19 1999 although identical appearance 950 850 first device integrate email name inter ctive pager longer used brand device first blackberry device 850 introduced 1999 two-way pager munich germany name blackberry coined marketing company lexicon branding name chosen due resemblance keyboard buttons drupelets compose blackberry fruit original blackberry devices rim 850 857 used datatac network 2002 commonly known convergent smartphone blackberry released supports push email mobile telephone text messaging internet faxing web browsing wireless information services blackberry gained market share mobile industry concentrating email blackberry began offer email service non-blackberry devices palm treo proprietary blackberry connect software original blackberry device monochrome display newer models installed color displays newer models optimized thumbing use thumbs type keyboard storm 1 storm 2 include suretype keypad typing originally system navigation achieved use scroll wheel mounted right side device models prior 8700 trackwheel replaced trackball introduction pearl series allowed four-way scrolling trackball replaced optical trackpad introduction curve 8500 series models made use iden networks nextel southernlinc nii holdings mike also incorporate push-to-talk ptt feature similar two-way radio january 30 2013 blackberry announced release z10 q10 smartphones models consist touch screens z10 features all-touch design q10 combines qwerty keyboard touchscreen features second financial quarter 2013 blackberry sold 6.8 million handsets eclipsed sales competitor nokia lumia model first time august 12 2013 blackberry announced intention sell company due increasingly unfavourable financial position competition mobile industry largely due lower expected sales z10 blackberry announced september 20 2013 4,500 full- part-time positions estimated 40 operating staff terminated product line reduced six four models september 23 2013 fairfax financial owns 10 equity stake blackberry made offer acquire blackberry 4.7 billion 9.00 per share following announcement blackberry announced acceptance offer provisionally would continue seek offers november 4 2013 november 4 2013 blackberry replaced thorsten heins new interim ceo john s. chen former ceo sybase november 8 blackberry board rejected proposals several technology companies various blackberry assets grounds break-up serve interest stakeholders include employees customers suppliers addition shareholders said sources want identified discussions confidential november 13 2013 chen released open message committed reclaiming success early july 2014 techcrunch online publication published article titled blackberry one hottest stocks 2014 seriously following 50 percent rise company stock increase greater peer companies apple google however analysis blackberry financial results showed neither revenue profit margin improved instead costs markedly reduced period blackberry also introduced new passport handset — consisting square screen full hd-class 1,440 x 1,440 resolution marketed professional fields healthcare architecture — promoted messenger app released minor updates bb10 mobile operating system december 17 2014 blackberry classic introduced meant line former bold series incorporating navigation buttons similar previous blackberry os devices discontinued june 2016 last blackberry keyboard dominates front phone classic style september 2015 blackberry officially unveiled blackberry priv slider german made camera lens 18 megapixels phablet utilizes android operating system additional security productivity-oriented features inspired blackberry operating systems however blackberry coo marty beard told bloomberg company never said would build another bb10 device july 26 2016 company hinted another model physical keyboard coming shortly day blackberry unveiled mid-range android model on-screen keyboard blackberry dtek50 powered latest version android 6.0 marshmallow priv could also upgraded 6.0 device featured 5.2-inch full high-definition display blackberry chief security officer david kleidermacher stressed data security launch indicating model included built-in malware protection encryption user information industry observers pointed dtek50 re-branded version alcatel idol 4 additional security-oriented software customizations manufactured designed tcl september 2016 blackberry limited agreed licensing partnership indonesian company set new joint venture company called bb merah putih source distribute market blackberry handsets indonesia october 25 2016 blackberry released blackberry dtek60 second device dtek series manufactured designed tcl device features 5.5-inch quad-hd touch screen display running qualcomm snapdragon 820 processor support quick charge 3.0 usb type-c fingerprint sensor october 2016 announced blackberry working ford motor company canada develop software car manufacturer connected vehicles february 2017 20m class action lawsuit blackberry announced former employees company march 2017 bb merah putih announced blackberry aurora indonesian-made sold device running operating system based android 7.0 box march 2018 announced blackberry working jaguar land rover develop software car manufacturer vehicles june 2018 blackberry partnership tcl mobile optiemus infracom launched key2 global launch new york third device sport keyboard running google android os 2000 ntp sent notice wireless email patents number companies offered license patents ntp brought patent-infringement lawsuit one companies research motion united states district court eastern district virginia court well known strict adherence timetables deadlines sometimes referred rocket docket particularly efficient trying patent cases jury eventually found ntp patents valid furthermore jury established rim infringed patents willful manner infringement cost ntp us 33 million damages greater reasonable royalty lost profits judge james r. spencer increased damages us 53 million punitive measure due willful nature infringement also instructed rim pay ntp legal fees us 4.5 million issued injunction ordering rim cease desist infringing patents—this decision would resulted closure blackberry systems us rim appealed findings court injunction remedies stayed pending outcome appeals march 2005 appeal rim ntp tried negotiate settlement dispute settlement 450 million negotiations broke due issues june 10 2005 matter returned courts early november 2005 us department justice filed brief requesting rim service allowed continue large number blackberry users us federal government january 2006 us supreme court refused hear rim appeal holding liability patent infringement matter returned lower court prior granted injunction preventing rim sales us use blackberry device might enforced presiding district court judge two parties unable reach settlement february 9 2006 us department defense dod filed brief stating injunction shutting blackberry service excluding government users unworkable dod also stated blackberry crucial national security given large number government users february 9 2006 rim announced developed software workarounds would infringe ntp patents would implement injunction enforced march 3 2006 stern warning judge spencer rim ntp announced settled dispute terms settlement rim agreed pay ntp 612.5 million usd full final settlement claims statement rim said terms agreement finalized litigation rim dismissed court order afternoon agreement eliminates need court proceedings decisions relating damages injunctive relief settlement amount believed low analysts absence future royalties technology question may 26 2017 blackberry announced reached agreement qualcomm incorporated resolving amounts payable connection interim arbitration decision announced april 12 2017 following joint stipulation parties arbitration panel issued final award providing payment qualcomm blackberry total amount u.s. 940,000,000 including interest attorneys fees net certain royalties due blackberry calendar 2016 first quarter calendar 2017 november 24 2010 research motion rim removed kik messenger blackberry app world limited functionality software users rim also sued kik interactive patent infringement misuse trademarks october 2013 companies settled lawsuit terms undisclosed 2018 reported blackberry would filing legal action facebook perceived intellectual property infringements within facebook messenger whatsapp well instagram many blackberry retail stores operate outside north america thailand indonesia united arab emirates mexico december 2007 blackberry store opened farmington hills michigan store offers blackberry device models t-mobile verizon sprint major u.s. carriers offer smartphones three prior attempts opening blackberry stores toronto london uk eventually folded also blackberry stores operated wireless giant airports atlanta boston charlotte minneapolis–st paul philadelphia houston newark several slated closing september 23 2015 blackberry opened first pop-up store frankfurt germany various stages company history suffered occasional service outages referred media embarrassing 2005 company suffered relatively short-term outage reportedly among small handful north america carriers service restored several hours 2007 e-mail service suffered outage led calls questioning integrity towards blackberry perceived centralized system 2009 company outage reportedly covering whole north america 2011-10-10 10:00 utc began multi-day outage europe middle east africa affecting millions blackberry users another outage following day october 12 2011 blackberry internet service went north america research motion attributed data overload due switch failures two data centres waterloo canada slough england cause service disruptions outage intensified calls shareholders shake-up company leadership estimates blackberry company lost 50 million 54 million due global email service failure outage 2011 bcesa blackberry certified enterprise sales associate qualification first three levels professional blackberry certification information certifications blackberry.com website blackberry technical certifications available android devices blackberry 10 devices blackberry 7 devices blackberry 6 devices blackberry 5 devices blackberry 4 devices blackberry 3 devices blackberry 2 devices blackberry 1 devices modern lte based phones blackberry z10 qualcomm snapdragon s4 plus proprietary qualcomm soc based armv7-a architecture featuring two 1.5 ghz qualcomm krait cpu cores 400 mhz adreno 225 gpu gsm-based blackberry phones incorporate arm 7 9 11 processor blackberry models torch 9850/9860 torch 9810 bold 9900/9930 1.2 ghz msm8655 snapdragon s2 soc 768 mb system memory 8 gb on-board storage entry-level models curve 9360 feature marvell pxa940 clocked 800 mhz previous blackberry devices bold 9000 equipped intel xscale 624 mhz processors bold 9700 featured newer version bold 9000 processor clocked speed curve 8520 featured 512 mhz processor blackberry 8000 series smartphones 8700 pearl based 312 mhz arm xscale armv5te pxa900 exception blackberry 8707 based 80 mhz qualcomm 3250 chipset due pxa900 chipset supporting 3g networks 80 mhz processor blackberry 8707 meant device often slower download render web pages 3g 8700 edge networks early blackberry devices blackberry 950 used intel 80386-based processors blackberry latest flagship phone blackberry z30 based 5-inch super amoled 1280×720 resolution 295 ppi 24-bit color depth powered quad-graphics qualcomm dual core 1.7 ghz msm8960t pro first blackberry android operating system released late november 2015 192 gram/6.77 ounce blackberry priv launched version 5.1.1 later upgraded version 6.0 android marshmallow first available four countries increased 31 countries february 28 2016 employing qualcomm 8992 snapdragon 808 hexa-core 64 bit adreno 418 600 mhz gpu 3gb ram processor unit equipped curved 5.4-inch 2560 x 1440 oled display sliding qwerty keyboard hidden use google voice recognition allows dictating e-mails also available priv retained best blackberry 10 features 3,410mah battery said provide 22.5 hours mixed use 18-megapixel camera schneider-kreuznach lens also record 4k video secondary selfie camera also provided several important apps unique priv available google play mid december new operating system blackberry 10 released two new blackberry models z10 q10 january 30 2013 blackberry world 2012 rim ceo thorsten heins demonstrated new features os including camera able rewind frame-by-frame separately individual faces image allow selection best different shots stitched seamlessly optimal composite intelligent predictive adapting keyboard gesture based user interface designed around idea peek flow apps available blackberry 10 devices blackberry world storefront previous operating system developed older blackberry devices blackberry os proprietary multitasking environment developed rim operating system designed use input devices track wheel track ball track pad os provides support java midp 1.0 wap 1.2 previous versions allowed wireless synchronisation microsoft exchange server email calendar well lotus domino email os 5.0 provides subset midp 2.0 allows complete wireless activation synchronisation exchange email calendar tasks notes contacts adds support novell groupwise lotus notes blackberry curve 9360 blackberry torch 9810 bold 9900/9930 curve 9310/9320 torch 9850/9860 featured 2011 blackberry os 7 apps available devices blackberry world 2013 called blackberry app world third-party developers write software using apis proprietary blackberry apis well application makes use certain restricted functionality must digitally signed associated developer account rim signing procedure guarantees authorship application guarantee quality security code rim provides tools developing applications themes blackberry applications themes loaded onto blackberry devices blackberry world air ota blackberry mobile browser blackberry desktop manager blackberry devices well android ios windows phone platforms ability use proprietary blackberry messenger also known bbm software sending receiving encrypted instant messages voice notes images videos via blackberry pin long cell phone data plan messages free charge features bbm include groups bar-code scanning lists shared calendars bbm music integration apps games using bbm social platform april 2013 blackberry announced shutting streaming music service bbm music active almost two years since launch blackberry messenger music closed june 2 2013 july 2014 blackberry revealed blackberry assistant new feature blackberry os 10.3 blackberry passport hardware feature digital personal assistant help keep organized informed productive december 2014 blackberry nanthealth healthcare-focused data provider launched secure cancer genome browser giving doctors ability access patients genetic data blackberry passport smartphone several non-blackberry mobile phones released featuring blackberry email client connects blackberry servers many phones full qwerty keyboards third-party software available use blackberry devices includes full-featured database management systems used support customer relationship management clients applications must manage large volumes potentially complex data march 2011 rim announced optional android player could play applications developed android system would available blackberry playbook rim first entry tablet market august 24 2011 bloomberg news reported unofficial rumors blackberry devices would able run android applications rim brings qnx android app player blackberry october 20 2011 rim officially announced android applications could run unmodified blackberry tablet newest blackberry phones using newest version operating system blackberry smartphones integrated organization email system software package called blackberry enterprise server bes version 5 blackberry enterprise service bes version 10 versions 6 9. versions bes available microsoft exchange lotus domino novell groupwise google apps individual users may able use wireless provider email services without install bes organizations multiple users usually run bes network blackberry devices running blackberry os 10 later also managed directly microsoft exchange server using exchange activesync eas policies way ios android device eas supports fewer management controls bes third-party companies provide hosted bes solutions every blackberry unique id called blackberry pin used identify device bes blackberry one time provided free bes software called bes express besx primary bes feature relay email corporate mailbox blackberry phone bes monitors user mailbox relaying new messages phone via blackberry network operations center noc user wireless provider feature known push email new emails contacts task entries memopad entries calendar entries pushed blackberry device immediately opposed user synchronising data manually device poll server intervals blackberry also supports polling email third-party applications messaging system built blackberry understands receive messages bes bis services handle connections user mail providers device storage also enables mobile user access data off-line areas without wireless service user reconnects wireless service bes sends latest data feature newer models blackberry ability quickly track user current location trilateration without use gps thus saving battery life time trilateration used quick less battery intensive way provide location-aware applications co-ordinates user however accuracy blackberry trilateration less gps due number factors including cell tower blockage large buildings mountains distance bes also provides phones tcp/ip connectivity accessed component called mds mobile data system connection service allows custom application development using data streams blackberry devices based sun microsystems java platform addition bes provides network security form triple des recently aes encryption data email mds traffic travels blackberry phone blackberry enterprise server providers offer flat monthly pricing via special blackberry tariffs unlimited data blackberry units bes addition receiving email organizations make intranets custom internal applications unmetered traffic recent versions blackberry platform mds longer requirement wireless data access starting os 3.8 4.0 blackberry phones access internet i.e tcp/ip access without mds – formerly email wap access possible without bes/mds bes/mds still required secure email data access applications require wap carriers allow wap access primary alternative using blackberry enterprise server use blackberry internet service bis blackberry internet service available 91 countries internationally blackberry internet service developed primarily average consumer rather business consumer service allows users access pop3 imap outlook web app via exchange activesync email accounts without connecting blackberry enterprise server bes blackberry internet service allows 10 email accounts accessed including proprietary well public email accounts gmail outlook yahoo aol blackberry internet service also supports push capabilities various blackberry applications various applications developed rim blackberry utilise push capabilities bis instant messaging clients like google talk windows live messenger yahoo messenger mms pin interactive gaming mapping trading applications require data plans like bis wi-fi use service usually provisioned mobile phone service provider though blackberry actually runs service blackberry pin personal identification number eight-character hexadecimal identification number assigned blackberry device pins changed manually device though blackberry technicians able reset update pin server-side locked specific blackberry blackberry devices message using pin directly using blackberry messenger application blackberry pins tracked blackberry enterprise servers blackberry internet service used direct messages blackberry device emails messages blackberry push service typically directed blackberry device pin message routed rim network operations center sent carrier deliver message last mile device september 2012 rim announced blackberry pin would replaced users blackberry id starting 2013 launch blackberry 10 platform primary competitors blackberry android smartphones iphone blackberry struggled compete market share plunged since 2011 leading speculation unable survive independent going concern however managed maintain significant positions markets despite market share loss global basis number active blackberry subscribers increased substantially years example fiscal period apple iphone first released rim reported subscriber base 10.5 million blackberry subscribers end 2008 android first hit market rim reported number blackberry subscribers increased 21 million finally quarter ended june 28 2012 rim announced number blackberry subscribers reached 78 million globally release apple iphone 5 september 2012 rim ceo thorsten heins announced current global subscribers 80 million sparked 7 jump shares price however since blackberry global user base meaning active accounts declined dramatically since peak 80 million june 2012 dropping 46 million users september 2014 market share globally also declined less 1 percent 2011 blackberry shipped 43 smartphones indonesia april 2014 fallen 3 decline indonesian market share mirrors global trend company 0.6 north america retail price 2,199,000 indonesian rupiah 189 failed give blackberry boost needed indonesia company launched device discounted offer first 1000 purchasers resulted stampede capital several people injured blackberry lost market share indonesia despite launch z3 may 13 2014 new device given worldwide launch city jakarta came back news research motion rim cut hardware production costs outsourcing taiwan-based foxconn group report third quarter 2015 results december 18 2015 company said approximately 700,000 handsets sold 1.9 million quarter 2014 800,000 q2 2015 average sale price per unit 240 315 however continue increase sales new android priv device selling premium price 800 canada example q3 2015 blackberry net loss 89 million u.s. 17 cents per share 15 million net loss three cents per share excluding restructuring charges one-time items revenue slightly year earlier 557 million u.s. vs. 548 million primarily software sales chief executive officer john chen said expects company software business grow 14 percent market time company ready provide sales figures android-based priv handset released weeks earlier four countries time chen offered comment analysts depending priv ... chance could achieve get closer break-even operating profitability overall device business fourth quarter due continuous reduction blackberry users february 2016 blackberry headquarter waterloo canada slashed 35 percent workforce early 2016 blackberry market share dropped 0.2 q4 2016 reports indicate blackberry sold 207,900 units—equivalent 0.0 market share number active blackberry users since 2003 globally research motion agreed give access private communications governments united arab emirates saudi arabia 2010 india 2012 saudi uae governments threatened ban certain services law enforcement agencies could decrypt messages people interest revealed part 2013 mass surveillance disclosures american british intelligence agencies national security agency nsa government communications headquarters gchq respectively access user data blackberry devices agencies able read almost smartphone information including sms location e-mails notes blackberry internet service operates outside corporate networks contrast data passing internal blackberry services bes compresses encrypt data documents stated nsa able access blackberry e-mail system could see read sms traffic brief period 2009 nsa unable access blackberry devices blackberry changed way compress data access devices re-established gchq gchq tool named scrapheap challenge capability perfect spoofing emails blackberry targets response revelations blackberry officials stated us comment media reports regarding alleged government surveillance telecommunications traffic added back door pipeline platform established exist similar access intelligence agencies mobile devices exists using similar techniques hack blackberry software includes support dual ec drbg csprng algorithm due probably backdoored nsa us national institute standards technology strongly recommends longer used blackberry ltd. however issued advisory customers consider probable backdoor vulnerability blackberry ltd. also owns us patent 2007189527 covers technical design backdoor formerly advanced encryption capabilities blackberry smartphone made eligible use government agencies state forces former united states president barack obama became known dependence blackberry device communication 2008 presidential campaign despite security issues insisted using even inauguration seen akin celebrity endorsement marketing experts estimated worth 25 million 50 million usage blackberry continued around end presidency hillary clinton email controversy associated hillary clinton continuing use blackberry assuming office secretary state example west yorkshire police allowed increase presence police officers along streets reduction public spending given officer could perform desk work directly via mobile device well several areas situations us federal government slow move away blackberry platform state department spokesperson saying 2013 blackberry devices still mobile devices approved u.s. missions abroad state department high encryption standard made blackberry smartphones playbook tablet unique since implemented devices including apple devices released iphone 4 bangalore city police one police departments india along pune police kochi police use blackberry devices united kingdom south west trains northern rail issued blackberry devices guards order improve communication control guards passengers canada toronto many municipalities within canada issued blackberry devices employees including limited transportation technical water operations inspection staff management staff order improve communication contracted construction companies winter maintenance operations assist successfully organize multimillion-dollar contracts devices standard mobile device receive e-mail redirected groupwise city e-mail environment currently set support blackberry devices part internet things endeavours company announced plans moving shipping industry adapting smartphones devices communication necessities freight containers eric schmidt executive chairman google longtime blackberry user although smartphones running google android mobile operating system compete blackberry schmidt said 2013 interview uses blackberry prefers keyboard italian criminal group known 'ndrangheta reported february 2009 communicated overseas gulf cartel mexican drug cartel use blackberry messenger since bbm texts difficult intercept
node6:Wikipedia entry. Entry name: SILC_(protocol). Entry content: silc protocol silc secure internet live conferencing protocol protocol provides secure synchronous conferencing services much like irc internet silc protocol divided three main parts silc key exchange ske protocol silc authentication protocol silc packet protocol silc protocol additionally defines silc commands used manage silc session silc provides channels groups nicknames private messages common features however silc nicknames contrast many protocols e.g irc unique user able use nickname even one already use real identification protocol performed unique client id silc protocol uses overcome nickname collision problem present many protocols messages sent silc network binary allowing contain type data including text video audio multimedia data ske protocol used establish session key security parameters protecting silc packet protocol ske based diffie-hellman key exchange algorithm form asymmetric cryptography exchange protected digital signatures silc authentication protocol performed successful ske protocol execution authenticate client and/or server authentication may based passphrase digital signatures successful gives access relevant silc network silc packet protocol intended secure binary packet protocol assuring content packet consisting packet header packet payload secured authenticated packets secured using algorithms based symmetric cryptography authenticated using message authentication code algorithm hmac silc channels groups protected using symmetric channel keys optionally possible digitally sign channel messages also possible protect messages privately generated channel key previously agreed upon channel members private messages users silc network protected session keys however possible execute ske protocol two users use generated key protect private messages private messages may optionally digitally signed messages secured key material generated ske protocol previously agreed upon key material example passphrases silc provides security even silc server may compromised silc designed pekka riikonen 1996 1999 first released public summer 2000 client server written protocol specifications proposed ultimately request publication denied june 2004 iesg rfc published date present time several clients advanced official silc client irssi plugin silc protocol also integrated popular pidgin instant messaging client gui clients silky colloquy silky client put hold abandoned 18th july 2007 due inactivity several years latest news silky website client completely rewritten 2008 three silc protocol implementations written silc clients use libsilc part silc toolkit silc toolkit dual-licensed distributed gnu general public license gpl revised bsd license described silc faq chats secured generation symmetric encryption keys keys generated somewhere occurs server means chats might compromised server compromised version man-in-the-middle attack solution offered chat members generate public-private keypair asymmetric encryption private key shared chat members done band public key used encrypt messages channel approach still open compromise one members chat private key compromised share key another without agreement group silc uses similar pattern irc global silc network many small independent networks consisting one several servers although claimed silc scale better many servers single network original network called silcnet silc.silcnet.org round-robin however may 2014 one active though unstable server four several public networks known external links section however also shut due declining popularity silc
node7:Wikipedia entry. Entry name: BBM_(software). Entry content: bbm software bbm formerly known full name blackberry messenger proprietary mobile instant messenger videotelephony application included blackberry devices allows messaging voice calls blackberry os blackberry 10 ios android windows mobile users consumer edition ios android bbm consumer developed indonesian company emtek license blackberry limited formerly known research motion consumer edition blackberry os blackberry 10 well paid enterprise edition called bbm enterprise formerly known bbm protected developed fully blackberry limited bbm consumer shut 31 may 2019 however paid enterprise version software bbme still running messages sent via bbm sent internet used blackberry pin system past many service providers allowed sign-in bbm using dedicated blackberry data plan exchanging messages possible single person via dedicated discussion chat groups allowed multiple blackberry devices communicate single session addition offering text-based instant messages bbm also allowed users send pictures voicenotes audio recordings files 16 mb share real time location map stickers wide selection emojis communication possible blackberry devices late 2013 bbm released ios android systems 300 million stickers shared daily approximately 150,000 bbm voice calls placed 190 million bbm users worldwide 2015 blackberry infrastructure handled 30 petabytes data traffic month early 2013 bbm original mobile-first messaging service popular started lose rivals april 2016 indonesia country bbm popular messaging app installed 87.5 android devices country blackberry messenger launched august 1 2005 release blackberry messenger 5.0 blackberry allows users use qr code add respective friends lists rather using numeric pin identification email address associated user blackberry recent blackberry devices also exchange bbm contacts using near field communication technology users also set animated gif pictures display pictures although animated pictures 32kb size limit release blackberry messenger 6.0 introduced additional traits update focused social communication mediums including 'bbm connected apps allow user invite friends share favourite blackberry applications late-december 2011 audience measurement company bbm canada sued rim infringing trademark bbm using initialism blackberry messenger bbm canada used initialism former name bureau broadcast measurement company cited received phone calls users believed connected rim however rim asked case dropped two organizations different industries suit dismissed bbm canada ultimately re-branded numeris release blackberry messenger 7.0 december 2012 voice chat bbm voice call introduced bbm protected secure encrypted enterprise-level messenger launched june 2014 june 27 2016 announced indonesia-based emtek group acquired licensing rights bbm blackberry limited would provide bbm api emtek part six-year 207 million deal 2017 bbm servers moved data center canada google cloud platform-based data center asia april 18 2019 bbm announced discontinue bbm consumer service globally may 31 year users switch paid bbme enterprise version messenger bbm widely reputed uptime reliability however october 10 2011 users service north america europe middle east africa widely affected outage provider rim uk headquarters slough berkshire outage lasted two days blackberry messenger reported unavailable thus seriously affecting company reputation blackberry ceo thorsten heins announced may 14 2013 blackberry messenger available ios android summer 2013 would mark first steps blackberry messenger reaching beyond platform never available competing hardware rumoured blackberry messenger would launch june 27 2013 android ios later denied blackberry actual release date yet announced june 21 2013 blackberry messenger application spotted play store however turned fake worldwide release bbm android slated september 21 2013 officially announced blackberry also announced app would require android versions older 4.x.x ice cream sandwich blackberry confirmed bbm iphone would release september 22 day later official android release would work iphones running ios 6 later however worldwide rollout bbm android iphone september 21 2013 1.1 million android users downloaded leaked blackberry messenger apk caused blackberry cease launching blackberry messenger android ios platforms bbm officially released ios android october 21 2013 5 million downloads recorded first 8 hours release bbm late 2013 no.1 free app app store google play store total app 10 million downloads first day 24 february 2014 blackberry officially confirmed bbm windows phone nokia x would released q2 2014 nokia confirmed bbm would preinstalled nokia x devices june 2016 bbm longer offered windows store april 18 2019 announced bbm consumer service android ios shutting may 31 2019 bbm multi-platform offer personal chats group chat 250 people status updates send receive messages 2000 characters bbm channels bbm voice bbm shop available android ios early january 2014 beta update bbm android released testers update included bbm voice bbm channels february 2014 update 2.0.0.13 officially released android ios users containing awaited features along features including new emoticons changes including new look updates featuring choices show contacts channels filters november 4 2014 bbm scored 1 7 points electronic frontier foundation secure messaging scorecard lost points communications encrypted key provider n't access i.e communications end-to-end encrypted users ca n't verify contacts identities past messages secure encryption keys stolen i.e app provide forward secrecy code open independent review i.e code open-source security design properly documented recent independent code audit enterprise version bbm protected initially scored 3 7 points updated 5 7 points additional information provided blackberry reflected eff changelog dated november 14 2014 lost points past messages secure encryption keys stolen code open independent review may 2011 rim claimed 43 million active blackberry messenger users worldwide 2013 2014 number bbm users increases sharply 100 million 2016 bbm reached 889 million users world ranked 2nd top messaging apps first place belongs telegram january 2018 least 63 million monthly users indonesia
node8:Wikipedia entry. Entry name: ICMP_hole_punching. Entry content: icmp hole punching icmp hole punching technique employed network address translator nat applications maintaining internet control message protocol icmp packet streams traverse nat nat traversal techniques typically required client-to-client networking applications internet involving hosts connected private networks especially peer-to-peer voice internet protocol voip deployments icmp hole punching establishes connectivity two hosts communicating across one network address translators either peer-to-peer client-server model typically third party hosts public transit network used establish udp tcp port states may used direct communications communicating hosts however icmp hole punching requires third party involvement pass information one nats exploiting nat loose acceptance inbound icmp time exceeded packets icmp time exceeded packet reaches destination nat arbitrary data packet expected nat allows packet reach destination server allowing destination server obtain client public ip address data stored packet client currently method icmp hole punching hole punching without third party involvement autonomous nat traversal developed samy kamkar january 22 2010 released open source software pwnat method later published ieee according paper proposed technique assumes client somehow learned current external globally routable ip address server nat key idea enabling server learn client's ip address server periodically send message fixed known ip address simplest approach uses icmp echo request messages unallocated ip address 1.2.3.4 since 1.2.3.4 allocated icmp request routed routers without default route icmp destination unreachable messages may created routers ignored server result messages sent 1.2.3.4 nat enable routing replies response request connecting client fake reply specifically client transmit icmp message indicating ttl_expired message could legitimately transmitted internet router sender address would expected match server target ip server listens fake icmp replies upon receipt initiates connection sender ip specified icmp reply
node9:Wikipedia entry. Entry name: L2TPv3. Entry content: l2tpv3 layer 2 tunnelling protocol version 3 ietf standard related l2tp used alternative protocol multiprotocol label switching mpls encapsulation multiprotocol layer 2 communications traffic ip networks like l2tp l2tpv3 provides pseudo-wire service scaled fit carrier requirements l2tpv3 regarded mpls ip atm simplified version concept much benefit achieved fraction effort cost losing technical features considered less important market case l2tpv3 features lost teletraffic engineering features considered important mpls however reason features could re-engineered top l2tpv3 later products protocol overhead l2tpv3 also significantly bigger mpls
node10:Wikipedia entry. Entry name: Medium_access_control. Entry content: medium access control ieee 802 lan/man standards medium access control mac sublayer layer controls hardware responsible interaction wired optical wireless transmission medium mac sublayer logical link control llc sublayer together make data link layer within data link layer llc provides flow control multiplexing logical link i.e ethertype 802.1q vlan tag etc mac provides flow control multiplexing transmission medium two sublayers together correspond layer 2 osi model compatibility reasons llc optional implementations ieee 802.3 frames raw compulsory implementations ieee 802 physical layer standards within hierarchy osi model ieee 802 standards mac sublayer provides control abstraction physical layer complexities physical link control invisible llc upper layers network stack thus llc sublayer higher layers may used mac turn medium access control block formally connected phy via media-independent interface although mac block today typically integrated phy within device package historically mac could used phy independent transmission medium sending data another device network mac sublayer encapsulates higher-level frames frames appropriate transmission medium i.e mac adds syncword preamble also padding necessary adds frame check sequence identify transmission errors forwards data physical layer soon appropriate channel access method permits topologies collision domain bus ring mesh point-to-multipoint topologies controlling data sent wait necessary avoid collisions additionally mac also responsible compensating collisions initiating retransmission jam signal detected receiving data physical layer mac block ensures data integrity verifying sender frame check sequences strips sender preamble padding passing data higher layers according ieee std 802-2001 section 6.2.3 mac sublayer primary functions performed mac layer case ethernet according 802.3-2002 section 4.1.4 functions required mac local network addresses used ieee 802 networks fddi networks called media access control addresses based addressing scheme used early ethernet implementations mac address intended unique serial number mac addresses typically assigned network interface hardware time manufacture significant part address identifies manufacturer assigns remainder address thus provide potentially unique address makes possible frames delivered network link interconnects hosts combination repeaters hubs bridges switches network layer routers thus example ip packet reaches destination sub network destination ip address layer 3 network layer concept resolved address resolution protocol ipv4 neighbor discovery protocol ipv6 mac address layer 2 concept destination host examples physical networks ethernet networks wi-fi networks ieee 802 networks use ieee 802 48-bit mac addresses mac layer required full-duplex point-to-point communication address fields included point-to-point protocols compatibility reasons channel access control mechanisms provided mac layer also known multiple access protocol makes possible several stations connected physical medium share examples shared physical media bus networks ring networks hub networks wireless networks half-duplex point-to-point links multiple access protocol may detect avoid data packet collisions packet mode contention based channel access method used reserve resources establish logical channel circuit-switched channelization-based channel access method used channel access control mechanism relies physical layer multiplex scheme widespread multiple access protocol contention based csma/cd protocol used ethernet networks mechanism utilized within network collision domain example ethernet bus network hub-based star topology network ethernet network may divided several collision domains interconnected bridges switches multiple access protocol required switched full-duplex network today switched ethernet networks often available equipment compatibility reasons use directional antennas millimeter-wave communication wireless personal area network increases probability concurrent scheduling non‐interfering transmissions localized area results immense increase network throughput however optimum scheduling concurrent transmission np-hard problem cellular networks gsm umts lte networks also use mac layer mac protocol cellular networks designed maximize utilization expensive licensed spectrum air interface cellular network layers 1 2 osi model layer 2 divided multiple protocol layers umts lte protocols packet data convergence protocol pdcp radio link control rlc protocol mac protocol base station absolute control air interface schedules downlink access well uplink access devices mac protocol specified 3gpp ts 25.321 umts ts 36.321 lte ts 38.321 5g new radio nr
node11:Wikipedia entry. Entry name: QUIC. Entry content: quic quic pronounced 'quick general-purpose transport layer network protocol initially designed jim roskind google implemented deployed 2012 announced publicly 2013 experimentation broadened described ietf still internet draft quic used half connections chrome web browser google servers web browsers support protocol although name initially proposed acronym quick udp internet connections ietf use word quic acronym simply name protocol among applications quic improves performance connection-oriented web applications currently using tcp establishing number multiplexed connections two endpoints user datagram protocol udp works hand-in-hand http/2 multiplexed connections allowing multiple streams data reach endpoints independently hence independent packet losses involving streams contrast http/2 hosted transmission control protocol tcp suffer head-of-line-blocking delays multiplexed streams tcp packets delayed lost quic secondary goals include reduced connection transport latency bandwidth estimation direction avoid congestion also moves congestion control algorithms user space endpoints rather kernel space claimed allow algorithms improve rapidly additionally protocol extended forward error correction fec improve performance errors expected seen next step protocol evolution june 2015 internet draft specification quic submitted ietf standardization quic working group established 2016 october 2018 ietf http quic working groups jointly decided call http mapping quic http/3 advance making worldwide standard transmission control protocol tcp aims provide interface sending streams data two endpoints data handed tcp system ensures data makes end exactly form connection indicate error condition exists tcp breaks data network packets adds small amounts data packet additional data includes sequence number used detect packets lost transmitted order checksum allows errors within packet data detected either problem occurs tcp uses automatic repeat request arq tell sender re-send lost damaged packet implementations tcp see error connection blocking operation stopping transfers error resolved connection considered failed single connection used send multiple streams data case http/2 protocol streams blocked although one might problem instance single error occurs downloading gif image used favicon entire rest page wait problem resolved tcp system designed look like data pipe stream deliberately contains little understanding data transmits data additional requirements like encryption using tls must set systems running top tcp using tcp communicate similar software end connection sorts setup tasks requires handshake process often requires several round-trips requests responses connection established due inherent latency long-distance communications add significant overhead overall transmission quic aims nearly equivalent tcp connection much-reduced latency primarily two changes rely understanding behaviour http traffic first change greatly reduce overhead connection setup http connections demand tls quic makes exchange setup keys supported protocols part initial handshake process client opens connection response packet includes data needed future packets use encryption eliminates need set tcp connection negotiate security protocol via additional packets protocols serviced way combining together multiple steps single request-response data used following requests initial setup well future requests would otherwise negotiated separate connections quic uses udp basis include loss recovery instead quic stream separately flow controlled lost data retransmitted level quic udp means error occurs one stream like favicon example protocol stack continue servicing streams independently useful improving performance error-prone links cases considerable additional data may received tcp notices packet missing broken data blocked even flushed error corrected quic data free processed single multiplexed stream repaired quic includes number mundane changes also improve overall latency throughput instance packets encrypted individually result encrypted data waiting partial packets generally possible tcp encryption records bytestream protocol stack unaware higher-layer boundaries within stream negotiated layers running top quic aims single handshake process another goal quic system improve performance network-switch events like happens user mobile device moves local wifi hotspot mobile network occurs tcp lengthy process starts every existing connection times one-by-one re-established demand solve problem quic includes connection identifier uniquely identifies connection server regardless source allows connection re-established simply sending packet always contains id original connection id still valid even user ip address changes quic implemented application-space opposed operating system kernel generally invokes additional overhead due context switches data moved applications however case quic protocol stack intended used single application application using quic connections hosted udp ultimately difference could small much overall http/2 stack already applications libraries commonly placing remaining parts libraries essentially error correction little effect http/2 stack size overall complexity organization allows future changes made easily require changes kernel updates one quic longer-term goals add new systems forward error correction fec improved congestion control one concern move tcp udp tcp widely adopted many middle-boxes internet infrastructure tuned tcp rate-limit even block udp google carried number exploratory experiments characterize found small number connections blocked manner led use rapid fallback-to-tcp system chromium network stack opens quic traditional tcp connection time allows fallback zero latency protocol created google taken ietf name quic already 2012 around quic version 20 quite different quic continued evolve refined within ietf original google quic designed general purpose protocol though initially deployed protocol support http chromium current evolution ietf protocol quic general purpose transport protocol chromium developers continued track evolution ietf quic standardization efforts adopt fully comply recent internet standards quic chromium quic code experimentally developed google chrome starting 2012 announced part chromium version 29 released august 20 2013 chrome currently enabled default chromium chrome browser experimental quic support enabled chrome //flags also browser extension indicate pages served quic similarly introduced opera 16 turned opera //flags/ enable-quic opera //flags/ enable-quic-https active sessions seen opera //net-internals/ quic firefox yet support quic 2019-07 cronet library quic protocols available android applications module loadable via google play services 2017 three actively maintained implementations google servers support quic google published prototype server go implementation called quic-go also available powers experimental quic support caddy server july 11 2017 litespeed technologies officially began supporting quic load balancer webadc litespeed web server products july 2019 55.9 quic websites used litespeed 43.7 used nginx although first google servers supported http-over-quic connections facebook also launched technology 2018 cloudflare offering quic support beta basis since 2018 july 2019 3.2 websites use quic addition several stale community projects libquic created extracting chromium implementation quic modifying minimize dependency requirements goquic provides go bindings libquic finally quic-reverse-proxy docker image acts reverse proxy server translating quic requests plain http understood origin server following implementations quic gquic available source form
node12:Wikipedia entry. Entry name: WireGuard. Entry content: wireguard wireguard free open-source software application communication protocol implements virtual private network vpn techniques create secure point-to-point connections routed bridged configurations run module inside linux kernel aims better performance ipsec openvpn tunneling protocols wireguard aims provide vpn simple highly effective review arstechnica observed popular vpn technologies openvpn ipsec often complex set disconnect easily absence configuration take substantial time negotiate reconnections may use outdated ciphers relatively massive code 400,000 600,000 lines code two examples given makes harder find bugs wireguard design seeks reduce issues making tunnel secure easier manage default using versioning cryptography packages focuses ciphers believed among secure current encryption methods also codebase around 4000 lines 1 either openvpn ipsec making security audits easier ars technica reported testing stable tunnels easy create wireguard compared alternatives commented would hard go back long reconnection delays compared wireguard nonsense instant reconnections wireguard utilizes curve25519 key exchange chacha20 encryption poly1305 data authentication siphash hashtable keys blake2s hashing supports layer 3 ipv4 ipv6 encapsulate v4-in-v6 vice versa written jason a. donenfeld published second version gnu general public license gpl may 2019 researchers inria published machine-checked proof protocol produced using cryptoverif proof assistant two early adopters wireguard vpn service providers mullvad azirevpn wireguard received donations mullvad private internet access nlnet foundation december 18 2018 protonmail protonvpn advocated continued research development wireguard technology indicating intent raise financial support oregon senator ron wyden recommended national institute standards technology nist evaluate wireguard replacement existing technologies like ipsec openvpn implementations wireguard protocol include
node13:Wikipedia entry. Entry name: Signal_Protocol. Entry content: signal protocol signal protocol formerly known textsecure protocol non-federated cryptographic protocol used provide end-to-end encryption voice calls video calls instant messaging conversations protocol developed open whisper systems 2013 first introduced open-source textsecure app later became signal several closed-source applications claim implemented protocol whatsapp said encrypt conversations billion people worldwide facebook messenger also say offer protocol optional secret conversations skype private conversations protocol combines double ratchet algorithm prekeys triple elliptic-curve diffie–hellman 3-dh handshake uses curve25519 aes-256 hmac-sha256 primitives signal protocol development started trevor perrin moxie marlinspike open whisper systems 2013 first version protocol textsecure v1 based off-the-record messaging otr 24 february 2014 open whisper systems introduced textsecure v2 migrated axolotl ratchet design axolotl ratchet based ephemeral key exchange introduced otr combines symmetric-key ratchet modeled silent circle instant messaging protocol scimp brought support asynchronous communication offline messages major new feature well better resilience distorted order messages simpler support conversations multiple participants axolotl ratchet named critically endangered aquatic salamander axolotl extraordinary self-healing capabilities developers refer algorithm self-healing automatically disables attacker accessing cleartext later messages compromised session key third version protocol textsecure v3 made changes cryptographic primitives wire protocol october 2014 researchers ruhr university bochum published analysis textsecure v3 among findings presented unknown key-share attack protocol general found secure march 2016 developers renamed protocol signal protocol also renamed axolotl ratchet double ratchet algorithm better differentiate ratchet full protocol used name axolotl referring full protocol signal protocol based textsecure v3 additional cryptographic changes october 2016 researchers uk university oxford australia queensland university technology canada mcmaster university published formal analysis protocol concluded protocol cryptographically sound protocol provides confidentiality integrity authentication participant consistency destination validation forward secrecy post-compromise security aka future secrecy causality preservation message unlinkability message repudiation participation repudiation asynchronicity provide anonymity preservation requires servers relaying messages storing public key material signal protocol also supports end-to-end encrypted group chats group chat protocol combination pairwise double ratchet multicast encryption addition properties provided one-to-one protocol group chat protocol provides speaker consistency out-of-order resilience dropped message resilience computational equality trust equality subgroup messaging well contractible expandable membership authentication users manually compare public key fingerprints outside channel makes possible users verify identities avoid man-in-the-middle attack implementation also choose employ trust first use mechanism order notify users correspondent key changes signal protocol prevent company retaining information users communicate therefore differences messaging service providers choose handle information signal privacy policy states recipients identifiers kept signal servers long necessary order transmit message june 2016 moxie marlinspike told intercept closest piece information metadata signal server stores last time user connected server precision information reduced day rather hour minute second october 2018 signal messenger announced implemented sealed sender feature signal reduces amount metadata signal servers access concealing sender identifier sender identity conveyed recipient message encrypted key server done automatically sender recipient contacts access signal profile users also enable option receive sealed sender messages non-contacts people access signal profile contemporaneous wiretap user device and/or signal servers may still reveal device ip address accessed signal server send receive messages certain times open whisper systems first introduced protocol textsecure app later merged encrypted voice calling application called redphone textsecure app renamed signal redphone used zrtp encrypt calls march 2017 signal transitioned new webrtc-based calling system also introduced ability make video calls signal new calling system uses signal protocol end-to-end encryption november 2014 open whisper systems announced partnership whatsapp provide end-to-end encryption incorporating signal protocol whatsapp client platform open whisper systems said already incorporated protocol latest whatsapp client android support clients group/media messages key verification would coming soon april 5 2016 whatsapp open whisper systems announced finished adding end-to-end encryption every form communication whatsapp users could verify keys february 2017 whatsapp announced new feature whatsapp status uses signal protocol secure contents september 2015 g data software launched new messaging app called secure chat used signal protocol g data discontinued service may 2018 september 2016 google launched new messaging app called allo featured optional incognito mode used signal protocol end-to-end encryption march 2019 google discontinued allo favor messages app android october 2016 facebook deployed optional mode called secret conversations facebook messenger provides end-to-end encryption using implementation signal protocol january 2018 open whisper systems microsoft announced addition signal protocol support optional skype mode called private conversations signal protocol influence cryptographic protocols may 2016 viber said encryption protocol custom implementation uses concepts signal protocol forsta developers said app uses custom implementation signal protocol double ratchet algorithm introduced part signal protocol also adopted protocols omemo xmpp extension protocol xep introduced conversations messaging app approved xmpp standards foundation xsf december 2016 xep-0384 matrix open communications protocol includes olm library provides optional end-to-end encryption room-by-room basis via double ratchet algorithm implementation developers wire said app uses custom implementation double ratchet algorithm signal messenger maintains following signal protocol libraries github
node14:Wikipedia entry. Entry name: Explicit_Congestion_Notification. Entry content: explicit congestion notification explicit congestion notification ecn extension internet protocol transmission control protocol defined rfc 3168 2001 ecn allows end-to-end notification network congestion without dropping packets ecn optional feature may used two ecn-enabled endpoints underlying network infrastructure also supports conventionally tcp/ip networks signal congestion dropping packets ecn successfully negotiated ecn-aware router may set mark ip header instead dropping packet order signal impending congestion receiver packet echoes congestion indication sender reduces transmission rate detected dropped packet rather responding properly ignoring bits outdated faulty network equipment historically dropped mangled packets ecn bits set measurements suggested fraction web servers public internet setting ecn prevents network connections reduced less 1 passive support existed ubuntu linux since 12.04 windows server since 2012 passive support popular websites increased 8.5 2012 70 may 2017 adoption across internet requires clients actively request ecn june 2015 apple announced ecn enabled default supported future products help drive adoption ecn signaling industry-wide ecn requires specific support internet layer transport layer following reasons without ecn congestion indication echo achieved indirectly detection lost packets ecn congestion indicated setting ecn field within ip packet ce echoed back receiver transmitter setting proper bits header transport protocol example using tcp congestion indication echoed back setting ece bit ecn uses two least significant right-most bits diffserv field ipv4 ipv6 header encode four different code points endpoints support ecn mark packets ect 0 ect 1 packet traverses active queue management aqm queue e.g. queue uses random early detection red experiencing congestion corresponding router supports ecn may change code point codice_5 instead dropping packet act referred “ marking ” purpose inform receiving endpoint impending congestion receiving endpoint congestion indication handled upper layer protocol transport layer protocol needs echoed back transmitting node order signal reduce transmission rate ce indication handled effectively upper layer protocol supports ecn used conjunction upper layer protocols tcp support congestion control method echoing ce indication transmitting endpoint tcp supports ecn using two flags tcp header first ecn-echo ece used echo back congestion indication i.e signal sender reduce amount information sends second congestion window reduced cwr acknowledge congestion-indication echoing received use ecn tcp connection optional ecn used must negotiated connection establishment including suitable options syn syn-ack segments ecn negotiated tcp connection sender indicates ip packets carry tcp segments connection carrying traffic ecn capable transport marking ect code point allows intermediate routers support ecn mark ip packets ce code point instead dropping order signal impending congestion upon receiving ip packet congestion experienced code point tcp receiver echoes back congestion indication using ece flag tcp header endpoint receives tcp segment ece bit reduces congestion window packet drop acknowledges congestion indication sending segment cwr bit set node keeps transmitting tcp segments ece bit set receives segment cwr bit set see affected packets tcpdump use filter predicate codice_6 since transmission control protocol tcp perform congestion control control packets pure acks syn fin segments control packets usually marked ecn-capable 2009 proposal suggests marking syn-ack packets ecn-capable improvement known ecn+ shown provide dramatic improvements performance short-lived tcp connections ecn also defined transport layer protocols perform congestion control notably dccp stream control transmission protocol sctp general principle similar tcp although details on-the-wire encoding differ principle possible use ecn protocols layered udp however udp requires congestion control performed application current networking apis give access ecn bits since ecn effective combination active queue management aqm policy benefits ecn depend precise aqm used observations however appear hold across different aqms expected ecn reduces number packets dropped tcp connection avoiding retransmission reduces latency especially jitter effect drastic tcp connection single outstanding segment able avoid rto timeout often case interactive connections remote logins transactional protocols http requests conversational phase smtp sql requests effects ecn bulk throughput less clear modern tcp implementations fairly good resending dropped segments timely manner sender window large use ecn found detrimental performance highly congested networks using aqm algorithms never drop packets modern aqm implementations avoid pitfall dropping rather marking packets high load many modern implementations tcp/ip protocol suite support ecn however usually ship ecn disabled windows versions since windows server 2008 windows vista support ecn tcp since windows server 2012 enabled default windows server versions data center transmission control protocol dctcp used previous windows versions non-server versions disabled default ecn support enabled using shell command freebsd 8.0 netbsd 4.0 implement ecn support tcp activated sysctl interface setting 1 value parameter likewise sysctl used openbsd since version 2.4.20 linux kernel released november 2002 linux supports three working modes ecn tcp configured sysctl interface setting parameter one following values beginning version 4.1 linux kernel released june 2015 mechanism specified rfc 3168 section 6.1.1.1 enabled default ecn enabled value 1 fallback mechanism attempts ecn connectivity initial setup outgoing connections graceful fallback transmissions without ecn capability mitigating issues ecn-intolerant hosts firewalls mac os x 10.5 10.6 implement ecn support tcp controlled using boolean sysctl variables first variable enables ecn incoming connections already ecn flags set second one tries initiate outgoing connections ecn enabled variables default set enable respective behavior june 2015 apple inc. announced os x 10.11 released later year would ecn turned default never happened macos sierra ecn enabled 50 percent tcp sessions june 2015 apple inc. announced ios 9 next version ios would support ecn turned default tcp ecn negotiation enabled 5 randomly selected connections wi-fi ethernet ios 9 50 randomly selected connections wi-fi ethernet cellular carriers ios 10 100 ios 11 solaris kernel supports three states ecn tcp default behavior solaris 11 full ecn usage activated via since ecn marking routers dependent form active queue management routers must configured suitable queue discipline order perform ecn marking cisco ios routers perform ecn marking configured wred queuing discipline since version 12.2 8 t. linux routers perform ecn marking configured one red gred queue disciplines explicit ecn parameter using sfb discipline using codel fair queuing fq_codel discipline cake queuing discipline modern bsd implementations freebsd netbsd openbsd support ecn marking altq queueing implementation number queuing disciplines notably red blue freebsd 11 included codel pie fq-codel fq-pie queuing disciplines implementation ipfw/dummynet framework ecn marking capability data center transmission control protocol data center tcp dctcp utilizes ecn enhance transmission control protocol congestion control algorithm used data center networks whereas standard tcp congestion control algorithm able detect presence congestion dctcp using ecn able gauge extent congestion dctcp modifies tcp receiver always relay exact ecn marking incoming packets cost ignoring function meant preserve signalling reliability makes dctcp sender vulnerable loss acks receiver mechanism detect cope algorithms provide equivalent better receiver feedback reliable approach active research topic
node15:Wikipedia entry. Entry name: Internet_Control_Message_Protocol. Entry content: internet control message protocol internet control message protocol icmp supporting protocol internet protocol suite used network devices including routers send error messages operational information indicating example requested service available host router could reached icmp differs transport protocols tcp udp typically used exchange data systems regularly employed end-user network applications exception diagnostic tools like ping traceroute icmp ipv4 defined rfc 792 icmp part internet protocol suite defined rfc 792 icmp messages typically used diagnostic control purposes generated response errors ip operations specified rfc 1122 icmp errors directed source ip address originating packet example every device intermediate router forwarding ip datagram first decrements time live ttl field ip header one resulting ttl 0 packet discarded icmp time exceeded transit message sent datagram source address many commonly used network utilities based icmp messages traceroute command implemented transmitting ip datagrams specially set ip ttl header fields looking icmp time exceeded transit destination unreachable messages generated response related ping utility implemented using icmp echo request echo reply messages icmp uses basic support ip higher level protocol however icmp actually integral part ip although icmp messages contained within standard ip packets icmp messages usually processed special case distinguished normal ip processing many cases necessary inspect contents icmp message deliver appropriate error message application responsible transmission ip packet prompted sending icmp message icmp network layer protocol tcp udp port number associated icmp packets numbers associated transport layer icmp packet encapsulated ipv4 packet packet consists header data sections icmp header starts ipv4 header identified ip protocol number 1 icmp packets 8-byte header variable-sized data section first 4 bytes header fixed format last 4 bytes depend type/code icmp packet icmp error messages contain data section includes copy entire ipv4 header plus least first eight bytes data ipv4 packet caused error message maximum length icmp error messages 576 bytes data used host match message appropriate process higher level protocol uses port numbers assumed first eight bytes original datagram data variable size icmp packet data section exploited ping death large fragmented ping packets used denial-of-service attacks icmp data also used create covert channels communication channels known icmp tunnels control messages identified value type field code field gives additional context information message control messages deprecated since protocol first introduced source quench requests sender decrease rate messages sent router host message may generated router host sufficient buffer space process request may occur router host buffer approaching limit data sent high speed host several hosts time particular router network although router buffering capabilities buffering limited within specified range router queue data capacity limited buffering space thus queue gets filled incoming data discarded queue longer full acknowledgement mechanism present network layer client know whether data reached destination successfully hence remedial measures taken network layer avoid kind situations measures referred source quench source quench mechanism router sees incoming data rate much faster outgoing data rate sends icmp message clients informing slow data transfer speeds wait certain amount time attempting send data client receives message automatically slow outgoing data rate wait sufficient amount time enables router empty queue thus source quench icmp message acts flow control network layer since research suggested icmp source quench ineffective unfair antidote congestion routers creation source quench messages deprecated 1995 rfc 1812 furthermore forwarding kind reaction flow control actions source quench messages deprecated 2012 rfc 6633 redirect requests data packets sent alternative route icmp redirect mechanism routers convey routing information hosts message informs host update routing information send packets alternative route host tries send data router r1 r1 sends data another router r2 direct path host r2 available host r2 ethernet segment r1 send redirect message inform host best route destination via r2 host send packets destination directly r2 router still send original datagram intended destination however datagram contains routing information message sent even better route available rfc 1122 states redirects sent gateways sent internet hosts time exceeded generated gateway inform source discarded datagram due time live field reaching zero time exceeded message may also sent host fails reassemble fragmented datagram within time limit time exceeded messages used traceroute utility identify gateways path two hosts timestamp used time synchronization originating timestamp set time milliseconds since midnight sender last touched packet receive transmit timestamps used timestamp reply replies timestamp message consists originating timestamp sent sender timestamp well receive timestamp indicating timestamp received transmit timestamp indicating timestamp reply sent address mask request normally sent host router order obtain appropriate subnet mask recipients reply message address mask reply message icmp address mask request may used part reconnaissance attack gather information target network therefore icmp address mask reply disabled default cisco ios address mask reply used reply address mask request message appropriate subnet mask destination unreachable generated host inbound gateway inform client destination unreachable reason reasons message may include physical connection host exist distance infinite indicated protocol port active data must fragmented 'do n't fragment flag unreachable tcp ports notably respond tcp rst rather destination unreachable type 3 might expected destination unreachable never reported ip multicast transmissions
node16:Wikipedia entry. Entry name: IPv6. Entry content: ipv6 internet protocol version 6 ipv6 recent version internet protocol ip communications protocol provides identification location system computers networks routes traffic across internet ipv6 developed internet engineering task force ietf deal long-anticipated problem ipv4 address exhaustion ipv6 intended replace ipv4 december 1998 ipv6 became draft standard ietf subsequently ratified internet standard 14 july 2017 devices internet assigned unique ip address identification location definition rapid growth internet commercialization 1990s became evident far addresses would needed connect devices ipv4 address space available 1998 internet engineering task force ietf formalized successor protocol ipv6 uses 128-bit address theoretically allowing 2 approximately addresses actual number slightly smaller multiple ranges reserved special use completely excluded use total number possible ipv6 addresses times many ipv4 uses 32-bit addresses provides approximately 4.3 billion addresses two protocols designed interoperable complicating transition ipv6 however several ipv6 transition mechanisms devised permit communication ipv4 ipv6 hosts ipv6 provides technical benefits addition larger addressing space particular permits hierarchical address allocation methods facilitate route aggregation across internet thus limit expansion routing tables use multicast addressing expanded simplified provides additional optimization delivery services device mobility security configuration aspects considered design protocol ipv6 addresses represented eight groups separated colons four hexadecimal digits full representation may simplified several methods notation example 2001:0db8:0000:0000:0000:8a2e:0370:7334 becomes 2001 db8 :8a2e:370:7334 ipv6 internet layer protocol packet-switched internetworking provides end-to-end datagram transmission across multiple ip networks closely adhering design principles developed previous version protocol internet protocol version 4 ipv4 addition offering addresses ipv6 also implements features present ipv4 simplifies aspects address configuration network renumbering router announcements changing network connectivity providers simplifies processing packets routers placing responsibility packet fragmentation end points ipv6 subnet size standardized fixing size host identifier portion address 64 bits network security design requirement ipv6 architecture included original specification ipsec addressing architecture ipv6 defined allows three different types transmission unicast anycast multicast internet protocol version 4 ipv4 first publicly used version internet protocol ipv4 developed research project defense advanced research projects agency darpa united states department defense agency becoming foundation internet world wide web ipv4 includes addressing system uses numerical identifiers consisting 32 bits addresses typically displayed quad-dotted notation decimal values four octets range 0 255 8 bits per number thus ipv4 provides addressing capability 2 approximately 4.3 billion addresses address exhaustion initially concern ipv4 version originally presumed test darpa networking concepts first decade operation internet became apparent methods developed conserve address space early 1990s even redesign addressing system using classless network model became clear would suffice prevent ipv4 address exhaustion changes internet infrastructure needed last unassigned top-level address blocks 16 million ipv4 addresses allocated february 2011 internet assigned numbers authority iana five regional internet registries rirs however rir still available address pools expected continue standard address allocation policies one /8 classless inter-domain routing cidr block remains blocks 1024 addresses /22 provided rirs local internet registry lir september 2015 asia-pacific network information centre apnic réseaux ip européens network coordination centre ripe_ncc latin america caribbean network information centre lacnic american registry internet numbers arin reached stage leaves african network information center afrinic sole regional internet registry still using normal protocol distributing ipv4 addresses november 2018 afrinic minimum allocation /22 1024 ipv4 addresses lir may receive additional allocation 80 address space utilized widely expected internet use ipv4 alongside ipv6 foreseeable future direct communication ipv4 ipv6 network protocols possible internet data transmitted form network packets ipv6 specifies new packet format designed minimize packet header processing routers headers ipv4 packets ipv6 packets significantly different two protocols interoperable however transport application-layer protocols need little change operate ipv6 exceptions application protocols embed internet-layer addresses file transfer protocol ftp network time protocol ntp new address format may cause conflicts existing protocol syntax main advantage ipv6 ipv4 larger address space length ipv6 address 128 bits compared 32 bits ipv4 address space therefore 2 approximately addresses 340,282,366,920,938,463,463,374,607,431,768,211,456 approximately 340 undecillion 340 billion billion billion billion addresses ipv4 addresses reserved special uses addition ipv4 address space poorly allocated 2011 approximately 14 available addresses utilized numbers large intent designers ipv6 address space assure geographical saturation usable addresses rather longer addresses simplify allocation addresses enable efficient route aggregation allow implementation special addressing features ipv4 complex classless inter-domain routing cidr methods developed make best use small address space standard size subnet ipv6 2 addresses square size entire ipv4 address space thus actual address space utilization rates small ipv6 network management routing efficiency improved large subnet space hierarchical route aggregation multicasting transmission packet multiple destinations single send operation part base specification ipv6 ipv4 optional although commonly implemented feature ipv6 multicast addressing features protocols common ipv4 multicast also provides changes improvements eliminating need certain protocols ipv6 implement traditional ip broadcast i.e transmission packet hosts attached link using special broadcast address therefore define broadcast addresses ipv6 result achieved sending packet link-local nodes multicast group address ff02 :1 analogous ipv4 multicasting address 224.0.0.1 ipv6 also provides new multicast implementations including embedding rendezvous point addresses ipv6 multicast group address simplifies deployment inter-domain solutions ipv4 difficult organization get even one globally routable multicast group assignment implementation inter-domain solutions arcane unicast address assignments local internet registry ipv6 least 64-bit routing prefix yielding smallest subnet size available ipv6 also 64 bits assignment possible embed unicast address prefix ipv6 multicast address format still providing 32-bit block least significant bits address approximately 4.2 billion multicast group identifiers thus user ipv6 subnet automatically available set globally routable source-specific multicast groups multicast applications ipv6 hosts configure automatically connected ipv6 network using neighbor discovery protocol via internet control message protocol version 6 icmpv6 router discovery messages first connected network host sends link-local router solicitation multicast request configuration parameters routers respond request router advertisement packet contains internet layer configuration parameters routers present special case requirements address configuration often sources autoconfiguration information router prefix advertisements stateless configuration routers achieved special router renumbering protocol renumbering existing network new connectivity provider different routing prefixes major effort ipv4 ipv6 however changing prefix announced routers principle renumber entire network since host identifiers least-significant 64 bits address independently self-configured host ipv6 stateless address auto-configuration unsuitable ipv6 like ipv4 allows stateful configuration dynamic host configuration protocol version 6 dhcpv6 manual static configuration hosts like ipv4 ipv6 supports globally unique ip addresses design ipv6 intended re-emphasize end-to-end principle network design originally conceived establishment early internet approach device network unique address globally reachable directly location internet unique ip address potentially used track network activity device moreover using ipv6 address auto-configuration interface identifier mac address network card used make public ipv6 interface identifier unique exposing type hardware used providing unique handle user online activity autoconfiguration basis network card mac address therefore particular privacy concern mobile devices laptops access internet different local area networks mac based interface identifier would always stay thus mac address based interface identifier used track movement usage particular mobile device ipv6 developed mid-90s internet accessed large number mobile devices privacy priority become today address privacy concerns slaac protocol updated mechanisms termed “ privacy extensions stateless address autoconfiguration ipv6 ” codified rfc 4941 rfc 7217 rfc 8064 prevents ipv6 address leaking mac address device first method generate interface identifier randomly interface identifier generated two devices local area network duplicate address detection dad function ipv6 neighbor discovery protocol ndp resolve situation slaac privacy extension also implements time configurable ipv6 interface addresses discarded new interface identifier generated typically time configured 24 hours ipv6 autoconfiguration generate set new ipv6 host address every day stable address needed another method generate interface identifier secret key network prefix since 2017 method codified rfc 7217 preferred stable private address according ietf late 2014 slaac privacy extensions functionality implemented following operating systems microsoft windows windows xp versions mac os x 10.7 onward versions ios since 4.3 versions android since 4.0 ice cream sandwich privacy extension enabled default windows since xp sp1 os x since 10.7 ios since version 4.3 linux distributions enabled privacy extensions well internet protocol security ipsec originally developed ipv6 found widespread deployment first ipv4 re-engineered ipsec mandatory part ipv6 protocol implementations internet key exchange ike recommended rfc 6434 inclusion ipsec ipv6 implementations downgraded recommendation considered impractical require full ipsec implementation types devices may use ipv6 however rfc 4301 ipv6 protocol implementations implement ipsec need implement ikev2 need support minimum set cryptographic algorithms requirement help make ipsec implementations interoperable devices different vendors ipsec authentication header ah encapsulating security payload header esp implemented ipv6 extension headers packet header ipv6 simpler ipv4 header many rarely used fields moved optional header extensions simplified ipv6 packet header process packet forwarding routers simplified although ipv6 packet headers least twice size ipv4 packet headers packet processing routers generally efficient less processing required routers due headers aligned match common word sizes moreover ipv6 header include checksum ipv4 header checksum calculated ipv4 header recalculated routers every time time live called hop limit ipv6 protocol reduced one absence checksum ipv6 header furthers end-to-end principle internet design envisioned processing network occurs leaf nodes integrity protection data encapsulated ipv6 packet assumed assured link layer error detection higher-layer protocols namely transmission control protocol tcp user datagram protocol udp transport layer thus ipv4 allowed udp datagram headers checksum indicated 0 header field ipv6 requires checksum udp headers ipv6 routers perform ip fragmentation ipv6 hosts required either perform path mtu discovery perform end-to-end fragmentation send packets larger default maximum transmission unit mtu 1280 octets unlike mobile ipv4 mobile ipv6 avoids triangular routing therefore efficient native ipv6 ipv6 routers may also allow entire subnets move new router connection point without renumbering ipv6 packet header minimum size 40 octets 320 bits options implemented extensions provides opportunity extend protocol future without affecting core packet structure however study 2015 indicated network operators dropped ipv6 packets extension headers traversed transit autonomous systems ipv4 limits packets 65,535 2−1 octets payload ipv6 node optionally handle packets limit referred jumbograms large 4,294,967,295 2−1 octets use jumbograms may improve performance high-mtu links use jumbograms indicated jumbo payload option extension header ipv6 packet two parts header payload header consists fixed portion minimal functionality required packets may followed optional extensions implement special features fixed header occupies first 40 octets 320 bits ipv6 packet contains source destination addresses traffic classification options hop counter type optional extension payload follows header next header field tells receiver interpret data follows header packet contains options field contains option type next option next header field last option points upper-layer protocol carried packet payload extension headers carry options used special treatment packet network e.g. routing fragmentation security using ipsec framework without special options payload must less jumbo payload option hop-by-hop options extension header payload must less 4 gb unlike ipv4 routers never fragment packet hosts expected use path mtu discovery make packets small enough reach destination without needing fragmented see ipv6 packet fragmentation ipv6 addresses 128 bits design ipv6 address space implements different design philosophy ipv4 subnetting used improve efficiency utilization small address space ipv6 address space deemed large enough foreseeable future local area subnet always uses 64 bits host portion address designated interface identifier most-significant 64 bits used routing prefix identifier unique within subnet host connected ipv6 mechanism automatic address detection address autoconfiguration always produces unique assignments 128 bits ipv6 address represented 8 groups 16 bits group written four hexadecimal digits sometimes called hextets formally hexadectets informally quibble quad-nibble groups separated colons example representation convenience ipv6 address may abbreviated shorter notations application following rules example application rules loopback address defined may abbreviated using rules ipv6 address may one representation ietf issued proposed standard representing text interfaces ipv6 hosts require link-local address ipv6 link-local address derived mac address interface prefix process involves filling address space prefix bits left-justified most-significant bit filling mac address eui-64 format least-significant bits bits remain filled two parts set zero ipv6 implement broadcast functionality address resolution protocol arp based neighbor discovery protocol ndp nd used link layer map layer 3 ipv6 addresses layer 2 addresses mac address ethernet network cards ndp relies icmpv6 multicast transmission ipv6 hosts verify uniqueness ipv6 addresses local area network lan sending neighbor solicitation message asking link layer address ipv6 address host lan using address responds lan mac addresses designed unique network card minimizes chances duplication generated link-local address ipv6 host determines lan connected router network card ipv6 implementation sending icmpv6 router solicitation message all-routers multicast group link-local address source answer predetermined number attempts host concludes routers connected get response router network information inside needed create globally unique address also two flag bits tell host whether use dhcp get information addresses assignment procedure global addresses similar local address construction prefix supplied router advertisements network multiple prefix announcements cause multiple addresses configured stateless address autoconfiguration slaac requires address block defined local internet registries assigned least blocks divide among subordinate networks initial recommendation stated assignment subnet end-consumer sites replaced recommends giving home sites significantly single recommend every home site given either specifically considered remains seen isps honor recommendation example initial trials comcast customers given single network domain name system dns hostnames mapped ipv6 addresses aaaa quad-a resource records reverse resolution ietf reserved domain ip6.arpa name space hierarchically divided 1-digit hexadecimal representation nibble units 4 bits ipv6 address scheme defined dual-stack host queries dns server resolve fully qualified domain name fqdn dns client host sends two dns requests one querying records querying aaaa records host operating system may configured preference address selection rules alternate record type used early dns implementations ipv6 designed facilitate network renumbering a6 records forward lookup number innovations bit-string labels dname records defined references discussion pros cons schemes deprecated experimental status ipv6 foreseen supplant ipv4 instantaneously protocols continue operate simultaneously time therefore ipv6 transition mechanisms needed enable ipv6 hosts reach ipv4 services allow isolated ipv6 hosts networks reach ipv4 infrastructure according silvia hagen dual-stack implementation ipv4 ipv6 devices easiest way migrate ipv6 many transition mechanisms use tunneling encapsulate ipv6 traffic within ipv4 networks vice versa imperfect solution reduces maximum transmission unit mtu link therefore complicates path mtu discovery may increase latency dual-stack ip implementations provide complete ipv4 ipv6 protocol stacks operating system computer network device top common physical layer implementation ethernet permits dual-stack hosts participate ipv6 ipv4 networks simultaneously method defined device dual-stack implementation operating system ipv4 ipv6 address communicate nodes lan internet using either ipv4 ipv6 domain name system dns protocol used ip protocols resolve fully qualified domain names fqdn ip addresses dual stack requires resolving dns server resolve types addresses dual stack dns server would hold ipv4 addresses records ipv6 addresses aaaa records depending destination resolved dns name server may return ipv4 ipv6 ip address default address selection mechanism preferred protocol needs configured either hosts dns server ietf published happy eyeballs assist dual stack applications connect using ipv4 ipv6 prefer ipv6 connection available however dual-stack also needs implemented routers host service dns server returned ipv6 address dual-stack clients configured prefer ipv6 network able forward ipv6 packets using ipv6 versions routing protocols dual stack networks protocols place application layer migrated ipv6 dual-stack supported major operating system network device vendors legacy networking hardware servers n't support ipv6 internet service providers isps increasingly providing business private customers public-facing ipv6 global unicast addresses however local area network lan ipv4 still used isp provide public facing ipv6 ipv4 lan addresses translated public facing ipv6 address using nat64 network address translation nat mechanism isps provide customers public-facing ipv4 ipv6 addresses thus supporting dual stack networking isps exhausted globally routable ipv4 address pool meanwhile isp customers still trying reach ipv4 web servers destinations significant percentage isps regional internet registry rir zones obtained ipv6 address space includes many world ’ major isps mobile network operators verizon wireless starhub cable chubu telecommunications kabel deutschland swisscom t-mobile internode telefonica isps still allocate customers ipv4 addresses many isps allocate customers ipv6 dual stack ipv4 ipv6 isps report share ipv6 traffic customers network anything 20 40 mid-2017 ipv6 traffic still accounted fraction total traffic several large internet exchange points ixps ams-ix reported 2 seattleix reported 7 2017 survey found many dsl customers served dual stack isp request dns servers resolve fully qualified domain names ipv6 addresses survey also found majority traffic ipv6-ready webserver resources still requested served ipv4 mostly due isp customers use dual stack facility provided isp lesser extent due customers ipv4-only isps technical basis tunneling encapsulating ipv6 packets ipv4 packets outlined rfc 4213 internet backbone ipv4-only one frequently used tunneling protocols 6to4 teredo tunneling also frequently used integrating ipv6 lans ipv4 internet backbone teredo outlined rfc 4380 allows ipv6 local area networks tunnel ipv4 networks encapsulating ipv6 packets within udp teredo relay ipv6 router mediates teredo server native ipv6 network expected 6to4 teredo would widely deployed isp networks would switch native ipv6 2014 google statistics showed use mechanisms dropped almost 0 hybrid dual-stack ipv6/ipv4 implementations recognize special class addresses ipv4-mapped ipv6 addresses addresses typically written 96-bit prefix standard ipv6 format remaining 32 bits written customary dot-decimal notation ipv4 addresses group consist 80-bit prefix zeros next 16 bits ones remaining least-significant 32 bits contain ipv4 address example :ffff:192.0.2.128 represents ipv4 address 192.0.2.128 another deprecated format ipv4-compatible ipv6 addresses :192.0.2.128 significant internal differences ipv4 ipv6 protocol stacks lower-level functionality available programmers ipv6 stack work used ipv4-mapped addresses common ipv6 stacks implement ipv4-mapped address feature either ipv6 ipv4 stacks separate implementations e.g. microsoft windows 2000 xp server 2003 security concerns openbsd operating systems program must open separate socket ip protocol uses systems e.g. linux kernel netbsd freebsd feature controlled socket option ipv6_v6only specified compatibility ipv6 networking mainly software firmware issue however much older hardware could principle upgraded likely replaced instead 2010 american registry internet numbers arin suggested internet servers prepared serve ipv6-only clients january 2012 host software may ipv4 ipv6 networking software may support dual-stack hybrid dual-stack operation many popular applications networking capabilities compliant software transitioning mechanisms outlined ipv6 implemented major operating systems use commercial business home consumer environments personal computers smartphones running recent major operating system versions support ipv6 cablelabs consortium published 160 mbit/s docsis 3.0 ipv6-ready specification cable modems august 2006 docsis 2.0 updated docsis 2.0 ipv6 provide ipv6 support may available firmware upgrade addition nodes ipv6 enabled default software manufacturer may result inadvertent creation shadow networks causing ipv6 traffic flowing networks ipv4 security management place may also occur operating system upgrades newer operating system enables ipv6 default older one failing update security infrastructure accommodate ipv6 lead ipv6 traffic bypassing shadow networks occurred business networks enterprises replacing windows xp systems ipv6 stack enabled default windows 7 systems ipv6 stack implementors therefore recommended disabling ipv4 mapped addresses instead using dual-stack network supporting ipv4 ipv6 necessary research shown use fragmentation leveraged evade network security controls similar ipv4 result requires first fragment ipv6 packet contains entire ipv6 header chain pathological fragmentation cases forbidden additionally result research evasion ra-guard deprecated use fragmentation neighbor discovery discouraged use fragmentation secure neighbor discovery send due anticipated global growth internet internet engineering task force ietf early 1990s started effort develop next generation ip protocol beginning 1992 several proposals appeared expanded internet addressing system end 1992 ietf announced call white papers september 1993 ietf created temporary ad-hoc ip next generation ipng area deal specifically issues new area led allison mankin scott bradner directorate 15 engineers diverse backgrounds direction-setting preliminary document review working-group members j. allard microsoft steve bellovin jim bound digital equipment corporation ross callon wellfleet brian carpenter cern dave clark mit john curran nearnet steve deering xerox dino farinacci cisco paul francis ntt eric fleischmann boeing mark knopper ameritech greg minshall novell rob ullmann lotus lixia zhang xerox internet engineering task force adopted ipng model 25 july 1994 formation several ipng working groups 1996 series rfcs released defining internet protocol version 6 ipv6 starting version 5 used experimental internet stream protocol first rfc standardize ipv6 1995 became obsoleted 1998 july 2017 rfc replaced 1993 introduction classless inter-domain routing cidr routing ip address allocation internet extensive use network address translation nat delayed ipv4 address exhaustion final phase exhaustion started 3 february 2011 universities among early adopters ipv6 virginia tech deployed ipv6 trial location 2004 since expanded ipv6 deployment across campus network 2016 82 traffic network used ipv6 imperial college london experimenting ipv6 deployment since 2003 2016 ipv6 traffic networks averaged 20 40 significant portion ipv6 traffic generated high energy physics collaboration cern depends entirely ipv6 since 2008 domain name system dns supports ipv6 year ipv6 first used major world event 2008 summer olympic games beijing 4 domain names 16.2 networks internet ipv6 protocol support 2014 ipv4 still carried 99 worldwide internet traffic deployment ipv6 internet backbone progress 2018 25.3 54,000 autonomous systems advertised ipv4 ipv6 prefixes global border gateway protocol bgp routing database 243 networks advertised ipv6 prefix internet backbone transit networks offering ipv6 support exist every country globally except parts africa middle east china mid-2018 major european broadband isps deployed ipv6 majority customers british sky broadcasting provided 86 customers ipv6 deutsche telekom 56 deployment ipv6 xs4all netherlands 73 deployment belgium broadband isps voo telenet 73 63 ipv6 deployment respectively united states broadband isp comcast ipv6 deployment 66 2018 comcast reported estimated 36.1 million ipv6 users reported 22.3 million ipv6 users internet exchanges amsterdam seattle large exchanges publicly show ipv6 traffic statistics october 2018 tracking 2.9 7.7 growing 1.9 -2.6 per year respectively percentage users reaching google services ipv6 29 26 alexa top 1000 web servers support ipv6 according internet society report state ipv6 deployment 2018 major mobile network providers drove ipv6 adoption japan mobile network providers nippon telegraph telephone ntt kddi softbank pushed forward ipv6 deployment india ipv6 adoption advanced jio lte network covers india ’ 29 states reaches 80 country ’ population 2018 jio estimated 237.6 million ipv6 users united states ipv6 adoption pioneered verizon wireless 2009 verizon mandated ipv6 operation reduced ipv4 optional capability lte cellular hardware verizon productively deployed ipv6 across existing ipv4 network avoid network complexity arose networks using private network ipv4 address space 2018 80 traffic verizon wireless major content providers using ipv6 united states data centers transitioned ipv6 networking since 2018 facebook eliminating ipv4 data centers network-facing load balancers accept ipv4 ipv6 traffic linkedin microsoft stated intentions move networks ipv6 google linkedin akamai 2018 deploying ipv6 data center networks connecting natively ipv6 end users governments including united states china issued guidelines requirements ipv6 capability
node17:Wikipedia entry. Entry name: VyOS. Entry content: vyos vyos open source network operating system based debian gnu/linux vyos provides free routing platform competes directly commercially available solutions well known network providers vyos run standard amd64 i586 systems able used router firewall platform cloud deployments brocade communications stopped development vyatta core edition vyatta routing software small group enthusiasts took last community edition worked building open source fork live place end life vc vyos version 1.0.0 hydrogen released december 22 2013 october 9 2014 version 1.1.0 helium released versions released thus far based debian 6.0 squeeze available 32-bit images 64-bit images physical virtual machines january 28 2019 version 1.2.0 crux released version 1.2.0 based debian 8 jessie version 1.0 1.1 named elements new naming scheme based constellations used version 1.2 vyos ova image vmware released february 3 2014 maintenance release allows convenient setup vyos vmware platform includes vmware tools paravirtual drivers ova image downloaded standard download site starting version 1.0.2 amazon ec2 customers select vyos ami image deprecated removed february 2018 starting version 1.1.7 aws customers use new marketplace vyos ami starting version 1.2.0 aws customers deploy new marketplace ami new offering comes support starting version 1.2.0 azure customers use vyos azure
node18:Wikipedia entry. Entry name: Microsoft_Notification_Protocol. Entry content: microsoft notification protocol microsoft notification protocol msnp also known mobile status notification protocol instant messaging protocol developed microsoft use microsoft messenger service instant messaging clients connect skype since 2014 earlier windows live messenger msn messenger windows messenger microsoft messenger mac third-party clients pidgin trillian also communicate using protocol msnp first used publicly available product first release msn messenger 1999 major change made protocol new command syntax changes results version-number incremented one format msnp october 2003 microsoft started blocking access messenger service using versions msnp8 starting september 11 2007 microsoft forces current users msn messenger upgrade windows live messenger 8.1 due security considerations msnp1 never public believed used early stages design development msn messenger 1 pre-release version made available developers 1999 internet draft however production version differed published version subtle ways msnp2 msnp3 supported msn messenger 2.0 msnp3 4 5 supported messenger servers july 2000 used msn messenger 3.0 4.0 msnp6 used later versions msn messenger 4.x 2002 msn messenger 5.0 used msnp7 msnp8 introduced different authentication method sending authorization microsoft passport secure servers returning challenge string minimum version protocol accepted .net messenger service microsoft blocked earlier versions security reasons old obsolete clients unable sign forcing users upgrade clients version 5.0 msn messenger one uses msnp version windows messenger uses msnp8 standard version including 4.7 latest 5.1 protocol supports windows messenger-to-windows messenger webcam voice capabilities msnp9 introduced msn messenger 6 adding support type data messages used transferring display pictures custom emoticons clients frame-by-frame web cam rather traditional stream like windows media player wmv format improved voice system well improved nat traversal file transfers employed msn messenger 6.1 microsoft started blocking earlier versions october 2003 however big overhaul obvious change integration hotmail address books employed msn messenger 7.0 employed msn messenger 7.5 employed windows live messenger 8.0 msnp13 features lot changes notably contact list synchronization removed clients must instead send soap request contacts server also known client goes abch abch stands address book clearing house address book service behind msn windows live services client must send contacts data server send presence information msnp14 adds yahoo messenger interoperability msnp15 protocol version introduced windows live messenger 8.1 2006-09-08 based msnp14 uses different authentication mechanism called rps relying party suite twn tweener authentication used protocol versions 14 sso single sign-on rps authentication used protocol versions 15 addition new authentication mechanism microsoft also planning making properties user roaming user display picture future personal status messages wherever user signs furthermore support user locations added personal status message although feature later removed windows live messenger 8.1 client msnp16 used pre-release version windows live messenger 9.0 leaked december 2007 features multiple points presence mpop ability sign 2 places time chats replicated places uux data extended contain endpoint data also mpop well signature sound msn object data msnp17 identified windows live messenger servers messenger.hotmail.com unused official client released microsoft msnp18 used windows live messenger 2009 14.0 main new addition groups feature much like persistent grouped conversations uux data extended include scene image msn object data employed windows live messenger 2011 wave 4 employed windows live messenger 2012 employed skype since early 2014
node19:Wikipedia entry. Entry name: Boa_(web_server). Entry content: boa web server boa discontinued since 2005 open-source small-footprint web server suitable embedded applications originally written paul phillips previously maintained larry doolittle jon nelson slashdot fotolog use boa serve images january 2006 boa following limitations
node20:Wikipedia entry. Entry name: Hypertext_caching_protocol. Entry content: hypertext caching protocol hypertext caching protocol abbreviated htcp used discovering http caches cached data managing sets http caches monitoring cache activity permits full request response headers used cache management expands domain cache management include monitoring remote cache additions deletions requesting immediate deletions sending hints web objects third party locations cacheable objects unavailability web objects multi-octet htcp protocol elements transmitted network byte order reserved fields set binary zero senders left unexamined receivers headers must presented crlf line termination http hostnames specified compatible sender receiver private naming scheme hosts.txt nis use names depending schemes sent htcp neighbors known participate said schemes raw addresses dotted quad ipv4 colon-format ipv6 universal public dns names use private names addresses require special operational care udp must supported htcp agents must isolated network failures delays htcp agent prepared act useful ways response forthcoming responses delayed reordered damaged tcp optional expected used protocol debugging iana assigned port 4827 standard tcp udp port number htcp htcp message following general format
node21:Wikipedia entry. Entry name: Fast_and_Secure_Protocol. Entry content: fast secure protocol fast secure protocol fasp proprietary data transfer protocol fasp network-optimized network protocol developed aspera owned ibm associated client/server software packages also commonly called aspera technology patented us patent 20090063698 method system aggregate bandwidth control similar connectionless udp protocol fasp expect feedback every packet sent packets marked really lost must requested recipient result suffer much loss throughput tcp networks high latency high packet loss large organizations like ibm european nucleotide archive us national institutes health national center biotechnology information others use protocol different areas amazon also wants use protocol uploading data centers fasp built-in security mechanisms affect transmission speed encryption algorithms used based exclusively open standards transfer ssh used key exchange authentication randomly generated one-way keys discarded end transmission data encrypted decrypted immediately sending receiving aes-128 counteract attacks monitoring encrypted information long transfers aes operated cipher feedback mode secret initialization vector block addition integrity check data block takes place case example man-in-the-middle attack would noticed fasp control port tcp port 33001 port ssh uses data transfer begins udp port 33001 increments additional connection thread
node22:Wikipedia entry. Entry name: Hiawatha_(web_server). Entry content: hiawatha web server hiawatha web server available multiple platforms developed hugo leisink since 2002 hiawatha started january 2002 small web server suitable servers old hardware leisink computer science student time initially created server support internet servers student houses delft south holland netherlands server designed improved security focus leisink states lot security features hiawatha wo n't find webserver author said know long time vulnerabilities exist web servers one thing bothers runtime cgi cgi process web servers run forever single cgi script dos webserver system administrator needed kill script client hacker keeps guessing passwords http authentication kind issues inspired create hiawatha settings maximum request sending time maximum cgi run time client banning etc features opinion every daemon january 2009 edition linux magazine included article hiawatha web server describing light web server good performance innovative security functions hiawatha frequently cited lightweight alternative apache prioritizes easy installation reduced storage including many additional features february 2019 leisink simultaneously announced release version 10.9 end major development pair blog posts hiawatha web server implements important functions modern web server hiawatha many security features web server like preventing sql-injection cross-site scripting xss cross-site request forgery csrf prevention denial-of-service protection control external image linking banning potential hackers limiting runtime cgi applications author worked rfc3546 support openssl documentation subject extremely poor progress difficult although rfc3546 support included since v8.6 version developed polarsslv1.2 although security main focus hiawatha users also speak highly speed performance according performance test carried independent researcher saltwaterc hiawatha faster ten servers tested drupal static content performing comparably rest metrics hiawatha supports load-balanced fastcgi php-fastcgi utility although latter deprecated replaced php project fastcgi process manager php-fpm makes fast scalable handling dynamic content
node23:Wikipedia entry. Entry name: Zephyr_(protocol). Entry content: zephyr protocol created mit part project athena zephyr designed instant messaging protocol application-suite heavy unix background using one thing well philosophy unix made several separate programs working together make complete messaging system zephyr irc first widely used ip-based instant-messaging systems zephyr invention ciarán anthony dellafera time employee digital equipment corporation visiting research scientist project athena design originated solution reverse remote procedure call rpc problem service providers servers client–server system locate communicate service users initial concept emerged conversations ciarán michael r. gretzinger another systems engineer project athena early 1986 mid late 1986 ciarán distilled problem two specific issues ability locate users distributed computing environment known today presence detection ability deliver scalable light-weight authentic messages distributed computing environment zephyr development team mark w. eichin robert s. french david c. jedlinsky john t. kohl william e. sommerfeld responsible creation initial code-base subsequent releases issued throughout late 1980s zephyr still use today university environments carnegie mellon iowa state university maryland college park brown university mit largely replaced modern popular instant messenger systems xmpp mit currently operates zephyr xmpp zephyr uses udp datagrams sent ports 2102 2103 2104 incompatible routers nat reports internal ip address returning datagrams incorrectly routed sites deployed zephyr using kerberos 4 authentication exclusively though late 2007 sites including iowa state deployed zephyr using kerberos 5
node24:Wikipedia entry. Entry name: XML_Configuration_Access_Protocol. Entry content: xml configuration access protocol xml configuration access protocol xcap application layer protocol allows client read write modify application configuration data stored xml format server xcap maps xml document sub-trees element attributes http uris components directly accessed clients using http protocol xcap server used xcap clients store data like buddy lists presence policy combination sip presence server supports publish subscribe notify methods provide complete sip simple server solution following operations supported via xcap protocol client-server interaction operations executed following items xcap addressing mechanism based xpath provides ability navigate around xml tree following applications provided xcap using specific auid application unique id xcap protocol based following ietf standards rfc4825 rfc4826 rfc4827 rfc5025 application org.openmobilealliance.pres-rules standard added
node25:Wikipedia entry. Entry name: Tunneling_protocol. Entry content: tunneling protocol computer networks tunneling protocol communications protocol allows movement data one network another involves allowing private network communications sent across public network internet process called encapsulation tunneling involves repackaging traffic data different form perhaps encryption standard hide nature traffic run tunnel tunneling protocol works using data portion packet payload carry packets actually provide service tunneling uses layered protocol model osi tcp/ip protocol suite usually violates layering using payload carry service normally provided network typically delivery protocol operates equal higher level layered model payload protocol tunneling protocol may example allow foreign protocol run network support particular protocol running ipv6 ipv4 another important use provide services impractical unsafe offered using underlying network services providing corporate network address remote user whose physical network address part corporate network users also use tunneling sneak firewall using protocol firewall would normally block wrapped inside protocol firewall block http firewall policy specifically exclude kind wrapping trick function get around intended firewall policy set interlocked firewall policies another http-based tunneling method uses http connect method/command client issues http connect command http proxy proxy makes tcp connection particular server port relays data server port client connection creates security hole connect-capable http proxies commonly restrict access connect method proxy allows connections specific ports 443 https example network layer network layer generic routing encapsulation gre protocol running ip ip protocol number 47 often serves carry ip packets rfc 1918 private addresses internet using delivery packets public ip addresses case delivery payload protocols payload addresses incompatible delivery network also possible establish connection using data link layer layer 2 tunneling protocol l2tp allows transmission frames two nodes tunnel encrypted default relies tcp/ip protocol chosen determine level security ssh uses port 22 enable data encryption payloads transmitted public network internet connection thereby providing vpn functionality ipsec end-to-end transport mode also operate tunneling mode trusted security gateway understand particular protocol stack imposed tunneling network engineers must understand payload delivery protocol sets secure shell ssh tunnel consists encrypted tunnel created ssh protocol connection users may set ssh tunnels transfer unencrypted traffic network encrypted channel example microsoft windows machines share files using server message block smb protocol non-encrypted protocol one mount microsoft windows file-system remotely internet someone snooping connection could see transferred files mount windows file-system securely one establish ssh tunnel routes smb traffic remote fileserver encrypted channel even though smb protocol contains encryption encrypted ssh channel travels offers security ssh connection established tunnel starts ssh listening port remote local host connections forwarded specified address port originating opposing remote local previously host tunneling tcp- encapsulating payload ppp tcp-based connection ssh port forwarding known tcp-over-tcp induce dramatic loss transmission performance problem known tcp meltdown virtual private network software may instead use protocol simpler tcp tunnel connection however often problem using openssh port forwarding many use cases entail tcp-over-tcp tunneling meltdown avoided openssh client processes local client-side tcp connection order get actual payload sent sends payload directly tunnel tcp connection server side openssh server similarly unwraps payload order wrap routing final destination naturally wrapping unwrapping also occurs reverse direction bidirectional tunnel ssh tunnels provide means bypass firewalls prohibit certain internet services long site allows outgoing connections example organization may prohibit user accessing internet web pages port 80 directly without passing organization proxy filter provides organization means monitoring controlling user sees web users may wish web traffic monitored blocked organization proxy filter users connect external ssh server create ssh tunnel forward given port local machine port 80 remote web server access remote web server users would point browser local port nowiki http //localhost/ /nowiki ssh clients support dynamic port forwarding allows user create socks 4/5 proxy case users configure applications use local socks proxy server gives flexibility creating ssh tunnel single port previously described socks free user limitations connecting predefined remote port server application n't support socks proxifier used redirect application local socks proxy server proxifiers proxycap support ssh directly thus avoiding need ssh client recent versions openssh even allowed create layer 2 layer 3 tunnels ends enabled tunneling capabilities creates codice_1 layer 3 default codice_2 layer 2 virtual interfaces ends connection allows normal network management routing used used routers traffic entire subnetwork tunneled pair codice_2 virtual interfaces function like ethernet cable connecting ends connection join kernel bridges
node26:Wikipedia entry. Entry name: SPDY. Entry content: spdy spdy pronounced speedy deprecated open-specification networking protocol developed primarily google transporting web content spdy manipulates http traffic particular goals reducing web page load latency improving web security spdy achieves reduced latency compression multiplexing prioritization although depends combination network website deployment conditions name spdy trademark google acronym throughout process core developers spdy involved development http/2 including mike belshe roberto peon february 2015 google announced following recent final ratification http/2 standard support spdy would deprecated support spdy would withdrawn google removed spdy support google chrome 51 mozilla removed firefox 50 apple deprecated technology macos 10.14.4 ios 12.2. group developing spdy stated publicly working toward standardisation available internet draft first draft http/2 used spdy working base specification draft editing implementations spdy exist chromium mozilla firefox opera amazon silk internet explorer safari implementations chromium firefox open source software february 2015 google announced plans remove support spdy favor http/2 http/2 first discussed became apparent spdy gaining traction implementers like mozilla nginx showing significant improvements http/1.x call proposals selection process spdy chosen basis http/2 since number changes based discussion working group feedback implementers february 11 2016 google announced chrome would longer support spdy npn may 15 2016 anniversary rfc 7540 january 25 2019 apple announced spdy would deprecated favor http/2 would removed future releases goal spdy reduce web page load time achieved prioritizing multiplexing transfer web page subresources one connection per client required tls encryption nearly ubiquitous spdy implementations transmission headers gzip- deflate-compressed design contrast http headers sent human-readable text moreover servers may hint even push content instead awaiting individual requests resource web page spdy requires use ssl/tls tls extension alpn security also supports operation plain tcp requirement ssl security avoid incompatibility communication across proxy spdy replace http modifies way http requests responses sent wire means existing server-side applications used without modification spdy-compatible translation layer put place spdy effectively tunnel http https protocols sent spdy http requests processed tokenized simplified compressed example spdy endpoint keeps track headers sent past requests avoid resending headers changed must sent compressed ietf working group httpbis released draft http/2 spdy draft-mbelshe-httpbis-spdy-00 chosen starting point use within https spdy needs tls extension next protocol negotiation npn thus browser server support depends https library openssl 1.0.1 greater introduces npn patches add npn support also written nss tlslite spdy scheduled switch npn application-layer protocol negotiation alpn end 2014 security support provider interface sspi microsoft implemented npn extension tls implementation prevented spdy inclusion latest .net framework versions since spdy specification refined http/2 expected include spdy implementation one could expect microsoft release support http/2 finalized spdy versioned protocol control frames 15 dedicated bits indicate version session protocol approximately 7.1 websites support spdy fielded versions two popular web servers nginx apache major providers spdy traffic although latest version nginx removed spdy support compares adoption rate 8.1 newer http/2 protocol overtaken adoption spdy google services e.g google search gmail ssl-enabled services use spdy available google ads also served spdy-enabled servers brief history spdy support amongst major web players according w3techs spdy-enabled websites use nginx litespeed web server coming second
node27:Wikipedia entry. Entry name: Multicast_Listener_Discovery. Entry content: multicast listener discovery multicast listener discovery mld component internet protocol version 6 ipv6 suite mld used ipv6 routers discovering multicast listeners directly attached link much like internet group management protocol igmp used ipv4 protocol embedded icmpv6 instead using separate protocol mldv1 similar igmpv2 mldv2 similar igmpv3 protocol described rfc 3810 updated rfc 4604 several operating system support mldv2
node28:Wikipedia entry. Entry name: Reverse_Address_Resolution_Protocol. Entry content: reverse address resolution protocol reverse address resolution protocol rarp obsolete computer networking protocol used client computer request internet protocol ipv4 address computer network available link layer hardware address mac address client broadcasts request need prior knowledge network topology identities servers capable fulfilling request rarp described internet engineering task force ietf publication rfc 903 rendered obsolete bootstrap protocol bootp modern dynamic host configuration protocol dhcp support much greater feature set rarp rarp requires one server hosts maintain database mappings link layer addresses respective protocol addresses media access control mac addresses need individually configured servers administrator rarp limited serving ip addresses reverse arp differs inverse address resolution protocol inarp described rfc 2390 designed obtain ip address associated local frame relay data link connection identifier inarp used ethernet although original uses rarp overcome different protocols modern day protocols use rarp examples cisco overlay transport virtualization otv rarp used update layer 2 forwarding tables mac address moves data centers",wikics,nc
"Classify the wikipedia page represented by node29 using its subgraph data (text attributes and connections) as follows.

node0: Database applications manage data entry/retrieval via programs like Oracle/MySQL, featuring web interfaces for multi-user access (e.g., Facebook).  
node1: Libraries are reusable pre-written code (static/dynamic) enabling modularity; issues include DLL hell and linking complexities in software development.  
node2: Microsoft's discontinued CCF integrated customer support systems via SOA, using BizTalk/SQL Server, later merged into Dynamics CRM.  
node3: Md5deep generates cryptographic hashes (MD5/SHA) for files, aiding security/forensics with recursive directory scanning across platforms.  
node4: Zcash is a privacy-focused cryptocurrency using zk-SNARKs for shielded transactions, balancing anonymity with regulatory compliance options.  
node5: Hy is a Lisp dialect for Python, translating code to Python ASTs, enabling metaprogramming and seamless Python library integration.  
node6: Gecko is Firefox's open-source browser engine (C++/Rust), supporting web standards/XUL; Quantum updates improved performance post-2017.  
node7: Apache Cassandra is a distributed NoSQL database for scalable, fault-tolerant data storage across commodity servers (developed by Facebook).  
node8: Formula Language scripts Lotus Notes actions/fields, offering functional string/list processing inspired by Lisp/Icon.  
node9: LibreOffice Base is a cross-platform relational database tool with GUI for tables/forms, using HSQLDB/Firebird and external database connectors.  
node10: ParaSail is a parallel-safe object-oriented language with garbage collection and region-based memory for concurrent programming.  
node11: GoGrid provided cloud infrastructure (VMs/APIs), winning industry awards before joining Gartner's IaaS Magic Quadrant.  
node12: LOCKSS preserves web content via distributed peer copies, ensuring access even if publishers remove data, with self-auditing for integrity.
node13: 1958-developed AI programming language using parentheses, macros, garbage collection, dynamic typing, and list processing.  
node14: Open-source RDBMS, LAMP stack component, used by Facebook/YouTube, written in C/C++, owned by Oracle post-Sun acquisition.  
node15: Scheme dialect with bytecode VM, developed for rapid learning, includes regex tools under BSD license.  
node16: Distributed coordination service with hierarchical storage, ensures high availability for large systems like Hadoop.  
node17: SQL engine for HBase enabling OLTP on Hadoop via JDBC, originated at Salesforce, Apache since 2014.  
node18: Hadoop-based SQL data warehouse for fast queries, supports CREATE TABLE and ETL operations.  
node19: Lucene-backed search platform with faceted search, clustering, and distributed indexing, scaled via SolrCloud.
node20: Python, created by Guido van Rossum in 1991, is a dynamically typed, whitespace-indented language supporting multiple paradigms, with versions 2.x and 3.x, managed by the Python Software Foundation.  
node21: Ruby, designed by Yukihiro Matsumoto, combines Perl and Smalltalk influences, emphasizing simplicity and productivity, popularized via Rails, with versions 1.8/1.9 and ISO standardization.  
node22: VxDs managed virtual device drivers in Windows 3.x/9x, enabling hardware access in multitasking, replaced by WDM in NT-based systems.  
node23: ELinks, a text-based Unix browser, forked from Links, discontinued in OpenBSD due to security concerns and developer inactivity.  
node24: Chez Scheme, a fast R6RS-compliant Scheme compiler, offers native binaries and open-source under Apache 2.0, contrasting with Petite Chez Scheme’s interpreter.  
node25: Amazon RDS simplifies managed relational databases on AWS, supporting MySQL, PostgreSQL, and Aurora, with auto-scaling, backups, and multi-AZ deployments.  
node26: Apache Ambari manages Hadoop clusters, aiding provisioning/monitoring, used by IBM, Hortonworks, and others, part of Apache Software Foundation.  
node27: WinG was a Windows 3.x graphics API for gaming, enabling faster DIB handling, deprecated post-DirectX but supported via legacy DLLs.
node28: Code hosting platform with version control, collaboration tools; acquired by Microsoft in 2018; hosts millions of users/repositories, open source projects, faced DDoS attacks and acquisition controversies.  
node29: Apache API unifying cloud management via REST; supports platforms like AWS, VMware; developed by Red Hat, moved to Apache Attic due to inactivity.

the connection relationship among the nodes mentioned:
 <node0, node14>,<node1, node2>,<node1, node5>,<node1, node14>,<node1, node15>,<node1, node21>,<node1, node22>,<node1, node24>,<node1, node29>,<node2, node22>,<node2, node27>,<node3, node28>,<node4, node28>,<node5, node13>,<node5, node15>,<node5, node20>,<node5, node24>,<node5, node28>,<node6, node23>,<node7, node16>,<node7, node17>,<node7, node18>,<node7, node19>,<node7, node26>,<node7, node29>,<node8, node13>,<node9, node14>,<node10, node13>,<node10, node20>,<node10, node21>,<node11, node25>,<node11, node29>,<node12, node28>,<node13, node15>,<node13, node20>,<node13, node21>,<node13, node24>,<node14, node17>,<node14, node20>,<node14, node25>,<node14, node28>,<node15, node24>,<node16, node17>,<node16, node18>,<node16, node19>,<node16, node26>,<node16, node29>,<node17, node18>,<node17, node19>,<node17, node26>,<node17, node28>,<node17, node29>,<node18, node19>,<node18, node26>,<node18, node29>,<node19, node20>,<node19, node21>,<node19, node26>,<node19, node29>,<node20, node21>,<node20, node26>,<node20, node28>,<node21, node23>,<node21, node28>,<node21, node29>,<node22, node27>,<node24, node28>,<node26, node29>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",distributed computing architecture,"node0: Database applications manage data entry/retrieval via programs like Oracle/MySQL, featuring web interfaces for multi-user access (e.g., Facebook).  
node1: Libraries are reusable pre-written code (static/dynamic) enabling modularity; issues include DLL hell and linking complexities in software development.  
node2: Microsoft's discontinued CCF integrated customer support systems via SOA, using BizTalk/SQL Server, later merged into Dynamics CRM.  
node3: Md5deep generates cryptographic hashes (MD5/SHA) for files, aiding security/forensics with recursive directory scanning across platforms.  
node4: Zcash is a privacy-focused cryptocurrency using zk-SNARKs for shielded transactions, balancing anonymity with regulatory compliance options.  
node5: Hy is a Lisp dialect for Python, translating code to Python ASTs, enabling metaprogramming and seamless Python library integration.  
node6: Gecko is Firefox's open-source browser engine (C++/Rust), supporting web standards/XUL; Quantum updates improved performance post-2017.  
node7: Apache Cassandra is a distributed NoSQL database for scalable, fault-tolerant data storage across commodity servers (developed by Facebook).  
node8: Formula Language scripts Lotus Notes actions/fields, offering functional string/list processing inspired by Lisp/Icon.  
node9: LibreOffice Base is a cross-platform relational database tool with GUI for tables/forms, using HSQLDB/Firebird and external database connectors.  
node10: ParaSail is a parallel-safe object-oriented language with garbage collection and region-based memory for concurrent programming.  
node11: GoGrid provided cloud infrastructure (VMs/APIs), winning industry awards before joining Gartner's IaaS Magic Quadrant.  
node12: LOCKSS preserves web content via distributed peer copies, ensuring access even if publishers remove data, with self-auditing for integrity.
node13: 1958-developed AI programming language using parentheses, macros, garbage collection, dynamic typing, and list processing.  
node14: Open-source RDBMS, LAMP stack component, used by Facebook/YouTube, written in C/C++, owned by Oracle post-Sun acquisition.  
node15: Scheme dialect with bytecode VM, developed for rapid learning, includes regex tools under BSD license.  
node16: Distributed coordination service with hierarchical storage, ensures high availability for large systems like Hadoop.  
node17: SQL engine for HBase enabling OLTP on Hadoop via JDBC, originated at Salesforce, Apache since 2014.  
node18: Hadoop-based SQL data warehouse for fast queries, supports CREATE TABLE and ETL operations.  
node19: Lucene-backed search platform with faceted search, clustering, and distributed indexing, scaled via SolrCloud.
node20: Python, created by Guido van Rossum in 1991, is a dynamically typed, whitespace-indented language supporting multiple paradigms, with versions 2.x and 3.x, managed by the Python Software Foundation.  
node21: Ruby, designed by Yukihiro Matsumoto, combines Perl and Smalltalk influences, emphasizing simplicity and productivity, popularized via Rails, with versions 1.8/1.9 and ISO standardization.  
node22: VxDs managed virtual device drivers in Windows 3.x/9x, enabling hardware access in multitasking, replaced by WDM in NT-based systems.  
node23: ELinks, a text-based Unix browser, forked from Links, discontinued in OpenBSD due to security concerns and developer inactivity.  
node24: Chez Scheme, a fast R6RS-compliant Scheme compiler, offers native binaries and open-source under Apache 2.0, contrasting with Petite Chez Scheme’s interpreter.  
node25: Amazon RDS simplifies managed relational databases on AWS, supporting MySQL, PostgreSQL, and Aurora, with auto-scaling, backups, and multi-AZ deployments.  
node26: Apache Ambari manages Hadoop clusters, aiding provisioning/monitoring, used by IBM, Hortonworks, and others, part of Apache Software Foundation.  
node27: WinG was a Windows 3.x graphics API for gaming, enabling faster DIB handling, deprecated post-DirectX but supported via legacy DLLs.
node28: Code hosting platform with version control, collaboration tools; acquired by Microsoft in 2018; hosts millions of users/repositories, open source projects, faced DDoS attacks and acquisition controversies.  
node29: Apache API unifying cloud management via REST; supports platforms like AWS, VMware; developed by Red Hat, moved to Apache Attic due to inactivity.","node0:Wikipedia entry. Entry name: Database_application. Entry content: database application database application computer program whose primary purpose entering retrieving information computerized database early examples database applications accounting systems airline reservations systems sabre developed starting 1957 characteristic modern database applications facilitate simultaneous updates queries multiple users systems 1970s might accomplished user front 3270 terminal mainframe computer mid-1980s becoming common give user personal computer program running pc connected database server information would pulled database transmitted network arranged graphed otherwise formatted program running pc starting mid-1990s became common build database applications web interface rather develop custom software run user pc user would use web browser program every application database application web interface advantage could used devices different sizes different hardware different operating systems examples early database applications web interfaces include amazon.com used oracle relational database management system photo.net online community whose implementation top oracle described book database-backed web sites ziff-davis press may 1997 ebay also running oracle electronic medical records referred emrexperts.com december 2010 software database application 2005 o'reilly book uses term title database applications web complex database applications remain accounting systems sap may contain thousands tables single module many today widely used computer systems database applications example facebook built top mysql etymology phrase database application comes practice dividing computer software systems programs operating system compilers file system tools database management system application programs payroll check processor standard pc running microsoft windows example windows operating system contains systems programs games word processors spreadsheet programs photo editing programs etc would application programs application short application program database application short database application program every program uses database would typically considered database application example many physics experiments e.g. large hadron collider generate massive data sets programs subsequently analyze data sets constitute database though typically managed standard relational database management system computer programs analyze data primarily developed answer hypotheses put information back database therefore overall program would called database application
node1:Wikipedia entry. Entry name: Library_(computing). Entry content: library computing computer science library collection non-volatile resources used computer programs often software development may include configuration data documentation help data message templates pre-written code subroutines classes values type specifications ibm os/360 successors referred partitioned data sets library also collection implementations behavior written terms language well-defined interface behavior invoked instance people want write higher level program use library make system calls instead implementing system calls addition behavior provided reuse multiple independent programs program invokes library-provided behavior via mechanism language example simple imperative language c behavior library invoked using c normal function-call distinguishes call library function versus another function program way code organized system library code organized way used multiple programs connection code part program organized used within one program distinction gain hierarchical notion program grows large multi-million-line program case may internal libraries reused independent sub-portions large program distinguishing feature library organized purposes reused independent programs sub-programs user needs know interface internal details library value library lies reuse behavior program invokes library gains behavior implemented inside library without implement behavior libraries encourage sharing code modular fashion ease distribution code behavior implemented library connected invoking program different program lifecycle phases code library accessed build invoking program library called static library alternative build executable invoking program distribute independently library implementation library behavior connected executable invoked executed either part process starting execution middle execution case library called dynamic library loaded run time dynamic library loaded linked preparing program execution linker alternatively middle execution application may explicitly request module loaded compiled languages standard library although programmers also create custom libraries modern software systems provide libraries implement majority system services libraries commoditized services modern application requires code used modern applications provided system libraries earliest programming concepts analogous libraries intended separate data definitions program implementation jovial brought compool communication pool concept popular attention 1959 although adopted idea large-system sage software following computer science principles separation concerns information hiding comm pool purpose permit sharing system data among many programs providing centralized data description cobol also included primitive capabilities library system 1959 jean sammet described inadequate library facilities retrospect another major contributor modern library concept came form subprogram innovation fortran fortran subprograms compiled independently compiler lacked linker prior introduction modules fortran-90 type checking fortran subprograms impossible finally historians concept remember influential simula 67 simula first object-oriented programming language classes nearly identical modern concept used java c++ c class concept simula also progenitor package ada module modula-2 even developed originally 1965 simula classes could included library files added compile time libraries important program linking binding process resolves references known links symbols library modules linking process usually automatically done linker binder program searches set libraries modules given order usually considered error link target found multiple times given set libraries linking may done executable file created whenever program used run time references resolved may addresses jumps routine calls may main program one module depending upon another resolved fixed relocatable addresses common base allocating runtime memory memory segments module referenced programming languages may use feature called smart linking whereby linker aware integrated compiler linker knows external references used code library never actually used even though internally referenced discarded compiled application example program uses integers arithmetic arithmetic operations exclude floating-point library routines smart-linking feature lead smaller application file sizes reduced memory usage references program library module stored relative symbolic form resolved code libraries assigned final static addresses relocation process adjusting references done either linker loader general relocation done individual libraries addresses memory may vary depending program using libraries combined position-independent code avoids references absolute addresses therefore require relocation linking performed creation executable another object file known static linking early binding case linking usually done linker may also done compiler static library also known archive one intended statically linked originally static libraries existed static linking must performed modules recompiled modules required program sometimes statically linked copied executable file process resulting stand-alone file known static build program static build may need relocation virtual memory used address space layout randomization desired shared library shared object file intended shared executable files shared object files modules used program loaded individual shared objects memory load time run time rather copied linker creates single monolithic executable file program shared libraries statically linked meaning references library modules resolved modules allocated memory executable file created often linking shared libraries postponed loaded modern operating systems shared library files format executable files offers two main advantages first requires making one loader rather two single loader considered well worth added complexity secondly allows executables also used shared libraries symbol table typical combined executable shared library formats elf mach-o unix pe windows older environments 16-bit windows mpe hp 3000 stack-based data local allowed shared-library code significant restrictions placed shared-library code library code may shared memory multiple processes well disk virtual memory used processes would execute physical page ram mapped different address spaces processes advantages instance openstep system applications often hundred kilobytes size loaded quickly majority code located libraries already loaded purposes operating system programs accomplish ram sharing using position-independent code unix leads complex flexible architecture using common virtual addresses windows os/2 systems make sure various tricks like pre-mapping address space reserving slots shared library code great probability shared third alternative single-level store used ibm system/38 successors allows position-dependent code places significant restrictions code placed shared cases different versions shared libraries cause problems especially libraries different versions file name different applications installed system require specific version scenario known dll hell named windows os/2 dll file modern operating systems 2001 clean-up methods eliminate situations use application-specific private libraries dynamic linking late binding linking performed program loaded load time executed run time rather executable file created dynamically linked library dynamic-link library dll windows os/2 dynamic shared object dso unix-like systems library intended dynamic linking minimal amount work done linker executable file created records library routines program needs index names numbers routines library majority work linking done time application loaded load time execution run time usually necessary linking program called dynamic linker linking loader actually part underlying operating system however possible exceedingly difficult write program uses dynamic linking includes dynamic linker even operating system provides support dynamic linking programmers originally developed dynamic linking multics operating system starting 1964 mts michigan terminal system built late 1960s since shared libraries systems change often systems compute likely load address shared library system needed store information libraries executables every shared library loaded undergone process load predetermined address speeds process dynamic linking optimization known prebinding macos prelinking linux disadvantages technique include time required precompute addresses every time shared libraries change inability use address space layout randomization requirement sufficient virtual address space use problem alleviated adoption 64-bit architectures least time loaders shared libraries vary widely functionality depend executable storing explicit paths libraries change library naming layout file system cause systems fail commonly name library path stored executable operating system supplying method find library disk based algorithm shared library executable depends deleted moved renamed incompatible version library copied place earlier search executable would fail load called dependency hell existing many platforms infamous windows variant commonly known dll hell problem occur version library uniquely identified program references libraries full unique identifiers dll hell problems earlier windows versions arose using names libraries guaranteed unique resolve dynamic links programs avoid dll hell later versions windows rely largely options programs install private dlls—essentially partial retreat use shared libraries—along mechanisms prevent replacement shared system dlls earlier versions microsoft windows checks registry determine proper place load dlls implement com objects dlls check directories defined order first windows checks directory loaded program private dll directories set calling codice_1 function system32 system windows directories current working directory finally directories specified path environment variable applications written .net framework framework since 2002 also check global assembly cache primary store shared dll files remove issue dll hell openstep used flexible system collecting list libraries number known locations similar path concept system first starts moving libraries around causes problems although users incur time cost first starting system unix-like systems search path specifying file-system directories look dynamic libraries systems specify default path configuration file others hard-code dynamic loader executable file formats specify additional directories search libraries particular program usually overridden environment variable although disabled setuid setgid programs user ca n't force program run arbitrary code root permissions developers libraries encouraged place dynamic libraries places default search path downside make installation new libraries problematic known locations quickly become home increasing number library files making management complex dynamic loading subset dynamic linking involves dynamically linked library loading unloading run time request request may made implicitly compile time explicitly run time implicit requests made compile time linker adds library references include file paths simply file names explicit requests made applications make direct calls operating system api run time operating systems support dynamically linked libraries also support dynamically loading libraries via run-time linker api instance microsoft windows uses api functions loadlibrary loadlibraryex freelibrary getprocaddress microsoft dynamic link libraries posix-based systems including unix unix-like systems use dlopen dlclose dlsym development systems automate process although originally pioneered 1960s dynamic linking reach operating systems used consumers late 1980s generally available form operating systems early 1990s period object-oriented programming oop becoming significant part programming landscape oop runtime binding requires additional information traditional libraries n't supply addition names entry points code located within also require list objects depend side-effect one oop main advantages inheritance means parts complete definition method may different places simply listing one library requires services another true oop system libraries may known compile time vary system system time many developers worked idea multi-tier programs display running desktop computer would use services mainframe minicomputer data storage processing instance program gui-based computer would send messages minicomputer return small samples huge dataset display remote procedure calls rpc already handled tasks standard rpc system soon majority minicomputer mainframe vendors instigated projects combine two producing oop library format could used anywhere systems known object libraries distributed objects supported remote access microsoft com example system local use dcom modified version supports remote access time object libraries held status next big thing programming world number efforts create systems would run across platforms companies competed try get developers locked system examples include ibm system object model som/dsom sun microsystems distributed objects everywhere doe next portable distributed objects pdo digital objectbroker microsoft component object model com/dcom number corba-based systems inevitable cooling marketing hype object libraries continue used object-oriented programming distributed information systems class libraries rough oop equivalent older types code libraries contain classes describe characteristics define actions methods involve objects class libraries used create instances objects characteristics set specific values oop languages like java distinction clear classes often contained library files like java jar file format instantiated objects residing memory although potentially able made persistent separate files others like smalltalk class libraries merely starting point system image includes entire state environment classes instantiated objects another solution library issue comes using completely separate executables often lightweight form calling using remote procedure call rpc network another computer approach maximizes operating system re-use code needed support library code used provide application support security every program additionally systems require library exist machine forward requests network however approach means every library call requires considerable amount overhead rpc calls much expensive calling shared library already loaded machine approach commonly used distributed architecture makes heavy use remote calls notably client-server systems application servers enterprise javabeans code generation libraries high-level apis generate transform byte code java used aspect-oriented programming data access frameworks testing generate dynamic proxy objects also used intercept field access system stores codice_2 codice_3 files directories codice_4 codice_5 codice_6 filenames always start codice_7 end suffix codice_8 archive static library codice_9 shared object dynamically linked library systems might multiple names dynamically linked library names names symbolic links remaining name names might include major version library full version number example systems codice_10 would filename second major interface revision dynamically linked library codice_11 codice_12 files sometimes found library directories libtool archives usable system system inherits static library conventions bsd library stored codice_8 file use codice_9-style dynamically linked libraries codice_15 suffix instead libraries macos however consist frameworks placed inside special directories called bundles wrap library required files metadata example framework called codice_16 would implemented bundle called codice_17 codice_18 either dynamically linked library file symlink dynamically linked library file codice_19 dynamic-link libraries usually suffix codice_20 although file name extensions may identify specific-purpose dynamically linked libraries e.g codice_21 ole libraries interface revisions either encoded file names abstracted away using com-object interfaces depending compiled codice_22 files either static libraries representations dynamically linkable libraries needed compilation known import libraries unlike unix world uses different file extensions linking codice_23 file windows one must first know regular static library import library latter case codice_24 file must present run time
node2:Wikipedia entry. Entry name: Microsoft_Customer_Care_Framework. Entry content: microsoft customer care framework microsoft customer care framework ccf desktop-based framework used address issues faced service providers caused multiple line business lob systems interacting customers discontinued though many core functions moved add-in microsoft dynamics crm product customer care framework provided core set functions customer support avenues including voice call via call center agents internet portals framework used microsoft server products including biztalk server sharepoint ccf required use microsoft sql server microsoft iis server side uses provide base core set web services ccf targeted medium large enterprises ccf originally developed large call center requirements telecommunication industry ccf different products microsoft 'out box solution requires development configuration build working customer solution framework allows soa methodology development server agent desktop side mandatory non-soa development done normally case primary user interface ccf agent desktop desktop-based user interface ui presents data aggregated various line business lob oss/bss application front ends presents unified view ccf include agent desktop application rather samples including source code provided part framework aif manages loading applications integration event brokering use adapters see hat applications custom integrations account technology hosted application well business processing hat allows separation business rules method used integrate application hat uses microsoft windows workflow foundation wf manage business rules data driven adapters ddas manage application directly bindings written xml connect two ccf 2009 sp1 ships 3 ddas win32 web java jdk 1.6 ddas customized extended additional application types needed version customer care framework ccf 2009 sp1 qfe break upgrading .net framework 3.5 sp1 microsoft composite ui application block used build composite applications within ccf number products similar ccf offered companies well
node3:Wikipedia entry. Entry name: Md5deep. Entry content: md5deep md5deep software package used computer security system administration computer forensics communities run large numbers files several different cryptographic digests originally authored jesse kornblum time special agent air force office special investigations still maintains name md5deep misleading version 2.0 md5deep package contains several different programs able perform md5 sha-1 sha-256 tiger192 whirlpool digests named digest type followed word deep thus name may confuse people thinking provides md5 algorithm package supports many md5deep invoked several different ways typically users operate recursively md5deep walks one directory time giving digests file found recursing subdirectories within recursive behavior approximately depth-first search benefit presenting files lexicographical order unix-like systems similar functionality often obtained combining find hashing utilities md5sum sha256sum tthsum md5deep exists windows unix-based systems including os x present os x fink homebrew macports projects binary packages exist free unix systems many vendors initially resist including md5deep mistakenly believe functions reproduced one line shell scripting matching function program however done easily shell md5deep written employee u.s. government government time public domain software surrounding graphical front-ends may copyrighted
node4:Wikipedia entry. Entry name: Zcash. Entry content: zcash zcash cryptocurrency aimed using cryptography provide enhanced privacy users compared cryptocurrencies bitcoin like bitcoin zcash fixed total supply 21 million units transactions transparent similar bitcoin transactions case controlled t-addr type zero-knowledge proof called zk-snarks transactions said shielded controlled z-addr zcash coins either transparent pool shielded pool december 2017 around 4 zcash coins shielded pool time wallet programs support z-addrs web-based wallets supported zcash affords private transactors option selective disclosure allowing user prove payment auditing purposes one reason allow private transactors choice comply anti-money laundering tax regulations transactions auditable disclosure participant control company hosted virtual meetings law enforcement agencies around u.s. explain fundamentals gone record saying develop currency facilitate illegal activity
node5:Wikipedia entry. Entry name: Hy. Entry content: hy hy alternately hylang programming language dialect language lisp designed interact language python translating expressions python abstract syntax tree ast hy introduced python conference pycon 2013 paul tagliamonte similar kawa clojure mapping s-expressions onto java virtual machine jvm hy meant operate transparent lisp front end python abstract syntax lisp allows operating code data metaprogramming thus hy used write domain-specific languages hy also allows python libraries including standard library imported accessed alongside hy code compiling step converting data structure python ast language documentation
node6:Wikipedia entry. Entry name: Gecko_(software). Entry content: gecko software gecko browser engine developed mozilla used firefox browser thunderbird email client many projects gecko designed support open internet standards used different applications display web pages cases application user interface rendering xul gecko offers rich programming api makes suitable wide variety roles internet-enabled applications web browsers content presentation client/server gecko written c++ javascript since 2016 additionally rust free open-source software subject terms mozilla public license version 2 mozilla officially supports use android linux macos windows development layout engine known gecko began netscape 1997 following company purchase digitalstyle existing netscape rendering engine originally written netscape navigator 1.0 upgraded years slow comply well w3c standards limited support dynamic html lacked features incremental reflow layout engine rearranges elements screen new data downloaded added page new layout engine developed parallel old intention integrate netscape communicator mature stable least one major revision netscape expected released old layout engine switch launch mozilla project early 1998 new layout engine code released open-source license originally unveiled raptor name changed nglayout next generation layout due trademark problems netscape later rebranded nglayout gecko mozilla organization forerunner mozilla foundation initially continued use nglayout name gecko netscape trademark eventually gecko branding october 1998 netscape announced next browser would use gecko still called nglayout time rather old layout engine requiring large parts application rewritten decision popular web standards advocates largely unpopular netscape developers unhappy six months given rewrite also meant work done netscape communicator 5.0 including development mariner improvements old layout engine abandoned netscape 6 first netscape release incorporate gecko released november 2000 name netscape 5 never used gecko development continued applications embedders began make use america online time netscape parent company eventually adopted use compuserve 7.0 aol mac os x products previously embedded internet explorer however exception betas gecko never used main microsoft windows aol client july 15 2003 aol laid remaining gecko developers mozilla foundation formed day became main steward gecko development today gecko developed employees mozilla corporation employees companies contribute mozilla project volunteers outset gecko designed support open internet standards standards gecko supports include gecko also partially supports svg 1.1 svg font color profile animation view cursor modules yet implemented filter text modules partially implemented extensibility module also implemented currently disabled order support web pages designed legacy versions netscape internet explorer gecko supports doctype switching documents modern doctype rendered standards compliance mode follows w3c standards strictly documents doctype older doctype rendered quirks mode emulates non-standard oddities netscape communicator 4.x however 4.x features layers supported gecko also limited support non-standard internet explorer features marquee element codice_1 property though pages explicitly testing codice_1 told supported gecko primarily used web browsers earliest netscape 6 mozilla suite later renamed seamonkey also used mozilla web browser derivatives firefox firefox mobile implementation internet explorer-clone part wine mozilla also uses thunderbird email-client web browsers using gecko include gnu icecat waterfox k-meleon lunascape portable firefox conkeror classilla tenfourfox products using gecko include nightingale instantbird google picture-organization software picasa linux gecko also used sugar olpc xo-1 computer gecko used complete implementation xul xml user interface language gecko currently defines xul specification products historically used gecko include pale moon currently using goanna songbird epiphany known gnome web gnome devhelp replaced gecko webkitgtk sunbird calendar web browsers including swiftfox flock galeon camino minimo beonex communicator kazehakase microb windows platforms gecko depends proprietary compilers thus foss distributions linux include gecko package used windows compatibility layer wine gecko 2.0 version number bumped 5.0 match firefox 5 kept sync major version number firefox thunderbird reflect fact longer separate component netscape era combination poor technical management decisions resulted gecko software bloat thus 2001 apple chose fork khtml gecko create webkit engine safari browser however 2008 mozilla addressed bloat problems resulting big performance improvements gecko october 2016 mozilla announced quantum ongoing project encompassing several software development efforts build next-generation web engine firefox users includes numerous improvements gecko taken experimental servo project firefox 57 also known firefox quantum first shipping november 2017 initial version major components quantum/servo projects enabled include increased performance css gpu rendering components additional components merged servo gecko incrementally future versions quantum mozilla project encompassing several software development efforts build next-generation web engine firefox users includes numerous improvements gecko largely incorporated experimental servo project quantum also includes refinements user interface interactions firefox 57 released november 2017 initial version servo component enabled mozilla dubs several planned future releases firefox quantum 2013 mozilla began experimental servo project engine designed scratch goals improving concurrency parallelism also reducing memory safety vulnerabilities important factor writing servo rust programming language also created mozilla designed generate compiled code better memory safety concurrency parallelism compiled c++ code april 2016 servo needed least several years development become full-featured browser engine thus decision start quantum project bring stable portions servo firefox quantum project composed several sub-projects
node7:Wikipedia entry. Entry name: Apache_Cassandra. Entry content: apache cassandra apache cassandra free open-source distributed wide column store nosql database management system designed handle large amounts data across many commodity servers providing high availability single point failure cassandra offers robust support clusters spanning multiple datacenters asynchronous masterless replication allowing low latency operations clients avinash lakshman one authors amazon dynamo prashant malik initially developed cassandra facebook power facebook inbox search feature facebook released cassandra open-source project google code july 2008 march 2009 became apache incubator project february 17 2010 graduated top-level project facebook developers named database trojan mythological prophet cassandra classical allusions curse oracle releases graduation include cassandra introduced cassandra query language cql cql simple interface accessing cassandra alternative traditional structured query language sql cql adds abstraction layer hides implementation details structure provides native syntaxes collections common encodings language drivers available java jdbc python dbapi2 node.js helenus go gocql c++ example keyspace creation including column family cql 3.0 gives cassandra 1.0 cassandra row level consistent meaning inserts updates table affect row processed approximately time may affect non-key columns inconsistent ways one update may affect one column another affects resulting sets values within row never specified intended cassandra 1.1 solved issue introducing row-level isolation tombstones known cause performance degradation severe consequence levels cassandra wide column store essentially hybrid key-value tabular database management system data model partitioned row store tunable consistency rows organized tables first component table primary key partition key within partition rows clustered remaining columns key columns may indexed separately primary key tables may created dropped altered run-time without blocking updates queries cassandra joins subqueries rather cassandra emphasizes denormalization features like collections column family called table since cql 3 resembles table rdbms relational database management system column families contain rows columns row uniquely identified row key row multiple columns name value timestamp unlike table rdbms different rows column family share set columns column may added one multiple rows time key cassandra corresponds value object key values columns columns grouped together sets called column families thus key identifies row variable number elements column families could considered tables table cassandra distributed multi dimensional map indexed key furthermore applications specify sort order columns within super column simple column family cassandra java-based system managed monitored via java management extensions jmx jmx-compliant nodetool utility instance used manage cassandra cluster adding nodes ring draining nodes decommissioning nodes nodetool also offers number commands return cassandra metrics pertaining disk usage latency compaction garbage collection since cassandra 2.0.2 2013 measures several metrics produced via dropwizard metrics framework may queried via jmx using tools jconsole passed external monitoring systems via dropwizard-compatible reporter plugins according db-engines ranking cassandra popular wide column store september 2014 became 9th popular database
node8:Wikipedia entry. Entry name: Formula_language. Entry content: formula language formula language scripting language used lotus notes often referred formula language pronounced at-formula many language elements start -character example selection formula created ray ozzie early development lotus notes borrowed compiler decompiler lotus 1-2-3 spreadsheet unlike spreadsheet language formula language designed primarily string list processing numerical processing originally functional programming language unique text list-handling features inspired ray ozzie prior use icon lisp formula language engine rewritten damien katz notes domino 6 new features added language looping dynamic execution performance improved formula language two parts functions used several places throughout lotus notes important uses commands like menu commands perform actions lotus notes client examples actions commands primarily used formulas triggered user action button formulas possible combine functions example making execution command conditional field value
node9:Wikipedia entry. Entry name: LibreOffice_Base. Entry content: libreoffice base libreoffice base free open-source relational database management system part libreoffice office suite libreoffice base built fork openoffice.org first released version 3.4.0.1 october 4 2011 similarly packages libreoffice suite base supported across multiple platforms including microsoft windows macos linux base recognized cross-platform compatibility relative microsoft access developed exclusively windows libreoffice base designed allow users easily create access modify view databases data done providing users graphical user interface allows users work four main tools tables queries forms reports base includes software wizards assist users various aspects program base able work embedded external database files embedded databases stored single file using c++ based firebird java-based hsqldb storage engine connecting external databases base acts graphical user interface front-end facilitate interactions various database systems including microsoft access databases jet odbc/jdbc data sources mysql mariadb postgresql base described unusual project niche database management system software tends toward proprietary software designed enterprise users proprietary database management software costs described reason use base small businesses work ongoing transition embedded storage engine hsqldb firebird sql back-end firebird included libreoffice experimental option since libreoffice 4.2 august 2018 document foundation announced release libreoffice version 6.1 experimental mode used embedded firebird engine support fully available old hsqldb engine deprecated—although still available—and replaced firebird default option february 2019 document foundation released libreoffice version 6.2 embedded firebird engine support moved experimental mode operational firebird migration assistant create backup copy content xml document migration process
node10:Wikipedia entry. Entry name: ParaSail_(programming_language). Entry content: parasail programming language parallel specification implementation language parasail object-oriented parallel programming language design ongoing implementation described blog official website parasail uses pointer-free programming model objects grow shrink value semantics used assignment global garbage collected heap instead region-based memory management used throughout types recursive long recursive components declared optional global variables parameter aliasing subexpressions expression evaluated parallel assertions preconditions postconditions class invariants etc. part standard syntax using hoare-like notation possible race conditions detected compile time initial design parasail began september 2009 s. tucker taft interpreter using parasail virtual machine llvm-based parasail compiler available work stealing used scheduling parasail light-weight threads latest version downloaded parasail website parasail goals syntax parasail similar modula class-and-interface-based object-oriented programming model similar java c recently parallel constructs parasail adapted syntaxes produce java-like python-like ada-like parallel languages dubbed respectively javallel parython sparkel named ada subset spark based compilers interpreters languages included parasail implementation following hello world program parasail func hello_world var io end func hello_world following interface basic map module interface bmap key_type ordered element_type assignable » end interface bmap possible implementation map module using binary tree class bmap end class bmap simple test program bmap module import psl :core :random import bmap func test_bmap num univ_integer seed univ_integer end func test_bmap articles parasail appeared various forums
node11:Wikipedia entry. Entry name: GoGrid. Entry content: gogrid gogrid cloud infrastructure service hosting linux windows virtual machines managed multi-server control panel restful api july 2008 gogrid selected finalist linuxworld 2008 product excellence award idg world expo linuxworld.com may 2010 gogrid named lead411 list “ 2010 hottest san francisco companies ” june 2010 gogrid “ best channel incentives ” award 2010 ascii reseller success summit march 2012 gogrid selected winner cloud-infrastructure category ondemand 2012 alwayson 2011-2014 gogrid appeared gartner cloud infrastructure-as-a-service iaas magic quadrant
node12:Wikipedia entry. Entry name: LOCKSS. Entry content: lockss lockss lots copies keep stuff safe project auspices stanford university peer-to-peer network develops supports open source system allowing libraries collect preserve provide readers access material published web main goal digital preservation system attempts replicate way libraries material published paper originally designed scholarly journals also used range materials examples include solinet project preserve theses dissertations eight universities us government documents metaarchive cooperative program preserving at-risk digital archival collections including electronic theses dissertations etds newspapers photograph collections audio-visual collections similar project called clockss controlled lockss tax-exempt 501 c 3 not-for-profit organization governed board directors made librarians publishers clockss runs lockss technology rutgers university libraries webpage comparing lockss clockss portico traditionally academic libraries retained issues scholarly journals either individually collaboratively providing readers access content received even publisher ceased subscription canceled digital age libraries often subscribe journals available digitally internet although convenient patron access model digital subscriptions allow libraries retain copy journal publisher ceases publish library cancels subscription publisher website day content paid longer available lockss system allows library permission publisher collect preserve disseminate patrons copy materials subscribed well open access material perhaps published creative commons license library system collects copy using specialized web crawler verifies publisher granted suitable permission system format-agnostic collecting whatever formats publisher delivers via http libraries collected material cooperate peer-to-peer network ensure preservation peers network vote cryptographic hash functions preserved content nonce peer outvoted regards copy damaged repairs publisher peers lockss license used publishers allows library readers access copy allow similar access libraries unaffiliated readers system support file sharing request library may supply another library content effect repair requesting library proved past good copy voting majority reader browser longer supports format copy collected format migration process convert current format limits use may made preserved copies copyright material effective persuading copyright owners grant necessary permission lockss approach selective collection permission publisher distributed storage restricted dissemination contrasts example internet archive approach omnivorous collection without permission publisher centralized storage unrestricted dissemination lockss system far smaller preserve subscription materials internet archive access since library administers lockss peer maintains copy preserved material since libraries worldwide see list participating libraries system provides much higher degree replication usual fault-tolerant system voting process makes use high degree replication eliminate need backups off-line media provide robust defenses attacks aimed corrupting preserved content addition preserving access libraries traditionally made difficult rewrite suppress printed material existence indeterminate large number identical copies somewhat tamper-resistant medium many independent administrations meant attempts alter remove copies published work would likely fail detected web publishing based single copy single administration provides none safeguards subversion web publishing therefore amenable tool rewriting history preserving many copies diverse administration automatically auditing copies intervals future publisher copy alerting libraries changes detected lockss system attempts restore many safeguards digital world publication prior implementing lockss system questions need considered carefully order make sure content verified evaluated auditable users user must ask questions procedures methods system evaluated disaster preparedness program questions enable user evaluate system create successful maintenance plan materials enable system reinforced carefully evaluated support structure source code entire lockss system carries bsd-style open-source licenses available github lockss trademark stanford university
node13:Wikipedia entry. Entry name: Lisp_(programming_language). Entry content: lisp programming language lisp historically lisp family computer programming languages long history distinctive fully parenthesized prefix notation originally specified 1958 lisp second-oldest high-level programming language widespread use today fortran older one year lisp changed since early days many dialects existed history today best-known general-purpose lisp dialects clojure common lisp scheme lisp originally created practical mathematical notation computer programs influenced notation alonzo church lambda calculus quickly became favored programming language artificial intelligence ai research one earliest programming languages lisp pioneered many ideas computer science including tree data structures automatic storage management dynamic typing conditionals higher-order functions recursion self-hosting compiler read–eval–print loop name lisp derives list processor linked lists one lisp major data structures lisp source code made lists thus lisp programs manipulate source code data structure giving rise macro systems allow programmers create new syntax new domain-specific languages embedded lisp interchangeability code data gives lisp instantly recognizable syntax program code written s-expressions parenthesized lists function call syntactic form written list function operator name first arguments following instance function takes three arguments would called john mccarthy developed lisp 1958 massachusetts institute technology mit mccarthy published design paper communications acm 1960 entitled recursive functions symbolic expressions computation machine part showed simple operators notation functions one build turing-complete language algorithms information processing language first ai language 1955 1956 already included many concepts list-processing recursion came used lisp mccarthy original notation used bracketed m-expressions would translated s-expressions example m-expression equivalent s-expression lisp implemented programmers rapidly chose use s-expressions m-expressions abandoned m-expressions surfaced short-lived attempts mlisp horace enea cgol vaughan pratt lisp first implemented steve russell ibm 704 computer russell read mccarthy paper realized mccarthy surprise lisp eval function could implemented machine code result working lisp interpreter could used run lisp programs properly evaluate lisp expressions two assembly language macros ibm 704 became primitive operations decomposing lists contents address part register number contents decrement part register number register used refer registers computer central processing unit cpu lisp dialects still use operations return first item list rest list respectively first complete lisp compiler written lisp implemented 1962 tim hart mike levin mit compiler introduced lisp model incremental compilation compiled interpreted functions intermix freely language used hart levin memo much closer modern lisp style mccarthy earlier code lisp difficult system implement compiler techniques stock hardware 1970s garbage collection routines developed mit graduate student daniel edwards made practical run lisp general-purpose computing systems efficiency still problem led creation lisp machines dedicated hardware running lisp environments programs 1980s 1990s great effort made unify work new lisp dialects mostly successors maclisp zetalisp nil new implementation lisp single language new language common lisp somewhat compatible dialects replaced book common lisp language notes compatibility various constructs 1994 ansi published common lisp standard ansi x3.226-1994 information technology programming language common lisp since inception lisp closely connected artificial intelligence research community especially pdp-10 systems lisp used implementation programming language micro planner used famous ai system shrdlu 1970s ai research spawned commercial offshoots performance existing lisp systems became growing issue sixty-year history lisp spawned many variations core theme s-expression language moreover given dialect may several implementations—for instance dozen implementations common lisp differences dialects may quite visible—for instance common lisp uses keyword codice_1 name function scheme uses codice_2 within dialect standardized however conforming implementations support core language different extensions libraries declined somewhat 1990s lisp experienced resurgence interest 2000 new activity focused around implementations common lisp scheme emacs lisp clojure racket includes development new portable libraries applications many new lisp programmers inspired writers paul graham eric s. raymond pursue language others considered antiquated new lisp programmers often describe language eye-opening experience claim substantially productive languages increase awareness may contrasted ai winter lisp brief gain mid-1990s dan weinreb lists survey common lisp implementations eleven actively maintained common lisp implementations scieneer common lisp new commercial implementation forked cmucl first release 2002 open source community created new supporting infrastructure cliki wiki collects common lisp related information common lisp directory lists resources lisp popular irc channel allows sharing commenting code snippets support lisppaste irc bot written lisp planet lisp collects contents various lisp-related blogs lispforum users discuss lisp topics lispjobs service announcing job offers weekly news service weekly lisp news common-lisp.net hosting site open source common lisp projects quicklisp library manager common lisp fifty years lisp 1958–2008 celebrated lisp50 oopsla regular local user meetings boston vancouver hamburg events include european common lisp meeting european lisp symposium international lisp conference scheme community actively maintains twenty implementations several significant new implementations chicken gambit gauche ikarus larceny ypsilon developed 2000s decade revised report algorithmic language scheme standard scheme widely accepted scheme community scheme requests implementation process created lot quasi standard libraries extensions scheme user communities individual scheme implementations continue grow new language standardization process started 2003 led rrs scheme standard 2007 academic use scheme teaching computer science seems declined somewhat universities longer using scheme computer science introductory courses mit uses python instead scheme undergraduate computer science program mitx massive open online course several new dialects lisp arc hy nu liskell lfe lisp flavored erlang parser julia implemented femtolisp dialect scheme julia inspired scheme often considered lisp common lisp scheme represent two major streams lisp development languages embody significantly different design choices common lisp successor maclisp primary influences lisp machine lisp maclisp nil s-1 lisp spice lisp scheme many features lisp machine lisp large lisp dialect used program lisp machines designed efficiently implementable personal computer workstation common lisp general-purpose programming language thus large language standard including many built-in data types functions macros language elements object system common lisp object system common lisp also borrowed certain features scheme lexical scoping lexical closures common lisp implementations available targeting different platforms llvm java virtual machine x86-64 powerpc alpha arm motorola 68000 mips operating systems windows macos linux solaris freebsd netbsd openbsd dragonfly bsd heroku scheme statically scoped properly tail-recursive dialect lisp programming language invented guy l. steele jr. gerald jay sussman designed exceptionally clear simple semantics different ways form expressions designed decade earlier common lisp scheme minimalist design much smaller set standard features certain implementation features tail-call optimization full continuations specified common lisp wide variety programming paradigms including imperative functional message passing styles find convenient expression scheme scheme continues evolve series standards revised report algorithmic language scheme series scheme requests implementation clojure recent dialect lisp targets mainly java virtual machine common language runtime clr python vm ruby vm yarv compiling javascript designed pragmatic general-purpose language clojure draws considerable influences haskell places strong emphasis immutability clojure provides access java frameworks libraries optional type hints type inference calls java avoid reflection enable fast primitive operations lisp dialects used scripting languages many applications best-known emacs lisp emacs editor autolisp later visual lisp autocad nyquist audacity scheme lilypond potential small size useful scheme interpreter makes particularly popular embedded scripting examples include siod tinyscheme successfully embedded gimp image processor generic name script-fu librep lisp interpreter john harper originally based emacs lisp language embedded sawfish window manager lisp first language structure program code represented faithfully directly standard data structure—a quality much later dubbed homoiconicity thus lisp functions manipulated altered even created within lisp program without lower-level manipulations generally considered one main advantages language regard expressive power makes language suitable syntactic macros metacircular evaluation conditional using if–then–else syntax invented mccarthy fortran context proposed inclusion algol made part algol 58 specification lisp mccarthy used general cond -structure algol 60 took if–then–else popularized lisp deeply influenced alan kay leader research team developed smalltalk xerox parc turn lisp influenced smalltalk later dialects adopting object-oriented programming features inheritance classes encapsulating instances message passing etc 1970s flavors object system introduced concept multiple inheritance mixin common lisp object system provides multiple inheritance multimethods multiple dispatch first-class generic functions yielding flexible powerful form dynamic dispatch served template many subsequent lisp including scheme object systems often implemented via metaobject protocol reflective metacircular design object system defined terms lisp second language smalltalk still one languages possess metaobject system many years later alan kay suggested result confluence features smalltalk lisp could regarded properly conceived object-oriented programming systems lisp introduced concept automatic garbage collection system walks heap looking unused memory progress modern sophisticated garbage collection algorithms generational garbage collection stimulated use lisp edsger w. dijkstra 1972 turing award lecture said largely resource requirements respect early computing hardware including early microprocessors lisp become popular outside ai community fortran algol-descended c language suitability complex dynamic applications lisp enjoying resurgence popular interest 2010s lisp expression oriented language unlike languages distinction made expressions statements code data written expressions expression evaluated produces value common lisp possibly multiple values embedded expressions value data type mccarthy 1958 paper introduced two types syntax symbolic expressions s-expressions sexps mirror internal representation code data meta expressions m-expressions express functions s-expressions m-expressions never found favor almost lisps today use s-expressions manipulate code data use parentheses lisp immediately obvious difference programming language families result students long given lisp nicknames lost stupid parentheses lots irritating superfluous parentheses however s-expression syntax also responsible much lisp power syntax extremely regular facilitates manipulation computer however syntax lisp limited traditional parentheses notation extended include alternative notations example xmlisp common lisp extension employs metaobject protocol integrate s-expressions extensible markup language xml reliance expressions gives language great flexibility lisp functions written lists processed exactly like data allows easy writing programs manipulate programs metaprogramming many lisp dialects exploit feature using macro systems enables extension language almost without limit lisp list written elements separated whitespace surrounded parentheses example list whose elements three atoms values implicitly typed respectively two integers lisp-specific data type called symbol declared empty list also represented special atom entity lisp atom list expressions written lists using prefix notation first element list name function name macro lambda expression name special operator see remainder list arguments example function returns arguments list expression evaluates list quote preceding example special operator returns argument without evaluating unquoted expressions recursively evaluated enclosing expression evaluated example evaluates list note third argument list lists nested arithmetic operators treated similarly expression evaluates 10 equivalent infix notation would lisp notion operators implemented algol-derived languages arithmetic operators lisp variadic functions n-ary able take number arguments c-style '++ increment operator sometimes implemented name incf giving syntax equivalent setq x x 1 returning new value x special operators sometimes called special forms provide lisp control structure example special operator takes three arguments first argument non-nil evaluates second argument otherwise evaluates third argument thus expression evaluates course would useful non-trivial expression substituted place lisp also provides logical operators operators short circuit evaluation return first nil non-nil argument respectively evaluate james another special operator used bind variables values evaluated within expression operator also used create functions arguments list arguments expression expressions function evaluates returned value value last expression evaluated expression evaluates function applied takes one argument binds returns number one greater argument lambda expressions treated differently named functions invoked way therefore expression evaluates 're function application execute anonymous function passing value 5 named functions created storing lambda expression symbol using defun macro original lisp two fundamental data types atoms lists list finite ordered sequence elements element either atom list atom number symbol symbol essentially unique named item written alphanumeric string source code used either variable name data item symbolic processing example list contains three elements symbol list number 2 essential difference atoms lists atoms immutable unique two atoms appeared different places source code written exactly way represented object whereas list separate object could altered independently lists could distinguished lists comparison operators data types introduced later lisp dialects programming styles evolved concept atom lost importance many dialects still retained predicate atom legacy compatibility defining true object cons lisp list implemented singly linked list cell list called cons scheme pair composed two pointers called car cdr respectively equivalent fields discussed article linked list many data structures built cons cells one basic called proper list proper list either special empty list symbol cons points datum may another cons structure list points another proper list given cons taken head linked list car points first element list cdr points rest list reason functions also called referring conses part linked list rather say tree thus lisp list atomic object instance container class c++ java would list nothing aggregate linked conses variable refers given list simply pointer first cons list traversal list done cdring list taking successive cdrs visit cons list using several higher-order functions map function list conses lists universal lisp systems common misconception lisp data structures fact simplistic lisps data structures vectors arrays hash tables structures forth parenthesized s-expressions represent linked list structures several ways represent list s-expression cons written dotted-pair notation car cdr longer proper list might written dotted-pair notation conventionally abbreviated list notation improper list may written combination two – list three conses whose last cdr i.e. list fully specified form lisp provides many built-in procedures accessing controlling lists lists created directly procedure takes number arguments returns list arguments way lists constructed cons pairs procedure used add element front list note procedure asymmetric handles list arguments lists constructed procedure appends two lists one another lisp lists linked lists appending two lists asymptotic time complexity formula_1 lisp lists simple linked lists share structure one another say two lists tail final sequence conses instance execution following common lisp code lists respectively however tail structure lists copy cons cells pointing memory locations lists sharing structure rather copying give dramatic performance improvement however technique interact undesired ways functions alter lists passed arguments altering one list replacing affect changes thereby also changes – possibly unexpected result source bugs functions alter arguments documented destructive reason aficionados functional programming avoid destructive functions scheme dialect favors functional style names destructive functions marked cautionary exclamation point bang —such read set car bang replaces car cons common lisp dialect destructive functions commonplace equivalent named replace car function rarely seen however common lisp includes special facility make easier define use destructive functions frequent style common lisp write code functionally without destructive calls prototyping add destructive calls optimization safe lisp evaluates expressions entered user symbols lists evaluate usually simpler expression – instance symbol evaluates value variable names evaluates however forms evaluate entering lisp returns expression also marked prevent evaluated necessary symbols lists role special operator abbreviation one quotation mark instance usually entering symbol returns value corresponding variable error variable refer literal symbol enter usually common lisp scheme also support backquote operator termed quasiquote scheme entered character grave accent almost plain quote except allows expressions evaluated values interpolated quoted list comma unquote comma-at splice operators variable value evaluates evaluates backquote often used defining macro expansions self-evaluating forms quoted forms lisp equivalent literals may possible modify values mutable literals program code instance function returns quoted form code calls function modifies form may alter behavior function subsequent iterations modifying quoted form like generally considered bad style defined ansi common lisp erroneous resulting undefined behavior compiled files file-compiler coalesce similar constants put write-protected memory etc. lisp formalization quotation noted douglas hofstadter gödel escher bach others example philosophical idea self-reference lisp family splits use dynamic static a.k.a lexical scope clojure common lisp scheme make use static scoping default newlisp picolisp embedded languages emacs autocad use dynamic scoping since version 24.1 emacs uses dynamic lexical scoping fundamental distinction lisp languages lisp textual representation program simply human-readable description internal data structures linked lists symbols number characters etc would used underlying lisp system lisp uses implement powerful macro system like macro languages c macro returns code compiled however unlike c macros macros lisp functions exploit full power lisp lisp code structure lists macros built list-processing functions language short anything lisp data structure lisp macros code contrast languages parser output purely internal language implementation manipulated programmer feature makes easy develop efficient languages within languages example common lisp object system implemented cleanly language extension using macros means application needs different inheritance mechanism use different object system stark contrast languages example java support multiple inheritance reasonable way add simplistic lisp implementations list structure directly interpreted run program function literally piece list structure traversed interpreter executing however substantial lisp systems also include compiler compiler translates list structure machine code bytecode execution code run fast code compiled conventional languages c. macros expand compilation step thus offer interesting options program needs precomputed table macro might create table compile time compiler need output table need call code create table run time lisp implementations even mechanism codice_3 allows code present compile time macro would need present emitted module lisp languages often used interactive command line may combined integrated development environment ide user types expressions command line directs ide transmit lisp system lisp reads entered expressions evaluates prints result reason lisp command line called read–eval–print loop repl basic operation repl follows simplistic description omits many elements real lisp quoting macros function accepts textual s-expressions input parses internal data structure instance type text prompt translates linked list three elements symbol number 1 number 2 happens list also valid piece lisp code evaluated car list names function—the addition operation note read single symbol read number one hundred twenty-three read string 123 function evaluates data returning zero lisp data result evaluation mean interpretation lisp systems compile every expression native machine code simple however describe evaluation interpretation evaluate list whose car names function first evaluates arguments given cdr applies function arguments case function addition applying argument list yields answer result evaluation symbol evaluates value symbol foo data like string 123 evaluates string list evaluates list 1 2 3 job function represent output user simple result trivial expression evaluated piece list structure would require traverse list print s-expression implement lisp repl necessary implement three functions infinite-loop function naturally implementation complex since must also implement special operators like done basic repl one line code lisp repl typically also provides input editing input history error handling interface debugger lisp usually evaluated eagerly common lisp arguments evaluated applicative order 'leftmost innermost scheme order arguments undefined leaving room optimization compiler lisp originally control structures many added language evolution lisp original conditional operator precursor later structures programmers scheme dialect often express loops using tail recursion scheme commonality academic computer science led students believe tail recursion common way write iterations lisp incorrect oft-seen lisp dialects imperative-style iteration constructs scheme loop common lisp complex expressions moreover key issue makes objective rather subjective matter scheme makes specific requirements handling tail calls thus reason use tail recursion generally encouraged scheme practice expressly supported language definition contrast ansi common lisp require optimization commonly termed tail call elimination thus fact tail recursive style casual replacement use traditional iteration constructs discouraged common lisp matter stylistic preference potentially one efficiency since apparent tail call common lisp may compile simple jump program correctness since tail recursion may increase stack use common lisp risking stack overflow lisp control structures special operators equivalent languages syntactic keywords expressions using operators surface appearance function calls differ arguments necessarily evaluated—or case iteration expression may evaluated contrast major programming languages lisp allows implementing control structures using language several control structures implemented lisp macros even macro-expanded programmer wants know work common lisp scheme operators non-local control flow differences operators deepest differences two dialects scheme supports re-entrant continuations using procedure allows program save later restore particular place execution common lisp support re-entrant continuations support several ways handling escape continuations often algorithm expressed lisp either imperative functional style noted scheme tends favor functional style using tail recursion continuations express control flow however imperative style still quite possible style preferred many common lisp programmers may seem familiar programmers used structured languages c preferred schemers closely resembles pure-functional languages haskell lisp early heritage list processing wide array higher-order functions relating iteration sequences many cases explicit loop would needed languages like loop c lisp task accomplished higher-order function true many functional programming languages good example function scheme called common lisp called given function one lists applies function successively lists elements order collecting results new list applies function corresponding pair list elements yielding result examples common lisp code basic hello world program lisp syntax lends naturally recursion mathematical problems enumeration recursively defined sets simple express notation evaluate number factorial alternative implementation takes less stack space previous version underlying lisp system optimizes tail recursion contrast iterative version uses common lisp macro following function reverses list lisp built-in reverse function thing various object systems models built top alongside lisp including
node14:Wikipedia entry. Entry name: MySQL. Entry content: mysql mysql s-q-l open-source relational database management system rdbms name combination name co-founder michael widenius daughter sql abbreviation structured query language mysql free open-source software terms gnu general public license also available variety proprietary licenses mysql owned sponsored swedish company mysql ab bought sun microsystems oracle corporation 2010 oracle acquired sun widenius forked open-source mysql project create mariadb mysql component lamp web application software stack others acronym linux apache mysql perl/php/python mysql used many database-driven web applications including drupal joomla phpbb wordpress mysql also used many popular websites including facebook flickr mediawiki twitter youtube mysql written c c++ sql parser written yacc uses home-brewed lexical analyzer mysql works many system platforms including aix bsdi freebsd hp-ux ecomstation i5/os irix linux macos microsoft windows netbsd novell netware openbsd opensolaris os/2 warp qnx oracle solaris symbian sunos sco openserver sco unixware sanos tru64 port mysql openvms also exists mysql server software client libraries use dual-licensing distribution offered gpl version 2 proprietary license support obtained official manual free support additionally available different irc channels forums oracle offers paid support via mysql enterprise products differ scope services price additionally number third party organisations exist provide support services including mariadb percona mysql received positive reviews reviewers noticed performs extremely well average case developer interfaces documentation mention feedback real world via web sites like good also tested fast stable true multi-user multi-threaded sql database server mysql created swedish company mysql ab founded david axmark allan larsson michael monty widenius original development mysql widenius axmark began 1994 first version mysql appeared 23 may 1995 initially created personal usage msql based low-level language isam creators considered slow inflexible created new sql interface keeping api msql keeping api consistent msql system many developers able use mysql instead proprietarily licensed msql antecedent additional milestones mysql development included work version 6 stopped sun microsystems acquisition mysql cluster product uses version 7 decision made jump version 8 next major version number 15 june 2001 nusphere sued mysql ab tcx datakonsult ab original authors michael monty widenius david axmark u.s district court boston breach contract tortious interference third party contracts relationships unfair competition 2002 mysql ab sued progress nusphere copyright trademark infringement united states district court nusphere allegedly violated mysql ab copyright linking mysql gpl'ed code nusphere gemini table without compliance license preliminary hearing judge patti saris 27 february 2002 parties entered settlement talks eventually settled hearing fsf commented judge saris made clear sees gnu gpl enforceable binding license october 2005 oracle corporation acquired innobase oy finnish company developed third-party innodb storage engine allows mysql provide functionality transactions foreign keys acquisition oracle press release mentioned contracts make company software available mysql ab would due renewal presumably renegotiation time 2006 mysql users conference april 2006 mysql ab issued press release confirmed mysql ab innobase oy agreed multi-year extension licensing agreement february 2006 oracle corporation acquired sleepycat software makers berkeley db database engine providing basis another mysql storage engine little effect berkeley db widely used dropped due lack use mysql 5.1.12 pre-ga release mysql 5.1 released october 2006 january 2008 sun microsystems bought mysql ab 1 billion april 2009 oracle corporation entered agreement purchase sun microsystems owners mysql copyright trademark sun board directors unanimously approved deal also approved sun shareholders u.s. government 20 august 2009 14 december 2009 oracle pledged continue enhance mysql done previous four years movement oracle acquisition mysql ab save mysql oracle started one mysql ab founders monty widenius petition 50,000+ developers users called upon european commission block approval acquisition time free software opinion leaders including pamela jones groklaw jan wildeboer carlo piana also acted co-counsel merger regulation procedure advocated unconditional approval merger part negotiations european commission oracle committed mysql server continue least 2015 use dual-licensing strategy long used mysql ab proprietary gpl versions available antitrust eu pressuring divest mysql condition approval merger revealed wikileaks us department justice request oracle pressured eu approve merger unconditionally european commission eventually unconditionally approved oracle acquisition mysql ab 21 january 2010 january 2010 oracle acquisition mysql ab monty widenius started gpl-only fork mariadb mariadb based code base mysql server 5.5 aims maintain compatibility oracle-provided versions mysql offered two different editions open source mysql community server proprietary enterprise server mysql enterprise server differentiated series proprietary extensions install server plugins otherwise shares version numbering system built code base major features available mysql 5.6 developers release minor updates mysql server approximately every two months sources obtained mysql website mysql github repository gpl license using storage engines default innodb mysql comply full sql standard implemented functionality including foreign key references check constraints parsed ignored storage engines mysql version 8.0.15 mysql 5.7 triggers limited one per action timing meaning one trigger defined executed insert operation one insert table triggers defined views mysql database inbuilt functions like unix_timestamp return 0 03:14:07 utc 19 january 2038 recently attempt solve problem assigned internal queue mysql built installed manually source code commonly installed binary package unless special customizations required linux distributions package management system download install mysql minimal effort though configuration often required adjust security optimization settings though mysql began low-end alternative powerful proprietary databases gradually evolved support higher-scale needs well still commonly used small medium scale single-server deployments either component lamp-based web application standalone database server much mysql appeal originates relative simplicity ease use enabled ecosystem open source tools phpmyadmin medium range mysql scaled deploying powerful hardware multi-processor server gigabytes memory however limits far performance scale single server 'scaling larger scales multi-server mysql 'scaling deployments required provide improved performance reliability typical high-end configuration include powerful master database handles data write operations replicated multiple slaves handle read operations master server continually pushes binlog events connected slaves event failure slave promoted become new master minimizing downtime improvements performance achieved caching results database queries memory using memcached breaking database smaller chunks called shards spread across number distributed server clusters logical backup tool included community enterprise editions mysql supports backing storage engines mysql enterprise backup hot backup utility included part mysql enterprise subscription oracle offering native innodb hot backup well backup storage engines oracle mysql offers high availability solution mix tools including mysql router mysql shell based group replication open source tools mariadb offers similar offer terms products mysql also run cloud computing platforms microsoft azure amazon ec2 oracle cloud infrastructure common deployment models mysql cloud graphical user interface gui type interface allows users interact electronic devices programs graphical icons visual indicators secondary notation opposed text-based interfaces typed command labels text navigation guis easier learn command-line interfaces clis require commands typed keyboard third-party proprietary free graphical administration applications front ends available integrate mysql enable users work database structure data visually well-known front ends command-line interface means interacting computer program user issues commands program typing successive lines text command lines mysql ships many command line tools main interface client mysql utilities set utilities designed perform common maintenance administrative tasks originally included part mysql workbench utilities stand-alone download available oracle percona toolkit cross-platform toolkit mysql developed perl percona toolkit used prove replication working correctly fix corrupted data automate repetitive tasks speed servers percona toolkit included several linux distributions centos debian packages available fedora ubuntu well percona toolkit originally developed maatkit late 2011 maatkit longer developed mysql shell tool interactive use administration mysql database supports javascript python sql modes used administration access purposes many programming languages language-specific apis include libraries accessing mysql databases include mysql connector/net integration microsoft visual studio languages c vb commonly used jdbc driver java addition odbc interface called mysql connector/odbc allows additional programming languages support odbc interface communicate mysql database asp coldfusion htsql url-based query method also ships mysql adapter allowing direct interaction mysql database web client via structured urls drivers exists languages like python node.js variety mysql forks exist including following
node15:Wikipedia entry. Entry name: Scheme_48. Entry content: scheme 48 scheme 48 programming language dialect language scheme implementation using interpreter emits bytecode foreign function interface calling functions language c comes library regular expressions regex interface portable operating system interface posix supported portable scheme library slib basis scheme shell scsh used academic research free open-source software released bsd license called scheme 48 first version written 48 hours august 1986 authors say intended understood 48 hours scheme 48 uses virtual machine interpret bytecode written restricted dialect scheme called prescheme translated c compiled native binary prescheme pre-scheme statically-typed dialect scheme efficiency low-level machine access c retaining many desirable features scheme
node16:Wikipedia entry. Entry name: Apache_ZooKeeper. Entry content: apache zookeeper apache zookeeper software project apache software foundation essentially service distributed systems offering hierarchical key-value store used provide distributed configuration service synchronization service naming registry large distributed systems zookeeper sub-project hadoop top-level apache project right zookeeper architecture supports high availability redundant services clients thus ask another zookeeper leader first fails answer zookeeper nodes store data hierarchical name space much like file system tree data structure clients read write nodes way shared configuration service zookeeper viewed atomic broadcast system updates totally ordered zookeeper atomic broadcast zab protocol core system zookeeper used companies including yelp rackspace yahoo odnoklassniki reddit netapp solidfire facebook twitter ebay well open source enterprise search systems like solr zookeeper originally developed yahoo streamlining processes running big-data clusters storing status local log files zookeeper servers servers communicate client machines provide information zookeeper developed order fix bugs occurred deploying distributed big-data applications prime features apache zookeeper common terminologies regarding zookeeper architecture services cluster replicated stored set servers called ensemble maintains in-memory database containing entire data tree state well transaction log snapshots stored persistently multiple client applications connect server client maintains tcp connection sends requests heartbeats receives responses watch events monitoring addition client libraries included zookeeper distribution number third-party libraries apache curator kazoo available make using zookeeper easier add additional functionality additional programming languages etc etc
node17:Wikipedia entry. Entry name: Apache_Phoenix. Entry content: apache phoenix apache phoenix open source massively parallel relational database engine supporting oltp hadoop using apache hbase backing store phoenix provides jdbc driver hides intricacies nosql store enabling users create delete alter sql tables views indexes sequences insert delete rows singly bulk query data sql phoenix compiles queries statements native nosql store apis rather using mapreduce enabling building low latency applications top nosql stores phoenix began internal project company salesforce.com need support higher level well understood sql language originally open-sourced github 28 jan 2014 became top-level apache project 22 may 2014 apache phoenix included hortonworks distribution hdp 2.1 available part cloudera labs part hadoop ecosystem
node18:Wikipedia entry. Entry name: Apache_Tajo. Entry content: apache tajo apache tajo big data relational distributed data warehouse system apache hadoop designed tajo targeting low-latency scalable ad-hoc queries online aggregation etl feature follows sample statement create sql table may look like follows
node19:Wikipedia entry. Entry name: Apache_Solr. Entry content: apache solr solr pronounced solar open-source enterprise-search platform written java apache lucene project major features include full-text search hit highlighting faceted search real-time indexing dynamic clustering database integration nosql features rich document e.g. word pdf handling providing distributed search index replication solr designed scalability fault tolerance solr widely used enterprise search analytics use cases active development community regular releases solr runs standalone full-text search server uses lucene java search library core full-text indexing search rest-like http/xml json apis make usable popular programming languages solr external configuration allows tailored many types application without java coding plugin architecture support advanced customization apache lucene apache solr produced apache software foundation development team 2004 solr created yonik seeley cnet networks in-house project add search capability company website january 2006 cnet networks decided openly publish source code donating apache software foundation like new apache project entered incubation period helped solve organizational legal financial issues january 2007 solr graduated incubation status standalone top-level project tlp grew steadily accumulated features thereby attracting users contributors committers although quite new public project powered several high-traffic websites september 2008 solr 1.3 released including distributed search capabilities performance enhancements among many others january 2009 solr enterprise search yonik seeley along grant ingersoll erik hatcher joined lucidworks formerly lucid imagination first company providing commercial support training apache solr search technologies since support offerings around solr abundant november 2009 saw release solr 1.4 version introduced enhancements indexing searching faceting along many improvements rich document processing pdf word html search results clustering based carrot2 also improved database integration release also features many additional plug-ins march 2010 lucene solr projects merged solr became lucene sub project separate downloads continued products jointly developed single set committers 2011 solr version number scheme changed order match lucene solr 1.4 next release solr labeled 3.1 order keep solr lucene version number october 2012 solr version 4.0 released including new solrcloud feature 2013 2014 saw number solr releases 4.x line steadily growing feature set improving reliability february 2015 solr 5.0 released first release solr packaged standalone application ending official support deploying solr war solr 5.3 featured built-in pluggable authentication authorization framework april 2016 solr 6.0 released added support executing parallel sql queries across solrcloud collections includes streamexpression support new jdbc driver sql interface september 2017 solr 7.0 released release among things added support multiple replica types auto-scaling math engine march 2019 solr 8.0 released including many bugfixes component updates solr nodes listen serve http/2 requests aware default internal requests also sent using http/2 furthermore admin ui login added support basicauth kerberos plotting math expressions apache zeppelin possible order search document apache solr performs following operations sequence solr individuals companies contribute new features bug fixes solr bundled built-in search many applications content management systems enterprise content management systems hadoop distributions cloudera hortonworks mapr bundle solr search engine products marketed big data datastax dse integrates solr search engine cassandra solr supported end point various data processing frameworks enterprise integration frameworks solr exposes industry standard http rest-like apis xml json support integrate system programming language supporting standards ease use also client libraries available java c php python ruby popular programming languages
node20:Wikipedia entry. Entry name: Python_(programming_language). Entry content: python programming language python interpreted high-level general-purpose programming language created guido van rossum first released 1991 python design philosophy emphasizes code readability notable use significant whitespace language constructs object-oriented approach aim help programmers write clear logical code small large-scale projects python dynamically typed garbage-collected supports multiple programming paradigms including procedural object-oriented functional programming python often described batteries included language due comprehensive standard library python conceived late 1980s successor abc language python 2.0 released 2000 introduced features like list comprehensions garbage collection system capable collecting reference cycles python 3.0 released 2008 major revision language completely backward-compatible much python 2 code run unmodified python 3 due concern amount code written python 2 support python 2.7 last release 2.x series extended 2020 language developer guido van rossum shouldered sole responsibility project july 2018 shares leadership member five-person steering council python interpreters available many operating systems global community programmers develops maintains cpython open source reference implementation non-profit organization python software foundation manages directs resources python cpython development python conceived late 1980s guido van rossum centrum wiskunde informatica cwi netherlands successor abc language inspired setl capable exception handling interfacing amoeba operating system implementation began december 1989 van rossum continued python lead developer july 12 2018 announced permanent vacation responsibilities python benevolent dictator life title python community bestowed upon reflect long-term commitment project chief decision-maker january 2019 active python core developers elected brett cannon nick coghlan barry warsaw carol willing van rossum five-member steering council lead project python 2.0 released 16 october 2000 many major new features including cycle-detecting garbage collector support unicode python 3.0 released 3 december 2008 major revision language completely backward-compatible many major features backported python 2.6.x 2.7.x version series releases python 3 include codice_1 utility automates least partially translation python 2 code python 3 python 2.7 end-of-life date initially set 2015 postponed 2020 concern large body existing code could easily forward-ported python 3 january 2017 google announced work python 2.7 go transcompiler improve performance concurrent workloads python multi-paradigm programming language object-oriented programming structured programming fully supported many features support functional programming aspect-oriented programming including metaprogramming metaobjects magic methods many paradigms supported via extensions including design contract logic programming python uses dynamic typing combination reference counting cycle-detecting garbage collector memory management also features dynamic name resolution late binding binds method variable names program execution python design offers support functional programming lisp tradition codice_2 codice_3 codice_4 functions list comprehensions dictionaries sets generator expressions standard library two modules itertools functools implement functional tools borrowed haskell standard ml language core philosophy summarized document zen python pep 20 includes aphorisms rather functionality built core python designed highly extensible compact modularity made particularly popular means adding programmable interfaces existing applications van rossum vision small core language large standard library easily extensible interpreter stemmed frustrations abc espoused opposite approach python strives simpler less-cluttered syntax grammar giving developers choice coding methodology contrast perl one way motto python embraces one—and preferably one—obvious way design philosophy alex martelli fellow python software foundation python book author writes describe something 'clever considered compliment python culture python developers strive avoid premature optimization reject patches non-critical parts cpython reference implementation would offer marginal increases speed cost clarity speed important python programmer move time-critical functions extension modules written languages c use pypy just-in-time compiler cython also available translates python script c makes direct c-level api calls python interpreter important goal python developers keeping fun use reflected language name—a tribute british comedy group monty python—and occasionally playful approaches tutorials reference materials examples refer spam eggs famous monty python sketch instead standard foo bar common neologism python community pythonic wide range meanings related program style say code pythonic say uses python idioms well natural shows fluency language conforms python minimalist philosophy emphasis readability contrast code difficult understand reads like rough transcription another programming language called unpythonic users admirers python especially considered knowledgeable experienced often referred pythonists pythonistas pythoneers python meant easily readable language formatting visually uncluttered often uses english keywords languages use punctuation unlike many languages use curly brackets delimit blocks semicolons statements optional fewer syntactic exceptions special cases c pascal python uses whitespace indentation rather curly brackets keywords delimit blocks increase indentation comes certain statements decrease indentation signifies end current block thus program visual structure accurately represents program semantic structure feature also sometimes termed off-side rule python statements include among others python support tail call optimization first-class continuations according guido van rossum never however better support coroutine-like functionality provided 2.5 extending python generators 2.5 generators lazy iterators information passed unidirectionally generator python 2.5 possible pass information back generator function python 3.3 information passed multiple stack levels python expressions similar languages c java python distinction expressions statements rigidly enforced contrast languages common lisp scheme ruby leads duplicating functionality example statements part expression list comprehensions lambda expressions expressions contain statements particular case assignment statement codice_78 form part conditional expression conditional statement advantage avoiding classic c error mistaking assignment operator codice_79 equality operator codice_36 conditions codice_81 syntactically valid probably unintended c code codice_82 causes syntax error python methods objects functions attached object class syntax codice_83 normal methods functions syntactic sugar codice_84 python methods explicit codice_85 parameter access instance data contrast implicit codice_85 codice_87 object-oriented programming languages e.g. c++ java objective-c ruby python uses duck typing typed objects untyped variable names type constraints checked compile time rather operations object may fail signifying given object suitable type despite dynamically typed python strongly typed forbidding operations well-defined example adding number string rather silently attempting make sense python allows programmers define types using classes often used object-oriented programming new instances classes constructed calling class example codice_88 codice_89 classes instances metaclass codice_90 instance allowing metaprogramming reflection version 3.0 python two kinds classes old-style new-style syntax styles difference whether class codice_91 inherited directly indirectly new-style classes inherit codice_91 instances codice_90 versions python 2 python 2.2 onwards kinds classes used old-style classes eliminated python 3.0 long term plan support gradual typing python 3.5 syntax language allows specifying static types checked default implementation cpython experimental optional static type checker named mypy supports compile-time type checking python usual c language arithmetic operators codice_50 codice_95 codice_96 codice_33 codice_58 also codice_34 exponentiation e.g codice_100 codice_101 new matrix multiply codice_35 operator included version 3.5 additionally unary operator codice_103 essentially inverts bits one argument integers means codice_104 operators include bitwise shift operators codice_105 shifts codice_106 left codice_107 places codice_108 codice_109 shifts codice_106 right codice_107 places codice_112 behavior division changed significantly time division integers produces accurate floating point results rounding towards negative infinity though different languages adds consistency instance means equation codice_126 always true also means equation codice_127 valid positive negative values codice_128 however maintaining validity equation means result codice_129 expected half-open interval 0 b codice_130 positive integer lie interval b 0 codice_130 negative python provides codice_132 function rounding float nearest integer tie-breaking versions 3 use round-away-from-zero codice_133 1.0 codice_134 −1.0 python 3 uses round even codice_135 2 codice_136 2 python allows boolean expressions multiple equality relations manner consistent general use mathematics example expression codice_137 tests whether codice_128 less codice_130 codice_130 less codice_141 c-derived languages interpret expression differently c expression would first evaluate codice_142 resulting 0 1 result would compared codice_141 python extensive built-in support arbitrary precision arithmetic integers transparently switched machine-supported maximum fixed-precision usually 32 64 bits belonging python type codice_144 arbitrary precision belonging python type codice_145 needed latter l suffix textual representation python 3 distinction codice_144 codice_145 types eliminated behavior entirely contained codice_144 class codice_149 type/class module codice_150 since version 2.4 provides decimal floating point numbers arbitrary precision several rounding modes codice_151 type module codice_152 since version 2.6 provides arbitrary precision rational numbers due python extensive mathematics library third-party library numpy extends native capabilities frequently used scientific scripting language aid problems numerical data processing manipulation python large standard library commonly cited one greatest strengths provides tools suited many tasks internet-facing applications many standard formats protocols mime http supported includes modules creating graphical user interfaces connecting relational databases generating pseudorandom numbers arithmetic arbitrary precision decimals manipulating regular expressions unit testing parts standard library covered specifications example web server gateway interface wsgi implementation codice_153 follows pep 333 modules specified code internal documentation test suites supplied however standard library cross-platform python code modules need altering rewriting variant implementations python implementations including cpython include read–eval–print loop repl permitting function command line interpreter user enters statements sequentially receives results immediately shells including idle ipython add abilities auto-completion session state retention syntax highlighting well standard desktop integrated development environments web browser-based ides sagemath intended developing science math-related python programs pythonanywhere browser-based ide hosting environment canopy ide commercial python ide emphasizing scientific computing cpython reference implementation python written c meeting c89 standard several select c99 features compiles python programs intermediate bytecode executed virtual machine cpython distributed large standard library written mixture c native python available many platforms including windows modern unix-like systems platform portability one earliest priorities pypy fast compliant interpreter python 2.7 3.5 just-in-time compiler brings significant speed improvement cpython stackless python significant fork cpython implements microthreads use c memory stack thus allowing massively concurrent programs pypy also stackless version micropython circuitpython python 3 variants optimised microcontrollers includes lego mindstorms ev3 just-in-time python compilers developed unsupported 2005 nokia released python interpreter series 60 mobile phones named pys60 includes many modules cpython implementations additional modules integrate symbian operating system project kept up-to-date run variants s60 platform several third-party modules available nokia n900 also supports python gtk widget libraries enabling programs written run target device several compilers high-level object languages either unrestricted python restricted subset python language similar python source language performance comparison various python implementations non-numerical combinatorial workload presented euroscipy '13 python development conducted largely python enhancement proposal pep process primary mechanism proposing major new features collecting community input issues documenting python design decisions python coding style covered pep 8 outstanding peps reviewed commented python community steering council enhancement language corresponds development cpython reference implementation mailing list python-dev primary forum language development specific issues discussed roundup bug tracker maintained python.org development originally took place self-hosted source-code repository running mercurial python moved github january 2017 cpython public releases come three types distinguished part version number incremented many alpha beta release-candidates also released previews testing final releases although rough schedule release often delayed code ready python development team monitors state code running large unit test suite development using buildbot continuous integration system community python developers also contributed 86,000 software modules python package index pypi official repository third-party python libraries major academic conference python pycon also special python mentoring programmes pyladies python name derived british comedy group monty python python creator guido van rossum enjoyed developing language monty python references appear frequently python code culture example metasyntactic variables often used python literature spam eggs instead traditional foo bar official python documentation also contains various references monty python routines prefix py- used show something related python examples use prefix names python applications libraries include pygame binding sdl python commonly used create games pyqt pygtk bind qt gtk python respectively pypy python implementation originally written python python api documentation generators include since 2003 python consistently ranked top ten popular programming languages tiobe programming community index third popular language behind java c selected programming language year 2007 2010 2018 empirical study found scripting languages python productive conventional languages c java programming problems involving string manipulation search dictionary determined memory consumption often better java much worse c c++ large organizations use python include wikipedia google yahoo cern nasa facebook amazon instagram spotify smaller entities like ilm ita social news networking site reddit written entirely python python serve scripting language web applications e.g. via mod_wsgi apache web server web server gateway interface standard api evolved facilitate applications web frameworks like django pylons pyramid turbogears web2py tornado flask bottle zope support developers design maintenance complex applications pyjs ironpython used develop client-side ajax-based applications sqlalchemy used data mapper relational database twisted framework program communications computers used example dropbox libraries numpy scipy matplotlib allow effective use python scientific computing specialized libraries biopython astropy providing domain-specific functionality sagemath mathematical software notebook interface programmable python library covers many aspects mathematics including algebra combinatorics numerical mathematics number theory calculus python successfully embedded many software products scripting language including finite element method software abaqus 3d parametric modeler like freecad 3d animation packages 3ds max blender cinema 4d lightwave houdini maya modo motionbuilder softimage visual effects compositor nuke 2d imaging programs like gimp inkscape scribus paint shop pro musical notation programs like scorewriter capella gnu debugger uses python pretty printer show complex structures c++ containers esri promotes python best choice writing scripts arcgis also used several video games adopted first three available programming languages google app engine two java go python commonly used artificial intelligence projects help libraries like tensorflow keras scikit-learn scripting language modular architecture simple syntax rich text processing tools python often used natural language processing many operating systems include python standard component ships linux distributions amigaos 4 freebsd package netbsd openbsd package macos used command line terminal many linux distributions use installers written python ubuntu uses ubiquity installer red hat linux fedora use anaconda installer gentoo linux uses python package management system portage python used extensively information security industry including exploit development sugar software one laptop per child xo developed sugar labs written python raspberry pi single-board computer project adopted python main user-programming language libreoffice includes python intends replace java python python scripting provider core feature since version 4.0 7 february 2013 python design philosophy influenced many programming languages python development practices also emulated languages example practice requiring document describing rationale issues surrounding change language python pep also used tcl erlang python received tiobe programming language year awards 2007 2010 2018 award given language greatest growth popularity year measured tiobe index
node21:Wikipedia entry. Entry name: Ruby_(programming_language). Entry content: ruby programming language ruby interpreted high-level general-purpose programming language designed developed mid-1990s yukihiro matz matsumoto japan ruby dynamically typed uses garbage collection supports multiple programming paradigms including procedural object-oriented functional programming according creator ruby influenced perl smalltalk eiffel ada basic lisp matsumoto said ruby conceived 1993 1999 post ruby-talk mailing list describes early ideas language matsumoto describes design ruby like simple lisp language core object system like smalltalk blocks inspired higher-order functions practical utility like perl name ruby originated online chat session matsumoto keiju ishitsuka february 24 1993 code written language initially two names proposed coral ruby matsumoto chose latter later e-mail ishitsuka matsumoto later noted factor choosing name ruby – birthstone one colleagues first public release ruby 0.95 announced japanese domestic newsgroups december 21 1995 subsequently three versions ruby released two days release coincided launch japanese-language ruby-list mailing list first mailing list new language already present stage development many features familiar later releases ruby including object-oriented design classes inheritance mixins iterators closures exception handling garbage collection following release ruby 0.95 1995 several stable versions ruby released following years 1997 first article ruby published web year matsumoto hired netlab.jp work ruby full-time developer 1998 ruby application archive launched matsumoto along simple english-language homepage ruby 1999 first english language mailing list ruby-talk began signaled growing interest language outside japan year matsumoto keiju ishitsuka wrote first book ruby object-oriented scripting language ruby オブジェクト指向スクリプト言語 ruby published japan october 1999 would followed early 2000s around 20 books ruby published japanese 2000 ruby popular python japan september 2000 first english language book programming ruby printed later freely released public widening adoption ruby amongst english speakers early 2002 english-language ruby-talk mailing list receiving messages japanese-language ruby-list demonstrating ruby increasing popularity non-japanese speaking world ruby 1.8 initially released august 2003 stable long time retired june 2013 although deprecated still code based ruby 1.8 partially compatible ruby 1.9 ruby 1.8 subject several industry standards language specifications ruby developed open standards promotion center information-technology promotion agency japanese government agency submission japanese industrial standards committee jisc international organization standardization iso accepted japanese industrial standard jis x 3017 2011 international standard iso/iec 30170 2012 around 2005 interest ruby language surged tandem ruby rails web framework written ruby rails frequently credited increasing awareness ruby ruby 1.9 released christmas day 2007 effective ruby 1.9.3 released october 31 2011 ruby switched dual-licensed ruby license gpl dual-licensed ruby license two-clause bsd license adoption 1.9 slowed changes 1.8 required many popular third party gems rewritten ruby 1.9 introduces many significant changes 1.8 series examples ruby 1.9 obsolete since february 23 2015 longer receive bug security fixes users advised upgrade recent version ruby 2.0 added several new features including ruby 2.0 intended fully backward compatible ruby 1.9.3 official 2.0.0 release february 24 2013 five known minor incompatibilities obsolete since february 22 2016 longer receive bug security fixes users advised upgrade recent version ruby 2.1.0 released christmas day 2013 release includes speed-ups bugfixes library updates starting 2.1.0 ruby versioning policy like semantic versioning although similar ruby versioning policy compatible semantic versioning semantic versioning also provides additional labels pre-release build metadata available extensions major.minor.patch format available ruby ruby 2.1 obsolete since april 1 2017 longer receive bug security fixes users advised upgrade recent version ruby 2.2.0 released christmas day 2014 release includes speed-ups bugfixes library updates removes deprecated apis notably ruby 2.2.0 introduces changes memory handling incremental garbage collector support garbage collection symbols option compile directly jemalloc also contains experimental support using vfork 2 system spawn added support unicode 7.0 specification features made obsolete removed include callcc dl library digest :hmac lib/rational.rb lib/complex.rb gserver logger :application well various c api functions ruby 2.3.0 released christmas day 2015 notable changes include 2.3 branch also includes many performance improvements updates bugfixes including changes proc call socket io use exception keywords thread name handling default passive net :ftp connections rake removed stdlib ruby 2.4.0 released christmas day 2016 notable changes include 2.4 branch also includes performance improvements hash table array max array min instance variable access ruby 2.5.0 released christmas day 2017 notable changes include top come lot performance improvements like faster block passing 3 times faster faster mutexes faster erb templates improvements concatenation methods ruby 2.6.0 released christmas day 2018 notable changes include matsumoto said ruby designed programmer productivity fun following principles good user interface design google tech talk 2008 matsumoto stated hope see ruby help every programmer world productive enjoy programming happy primary purpose ruby language stresses systems design needs emphasize human rather computer needs ruby said follow principle least astonishment pola meaning language behave way minimize confusion experienced users matsumoto said primary design goal make language enjoyed using minimizing programmer work possible confusion said applied principle least astonishment design ruby nevertheless phrase come closely associated ruby programming language phrase source surprise novice users may take mean ruby behaviors try closely match behaviors familiar languages may 2005 discussion newsgroup comp.lang.ruby matsumoto attempted distance ruby pola explaining design choice surprising someone uses personal standard evaluating surprise personal standard remains consistent would surprises familiar standard matsumoto defined way interview ruby object-oriented every value object including classes instances types many languages designate primitives integers booleans null variables always hold references objects every function method methods always called object methods defined top level scope become methods object class since class ancestor every class methods called object also visible scopes effectively serving global procedures ruby supports inheritance dynamic dispatch mixins singleton methods belonging defined single instance rather defined class though ruby support multiple inheritance classes import modules mixins ruby described multi-paradigm programming language allows procedural programming defining functions/variables outside classes makes part root 'self object object orientation everything object functional programming anonymous functions closures continuations statements values functions return last evaluation support introspection reflection metaprogramming well support interpreter-based threads ruby features dynamic typing supports parametric polymorphism according ruby faq syntax similar perl semantics similar smalltalk differs greatly python syntax ruby broadly similar perl python class method definitions signaled keywords whereas code blocks defined keywords braces contrast perl variables obligatorily prefixed sigil used sigil changes semantics scope variable practical purposes distinction expressions statements line breaks significant taken end statement semicolon may equivalently used unlike python indentation significant one differences python perl ruby keeps instance variables completely private class exposes accessor methods codice_11 codice_12 etc. unlike getter setter methods languages like c++ java accessor methods ruby created single line code via metaprogramming however accessor methods also created traditional fashion c++ java invocation methods require use parentheses trivial change instance variable full function without modifying single line calling code refactoring achieving similar functionality c vb.net property members python property descriptors similar come tradeoff development process one begins python using publicly exposed instance variable later changes implementation use private instance variable exposed property descriptor code internal class may need adjusted use private variable rather public property ruby ’ design forces instance variables private also provides simple way declare codice_13 codice_14 methods keeping idea ruby one never directly accesses internal members class outside class rather one passes message class receives response see examples section samples code demonstrating ruby syntax ruby official distribution also includes codice_15 interactive command-line interpreter used test code quickly following code fragment represents sample session using codice_15 following examples run ruby shell interactive ruby shell saved file run command line typing codice_17 classic hello world example basic ruby code input conversions variety ways define strings ruby following assignments equivalent strings support variable interpolation following assignments equivalent produce raw strings constructing using array constructing using associative array ruby called hash statement two syntaxes creating code block code block passed method optional block argument many built-in methods arguments parameter-passing block closure computer science |closure creating anonymous function returning closure computer science |closures method yielding flow program control block provided calling time iterating enumerations arrays using blocks method codice_18 accept parameter block codice_18 method iterates member list performing function retaining aggregate analogous codice_20 function functional programming languages example first pass block receives 10 argument inject codice_21 1 first element array codice_22 returns 11 becomes codice_21 next pass added 3 get 14 added 5 third pass finally return 19 using enumeration block square numbers 1 10 using range invoke method item codice_24 synonym codice_25 following code defines class named codice_26 addition codice_27 usual constructor create new objects two methods one override codice_28 comparison operator codice_29 sort age override codice_30 method codice_31 format output codice_12 example metaprogramming ruby codice_33 defines getter setter methods instance variables codice_12 getter methods last evaluated statement method return value allowing omission explicit codice_35 statement preceding code prints three names reverse age order codice_26 constant reference codice_37 object ruby classes never closed methods always added existing class applies classes including standard built-in classes needed open class definition existing class new contents specified added existing contents simple example adding new method standard library codice_38 class adding methods previously defined classes often called monkey patch|monkey-patching performed recklessly practice lead behavior collisions subsequent unexpected results code scalability problems since ruby 2.0 possible use refinements reduce potentially negative consequences monkey-patching limiting scope patch particular areas code base exception raised codice_39 call optional message added exception exceptions also specified programmer alternatively exception instance passed codice_39 method last construct useful raising instance custom exception class featuring constructor takes one argument exceptions handled codice_41 clause clause catch exceptions inherit codice_42 flow control keywords used handling exceptions codice_43 codice_44 common mistake attempt catch exceptions simple rescue clause catch exceptions one must write catch particular exceptions also possible specify exception object made available handler clause alternatively recent exception stored magic global codice_45 several exceptions also caught ruby code programmatically modify run time program lifecycle phase |runtime aspects structure would fixed rigid languages class method definitions sort metaprogramming used write concise code effectively extend language example following ruby code generates new methods built-in codice_46 class based list colors methods wrap contents string html tag styled respective color generated methods could used like implement equivalent many languages programmer would write method codice_47 codice_48 codice_49 etc separately possible uses ruby metaprogramming include original ruby interpreter computer software |interpreter often referred ruby mri|matz ruby interpreter mri implementation written c uses ruby-specific virtual machine standardized retired ruby 1.8 ruby mri|implementation written c programming language |c single-pass interpreted language starting ruby 1.9 continuing ruby 2.x official ruby interpreter yarv yet another ruby vm implementation superseded slower virtual machine used previous releases mri number alternative implementations ruby including jruby rubinius mruby takes different approach jruby rubinius providing just-in-time compilation mruby also providing ahead-of-time compilation ruby three major alternate implementations ruby implementations include defunct ruby implementations maturity ruby implementations tends measured ability run ruby rails rails framework complex implement uses many ruby-specific features point particular implementation achieves goal called rails singularity reference implementation jruby rubinius able run rails unmodified production environment matsumoto originally ruby development bsd|4.3bsd -based sony news|sony news-os 3.x later migrated work sunos 4.x finally linux 1999 ruby known work across many different operating system including news-os sunos aix svr4 solaris operating system |solaris nec up-ux nextstep bsd linux classic mac os|mac os dos windows operating system |windows beos modern ruby versions implementations available many operating systems linux bsd solaris aix macos windows windows phone windows ce symbian os beos ibm rubygems ruby package manager ruby package called gem easily installed via command line gems libraries though exist applications integrated development environment|ides 10,000 ruby gems hosted rubygems.org many new existing ruby libraries hosted github service offers revision control|version control repository hosting git software |git ruby application archive hosted applications documentation libraries ruby programming maintained 2013 function transferred rubygems category ruby programming language category articles example ruby code category class-based programming languages category dynamic programming languages category dynamically typed programming languages category free software programmed c category iso standards category object-oriented programming languages category programming languages created 1995 category programming languages iso standard category scripting languages category software using bsd license category text-oriented programming languages category free compilers interpreters
node22:Wikipedia entry. Entry name: VxD. Entry content: vxd vxd device driver model used microsoft windows/386 386 enhanced mode windows 3.x windows 9x extent also novell dos 7 opendos 7.01 dr-dos 7.02 higher multitasker codice_1 vxds access memory kernel running processes well raw access hardware name vxd abbreviation virtual xxx driver xxx class hardware device derives fact drivers filenames form codice_2 windows 3.x examples vjoyd.386 joystick vmm.386 memory manager vxds usually filename extension codice_3 windows 3.x codice_4 windows 9x vxds written windows 3.x used windows 9x vice versa prior advent windows dos applications would either communicate directly various pieces hardware responding interrupts reading writing device memory etc go dos device driver dos multitasking application would exclusive complete control hardware running though windows applications n't often communicate directly hardware way windows drivers still real standard modes windows 3.x windows/386 onward allowed multiple dos applications execute concurrently executing within virtual machine share physical resources among virtual machines microsoft introduced virtual device drivers drivers solved issues relating conflicting usage physical resources intercepting calls hardware instead machine port representing actual device would represent virtual device could managed operating system although windows 98 introduced windows driver model wdm vxd device drivers used windows 98 windows vxds usable windows nt descendants starting windows 2000 windows nt-based operating systems also use windows driver model windows nt 4 earlier versions must use drivers written specifically using vxd drivers instead wdm drivers windows 9x resulted advanced acpi states like hibernation unavailable vxds confused similarly named ntvdm-specific 'vdds virtual device drivers provide method emulating direct i/o windows nt dos box ntvdm vdds run regular 32-bit user-mode dlls must rely win32 api another wdm driver emulate desired i/o behalf 16-bit program
node23:Wikipedia entry. Entry name: ELinks. Entry content: elinks elinks free text-based console web browser unix-like operating systems began late 2001 experimental fork petr baudiš links web browser hence e name since e come stand enhanced extended 1 september 2004 baudiš handed maintainership project danish developer jonas fonseca citing lack time interest desire spend time coding rather reviewing organising releases 17 march 2017 openbsd removed elinks ports tree citing concerns security issues lack responsiveness developers
node24:Wikipedia entry. Entry name: Chez_Scheme. Entry content: chez scheme chez scheme programming language dialect implementation language scheme type lisp uses incremental native-code compiler produce native binary files x86 ia-32 x86-64 powerpc sparc processor architectures supported r6rs standard since version 7.9.1 free open-source software released apache license version 2.0 first released 1985 r. kent dybvig originally licensed proprietary software released open-source software github version 9.4 petite chez scheme sibling implementation uses threaded interpreter design instead chez scheme incremental native-code compiler programs written chez scheme run unchanged petite chez scheme long depend using compiler example foreign function interface available compiler petite chez scheme freely distributable may used royalty fees subject license agreement one series benchmarks chez scheme among fastest available scheme implementations sun sparc processor architecture petite chez scheme among slowest implementations common x86 pentium 32-bit processor architecture chez scheme windowing system computer graphics package called scheme widget library supported portable slib library
node25:Wikipedia entry. Entry name: Amazon_Relational_Database_Service. Entry content: amazon relational database service amazon relational database service amazon rds distributed relational database service amazon web services aws web service running cloud designed simplify setup operation scaling relational database use applications administration processes like patching database software backing databases enabling point-in-time recovery managed automatically scaling storage compute resources performed single api call aws offer ssh connection rds instances amazon rds first released 22 october 2009 supporting mysql databases followed support oracle database june 2011 november 2014 aws announced amazon aurora mysql-compatible database offering enhanced high availability performance october 2017 postgresql-compatible database offering launched.. march 2019 aws announced support postgresql 11 rds five months official release new database instances launched aws management console using amazon rds apis amazon rds offers different features support different use cases major features may 2010 amazon announced multi-availability zone deployment support amazon rds multi-availability zone az allows users automatically provision maintain synchronous physical logical “ standby ” replica depending database engine different availability zone independent infrastructure physically separate location multi-az database instance developed creation time modified run multi-az deployment later multi-az deployments aim provide enhanced availability data durability mysql mariadb oracle postgresql sql server instances targeted production environments event planned database maintenance unplanned service disruption amazon rds automatically fails up-to-date standby allowing database operations resume without administrative intervention multi-az rds instances optional cost associated creating rds instance user asked would like use multi-az rds instance multi-az rds deployments backups done standby instance i/o activity suspended time may experience elevated latencies minutes backups read replicas allow different uses case scale read-heavy database workloads available five replicas mysql mariadb postgresql instances use native asynchronous replication functionality respective database engines backups configured default accessible used read scaling mysql mariadb read replicas made writeable since october 2012 postgresql read replicas support replicas done database server level support replication database instance table level performance metrics amazon rds available aws management console amazon cloudwatch api december 2015 amazon announced optional enhanced monitoring feature provides expanded set metrics mysql mariadb aurora database engines amazon rds instances priced similarly amazon elastic compute cloud ec2 rds charged per hour comes two packages on-demand db instances reserved db instances on-demand instances ongoing hourly usage rate reserved db instances require up-front one-time fee turn provide discount hourly usage charge instance apart hourly cost running rds instance users charged amount storage provisioned data transfers input output operations performed aws introduced provisioned input output operations user define many io per second required application iops contribute significantly total cost running rds instance part aws free tier amazon rds free tier helps new aws customers get started managed database service cloud free use amazon rds free tier develop new applications test existing applications simply gain hands-on experience amazon rds amazon rds creates saves automated backups rds db instances first snapshot db instance contains data full db instance subsequent snapshots incremental maximum retention period 35 days multi-az rds deployments backups done standby instance i/o activity suspended amount time may experience elevated latencies minutes backups database instances managed aws management console using amazon rds apis using aws cli since 1 june 2017 stop aws rds instances aws management console aws cli 7 days time 7 days automatically started since september 2018 rds instances protected accidental deletion increase db space supported decrease allocated space additionally least six-hour period new allocation done december 2017 amazon rds supports 36 db instance types 27 latest generation support different types workloads several vendors provide cloud database services similar amazon rds oracle offers oracle cloud database service supporting oracle database technology microsoft offers windows azure sql service supporting microsoft sql relational databases competitors supporting mysql include rackspace cloud databases google cloud sql hp cloud mysql xeround cloud database cleardb
node26:Wikipedia entry. Entry name: Apache_Ambari. Entry content: apache ambari apache ambari software project apache software foundation ambari enables system administrators provision manage monitor hadoop cluster also integrate hadoop existing enterprise infrastructure ambari sub-project hadoop top-level project right ambari used companies including ibm hortonworks cardinal health ebay expedia kayak.com lending club neustar macy pandora radio samsung shutterfly spotify
node27:Wikipedia entry. Entry name: WinG. Entry content: wing computing wing pronounced win gee application programming interface designed provide faster graphics performance windows 3.x operating environments initially positioned way help game developers easily port dos games microsoft windows although quickly discontinued favor directx wing fixed two problems first problem wing fixed windows 3.x support creating device contexts dcs based device independent bitmaps actual display devices one major limitation gdi dcs write-only data written could retrieved second problem gdi drawing implemented windows 3.x video drivers included drawing bitmaps obviously performance routines varied across drivers alex st. john one creators directx said 2000 interview microsoft announced wing 1994 game developers conference demonstrating port id software doom wing shipped september 21 1994 wing interesting still fundamentally based drawing bitmaps memory outputting frames drawing done result wing deprecated directx built however windows nt 3.5 windows 95 introduced createdibsection provide support creating dcs based dibs video drivers also eventually improved wing introduced new type dc called wingdc allowed programmers read write directly using device-independent bitmaps dibs wingdib.drv driver effectively gave programmers ability windows 'd without hardware access limitations dos years programmers could write dibs wingdc yet would still access individual bits image data meant fast graphics algorithms could written allow fast scrolling overdraw dirty rectangles double buffering animation techniques wing also provided much better performance blitting graphics data physical graphics device memory since wing used dib format possible mix original gdi api calls wing calls wing would also perform graphics hardware/driver profiling test first execution program order determine best way draw dibs test showed window full red curved lines sections would wobble performance tested wing determined fastest calls cause graphics corruption profile would saved test would need performed wing out-of-the-box support i.e separate api win32 dropped windows 98 second edition integrated directx 6 absolutely nothing pass win32 apis wrapping including createdibsection wing dlls sometimes distributed application point merely became matter copying files wing.dll wing32.dll wingde.dll wingdib.drv wngpal.wnd system32 directory 32 bit windows syswow64 directory 64 bit windows regain system-wide support
node28:Wikipedia entry. Entry name: GitHub. Entry content: github github american company provides hosting software development version control using git subsidiary microsoft acquired company 2018 7.5 billion offers distributed version control source code management scm functionality git well adding features provides access control several collaboration features bug tracking feature requests task management wikis every project github offers plans free professional enterprise accounts free github accounts commonly used host open source projects january 2019 github offers unlimited private repositories plans including free accounts may 2019 github reports 37 million users 100 million repositories including least 28 million public repositories making largest host source code world github developed chris wanstrath p. j. hyett tom preston-werner scott chacon using ruby rails started february 2008 company github inc. existed since 2007 located san francisco february 24 2009 github team members announced talk yahoo headquarters within first year online github accumulated 46,000 public repositories 17,000 formed previous month alone time 6,200 repositories forked least 4,600 merged july 5 2009 github announced site harnessed 100,000 users july 27 2009 another talk delivered yahoo preston-werner announced github grown host 90,000 unique public repositories 12,000 forked least total 135,000 repositories july 25 2010 github announced hosting 1 million repositories april 20 2011 github announced hosting 2 million repositories june 2 2011 readwriteweb reported github surpassed sourceforge google code total number commits period january may 2011 july 9 2012 peter levine general partner github investor andreessen horowitz stated github growing revenue 300 annually since 2008 profitably nearly entire way january 16 2013 github announced passed 3 million users mark hosting 5 million repositories december 23 2013 github announced reached 10 million repositories june 2015 github opened office japan first office outside u.s. july 29 2015 github announced raised 250 million funding round led sequoia capital round valued company approximately 2 billion 2016 github ranked 14 forbes cloud 100 list february 28 2018 github fell victim second largest distributed denial-of-service ddos attack history incoming traffic reaching peak 1.35 terabits per second june 4 2018 microsoft announced reached agreement acquire github 7.5 billion purchase closed october 26 2018 june 19 2018 github expanded github education offering free education bundles schools june 4 2018 microsoft announced intent acquire github us 7.5 billion deal closed oct. 26 2018 github continue operate independently community platform business microsoft service led xamarin nat friedman reporting scott guthrie executive vice president microsoft cloud ai current ceo chris wanstrath retained technical fellow also reporting guthrie microsoft become significant user github using host open source projects development tools chakra core powershell visual studio code backed open source projects linux developed virtual file system git vfs git formerly git virtual file system gvfs —a git extension managing large-scale repositories adopted github concerns developers kyle simpson javascript trainer author rafael laguna ceo open-xchange microsoft purchase citing uneasiness microsoft handling previous acquisitions nokia mobile business skype saw culmination microsoft recent changes business strategy ceo satya nadella seen larger focus sale cloud computing services main line business alongside development contributions open source software linux opposed microsoft windows operating system harvard business review argued microsoft intending acquire github get access userbase used loss leader encourage use development products services concerns sale bolstered interest competitors bitbucket owned atlassian gitlab commercial open source product also runs hosted service version sourceforge owned bizx llc reported seen spikes new users intending migrate projects github respective services github inc. originally flat organization middle managers words everyone manager self-management employees could choose work projects interested open allocation salaries set chief executive 2014 github inc. introduced layer middle management github.com start-up business first years provided enough revenue funded solely three founders start taking employees july 2012 four years company founded andreessen horowitz invested 100 million venture capital july 2015 github raised another 250 million venture capital series b round investors sequoia capital andreessen horowitz thrive capital venture capital funds august 2016 github making 140 million annual recurring revenue github mascot anthropomorphized octocat five octopus-like arms character created graphic designer simon oxley clip art sell istock website enables designers market royalty-free digital images github became interested oxley work twitter selected bird designed logo illustration github chose character oxley named octopuss since github wanted octopuss logo use istock license disallows negotiated oxley buy exclusive rights image github renamed octopuss octocat trademarked character along new name later github hired illustrator cameron mcefee adapt octocat different purposes website promotional materials mcefee various github users since created hundreds variations character available octodex march 2014 github programmer julie ann horvath alleged founder ceo tom preston-werner wife theresa engaged pattern harassment led leaving company april 2014 github released statement denying horvath allegations however following internal investigation github confirmed claims github ceo chris wanstrath wrote company blog investigation found tom preston-werner capacity github ceo acted inappropriately including confrontational conduct disregard workplace complaints insensitivity impact spouse presence workplace failure enforce agreement spouse work office preston-werner resigned company 2017 allegations made discriminatory unsupportive behavior github developer recruited following commitment github improve diversity inclusivity development github platform began october 19 2007 site launched april 2008 tom preston-werner chris wanstrath p. j. hyett scott chacon made available months prior beta release projects github accessed manipulated using standard git command-line interface standard git commands work github also allows registered non-registered users browse public repositories site multiple desktop clients git plugins also created github third parties integrate platform site provides social networking-like functions feeds followers wikis using wiki software called gollum social network graph display developers work versions forks repository fork branch within fork newest user must create account order contribute content site public repositories browsed downloaded anyone registered user account users able discussions manage repositories submit contributions others repositories review changes code github began offering unlimited private repositories cost january 2019 limited three contributors per project previously public repositories free fundamental software underpins github git written linus torvalds creator linux additional software provides github user interface written using ruby rails erlang github inc. developers wanstrath hyett preston-werner github mostly used code addition source code github supports following formats features github terms service require public software projects hosted github meet open source definition reason essential users developers intending use piece software found github read software license repository usually found top-level file called license license.txt similar determine meets needs terms service state setting repositories viewed publicly agree allow others view fork repositories github enterprise similar github public service designed use large-scale enterprise software development teams enterprise wishes host repositories behind corporate firewall cloud enterprises privately run github cloud premises two environments linked work together github pages static web hosting service offered github since 2008 github users hosting user blogs project documentation even whole books created page github pages content stored git repository either files served visitors verbatim markdown format github seamlessly integrated jekyll static web site blog generator github continuous integration pipelines time content source updated jekyll regenerates website automatically serves via github pages infrastructure rest github includes free paid tiers service instead supported web advertising web sites generated service hosted either subdomains github.io domain custom domains bought third-party domain name registrar github also operates services pastebin-style site called gist hosting code snippets github proper hosting larger projects tom preston-werner presented then-new gist feature punk rock ruby conference 2008 gist builds traditional simple concept pastebin adding version control code snippets easy forking ssl encryption private pastes gist git repository multiple code snippets contained single paste pushed pulled using git forked code pushed back original author form patch gists pastes become like mini-projects github launched new program called github student developer pack give students free access popular development tools services github partnered bitnami crowdflower digitalocean dnsimple hackhands namecheap orchestrate screenhero sendgrid stripe travis ci unreal engine launch program 2016 github announced launch github campus experts program train encourage students grow technology communities universities campus experts program open university students 18 years older across world github campus experts one primary ways github funds student oriented events communities campus experts given access training funding additional resources run events grow communities become campus expert applicants must complete online training course consisting multiple modules designed grow community leadership skills github also provides software service integrations adding extra features projects services include site https //github.community/ github maintains community forum users ask questions publicly answer questions users site https //github.com/sponsors github sponsors allows users make monthly money donations projects hosted github public beta announced may 23 2019 currently project accepts wait list registrations verge said github sponsors works exactly like patreon developers offer various funding tiers come different perks ’ receive recurring payments supporters want access encourage work except zero fees use program furthermore github offer incentives early adopters first year pledges cover payment processing costs match sponsorship payments 5,000 per developer furthermore users still use similar services like patreon open collective link websites july 25th 2019 developer based iran wrote medium github blocked private repositories prohibited access github pages soon github confirmed blocking developers iran crimea cuba north korea syria accessing private repositories however github reopened access github pages days later public repositories regardless location also revealed using github visiting sanctioned countries could result similar action occurring user account github responded complaints media spokesperson saying github subject us trade control laws committed full compliance applicable law time github vision global platform developer collaboration matter developers reside result take seriously responsibility examine government mandates thoroughly certain users customers impacted beyond required law includes keeping public repositories services including open source projects available accessible support personal communications involving developers sanctioned regions developers feel restrictions appeal removal said restrictions including travel reside countries github forbidden use vpns ip proxies access site sanctioned countries purchase history ip addresses flag users among sources december 3 2014 github blacklisted russia github initially refused take user-posted suicide manuals day russia withdrew block december 31 2014 github blocked india along 31 websites pro-isis content posted users january 10 2015 github unblocked march 26 2015 github fell victim massive ddos attack lasted 118 hours attack appeared originate china primarily targeted github-hosted user content describing methods circumventing internet censorship october 8 2016 github access blocked turkish government prevent email leakage hacked account belonging country energy minister july 25 2019 github started blocking developers countries facing us trading sanctions prominent open source organizations projects use github primary place collaboration including
node29:Wikipedia entry. Entry name: Deltacloud. Entry content: deltacloud deltacloud application programming interface api developed red hat apache software foundation abstracts differences cloud computing implementations announced september 3 2009 infrastructure-as-a-service cloud existing today provides api purpose deltacloud provide one unified rest-based api used manage services cloud particular cloud controlled adapter called driver june 2012 drivers exist following cloud platforms amazon ec2 fujitsu global cloud platform gogrid opennebula rackspace rhev-m rimuhosting terremark vmware vcloud next 'classic front-end also offers cimi ec2 front-ends deltacloud used applications aeolus prevent need implement cloud-specific logic may 17 2010 red hat contributed deltacloud apache incubator project graduated incubator october 26 2011 became apache software foundation tlp top-level project july 2013 fujitsu vmware used deltacloud demonstration cimi management developers conference manage cloud infrastructure im may 2013 redhat announced scaling back sponsorship apache deltacloud project effective immediately july 2015 deltacloud moved apache attic due inactivity",wikics,nc
"Classify the wikipedia page represented by node25 using its subgraph data (text attributes and connections) as follows.

node0: Ubuntu Budgie is an official Ubuntu flavor with the Budgie desktop, evolving from an unofficial remix, featuring stable cores and lightweight design across versions since 2016.  
node1: Linux is an open-source kernel-based OS ecosystem, developed collaboratively, powering servers, embedded systems, and desktops via distributions like Ubuntu and Fedora.  
node2: XAML is Microsoft's XML-based UI language for .NET, used in WPF, Silverlight, and UWP apps, enabling declarative design with tools like Visual Studio and Blend.  
node3: Dryad was Microsoft's data-parallel runtime using DAGs for distributed computing, discontinued in favor of Hadoop, supporting C++ and .NET via directed graphs.  
node4: Penny Black proposed anti-spam via sender-paid mechanisms (CPU cycles, fees), aiming to shift email costs to reduce spam volume without major infrastructure changes.  
node5: NuGet is Microsoft's open-source package manager for .NET, streamlining library installation in Visual Studio, supporting多语言 and tools like Chocolatey.  
node6: COS (Commercial OS) by DEC supported DIBOL/RPG on PDP-8/11 systems, offering multi-user batch processing in 1980s turnkey business computing setups.
node7: .NET/Mono GUI library for desktop apps, event-driven, replaced older libraries; open-sourced but succeeded by WPF/UWP.  
node8: RPath's package manager with automated updates, dependency resolution, and chroot-based builds for Foresight Linux.  
node9: Microsoft's gaming/multimedia APIs (e.g., Direct3D), evolved for Windows/Xbox; DirectX 12 improved low-level GPU efficiency.  
node10: Server-focused Unix OS for x86, merging System V/SunOS; Novell-developed, later open-sourced with licensing controversies.  
node11: Grid middleware for scientific research, unifying gLite/Unicore; supports LHC data, open-source components, and cross-platform use.  
node12: 32-bit x86 architecture (since 1985),仍主流 despite 64-bit shift; Intel/AMD-driven, backward-compatible via x86-64.  
node13: Microsoft's Access/DAO backend for MDB databases; supports SQL, transactions, and replication; superseded by ACE in 64-bit systems.
node14: Core Microsoft OS interfaces, including Win32, multimedia tools, and DirectX, offering low-level system access with backward compatibility and language wrappers.  
node15: Ubuntu-based distro for network/server testing, featuring security tools like Wireshark and Nmap, discontinued in 2010.  
node16: Windows' transactional logging subsystem using ARIES, enabling high-performance logs with dedicated/multiplexed streams and persistent storage policies.  
node17: Linux utility to reset Windows local passwords by editing SAM files, supports Windows NT-10, excluding encrypted/AD systems.
node18: Manages computer hardware/software, enables multitasking, file systems, and resource allocation across devices like desktops, servers, and embedded systems.  
node19: Compiled code from source, requiring linking to form executables or libraries, generated by compilers/assemblers.  
node20: Apple's application programming interface (API) for macOS and iOS, focusing on graphical user interface development.  
node21: AmigaOS's UI engine managing windows, input events, and gadgets, enabling responsive graphics and task-driven interaction.  
node22: Linux-based live rescue system for repairing damaged computers, offering tools like GParted and running from USB/CD.  
node23: 1980s Serbian Unix-based 32-bit PC series using Intel 386, designed for business/data processing and industrial automation.  
node24: File system monitor using inotify/kqueue for detecting changes, but faces limits on FreeBSD due to file descriptor constraints.  
node25: Microsoft’s C++ template library simplifying COM/ActiveX development, lightweight for Visual Studio with security updates.
node26: Microsoft's DCOM enables networked software component communication via DCE/RPC, used in Windows versions, competed with CORBA.  
node27: Objective-C merges Smalltalk messaging with C, Apple's main iOS/macOS language before Swift, featuring categories and runtime flexibility.  
node28: Nim combines C's efficiency with Python-like syntax, supports metaprogramming, compiles to C/JS, and offers static typing/garbage collection.  
node29: Microsoft's KMDF simplifies Windows kernel-mode driver development using object-oriented WDM-based framework, reducing code complexity.  
node30: WDF frameworks (KMDF/UMDF) streamline Windows driver creation with object models, tools, and abstraction of low-level WDM complexities.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node12>,<node0, node15>,<node0, node22>,<node1, node2>,<node1, node5>,<node1, node8>,<node1, node10>,<node1, node15>,<node1, node17>,<node1, node18>,<node1, node20>,<node1, node22>,<node1, node24>,<node1, node27>,<node2, node5>,<node2, node7>,<node2, node9>,<node2, node13>,<node2, node14>,<node2, node20>,<node2, node21>,<node2, node25>,<node2, node27>,<node2, node30>,<node3, node4>,<node3, node18>,<node4, node18>,<node5, node8>,<node5, node9>,<node5, node13>,<node5, node14>,<node5, node18>,<node5, node29>,<node5, node30>,<node6, node18>,<node7, node14>,<node7, node20>,<node7, node21>,<node7, node25>,<node7, node27>,<node8, node12>,<node8, node18>,<node9, node13>,<node9, node14>,<node9, node16>,<node9, node18>,<node9, node25>,<node9, node26>,<node9, node29>,<node9, node30>,<node10, node18>,<node11, node18>,<node12, node18>,<node12, node28>,<node13, node14>,<node13, node16>,<node13, node25>,<node13, node26>,<node13, node29>,<node13, node30>,<node14, node16>,<node14, node18>,<node14, node20>,<node14, node21>,<node14, node25>,<node14, node26>,<node14, node27>,<node14, node28>,<node14, node29>,<node14, node30>,<node15, node18>,<node16, node25>,<node16, node26>,<node16, node29>,<node16, node30>,<node17, node18>,<node17, node22>,<node18, node20>,<node18, node22>,<node18, node23>,<node18, node24>,<node18, node25>,<node18, node27>,<node18, node28>,<node18, node30>,<node19, node27>,<node20, node21>,<node20, node25>,<node20, node27>,<node21, node25>,<node21, node27>,<node25, node26>,<node25, node29>,<node25, node30>,<node26, node29>,<node26, node30>,<node27, node28>,<node29, node30>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",operating systems,"node0: Ubuntu Budgie is an official Ubuntu flavor with the Budgie desktop, evolving from an unofficial remix, featuring stable cores and lightweight design across versions since 2016.  
node1: Linux is an open-source kernel-based OS ecosystem, developed collaboratively, powering servers, embedded systems, and desktops via distributions like Ubuntu and Fedora.  
node2: XAML is Microsoft's XML-based UI language for .NET, used in WPF, Silverlight, and UWP apps, enabling declarative design with tools like Visual Studio and Blend.  
node3: Dryad was Microsoft's data-parallel runtime using DAGs for distributed computing, discontinued in favor of Hadoop, supporting C++ and .NET via directed graphs.  
node4: Penny Black proposed anti-spam via sender-paid mechanisms (CPU cycles, fees), aiming to shift email costs to reduce spam volume without major infrastructure changes.  
node5: NuGet is Microsoft's open-source package manager for .NET, streamlining library installation in Visual Studio, supporting多语言 and tools like Chocolatey.  
node6: COS (Commercial OS) by DEC supported DIBOL/RPG on PDP-8/11 systems, offering multi-user batch processing in 1980s turnkey business computing setups.
node7: .NET/Mono GUI library for desktop apps, event-driven, replaced older libraries; open-sourced but succeeded by WPF/UWP.  
node8: RPath's package manager with automated updates, dependency resolution, and chroot-based builds for Foresight Linux.  
node9: Microsoft's gaming/multimedia APIs (e.g., Direct3D), evolved for Windows/Xbox; DirectX 12 improved low-level GPU efficiency.  
node10: Server-focused Unix OS for x86, merging System V/SunOS; Novell-developed, later open-sourced with licensing controversies.  
node11: Grid middleware for scientific research, unifying gLite/Unicore; supports LHC data, open-source components, and cross-platform use.  
node12: 32-bit x86 architecture (since 1985),仍主流 despite 64-bit shift; Intel/AMD-driven, backward-compatible via x86-64.  
node13: Microsoft's Access/DAO backend for MDB databases; supports SQL, transactions, and replication; superseded by ACE in 64-bit systems.
node14: Core Microsoft OS interfaces, including Win32, multimedia tools, and DirectX, offering low-level system access with backward compatibility and language wrappers.  
node15: Ubuntu-based distro for network/server testing, featuring security tools like Wireshark and Nmap, discontinued in 2010.  
node16: Windows' transactional logging subsystem using ARIES, enabling high-performance logs with dedicated/multiplexed streams and persistent storage policies.  
node17: Linux utility to reset Windows local passwords by editing SAM files, supports Windows NT-10, excluding encrypted/AD systems.
node18: Manages computer hardware/software, enables multitasking, file systems, and resource allocation across devices like desktops, servers, and embedded systems.  
node19: Compiled code from source, requiring linking to form executables or libraries, generated by compilers/assemblers.  
node20: Apple's application programming interface (API) for macOS and iOS, focusing on graphical user interface development.  
node21: AmigaOS's UI engine managing windows, input events, and gadgets, enabling responsive graphics and task-driven interaction.  
node22: Linux-based live rescue system for repairing damaged computers, offering tools like GParted and running from USB/CD.  
node23: 1980s Serbian Unix-based 32-bit PC series using Intel 386, designed for business/data processing and industrial automation.  
node24: File system monitor using inotify/kqueue for detecting changes, but faces limits on FreeBSD due to file descriptor constraints.  
node25: Microsoft’s C++ template library simplifying COM/ActiveX development, lightweight for Visual Studio with security updates.
node26: Microsoft's DCOM enables networked software component communication via DCE/RPC, used in Windows versions, competed with CORBA.  
node27: Objective-C merges Smalltalk messaging with C, Apple's main iOS/macOS language before Swift, featuring categories and runtime flexibility.  
node28: Nim combines C's efficiency with Python-like syntax, supports metaprogramming, compiles to C/JS, and offers static typing/garbage collection.  
node29: Microsoft's KMDF simplifies Windows kernel-mode driver development using object-oriented WDM-based framework, reducing code complexity.  
node30: WDF frameworks (KMDF/UMDF) streamline Windows driver creation with object models, tools, and abstraction of low-level WDM complexities.","node0:Wikipedia entry. Entry name: Ubuntu_Budgie. Entry content: ubuntu budgie ubuntu budgie formerly budgie-remix official community flavor ubuntu featuring budgie desktop combines stable thoroughly-tested ubuntu core modern lightweight traditional-looking desktop developed solus project ubuntu budgie started unofficial community flavor parallel ubuntu 16.04 lts referred budgie-remix budgie-remix 16.10 later released strictly following time frame issued ubuntu 16.10 eventually recognized official community flavor ubuntu rebranded ubuntu budgie vincenzo bovino hired new brand pr manager ubuntu budgie 17.04 released april 2017 updated version 17.10 october 2017 ubuntu budgie 18.10 32-bit support dropped 32-bit support also dropped ubuntu mate budgie-remix 16.04 released april 25 2016 four days release ubuntu 16.04 system contains budgie desktop 10.2.5 window manager based mutter customizable panel notification center settings arc-gtk+ theme used compared ubuntu 16.04 budgie-remix nautilus version 3.18 time ubuntu version nautilus 3.14 also dock-panel plank version 0.11.1 gedit version 3.18 gnome 3.18 photos gthumb 3.4.3 rhythmbox 3.3 totem 3.18 gnome terminal 3.18 libreoffice 5.1.2 mozilla firefox 45.0 transmission 2.84 gtk+ 3.18.9 mesa 11.2.0 xorg 1.18.3 linux kernel 4.4.0. budgie-remix 16.10 released october 16 2016 three days release ubuntu 16.10 system contains shell budgie desktop 10.2.7 gtk+ 3.22 linux kernel 4.8 many new features implemented version full disk encryption home folder encryption support multiple languages installation theme design arc gtk+ new theme icons pocillo one developers budgie-remix david mohammed says ubuntu budgie 17.04 released april 19 2017. budgie-remix renamed name distribution became official ubuntu community system contains budgie desktop 10.2.9 shell linux 4.10 kernel mesa 17.0.3 xorg 1.19.3 budgie-welcome application updated support application indicator appeared sound applets managed gnome 3.24 applications enabled gnome terminal replaced termix chromium replaced google chrome gtk+ theme support qt enabled use theme design arc gtk+ theme icons moka record release version written follows ubuntu budgie 17.10 released october 19 2017 system contains budgie desktop 10.4 shell linux 4.13 kernel budgie 10.4 desktop environment equipped set native features include new stylish alt-tab support spotify raven support switching window controls left right support smb files encrypted volumes addition applets supports customizing appearance dates times addition support left right side panels budgie desktop 10.4 support converting panels dock transparency dynamic auto-image panels ability replenish bottom panel work without terrible jump effect noteworthy improvements release ubuntu budgie 17.10 include night light caffeine tools tilix default terminal emulator instead termix well support tilix quake mode f12 key updated panel icons new wallpapers december 20 2017 canonical withdrew ubuntu 17.10 distribution october hid link site downloading reason critical bug bios damage lenovo notebook models one acer model january 12 2018 version 17.10.1 released contained correction serious problem version 17.10 ubuntu budgie released april 26 2018 system includes linux 4.15 kernel became possible install openvnc network-manager new applets appeared quick note notes dropby downloading viewing data usb devices hot corners moving windows corner screen windowpreviews viewing open windows clockworks viewing time zones autoswitch tying keyboard layout application window mover order quickly move window another virtual desktop gnome applications updated version 3.28 nautilus version 3.26
node1:Wikipedia entry. Entry name: Linux. Entry content: linux linux family open source unix-like operating systems based linux kernel operating system kernel first released september 17 1991 linus torvalds linux typically packaged linux distribution distributions include linux kernel supporting system software libraries many provided gnu project many linux distributions use word linux name free software foundation uses name gnu/linux emphasize importance gnu software causing controversy popular linux distributions include debian fedora ubuntu commercial distributions include red hat enterprise linux suse linux enterprise server desktop linux distributions include windowing system x11 wayland desktop environment gnome kde plasma 5 distributions intended servers may omit graphics altogether include solution stack lamp linux freely redistributable anyone may create distribution purpose linux originally developed personal computers based intel x86 architecture since ported platforms operating system linux leading operating system servers big iron systems mainframe computers os used top500 supercomputers since november 2017 gradually eliminated competitors used around 2.3 percent desktop computers chromebook runs linux kernel-based chrome os dominates us k–12 education market represents nearly 20 percent sub- 300 notebook sales us linux also runs embedded systems i.e devices whose operating system typically built firmware highly tailored system includes routers automation controls televisions digital video recorders video game consoles smartwatches many smartphones tablet computers run android linux derivatives dominance android smartphones linux largest installed base general-purpose operating systems linux one prominent examples free open-source software collaboration source code may used modified distributed—commercially non-commercially—by anyone terms respective licenses gnu general public license unix operating system conceived implemented 1969 bell laboratories united states ken thompson dennis ritchie douglas mcilroy joe ossanna first released 1971 unix written entirely assembly language common practice time later key pioneering approach 1973 rewritten c programming language dennis ritchie exception hardware i/o routines availability high-level language implementation unix made porting different computer platforms easier due earlier antitrust case forbidding entering computer business required license operating system source code anyone asked result unix grew quickly became widely adopted academic institutions businesses 1984 divested bell labs freed legal obligation requiring free licensing bell labs began selling unix proprietary product users legally allowed modify unix gnu project started 1983 richard stallman goal creating complete unix-compatible software system composed entirely free software work began 1984 later 1985 stallman started free software foundation wrote gnu general public license gnu gpl 1989 early 1990s many programs required operating system libraries compilers text editors unix shell windowing system completed although low-level elements device drivers daemons kernel called gnu/hurd stalled incomplete linus torvalds stated gnu kernel available time 1991 would decided write although released 1992 due legal complications development 386bsd netbsd openbsd freebsd descended predated linux torvalds also stated 386bsd available time probably would created linux minix created andrew s. tanenbaum computer science professor released 1987 minimal unix-like operating system targeted students others wanted learn operating system principles although complete source code minix freely available licensing terms prevented free software licensing changed april 2000 1991 attending university helsinki torvalds became curious operating systems frustrated licensing minix time limited educational use began work operating system kernel eventually became linux kernel torvalds began development linux kernel minix applications written minix also used linux later linux matured linux kernel development took place linux systems gnu applications also replaced minix components advantageous use freely available code gnu project fledgling operating system code licensed gnu gpl reused computer programs long also released compatible license torvalds initiated switch original license prohibited commercial redistribution gnu gpl developers worked integrate gnu components linux kernel making fully functional free operating system linus torvalds wanted call invention freax portmanteau free freak x allusion unix start work system project makefiles included name freax half year torvalds already considered name linux initially dismissed egotistical order facilitate development files uploaded ftp server codice_1 funet september 1991 ari lemmke torvalds coworker helsinki university technology hut one volunteer administrators ftp server time think freax good name named project linux server without consulting torvalds later however torvalds consented linux demonstrate word linux pronounced torvalds included audio guide kernel source code another variant pronunciation adoption linux production environments rather used hobbyists started take first mid-1990s supercomputing community organizations nasa started replace increasingly expensive machines clusters inexpensive commodity computers running linux commercial use began dell ibm followed hewlett-packard started offering linux support escape microsoft monopoly desktop operating system market today linux systems used throughout computing embedded systems virtually supercomputers secured place server installations popular lamp application stack use linux distributions home enterprise desktops growing linux distributions also become popular netbook market many devices shipping customized linux distributions installed google releasing chrome os designed netbooks linux greatest success consumer market perhaps mobile device market android one dominant operating systems smartphones popular tablets recently wearables linux gaming also rise valve showing support linux rolling gaming oriented linux distribution linux distributions also gained popularity various local national governments federal government brazil greg kroah-hartman lead maintainer linux kernel guides development stallman heads free software foundation turn supports gnu components finally individuals corporations develop third-party non-gnu components third-party components comprise vast body work may include kernel modules user applications libraries linux vendors communities combine distribute kernel gnu components non-gnu components additional package management software form linux distributions linux-based system modular unix-like operating system deriving much basic design principles established unix 1970s 1980s system uses monolithic kernel linux kernel handles process control networking access peripherals file systems device drivers either integrated directly kernel added modules loaded system running gnu userland key part systems based linux kernel android notable exception project implementation c library functions wrapper system calls linux kernel necessary kernel-userspace interface toolchain broad collection programming tools vital linux development including compilers used build linux kernel coreutils implement many basic unix tools project also develops popular cli shell graphical user interface gui used linux systems built top implementation x window system recently linux community seeks advance wayland new display server protocol place x11 many open-source software projects contribute linux systems installed components linux system include following user interface also known shell either command-line interface cli graphical user interface gui controls attached associated hardware common embedded systems desktop systems default user interface usually graphical although cli commonly available terminal emulator windows separate virtual console cli shells text-based user interfaces use text input output dominant shell used linux bourne-again shell bash originally developed gnu project low-level linux components including various parts userland use cli exclusively cli particularly suited automation repetitive delayed tasks provides simple inter-process communication desktop systems popular user interfaces gui shells packaged together extensive desktop environments kde plasma gnome mate cinnamon unity lxde pantheon xfce though variety additional user interfaces exist popular user interfaces based x window system often simply called x provides network transparency permits graphical application running one system displayed another user may interact application however certain extensions x window system capable working network several x display servers exist reference implementation x.org server popular several types window managers exist x11 including tiling dynamic stacking compositing window managers provide means control placement appearance individual application windows interact x window system simpler x window managers dwm ratpoison i3wm herbstluftwm provide minimalist functionality elaborate window managers fvwm enlightenment window maker provide features built-in taskbar themes still lightweight compared desktop environments desktop environments include window managers part standard installations mutter gnome kwin kde xfwm xfce although users may choose use different window manager preferred wayland display server protocol intended replacement x11 protocol received wider adoption unlike x11 wayland need external window manager compositing manager therefore wayland compositor takes role display server window manager compositing manager weston reference implementation wayland gnome mutter kde kwin ported wayland standalone display servers enlightenment already successfully ported since version 19 linux currently two modern kernel-userspace apis handling video input devices v4l2 api video streams radio dvb api digital tv reception due complexity diversity different devices due large amount formats standards handled apis infrastructure needs evolve better fit devices also good userspace device library key success userspace applications able work formats supported devices primary difference linux many popular contemporary operating systems linux kernel components free open-source software linux operating system although far widely used free open-source software licenses based principle copyleft kind reciprocity work derived copyleft piece software must also copyleft common free software license gnu general public license gpl form copyleft used linux kernel many components gnu project linux-based distributions intended developers interoperability operating systems established computing standards linux systems adhere posix sus lsb iso ansi standards possible although date one linux distribution posix.1 certified linux-ft. free software projects although developed collaboration often produced independently fact software licenses explicitly permit redistribution however provides basis larger scale projects collect software produced stand-alone projects make available form linux distribution many linux distributions manage remote collection system software application software packages available download installation network connection allows users adapt operating system specific needs distributions maintained individuals loose-knit teams volunteer organizations commercial entities distribution responsible default configuration installed linux kernel general system security generally integration different software packages coherent whole distributions typically use package manager apt yum zypper pacman portage install remove update system software one central location distribution largely driven developer user communities vendors develop fund distributions volunteer basis debian well-known example others maintain community version commercial distributions red hat fedora suse opensuse many cities regions local associations known linux user groups lugs seek promote preferred distribution extension free software hold meetings provide free demonstrations training technical support operating system installation new users many internet communities also provide support linux users developers distributions free software open-source projects irc chatrooms newsgroups online forums another means support notable examples linuxquestions.org various distribution specific support community forums ones ubuntu fedora gentoo linux distributions host mailing lists commonly specific topic usage development given list several technology websites linux focus print magazines linux often bundle cover disks carry software even complete linux distributions although linux distributions generally available without charge several large corporations sell support contribute development components system free software analysis linux kernel showed 75 percent code december 2008 january 2010 developed programmers working corporations leaving 18 percent volunteers 7 unclassified major corporations provide contributions include dell ibm hp oracle sun microsystems part oracle nokia number corporations notably red hat canonical suse built significant business around linux distributions free software licenses various software packages distribution built linux kernel based explicitly accommodate encourage commercialization relationship linux distribution whole individual vendors may seen symbiotic one common business model commercial suppliers charging support especially business users number companies also offer specialized business version distribution adds proprietary support packages tools administer higher numbers installations simplify administrative tasks another business model give away software order sell hardware used norm computer industry operating systems cp/m apple dos versions mac os prior 7.6 freely copyable modifiable computer hardware standardized throughout 1980s became difficult hardware manufacturers profit tactic os would run manufacturer computer shared architecture linux distributions support dozens programming languages original development tools used building linux applications operating system programs found within gnu toolchain includes gnu compiler collection gcc gnu build system amongst others gcc provides compilers ada c c++ go fortran many programming languages cross-platform reference implementation supports linux example php perl ruby python java go rust haskell first released 2003 llvm project provides alternative cross-platform open-source compiler many languages proprietary compilers linux include intel c++ compiler sun studio ibm xl c/c++ compiler basic form visual basic supported forms gambas freebasic xbasic terms terminal programming quickbasic turbo basic programming form qb64 common feature unix-like systems linux includes traditional specific-purpose programming languages targeted scripting text processing system configuration management general linux distributions support shell scripts awk sed make many programs also embedded programming language support configuring programming example regular expressions supported programs like grep locate traditional unix mta sendmail contains turing complete scripting system advanced text editor gnu emacs built around general purpose lisp interpreter distributions also include support php perl ruby python dynamic languages common linux also supports c via mono vala scheme guile scheme acts extension language targeting gnu system utilities seeking make conventionally small static compiled c programs unix design rapidly dynamically extensible via elegant functional high-level scripting system many gnu programs compiled optional guile bindings end number java virtual machines development kits run linux including original sun microsystems jvm hotspot ibm j2se well many open-source projects like kaffe jikesrvm gnome kde popular desktop environments provide framework developing applications projects based gtk+ qt widget toolkits respectively also used independently larger framework support wide variety languages number integrated development environments available including anjuta codelite eclipse geany activestate komodo kdevelop lazarus monodevelop netbeans qt creator long-established editors vim nano emacs remain popular linux kernel widely ported operating system kernel available devices ranging mobile phones supercomputers runs highly diverse range computer architectures including hand-held arm-based ipaq ibm mainframes system z9 system z10 specialized distributions kernel forks exist less mainstream architectures example elks kernel fork run intel 8086 intel 80286 16-bit microprocessors µclinux kernel fork may run systems without memory management unit kernel also runs architectures ever intended use manufacturer-created operating system macintosh computers powerpc intel processors pdas video game consoles portable music players mobile phones several industry associations hardware conferences devoted maintaining improving support diverse hardware linux freedomhec time support different hardware improved linux resulting off-the-shelf purchase good chance compatible besides linux distributions designed general-purpose use desktops servers distributions may specialized different purposes including computer architecture support embedded systems stability security localization specific region language targeting specific user groups support real-time applications commitment given desktop environment furthermore distributions deliberately include free software four hundred linux distributions actively developed dozen distributions popular general-purpose use popularity linux standard desktop computers laptops increasing years modern distributions include graphical user environment two popular environments kde plasma desktop xfce single official linux desktop exists rather desktop environments linux distributions select components pool free open-source software construct gui implementing less strict design guide gnome example human interface guidelines design guide gives human–machine interface important role graphical design also considering people disabilities even focusing security collaborative nature free software development allows distributed teams perform language localization linux distributions use locales localizing proprietary systems would cost-effective example sinhalese language version knoppix distribution became available significantly microsoft translated windows xp sinhalese case lanka linux user group played major part developing localized system combining knowledge university professors linguists local developers performance linux desktop controversial topic example 2007 con kolivas accused linux community favoring performance servers quit linux kernel development frustration lack focus desktop gave tell interview topic since significant amount development focused improving desktop experience projects upstart systemd aim faster boot time wayland mir projects aim replacing x11 enhancing desktop performance security appearance many popular applications available wide variety operating systems example mozilla firefox openoffice.org/libreoffice blender downloadable versions major operating systems furthermore applications initially developed linux pidgin gimp ported operating systems including windows macos due popularity addition growing number proprietary desktop applications also supported linux autodesk maya foundry nuke high-end field animation visual effects see list proprietary software linux details also several companies ported companies games linux linux also supported platform popular steam desura digital-distribution services many types applications available microsoft windows macos also run linux commonly either free software application exist functions application found another operating system application version works linux skype video games like dota 2 team fortress 2 furthermore wine project provides windows compatibility layer run unmodified windows applications linux sponsored commercial interests including codeweavers produces commercial version software since 2009 google also provided funding wine project crossover proprietary solution based open-source wine project supports running windows versions microsoft office intuit applications quicken quickbooks adobe photoshop versions cs2 many popular games world warcraft cases linux port software areas desktop publishing professional audio equivalent software available linux also possible run applications written android versions linux using anbox besides externally visible components x window managers non-obvious quite central role played programs hosted freedesktop.org d-bus pulseaudio major desktop environments gnome kde include offering graphical front-ends written using corresponding toolkit gtk+ qt display server another component longest time communicating x11 display server protocol clients prominent software talking x11 includes x.org server xlib frustration cumbersome x11 core protocol especially numerous extensions led creation new display server protocol wayland installing updating removing software linux typically done use package managers synaptic package manager packagekit yum extender major linux distributions extensive repositories often containing tens thousands packages software run linux available official repositories alternatively users install packages unofficial repositories download pre-compiled packages directly websites compile source code methods come different degrees difficulty compiling source code general considered challenging process new linux users hardly needed modern distributions method specific linux linux distributions also become popular netbook market many devices asus eee pc acer aspire one shipping customized linux distributions installed 2009 google announced chrome os minimal linux-based operating system using chrome browser main user interface chrome os run non-web applications except bundled file manager media player certain level support android applications added later versions netbooks shipped operating system termed chromebooks started appearing market june 2011 linux distributions long used server operating systems risen prominence area netcraft reported september 2006 eight ten two unknown os reliable internet hosting companies ran linux distributions web servers linux top position june 2008 linux distributions represented five top ten freebsd three ten microsoft two ten since february 2010 linux distributions represented six top ten freebsd three ten microsoft one ten linux top position linux distributions cornerstone lamp server-software combination linux apache mariadb/mysql perl/php/python achieved popularity among developers one common platforms website hosting linux distributions become increasingly popular mainframes partly due pricing open-source model december 2009 computer giant ibm reported would predominantly market sell mainframe-based enterprise linux server linuxcon north america 2015 ibm announced linuxone series mainframes specifically designed run linux open-source software linux distributions also dominant operating systems supercomputers november 2017 supercomputers 500 list run variant linux several operating systems smart devices smartphones tablet computers smart tvs in-vehicle infotainment ivi systems based linux major platforms systems include android firefox os mer tizen android become dominant mobile operating system smartphones running 79.3 units sold worldwide second quarter 2013 android also popular operating system tablets android smart tvs in-vehicle infotainment systems also appeared market cellphones pdas running linux open-source platforms became common 2007 examples include nokia n810 openmoko neo1973 motorola rokr e8 continuing trend palm later acquired hp produced new linux-derived operating system webos built line palm pre smartphones nokia maemo one earliest mobile operating systems based debian later merged intel moblin another linux-based operating system form meego project later terminated favor tizen operating system targeted mobile devices well ivi tizen project within linux foundation several samsung products already running tizen samsung gear 2 significant example samsung z smartphones use tizen instead android result meego termination mer project forked meego codebase create basis mobile-oriented operating systems july 2012 jolla announced sailfish os mobile operating system built upon mer technology mozilla firefox os consists linux kernel hardware abstraction layer web-standards-based runtime environment user interface integrated web browser canonical released ubuntu touch aiming bring convergence user experience mobile operating system desktop counterpart ubuntu operating system also provides full ubuntu desktop connected external monitor due low cost ease customization linux often used embedded systems non-mobile telecommunications equipment sector majority customer-premises equipment cpe hardware runs linux-based operating system openwrt community driven example upon many oem firmware releases based example popular tivo digital video recorder also uses customized linux several network firewalls routers makers cisco/linksys korg oasys korg kronos yamaha motif xs/motif xf music workstations yamaha s90xs/s70xs yamaha mox6/mox8 synthesizers yamaha motif-rack xs tone generator module roland rd-700gx digital piano also run linux linux also used stage lighting control systems wholehogiii console past games available linux recent years games released support linux especially indie games exception aaa title games android popular mobile platform uses linux kernel gained much developer interest one main platforms mobile game development along ios operating system apple iphone ipad devices february 14 2013 valve released linux version steam popular game distribution platform pc many steam games ported linux december 13 2013 valve released steamos gaming oriented os based debian beta testing plans ship steam machines gaming entertainment platform valve also developed vogl opengl debugger intended aid video game development well porting source game engine desktop linux result valve effort several prominent games dota 2 team fortress 2 portal portal 2 left 4 dead 2 natively available desktop linux july 31 2013 nvidia released shield attempt use android specialized gaming platform linux users play windows games wine crossover linux 22 august 2018 valve released fork wine called proton aimed gaming features improvements vanilla wine vulkan-based directx 11 12 implementations steam integration better full screen game controller support improved performance multi-threaded games due flexibility customizability free open-source nature linux becomes possible highly tune linux specific purpose two main methods creating specialized linux distribution building scratch general-purpose distribution base distributions often used purpose include debian fedora ubuntu based debian arch linux gentoo slackware contrast linux distributions built scratch general-purpose bases instead focus jeos philosophy including necessary components avoiding resource overhead caused components considered redundant distribution use cases home theater pc htpc pc mainly used entertainment system especially home theater system normally connected television often additional audio system openelec linux distribution incorporates media center software kodi os tuned specifically htpc built ground adhering jeos principle os lightweight suitable confined usage range htpc also special editions linux distributions include mythtv media center software mythbuntu special edition ubuntu kali linux debian-based linux distribution designed digital forensics penetration testing comes preinstalled several software applications penetration testing identifying security exploits ubuntu derivative backbox provides pre-installed security network analysis tools ethical hacking arch-based blackarch includes 2100 tools pentesting security researching many linux distributions created privacy secrecy network anonymity information security mind including tails tin hat linux tinfoil hat linux lightweight portable security distribution based arch linux developed united states department defense tor-ramdisk minimal distribution created solely host network anonymity software tor linux live cd sessions long used tool recovering data broken computer system repairing system building upon idea several linux distributions tailored purpose emerged use gparted partition editor additional data recovery system repair software spacex uses multiple redundant fault-tolerant design falcon 9 rocket merlin engine controlled three voting computers two physical processors per computer constantly check operation linux inherently fault-tolerant operating system function whole system including hardware flight computer software makes purpose flexibility commercial off-the-shelf parts system-wide radiation-tolerant design used instead radiation hardened parts spacex conducted 76 launches falcon 9 since 2010 one successfully delivered primary payloads intended orbit plans use transport astronauts international space station addition windows used operating system non-mission critical systemslaptops used board space station examplebut replaced linux first linux-powered humanoid robot also undergoing in-flight testing jet propulsion laboratory used linux number years help projects relating construction unmanned space flight deep space exploration nasa uses linux robotics mars rover ubuntu linux save data satellites linux distributions created provide hands-on experience coding source code students devices raspberry pi addition producing practical device intention show students things work hood ubuntu derivatives edubuntu linux schools project well debian derivative skolelinux provide education-oriented software packages also include tools administering building school computer labs computer-based classrooms linux terminal server project ltsp instant webkiosk webconverger browser-based linux distributions often used web kiosks digital signage thinstation minimalist distribution designed thin clients rocks cluster distribution tailored high-performance computing clusters general-purpose linux distributions target specific audience users specific language geographical area examples include ubuntu kylin chinese language users blankon targeted indonesians profession-specific distributions include ubuntu studio media creation dnalinux bioinformatics also muslim-oriented distribution name sabily consequently also provides islamic tools certain organizations use slightly specialized linux distributions internally including gendbuntu used french national gendarmerie goobuntu used internally google astra linux developed specifically russian army many quantitative studies free/open-source software focus topics including market share reliability numerous studies specifically examining linux linux market growing rapidly revenue servers desktops packaged software running linux expected exceed 35.7 billion 2008 analysts proponents attribute relative success linux security reliability low cost freedom vendor lock-in linux kernel licensed gnu general public license gpl version 2 gpl requires anyone distributes software based source code license must make originating source code modifications available recipient terms key components typical linux distribution also mainly licensed gpl may use licenses many libraries use gnu lesser general public license lgpl permissive variant gpl x.org implementation x window system uses mit license torvalds states linux kernel move version 2 gpl version 3 specifically dislikes provisions new license prohibit use software digital rights management would also impractical obtain permission copyright holders number thousands 2001 study red hat linux 7.1 found distribution contained 30 million source lines code using constructive cost model study estimated distribution required eight thousand person-years development time according study software developed conventional proprietary means would cost us dollars develop united states source code 71 written c programming language many languages used including c++ lisp assembly language perl python fortran various shell scripting languages slightly half lines code licensed gpl linux kernel 2.4 million lines code 8 total later study analysis performed debian version 4.0 etch released 2007 distribution contained close 283 million source lines code study estimated would required seventy three thousand man-years cost us dollars develop conventional means united states name linux trademark registered linus torvalds initially nobody registered august 15 1994 william r. della croce jr. filed trademark linux demanded royalties linux distributors 1996 torvalds affected organizations sued trademark assigned torvalds 1997 case settled licensing trademark since handled linux mark institute lmi torvalds stated trademarked name prevent someone else using lmi originally charged nominal sublicensing fee use linux name part trademarks later changed favor offering free perpetual worldwide sublicense free software foundation fsf prefers gnu/linux name referring operating system whole considers linux distributions variants gnu operating system initiated 1983 richard stallman president fsf explicitly take issue name android android os also operating system based linux kernel gnu part minority public figures software projects stallman fsf notably debian sponsored fsf 1996 also use gnu/linux referring operating system whole media common usage however refers family operating systems simply linux many large linux distributions example suse linux red hat enterprise linux contrast linux distributions containing free software use gnu/linux simply gnu trisquel gnu/linux parabola gnu/linux-libre blag linux gnu gnewsense 8 13 modern linux distribution made gnu components range depending whether gnome considered part gnu determined counting lines source code making ubuntu natty release meanwhile 6 taken linux kernel increased 9 including direct dependencies
node2:Wikipedia entry. Entry name: Extensible_Application_Markup_Language. Entry content: extensible application markup language extensible application markup language xaml declarative xml-based language developed microsoft used initializing structured values objects available microsoft open specification promise acronym originally stood extensible avalon markup language avalon code-name windows presentation foundation wpf xaml used extensively .net framework 3.0 .net framework 4.0 technologies particularly windows presentation foundation wpf silverlight windows workflow foundation wf windows runtime xaml framework windows store apps wpf xaml forms user interface markup language define ui elements data binding events features wf workflows defined using xaml xaml also used silverlight applications windows phone apps windows store apps xaml elements map directly common language runtime object instances xaml attributes map common language runtime properties events objects xaml files created edited visual design tools like microsoft expression blend microsoft visual studio hostable windows workflow foundation visual designer also created edited standard text editor code editor like xamlpad graphical editor like vector architect anything created implemented xaml expressed using traditional .net language c visual basic .net however key aspect technology reduced complexity needed tools process xaml based xml consequently variety products emerging particularly wpf space create xaml-based applications xaml simply based xml developers designers able share edit content freely amongst without requiring compilation xaml also benefits declarative definition ui rather procedural code generate xaml file compiled .baml file binary application markup language may inserted resource .net framework assembly run-time framework engine extracts .baml file assembly resources parses creates corresponding wpf visual tree workflow used windows presentation foundation xaml used describe visual user interfaces wpf allows definition 2d 3d objects rotations animations variety effects features used windows workflow foundation contexts xaml used describe potentially long-running declarative logic created process modeling tools rules systems serialization format workflows previously called xoml differentiate ui markup use xaml longer distinguished however file extension files containing workflow markup still xoml xaml uses specific way define look feel called template differing cascading style sheet syntax closer xbl windows presentation foundation example shows text hello world top-level xaml container called canvas schema xmlns= http //schemas.microsoft.com ... part may changed work computer using schema microsoft recommends example also integrated web page wpf installed using xbaps xaml browser applications compiled applications running sandboxed environment hosted within browser another way use silverlight plugin code included directly html page rather must loaded page via javascript .net 3.0 later installed loose xaml files also viewed compatible web browser including internet explorer firefox conjunction .net framework 3.0 without need silverlight plugin loose xaml files markup-only files limited defining visual content rendered compiled application mysilverlight.js file must contain code loads xaml code xml file mysilverlight html element crucial part utilizing xaml full potential making appropriate usage binding well comfortable creating custom user elements required specific needs binding done follows four microsoft main implementations xaml versions differences parsing behavior additionally silverlight 4 xaml parser 100 backward compatible silverlight 3 files silverlight 3 accepted xaml files may accepted parsed differently silverlight 4 parser european committee interoperable systems said 2007 microsoft use xaml silverlight product aimed introduce content world wide web could accessed windows platform using plugin xaml viewable non-microsoft browsers windows linux mac microsoft supported novell silverlight viewer gnu/linux called moonlight january 2010 moonlight 2 compatible silverlight 2 development moonlight later discontinued
node3:Wikipedia entry. Entry name: Dryad_(programming). Entry content: dryad programming dryad research project microsoft research general purpose runtime execution data parallel applications microsoft made several preview releases technology available add-ons windows hpc server 2008 r2 however october 2011 microsoft discontinued active development dryad shifting focus apache hadoop framework application written dryad modeled directed acyclic graph dag dag defines dataflow application vertices graph defines operations performed data computational vertices written using sequential constructs devoid concurrency mutual exclusion semantics dryad runtime parallelizes dataflow graph distributing computational vertices across various execution engines multiple processor cores computer different physical computers connected network cluster scheduling computational vertices available hardware handled dryad runtime without explicit intervention developer application administrator network flow data one computational vertex another implemented using communication channels vertices physical implementation realized tcp/ip streams shared memory temporary files stream used runtime transport finite number structured items dryad defines domain-specific language implemented via c++ library used create model dryad execution graph computational vertices written using standard c++ constructs make accessible dryad runtime must encapsulated class inherits codice_1 base class graph defined adding edges edges added using composition operator defined dryad connects two graphs two nodes graph edge managed code wrappers dryad api also written exist several high-level language compilers use dryad runtime examples include scope structured computations optimized parallel execution dryadlinq
node4:Wikipedia entry. Entry name: Penny_Black_(research_project). Entry content: penny black research project penny black project microsoft research project tries find effective practical ways fighting spam identifying spams consumes recipient time idea make sender emails pay certain amount sending currency mode payment could cpu cycles turing tests memory cycles payment would limit spammers ability send large quantities emails quickly project name derived penny black world first adhesive stamp used paid postage goal project move e-mail costs receiver sender general idea sender must prove expended certain amount effort specifically receiver message alone project aims devise method without introducing additional challenge-response mechanisms third parties without requiring extra maintenance updates retaining current architecture e-mail system one project ideas ticket server credit-based method validating emails tickets would required perform actions sending emails three operations ticket server provides request ticket cancel ticket refund ticket server would allow user request ticket exchange proof work expending cpu cycles solving hard algorithms processing power turing tests even paying money server could also cancel ticket example receiving email ticket receiver could request ticket cancelled reused person cancels ticket also option refund ticket sender causes original sender regain new ticket example user might refund ticket came email spam using friendly trusted emails would little cost tickets would frequently refunded however spammers would required invest either lot computing time money order create enough tickets send large numbers e-mails one obvious flaws project entirely stop spam hopes slow spam enough longer cost effective spammers using methods reduce spam also require policies universal amongst mail clients intended mass email may also work intended example subscribers particular email service may end getting emails significant delay email service also become increased expenses provider
node5:Wikipedia entry. Entry name: NuGet. Entry content: nuget nuget free open-source package manager designed microsoft development platform formerly known nupack since introduction 2010 nuget evolved larger ecosystem tools services nuget distributed visual studio extension starting visual studio 2012 nuget comes pre-installed default nuget also integrated sharpdevelop nuget also used command line automated scripts supports multiple programming languages including chocolatey machine-level package manager installer software packages built windows nt platform execution engine using nuget packaging infrastructure windows powershell provide automation tool installing software windows machines designed simplify process user perspective name extension pun nuget nougat everyone loves chocolatey nougat chocolatey invoked packagemanagement module formerly 'oneget powershell version 5.0
node6:Wikipedia entry. Entry name: Commercial_Operating_System_(COS). Entry content: commercial operating system cos cos-3xx commercial operating system name used digital equipment corporation family operating systems supported use dibol programming language combining features basic fortran cobol cos also supported rpg report program generator commercial operating system implemented run hardware pdp-8 pdp-11 family cos-310 developed pdp-8 provide operating environment dibol cos-310 system purchased package included desk vt-52 vdt video display tube pair eight inch floppy drives optionally could purchase one 2.5 mb hard drives removable media cos-310 one operating systems available decmate ii unlike tss-8 user 4k virtual machine cos user virtual 32k cos-350 developed support pdp-11 port dibol focus vendors turnkey software packages pre-cos-350 pdp 11/05 single-user batch-oriented implementation released multi-user pdp 11/10-based cos came 4 years later much powerful pdp-11/34 added significant configuration flexibility expansion capability
node7:Wikipedia entry. Entry name: Windows_Forms. Entry content: windows forms windows forms winforms graphical gui class library included part microsoft .net framework mono framework providing platform write rich client applications desktop laptop tablet pcs seen replacement earlier complex c++ based microsoft foundation class library offer comparable paradigm acts platform user interface tier multi-tier solution microsoft connect event december 4 2018 microsoft announced releasing windows forms open source project github released mit license release windows forms become available projects targeting .net core framework however framework still available windows platform mono incomplete implementation winforms remains cross-platform implementation future development microsoft succeeded winforms xaml based gui entry using frameworks wpf uwp however drag drop placement gui components manner similar winforms still provided xaml replacing root xaml element page/window canvas ui-control making change user build window similar fashion winforms directly dragging dropping components using visual studio gui xaml provided drag drop placement backwards compatibility canvas control xaml controls similar winform controls 1-to-1 backwards compatible perform similar functions similar appearance properties methods different enough require remapping one api another windows forms application event-driven application supported microsoft .net framework unlike batch program spends time simply waiting user something fill text box click button windows forms provides access native windows user interface common controls wrapping existent windows api managed code help windows forms .net framework provides comprehensive abstraction win32 api visual basic mfc windows forms similar microsoft foundation class mfc library developing client applications provides wrapper consisting set c++ classes development windows applications however provide default application framework like mfc every control windows forms application concrete instance class visual elements windows forms class library derive control class provides minimal functionality user interface element location size color font text well common events like click drag/drop control class also docking support let control rearrange position parent microsoft active accessibility support control class also helps impaired users use windows forms better besides providing access native windows controls like button textbox checkbox listview windows forms added controls activex hosting layout arrangement validation rich data binding controls rendered using gdi+ like abstract window toolkit awt equivalent java api windows forms early easy way provide graphical user interface components .net framework windows forms built existing windows api controls merely wrap underlying windows components methods allow direct access win32 callbacks available non-windows platforms .net framework 2.0 windows forms gained richer layout controls office 2003 style toolstrip controls multithreading component richer design-time data binding support well clickonce web-based deployment release .net 3.0 microsoft released second parallel api rendering guis windows presentation foundation wpf based directx together gui declarative language called xaml question-and-answer session build 2014 conference microsoft explained windows forms maintenance mode new features added bugs found would still fixed recently improved high-dpi support various windows forms controls introduced updates .net framework version 4.5 mono project led xamarin formerly ximian novell create ecma standard compliant .net compatible set tools mono support system.windows.forms .net 2.0 announced complete also system.windows.forms 2.0 works natively mac os x however system.windows.forms actively developed mono full compatibility .net achieved possible microsoft system.windows forms mainly wrapper around windows api methods allow direct access win32 callbacks available platforms windows
node8:Wikipedia entry. Entry name: Conary_(package_manager). Entry content: conary package manager conary free software package management system created rpath sas distributed terms apache license version 2.0 relicensed gplv3 2013 focuses installing packages automated dependency resolution distributed online repositories providing concise easy-to-use python-based description language specify build package used foresight linux rpath linux conary updates specific files packages need updated behavior minimizes bandwidth time requirements updating software packages conary also features rollbacks package installation well derived packages conary toolchain includes build server conary packages builds packages inside chroot environments containing package explicitly listed build requirements fundamental packages useful packagers means package builds done inside reproducible environment packagers accidentally introduce dependencies peculiarities machine environment custom configuration files undocumented extra packages
node9:Wikipedia entry. Entry name: DirectX. Entry content: directx microsoft directx collection application programming interfaces apis handling tasks related multimedia especially game programming video microsoft platforms originally names apis began direct direct3d directdraw directmusic directplay directsound forth name directx coined shorthand term apis x standing particular api names soon became name collection microsoft later set develop gaming console x used basis name xbox indicate console based directx technology x initial carried forward naming apis designed xbox xinput cross-platform audio creation tool xact directx pattern continued windows apis direct2d directwrite direct3d 3d graphics api within directx widely used development video games microsoft windows xbox line consoles direct3d also used software applications visualization graphics tasks cad/cam engineering direct3d widely publicized component directx common see names directx direct3d used interchangeably directx software development kit sdk consists runtime libraries redistributable binary form along accompanying documentation headers use coding originally runtimes installed games explicitly user windows 95 launch directx directx included windows 95 oem service release 2 windows 98 windows nt 4.0 shipped directx every version windows released since sdk available free download runtimes proprietary closed-source software source code provided sdk samples starting release windows 8 developer preview directx sdk integrated windows sdk late 1994 microsoft ready release windows 95 next operating system important factor value consumers would place programs would able run three microsoft employees—craig eisler alex st. john eric engstrom—were concerned programmers tended see microsoft previous operating system ms-dos better platform game programming meaning games would developed windows 95 operating system would much success compounded negative reception surrounding windows port video game lion king game used wing crashed compaq presarios came shipped following partnership compaq disney cirrus logic display drivers used presarios thoroughly tested api dos allowed direct access video cards keyboards mice sound devices parts system windows 95—with protected memory model—restricted access working much standardized model microsoft needed quick solution programmers operating system months away released eisler development lead st. john engstrom program manager worked together fix problem solution eventually named directx first version directx released september 1995 windows games sdk win32 replacement dci wing apis windows 3.1 directx allowed versions microsoft windows starting windows 95 incorporate high-performance multimedia eisler wrote frenzy build directx 1 5 blog directx 2.0 became component windows releases windows 95 osr2 windows nt 4.0 mid-1996 since windows 95 still new games released microsoft engaged heavy promotion directx developers generally distrustful microsoft ability build gaming platform windows alex st. john evangelist directx staged elaborate event 1996 computer game developers conference game developer jay barnson described roman theme including real lions togas something resembling indoor carnival event microsoft first introduced direct3d directplay demonstrated multiplayer mechwarrior 2 played internet directx team faced challenging task testing directx release array computer hardware software variety different graphics cards audio cards motherboards cpus input devices games multimedia applications tested beta final release directx team also built distributed tests allowed hardware industry confirm new hardware designs driver releases would compatible directx prior directx microsoft included opengl windows nt platform time opengl required high-end hardware focused engineering cad uses direct3d intended microsoft controlled alternative opengl focused initially game use 3d gaming grew opengl developed include better support programming techniques interactive multimedia applications like games giving developers choice using opengl direct3d 3d graphics api applications point battle began supporters cross-platform opengl windows-only direct3d incidentally opengl supported microsoft directx team developer chose use opengl 3d graphics api apis directx often combined opengl computer games opengl include directx functionality sound joystick support console-specific version directx used basis microsoft xbox xbox 360 xbox one console api api developed jointly microsoft nvidia developed custom graphics hardware used original xbox xbox api similar directx version 8.1 non-updateable like console technologies xbox code named directxbox shortened xbox commercial name 2002 microsoft released directx 9 support use much longer shader programs pixel vertex shader version 2.0 microsoft continued update directx suite since introducing shader model 3.0 directx 9.0c released august 2004 april 2005 directshow removed directx moved microsoft platform sdk instead directx confirmed present microsoft windows phone 8 real-time raytracing announced dxr 2018 original logo resembled deformed radiation warning symbol controversially original name directx project manhattan project reference us nuclear weapons initiative alex st. john head microsoft directx evangelism time claims connotation ultimate outcome manhattan project nuclear bombing japan intentional directx sister project xbox shares similar logo meant displace japanese videogame-makers dominance video-game industry however microsoft publicly denies account instead claiming logo merely artistic design directx composed multiple apis microsoft deprecated still supports directx components directx functionality provided form com-style objects interfaces additionally directx components managed objects built top parts directx managed direct3d xna graphics library top direct3d 9 directx 9 released 2002 windows 98 xp currently supported subsequent versions microsoft continues make changes directx 9c causing support dropped aforementioned operating systems january 2007 windows 2000 xp required also introduced shader model 2.0 containing pixel shader 2.0 vertex shader 2.0 major update directx api directx 10 ships available windows vista later previous versions windows windows xp able run directx 10-exclusive applications rather programs run windows xp system directx 10 hardware simply resort directx 9.0c code path latest available windows xp computers changes directx 10 extensive many former parts directx api deprecated latest directx sdk preserved compatibility directinput deprecated favor xinput directsound deprecated favor cross-platform audio creation tool system xact additionally lost support hardware accelerated audio since vista audio stack renders sound software cpu directplay dplay.dll also removed replaced dplayx.dll games rely dll must duplicate rename dplay.dll order achieve backwards compatibility directx windows vista contains several versions direct3d direct3d 10.1 incremental update direct3d 10.0 shipped required windows vista service pack 1 release mainly sets image quality standards graphics vendors giving developers control image quality also adds support cube map arrays separate blend modes per-mrt coverage mask export pixel shader ability run pixel shader per sample access multi-sampled depth buffers requires video card supports shader model 4.1 higher 32-bit floating-point operations direct3d 10.1 still fully supports direct3d 10 hardware order utilize new features updated hardware required microsoft unveiled directx 11 gamefest 08 event seattle major scheduled features including gpgpu support directcompute direct3d 11 tessellation support improved multi-threading support assist video game developers developing games better utilize multi-core processors direct3d 11 runs windows vista windows 7 windows 8 windows 10 parts new api multi-threaded resource handling supported direct3d 9/10/10.1-class hardware hardware tessellation shader model 5.0 require direct3d 11 supporting hardware microsoft since released direct3d 11 technical preview direct3d 11 strict superset direct3d 10.1 — hardware api features version 10.1 retained new features added necessary exposing new functionality helps keep backwards compatibility previous versions directx microsoft released final platform update windows vista october 27 2009 5 days initial release windows 7 launched direct3d 11 base standard since four updates directx 11 released directx 12 announced microsoft gdc march 20 2014 officially launched alongside windows 10 july 29 2015 primary feature highlight new release directx introduction advanced low-level programming apis direct3d 12 reduce driver overhead developers able implement command lists buffers gpu allowing efficient resource utilization parallel computation lead developer max mcmullen stated main goal direct3d 12 achieve console-level efficiency phone tablet pc release direct3d 12 comes alongside initiatives low-overhead graphics apis including amd mantle amd graphics cards apple metal ios macos khronos group cross-platform vulkan multiadapter support feature directx 12 allowing developers utilize multiple gpus system simultaneously multi-gpu support previously dependent vendor implementations amd crossfirex nvidia sli directx 12 supported fermi later nvidia gpus amd gcn-based chips intel haswell later processors graphics units siggraph 2014 intel released demo showing computer generated asteroid field directx 12 claimed 50–70 efficient directx 11 rendering speed cpu power consumption ashes singularity first publicly available game utilize directx 12 testing ars technica august 2015 revealed slight performance regressions directx 12 directx 11 mode nvidia geforce 980 ti whereas amd radeon r9 290x achieved consistent performance improvements 70 directx 12 scenarios amd outperformed powerful nvidia directx 12 performance discrepancies may due poor nvidia driver optimizations directx 12 even hardware limitations card optimized directx 11 serial execution however exact cause remains unclear directx 12 apis also featured xbox however directx 12 code directly portable pc xbox one due inherent differences two platforms performance improvements directx 12 xbox substantial pc march 2018 directx raytracing dxr announced capable real-time ray-tracing supported hardware dxr api added windows 10 october 2018 update 2019 microsoft announced arrival directx 12 windows 7 version number reported microsoft dxdiag tool version 4.09.0000.0900 higher use x.xx.xxxx.xxxx format version numbers however directx windows xp msdn page claims registry always x.xx.xx.xxxx format put another way table lists version 4.09.00.0904 microsoft dxdiag tool may 4.09.0000.0904 various releases windows included supported various versions directx allowing newer versions operating system continue running applications designed earlier versions directx versions gradually phased favor newer apis drivers hardware apis direct3d directsound need interact hardware device driver hardware manufacturers write drivers particular directx version device driver interface ddi test individual piece hardware make directx compatible hardware devices directx compatible drivers words one must install directx order use hardware early versions directx included up-to-date library directx compatible drivers currently available practice stopped however favor web-based windows update driver-update system allowed users download drivers relevant hardware rather entire library prior directx 10 directx runtime designed backward compatible older drivers meaning newer versions apis designed interoperate older drivers written previous version ddi application programmer query available hardware capabilities using complex system cap bits tied particular hardware feature direct3d 7 earlier would work version ddi direct3d 8 requires minimum ddi level 6 direct3d 9 requires minimum ddi level 7 however direct3d 10 runtime windows vista run older hardware drivers due significantly updated ddi requires unified feature set abandons use cap bits direct3d 10.1 introduces feature levels 10_0 10_1 allow use hardware features defined specified version direct3d api direct3d 11 adds level 11_0 10 level 9 subset direct3d 10 api designed run direct3d 9 hardware three feature levels 9_1 9_2 9_3 grouped common capabilities low med high-end video cards runtime directly uses direct3d 9 ddi provided wddm drivers feature level 11_1 introduced direct3d 11.1 2002 microsoft released version directx compatible microsoft .net framework thus allowing programmers take advantage directx functionality within .net applications using compatible languages managed c++ use c programming language api known managed directx mdx short claimed operate 98 performance underlying native directx apis december 2005 february 2006 april 2006 august 2006 microsoft released successive updates library culminating beta version called managed directx 2.0 managed directx 2.0 consolidated functionality previously scattered multiple assemblies single assembly thus simplifying dependencies software developers development version subsequently discontinued longer supported managed directx 2.0 library expired october 5 2006 gdc 2006 microsoft presented xna framework new managed version directx similar identical managed directx intended assist development games making easier integrate directx high-level shader language hlsl tools one package also supports execution managed code xbox 360 xna game studio express rtm made available december 11 2006 free download windows xp unlike directx runtime managed directx xna framework xbox 360 apis xinput xact etc shipped part windows developers expected redistribute runtime components along games applications microsoft product including latest xna releases provides directx 10 support .net framework approach directx managed languages use third-party libraries like alternatives directx family apis opengl successor vulkan metal mantle features comparable direct3d examples apis include sdl allegro openmax openml openal opencl fmod sfml etc many libraries cross-platform open codebases also alternative implementations aim provide api one wine furthermore developers reactos trying reimplement directx name reactx
node10:Wikipedia entry. Entry name: UnixWare. Entry content: unixware unixware unix operating system originally released univel jointly owned venture unix system laboratories usl novell taken novell via santa cruz operation sco went caldera systems caldera international sco group sold unxis xinuos unixware typically deployed server rather desktop binary distributions unixware available x86 architecture computers unixware primarily marketed server operating system svr4 effort merge sunos system v unix system laboratories usl formed univel partnership novell develop desktop version unix codenamed destiny destiny based unix system v release 4.2 kernel moolit toolkit used windowing system allowing user choose open look motif-like look feel run time order make system robust commodity desktop hardware veritas vxfs journaling file system used place ufs file system used svr4 networking support unixware included tcp/ip interoperability novell netware protocols ipx/spx former standard among unix users time development pc networking much commonly based netware destiny released 1992 unixware 1.0 intention unifying fragmented pc unix market behind single variant operating system system earlier reach corporate computing market microsoft windows nt observers period remarked unixware another flavor unix novell involvement marketing ploy significant influx technology os existed two editions personal edition included novell ipx networking tcp/ip advanced server edition tcp/ip server software personal edition limited two active users server edition included unlimited user license around 35,000 copies unixware 1.0 sold 1993 novell purchased usl merged usl univel new unix systems group 1994 novell released unixware 1.1 included tcp/ip personal advanced server editions motif 1.2 runtime libraries included cose compliance nuc netware unix client software included integration novell netware servers advanced merge application installed server personal editions allow running dos windows 3.1 applications novell later released bug-fix versions 1.1.1 1.1.2 1.1.3 finally 1.1.4 19 june 1995 unixware 2.0 based unix system v release 4.2mp kernel added support multiprocessing began shipping oems developers december 1994 consumer market march 1995 personal server editions supported two processor systems possibility buying extra processor upgrade licenses server edition supported multiprocessor systems included standard intel mp 1.1 smp machines corollary c-bus systems system supported netware odi network drivers effort increase number supported network interfaces new features release included posix threads library addition older ui threads library sco licensed unixware 1995 novell also announced project create supernos based netware 4.1 unixware 2.0 technologies future however never materialized instead netware 4.10 server linux offered caldera netware linux openlinux since 1998 novell open enterprise server finally came 2005 1995 santa cruz operation sco acquired unixware novell exact terms transaction disputed see sco vs novell courts subsequently determined novell retained ownership unix transfer made public sco announced would work towards merging unixware openserver svr3.2 based os first release unixware sco version 2.1 1996 release unixware 2.1 announced proposed unixware/openserver merger known project gemini available 1997 64-bit version unixware developed 1998 one controversial change adoption openserver like user licensing policy univel novell releases unixware allowed 2 users personal edition unlimited numbers users server edition unixware 2.1 server edition included license 5 users customers wanting users could buy 10 25 100 500 unlimited user license extensions sco released three updates unixware 2.1 unixware 2.1.1 released 1996 achieved unix 95 branding unixware 2.1.2 2.1.3 available 1998 largely bug fix releases 1998 compaq released package known integrity xc consisting single-system image cluster proliant servers version unixware 2.1 unixware nonstop clusters first results gemini project made available early 1998 unixware 7 sco named kernel version unix system v release 5 system largely based unixware 2.1 features driver compatibility openserver allowing use openserver network drivers system administration utilities openserver scoadmin replaced original unixware sysadm utility major new features unixware 7 included multi-path i/o large files file systems support large memory systems unixware 7 lacked xenix compatibility features ancestors licensing reasons avoid paying microsoft code included svr3.2 1999 sco released unixware 7.1 update increased number editions business 5-user department 25 user enterprise 50 user editions replaced earlier personal server editions webtop application tarantella inc. included 2000 sco released unixware 7.1.1 update simultaneously unixware nonstop clusters 7.1.1+ip single-system image cluster package released new package allowed commodity hardware used well proprietary compaq hardware supported earlier integrity xc product directly available sco 2 august 2000 santa cruz operation sco announced would sell server software services divisions well rights openserver unixware products caldera systems march 2001 caldera systems became caldera international cii sco purchase completed may 2001 remaining part santa cruz operation company tarantella division changed name tarantella inc. caldera international initial release unixware renamed openunix 8 release would unixware 7.1.2 caldera international renamed sco group august 2002 broadening product line include mobile products services later newly renamed sco group reverted previous unixware brand version release numbering releasing unixware 7.1.3 7.1.4 openunix releases made available openunix 8.1.2 ou812 never released sco group continued maintain unixware issues periodic maintenance updates support 2007 2011 sco group engaged series legal battles september 2007 sco group filed chapter 11 bankruptcy protection 11 april 2011 unxis bought sco group operating assets intellectual property rights approved bankruptcy court delaware sco group inc. renamed tsg group inc. sco operations inc. became tsg operations inc. august 2012 filed convert chapter 11 chapter 7 rights unixware well openserver acquired unxis 2011 june 2013 unxis renamed xinuos announced product availability sco unixware 7.1.4+ supporting physical virtual machines versions unixware included significant open source components including bind/x11/sendmail/dhcp/perl/tcl others later releases bundled numerous additional open source applications including apache samba mysql postgresql openssh mozilla software versions sco operating system distributions including unixware also extensive set open source packages available free download via sco skunkware site
node11:Wikipedia entry. Entry name: European_Middleware_Initiative. Entry content: european middleware initiative european middleware initiative emi computer software platform high performance distributed computing developed distributed directly emi project base grid middleware distributions used scientific research communities distributed computing infrastructures world especially europe south america asia emi supports broad scientific experiments initiatives worldwide lhc computing grid large hadron collider emi middleware cooperation among three general purpose grid platforms advanced resource connector glite unicore dcache storage software purpose emi distribution consolidate harmonize support original software platforms evolve extend redundant duplicate services resulting merging deprecated favour new services added satisfy user requirements specific consolidation needs standardizing developing common interfaces include adoption common structure accounting resource information exchange authentication authorization input development activities taken users infrastructures projects standardization initiatives changing technological innovations software products adapted necessary comply standard open-source guidelines facilitate integration mainstream operating system distributions cooperation futuregrid us distributed testbed clouds grids high-performance computing announced december 2011 january 2012 emi project formalized partnership imarine project create open data e-infrastructure fisheries management marine conservation 2008 emi software distribution provided middleware components support execution completion millions computational jobs handled 350 centers european grid infrastructure tens petabytes data transfers occurring storage systems centers emi middleware used wlcg infrastructure supports example search higgs boson god particle new types matter searches physicists lhc together research astronomy biology computational chemistry sciences common emi license though licenses used emi open-source product long history behind license apache bsd dcache products released dcache software license adopted affero general public license 1 january 2012 emi products components release grouped four categories areas computing data security infrastructure first release software composed 56 products packaged scientific linux 5 32 64bit second release also made 56 products available scientific linux 5 64bit scientific linux 6 64bit subset services also available debian 6 64bit planned updates third final release contains 61 products scientific linux 5 64bit 480 packages scientific linux 6 64bit 474 packages debian 6 233 packages linux distributions components supported scientific linux platforms debian emi releases two types major releases include components component releases related single product collection components may released update major release major releases delivered per year three planned major releases named european mountains full support updates released address issues code new features provided lasts 12 months standard updates updates released address issues code new features provided lasts 6 months security updates support updates targeting security vulnerabilities provided 6 months older versions emi products superseded newer versions end-of-life announcement made coincides end security updates support period may 2013 24 updates released emi 1 kebnekaise 13 emi 2 matterhorn 3 emi 3 monte bianco minor releases contain interface functional changes backwards-compatible current major release issued times per year revision releases available every week two weeks contain bug fixes emergency releases contain specific bug fixes typically security-related available need using emergency release procedures
node12:Wikipedia entry. Entry name: IA-32. Entry content: ia-32 ia-32 short intel architecture 32-bit sometimes also called i386 32-bit version x86 instruction set architecture designed intel first implemented 80386 microprocessor 1985 ia-32 first incarnation x86 supports 32-bit computing result ia-32 term may used metonym refer x86 versions support 32-bit computing within various programming language directives ia-32 still sometimes referred i386 architecture contexts certain iterations ia-32 isa sometimes labelled i486 i586 i686 referring instruction supersets offered 80486 p5 p6 microarchitectures respectively updates offered numerous additions alongside base ia-32 set i.e floating-point capabilities mmx extensions intel historically largest manufacturer ia-32 processors second biggest supplier amd 1990s via transmeta chip manufacturers also produced ia-32 compatible processors e.g winchip modern era intel still produces ia-32 processors intel quark microcontroller platform however since 2000s majority manufacturers intel included moved almost exclusively implementing cpus based 64-bit variant x86 x86-64 x86-64 specification offers legacy operating modes operate ia-32 isa backwards compatibility even given contemporary prevalence x86-64 2018 ia-32 protected mode versions many modern operating systems still maintained e.g microsoft windows ubuntu linux distribution spite ia-32 name causing potential confusion 64-bit evolution x86 originated amd would known ia-64 name instead belonging intel itanium architecture primary defining characteristic ia-32 availability 32-bit general-purpose processor registers example eax ebx 32-bit integer arithmetic logical operations 32-bit offsets within segment protected mode translation segmented addresses 32-bit linear addresses designers took opportunity make improvements well significant changes described
node13:Wikipedia entry. Entry name: Microsoft_Jet_Database_Engine. Entry content: microsoft jet database engine microsoft jet database engine also microsoft jet engine simply jet database engine several microsoft products built first version jet developed 1992 consisting three modules could used manipulate database jet stands joint engine technology microsoft access visual basic use used jet underlying database engine however superseded general use first microsoft desktop engine msde later sql server express larger database needs jet databases upgraded microsoft parlance up-sized microsoft flagship sql server database product however mean ms jet red database match ms sql server storage capacity 5 billion record ms jet red database compression encryption turned requires 1 terabyte disk storage space comprising hundreds *.mdb files acting partial table database jet part relational database management system rdbms allows manipulation relational databases offers single interface software use access microsoft databases provides support security referential integrity transaction processing indexing record page locking data replication later versions engine extended run sql queries store character data unicode format create database views allow bi-directional replication microsoft sql server three modules jet one native jet isam driver dynamic link library dll directly manipulate microsoft access database files mdb using indexed sequential access method isam another one modules contains isam drivers dlls allow access variety isam databases among xbase paradox btrieve foxpro depending version jet final module data access objects dao dll dao provides api allows programmers access jet databases using programming language jet allows multiple users access database concurrently prevent data corrupted invalidated multiple users try edit record page database jet employs locking policy single user modify database records items database user applied lock gives exclusive access record lock released jet versions version 4 page locking model used jet 4 record locking model employed microsoft databases organized data pages fixed-length 2 kb jet 4 4 kb jet 4 data structures data stored records variable length may take less one page page locking model works locking pages instead individual records though less resource-intensive also means user locks one record records page collaterally locked result user access collaterally locked records even though user accessing need locked jet 4 record locking model eliminates collateral locks every record use available two mechanisms microsoft uses locking pessimistic locking optimistic locking pessimistic locking record page locked immediately lock requested optimistic locking locking delayed edited record saved conflicts less likely occur optimistic locking since record locked short period time however optimistic locking one certain update succeed another user could lock record first pessimistic locking update guaranteed succeed lock obtained users must wait lock released order make changes lock conflicts either require user wait cause request fail usually timeout common pessimistic locking jet supports transaction processing database systems capability odbc systems one-level transaction processing several isam systems like paradox support transaction processing transaction series operations performed database must done together — known atomicity one acid atomicity consistency isolation durability concepts considered key transaction processing features database management system transaction processing work jet 3.0 programmer needed begin transaction manually perform operations needed performed transaction commit save transaction transaction committed changes made memory actually written disk transactions number advantages independent database updates one main advantages transactions abandoned problem occurs transaction called rolling back transaction rollback restores state database records precisely state transaction began transactions also permit state database remain consistent system failure occurs middle sequence updates required atomic chance updates end written database either succeed changes discarded database system restarts odbc in-memory policy transactions also allow many updates record occur entirely within memory one expensive disk write end implicit transactions supported jet 3.0 transactions started automatically last transaction committed database implicit transactions jet occurred sql dml statement issued however found negative performance impact 32-bit windows windows 95 windows 98 jet 3.5 microsoft removed implicit transactions sql dml statements made jet enforces entity integrity referential integrity jet default prevent change record breaks referential integrity jet databases instead use propagation constraints cascading updates cascading deletes maintain referential integrity jet also supports business rules also known constraints rules apply column enforce data might placed table column example rule might applied allow date entered date_logged column earlier current date time rule might applied forces people enter positive value numeric field access jet databases done per user-level user information kept separate system database access controlled object system instance table query jet 4 microsoft implemented functionality allows database administrators set security via sql commands create add alter drop user drop group commands subset ansi sql 92 standard also apply grant/revoke commands jet 2 released security could also set programmatically dao queries mechanisms jet uses retrieve data database defined microsoft qbe query example microsoft access sql window access basic data access objects dao language converted sql select statement query compiled — involves parsing query involves syntax checking determining columns query database table converted internal jet query object format tokenized organised tree like structure jet 3.0 onwards optimised using microsoft rushmore query optimisation technology query executed results passed back application user requested data jet passes data retrieved query dynaset set data dynamically linked back database instead query result stored temporary table data updated directly user dynaset allows user view update data contained dynaset thus university lecturer queries students received distinction assignment finds error student record would need update data dynaset would automatically update student database record without need send specific update query storing query results temporary table jet originally started 1992 underlying data access technology came microsoft internal database product development project code named cirrus cirrus developed pre-release version visual basic code used database engine microsoft access tony goodhew worked microsoft time says would reasonably accurate say stage jet name team assigned work db engine modules access rather component team vb visual basic 3.0 basically tear access graft onto vb 've jet/odbc problems vb 3.0 jet became componentised access 2.0 released access odbc developers used parts jet code produce odbc driver retrofit provided allowed visual basic 3.0 users use updated jet issued access 2.0 jet 2.0 released several dynamic linked libraries dlls utilised application software microsoft access database dlls windows libraries common code used one application—by keeping code one application uses common library applications use independently code maintenance reduced functionality applications increases less development effort jet 2.0 comprised three dlls jet dll data access objects dao dll several external isam dlls jet dll determined sort database accessing perform requested data source mdb file microsoft access format would directly read write data file data source external would call correct odbc driver perform request dao dll component programmers could use interface jet engine mainly used visual basic access basic programmers isam dlls set modules allowed jet access three isam based databases xbase paradox btrieve jet 2.0 replaced jet 2.1 used database structure different locking strategies making incompatible jet 2.0 jet 3.0 included many enhancements including new index structure reduced storage size time taken create indices highly duplicated removal read locks index pages new mechanism page reuse new compacting method compacting database resulted indices stored clustered-index format new page allocation mechanism improve jet read-ahead capabilities improved delete operations speeded processing multithreading three threads used perform read ahead write behind cache maintenance implicit transactions users instruct engine start manually commit transactions database new sort engine long values memos binary data types stored separate tables dynamic buffering whereby jet cache dynamically allocated start limit changed first first fifo buffer replacement policy least recently used lru buffer replacement policy jet 3.0 also allowed database replication jet 3.0 replaced jet 3.5 uses database structure different locking strategies making incompatible jet 3.0 jet 4.0 gained numerous additional features enhancements microsoft access versions access 2000 access 2010 included upsizing wizard could upsize upgrade jet database equivalent database sql server table structure data many attributes original database reports queries macros security handled tool meaning manual modifications might needed application heavily reliant jet features standalone version jet 4 database engine component microsoft data access components mdac included every version windows windows 2000 jet database engine 32-bit run natively 64-bit versions windows meant native 64-bit applications 64-bit versions sql server could access data stored mdb files odbc ole db means except intermediate 32-bit software running wow64 acted proxy 64-bit client version 2007 onwards access includes office-specific version jet initially called office access connectivity engine ace called access database engine however ms-access consultants vba developers specialize ms-access likely refer ace database engine engine backward-compatible previous versions jet engine could read write .mdb files earlier access versions introduced new default file format .accdb brought several improvements access including complex data types multivalue fields attachment data type history tracking memo fields also brought security changes encryption improvements enabled integration microsoft windows sharepoint services 3.0 microsoft office outlook 2007 engine microsoft access 2010 discontinued support access 1.0 access 2.0 lotus 1-2-3 paradox files 64-bit version access 2010 ace driver/provider introduced essence provides 64-bit version jet driver part windows operating system available redistributable engine microsoft access 2013 discontinued support access 95 access 97 xbase files also discontinued support replication version 1608 microsoft access 2016 restored support xbase files version 1703 introduced large number data type data access technology standpoint jet considered deprecated technology microsoft microsoft continues support ace part microsoft access microsoft provides jet drivers microsoft windows therefore third party software support jet databases almost exclusively found windows open source project attempts enable working jet databases platforms mdb tools much extended java port named jackcess
node14:Wikipedia entry. Entry name: Windows_API. Entry content: windows api windows api informally winapi microsoft core set application programming interfaces apis available microsoft windows operating systems name windows api collectively refers several different platform implementations often referred names example win32 api see versions section almost windows programs interact windows api windows nt line operating systems small number programs started early windows startup process use native api developer support available form software development kit microsoft windows sdk providing documentation tools needed build software based windows api associated windows interfaces windows api win32 focused mainly programming language c exposed functions data structures described language recent versions documentation however api may used programming language compiler assembler able handle well-defined low-level data structures along prescribed calling conventions calls callbacks similarly internal implementation api function developed several languages historically despite fact c object-oriented programming language windows api windows historically described object-oriented also many wrapper classes extensions microsoft others object-oriented languages make object-oriented structure explicit microsoft foundation class library mfc visual component library vcl gdi+ etc. instance windows 8 provides windows api winrt api implemented c++ object-oriented design functions provided windows api grouped eight categories internet explorer ie web browser also exposes many apis often used applications could considered part windows api ie included operating system since windows 95 osr2 provided web-related services applications since windows 98 specifically used provide classic windows multimedia api placed winmm.dll contains functions play sound files send receive midi messages access joysticks facilitate features so-called mci subsystem windows originates multimedia extensions available windows 3.0 separately integral part operating system since windows 3.1 time located mmsystem.dll apart part every windows version since windows 95 osr2 microsoft provided directx apis—a loosely related set graphics gaming services includes microsoft also provides several apis media encoding playback windows api designed mostly interaction operating system application communication among different windows applications microsoft developed series technologies alongside main windows api started dynamic data exchange dde superseded object linking embedding ole later component object model com automation objects activex controls .net framework always clear distinction technologies much overlap variety terms basically result grouping software mechanisms relate given aspect software development automation specifically relates exporting function application component application programming interface api controlled applications instead human users .net self-contained general methodology technology develop desktop web applications written variety just-in-time jit compiled languages windows.pas pascal/delphi unit contains windows-specific api declarations pascal equivalent windows.h used c. various wrappers developed microsoft took low level functions windows api allowed applications interact api abstract manner microsoft foundation class library mfc wrapped windows api functionality c++ classes thus allows object-oriented way interact api active template library atl template oriented wrapper com windows template library wtl developed extension atl intended smaller alternative mfc application frameworks windows least partly wrap windows api thus .net framework java likewise programming languages windows contain wrapper libraries windows api code pack microsoft .net framework .net wrapper library windows api windows api always exposed large part underlying structure windows systems programmers advantage giving much flexibility power applications also creates great responsibility applications handle various low-level sometimes tedious operations associated graphical user interface example beginning c programmer often write simple hello world first assignment working part program single printf line within main subroutine overhead linking standard i/o library also one line windows version still one working line code required many many lines overhead charles petzold wrote several books programming windows api said original hello world program windows 1.0 sdk bit scandal hello.c 150 lines long hello.rc resource script another 20 lines ... veteran programmers often curled horror laughter encountering windows hello-world program years various changes additions made windows systems windows api changed grew reflect windows api windows 1.0 supported fewer 450 function calls whereas modern versions windows api support thousands however general interface remained fairly consistent old windows 1.0 application still look familiar programmer used modern windows api microsoft made effort maintain backward compatibility achieve developing new versions windows microsoft sometimes implemented workarounds allow compatibility third-party software used prior version undocumented even inadvisable way raymond chen microsoft developer works windows api said could probably write months solely bad things apps get work often spite get particularly furious people accuse microsoft maliciously breaking applications os upgrades application failed run windows 95 took personal failure one largest changes windows api transition win16 shipped windows 3.1 older win32 windows nt windows 95 win32 originally introduced windows nt 3.1 win32s allowed use win32 subset windows 95 windows 95 widespread porting applications win32 began ease transition windows 95 developers outside inside microsoft complex scheme api thunks used could allow 32-bit code call 16-bit code win16 apis vice versa flat thunks allowed 32-bit code call 16-bit libraries scheme used extensively inside windows 95 libraries avoid porting whole os win32 one batch windows nt os pure 32-bit except parts compatibility 16-bit applications generic thunks available thunk win16 win32 windows 95 platform sdk shipped compiler could produce code needed thunks versions 64-bit windows also able run 32-bit applications via wow64 syswow64 folder located windows folder os drive contains several tools support 32-bit applications almost every new version microsoft windows introduced additions changes windows api name api however remained consistent different windows versions name changes kept limited major architectural platform changes windows microsoft eventually changed name current win32 api family windows api made catch-all term past future api versions wine project provides win32 api compatibility layer unix-like platforms linux kernel api programs written windows api reactos goes step aims implement full windows operating system working closely wine project promote code re-use compatibility doswin32 hx dos extender projects emulate windows api allow executing simple windows programs dos command line odin project emulate win32 os/2 superseding original win-os/2 emulation based microsoft code minor implementations include mewel zinc libraries intended implement subset win16 api dos see list platform-independent gui libraries windows interface source environment wise licensing program microsoft allowed developers recompile run windows-based applications unix macintosh platforms wise sdks based emulator windows api could run platforms efforts toward standardization included sun public windows interface pwi win16 see also sun windows application binary interface wabi willows software application programming interface windows apiw win16 win32 see also willows twin ecma-234 attempted standardize windows api bindingly develop software uses windows api compiler must able use microsoft-specific dlls listed com-objects outside win32 assume certain vtable layout compiler must either handle header files expose interior api function names supply files language c++ zortech later symantec digital mars watcom borland produced well known commercial compilers used often win16 win32s win32 supplied memory extenders allowing win32 programs run win16 microsoft redistributable win32s dll zortech compiler probably one first stable usable c++ compilers windows programming microsoft c++ compiler certain classes applications compiler system also able handle interface description language idl files collectively prerequisites compilers tools libraries headers known microsoft platform sdk time microsoft visual studio borland integrated development system integrated development environments ides could provide although sdk downloadable free separately entire ide suite microsoft windows sdk windows 7 .net framework 4 mingw cygwin projects also provide environment based gnu compiler collection gcc using stand-alone header file set make linking win32-specific dlls simple lcc-win32 c compiler maintained jacob navia freeware non-commercial use pelles c freeware c compiler maintained pelle orinius free pascal free software object pascal compiler supports windows api masm32 package mature project providing support windows api microsoft macro assembler masm using custom made converted headers libraries platform sdk flat assembler fasm allows building windows programs without using external linker even running linux windows specific compiler support also needed structured exception handling seh system serves two purposes provides substrate language-specific exception handling implemented kernel notifies applications exceptional conditions dereferencing invalid pointer stack overflow microsoft/borland c++ compilers ability use system soon introduced windows 95 nt however actual implementation undocumented reverse engineered wine project free compilers seh based pushing exception handler frames onto stack adding linked list stored thread local storage first field thread environment block exception thrown kernel base libraries unwind stack running handlers filters encountered eventually every exception unhandled application dealt default backstop handler pops windows common crash dialog
node15:Wikipedia entry. Entry name: NUbuntu. Entry content: nubuntu nubuntu network ubuntu project take existing ubuntu operating system livecd full installer remaster tools needed penetration testing servers networks main idea keep ubuntu ease use mix popular penetration testing tools besides usage network server testing nubuntu made desktop distribution advanced linux users nubuntu uses light window manager fluxbox includes used security programs linux wireshark nmap dsniff ettercap april 4 2010 official website closed explanation list previous current releases
node16:Wikipedia entry. Entry name: Common_Log_File_System. Entry content: common log file system common log file system clfs general-purpose logging subsystem accessible kernel-mode well user-mode applications building high-performance transaction logs introduced windows server 2003 r2 included later windows operating systems clfs used data logging well event logging clfs used txf txr store transactional state changes commit transaction binary log file created clfs viewed integrated windows tool job clfs like transactional logging system record series steps required action either played back accurately future commit transaction secondary storage undone required clfs first marshals logs records in-memory buffers writes log-files secondary storage stable media clfs terminology permanent persistence data flushed stable media controlled built-in policies clfs client application override force flush clfs allows customizable log formats expansion truncation logs according defined policies well simultaneous use multiple client applications clfs able store log files anywhere file system clfs defines device driver interface ddi via physical storage system specific drivers plug clfs api clfs driver implements aries recovery algorithm algorithms supported using custom drivers clfs supports dedicated logs well multiplexed logs dedicated log contains single stream log records whereas multiplexed log contain multiple streams stream different application even though multiplexed log multiple streams logs flushed streams sequentially single batch clfs allocate space set log records ahead-of-time logs actually generated make sure operation fail due lack storage space log record clfs stream first placed log i/o block buffer system memory periodically blocks flushed stable storage devices storage device log contains set containers allocated contiguously containing multiple log i/o blocks new log records appended present set record identified log sequence number lsn increasing 32-bit sequence number lsn metadata stored record header lsn encodes identifier container offset record identifier record information used access log record subsequently however container identifiers logical identifiers must mapped physical containers mapping done clfs
node17:Wikipedia entry. Entry name: Chntpw. Entry content: chntpw chntpw software utility resetting blanking local passwords used windows nt 2000 xp vista 7 8 8.1 10 editing sam database windows stores password hashes two ways use program via standalone chntpw utility installed package available modern linux distributions e.g ubuntu via bootable cd/usb image also floppy release support dropped chntpw support fully encrypted ntfs partitions possible exceptions encrypted partitions readable linux e.g luks usernames containing unicode characters active directory passwords exception local users systems members ad domain password changing feature also n't fully functional either password blanking highly recommended fact latter versions windows possible option furthermore bootable image might problems controllers requiring 3rd party drivers cases use stand-alone program full-featured linux environment recommended codice_1 utility included many various linux distributions including ones focused security software 10th anniversary author changed license non-commercial one gnu general public license gpl version 2
node18:Wikipedia entry. Entry name: Operating_system. Entry content: operating system operating system os system software manages computer hardware software resources provides common services computer programs time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources hardware functions input output memory allocation operating system acts intermediary programs computer hardware although application code usually executed directly hardware frequently makes system calls os function interrupted operating systems found many devices contain computer cellular phones video game consoles web servers supercomputers dominant desktop operating system microsoft windows market share around 82.74 macos apple inc. second place 13.23 varieties linux collectively third place 1.57 mobile smartphone tablet combined sector use 2017 70 google android according third quarter 2016 data android smartphones dominant 87.5 percent growth rate 10.3 percent per year followed apple ios 12.1 percent per year decrease market share 5.2 percent operating systems amount 0.3 percent linux distributions dominant server supercomputing sectors specialized classes operating systems embedded real-time systems exist many applications single-tasking system run one program time multi-tasking operating system allows one program running concurrency achieved time-sharing available processor time divided multiple processes processes interrupted repeatedly time slices task-scheduling subsystem operating system multi-tasking may characterized preemptive co-operative types preemptive multitasking operating system slices cpu time dedicates slot programs unix-like operating systems solaris linux—as well non-unix-like amigaos—support preemptive multitasking cooperative multitasking achieved relying process provide time processes defined manner 16-bit versions microsoft windows used cooperative multi-tasking 32-bit versions windows nt win9x used preemptive multi-tasking single-user operating systems facilities distinguish users may allow multiple programs run tandem multi-user operating system extends basic concept multi-tasking facilities identify processes resources disk space belonging multiple users system permits multiple users interact system time time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources multiple users distributed operating system manages group distinct computers makes appear single computer development networked computers could linked communicate gave rise distributed computing distributed computations carried one machine computers group work cooperation form distributed system os distributed cloud computing context templating refers creating single virtual machine image guest operating system saving tool multiple running virtual machines technique used virtualization cloud computing management common large server warehouses embedded operating systems designed used embedded computer systems designed operate small machines like pdas less autonomy able operate limited number resources compact extremely efficient design windows ce minix 3 examples embedded operating systems real-time operating system operating system guarantees process events data specific moment time real-time operating system may single- multi-tasking multitasking uses specialized scheduling algorithms deterministic nature behavior achieved event-driven system switches tasks based priorities external events time-sharing operating systems switch tasks based clock interrupts library operating system one services typical operating system provides networking provided form libraries composed application configuration code construct unikernel specialized single address space machine image deployed cloud embedded environments early computers built perform series single tasks like calculator basic operating system features developed 1950s resident monitor functions could automatically run different programs succession speed processing operating systems exist modern complex forms early 1960s hardware features added enabled use runtime libraries interrupts parallel processing personal computers became popular 1980s operating systems made similar concept used larger computers 1940s earliest electronic digital systems operating systems electronic systems time programmed rows mechanical switches jumper wires plug boards special-purpose systems example generated ballistics tables military controlled printing payroll checks data punched paper cards programmable general purpose computers invented machine languages consisting strings binary digits 0 1 punched paper tape introduced sped programming process stern 1981 early 1950s computer could execute one program time user sole use computer limited period time would arrive scheduled time program data punched paper cards punched tape program would loaded machine machine would set work program completed crashed programs could generally debugged via front panel using toggle switches panel lights said alan turing master early manchester mark 1 machine already deriving primitive conception operating system principles universal turing machine later machines came libraries programs would linked user program assist operations input output generating computer code human-readable symbolic code genesis modern-day operating system however machines still ran single job time cambridge university england job queue one time washing line clothes line tapes hung different colored clothes-pegs indicate job-priority improvement atlas supervisor introduced manchester atlas commissioned 1962 considered many first recognisable modern operating system brinch hansen described significant breakthrough history operating systems 1950s many major features pioneered field operating systems mainframe computers including batch processing input/output interrupt buffering multitasking spooling runtime libraries link-loading programs sorting records files features included included application software option application programmers rather separate operating system used applications 1959 share operating system released integrated utility ibm 704 later 709 7090 mainframes although quickly supplanted ibsys/ibjob 709 7090 7094 1960s ibm os/360 introduced concept single os spanning entire product line crucial success system/360 machines ibm current mainframe operating systems distant descendants original system applications written os/360 still run modern machines os/360 also pioneered concept operating system keeps track system resources used including program data space allocation main memory file space secondary storage file locking update process terminated reason resources re-claimed operating system alternative cp-67 system s/360-67 started whole line ibm operating systems focused concept virtual machines operating systems used ibm s/360 series mainframes included systems developed ibm cos/360 compatibility operating system dos/360 disk operating system tss/360 time sharing system tos/360 tape operating system bos/360 basic operating system acp airline control program well non-ibm systems mts michigan terminal system music multi-user system interactive computing orvyl stanford timesharing system control data corporation developed scope operating system 1960s batch processing cooperation university minnesota kronos later nos operating systems developed 1970s supported simultaneous batch timesharing use like many commercial timesharing systems interface extension dartmouth basic operating systems one pioneering efforts timesharing programming languages late 1970s control data university illinois developed plato operating system used plasma panel displays long-distance time sharing networks plato remarkably innovative time featuring real-time chat multi-user graphical games 1961 burroughs corporation introduced b5000 mcp master control program operating system b5000 stack machine designed exclusively support high-level languages machine language assembler indeed mcp first os written exclusively high-level language espol dialect algol mcp also introduced many ground-breaking innovations first commercial implementation virtual memory development as/400 ibm made approach burroughs license mcp run as/400 hardware proposal declined burroughs management protect existing hardware production mcp still use today unisys clearpath/mcp line computers univac first commercial computer manufacturer produced series exec operating systems like early main-frame systems batch-oriented system managed magnetic drums disks card readers line printers 1970s univac produced real-time basic rtb system support large-scale time sharing also patterned dartmouth bc system general electric mit developed general electric comprehensive operating supervisor gecos introduced concept ringed security privilege levels acquisition honeywell renamed general comprehensive operating system gcos digital equipment corporation developed many operating systems various computer lines including tops-10 tops-20 time sharing systems 36-bit pdp-10 class systems widespread use unix tops-10 particularly popular system universities early arpanet community rt-11 single-user real-time os pdp-11 class minicomputer rsx-11 corresponding multi-user os late 1960s late 1970s several hardware capabilities evolved allowed similar ported software run one system early systems utilized microprogramming implement features systems order permit different underlying computer architectures appear others series fact 360s 360/40 except 360/165 360/168 microprogrammed implementations enormous investment software systems made since 1960s caused original computer manufacturers continue develop compatible operating systems along hardware notable supported mainframe operating systems include first microcomputers capacity need elaborate operating systems developed mainframes minis minimalistic operating systems developed often loaded rom known monitors one notable early disk operating system cp/m supported many early microcomputers closely imitated microsoft ms-dos became widely popular operating system chosen ibm pc ibm version called ibm dos pc dos 1980s apple computer inc. apple inc. abandoned popular apple ii series microcomputers introduce apple macintosh computer innovative graphical user interface gui mac os introduction intel 80386 cpu chip october 1985 32-bit architecture paging capabilities provided personal computers ability run multitasking operating systems like earlier minicomputers mainframes microsoft responded progress hiring dave cutler developed vms operating system digital equipment corporation would lead development windows nt operating system continues serve basis microsoft operating systems line steve jobs co-founder apple inc. started next computer inc. developed nextstep operating system nextstep would later acquired apple inc. used along code freebsd core mac os x macos latest name change gnu project started activist programmer richard stallman goal creating complete free software replacement proprietary unix operating system project highly successful duplicating functionality various parts unix development gnu hurd kernel proved unproductive 1991 finnish computer science student linus torvalds cooperation volunteers collaborating internet released first version linux kernel soon merged gnu user space components system software form complete operating system since combination two major components usually referred simply linux software industry naming convention stallman free software foundation remain opposed preferring name gnu/linux berkeley software distribution known bsd unix derivative distributed university california berkeley starting 1970s freely distributed ported many minicomputers eventually also gained following use pcs mainly freebsd netbsd openbsd unix originally written assembly language ken thompson wrote b mainly based bcpl based experience multics project b replaced c unix rewritten c developed large complex family inter-related operating systems influential every modern operating system see history unix-like family diverse group operating systems several major sub-categories including system v bsd linux name unix trademark open group licenses use operating system shown conform definitions unix-like commonly used refer large set operating systems resemble original unix unix-like systems run wide variety computer architectures used heavily servers business well workstations academic engineering environments free unix variants linux bsd popular areas four operating systems certified open group holder unix trademark unix hp hp-ux ibm aix descendants original system v unix designed run respective vendor hardware contrast sun microsystems solaris run multiple types hardware including x86 sparc servers pcs apple macos replacement apple earlier non-unix mac os hybrid kernel-based bsd variant derived nextstep mach freebsd unix interoperability sought establishing posix standard posix standard applied operating system although originally created various unix variants subgroup unix family berkeley software distribution family includes freebsd netbsd openbsd operating systems commonly found webservers although also function personal computer os internet owes much existence bsd many protocols commonly used computers connect send receive data network widely implemented refined bsd world wide web also first demonstrated number computers running os based bsd called nextstep 1974 university california berkeley installed first unix system time students staff computer science department began adding new programs make things easier text editors berkeley received new vax computers 1978 unix installed school undergraduates modified unix even order take advantage computer hardware possibilities defense advanced research projects agency us department defense took interest decided fund project many schools corporations government organizations took notice started use berkeley version unix instead official one distributed steve jobs upon leaving apple inc. 1985 formed next inc. company manufactured high-end computers running variation bsd called nextstep one computers used tim berners-lee first webserver create world wide web developers like keith bostic encouraged project replace non-free code originated bell labs done however sued two years legal disputes bsd project spawned number free derivatives netbsd freebsd 1993 openbsd netbsd 1995 macos formerly mac os x later os x line open core graphical operating systems developed marketed sold apple inc. latest pre-loaded currently shipping macintosh computers macos successor original classic mac os apple primary operating system since 1984 unlike predecessor macos unix operating system built technology developed next second half 1980s apple purchased company early 1997 operating system first released 1999 mac os x server 1.0 followed march 2001 client version mac os x v10.0 cheetah since six distinct client server editions macos released two merged os x 10.7 lion prior merging macos server edition macos server architecturally identical desktop counterpart usually ran apple line macintosh server hardware macos server included work group management administration software tools provide simplified access key network services including mail transfer agent samba server ldap server domain name server others mac os x v10.7 lion server aspects mac os x server integrated client version product re-branded os x dropping mac name server tools offered application linux kernel originated 1991 project linus torvalds university student finland posted information project newsgroup computer students programmers received support assistance volunteers succeeded creating complete functional kernel linux unix-like developed without unix code unlike bsd variants open license model linux kernel code available study modification resulted use wide range computing machinery supercomputers smart-watches although estimates suggest linux used 1.82 desktop laptop pcs widely adopted use servers embedded systems cell phones linux superseded unix many platforms used supercomputers including top 385 many computers also green500 different order linux runs top 10 linux also commonly used small energy-efficient computers smartphones smartwatches linux kernel used popular distributions red hat debian ubuntu linux mint google android chrome os chromium os microsoft windows family proprietary operating systems designed microsoft corporation primarily targeted intel architecture based computers estimated 88.9 percent total usage share web connected computers latest version windows 10 2011 windows 7 overtook windows xp common version use microsoft windows first released 1985 operating environment running top ms-dos standard operating system shipped intel architecture personal computers time 1995 windows 95 released used ms-dos bootstrap backwards compatibility win9x could run real-mode ms-dos 16-bit windows 3.x drivers windows released 2000 last version win9x family later versions based windows nt kernel current client versions windows run ia-32 x86-64 32-bit arm microprocessors addition itanium still supported older server version windows server 2008 r2 past windows nt supported additional architectures server editions windows widely used recent years microsoft expended significant capital effort promote use windows server operating system however windows usage servers widespread personal computers windows competes linux bsd server market share reactos windows-alternative operating system developed principles windows without using microsoft code many operating systems significant day longer amigaos os/2 ibm microsoft classic mac os non-unix precursor apple macos beos xts-300 risc os morphos haiku baremetal freemint still used niche markets continue developed minority platforms enthusiast communities specialist applications openvms formerly dec still active development hewlett-packard yet operating systems used almost exclusively academia operating systems education research operating system concepts typical example system fulfills roles minix example singularity used purely research another example oberon system designed eth zürich niklaus wirth jürg gutknecht group students former computer systems institute 1980s used mainly research teaching daily work wirth group operating systems failed win significant market share introduced innovations influenced mainstream operating systems least bell labs plan 9 components operating system exist order make different parts computer work together user software needs go operating system order use hardware whether simple mouse keyboard complex internet component aid firmware device drivers kernel provides basic level control computer hardware devices manages memory access programs ram determines programs get access hardware resources sets resets cpu operating states optimal operation times organizes data long-term non-volatile storage file systems media disks tapes flash memory etc operating system provides interface application program computer hardware application program interact hardware obeying rules procedures programmed operating system operating system also set services simplify development execution application programs executing application program involves creation process operating system kernel assigns memory space resources establishes priority process multi-tasking systems loads program binary code memory initiates execution application program interacts user hardware devices interrupts central operating systems provide efficient way operating system interact react environment alternative operating system watch various sources input events polling require action found older systems small stacks 50 60 bytes unusual modern systems large stacks interrupt-based programming directly supported modern cpus interrupts provide computer way automatically saving local register contexts running specific code response events even basic computers support hardware interrupts allow programmer specify code may run event takes place interrupt received computer hardware automatically suspends whatever program currently running saves status runs computer code previously associated interrupt analogous placing bookmark book response phone call modern operating systems interrupts handled operating system kernel interrupts may come either computer hardware running program hardware device triggers interrupt operating system kernel decides deal event generally running processing code amount code run depends priority interrupt example person usually responds smoke detector alarm answering phone processing hardware interrupts task usually delegated software called device driver may part operating system kernel part another program device drivers may relay information running program various means program may also trigger interrupt operating system program wishes access hardware example may interrupt operating system kernel causes control passed back kernel kernel processes request program wishes additional resources wishes shed resources memory triggers interrupt get kernel attention modern microprocessors cpu mpu support multiple modes operation cpus capability offer least two modes user mode supervisor mode general terms supervisor mode operation allows unrestricted access machine resources including mpu instructions user mode operation sets limits instruction use typically disallows direct access machine resources cpus might modes similar user mode well virtual modes order emulate older processor types 16-bit processors 32-bit one 32-bit processors 64-bit one power-on reset system begins supervisor mode operating system kernel loaded started boundary user mode supervisor mode also known kernel mode established supervisor mode used kernel low level tasks need unrestricted access hardware controlling memory accessed communicating devices disk drives video display devices user mode contrast used almost everything else application programs word processors database managers operate within user mode access machine resources turning control kernel process causes switch supervisor mode typically transfer control kernel achieved executing software interrupt instruction motorola 68000 codice_1 instruction software interrupt causes microprocessor switch user mode supervisor mode begin executing code allows kernel take control user mode programs usually access restricted set microprocessor instructions generally execute instructions could potentially cause disruption system operation supervisor mode instruction execution restrictions typically removed allowing kernel unrestricted access machine resources term user mode resource generally refers one cpu registers contain information running program n't allowed alter attempts alter resources generally causes switch supervisor mode operating system deal illegal operation program attempting example forcibly terminating killing program among things multiprogramming operating system kernel must responsible managing system memory currently use programs ensures program interfere memory already use another program since programs time share program must independent access memory cooperative memory management used many early operating systems assumes programs make voluntary use kernel memory manager exceed allocated memory system memory management almost never seen since programs often contain bugs cause exceed allocated memory program fails may cause memory used one programs affected overwritten malicious programs viruses may purposefully alter another program memory may affect operation operating system cooperative memory management takes one misbehaved program crash system memory protection enables kernel limit process access computer memory various methods memory protection exist including memory segmentation paging methods require level hardware support 80286 mmu n't exist computers segmentation paging certain protected mode registers specify cpu memory address allow running program access attempts access addresses trigger interrupt cause cpu re-enter supervisor mode placing kernel charge called segmentation violation seg-v short since difficult assign meaningful result operation usually sign misbehaving program kernel generally resorts terminating offending program reports error windows versions 3.1 level memory protection programs could easily circumvent need use general protection fault would produced indicating segmentation violation occurred however system would often crash anyway use virtual memory addressing paging segmentation means kernel choose memory program may use given time allowing operating system use memory locations multiple tasks program tries access memory n't current range accessible memory nonetheless allocated kernel interrupted way would program exceed allocated memory see section memory management unix kind interrupt referred page fault kernel detects page fault generally adjusts virtual memory range program triggered granting access memory requested gives kernel discretionary power particular application memory stored even whether actually allocated yet modern operating systems memory accessed less frequently temporarily stored disk media make space available use programs called swapping area memory used multiple programs memory area contains swapped exchanged demand virtual memory provides programmer user perception much larger amount ram computer really multitasking refers running multiple independent computer programs computer giving appearance performing tasks time since computers one two things one time generally done via time-sharing means program uses share computer time execute operating system kernel contains scheduling program determines much time process spends executing order execution control passed programs control passed process kernel allows program access cpu memory later control returned kernel mechanism another program may allowed use cpu so-called passing control kernel applications called context switch early model governed allocation time programs called cooperative multitasking model control passed program kernel may execute long wants explicitly returning control kernel means malicious malfunctioning program may prevent programs using cpu hang entire system enters infinite loop modern operating systems extend concepts application preemption device drivers kernel code operating system preemptive control internal run-times well philosophy governing preemptive multitasking ensuring programs given regular time cpu implies programs must limited much time allowed spend cpu without interrupted accomplish modern operating system kernels make use timed interrupt protected mode timer set kernel triggers return supervisor mode specified time elapsed see sections interrupts dual mode operation many single user operating systems cooperative multitasking perfectly adequate home computers generally run small number well tested programs amigaos exception preemptive multitasking first version windows nt first version microsoft windows enforced preemptive multitasking n't reach home user market windows xp since windows nt targeted professionals access data stored disks central feature operating systems computers store data disks using files structured specific ways order allow faster access higher reliability make better use drive available space specific way files stored disk called file system enables files names attributes also allows stored hierarchy directories folders arranged directory tree early operating systems generally supported single type disk drive one kind file system early file systems limited capacity speed kinds file names directory structures could use limitations often reflected limitations operating systems designed making difficult operating system support one file system many simpler operating systems support limited range options accessing storage systems operating systems like unix linux support technology known virtual file system vfs operating system unix supports wide array storage devices regardless design file systems allowing accessed common application programming interface api makes unnecessary programs knowledge device accessing vfs allows operating system provide programs access unlimited number devices infinite variety file systems installed use specific device drivers file system drivers connected storage device hard drive accessed device driver device driver understands specific language drive able translate language standard language used operating system access disk drives unix language block devices kernel appropriate device driver place access contents disk drive raw format may contain one file systems file system driver used translate commands used access specific file system standard set commands operating system use talk file systems programs deal file systems basis filenames directories/folders contained within hierarchical structure create delete open close files well gather various information including access permissions size free space creation modification dates various differences file systems make supporting file systems difficult allowed characters file names case sensitivity presence various kinds file attributes makes implementation single interface every file system daunting task operating systems tend recommend using support natively file systems specifically designed example ntfs windows ext3 reiserfs linux however practice third party drivers usually available give support widely used file systems general-purpose operating systems example ntfs available linux ntfs-3g ext2/3 reiserfs available windows third-party software support file systems highly varied among modern operating systems although several common file systems almost operating systems include support drivers operating systems vary file system support disk formats may installed windows file system usually limited application certain media example cds must use iso 9660 udf windows vista ntfs file system operating system installed possible install linux onto many types file systems unlike operating systems linux unix allow file system used regardless media stored whether hard drive disc cd dvd ... usb flash drive even contained within file located another file system device driver specific type computer software developed allow interaction hardware devices typically constitutes interface communicating device specific computer bus communications subsystem hardware connected providing commands and/or receiving data device end requisite interfaces operating system software applications specialized hardware-dependent computer program also operating system specific enables another program typically operating system applications software package computer program running operating system kernel interact transparently hardware device usually provides requisite interrupt handling necessary necessary asynchronous time-dependent hardware interfacing needs key design goal device drivers abstraction every model hardware even within class device different newer models also released manufacturers provide reliable better performance newer models often controlled differently computers operating systems expected know control every device future solve problem operating systems essentially dictate every type device controlled function device driver translate operating system mandated function calls device specific calls theory new device controlled new manner function correctly suitable driver available new driver ensures device appears operate usual operating system point view versions windows vista versions linux 2.6 driver execution co-operative meaning driver entered infinite loop would freeze system recent revisions operating systems incorporate kernel preemption kernel interrupts driver give tasks separates process receives response device driver gives tasks currently operating systems support variety networking protocols hardware applications using means computers running dissimilar operating systems participate common network sharing resources computing files printers scanners using either wired wireless connections networks essentially allow computer operating system access resources remote computer support functions could resources connected directly local computer includes everything simple communication using networked file systems even sharing another computer graphics sound hardware network services allow resources computer accessed transparently ssh allows networked users direct access computer command line interface client/server networking allows program computer called client connect via network another computer called server servers offer host various services network computers users services usually provided ports numbered access points beyond server ip address port number usually associated maximum one running program responsible handling requests port daemon user program turn access local hardware resources computer passing requests operating system kernel many operating systems support one vendor-specific open networking protocols well example sna ibm systems decnet systems digital equipment corporation microsoft-specific protocols smb windows specific protocols specific tasks may also supported nfs file access protocols like esound esd easily extended network provide sound local applications remote system sound hardware computer secure depends number technologies working properly modern operating system provides access number resources available software running system external devices like networks via kernel operating system must capable distinguishing requests allowed processed others processed systems may simply distinguish privileged non-privileged systems commonly form requester identity user name establish identity may process authentication often username must quoted username may password methods authentication magnetic cards biometric data might used instead cases especially connections network resources may accessed authentication reading files network share also covered concept requester identity authorization particular services resources accessible requester logged system tied either requester user account variously configured groups users requester belongs addition allow disallow model security system high level security also offers auditing options would allow tracking requests access resources reading file internal security security already running program possible possibly harmful requests must carried interrupts operating system kernel programs directly access hardware resources secured external security involves request outside computer login connected console kind network connection external requests often passed device drivers operating system kernel passed onto applications carried directly security operating systems long concern highly sensitive data held computers commercial military nature united states government department defense dod created trusted computer system evaluation criteria tcsec standard sets basic requirements assessing effectiveness security became vital importance operating system makers tcsec used evaluate classify select trusted operating systems considered processing storage retrieval sensitive classified information network services include offerings file sharing print services email web sites file transfer protocols ftp compromised security front line security hardware devices known firewalls intrusion detection/prevention systems operating system level number software firewalls available well intrusion detection/prevention systems modern operating systems include software firewall enabled default software firewall configured allow deny network traffic service application running operating system therefore one install running insecure service telnet ftp threatened security breach firewall would deny traffic trying connect service port alternative strategy sandbox strategy available systems meet popek goldberg virtualization requirements operating system running user programs native code instead either emulates processor provides host p-code based system java internal security especially relevant multi-user systems allows user system private files users tamper read internal security also vital auditing use since program potentially bypass operating system inclusive bypassing auditing every computer operated individual requires user interface user interface usually referred shell essential human interaction supported user interface views directory structure requests services operating system acquire data input hardware devices keyboard mouse credit card reader requests operating system services display prompts status messages output hardware devices video monitor printer two common forms user interface historically command-line interface computer commands typed line-by-line graphical user interface visual environment commonly wimp present modern computer systems support graphical user interfaces gui often include computer systems original implementation classic mac os gui integrated kernel technically graphical user interface operating system service incorporating support one operating system kernel allow gui responsive reducing number context switches required gui perform output functions operating systems modular separating graphics subsystem kernel operating system 1980s unix vms many others operating systems built way linux macos also built way modern releases microsoft windows windows vista implement graphics subsystem mostly user-space however graphics drawing routines versions windows nt 4.0 windows server 2003 exist mostly kernel space windows 9x little distinction interface kernel many computer operating systems allow user install create user interface desire x window system conjunction gnome kde plasma 5 commonly found setup unix unix-like bsd linux solaris systems number windows shell replacements released microsoft windows offer alternatives included windows shell shell separated windows numerous unix-based guis existed time derived x11 competition among various vendors unix hp ibm sun led much fragmentation though effort standardize 1990s cose cde failed various reasons eventually eclipsed widespread adoption gnome k desktop environment prior free software-based toolkits desktop environments motif prevalent toolkit/desktop combination basis upon cde developed graphical user interfaces evolve time example windows modified user interface almost every time new major version windows released mac os gui changed dramatically introduction mac os x 1999 real-time operating system rtos operating system intended applications fixed deadlines real-time computing applications include small embedded systems automobile engine controllers industrial robots spacecraft industrial control large-scale computing systems early example large-scale real-time operating system transaction processing facility developed american airlines ibm sabre airline reservations system embedded systems fixed deadlines use real-time operating system vxworks pikeos ecos qnx montavista linux rtlinux windows ce real-time operating system shares similar apis desktop windows shares none desktop windows codebase symbian os also rtos kernel eka2 starting version 8.0b embedded systems use operating systems palm os bsd linux although operating systems support real-time computing operating system development one complicated activities computing hobbyist may engage hobby operating system may classified one whose code directly derived existing operating system users active developers cases hobby development support homebrew computing device example simple single-board computer powered 6502 microprocessor development may architecture already widespread use operating system development may come entirely new concepts may commence modeling existing operating system either case hobbyist his/her developer may interact small sometimes unstructured group individuals like interests examples hobby operating system include syllable templeos application software generally written use specific operating system sometimes even specific hardware porting application run another os functionality required application may implemented differently os names functions meaning arguments etc requiring application adapted changed otherwise maintained unix first operating system written assembly language making portable systems different native pdp-11 cost supporting operating systems diversity avoided instead writing applications software platforms java qt abstractions already borne cost adaptation specific operating systems system libraries another approach operating system vendors adopt standards example posix os abstraction layers provide commonalities reduce porting costs
node19:Wikipedia entry. Entry name: Object_code. Entry content: object code computing object code object module product compiler general sense object code sequence statements instructions computer language usually machine code language i.e. binary intermediate language register transfer language rtl term indicates code goal result compiling process early sources referring source code subject program object files turn linked form executable file library file order used object code must either placed executable file library file object file object code portion machine code yet linked complete program machine code one particular library module make completed product may also contain placeholders offsets found machine code completed program linker use connect everything together whereas machine code binary code executed directly cpu object code jumps partially parameterized linker fill assembler used convert assembly code machine code object code linker links several object library files generate executable assemblers also assemble directly machine code executable files without object intermediary step
node20:Wikipedia entry. Entry name: Cocoa_(API). Entry content: cocoa api
node21:Wikipedia entry. Entry name: Intuition_(Amiga). Entry content: intuition amiga intuition native windowing system user interface ui engine amigaos developed almost entirely rj mical intuition confused workbench amigaos spatial file manager relies intuition handling windows input events intuition internal widget graphics system implemented primarily application-managed graphics library systems following xerox design done rather separate task maintains state standard ui elements independently application makes responsive ui gadgets live even application busy intuition task driven user events mouse keyboard input devices also arbitrates collisions mouse pointer icons control animated icons like guis day amiga intuition followed xerox lead anteceding solutions pragmatically command line interface also included extended functionality platform later releases added improvements like support high-color workbench screens 3d aspect replacement desktop file managers also made available directory opus magellan scalos interface initial releases used blue orange white black palettes intentional – time cheap high-quality video monitors commodore tested output worst televisions could find goal obtaining best possible contrast worst-case conditions due limitations intuition basic widget set developers adopted third-party gui toolkits magic user interface mui reaction object oriented ui engines driven classes graphic objects functions new standard gadgets animated buttons true-color icons etc offered developers standardized attractive interfaces mui similar systems abandoned separation user interface application specified gadgets displayed intuition task actually managed gadgets applications even busy modern day successors workbench environment include ambient morphos scalos workbench amigaos 4 wanderer aros brief article ambient descriptions mui icons menus gadgets aps.fr images zune stay main aros site new object-oriented toolkit amiga-like platforms amigaos morphos aros feelin introduced 2005 makes extensive use xml guidelines uses memory management system memory-pools system shares embedded os semaphores feelin also features non-centralized id allocation system crash-free object invocation mechanism advanced logging system details images feelin found website stewart alsop ii said 1988 intuition among several guis already knocked market apple ibm/microsoft others stating slapped together six months ... lack forethought vision shows criticized intuition drive letters lack network support hundreds small features
node22:Wikipedia entry. Entry name: SystemRescueCD. Entry content: systemrescuecd systemrescuecd linux distribution x86 64 previously x86 computers primary purpose systemrescuecd repair un-bootable otherwise damaged computer systems system crash systemrescuecd intended used permanent operating system runs live cd usb flash drive type hard drive designed team led françois dupoux based arch linux starting version 6.0 provides x86-64 images based arch linux systemd init system increased size iso image longer fits one standard 700 mib cd requires either one dvd non-standard high-capacity cd 100-min writable cd using technique called overburning bootable media like usb flash drive systemrescuecd capable graphics using linux framebuffer option tools gparted uses version 4.19.20 linux kernel options connecting internet adsl modem ethernet graphical web browsers mozilla firefox systemrescuecd many features including cd also boot customized dvd almost 4.6 gb free space backed-up files makes good storing information needed hard drive formatting burn dvd one must burn image file first add separate files folders affect general way dvd works dvd used insert files hard drive using midnight commander
node23:Wikipedia entry. Entry name: TIM-600. Entry content: tim-600 tim-600 important pc computer system series tim microcomputers mihajlo pupin institute-belgrade developed 1987-1988 see ref.lit 1 2 6 based intel microprocessor types 80386 80387 word-length 32 bits basic cycle time 20 mhz operating system unix v.3 ref.lit. 3 6 computer system tim-600 exposed munich international computer exhibition september 1988 fig.1 tim designers tim-600 architecture based three system buses 32 16 8-bits respectively cpu performs 5,000.000 simple operations per second primary memory ram 8 x 2 mb capacity max eight tim terminals equipment units max connected rs-232c centronics types interface used line printers also possibilities connections two hard disks well magnetic cassettes diskettes tim-600 uses programming languages c++ fortran cobol basic pascal data base management performed informix oracle software ref.lit 4 5 6 computer system tim-600 used business data processing many offices serbia example public health scientific organizations process automation industrial production road traffic control banks military government services etc
node24:Wikipedia entry. Entry name: Gamin. Entry content: gamin gamin monitoring system files directories independently implements subset fam file alteration monitor running service allows detection modifications file directory gam_server functions daemon gamin word gamin french also female form gamine refers boy gamin project built earlier project called marmot french means child brat linux gamin uses inotify dnotify monitor filesystem activity freebsd gamin uses kqueue/kevent native freebsd kernel event notification mechanism case kqueue one major drawback compared inotify inotify filename-based monitoring facility kqueue uses file descriptors identification monitored files freebsd gam_server open file monitored directory issue monitoring directories many files stored system could easily reach kernel limits maximum file descriptor count kern.maxfiles kern.maxfilesperproc
node25:Wikipedia entry. Entry name: Active_Template_Library. Entry content: active template library active template library atl set template-based c++ classes developed microsoft intended simplify programming component object model com objects com support microsoft visual c++ allows developers create variety com objects ole automation servers activex controls atl includes object wizard sets primary structure objects quickly minimum hand coding com client side atl provides smart pointers deal com reference counting library makes heavy use curiously recurring template pattern com objects also created microsoft foundation classes mfc leads larger binaries require support dlls atl hand lightweight alternative situations graphical user interface parts mfc required atl version 7 visual studio 2003 directly succeeded version 3 visual studio 6.0 number mfc classes like cstring made available atl precisely moved atlmfc common layer shared libraries atl version 7 also introduced attributes c++ attempt provide something similar cli attributes however particularly successful deemphasized atl version 8 visual studio 2005 various wizards longer generate default version 7 also introduced new string conversion classes july 28 2009 microsoft released patch atl fix bug could allow activex controls created using atl vulnerable remote code execution security flaw since visual studio 2013 atl code visual c++ 2013 static eliminating dll atl includes many raii classes simplify management com types commonly used classes include although formally part atl microsoft visual c++ also includes additional c++ raii classes simplify management com types compiler com support classes used replacement combination atl includes note visual studio 2012 compiler com support classes include safearray wrapper
node26:Wikipedia entry. Entry name: Distributed_Component_Object_Model. Entry content: distributed component object model distributed component object model dcom proprietary microsoft technology communication software components networked computers dcom originally called network ole extends microsoft com provides communication substrate microsoft com+ application server infrastructure addition com due extensive use dce/rpc distributed computing environment/remote procedure calls – specifically microsoft enhanced version known msrpc terms extensions added com dcom solve problems one key factors solving problems use dce/rpc underlying rpc mechanism behind dcom dce/rpc strictly defined rules regarding marshalling responsible freeing memory dcom major competitor corba proponents technologies saw one day becoming model code service-reuse internet however difficulties involved getting either technologies work internet firewalls unknown insecure machines meant normal http requests combination web browsers microsoft one point attempted failed head adding extra http transport dce/rpc called ncacn_http network computing architecture connection-oriented protocol later resurrected support microsoft exchange 2003 connection http dcom supported natively windows nt 4.0 windows 2000 windows xp windows server 2003 well windows 7 windows 8 windows 10 windows server 2008 windows server 2008 r2 windows server 2012 windows server 2012 r2 windows server 2016 part initiative began microsoft part secure development lifecycle re-architect insecure code dcom saw significant security-focused changes windows xp service pack 2 comsource source code available along full complete documentation sufficient use also implement interoperable version dcom according documentation comsource comes directly windows nt 4.0 source code even includes source code windows nt registry service wine team also implementing dcom binary interoperability purposes currently interested networking side dcom provided msrpc restricted implementing ndr network data representation microsoft api committed making compatible possible msrpc tangramcom separate project wine focusing implementing dcom linux-based smartphones samba team also implementing dcom over-the-wire interoperability purposes unlike wine team currently interested binary-interoperability samba msrpc implementation far binary-interoperable microsoft msrpc
node27:Wikipedia entry. Entry name: Objective-C. Entry content: objective-c objective-c general-purpose object-oriented programming language adds smalltalk-style messaging c programming language main programming language supported apple macos ios ipados operating systems respective application programming interfaces apis cocoa cocoa touch introduction swift programming language objective-c originally developed early 1980s selected main language used next nextstep operating system macos ios derived portable objective-c programs use cocoa cocoa touch libraries using parts may ported reimplemented systems also compiled system supported gnu compiler collection gcc clang objective-c source code 'implementation program files usually filename extensions objective-c 'header/interface files extensions c header files objective-c++ files denoted file extension objective-c created primarily brad cox tom love early 1980s company stepstone introduced smalltalk itt corporation programming technology center 1981 earliest work objective-c traces back around time cox intrigued problems true reusability software design programming realized language like smalltalk would invaluable building development environments system developers itt however tom love also recognized backward compatibility c critically important itt telecom engineering milieu cox began writing pre-processor c add abilities smalltalk soon working implementation object-oriented extension c language called oopc object-oriented pre-compiler love hired schlumberger research 1982 opportunity acquire first commercial copy smalltalk-80 influenced development brainchild order demonstrate real progress could made cox showed making interchangeable software components really needed practical changes existing tools specifically needed support objects flexible manner come supplied usable set libraries allow code resources needed code bundled one cross-platform format love cox eventually formed new venture productivity products international ppi commercialize product coupled objective-c compiler class libraries 1986 cox published main description objective-c original form book object-oriented programming evolutionary approach although careful point problem reusability language objective-c often found compared feature feature languages 1988 next licensed objective-c stepstone new name ppi owner objective-c trademark extended gcc compiler support objective-c. next developed appkit foundation kit libraries nextstep user interface interface builder based next workstations failed make great impact marketplace tools widely lauded industry led next drop hardware production focus software tools selling nextstep openstep platform custom programming order circumvent terms gpl next originally intended ship objective-c frontend separately allowing user link gcc produce compiler executable initially accepted richard m. stallman plan rejected stallman consulted gnu lawyers next agreed make objective-c part gcc work extend gcc led steve naroff joined next stepstone compiler changes made available per gpl license terms runtime libraries rendering open source contribution unusable general public led parties developing runtime libraries open source license later steve naroff also principal contributor work apple build objective-c frontend clang gnu project started work free software implementation cocoa named gnustep based openstep standard dennis glatting wrote first gnu objective-c runtime 1992 gnu objective-c runtime use since 1993 one developed kresten krab thorup university student denmark thorup also worked next 1993 1996 acquiring next 1996 apple computer used openstep then-new operating system mac os x included objective-c next objective-c-based developer tool project builder interface design tool interface builder merged one application xcode apple current cocoa api based openstep interface objects significant objective-c environment used active development wwdc 2014 apple introduced new language swift characterized objective-c without c objective-c thin layer atop c strict superset c meaning possible compile c program objective-c compiler freely include c language code within objective-c class objective-c derives object syntax smalltalk syntax non-object-oriented operations including primitive variables pre-processing expressions function declarations function calls identical c syntax object-oriented features implementation smalltalk-style messaging objective-c model object-oriented programming based message passing object instances objective-c one call method one sends message unlike simula-style programming model used c++ difference two concepts code referenced method message name executed simula-style language method name cases bound section code target class compiler smalltalk objective-c target message resolved runtime receiving object interpreting message method identified selector — unique identifier message name often -terminated string representing name — resolved c method pointer implementing consequence message-passing system type checking object message directed — receiver — guaranteed respond message raises exception sending message object pointed pointer would require following code c++ obj- method argument objective-c written follows obj method argument styles programming strengths weaknesses object-oriented programming simula c++ style allows multiple inheritance faster execution using compile-time binding whenever possible support dynamic binding default also forces methods corresponding implementation unless abstract smalltalk-style programming used objective-c allows messages go unimplemented method resolved implementation runtime example message may sent collection objects expected respond without fear producing runtime errors message passing also require object defined compile time implementation still required method called derived object see dynamic typing section advantages dynamic late binding objective-c requires interface implementation class separately declared code blocks convention developers place interface header file implementation code file header files normally suffixed .h similar c header files implementation method files normally suffixed .m similar c code files called class declaration interface class usually defined header file common convention name header file name class e.g would contain interface class interface declaration takes form interface classname superclassname classmethod1 return_type classmethod2 return_type classmethod3 param1_type param1_varname return_type instancemethod1with1parameter param1_type param1_varname return_type instancemethod2with2parameters param1_type param1_varname param2_callname param2_type param2_varname end plus signs denote class methods methods called class instance minus signs denote instance methods called particular instance class class methods also access instance variables code roughly equivalent following c++ interface class classname public superclassname note demonstrates interleaving selector segments argument expressions direct equivalent c/c++ return types standard c type pointer generic objective-c object pointer specific type object nsarray nsimage nsstring pointer class method belongs instancetype default return type generic objective-c type method arguments begin name labeling argument part method name followed colon followed expected argument type parentheses argument name label omitted void setrangestart int start end int end void importdocumentwithname nsstring name withspecifiedpreferences preferences prefs beforepage int insertpage interface declares class interface methods actual code written implementation file implementation method files normally file extension codice_1 originally signified messages implementation classname return_type classmethod return_type instancemethod end methods written using interface declarations comparing objective-c c int method int int function int syntax allows pseudo-naming arguments void changetored float red green float green blue float blue //called like mycolor changecolortored:5.0 green:2.0 blue:6.0 internal representations method vary different implementations objective-c mycolor class instance method might internally labeled refer instance method class method names appended colons changed underscores order parameters part method name changed suit coding style expression true named parameters however internal names function rarely used directly generally messages converted function calls defined objective-c runtime library necessarily known link time method called class receiver object sent message need known runtime objective-c class written instantiated done first allocating uninitialized instance class object initializing object fully functional steps completed steps accomplished one line code never allocated object n't undergone initialization unwise keep intermediate result since codice_2 return different object called instantiation default no-parameter initializer myobject *foo end interface integer display id showstars id showint end implementation integer display id showstars id showint end int main void compilation performed example one experiment leaving lines omitting compilation program still run means possible mix-and-match added categories needed category need ability simply compile objective-c permits class wholly replace another class within program replacing class said pose target class class posing declared deprecated mac os x v10.5 unavailable 64-bit runtime similar functionality achieved using method swizzling categories swaps one method implementation another signature versions still supporting posing messages sent target class instead received posing class several restrictions posing similarly categories allows global augmentation existing classes posing permits two features absent categories example interface customnsapplication nsapplication end implementation customnsapplication void setmainmenu nsmenu* menu end class_poseas customnsapplication class nsapplication class intercepts every invocation setmainmenu nsapplication c language codice_3 pre-compile directive always causes file contents inserted source point objective-c codice_4 directive equivalent except file included per compilation unit obviating need include guards objective-c features often allow flexible often easy solutions programming issues objective-c++ language variant accepted front-end gnu compiler collection clang compile source files use combination c++ objective-c syntax objective-c++ adds c++ extensions objective-c adds c. nothing done unify semantics behind various language features certain restrictions apply 2006 worldwide developers conference apple announced release objective-c 2.0 revision objective-c language include modern garbage collection syntax enhancements runtime performance improvements 64-bit support mac os x v10.5 released october 2007 included objective-c 2.0 compiler gcc 4.6 supports many new objective-c features declared synthesized properties dot syntax fast enumeration optional protocol methods method/protocol/class attributes class extensions new gnu objective-c runtime api objective-c 2.0 provided optional conservative generational garbage collector run backwards-compatible mode runtime turned reference counting operations retain release no-ops objects subject garbage collection garbage collection enabled regular c pointers could qualified __strong also trigger underlying write-barrier compiler intercepts thus participate garbage collection zero-ing weak subsystem also provided pointers marked __weak set zero object simply gc memory collected garbage collector exist ios implementation objective-c 2.0 garbage collection objective-c runs low-priority background thread halt user events intention keeping user experience responsive garbage collection deprecated mac os x v10.8 favor automatic reference counting arc objective-c ios 7 running arm64 uses 19 bits 64-bit word store reference count form tagged pointers objective-c 2.0 introduces new syntax declare instance variables properties optional attributes configure generation accessor methods properties sense public instance variables declaring instance variable property provides external classes access possibly limited e.g read property property may declared readonly may provided storage semantics codice_5 codice_6 codice_7 default properties considered codice_8 results lock preventing multiple threads accessing time property declared codice_9 removes lock interface person nsobject property copy nsstring *name property readonly int age id initwithage int age end properties implemented way codice_10 keyword generates getter setter read-only methods according property declaration alternatively getter setter methods must implemented explicitly codice_11 keyword used indicate accessor methods provided means compiled using clang 3.1 higher properties explicitly declared codice_11 marked codice_13 complete user-implemented getter setter automatically implicitly codice_10 'd implementation person synthesize name id initwithage int initage int age end properties accessed using traditional message passing syntax dot notation key-value coding name via valueforkey setvalue forkey methods person *aperson person alloc initwithage 53 aperson.name steve // note dot notation uses synthesized setter nslog access message dot notation property name direct instance variable access order use dot notation invoke property accessors within instance method self keyword used void introducemyselfwithproperties bool usegetter // note getter vs. ivar access class protocol properties may dynamically type introspection|introspected int int propertycount 0 objc_property_t *propertylist class_copypropertylist aperson class propertycount 0 propertycount i++ objective-c 2.0 provides non-fragile instance variables supported runtime i.e building code 64-bit macos ios modern runtime extra layer indirection added instance variable access allowing dynamic linker adjust instance layout runtime feature allows two important improvements objective-c code instead using nsenumerator object indices iterate collection objective-c 2.0 offers fast enumeration syntax objective-c 2.0 following loops functionally equivalent different performance traits // using nsenumerator nsenumerator *enumerator thepeople objectenumerator person *p p enumerator nextobject nil // using indexes int 0 thepeople count i++ // using fast enumeration person *p thepeople fast enumeration generates efficient code standard enumeration method calls enumerate objects replaced pointer arithmetic using nsfastenumeration protocol class extension syntax category declaration category name methods properties declared added directly main class mostly used alternative category add methods class without advertising public headers advantage class extensions compiler checks privately declared methods actually implemented objective-c applications developed macos make use improvements objective-c 2.0 incompatible operating systems prior 10.5 leopard since fast enumeration generate exactly binaries standard enumeration use cause application crash mac os x version 10.4 earlier blocks nonstandard extension objective-c c programming language |c c++ uses special syntax create closure programming |closures blocks supported mac os x snow leopard|mac os x 10.6 snow leopard later ios 4 later gnustep libobjc2 1.7 compiling clang 3.1 later typedef int ^intblock intblock makecounter int start int increment int main void /* output automatic reference counting arc compile-time feature eliminates need programmers manually manage retain counts using codice_7 codice_16 unlike garbage collection computer science |garbage collection occurs run time arc eliminates overhead separate process managing retain counts arc manual memory management mutually exclusive programmers continue use non-arc code arc-enabled projects disabling arc individual code files xcode also attempt automatically upgrade project arc next apple obj-c runtimes long included short-form way create new strings using literal syntax codice_17 drop corefoundation constants codice_18 codice_19 codice_20 boolean values using format saves programmer use longer codice_21 similar methods certain operations using apple llvm compiler 4.0 later arrays dictionaries numbers codice_22 codice_23 codice_20 classes also created using literal syntax instead methods example without literals nsarray *myarray nsarray arraywithobjects object1 object2 object3 nil nsdictionary *mydictionary1 nsdictionary dictionarywithobject someobject forkey key nsdictionary *mydictionary2 nsdictionary dictionarywithobjectsandkeys object1 key1 object2 key2 nil nsnumber *mynumber nsnumber numberwithint myint nsnumber *mysumnumber= nsnumber numberwithint 2 3 nsnumber *myboolnumber nsnumber numberwithbool yes example literals nsarray *myarray object1 object2 object3 nsdictionary *mydictionary1 key someobject nsdictionary *mydictionary2 key1 object1 key2 object2 nsnumber *mynumber myint nsnumber *mysumnumber 2+3 nsnumber *myboolnumber yes nsnumber *myintegernumber 8 however different string literal compile constants executable literals compile code equivalent method calls particular manually reference-counted memory management objects autoreleased requires added care e.g. used function-static variables kinds globals using apple llvm compiler 4.0 later arrays dictionaries codice_22 codice_23 classes manipulated using subscripting subscripting used retrieve values indexes array keys dictionary mutable objects also used set objects indexes keys code subscripting represented using brackets codice_27 example without subscripting id object1 somearray objectatindex:0 id object2 somedictionary objectforkey key somemutablearray replaceobjectatindex:0 withobject object3 somemutabledictionary setobject object4 forkey key example subscripting id object1 somearray 0 id object2 somedictionary key somemutablearray 0 object3 somemutabledictionary key object4 purchase next apple attempts made make language acceptable programmers familiar java programming language |java smalltalk one attempts introducing dubbed modern syntax objective-c time opposed current classic syntax change behaviour merely alternative syntax instead writing method invocation like instead written similarly declarations went form modern syntax longer supported current dialects objective-c language besides gnu compiler collection|gcc next apple inc.|apple implementation added several extensions original stepstone implementation another free open source software|free open-source objective-c implementation called portable object compiler also exists set extensions implemented portable object compiler differs gcc/next/apple implementation particular includes smalltalk -like blocks objective-c lacks protocols categories two features used extensively openstep derivatives relatives overall poc represents older pre-next stage language evolution roughly conformant brad cox 1991 book also includes runtime library called objectpak based cox original icpak101 library turn derives smalltalk-80 class library quite radically different openstep foundationkit geos 16-bit operating system |pc geos system used programming language known geos objective-c goc despite name similarity two languages similar overall concept use keywords prefixed sign clang compiler suite part llvm project implements objective-c languages winobjc also known bridge open-source objc compiler project started microsoft github way allow reuse ios application code inside windows universal applications windows objective-c development tools provided download gnustep website gnustep development system consists following packages gnustep msys system gnustep core gnustep devel gnustep cairo projectcenter ide like xcode complex gorm interface builder like xcode nib builder objective-c today often used tandem fixed library standard objects often known kit framework cocoa api |cocoa gnustep objfw libraries often come operating system gnustep libraries often come linux -based distributions cocoa comes macos programmer forced inherit functionality existing base class nsobject ofobject objective-c allows declaration new root classes inherit existing functionality originally objective-c-based programming environments typically offered object class base class almost classes inherited introduction openstep next created new base class named nsobject offered additional features object emphasis using object references reference counting instead raw pointers example almost classes cocoa inherit nsobject renaming serve differentiate new default behavior classes within openstep api allowed code used object—the original base class used nextstep less objective-c class libraries —to co-exist runtime code used nsobject limitations introduction two letter prefix also became simplistic form namespaces objective-c lacks using prefix create informal packaging identifier became informal coding standard objective-c community continues day recently package managers started appearing cocoapods aims package manager repository packages lot open-source objective-c code written last years installed using cocoapods objective-c implementations use thin run time system|runtime system written c adds little size application contrast object-oriented systems time created used large virtual machine runtimes programs written objective-c tend much larger size code libraries generally need included software distribution contrast smalltalk systems large amount memory used open window objective-c applications tend larger similar c c++ applications objective-c dynamic typing allow methods stripped inlined since programmer freedom delegate forward calls build selectors fly pass runtime system objective-c compiler assume safe remove unused methods inline calls likewise language implemented atop extant c compilers gnu compiler collection|gcc first preprocessor module rather new compiler allows objective-c leverage huge existing collection c code libraries tools etc existing c libraries wrapped objective-c adapter pattern|wrappers provide oo-style interface aspect similar gobject library vala programming language |vala language widely used development gtk applications practical changes lowered barriers entry|barrier entry likely biggest problem widespread acceptance smalltalk 1980s common criticism objective-c language support namespaces instead programmers forced add prefixes class names traditionally shorter namespace names thus prone collisions 2007 macos classes functions cocoa software |cocoa programming environment prefixed ns e.g nsobject nsbutton identify belonging macos ios core ns derives names classes defined development nextstep since objective-c strict superset c treat c primitive types first-class object s. unlike c++ objective-c support operator overloading also unlike c++ objective-c allows object directly inherit one class forbidding multiple inheritance however cases categories protocols may used alternative ways achieve results objective-c uses dynamic runtime typing method calls function calls cases syscalls many common performance optimizations applied objective-c methods example inlining constant propagation interprocedural optimizations scalar replacement aggregates limits performance objective-c abstractions relative similar abstractions languages c++ optimizations possible first versions objective-c support garbage collection computer science |garbage collection time decision matter debate many people considered long dead times smalltalk performed collection render entire system unusable 3rd party implementations added feature notably gnustep apple implemented mac os x v10.5 however recent versions macos ios garbage collection deprecated favor automatic reference counting arc introduced 2011 arc compiler inserts retain release calls automatically objective-c code based static program analysis|static code analysis automation relieves programmer write memory management code arc also adds weak references objective-c language design implementation c++ objective-c represent fundamentally different approaches extending c. addition c style procedural programming c++ directly supports certain forms object-oriented programming generic programming metaprogramming c++ also comes c++ standard library|a large standard library includes sequence container c++ |several container classes similarly objective-c adds polymorphism object-oriented programming|object-oriented programming dynamic typing reflection computer science |reflection c. objective-c provide standard library per se places objective-c used used openstep -like library openstep cocoa api |cocoa gnustep provides functionality similar c++ standard library one notable difference objective-c provides runtime support reflection computer science |reflective features whereas c++ adds small amount runtime support c. objective-c object queried properties e.g. whether respond certain message c++ possible without use external libraries use reflection part wider distinction dynamic run-time features static compile-time features language although objective-c c++ employ mix features objective-c decidedly geared toward run-time decisions c++ geared toward compile-time decisions tension dynamic static programming involves many classic trade-offs programming dynamic features add flexibility static features add speed type checking generic programming metaprogramming implemented languages using runtime polymorphism c++ takes form virtual function runtime type identification objective-c offers dynamic typing reflection objective-c lacks compile-time polymorphism generic function entirely c++ supports via function overloading template c++ |templates category c programming language family category class-based programming languages category dynamically typed programming languages category gnustep category next category object-oriented programming languages category objective-c category programming languages created 1986
node28:Wikipedia entry. Entry name: Nim_(programming_language). Entry content: nim programming language nim formerly named nimrod imperative general-purpose multi-paradigm statically typed systems compiled programming language designed developed andreas rumpf designed efficient expressive elegant supporting metaprogramming functional message passing procedural object-oriented programming styles providing several features compile time code generation algebraic data types foreign function interface ffi c c++ compiling c c++ objective-c javascript nim statically typed supports compile-time metaprogramming features syntactic macros term rewriting macros term rewriting macros enable library implementations common data structures bignums matrices implemented efficiently builtin language facilities iterators supported used first class entities functions allowing use functional programming methods object-oriented programming supported inheritance multiple dispatch functions generic also overloaded generics enhanced support type classes operator overloading also supported nim includes tunable automatic garbage collection based deferred reference counting cycle detection turned altogether 2014 andrew binstock editor-in-chief dr. dobb journal said nimrod former name ... presents original design straddles pascal python compiles c code javascript today nim compiles c c++ javascript objective-c goal nim fast c expressive python extensive lisp nim initial development started 2006 andreas rumpf project made public 2008 first version nim compiler written pascal using free pascal compiler 2008 version compiler written nim released compiler free open-source software developed community volunteers working andreas rumpf language officially renamed nimrod nim release version 0.10.2 december 2014 syntax nim highly resembles python code blocks nesting statements identified use white-space according offside-rule many keywords identical python equivalents mostly english keywords programming languages use punctuation even though nim supports indentation based syntax like python introduced flexibility whereby one could break statement comma binary operator next line nim also supports user-defined operators nim almost fully style-insensitive two identifiers considered equal differ capitalization underscores long first characters identical details influenced also nim supports uniform function call syntax ufcs identifier equality nim compiler emits optimized c code defers compiling external compiler leverage optimizing portability abilities many compilers supported including clang gnu compiler collection gcc compiler also emit c++ objective-c javascript code allow easy interfacing application programming interfaces apis written languages allows writing applications ios android nim compiler self-hosting meaning written nim language nimble standard package manager used nim package nim modules initially developed dominik picheta also core nim developer newer releases nim come nimble included nimble packages defined codice_1 files contain information package version author license description dependencies files support limited subset nim syntax called nimscript main limitation access ffi scripts allow changing test procedure custom tasks written list packages stored json file freely accessible nim-lang/packages repository github json file provides nimble mapping names packages git mercurial repository urls nimble comes nim compiler possible test nimble environment running codice_2 command reveal version number compilation date time git hash nimble nimble utilizes git must available nimble function well nimble command-line used interface installing removing uninstalling upgrading/patching module packages c2nim transcompiler/transpiler helps generate new bindings translating ansi c code nim code output human-readable nim code meant tweaked hand translation process choosenim developed dominik picheta tool enables developer multiple versions nim compile his/her machine choosenim installs nim official downloads sources enabling easy switching stable development compilers nimfix tool helps convert old-style nimrod code nim code nimfix currently beta-quality pas2nim tool translate object pascal wrappers nim code used translate original pascal sources nim compiler maps easily nim supported free pascal delphi-style classes features unsupported time development maintenance mostly stalled py2nim tool used transpiling python code idiomatic nim code development active plans extend amount python code fully translated nim nim program use library used c c++ program language bindings exist many libraries including gtk+ sdl2 cairo opengl winapi zlib libzip openssl curl nim works postgresql mysql sqlite databases nim interface lua python interpreter following code examples valid nim 0.19.0. subsequent releases nim 1.0 release syntax semantics may change later versions hello world program nim echo hello world echo hello world another version coding hello world ... stdout.write hello world simple demonstration showing many nim features proc reverse string string let str1 reverse echo reversed reverse str1 one exotic features implicit codice_3 variable every procedure nim non-void return type implicit result variable represents value returned loop see invocation codice_4 iterator iterator omitted compiler attempt use codice_5 iterator one defined type specified run overridden oloop stropping method mark explicitly letter sequence special purpose stropping used modern languages instead keywords reserved words used identifiers variables functions stropping allows letter sequence used keyword identifier simplifies parsing example allowing variable named codice_6 without clashing keyword codice_6 nim achieved via backticks allowing reserved word used identifier var type int example metaprogramming nim using template facilities template gentype name fieldname untyped fieldtype typedesc gentype test foo int var x test foo 4566 echo x.foo 4566 codice_8 invoked compile-time codice_9 type created nim ffi used call functions written programming languages compile means libraries written c c++ objective-c javascript used nim source code one aware javascript c c++ objective-c libraries combined program compatible javascript c++ objective-c based compatible c javascript incompatible dynamic client-side web-based language following program demonstrates ease extant c code used directly nim printf d\n foo 5 code codice_10 function imported nim used project bug tracker wiki hosted github forum presentation nim given o'reilly open source convention oscon 2015
node29:Wikipedia entry. Entry name: Kernel-Mode_Driver_Framework. Entry content: kernel-mode driver framework kernel-mode driver framework kmdf driver framework developed microsoft tool aid driver developers create maintain kernel mode device drivers windows 2000 later releases one frameworks included windows driver frameworks current version 1.27 general kmdf supports drivers written windows driver model runs wdm wdm driver model used since advent windows 98 whereas kmdf driver framework microsoft advocates uses windows 2000 beyond general since features like power management plug play handled framework kmdf driver less complicated less code equivalent driver kmdf object-based built top wdm provides object-based perspective wdm following architectural mandate superset wdf functionality contained different types objects kmdf implementation consists
node30:Wikipedia entry. Entry name: Windows_Driver_Frameworks. Entry content: windows driver frameworks windows driver frameworks wdf formerly windows driver foundation set microsoft tools libraries aid creation device drivers windows 2000 later versions windows complements windows driver model abstracting away much boilerplate complexity writing windows drivers wdf consists kernel-mode driver framework kmdf user-mode driver framework umdf individual frameworks provide new object-oriented programming model windows driver development primary goals wdf conceptual scalability reduced duplication enabling developers apply concepts across different driver types reducing code overhead required drivers differs markedly windows driver model wdm requires driver developers fully familiar many complex technical details write basic driver part key achieving conceptual scalability kmdf umdf use opt-in model model allows developer extend override default behavior canonical good driver contrast windows driver model depends driver writer implement aspects driver behavior three types wdf drivers wdf also includes set static verification tools use driver writers tools examine driver code common errors and/or simulate code driver order identify problems difficult detect difficult test bold yes means introduced version windows",wikics,nc
"Classify the wikipedia page represented by node1 using its subgraph data (text attributes and connections) as follows.

node0: Linux distribution based on OpenSUSE with static/rolling editions, pre-installed software, and noted issues in reviews.  
node1: Cloud CRM/ATS provider for staffing, acquired by Vista and Insight, with growth from $2M to $67M revenue; focused on recruitment tech.  
node2: Product development firm acquired by Harman, founded by Pradeep Singh, expanded cloud services via Cumulux; part of Symphony Teleca.  
node3: High-performance computers using parallel processing for tasks like weather modeling, facing heat/energy challenges; evolved from 1960s vector systems.  
node4: Discontinued OpenWRT-based router OS with enhanced web management tools for configuration and network control.  
node5: Spanish supercomputer in Galicia with high RAM-core ratio, used for research by universities and CSIC, ranked among top EU systems.  
node6: Microsoft’s data-parallel execution engine using DAG models, discontinued in favor of Hadoop; supported via DryadLINQ and C++.  
node7: Database concurrency control ensuring transaction isolation through serializability, conflict detection, and locking mechanisms like SS2PL.
node8: Cloud computing provides on-demand computing resources via internet, offering scalability, cost efficiency, and flexibility with public/private models since 2006.  
node9: Dataflow refers to stream processing and concurrent execution in software, contrasting with traditional architectures using reactive programming and distributed systems.  
node10: VyOS is an open-source Debian-based router/firewall for networking, offering cloud and physical deployments with regular version updates.  
node11: Hardware Scout uses idle processors to prefetch data during cache misses, improving performance via run-ahead threads in architectures like Sun Rock.  
node12: Autonomous decentralized systems use independent modules for fault-tolerant operation via message passing, applied in railways and robotics since 1977.  
node13: NimbleX is a lightweight Slackware-based Linux with fast boot times, KDE desktop, and custom image creation for minimal installations.  
node14: Oracle iPlanet Web Server is a business-focused web server evolved from Netscape, supporting JSP/PHP, with parts open-sourced under BSD license.  
node15: Distributed concurrency control ensures transaction consistency in networks via lock managers and commitment ordering, addressing latency and scalability challenges.  
node16: Univa provides workload management software for hybrid clouds, including Grid Engine, and offers cloud migration solutions since 2004.
node17: Sun Microsystems, founded 1982, created Java, Solaris, and SPARC tech. Acquired by Oracle in 2009 after decades as a Unix workstation/server leader.  
node18: G.ho.st was a web-based virtual OS startup, a Palestinian-Israeli collaboration, closing in 2010 due to competition and funding shortages.  
node19: Sun Cloud offered on-demand cloud computing ($1/CPU-hour) via Solaris 10, discontinued by Oracle in 2010 after Sun's acquisition.  
node20: CITIC Telecom CPC provides global cloud/networking services, expanded via Linx Telecom's acquisition, supporting ""One Belt One Road"" infrastructure.  
node21: Cloud-based design/manufacturing (CBDM) uses cloud tech for collaborative product development, leveraging IoT, SOA, and shared resources to cut costs/speed innovation.

the connection relationship among the nodes mentioned:
 <node0, node10>,<node0, node13>,<node1, node8>,<node2, node8>,<node3, node5>,<node3, node6>,<node3, node8>,<node3, node11>,<node3, node14>,<node3, node16>,<node3, node17>,<node3, node19>,<node4, node10>,<node5, node6>,<node5, node8>,<node5, node11>,<node6, node8>,<node6, node9>,<node6, node11>,<node7, node8>,<node7, node15>,<node8, node10>,<node8, node11>,<node8, node12>,<node8, node15>,<node8, node16>,<node8, node18>,<node8, node19>,<node8, node20>,<node8, node21>,<node10, node13>,<node14, node17>,<node14, node19>,<node16, node17>,<node17, node19>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",distributed computing architecture,"node0: Linux distribution based on OpenSUSE with static/rolling editions, pre-installed software, and noted issues in reviews.  
node1: Cloud CRM/ATS provider for staffing, acquired by Vista and Insight, with growth from $2M to $67M revenue; focused on recruitment tech.  
node2: Product development firm acquired by Harman, founded by Pradeep Singh, expanded cloud services via Cumulux; part of Symphony Teleca.  
node3: High-performance computers using parallel processing for tasks like weather modeling, facing heat/energy challenges; evolved from 1960s vector systems.  
node4: Discontinued OpenWRT-based router OS with enhanced web management tools for configuration and network control.  
node5: Spanish supercomputer in Galicia with high RAM-core ratio, used for research by universities and CSIC, ranked among top EU systems.  
node6: Microsoft’s data-parallel execution engine using DAG models, discontinued in favor of Hadoop; supported via DryadLINQ and C++.  
node7: Database concurrency control ensuring transaction isolation through serializability, conflict detection, and locking mechanisms like SS2PL.
node8: Cloud computing provides on-demand computing resources via internet, offering scalability, cost efficiency, and flexibility with public/private models since 2006.  
node9: Dataflow refers to stream processing and concurrent execution in software, contrasting with traditional architectures using reactive programming and distributed systems.  
node10: VyOS is an open-source Debian-based router/firewall for networking, offering cloud and physical deployments with regular version updates.  
node11: Hardware Scout uses idle processors to prefetch data during cache misses, improving performance via run-ahead threads in architectures like Sun Rock.  
node12: Autonomous decentralized systems use independent modules for fault-tolerant operation via message passing, applied in railways and robotics since 1977.  
node13: NimbleX is a lightweight Slackware-based Linux with fast boot times, KDE desktop, and custom image creation for minimal installations.  
node14: Oracle iPlanet Web Server is a business-focused web server evolved from Netscape, supporting JSP/PHP, with parts open-sourced under BSD license.  
node15: Distributed concurrency control ensures transaction consistency in networks via lock managers and commitment ordering, addressing latency and scalability challenges.  
node16: Univa provides workload management software for hybrid clouds, including Grid Engine, and offers cloud migration solutions since 2004.
node17: Sun Microsystems, founded 1982, created Java, Solaris, and SPARC tech. Acquired by Oracle in 2009 after decades as a Unix workstation/server leader.  
node18: G.ho.st was a web-based virtual OS startup, a Palestinian-Israeli collaboration, closing in 2010 due to competition and funding shortages.  
node19: Sun Cloud offered on-demand cloud computing ($1/CPU-hour) via Solaris 10, discontinued by Oracle in 2010 after Sun's acquisition.  
node20: CITIC Telecom CPC provides global cloud/networking services, expanded via Linx Telecom's acquisition, supporting ""One Belt One Road"" infrastructure.  
node21: Cloud-based design/manufacturing (CBDM) uses cloud tech for collaborative product development, leveraging IoT, SOA, and shared resources to cut costs/speed innovation.","node0:Wikipedia entry. Entry name: GeckoLinux. Entry content: geckolinux geckolinux linux distribution based opensuse available two editions static based opensuse leap rolling based opensuse tumbleweed geckolinux isos based opensuse images around 1 gb different editions come different desktop environments installed open-source programs ready-to-work proprietary programs and/or drivers geckolinux also comes font rendering open-source software pre-installed tlp power management open-source available public repositories geckolinux offline live-usb/dvd installer static rolling editions comes pre-installed programs downloaded applications packages packman repository since pre-configured distribution desktop programs deleted data dependencies offer installation additional packages os installs dedoimedo wrote non-positive review geckolinux 150.180616 saying issues multimedia playback visual glitches graphics driver
node1:Wikipedia entry. Entry name: Bullhorn,_Inc.. Entry content: bullhorn inc. bullhorn cloud computing company headquartered boston massachusetts company provides customer relationship management crm applicant tracking system ats operations software staffing industry 2018 company reported 8,000 customers 150 countries besides boston headquarters company operations st. louis london brighton vancouver sydney rotterdam bullhorn founded 1999 roger colvin barry hinckley art papas papas continues serve ceo company originally launched platform freelancers find collaborate work 2001 changed focus build crm software vertical markets company historically focused providing software-as-a-service third-party staffing recruiting firms allowing manage business operations single web-based platform became one largest providers technology staffing recruiting market reportedly growing revenue 2 million 2004 20 million 2009 33.6 million 2011 67 million 2013 bullhorn raised first round venture capital funding 1999 4 million investment ge asset management internet.com raised 26 million general catalyst partners highland capital partners 2008 june 2012 vista equity partners acquired bullhorn reported price several hundred million dollars july 2015 industry research firm gartner included bullhorn first time magic quadrant report salesforce automation alongside companies deems leaders providing tools support automation sales account management activities processes january 2016 company reported momentum press release would exceed nine figures annual revenue first time history vista ownership company quadrupled revenue focusing serving staffing recruiting industry acquiring several companies including maxhire solutions sendouts code works easy software solutions makers timesheasy april 2016 bullhorn moved boston headquarters ft. point district downtown crossing june 2017 engage conference bullhorn announced new suite software healthcare staffing firms september 2017 bullhorn international acquired connexys leading provider recruitment solutions mainland europe supercharge expansion mainland europe october 2017 insight venture partners acquired bullhorn vista company also announced cloud-based middle office strategy provide enterprise recruiting companies front-to-back solution november 2017 bullhorn acquired peoplenet leading provider cloud-based workforce management solutions company also announced official closing insight venture partners ’ acquisition bullhorn included investment genstar capital march 2018 bullhorn acquired talent rover jobscience two leading providers recruitment software built salesforce platform
node2:Wikipedia entry. Entry name: Aditi_Technologies. Entry content: aditi technologies aditi technologies american company headquartered bellevue washington united states largest center bangalore india aditi acquired symphony teleca april 2014 9 april 2015 harman international industries incorporated acquired symphony teleca corporation 12 november 2016 samsung entered definitive agreement acquire harman international pradeep singh founded aditi technologies 1994 nine years management positions microsoft including general manager windows 95 mobile services group aditi began microsoft service shop providing support services microsoft customers around globe 1999 talisma customer relationship management division aditi spun 1999 founding talisma driven concept supporting customers various modes communication using internet pradeep singh spent next 10 years talisma building company 2008 campus management acquired talisma brand talisma corporation pvt ltd. bangalore higher education business unit based bellevue washington 2003 pradeep singh came back aditi shifted focus company outsourced product development space area aditi spent first 12 years exclusively servicing microsoft 2004 aditi partnered pi corporation developing software targeted linux environment since 2006 involved product development software testing based microsoft software platforms october 2007 pradeep rathinam appointed president chief executive officer aditi technologies august 2010 aditi technologies partnered quest software migrate upgrade customers sharepoint 2010 sharepoint online 2011 aditi forayed cloud services space acquisition seattle based cloud computing start-up cumulux acquisition aditi invested 5 million azure acceleration lab azure-based rapid application development offering strengthen cloud computing capabilities may 2013 aditi expanded cloud capabilities acquisition get cloud ready thus entering aws market 10 april 2014 aditi announced acquired symphony teleca undisclosed amount following acquisition sanjay dhawan took ceo pradeep rathinam appointed president aditi becoming independent business unit symphony teleca aditi employs nearly 1600 people globally
node3:Wikipedia entry. Entry name: Supercomputer. Entry content: supercomputer supercomputer computer high level performance compared general-purpose computer performance supercomputer commonly measured floating-point operations per second flops instead million instructions per second mips since 2017 supercomputers perform hundred quadrillion flops since november 2017 world fastest 500 supercomputers run linux-based operating systems additional research conducted china united states european union taiwan japan build even faster powerful technologically superior exascale supercomputers supercomputers play important role field computational science used wide range computationally intensive tasks various fields including quantum mechanics weather forecasting climate research oil gas exploration molecular modeling computing structures properties chemical compounds biological macromolecules polymers crystals physical simulations simulations early moments universe airplane spacecraft aerodynamics detonation nuclear weapons nuclear fusion throughout history essential field cryptanalysis supercomputers introduced 1960s several decades fastest made seymour cray control data corporation cdc cray research subsequent companies bearing name monogram first machines highly tuned conventional designs ran faster general-purpose contemporaries 1960s began add increasing amounts parallelism one four processors typical 1970s vector processors operating large arrays data came dominate notable example highly successful cray-1 1976 vector computers remained dominant design 1990s today massively parallel supercomputers tens thousands off-the-shelf processors became norm us long leader supercomputer field first cray almost uninterrupted dominance field later variety technology companies japan made major strides field 1980s 90s since china become increasingly active field november 2018 fastest supercomputer top500 supercomputer list summit united states linpack benchmark score 143.5 pflops followed sierra around 48.860 pflops us five top 10 china two june 2018 supercomputers list combined broken 1 exaflops mark 1960 sperry rand built livermore atomic research computer larc today considered among first supercomputers us navy research development centre still used high-speed drum memory rather newly emerging disk drive technology also among first supercomputers ibm 7030 stretch ibm 7030 built ibm los alamos national laboratory 1955 requested computer 100 times faster existing computer ibm 7030 used transistors magnetic core memory pipelined instructions prefetched data memory controller included pioneering random access disk drives ibm 7030 completed 1961 despite meeting challenge hundredfold increase performance purchased los alamos national laboratory customers england france also bought computer became basis ibm 7950 harvest supercomputer built cryptanalysis third pioneering supercomputer project early 1960s atlas university manchester built team led tom kilburn designed atlas memory space million words 48 bits magnetic storage capacity unaffordable actual core memory atlas 16,000 words drum providing memory 96,000 words atlas operating system swapped data form pages magnetic core drum atlas operating system also introduced time-sharing supercomputing one programe could executed supercomputer one time atlas joint venture ferranti manchester university designed operate processing speeds approaching one microsecond per instruction one million instructions per second cdc 6600 designed seymour cray finished 1964 marked transition germanium silicon transistors silicon transistors could run faster overheating problem solved introducing refrigeration supercomputer design thus cdc6600 became fastest computer world given 6600 outperformed contemporary computers 10 times dubbed supercomputer defined supercomputing market one hundred computers sold 8 million cray left cdc 1972 form company cray research four years leaving cdc cray delivered 80 mhz cray-1 1976 became one successful supercomputers history cray-2 released 1985 eight central processing units cpus liquid cooling electronics coolant liquid fluorinert pumped supercomputer architecture performed 1.9 gigaflops world second fastest m-13 supercomputer moscow computer seriously challenge cray-1 performance 1970s illiac iv machine first realized example true massively parallel computer many processors worked together solve different parts single larger problem contrast vector systems designed run single stream data quickly possible concept computer instead feeds separate parts data entirely different processors recombines results illiac design finalized 1966 256 processors offer speed 1 gflops compared 1970s cray-1 peak 250 mflops however development problems led 64 processors built system could never operate faster 200 mflops much larger complex cray another problem writing software system difficult getting peak performance matter serious effort partial success illiac iv widely seen pointing way future supercomputing cray argued famously quipping plowing field would rather use two strong oxen 1024 chickens early 1980s several teams working parallel designs thousands processors notably connection machine cm developed research mit cm-1 used many 65,536 simplified custom microprocessors connected together network share data several updated versions followed cm-5 supercomputer massively parallel processing computer capable many billions arithmetic operations per second 1982 osaka university links-1 computer graphics system used massively parallel processing architecture 514 microprocessors including 257 zilog z8001 control processors 257 iapx 86/20 floating-point processors mainly used rendering realistic 3d computer graphics fujitsu numerical wind tunnel supercomputer used 166 vector processors gain top spot 1994 peak speed 1.7 gigaflops gflops per processor hitachi sr2201 obtained peak performance 600 gflops 1996 using 2048 processors connected via fast three-dimensional crossbar network intel paragon could 1000 4000 intel i860 processors various configurations ranked fastest world 1993 paragon mimd machine connected processors via high speed two dimensional mesh allowing processes execute separate nodes communicating via message passing interface software development remained problem cm series sparked considerable research issue similar designs using custom hardware made many companies including evans sutherland es-1 maspar ncube intel ipsc goodyear mpp mid-1990s general-purpose cpu performance improved much supercomputer could built using individual processing units instead using custom chips turn 21st century designs featuring tens thousands commodity cpus norm later machines adding graphic units mix systems massive number processors generally take one two paths grid computing approach processing power many computers organised distributed diverse administrative domains opportunistically used whenever computer available another approach large number processors used proximity e.g computer cluster centralized massively parallel system speed flexibility becomes important modern supercomputers used various approaches ranging enhanced infiniband systems three-dimensional torus interconnects use multi-core processors combined centralization emerging direction e.g cyclops64 system price performance energy efficiency general purpose graphic processors gpgpus improved number petaflops supercomputers tianhe-i nebulae started rely however systems k computer continue use conventional processors sparc-based designs overall applicability gpgpus general-purpose high-performance computing applications subject debate gpgpu may tuned score well specific benchmarks overall applicability everyday algorithms may limited unless significant effort spent tune application towards however gpus gaining ground 2012 jaguar supercomputer transformed titan retrofitting cpus gpus high-performance computers expected life cycle three years requiring upgrade number special-purpose systems designed dedicated single problem allows use specially programmed fpga chips even custom asics allowing better price/performance ratios sacrificing generality examples special-purpose supercomputers include belle deep blue hydra playing chess gravity pipe astrophysics mdgrape-3 protein structure computation molecular dynamics deep crack breaking des cipher throughout decades management heat density remained key issue centralized supercomputers large amount heat generated system may also effects e.g reducing lifetime system components diverse approaches heat management pumping fluorinert system hybrid liquid-air cooling system air cooling normal air conditioning temperatures typical supercomputer consumes large amounts electrical power almost converted heat requiring cooling example tianhe-1a consumes 4.04 megawatts mw electricity cost power cool system significant e.g 4 mw 0.10/kwh 400 hour 3.5 million per year heat management major issue complex electronic devices affects powerful computer systems various ways thermal design power cpu power dissipation issues supercomputing surpass traditional computer cooling technologies supercomputing awards green computing reflect issue packing thousands processors together inevitably generates significant amounts heat density need dealt cray 2 liquid cooled used fluorinert cooling waterfall forced modules pressure however submerged liquid cooling approach practical multi-cabinet systems based off-the-shelf processors system x special cooling system combined air conditioning liquid cooling developed conjunction liebert company blue gene system ibm deliberately used low power processors deal heat density ibm power 775 released 2011 closely packed elements require water cooling ibm aquasar system uses hot water cooling achieve energy efficiency water used heat buildings well energy efficiency computer systems generally measured terms flops per watt 2008 ibm roadrunner operated 3.76 mflops/w november 2010 blue gene/q reached 1,684 mflops/w june 2011 top 2 spots green 500 list occupied blue gene machines new york one achieving 2097 mflops/w degima cluster nagasaki placing third 1375 mflops/w copper wires transfer energy supercomputer much higher power densities forced air circulating refrigerants remove waste heat ability cooling systems remove waste heat limiting factor many existing supercomputers infrastructure capacity actual peak demand machine designers generally conservatively design power cooling infrastructure handle theoretical peak electrical power consumed supercomputer designs future supercomputers power-limited thermal design power supercomputer whole amount power cooling infrastructure handle somewhat expected normal power consumption less theoretical peak power consumption electronic hardware since end 20th century supercomputer operating systems undergone major transformations based changes supercomputer architecture early operating systems custom tailored supercomputer gain speed trend move away in-house operating systems adaptation generic software linux since modern massively parallel supercomputers typically separate computations services using multiple types nodes usually run different operating systems different nodes e.g using small efficient lightweight kernel cnk cnl compute nodes larger system linux-derivative server i/o nodes traditional multi-user computer system job scheduling effect tasking problem processing peripheral resources massively parallel system job management system needs manage allocation computational communication resources well gracefully deal inevitable hardware failures tens thousands processors present although modern supercomputers use linux-based operating system manufacturer specific linux-derivative industry standard exists partly due fact differences hardware architectures require changes optimize operating system hardware design parallel architectures supercomputers often dictate use special programming techniques exploit speed software tools distributed processing include standard apis mpi pvm vtl open source-based software solutions beowulf common scenario environments pvm mpi loosely connected clusters openmp tightly coordinated shared memory machines used significant effort required optimize algorithm interconnect characteristics machine run aim prevent cpus wasting time waiting data nodes gpgpus hundreds processor cores programmed using programming models cuda opencl moreover quite difficult debug test parallel programs special techniques need used testing debugging applications opportunistic supercomputing form networked grid computing whereby super virtual computer many loosely coupled volunteer computing machines performs large computing tasks grid computing applied number large-scale embarrassingly parallel problems require supercomputing performance scales however basic grid cloud computing approaches rely volunteer computing handle traditional supercomputing tasks fluid dynamic simulations fastest grid computing system distributed computing project folding home f h f h reported 101 pflops x86 processing power 100 pflops contributed clients running various gpus rest various cpu systems berkeley open infrastructure network computing boinc platform hosts number distributed computing projects boinc recorded processing power 166 petaflops 762 thousand active computers hosts network great internet mersenne prime search gimps distributed mersenne prime search achieved 0.313 pflops 1.3 million computers internet primenet server supports gimps grid computing approach one earliest successful grid computing projects since 1997 quasi-opportunistic supercomputing form distributed computing whereby super virtual computer many networked geographically disperse computers performs computing tasks demand huge processing power quasi-opportunistic supercomputing aims provide higher quality service opportunistic grid computing achieving control assignment tasks distributed resources use intelligence availability reliability individual systems within supercomputing network however quasi-opportunistic distributed execution demanding parallel computing software grids achieved implementation grid-wise allocation agreements co-allocation subsystems communication topology-aware allocation mechanisms fault tolerant message passing libraries data pre-conditioning cloud computing recent rapid expansions development grabbed attention hpc users developers recent years cloud computing attempts provide hpc-as-a-service exactly like forms services currently available cloud software-as-a-service platform-as-a-service infrastructure-as-a-service hpc users may benefit cloud different angles scalability resources on-demand fast inexpensive hand moving hpc applications set challenges good examples challenges virtualization overhead cloud multi-tenancy resources network latency issues much research currently done overcome challenges make hpc cloud realistic possibility 2016 penguin computing r-hpc amazon web services univa silicon graphics international sabalcore gomput started offer hpc cloud computing penguin demand pod cloud bare-metal compute model execute code user given virtualized login node pod computing nodes connected via nonvirtualized 10 gbit/s ethernet qdr infiniband networks user connectivity pod data center ranges 50 mbit/s 1 gbit/s citing amazon ec2 elastic compute cloud penguin computing argues virtualization compute nodes suitable hpc penguin computing also criticized hpc clouds may allocated computing nodes customers far apart causing latency impairs performance hpc applications supercomputers generally aim maximum capability computing rather capacity computing capability computing typically thought using maximum computing power solve single large problem shortest amount time often capability system able solve problem size complexity computer e.g. complex weather simulation application capacity computing contrast typically thought using efficient cost-effective computing power solve somewhat large problems many small problems architectures lend supporting many users routine everyday tasks may lot capacity typically considered supercomputers given solve single complex problem general speed supercomputers measured benchmarked flops floating point operations per second terms mips million instructions per second case general-purpose computers measurements commonly used si prefix tera- combined shorthand tflops 10 flops pronounced teraflops peta- combined shorthand pflops 10 flops pronounced petaflops petascale supercomputers process one quadrillion 10 1000 trillion flops exascale computing performance exaflops eflops range eflops one quintillion 10 flops one million tflops single number reflect overall performance computer system yet goal linpack benchmark approximate fast computer solves numerical problems widely used industry flops measurement either quoted based theoretical floating point performance processor derived manufacturer processor specifications shown rpeak top500 lists generally unachievable running real workloads achievable throughput derived linpack benchmarks shown rmax top500 list linpack benchmark typically performs lu decomposition large matrix linpack performance gives indication performance real-world problems necessarily match processing requirements many supercomputer workloads example may require memory bandwidth may require better integer computing performance may need high performance i/o system achieve high levels performance since 1993 fastest supercomputers ranked top500 list according linpack benchmark results list claim unbiased definitive widely cited current definition fastest supercomputer available given time recent list computers appeared top top500 list peak speed given rmax rating source top500 2018 lenovo became worlds largest provider 117 top500 supercomputers stages supercomputer application may summarized following table ibm blue gene/p computer used simulate number artificial neurons equivalent approximately one percent human cerebral cortex containing 1.6 billion neurons approximately 9 trillion connections research group also succeeded using supercomputer simulate number artificial neurons equivalent entirety rat brain modern-day weather forecasting also relies supercomputers national oceanic atmospheric administration uses supercomputers crunch hundreds millions observations help make weather forecasts accurate 2011 challenges difficulties pushing envelope supercomputing underscored ibm abandonment blue waters petascale project advanced simulation computing program currently uses supercomputers maintain simulate united states nuclear stockpile 2010s china united states european union others competed first create 1 exaflop 10 one quintillion flops supercomputer erik p. debenedictis sandia national laboratories theorized zettaflops 10 one sextillion flops computer required accomplish full weather modeling could cover two-week time span accurately systems might built around 2030 many monte carlo simulations use algorithm process randomly generated data set particularly integro-differential equations describing physical transport processes random paths collisions energy momentum depositions neutrons photons ions electrons etc next step microprocessors may third dimension specializing monte carlo many layers could identical simplifying design manufacture process cost operating high performance supercomputers risen mainly due increasing power consumption mid 1990s top 10 supercomputer required range 100 kilowatt 2010 top 10 supercomputers required 1 2 megawatt 2010 study commissioned darpa identified power consumption pervasive challenge achieving exascale computing time megawatt per year energy consumption cost 1 million dollar supercomputing facilities constructed efficiently remove increasing amount heat produced modern multi-core central processing units based energy consumption green 500 list supercomputers 2007 2011 supercomputer 1 exaflops 2011 would required nearly 500 megawatt operating systems developed existing hardware conserve energy whenever possible cpu cores use execution parallelised application put low-power states producing energy savings supercomputing applications increasing cost operating supercomputers driving factor trend towards bundling resources distributed supercomputer infrastructure national supercomputing centres first emerged us followed germany japan european union launched partnership advanced computing europe prace aim creating persistent pan-european supercomputer infrastructure services support scientists across european union porting scaling optimizing supercomputing applications iceland built world first zero-emission supercomputer located thor data center reykjavik iceland supercomputer relies completely renewable sources power rather fossil fuels colder climate also reduces need active cooling making one greenest facilities world computers funding supercomputer hardware also became increasingly difficult mid 1990s top 10 supercomputer cost 10 million euros 2010 top 10 supercomputers required investment 40 50 million euros 2000s national governments put place different strategies fund supercomputers uk national government funded supercomputers entirely high performance computing put control national funding agency germany developed mixed funding model pooling local state funding federal funding many science-fiction writers depicted supercomputers works historical construction computers much fiction deals relations humans computers build possibility conflict eventually developing scenarios nature appear ai-takeover page examples supercomputers fiction include hal-9000 multivac machine stops glados evitable conflict vulcan hammer
node4:Wikipedia entry. Entry name: X-Wrt. Entry content: x-wrt x-wrt discontinued set packages patches provide web interface linux distribution openwrt based haserl nothing x window system allows web based management openwrt device originally created package openwrt white russian present found openwrt trunk webif package newer features dual-band support may present 31 october 2013 x-wrt homepage moved google code x-wrt extension openwrt end-user openwrt prior release 8.09 minimal web-management console whereas x-wrt supplied enhanced web-management console webif² 40 control status pages router webif² pages include graphical traffic system status monitoring pages control status network wireless security controls provided data logging booting cron nvram file editing linux package management snmp backup restore firmware upgrade wan vlan wi-fi wep wpa wds mac filtering firewall port forwarding dhcp dnsmasq hostnames ip control routing upnp qos dyndns wol openvpn pptp hotspots
node5:Wikipedia entry. Entry name: FinisTerrae. Entry content: finisterrae finisterrae 100th supercomputer top500 ranking november 2007 running 12.97 teraflops would rank position 258 list june 2008 also third powerful supercomputer spain marenostrum magerit located galicia project promoted xunta de galicia regional government galicia spanish national research council csic founded 1993 serve platform foster scientific innovation invest research development estimated base project completed 2010 expected reach top10 powerful supercomputers world reaches full capacity supercomputer physically hosted cesga main finisterrae characteristics depicted following table one special characteristics supercomputer ratio cores ram one reason received denomination singular technical scientific installation spanish government denomination given installations value makes singular way installations include canary island grand telescope alba synchrotron even third fastest supercomputer spain projects require special amounts memory held first second supercomputer therefore must executed finisterrae finisterrae supercomputer located cesga integrated system shared-memory nodes smp numa architecture finisterrae composed 144 computational nodes hierarchic storing system main purpose aim supercomputer research supercomputer mainly used three universities located galicia universidade da coruña universidade de santiago de compostela universidade de vigo well research organizations like csic main projects held supercomputer divided four fields
node6:Wikipedia entry. Entry name: Dryad_(programming). Entry content: dryad programming dryad research project microsoft research general purpose runtime execution data parallel applications microsoft made several preview releases technology available add-ons windows hpc server 2008 r2 however october 2011 microsoft discontinued active development dryad shifting focus apache hadoop framework application written dryad modeled directed acyclic graph dag dag defines dataflow application vertices graph defines operations performed data computational vertices written using sequential constructs devoid concurrency mutual exclusion semantics dryad runtime parallelizes dataflow graph distributing computational vertices across various execution engines multiple processor cores computer different physical computers connected network cluster scheduling computational vertices available hardware handled dryad runtime without explicit intervention developer application administrator network flow data one computational vertex another implemented using communication channels vertices physical implementation realized tcp/ip streams shared memory temporary files stream used runtime transport finite number structured items dryad defines domain-specific language implemented via c++ library used create model dryad execution graph computational vertices written using standard c++ constructs make accessible dryad runtime must encapsulated class inherits codice_1 base class graph defined adding edges edges added using composition operator defined dryad connects two graphs two nodes graph edge managed code wrappers dryad api also written exist several high-level language compilers use dryad runtime examples include scope structured computations optimized parallel execution dryadlinq
node7:Wikipedia entry. Entry name: Serializability. Entry content: serializability concurrency control databases transaction processing transaction management various transactional applications e.g. transactional memory software transactional memory centralized distributed transaction schedule serializable outcome e.g. resulting database state equal outcome transactions executed serially i.e without overlapping time transactions normally executed concurrently overlap since efficient way serializability major correctness criterion concurrent transactions executions considered highest level isolation transactions plays essential role concurrency control supported general purpose database systems strong strict two-phase locking ss2pl popular serializability mechanism utilized database systems various variants since early days 1970s serializability theory provides formal framework reason analyze serializability techniques though mathematical nature fundamentals informally without mathematics notation introduced serializability used keep data data item consistent state serializability property transaction schedule history relates isolation property database transaction schedules serializable likely generate erroneous outcomes well known examples transactions debit credit accounts money related schedules serializable total sum money may preserved money could disappear generated nowhere violations possibly needed invariant preservations caused one transaction writing stepping erasing written another transaction become permanent database happen serializability maintained specific order transactions requested application enforced independently underlying serializability mechanisms mechanisms typically indifferent specific order generate unpredictable partial order typically compatible multiple serial orders transactions partial order results scheduling orders concurrent transactions data access operations depend many factors major characteristic database transaction atomicity means either commits i.e. operations results take effect database aborts rolled-back operations results effect database nothing semantics transaction real systems transactions abort many reasons serializability sufficient correctness schedules also need possess recoverability abort property recoverability means committed transactions read data written aborted transactions whose effects exist resulting database states serializability currently compromised purpose many applications better performance cases application correctness harmed compromising recoverability would quickly violate database integrity well transactions results external database schedule recoverability property recoverable schedule recovers aborts i.e. aborts harm integrity committed transactions resulting database false without recoverability likely integrity violations resulting incorrect database data need special typically manual corrective actions database implementing recoverability general form may result cascading aborts aborting one transaction may result need abort second transaction third results waste already partially executed transactions may result also performance penalty avoiding cascading aborts aca cascadelessness special case recoverability exactly prevents phenomena often practice special case aca utilized strictness strictness allows efficient database recovery failure note recoverability property needed even database failure occurs database recovery failure needed rather needed correctly automatically handle aborts may unrelated database failure recovery failure many applications unlike finances absolute correctness needed example retrieving list products according specification cases matter much product whose data updated short time ago appear list even meets specification typically appear list tried short time later commercial databases provide concurrency control whole range isolation levels fact controlled serializability violations order achieve higher performance higher performance means better transaction execution rate shorter average transaction response time transaction duration snapshot isolation example popular widely utilized efficient relaxed serializability method many characteristics full serializability still short unfit many situations another common reason nowadays distributed serializability relaxation see requirement availability internet products services requirement typically answered large-scale data replication straightforward solution synchronizing replicas updates database object including updates single atomic distributed transaction however many replicas transaction large may span enough number several computers networks likely unavailable thus transaction likely end abort miss purpose consequently optimistic replication lazy replication often utilized e.g. many products services google amazon yahoo like serializability relaxed compromised eventual consistency case relaxation done applications expected harmed technique classes schedules defined relaxed serializability properties either contain serializability class incomparable mechanisms enforce serializability need execute real time almost real time transactions running high rates order meet requirement special cases serializability sufficient conditions serializability enforced effectively utilized two major types serializability exist view-serializability conflict-serializability view-serializability matches general definition serializability given conflict-serializability broad special case i.e. schedule conflict-serializable also view-serializable necessarily opposite conflict-serializability widely utilized easier determine covers substantial portion view-serializable schedules determining view-serializability schedule np-complete problem class problems difficult-to-compute excessively time-consuming known solutions operations upon data read write write either insert modify delete two operations conflicting different transactions upon datum data item least one write pair conflicting operations conflict type either read-write write-read write-write conflict transaction second operation pair said conflict transaction first operation general definition conflicting operations also complex operations may consist several simple read/write operations requires noncommutative changing order also changes combined result operation needs atomic using proper system support order considered operation commutativity check example read-read operations commutative unlike read-write possibilities thus read-read conflict another complex example operations increment decrement counter write operations modify counter need considered conflicting write-write conflict type since commutative thus increment-decrement conflict e.g. already supported old ibm ims fast path precedence time order pairs conflicting non-commutative operations important checking equivalence serial schedule since different schedules consisting transactions transformed one another changing orders different transactions operations different transactions interleaving since changing orders commutative operations non-conflicting change overall operation sequence result i.e. schedule outcome outcome preserved order change non-conflicting operations typically conflicting operations change order means schedule transformed serial schedule without changing orders conflicting operations changing orders non-conflicting preserving operation order inside transaction outcome schedules schedule conflict-serializable definition conflicts reason blocking transactions delays non-materialized conflicts aborting transactions due serializability violation prevention possibilities reduce performance thus reducing number conflicts e.g. commutativity possible way increase performance transaction issue/request conflicting operation conflict another transaction conflicting operation delayed executed e.g. blocked lock executed materialized conflicting operations relevant conflict serializability see schedule compliance conflict serializability tested precedence graph serializability graph serialization graph conflict graph committed transactions schedule directed graph representing precedence transactions schedule reflected precedence conflicting operations transactions following observation key characterization conflict serializability cycles committed transactions prevented aborting undecided neither committed aborted transaction cycle precedence graph transactions otherwise turn cycle committed transactions committed transaction aborted one transaction aborted per cycle required sufficient number break eliminate cycle aborts possible happen mechanisms unnecessary serializability probability cycle generation typically low nevertheless situation carefully handled typically considerable amount overhead since correctness involved transactions aborted due serializability violation prevention restarted executed immediately serializability-enforcing mechanisms typically maintain precedence graph data structure rather prevent break cycles implicitly e.g. ss2pl strong strict two-phase locking ss2pl common mechanism utilized database systems since early days 1970s ss name ss2pl newer though enforce conflict serializability strictness special case recoverability allows effective database recovery failure schedule mechanism datum locked transaction accessing read write operation item marked associated lock certain type depending operation performed specific transaction implementation various models different lock types exist models locks may change type transaction life result access another transaction may blocked typically upon conflict lock delays completely prevents conflict materialized reflected precedence graph blocking conflicting operation depending lock type transaction access operation type employing ss2pl mechanism means locks data behalf transaction released transaction ended either committed aborted ss2pl name resulting schedule property well also called rigorousness ss2pl special case proper subset two-phase locking 2pl mutual blocking transactions results deadlock execution transactions stalled completion reached thus deadlocks need resolved complete transactions execution release related computing resources deadlock reflection potential cycle precedence graph would occur without blocking conflicts materialized deadlock resolved aborting transaction involved potential cycle breaking cycle often detected using wait-for graph graph conflicts blocked locks materialized also defined graph non-materialized conflicts conflicts materialized reflected precedence graph affect serializability indicates transaction waiting release one locks transaction transactions cycle graph means deadlock aborting one transaction per cycle sufficient break cycle transactions aborted due deadlock resolution restarted executed immediately known mechanisms include conflict serializability techniques general form provide recoverability special enhancements needed adding recoverability concurrency control techniques three major types main differences technique types conflict types generated pessimistic method blocks transaction operation upon conflict generates non-materialized conflict optimistic method block generates materialized conflict semi-optimistic method generates conflict types conflict types generated chronological orders transaction operations invoked independently type conflict cycle committed transactions materialized conflicts precedence graph conflict graph represents serializability violation avoided maintaining serializability cycle non-materialized conflicts wait-for graph represents deadlock situation resolved breaking cycle cycle types result conflicts broken technique type conflicts detected considered similar overhead materialized non-materialized conflicts typically using mechanisms like locking either blocking locks blocking recording conflict materialized conflicts blocking method typically context switching occurs upon conflict additional incurred overhead otherwise blocked transactions related computing resources remain idle unutilized may worse alternative conflicts occur frequently optimistic methods typically advantage different transaction loads mixes transaction types one technique type i.e. either optimistic pessimistic may provide better performance unless schedule classes inherently blocking i.e. implemented without data-access operations blocking e.g. 2pl ss2pl sco see chart also implemented using optimistic techniques e.g. serializability recoverability multi-version concurrency control mvcc common way today increase concurrency performance generating new version database object time object written allowing transactions read operations several last relevant versions object depending scheduling method mvcc combined serializability techniques listed except serializablesi originally mvcc-based utilized general-purpose dbms products mvcc especially popular nowadays relaxed serializability see method snapshot isolation si provides better performance known serializability mechanisms cost possible serializability violation certain cases serializablesi efficient enhancement si make serializable intended provide efficient serializable solution serializablesi analyzed via general theory mvcc distributed serializability serializability schedule transactional distributed system e.g. distributed database system system characterized distributed transactions also called global transactions i.e. transactions span computer processes process abstraction general sense depending computing environment e.g. operating system thread possibly network nodes distributed transaction comprises one several local sub-transactions states described database transaction local sub-transaction comprises single process processes typically fail together e.g. single processor core distributed transactions imply need atomic commit protocol reach consensus among local sub-transactions whether commit abort protocols vary simple one-phase handshake among processes fail together sophisticated protocols like two-phase commit handle complicated cases failure e.g. process node communication etc failure distributed serializability major goal distributed concurrency control correctness proliferation internet cloud computing grid computing small portable powerful computing devices e.g. smartphones need effective distributed serializability techniques ensure correctness among distributed applications seems increase distributed serializability achieved implementing distributed versions known centralized techniques typically distributed versions require utilizing conflict information either materialized non-materialized conflicts equivalently transaction precedence blocking information conflict serializability usually utilized generated locally rather different processes remote locations thus information distribution needed e.g. precedence relations lock information timestamps tickets distributed system relatively small scale message delays across system small centralized concurrency control methods used unchanged certain processes nodes system manage related algorithms however large-scale system e.g. grid cloud due distribution information substantial performance penalty typically incurred even distributed versions methods vs. centralized ones used primarily due computer communication latency also information distributed related techniques typically scale well well-known example respect scalability problems distributed lock manager distributes lock non-materialized conflict information across distributed system implement locking techniques
node8:Wikipedia entry. Entry name: Cloud_computing. Entry content: cloud computing cloud computing on-demand availability computer system resources especially data storage computing power without direct active management user term generally used describe data centers available many users internet large clouds predominant today often functions distributed multiple locations central servers connection user relatively close may designated edge server clouds may limited single organization enterprise clouds available many organizations public cloud cloud computing relies sharing resources achieve coherence economies scale advocates public hybrid clouds note cloud computing allows companies avoid minimize up-front infrastructure costs proponents also claim cloud computing allows enterprises get applications running faster improved manageability less maintenance enables teams rapidly adjust resources meet fluctuating unpredictable demand cloud providers typically use pay-as-you-go model lead unexpected operating expenses administrators familiarized cloud-pricing models availability high-capacity networks low-cost computers storage devices well widespread adoption hardware virtualization service-oriented architecture autonomic utility computing led growth cloud computing 2019 linux used type operating systems used including microsoft offerings thus described dominant cloud computing popularized amazon.com releasing elastic compute cloud product 2006 references phrase cloud computing appeared early 1996 first known mention compaq internal document cloud symbol used represent networks computing equipment original arpanet early 1977 csnet 1981—both predecessors internet word cloud used metaphor internet standardized cloud-like shape used denote network telephony schematics simplification implication specifics end points network connected relevant purposes understanding diagram term cloud used refer platforms distributed computing early 1993 apple spin-off general magic used describing paired telescript personalink technologies wired april 1994 feature bill andy excellent adventure ii andy hertzfeld commented telescript general magic distributed programming language 1960s initial concepts time-sharing became popularized via rje remote job entry terminology mostly associated large vendors ibm dec. full-time-sharing solutions available early 1970s platforms multics ge hardware cambridge ctss earliest unix ports dec hardware yet data center model users submitted jobs operators run ibm mainframes overwhelmingly predominant 1990s telecommunications companies previously offered primarily dedicated point-to-point data circuits began offering virtual private network vpn services comparable quality service lower cost switching traffic saw fit balance server use could use overall network bandwidth effectively began use cloud symbol denote demarcation point provider responsible users responsible cloud computing extended boundary cover servers well network infrastructure computers became diffused scientists technologists explored ways make large-scale computing power available users time-sharing experimented algorithms optimize infrastructure platform applications prioritize cpus increase efficiency end users use cloud metaphor virtualized services dates least general magic 1994 used describe universe places mobile agents telescript environment could go described andy hertzfeld use cloud metaphor credited general magic communications employee david hoffman based long-standing use networking telecom addition use general magic also used promoting associated personalink services cloud computing existence since 2000 august 2006 amazon created subsidiary amazon web services introduced elastic compute cloud ec2 april 2008 google released google app engine beta early 2008 nasa opennebula enhanced reservoir european commission-funded project became first open-source software deploying private hybrid clouds federation clouds mid-2008 gartner saw opportunity cloud computing shape relationship among consumers services use services sell observed organizations switching company-owned hardware software assets per-use service-based models projected shift computing ... result dramatic growth products areas significant reductions areas 2008 u.s. national science foundation began cluster exploratory program fund academic research using google-ibm cluster technology analyze massive amounts data february 2010 microsoft released microsoft azure announced october 2008 july 2010 rackspace hosting nasa jointly launched open-source cloud-software initiative known openstack openstack project intended help organizations offering cloud-computing services running standard hardware early code came nasa nebula platform well rackspace cloud files platform open source offering along open-source solutions cloudstack ganeti opennebula attracted attention several key communities several studies aim comparing open sources offerings based set criteria march 1 2011 ibm announced ibm smartcloud framework support smarter planet among various components smarter computing foundation cloud computing critical part june 7 2012 oracle announced oracle cloud cloud offering poised first provide users access integrated set solutions including applications saas platform paas infrastructure iaas layers may 2012 google compute engine released preview rolled general availability december 2013 2019 revealed linux used microsoft azure dominant elsewhere goal cloud computing allow users take benefit technologies without need deep knowledge expertise one cloud aims cut costs helps users focus core business instead impeded obstacles main enabling technology cloud computing virtualization virtualization software separates physical computing device one virtual devices easily used managed perform computing tasks operating system–level virtualization essentially creating scalable system multiple independent computing devices idle computing resources allocated used efficiently virtualization provides agility required speed operations reduces cost increasing infrastructure utilization autonomic computing automates process user provision resources on-demand minimizing user involvement automation speeds process reduces labor costs reduces possibility human errors cloud computing uses concepts utility computing provide metrics services used cloud computing attempts address qos quality service reliability problems grid computing models cloud computing shares characteristics cloud computing exhibits following key characteristics national institute standards technology definition cloud computing identifies five essential characteristics though service-oriented architecture advocates everything service acronyms eaas xaas simply aas cloud-computing providers offer services according different models three standard models per nist infrastructure service iaas platform service paas software service saas models offer increasing abstraction thus often portrayed layers stack infrastructure- platform- software-as-a-service need related example one provide saas implemented physical machines bare metal without using underlying paas iaas layers conversely one run program iaas access directly without wrapping saas infrastructure service iaas refers online services provide high-level apis used dereference various low-level details underlying network infrastructure like physical computing resources location data partitioning scaling security backup etc hypervisor runs virtual machines guests pools hypervisors within cloud operational system support large numbers virtual machines ability scale services according customers varying requirements linux containers run isolated partitions single linux kernel running directly physical hardware linux cgroups namespaces underlying linux kernel technologies used isolate secure manage containers containerisation offers higher performance virtualization hypervisor overhead also container capacity auto-scales dynamically computing load eliminates problem over-provisioning enables usage-based billing iaas clouds often offer additional resources virtual-machine disk-image library raw block storage file object storage firewalls load balancers ip addresses virtual local area networks vlans software bundles nist definition cloud computing describes iaas consumer able deploy run arbitrary software include operating systems applications consumer manage control underlying cloud infrastructure control operating systems storage deployed applications possibly limited control select networking components e.g. host firewalls iaas-cloud providers supply resources on-demand large pools equipment installed data centers wide-area connectivity customers use either internet carrier clouds dedicated virtual private networks deploy applications cloud users install operating-system images application software cloud infrastructure model cloud user patches maintains operating systems application software cloud providers typically bill iaas services utility computing basis cost reflects amount resources allocated consumed nist definition cloud computing defines platform service paas vendors offer development environment application developers provider typically develops toolkit standards development channels distribution payment paas models cloud providers deliver computing platform typically including operating system programming-language execution environment database web server application developers develop run software cloud platform instead directly buying managing underlying hardware software layers paas underlying computer storage resources scale automatically match application demand cloud user allocate resources manually integration data management providers also use specialized applications paas delivery models data examples include ipaas integration platform service dpaas data platform service ipaas enables customers develop execute govern integration flows ipaas integration model customers drive development deployment integrations without installing managing hardware middleware dpaas delivers integration—and data-management—products fully managed service dpaas model paas provider customer manages development execution programs building data applications customer dpaas users access data data-visualization tools platform service paas consumers manage control underlying cloud infrastructure including network servers operating systems storage control deployed applications possibly configuration settings application-hosting environment nist definition cloud computing defines software service software service saas model users gain access application software databases cloud providers manage infrastructure platforms run applications saas sometimes referred on-demand software usually priced pay-per-use basis using subscription fee saas model cloud providers install operate application software cloud cloud users access software cloud clients cloud users manage cloud infrastructure platform application runs eliminates need install run application cloud user computers simplifies maintenance support cloud applications differ applications scalability—which achieved cloning tasks onto multiple virtual machines run-time meet changing work demand load balancers distribute work set virtual machines process transparent cloud user sees single access-point accommodate large number cloud users cloud applications multitenant meaning machine may serve one cloud-user organization pricing model saas applications typically monthly yearly flat fee per user prices become scalable adjustable users added removed point proponents claim saas gives business potential reduce operational costs outsourcing hardware software maintenance support cloud provider enables business reallocate operations costs away hardware/software spending personnel expenses towards meeting goals addition applications hosted centrally updates released without need users install new software one drawback saas comes storing users data cloud provider server result could unauthorized access data mobile backend service model also known backend service baas web app mobile app developers provided way link applications cloud storage cloud computing services application programming interfaces apis exposed applications custom software development kits sdks services include user management push notifications integration social networking services relatively recent model cloud computing baas startups dating 2011 later trends indicate services gaining significant mainstream traction enterprise consumers serverless computing cloud computing code execution model cloud provider fully manages starting stopping virtual machines necessary serve requests requests billed abstract measure resources required satisfy request rather per virtual machine per hour despite name actually involve running code without servers serverless computing named business person owns system purchase rent provision servers virtual machines back-end code run function service faas service-hosted remote procedure call leverages serverless computing enable deployment individual functions cloud run response events faas included broader term serverless computing terms may also used interchangeably private cloud cloud infrastructure operated solely single organization whether managed internally third party hosted either internally externally undertaking private cloud project requires significant engagement virtualize business environment requires organization reevaluate decisions existing resources improve business every step project raises security issues must addressed prevent serious vulnerabilities self-run data centers generally capital intensive significant physical footprint requiring allocations space hardware environmental controls assets refreshed periodically resulting additional capital expenditures attracted criticism users still buy build manage thus benefit less hands-on management essentially lacking economic model makes cloud computing intriguing concept cloud called public cloud services rendered network open public use public cloud services may free technically may little difference public private cloud architecture however security consideration may substantially different services applications storage resources made available service provider public audience communication effected non-trusted network generally public cloud service providers like amazon web services aws ibm oracle microsoft google operate infrastructure data center access generally via internet aws oracle microsoft google also offer direct connect services called aws direct connect oracle fastconnect azure expressroute cloud interconnect respectively connections require customers purchase lease private connection peering point offered cloud provider hybrid cloud composition public cloud private environment private cloud on-premise resources remain distinct entities bound together offering benefits multiple deployment models hybrid cloud also mean ability connect collocation managed and/or dedicated services cloud resources gartner defines hybrid cloud service cloud computing service composed combination private public community cloud services different service providers hybrid cloud service crosses isolation provider boundaries ca n't simply put one category private public community cloud service allows one extend either capacity capability cloud service aggregation integration customization another cloud service varied use cases hybrid cloud composition exist example organization may store sensitive client data house private cloud application interconnect application business intelligence application provided public cloud software service example hybrid cloud extends capabilities enterprise deliver specific business service addition externally available public cloud services hybrid cloud adoption depends number factors data security compliance requirements level control needed data applications organization uses another example hybrid cloud one organizations use public cloud computing resources meet temporary capacity needs met private cloud capability enables hybrid clouds employ cloud bursting scaling across clouds cloud bursting application deployment model application runs private cloud data center bursts public cloud demand computing capacity increases primary advantage cloud bursting hybrid cloud model organization pays extra compute resources needed cloud bursting enables data centers create in-house infrastructure supports average workloads use cloud resources public private clouds spikes processing demands specialized model hybrid cloud built atop heterogeneous hardware called cross-platform hybrid cloud cross-platform hybrid cloud usually powered different cpu architectures example x86-64 arm underneath users transparently deploy scale applications without knowledge cloud hardware diversity kind cloud emerges rise arm-based system-on-chip server-class computing community cloud shares infrastructure several organizations specific community common concerns security compliance jurisdiction etc whether managed internally third-party either hosted internally externally costs spread fewer users public cloud private cloud cost savings potential cloud computing realized cloud computing platform assembled distributed set machines different locations connected single network hub service possible distinguish two types distributed clouds public-resource computing volunteer cloud multicloud use multiple cloud computing services single heterogeneous architecture reduce reliance single vendors increase flexibility choice mitigate disasters etc differs hybrid cloud refers multiple cloud services rather multiple deployment modes public private legacy issues transferring large amounts data cloud well data security data cloud initially hampered adoption cloud big data much data originates cloud advent bare-metal servers cloud become solution use cases including business analytics geospatial analysis hpc cloud refers use cloud computing services infrastructure execute high-performance computing hpc applications applications consume considerable amount computing power memory traditionally executed clusters computers 2016 handful companies including r-hpc amazon web services univa silicon graphics international sabalcore gomput penguin computing offered high performance computing cloud penguin demand pod cloud one first non-virtualized remote hpc services offered pay-as-you-go basis penguin computing launched hpc cloud 2016 alternative amazon ec2 elastic compute cloud uses virtualized computing nodes cloud architecture systems architecture software systems involved delivery cloud computing typically involves multiple cloud components communicating loose coupling mechanism messaging queue elastic provision implies intelligence use tight loose coupling applied mechanisms others cloud engineering application engineering disciplines cloud computing brings systematic approach high-level concerns commercialization standardization governance conceiving developing operating maintaining cloud computing systems multidisciplinary method encompassing contributions diverse areas systems software web performance information technology engineering security platform risk quality engineering cloud computing poses privacy concerns service provider access data cloud time could accidentally deliberately alter delete information many cloud providers share information third parties necessary purposes law order without warrant permitted privacy policies users must agree start using cloud services solutions privacy include policy legislation well end users choices data stored users encrypt data processed stored within cloud prevent unauthorized access identity management systems also provide practical solutions privacy concerns cloud computing systems distinguish authorized unauthorized users determine amount data accessible entity systems work creating describing identities recording activities getting rid unused identities according cloud security alliance top three threats cloud insecure interfaces api data loss leakage hardware failure —which accounted 29 25 10 cloud security outages respectively together form shared technology vulnerabilities cloud provider platform shared different users may possibility information belonging different customers resides data server additionally eugene schultz chief technology officer emagined security said hackers spending substantial time effort looking ways penetrate cloud real achilles heels cloud infrastructure making big holes bad guys get data hundreds thousands companies stored large cloud servers hackers theoretically gain control huge stores information single attack—a process called hyperjacking examples include dropbox security breach icloud 2014 leak dropbox breached october 2014 7 million users passwords stolen hackers effort get monetary value bitcoins btc passwords able read private data well data indexed search engines making information public problem legal ownership data user stores data cloud cloud provider profit many terms service agreements silent question ownership physical control computer equipment private cloud secure equipment site someone else control public cloud delivers great incentive public cloud computing service providers prioritize building maintaining strong management secure services small businesses n't expertise security could find secure use public cloud risk end users understand issues involved signing cloud service persons sometimes n't read many pages terms service agreement click accept without reading important cloud computing becoming popular required services work example intelligent personal assistant apple siri google fundamentally private cloud seen secure higher levels control owner however public cloud seen flexible requires less time money investment user according bruce schneier downside limited customization options cloud computing cheaper economics scale and—like outsourced task—you tend get get restaurant limited menu cheaper personal chef cook anything want fewer options much cheaper price feature bug also suggests cloud provider might meet legal needs businesses need weigh benefits cloud computing risks cloud computing control back end infrastructure limited cloud vendor cloud providers often decide management policies moderates cloud users able deployment cloud users also limited control management applications data services includes data caps placed cloud users cloud vendor allocating certain amount bandwidth customer often shared among cloud users privacy confidentiality big concerns activities instance sworn translators working stipulations nda might face problems regarding sensitive data encrypted cloud computing beneficial many enterprises lowers costs allows focus competence instead matters infrastructure nevertheless cloud computing proven limitations disadvantages especially smaller business operations particularly regarding security downtime technical outages inevitable occur sometimes cloud service providers csps become overwhelmed process serving clients may result temporary business suspension since technology systems rely internet individual able access applications server data cloud outage cloud computing still subject research driving factor evolution cloud computing chief technology officers seeking minimize risk internal outages mitigate complexity housing network computing hardware in-house major cloud technology companies invest billions dollars per year cloud research development example 2011 microsoft committed 90 percent 9.6 billion r budget cloud research investment bank centaur partners late 2015 forecasted saas revenue would grow 13.5 billion 2011 32.8 billion 2016 issue carrying investigations cloud storage devices physically accessed generated number changes way digital evidence located collected new process models developed formalize collection scenarios existing digital forensics tools employed access cloud storage networked drives although slow process generating large amount internet traffic alternative approach deploy tool processes cloud organizations using office 365 'e5 subscription option use microsoft built-in ediscovery resources although provide functionality typically required forensic process
node9:Wikipedia entry. Entry name: Dataflow. Entry content: dataflow dataflow term used computing various meanings depending application context term used context software architecture data flow relates stream processing reactive programming dataflow software paradigm based idea disconnecting computational actors stages pipelines execute concurrently dataflow also called stream processing reactive programming multiple data-flow/stream processing languages various forms see stream processing data-flow hardware see dataflow architecture alternative classic von neumann architecture obvious example data-flow programming subset known reactive programming spreadsheets user enters new values instantly transmitted next logical actor formula calculation distributed data flows also proposed programming abstraction captures dynamics distributed multi-protocols data-centric perspective characteristic data flow programming promotes high-level functional specifications simplifies formal reasoning system components hardware architectures dataflow major topic computer architecture research 1970s early 1980s jack dennis mit pioneered field static dataflow architectures designs use conventional memory addresses data dependency tags called static dataflow machines machines allow multiple instances routines executed simultaneously simple tags could differentiate designs use content-addressable memory called dynamic dataflow machines arvind use tags memory facilitate parallelism data flows around computer components computer gets entered input devices leave output devices printer etc. dataflow network network concurrently executing processes automata communicate sending data channels see message passing kahn process networks named gilles kahn processes determinate implies determinate process computes continuous function input streams output streams network determinate processes determinate thus computing continuous function implies behavior networks described set recursive equations solved using fixed point theory movement transformation data represented series shapes lines
node10:Wikipedia entry. Entry name: VyOS. Entry content: vyos vyos open source network operating system based debian gnu/linux vyos provides free routing platform competes directly commercially available solutions well known network providers vyos run standard amd64 i586 systems able used router firewall platform cloud deployments brocade communications stopped development vyatta core edition vyatta routing software small group enthusiasts took last community edition worked building open source fork live place end life vc vyos version 1.0.0 hydrogen released december 22 2013 october 9 2014 version 1.1.0 helium released versions released thus far based debian 6.0 squeeze available 32-bit images 64-bit images physical virtual machines january 28 2019 version 1.2.0 crux released version 1.2.0 based debian 8 jessie version 1.0 1.1 named elements new naming scheme based constellations used version 1.2 vyos ova image vmware released february 3 2014 maintenance release allows convenient setup vyos vmware platform includes vmware tools paravirtual drivers ova image downloaded standard download site starting version 1.0.2 amazon ec2 customers select vyos ami image deprecated removed february 2018 starting version 1.1.7 aws customers use new marketplace vyos ami starting version 1.2.0 aws customers deploy new marketplace ami new offering comes support starting version 1.2.0 azure customers use vyos azure
node11:Wikipedia entry. Entry name: Hardware_scout. Entry content: hardware scout hardware scout technique uses otherwise idle processor execution resources perform prefetching cache misses thread stalled cache miss processor pipeline checkpoints register file switches runahead mode continues issue instructions thread waiting memory thread execution run-ahead mode known scout thread data returns memory processor restores register file contents checkpoint switches back normal execution mode computation run-ahead mode discarded processor nevertheless scouting provides speedup memory level parallelism mlp increased cache lines brought cache hierarchy often used processor switches back normal mode sun rock processor later canceled used form hardware scout however computations run-ahead mode depend cache miss may retired immediately allows prefetching traditional instruction-level parallelism scouting simultaneous multithreading smt use hardware threads fight memory wall scouting scout thread runs instructions instruction stream instruction causes pipeline stall case smt smt thread executes instruction another context thus smt increases throughput processor scouting increases performance lowering number cache misses
node12:Wikipedia entry. Entry name: Autonomous_decentralized_system. Entry content: autonomous decentralized system autonomous decentralized system ads decentralized system composed modules components designed operate independently capable interacting meet overall goal system design paradigm enables system continue function event component failures also enables maintenance repair carried system remains operational autonomous decentralized systems number applications including industrial production lines railway signalling robotics ads recently expanded control applications service application embedded systems thus autonomous decentralized service systems autonomous decentralized device systems autonomous decentralized systems first proposed 1977 ads received significant attention systems deployed japanese railway systems many years safely 7 billion trips proving value concept japan railway ads considered smart train also learns recognizing outstanding contribution dr. kinji mori received numerous awards including 2013 ieee life fellow 2012 distinguished service award tokyo metropolitan government 2012 distinguished specialist among 1000 world chinese government 2008 ieice fellow 1995 ieee fellow 1994 research development award excellence achievers science technology agency 1994 ichimura industrial prize 1992 technology achievement award society instrument control engineers 1988 national patent award science technology agency 1988 mainichi technology prize excellence dr. mori donated cash ichimura industrial price ieee fund ieee kanai award since 1977 ads subject research many researchers world including us japan eu particularly germany china ads decoupled architecture component subsystem communicates message passing using shared data fields unique feature ads central operating system coordinator instead subsystem manages functionality coordination subsystems subsystem needs interact subsystems broadcasts shared data fields containing request subsystems broadcast include identification address subsystem rather subsystems depending purpose function receive broadcast message make determination action take ads moves service-oriented architecture soa adss autonomous decentralized service system data transmission carried esb enterprise service bus agent service receives data esb acts according service specification results transmitted esb autonomous agents ads also similar blackboard system used ai collection agents act upon seeing data change common blackboard ads may include human loop human autonomous agents co-learn time perform system functionality cloud computing also uses autonomous computing architecture framework different ads one application ads software testing particularly combinatorial testing framework proposed based ads concurrent combinatorial testing using ar ta ieee international symposium autonomous decentralized systems isads major conference topic symposium biannual event first symposium held 1993 isads 1993 march 30 april 1 1993 kawasaki japan isads 1995： april 25–27 1995 phoenix arizona usa isads 1997：april 9–11 1997 berlin germany isads 1999：march 20–23 1999 tokyo japan isads 2001：march 26–28 2001 dallas texas usa isads 2003： april 9–11 2003 pisa italy isads 2005：april 4–8 2005 chengdu china isads 2007： march 21–23 2007 sedona arizona usa isads 2009： march 23–25 2009 athens greece isads 2011：june 29 july 1 2011 kobe japan isads 2013：march 6–8 2013 mexico city mexico isads 2015：march 25–27 2015 taichung taiwan
node13:Wikipedia entry. Entry name: NimbleX. Entry content: nimblex nimblex small slackware-based linux distribution optimized run cd usb drive network environment nimblex praised fast boots well small disk footprint considered surprising distribution using kde desktop environment nimblex also remarked web site allows users generate custom bootable images using web browser also covered mainstream romanian press first linux distribution put together romanian nimblex reported boot fast important factor user experience running optical media usb drives review 2007 nimblex edition noted expect boot less half time live cd fedora ubuntu knoppix takes recent review 2008 edition also noted nimblex speed easily one fastest bootups 've seen even tried hinder cripple boot time even dog slow pendrive old dirt test machine still booted amazingly fast desktop applications also fast nimblex also compact distribution review 2007 edition wondered managed include kde mention applications included size 200 mb window-based graphical user interface slimmed kde fit firefox web browser office documents editor koffice pdf reader media player play almost file formats without need install codec photo editing software gimp anti-virus bluetooth support integrated name applications included 2008 installation process major linux distributions customized creating custom installation disks usually called spins creating spin requires certain amount expertise creating spin run installation media requires customization nimblex makes process user-friendly providing web interface process similar embedded linux distributions e.g freewrt features made distribution popular early judge forums nimblex attracted surprisingly large number users relatively unknown distribution nimblex uses 2.6 kernel default gui kde slower computers default desktop environment exchanged one lower resource usage like fluxbox xfce typical office web browsing messaging components included nimblex hardly offers graphical administration tools — administration tasks like adding new user performed command line tradeoff allows nimblex small installation footprint — typical installation 400 megabytes additional applications installed using graphical installer gslapt codice_1 command line brings automatic resolution dependencies slackware packages text-mode hard driver installer available codice_2 considered beta quality 2008 edition 2008 edition comes three standard install images 200mb two smaller even ones 100 69mb installers allow customizations packets installation however nimblex 2008 uses kde 3.5.9 nimblex 2010 beta version also present site based kde 4 support new hardware user also enable compiz fusion via link desktop openoffice.org included instead koffice provided office suite nimblex included 200 mb package useful applications like firefox web browser koffice pdf reader kopete instant messenger klamav anti-virus gimp photo editor bluetooth support remote connection pc important software supported bigger nimblex package openoffice.org java python samba wine windows applications emulator many applications compiled community included distribution nimblex 2008 criticized irresponsible lacking common security features box even though clamav anti-virus guarddog firewall installed default non-root user account created installation root password required log desktop default root password displayed nimblex web site nimblex 2010 also fixed applications removed another problem nimblex packages created repackaging slackware packages since nimblex installs fewer libraries sometimes results uninstallable unusable packages reviews
node14:Wikipedia entry. Entry name: Oracle_iPlanet_Web_Server. Entry content: oracle iplanet web server oracle iplanet web server oiws web server designed medium large business applications oracle iplanet web server builds earlier sun java system web server sun one web server iplanet web server netscape enterprise server products oracle iplanet web server available solaris windows hp-ux aix gnu/linux supports jsp java servlet technologies php nsapi cgi coldfusion netscape enterprise server web server developed originally netscape communications corporation 1996 based 1994 release netsite product renamed sun java system web server reflecting product acquisition sun microsystems oracle acquired sun 2010 oracle iplanet web server january 2009 sun open sourced core components sun java system web server 7.0 bsd license open web server open source version kept sync commercial releases january 2010 7.0 update 8 since oracle acquisition sun open source releases 2010 oracle renamed product sun java system web server oracle iplanet web server although documentation links still process updated reflect
node15:Wikipedia entry. Entry name: Distributed_concurrency_control. Entry content: distributed concurrency control distributed concurrency control concurrency control system distributed computer network bernstein et al 1987 weikum vossen 2001 database systems transaction processing transaction management distributed concurrency control refers primarily concurrency control distributed database also refers concurrency control multidatabase multi-transactional object environment e.g. federated database grid computing cloud computing environments major goal distributed concurrency control distributed serializability global serializability multidatabase systems distributed concurrency control poses special challenges beyond centralized one primarily due communication computer latency often requires special techniques like distributed lock manager fast computer networks low latency like switched fabric e.g. infiniband commitment ordering commit ordering general serializability technique achieves distributed serializability global serializability particular effectively large scale without concurrency control information distribution e.g. local precedence relations locks timestamps tickets thus without performance penalties typical serializability techniques raz 1992 common distributed concurrency control technique strong strict two-phase locking ss2pl also named rigorousness also common centralized concurrency control technique ss2pl provides serializability strictness commitment ordering properties strictness special case recoverability utilized effective recovery failure commitment ordering allows participating general solution global serializability large-scale distribution complex transactions distributed locking typical heavy performance penalty due delays latency saved using atomic commitment protocol needed distributed database distributed transactions atomicity e.g. two-phase commit simpler one reliable system together local commitment ordering variant e.g. local ss2pl instead distributed locking achieve global serializability entire system commitment ordering theoretical results applicable whenever atomic commitment utilized partitioned distributed recoverable transactional data including automatic distributed deadlock resolution technique utilized also large-scale parallel database single large database residing many nodes using distributed lock manager replaced homogeneous multidatabase comprising many relatively small databases loosely defined process supports transactions partitioned data participates atomic commitment complies fitting single node using commitment ordering e.g. ss2pl strict co together appropriate atomic commitment protocol without using distributed lock manager
node16:Wikipedia entry. Entry name: Univa. Entry content: univa univa privately held software company develops workload management products manage applications services containers univa software-defined computing infrastructure workload orchestration solutions enable companies scale computer resources across on-premises cloud computing hybrid systems company based chicago offices canada germany univa develops sells supports univa grid engine software univa version grid engine workload distributed resource management technology univa announced january 2011 hired personnel formerly working oracle sun microsystems grid engine development october 2 2014 univa roll new version grid engine new functionality improved scalability performance resource control small large clusters october 22 2013 univa announced acquired intellectual property copyrights trademarks pertaining grid engine technology oracle would support oracle grid engine customers univa announced navops may 2016 new business unit products enable enterprises easily migrate cloud hybrid cloud navops launch migrates hpc workload cloud univa offers consulting services installation tuning configuration products univa founded 2004 name univa corporation carl kesselman ian foster steve tuecke time primarily known providing open source products technical support based around globus toolkit september 17 2007 company announced would merge austin texas-based united devices operate new name univa ud company operated univa ud formally dropping ud returning common use univa corporation leadership current ceo gary tyreman univa announced january 17 2011 hired principal founding engineers grid engine team oct 22 2013 univa announced acquired intellectual property well copyrights trademarks pertaining grid engine technology oracle take supporting oracle grid engine customers june 2014 technical partnership racing point f1 team formerly sahara force india univa announced may 2016 univa announced new business unit navops product line based grid engine cluster workload scheduling technology originally sun microsystems later acquired univa oracle navops line differs univa grid engine enables enterprises easily migrate cloud hybrid could increase efficiencies run containers scale march 2018 univa open sources navops launch née unicloud project tortuga apache 2.0 license
node17:Wikipedia entry. Entry name: Sun_Microsystems. Entry content: sun microsystems sun microsystems inc. american company sold computers computer components software information technology services created java programming language solaris operating system zfs network file system nfs sparc sun contributed significantly evolution several key computing technologies among unix risc processors thin client computing virtualized computing sun founded february 24 1982 height sun headquarters santa clara california part silicon valley former west campus agnews developmental center april 20 2009 announced oracle corporation would acquire sun 7.4 billion deal completed january 27 2010 sun products included computer servers workstations built risc-based sparc processor architecture well x86-based amd opteron intel xeon processors sun also developed storage systems suite software products including solaris operating system developer tools web infrastructure software identity management applications technologies included java platform nfs general sun proponent open systems particularly unix also major contributor open-source software evidenced 1 billion purchase 2008 mysql open-source relational database management system various times sun manufacturing facilities several locations worldwide including newark california hillsboro oregon linlithgow scotland however time company acquired oracle outsourced manufacturing responsibilities initial design became sun first unix workstation sun-1 conceived andy bechtolsheim graduate student stanford university palo alto california bechtolsheim originally designed sun workstation stanford university network communications project personal cad workstation designed around motorola 68000 processor advanced memory management unit mmu support unix operating system virtual memory support built first ones spare parts obtained stanford department computer science silicon valley supply houses february 24 1982 scott mcnealy andy bechtolsheim vinod khosla stanford graduate students founded sun microsystems bill joy berkeley primary developer berkeley software distribution bsd joined soon counted one original founders sun name derived initials stanford university network sun profitable first quarter july 1982 1983 sun known producing 68k-based systems high-quality graphics computers dec vax run 4.2bsd licensed computer design manufacturers typically used build multibus-based systems running unix unisoft sun initial public offering 1986 stock symbol sunw sun workstations later sun worldwide symbol changed 2007 java sun stated brand awareness associated java platform better represented company current strategy sun logo features four interleaved copies word sun form rotationally symmetric ambigram designed professor vaughan pratt also stanford initial version logo orange sides oriented horizontally vertically subsequently rotated stand one corner re-colored purple later blue dot-com bubble sun began making much money shares rose dramatically also began spending much hiring workers building genuine demand much web start-up companies anticipating business would never happen 2000 bubble burst sales sun important hardware division went free-fall customers closed shop auctioned high-end servers several quarters steep losses led executive departures rounds layoffs cost cutting december 2001 stock fell 1998 pre-bubble level 100 kept falling faster many tech companies year later dipped 10 tenth even 1990 bounced back 20 mid-2004 sun closed newark california factory consolidated manufacturing hillsboro oregon 2006 rest newark campus put market 2004 sun canceled two major processor projects emphasized high instruction-level parallelism operating frequency instead company chose concentrate processors optimized multi-threading multiprocessing ultrasparc t1 processor codenamed niagara company also announced collaboration fujitsu use japanese company processor chips mid-range high-end sun servers servers announced april 17 2007 m-series part sparc enterprise series february 2005 sun announced sun grid grid computing deployment offered utility computing services priced us 1 per cpu/hour processing per gb/month storage offering built upon existing 3,000-cpu server farm used internal r 10 years sun marketed able achieve 97 utilization august 2005 first commercial use grid announced financial risk simulations later launched first software service product january 2005 sun reported net profit 19 million fiscal 2005 second quarter first time three years followed net loss 9 million gaap basis third quarter 2005 reported april 14 2005 january 2007 sun reported net gaap profit 126 million revenue 3.337 billion fiscal second quarter shortly following news announced kohlberg kravis roberts kkr would invest 700 million company sun engineering groups bangalore beijing dublin grenoble hamburg prague st. petersburg tel aviv tokyo trondheim 2007–2008 sun posted revenue 13.8 billion 2 billion cash first-quarter 2008 losses 1.68 billion revenue fell 7 12.99 billion sun stock lost 80 value november 2007 november 2008 reducing company market value 3 billion falling sales large corporate clients sun announced plans lay 5,000 6,000 workers 15–18 work force expected save 700 million 800 million year result moves also taking 600 million charges may 11 2009 following shareholders held 100,000 common shares sun 9.50 per share offered oracle received amounts indicated acquisition closed first decade sun history company positioned products technical workstations competing successfully low-cost vendor workstation wars 1980s shifted hardware product line emphasize servers storage high-level telecom control systems operational support systems service predominantly used sun equipment sun originally used motorola 68000 family central processing units sun-1 sun-3 computer series sun-1 employed 68000 cpu sun-2 series 68010 sun-3 series based 68020 later sun-3x using 68030 1987 company began using sparc risc processor architecture design computer systems starting sun-4 line sparc initially 32-bit architecture sparc v7 introduction sparc v9 architecture 1995 added 64-bit extensions sun developed several generations sparc-based computer systems including sparcstation ultra sun blade series workstations sparcserver netra enterprise sun fire line servers early 1990s company began extend product line include large-scale symmetric multiprocessing servers starting four-processor sparcserver 600mp followed 8-processor sparcserver 1000 20-processor sparccenter 2000 based work done conjunction xerox parc 1995 company introduced sun ultra series machines equipped first 64-bit implementation sparc processors ultrasparc late 1990s transformation product line favor large 64-bit smp systems accelerated acquisition cray business systems division silicon graphics 32-bit 64-processor cray superserver 6400 related sparccenter led 64-bit sun enterprise 10000 high-end server otherwise known starfire september 2004 sun made available systems ultrasparc iv first multi-core sparc processor followed ultrasparc iv+ september 2005 revisions higher clock speeds 2007 cpus used powerful enterprise class high-end cc-numa servers developed sun sun fire e25k november 2005 sun launched ultrasparc t1 notable ability concurrently run 32 threads execution 8 processor cores intent drive efficient use cpu resources particular importance data centers increasing need reduce power air conditioning demands much comes heat generated cpus t1 followed 2007 ultrasparc t2 extended number threads per core 4 8 sun open sourced design specifications t1 t2 processors via opensparc project 2006 sun ventured blade server high density rack-mounted systems market sun blade distinct sun blade workstation april 2007 sun released sparc enterprise server products jointly designed sun fujitsu based fujitsu sparc64 vi later processors m-class sparc enterprise systems include high-end reliability availability features later t-series servers also badged sparc enterprise rather sun fire april 2008 sun released servers ultrasparc t2 plus smp capable version ultrasparc t2 available 2 4 processor configurations first coolthreads cpu multi-processor capability made possible build standard rack-mounted servers could simultaneously process massive 256 cpu threads hardware sun sparc enterprise t5440 considered record industry since 2010 development sun machines based sparc architecture including new sparc t-series servers sparc t3 t4 chips done part oracle corporation hardware division late 1980s sun also marketed intel 80386-based machine sun386i designed hybrid system running sunos time supporting dos applications remained market brief time follow-up 486i upgrade announced prototype units ever manufactured sun brief first foray x86 systems ended early 1990s decided concentrate sparc retire last motorola systems 386i products move dubbed mcnealy wood behind one arrowhead even sun kept hand x86 world release solaris pc compatibles began shipping 1993 1997 sun acquired diba inc. followed later acquisition cobalt networks 2000 aim building network appliances single function computers meant consumers sun also marketed network computer term popularized eventually trademarked oracle javastation diskless system designed run java applications although none business initiatives particularly successful cobalt purchase gave sun toehold return x86 hardware market 2002 sun introduced first general purpose x86 system lx50 based part previous cobalt system expertise also sun first system announced support linux well solaris 2003 sun announced strategic alliance amd produce x86/x64 servers based amd opteron processor followed shortly sun acquisition kealia startup founded original sun founder andy bechtolsheim focusing high-performance amd-based servers following year sun launched opteron-based sun fire v20z v40z servers java workstation w1100z w2100z workstations september 12 2005 sun unveiled new range opteron-based servers sun fire x2100 x4100 x4200 servers designed scratch team led bechtolsheim address heat power consumption issues commonly faced data centers july 2006 sun fire x4500 x4600 systems introduced extending line x64 systems support solaris also linux microsoft windows january 22 2007 sun announced broad strategic alliance intel intel endorsed solaris mainstream operating system mission critical unix xeon processor-based systems contributed engineering resources opensolaris sun began using intel xeon processor x64 server line starting sun blade x6250 server module introduced june 2007 may 5 2008 amd announced operating system research center osrc expanded focus include optimization sun opensolaris xvm virtualization products amd based processors although sun initially known hardware company software history began founding 1982 co-founder bill joy one leading unix developers time contributed vi editor c shell significant work developing tcp/ip bsd unix os sun later developed software java programming language acquired software staroffice virtualbox mysql sun used community-based open-source licensing major technologies support products open source technologies gnome-based desktop software called java desktop system originally code-named madhatter distributed solaris operating system one point linux sun supported java enterprise system middleware stack linux released source code solaris open-source common development distribution license via opensolaris community sun positioning includes commitment indemnify users software intellectual property disputes concerning software offers support services variety pricing bases including per-employee per-socket 2006 report prepared eu unu-merit stated sun largest corporate contributor open source movements world according report sun open source contributions exceed combined total next five largest commercial contributors sun best known unix systems reputation system stability consistent design philosophy sun first workstation shipped unisoft v7 unix later 1982 sun began providing sunos customized 4.1bsd unix operating system workstations late 1980s tapped sun help develop next release branded unix 1988 announced would purchase 20 stake sun unix system v release 4 svr4 jointly developed sun sun used svr4 foundation solaris 2.x became successor sunos 4.1.x later retrospectively named solaris 1.x mid-1990s ensuing unix wars largely subsided sold unix interests relationship two companies significantly reduced 1992 sun also sold interactive unix operating system acquired bought interactive systems corporation eastman kodak company popular unix variant pc platform major competitor market leader sco unix sun focus interactive unix diminished favor solaris sparc x86 systems dropped product 2001 sun dropped solaris 2.x version numbering scheme solaris 2.6 release 1997 following version branded solaris 7 first 64-bit release intended new ultrasparc cpus based sparc v9 architecture within next four years successors solaris 8 solaris 9 released 2000 2002 respectively following several years difficult competition loss server market share competitors linux-based systems sun began include linux part strategy 2002 sun supported red hat enterprise linux suse linux enterprise server x64 systems companies canonical ltd. wind river systems montavista also supported versions linux sun sparc-based systems 2004 cultivated reputation one microsoft vocal antagonists sun entered joint relationship resolving various legal entanglements two companies receiving us 1.95 billion settlement payments sun supported microsoft windows x64 systems announced collaborative agreements microsoft including plans support virtualization environments 2005 company released solaris 10 new version included large number enhancements operating system well novel features previously unseen industry solaris 10 update releases continued next 8 years last release sun microsystems solaris 10 10/09 following updates released oracle new license agreement final release solaris 10 1/13 previously sun offered separate variant solaris called trusted solaris included augmented security features multilevel security least privilege access model solaris 10 included many capabilities trusted solaris time initial release solaris 10 11/06 included solaris trusted extensions give remaining capabilities needed make functional successor trusted solaris releasing solaris 10 source code opened cddl free software license developed open contributing opensolaris community sxce used svr4 .pkg packaging supported opensolaris releases used ips following acquisition sun oracle opensolaris continued develop open illumos illumos distributions oracle corporation continued develop opensolaris next solaris release changing back license proprietary released oracle solaris 11 november 2011 java platform developed sun james gosling early 1990s objective allowing programs function regardless device used sparking slogan write run anywhere wora objective entirely achieved prompting riposte write debug everywhere java regarded largely hardware- operating system-independent java initially promoted platform client-side applets running inside web browsers early examples java applications hotjava web browser hotjava views suite however since java successful server side internet platform consists three major parts java programming language java virtual machine jvm several java application programming interfaces apis design java platform controlled vendor user community java community process jcp java object-oriented programming language since introduction late 1995 became one world popular programming languages java programs compiled byte code executed jvm regardless environment java apis provide extensive set library routines apis evolved standard edition java se provides basic infrastructure gui functionality enterprise edition java ee aimed large software companies implementing enterprise-class application servers micro edition java used build software devices limited resources mobile devices november 13 2006 sun announced would licensing java implementation gnu general public license released java compiler jvm time february 2009 sun entered battle microsoft adobe systems promoted rival platforms build software applications internet javafx development platform music video applications builds java programming language 1999 sun acquired german software company star division office suite staroffice sun later released openoffice.org gnu lgpl sissl sun industry standards source license openoffice.org supported microsoft office file formats though perfectly available many platforms primarily linux microsoft windows mac os x solaris used open source community principal differences staroffice openoffice.org staroffice supported sun available either single-user retail box kit per-user blocks licensing enterprise included wider range fonts document templates commercial quality spellchecker staroffice also contained commercially licensed functions add-ons openoffice.org either replaced open-source free variants present packages native support opendocument format 2007 sun announced sun xvm virtualization datacenter automation product suite commodity hardware sun also acquired virtualbox 2008 earlier virtualization technologies sun like dynamic system domains dynamic reconfiguration specifically designed high-end sparc servers logical domains supports ultrasparc t1/t2/t2 plus server platforms sun marketed sun ops center provisioning software datacenter automation client side sun offered virtual desktop solutions desktop environments applications could hosted datacenter users accessing environments wide range client devices including microsoft windows pcs sun ray virtual display clients apple macintoshes pdas combination supported devices variety networks supported lan wan public internet virtual desktop products included sun ray server software sun secure global desktop sun virtual desktop infrastructure sun acquired mysql ab developer mysql database 2008 us 1 billion ceo jonathan schwartz mentioned blog optimizing performance mysql one priorities acquisition february 2008 sun began publish results mysql performance optimization work sun contributed postgresql project java platform sun contributed supported java db sun offered software products software development infrastructure services many developed house others came acquisitions including tarantella waveset technologies seebeyond vaau sun acquired many netscape non-browser software products part deal involving netscape merger aol software products initially offered iplanet brand sun-netscape alliance ended re-branded sun one sun open network environment sun java system sun middleware product branded java enterprise system jes marketed web application serving communication calendaring directory identity management service-oriented architecture sun open esb software suites available free charge systems running solaris red hat enterprise linux hp-ux windows support available optionally sun developed data center management software products included solaris cluster high availability software grid management package called sun grid engine firewall software sunscreen network equipment providers telecommunications customers sun developed sun netra high-availability suite sun produced compilers development tools sun studio brand building developing solaris linux applications sun entered software service saas market zembly social cloud-based computing platform project kenai open-source project hosting service sun sold storage systems complement system offerings also made several storage-related acquisitions june 2 2005 sun announced would purchase storage technology corporation storagetek us 4.1 billion cash 37.00 per share deal completed august 2005 2006 sun introduced sun storagetek 5800 system first application-aware programmable storage solution 2008 sun contributed source code storagetek 5800 system bsd license sun announced sun open storage platform 2008 built open source technologies late 2008 sun announced sun storage 7000 unified storage systems codenamed amber road transparent placement data systems solid-state drives ssd conventional hard drives managed zfs take advantage speed ssds economy conventional hard disks storage products included sun fire x4500 storage server sam-qfs filesystem storage management software sun marketed sun constellation system high-performance computing hpc even introduction sun constellation system 2007 sun products use many top500 systems supercomputing centers sun hpc clustertools product set message passing interface mpi libraries tools running parallel jobs solaris hpc clusters beginning version 7.0 sun switched implementation mpi open mpi donated engineering resources open mpi project sun participant openmp language committee sun studio compilers tools implemented openmp specification shared memory parallelization 2006 sun built tsubame supercomputer june 2008 fastest supercomputer asia sun built ranger texas advanced computing center tacc 2007 ranger peak performance 500 tflops 6th powerful supercomputer top500 list november 2008 sun announced opensolaris distribution integrated sun hpc products others notable sun employees included john gilmore whitfield diffie radia perlman marc tremblay sun early advocate unix-based networked computing promoting tcp/ip especially nfs reflected company motto network computer coined john gage james gosling led team developed java programming language jon bosak led creation xml specification w3c sun staff published articles company blog site staff encouraged use site blog aspect work personal life restrictions placed staff commercially confidential material jonathan i. schwartz one first ceos large companies regularly blog postings frequently quoted analyzed press 2005 sun microsystems one first fortune 500 companies instituted formal social media program sun sold oracle corporation 2009 5.6b sun staff asked share anecdotes experiences sun web site containing videos stories photographs 27 years sun made available september 2 2009 october sun announced second round thousands employees laid blamed partially delays approval merger transaction completed early 2010 january 2011 oracle agreed pay 46 million settle charges submitted false claims us federal government agencies paid kickbacks systems integrators february 2011 sun former menlo park california campus sold announced would become headquarters facebook sprawling facility built around enclosed courtyard nicknamed sun quentin september 1 2011 sun india legally became part oracle delayed due legal issues indian court
node18:Wikipedia entry. Entry name: G.ho.st. Entry content: g.ho.st g.ho.st usually pronounced ghost trading name ghost inc. service name url company hosted computer operating system web desktop service name acronym global hosted operating system old url g.ho.st domain hack using são tomé príncipe .st country extension april 2010 ghost closed service due competition lack funding g.ho.st service provided web-based working environment mimicked classic desktop provided personal computer operating systems users able create save return working environment different physical computers mobile phones g.ho.st called virtual computer services considered operating systems traditional sense although sometimes referred web operating systems whilst include gui e.g desktop virtual file system application management security contain kernel interface physical hardware therefore use service operating system required supporting least web browser service run july 2009 software entered beta stage development remained stage beta launch near jerusalem attended quartet representative former uk prime minister tony blair company primary investor benchmark capital g.ho.st hosted amazon web services utilizing cloud computing backend delivering consumer version cloud computing according g.ho.st website longer accessible planned additionally offer commercial fully featured scalable private cloud file system ghost cloud file system cfs would run within customer amazon web services account business model would based surcharges ghost collected amazon company received growing press coverage relating technology israelis palestinians worked partners build company products time considered joint palestinian israeli technology startup company first company offer employee stock options palestinian territories march 3 2010 ghost.cc formed g.ho.st sent users following e-mail dear ghost user hope enjoying free ghost service regrettably changes marketplace mean longer economical us host ghost service closing service around march 15 instead focusing licensing selling technology larger companies advise migrate important folders files emails another secure place march 15 might like consider google docs microsoft skydrive files services gmail yahoo mail email instructions migrating data included really sorry inconvenience may cause grateful fantastic support community similar services
node19:Wikipedia entry. Entry name: Sun_Cloud. Entry content: sun cloud sun cloud on-demand cloud computing service operated sun microsystems prior acquisition oracle corporation sun cloud compute utility provided access substantial computing resource internet us 1 per cpu-hour launched sun grid march 2006 based supported open source technologies solaris 10 sun grid engine java platform sun cloud delivered enterprise computing power resources internet enabling developers researchers scientists businesses optimize performance speed time results accelerate innovation without investment infrastructure early 2010 oracle announced discontinuing sun cloud project since sunday march 7 2010 network.com web site inaccessible typical application could run compute utility fit following parameters resources collections files contain user data executable jobs compute utility concept define elements unit work submitted sun cloud compute utility major elements job include name shell script controlling program execution required arguments shell script list resources must place job run run specific instantiation job description submitted sun cloud compute utility runs occur job submitted compute utility execution job one submits runs cloud sun cloud cpu usage aggregated rounded nearest whole hour example job used 1000 cpus one minute would aggregated 1000 cpu minutes 16.67 cpu hours software rounds 17 hours job would billed us 17 march 13 2007 sun announced launch application catalog online service allows developers isvs develop publish applications enabling communities scientists academics life sciences education engineering fields accelerate innovation complete research projects quickly less expensively network.com application catalog gives users immediate online access popular isv open-source applications easy-to-use web portal contractual obligation users upload run applications create personal library favorites take advantage pre-installed configured applications giving instant productivity portal gives everything need conduct analysis complete complex computational tasks help speed scientific discovery shorten time market new products simply select application upload data get results fast network.com enables anyone publish applications application catalog take advantage powerful solaris 10-based cloud platform users publish applications private library access whenever want also share applications others retaining data securely private space applications available catalog include category examples types suitable applications include
node20:Wikipedia entry. Entry name: CITIC_Telecom_CPC. Entry content: citic telecom cpc citic telecom international cpc limited formerly known psinet hk cpcnet wholly owned subsidiary citic telecom international holdings limited technological company involved managed cloud computing ip networking information security data center services company owns operates computing security networking facilities communications linkages in-country local sales offices 2016 citic telecom cpc extended global reach acquiring linx telecommunication b.v. linx telecommunications became one first asian ict service providers points-of-presence along “ one belt one road ” infrastructure framework including amsterdam frankfurt warsaw vilnius lithuania stockholm helsinki finland saint petersburg russia moscow tallinn estonia riga latvia kiev ukraine budapest hungary almaty kazakhstan tibilisi georgia baku azerbaijan locations citic pacific acquired psinet hk 2001 following year psinet hk renamed cpcnet subsequently renamed “ citic telecom cpc ” six 6 points-of-presence beijing shanghai guangzhou shenzhen hong kong taiwan citic telecom cpc began providing mpls vpn services hong kong taiwan companies business operations mainland china 2006 citic telecom cpc launched information security services year citic telecom cpc expanded presence greater china south-east asia 2010 citic telecom international holdings limited acquired china enterprise ict solutions limited citic telecom cpc 2011 cloud computing solution launched 2011 cpcnet renamed citic telecom international cpc limited citic telecom cpc became one first vmware vcloud ® powered service providers greater china 2016 saw citic telecom cpc commence acquired acquiring linx telecommunications linx telecommunication b.v. renamed merged company citic telecom cpc europe acquisition extended citic telecom cpc global infrastructure points-of-presence central asia central eastern europe markets including regions encompassed china “ one belt one road ” economic cooperation initiative 2017 citic telecom cpc also became first iaas provider receive new cloud-centric iso27017 certification hong kong citic telecom cpc thus became first asian managed services provider points-of-presence across multitude countries along new “ digital silk road ” including amsterdam frankfurt warsaw vilnius lithuania stockholm helsinki finland saint petersburg russia moscow tallinn estonia riga latvia kiev ukraine budapest hungary almaty kazakhstan tibilisi georgia baku azerbaijan locations acquisition expanded citic telecom cpc global footprint asia pacific north america western europe encompass central asia eastern europe parent company citic telecom international holdings limited hkse 1883 ict service provider asia pacific subsidiary company china enterprise ict solutions limited “ china entercom ” “ cec ” founded 2000 information communications technology ict service provider china
node21:Wikipedia entry. Entry name: Cloud-based_design_and_manufacturing. Entry content: cloud-based design manufacturing cloud-based design manufacturing cbdm refers service-oriented networked product development model service consumers able configure products services reconfigure manufacturing systems infrastructure-as-a-service iaas platform-as-a-service paas hardware-as-a-service haas software-as-a-service saas adapted original cloud computing paradigm introduced realm computer-aided product development cloud-based design manufacturing gaining significant momentum attention academia industry cloud-based design manufacturing includes two aspects cloud-based design cloud-based manufacturing another related concept cloud manufacturing general popular cloud-based design cbd refers networked design model leverages cloud computing service-oriented architecture soa web 2.0 e.g. social network sites semantic web technologies support cloud-based engineering design services distributed collaborative environments cloud-based manufacturing cbm refers networked manufacturing model exploits on-demand access shared collection diversified distributed manufacturing resources form temporary reconfigurable production lines enhance efficiency reduce product lifecycle costs allow optimal resource allocation response variable-demand customer generated tasking enabling technologies cloud-based design manufacturing include cloud computing web 2.0 internet things iot service-oriented architecture soa term cloud-based design manufacturing cbdm initially coined dazhong wu david rosen dirk schaefer georgia tech 2012 purpose articulating new paradigm digital manufacturing design innovation distributed collaborative settings main objective cbdm reduce time cost associated maintaining information communication technology ict infrastructures design manufacturing enhancing digital manufacturing design innovation distributed collaborative environments adapting rapidly changing market demands 2014 research group also published worldwide first two books subjects cloud-based design manufacturing cbdm social product development spd springer edited dirk schaefer cbdm exhibits following key characteristics cbdm differs traditional collaborative distributed design manufacturing systems web-based systems agent-based systems number perspectives including 1 computing architecture 2 data storage 3 sourcing process 4 information communication technology infrastructure 5 business model 6 programming model 7 communication similar cloud computing cbdm services categorized four major deployment models public cloud private cloud hybrid cloud community cloud",wikics,nc
"Classify the wikipedia page represented by node0 using its subgraph data (text attributes and connections) as follows.

node0: High school social app for anonymous sharing, created by Callahan & Levy; launched 2014, re-released 2015, used in 20k US schools by 2016. Features filters, support, threat detection, $16.4M funding in 2016.

the connection relationship among the nodes mentioned:
 .

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",operating systems,"node0: High school social app for anonymous sharing, created by Callahan & Levy; launched 2014, re-released 2015, used in 20k US schools by 2016. Features filters, support, threat detection, $16.4M funding in 2016.","node0:Wikipedia entry. Entry name: After_School_(app). Entry content: school app school ios android social network mobile application allows users defined network currently high schools share anonymous text-based posts images others july 2016 school users 20,000 american high schools according ceo michael callahan app created network “ teens could use express reach others ask offer help fellow teens distress. ” app created michael callahan cory levy one inc. debuted mid-november 2014 re-release app april 2015 school implemented “ mature content ” filters age verification 24/7 live anonymous support first fastest internet response system threats february 2016 school announced raising 16.4 million series round app also detects threatening harmful messages using language algorithms enforces single-report immediate user removal violations",wikics,nc
"Classify the wikipedia page represented by node5 using its subgraph data (text attributes and connections) as follows.

node0: Pioneering 1971 wireless network using Aloha random access protocol, influencing Ethernet/Wi-Fi; managed collisions via acknowledgments.  
node1: High-speed transport protocol with error control options, optimized for satellite networks, offering reliable multicast and congestion avoidance.  
node2: Asynchronous serial communication uses start/stop bits for device synchronization, common in early modems and teletypewriters.  
node3: Optical networking tech (DTM) combining circuit-switching for guaranteed QoS in media and mobile TV networks.  
node4: Spread spectrum multiple access technique using unique codes for simultaneous users, used in mobile networks like CDMA2000 and IS-95.  
node5: Ethernet's media access control, detects collisions and uses random back-off for retransmission in shared networks.  
node6: 100Mbps optical ring network standard (FDDI) for LANs, using token passing and dual rings for redundancy, later supplanted by Ethernet.  
node7: Data link layer unit containing headers, payload, and checks; essential for network transmission and synchronization.
node8: Ethernet in the first mile uses IEEE 802.3ah standards for customer access via copper/fiber, including EtherLoop and EPON, enabling Ethernet over existing telecom infrastructure.  
node9: NNTP (Network News Transfer Protocol) enables Usenet article exchange via TCP port 119/563, supporting clients and servers with RFC updates and TLS for secure transfers.  
node10: L2TPv3 is an IETF Layer 2 tunneling protocol for IP networks, simplifying MPLS alternatives with lower overhead for carrier Ethernet services.  
node11: Usenet is a decentralized worldwide discussion system using newsgroups, NNTP, and hierarchies, predating web forums but declining due to spam and modern platforms.  
node12: UDP hole punching enables NAT traversal for peer-to-peer communication via public servers, using keep-alive packets and working across symmetric NATs.  
node13: MAC sublayer manages hardware addresses, collision control, and data integrity in Ethernet/wireless networks, ensuring medium access and frame validation.
node14: QUIC is a Google-developed transport protocol over UDP, improving web performance via multiplexing, reduced latency, and integrated encryption, submitted to IETF for standardization.  
node15: IP-over-Avian-Carriers humorously uses pigeons to carry IP packets, noted for high latency but potential high throughput via physical storage, detailed in April Fools' RFCs.  
node16: EPON over Coax extends Ethernet Passive Optical Networks to use coaxial cables, unifying network management under IEEE standards for hybrid fiber-coax systems.  
node17: Chirp Spread Spectrum uses frequency-modulated chirps for robust low-power communication, used in IEEE 802.15.4a for low-rate wireless networks and ranging.  
node18: Multipath TCP enables simultaneous use of multiple paths for redundancy and speed, backward-compatible with TCP, enhancing wireless and datacenter performance.  
node19: Peg DHCP humorously assigns IP addresses via wooden pegs and leaflets, an April 1998 RFC used in early hacking events for static address distribution.  
node20: Licklider Transmission Protocol (LTP) provides reliable deep-space communication, part of Bundle Protocol, designed for interplanetary networks and legacy space systems.  
node21: Shared medium describes a communication channel shared by multiple users, using multiplexing (e.g., TDM/FDM) and access methods like CSMA for packet/circuit switching.  
node22: STUN helps applications detect NATs and discover public IP/port via a server, aiding protocols like WebRTC and SIP for traversal and ICE setup.  
node23: Frequency-Division Multiplexing splits bandwidth into non-overlapping channels (e.g., radio, TV, DSL) to carry multiple signals via frequency-separated subcarriers.  
node24: Space-Division Multiple Access uses smart antennas to spatially direct signals, reducing interference and improving efficiency in cellular networks via beamforming.  
node25: Berkeley R-commands (rlogin/rsh/rcp) enabled early Unix remote access but were insecure, leading to replacement by SSH due to authentication flaws.
node26: PCF in IEEE 802.11 uses a point coordinator with priority via PIFS, enabling contention-free periods via CF-poll frames in WLANs.  
node27: Naemon is an open-source Nagios fork for monitoring systems/networks, offering alerts on Linux distributions under GPL v2.  
node28: Verilog is an IEEE-standard HDL for digital circuit design, supporting synthesis and verification with blocking/non-blocking assignments.  
node29: TDMA divides channels into time slots for multiple users, used in 2G cellular systems like GSM, requiring synchronization to manage mobility limits.  
node30: Mobile Slotted Aloha (MS-Aloha) combines TDMA and slotted Aloha for vehicle networks, using reservations to handle mobility and collisions.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node0, node5>,<node0, node13>,<node0, node23>,<node0, node24>,<node0, node26>,<node0, node29>,<node0, node30>,<node1, node6>,<node1, node9>,<node1, node13>,<node2, node7>,<node3, node6>,<node3, node9>,<node3, node13>,<node4, node5>,<node4, node13>,<node4, node17>,<node4, node23>,<node4, node24>,<node4, node26>,<node4, node29>,<node4, node30>,<node5, node7>,<node5, node8>,<node5, node13>,<node5, node16>,<node5, node21>,<node5, node23>,<node5, node24>,<node5, node26>,<node5, node29>,<node5, node30>,<node6, node9>,<node6, node10>,<node6, node13>,<node6, node14>,<node6, node18>,<node6, node20>,<node6, node22>,<node6, node25>,<node7, node29>,<node8, node16>,<node9, node10>,<node9, node11>,<node9, node13>,<node9, node14>,<node9, node15>,<node9, node18>,<node9, node19>,<node9, node20>,<node9, node22>,<node9, node25>,<node9, node27>,<node10, node13>,<node12, node22>,<node13, node14>,<node13, node17>,<node13, node18>,<node13, node20>,<node13, node22>,<node13, node23>,<node13, node24>,<node13, node25>,<node13, node26>,<node13, node29>,<node13, node30>,<node14, node18>,<node15, node19>,<node17, node23>,<node17, node24>,<node17, node29>,<node21, node23>,<node21, node29>,<node23, node24>,<node23, node26>,<node23, node29>,<node23, node30>,<node24, node26>,<node24, node29>,<node24, node30>,<node26, node28>,<node26, node29>,<node26, node30>,<node29, node30>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",internet protocols,"node0: Pioneering 1971 wireless network using Aloha random access protocol, influencing Ethernet/Wi-Fi; managed collisions via acknowledgments.  
node1: High-speed transport protocol with error control options, optimized for satellite networks, offering reliable multicast and congestion avoidance.  
node2: Asynchronous serial communication uses start/stop bits for device synchronization, common in early modems and teletypewriters.  
node3: Optical networking tech (DTM) combining circuit-switching for guaranteed QoS in media and mobile TV networks.  
node4: Spread spectrum multiple access technique using unique codes for simultaneous users, used in mobile networks like CDMA2000 and IS-95.  
node5: Ethernet's media access control, detects collisions and uses random back-off for retransmission in shared networks.  
node6: 100Mbps optical ring network standard (FDDI) for LANs, using token passing and dual rings for redundancy, later supplanted by Ethernet.  
node7: Data link layer unit containing headers, payload, and checks; essential for network transmission and synchronization.
node8: Ethernet in the first mile uses IEEE 802.3ah standards for customer access via copper/fiber, including EtherLoop and EPON, enabling Ethernet over existing telecom infrastructure.  
node9: NNTP (Network News Transfer Protocol) enables Usenet article exchange via TCP port 119/563, supporting clients and servers with RFC updates and TLS for secure transfers.  
node10: L2TPv3 is an IETF Layer 2 tunneling protocol for IP networks, simplifying MPLS alternatives with lower overhead for carrier Ethernet services.  
node11: Usenet is a decentralized worldwide discussion system using newsgroups, NNTP, and hierarchies, predating web forums but declining due to spam and modern platforms.  
node12: UDP hole punching enables NAT traversal for peer-to-peer communication via public servers, using keep-alive packets and working across symmetric NATs.  
node13: MAC sublayer manages hardware addresses, collision control, and data integrity in Ethernet/wireless networks, ensuring medium access and frame validation.
node14: QUIC is a Google-developed transport protocol over UDP, improving web performance via multiplexing, reduced latency, and integrated encryption, submitted to IETF for standardization.  
node15: IP-over-Avian-Carriers humorously uses pigeons to carry IP packets, noted for high latency but potential high throughput via physical storage, detailed in April Fools' RFCs.  
node16: EPON over Coax extends Ethernet Passive Optical Networks to use coaxial cables, unifying network management under IEEE standards for hybrid fiber-coax systems.  
node17: Chirp Spread Spectrum uses frequency-modulated chirps for robust low-power communication, used in IEEE 802.15.4a for low-rate wireless networks and ranging.  
node18: Multipath TCP enables simultaneous use of multiple paths for redundancy and speed, backward-compatible with TCP, enhancing wireless and datacenter performance.  
node19: Peg DHCP humorously assigns IP addresses via wooden pegs and leaflets, an April 1998 RFC used in early hacking events for static address distribution.  
node20: Licklider Transmission Protocol (LTP) provides reliable deep-space communication, part of Bundle Protocol, designed for interplanetary networks and legacy space systems.  
node21: Shared medium describes a communication channel shared by multiple users, using multiplexing (e.g., TDM/FDM) and access methods like CSMA for packet/circuit switching.  
node22: STUN helps applications detect NATs and discover public IP/port via a server, aiding protocols like WebRTC and SIP for traversal and ICE setup.  
node23: Frequency-Division Multiplexing splits bandwidth into non-overlapping channels (e.g., radio, TV, DSL) to carry multiple signals via frequency-separated subcarriers.  
node24: Space-Division Multiple Access uses smart antennas to spatially direct signals, reducing interference and improving efficiency in cellular networks via beamforming.  
node25: Berkeley R-commands (rlogin/rsh/rcp) enabled early Unix remote access but were insecure, leading to replacement by SSH due to authentication flaws.
node26: PCF in IEEE 802.11 uses a point coordinator with priority via PIFS, enabling contention-free periods via CF-poll frames in WLANs.  
node27: Naemon is an open-source Nagios fork for monitoring systems/networks, offering alerts on Linux distributions under GPL v2.  
node28: Verilog is an IEEE-standard HDL for digital circuit design, supporting synthesis and verification with blocking/non-blocking assignments.  
node29: TDMA divides channels into time slots for multiple users, used in 2G cellular systems like GSM, requiring synchronization to manage mobility limits.  
node30: Mobile Slotted Aloha (MS-Aloha) combines TDMA and slotted Aloha for vehicle networks, using reservations to handle mobility and collisions.","node0:Wikipedia entry. Entry name: ALOHAnet. Entry content: alohanet alohanet also known aloha system simply aloha pioneering computer networking system developed university hawaii alohanet became operational june 1971 providing first public demonstration wireless packet data network aloha originally stood additive links on-line hawaii area alohanet used new method medium access aloha random access experimental ultra high frequency uhf operation since frequency assignments communications computer available commercial applications 1970s even frequencies assigned two media available application aloha channel – cables satellites 1970s aloha random access employed nascent ethernet cable based network marisat inmarsat satellite network early 1980s frequencies mobile networks became available 1985 frequencies suitable became known wi-fi allocated us regulatory developments made possible use aloha random-access techniques wi-fi mobile telephone networks aloha channels used limited way 1980s 1g mobile phones signaling control purposes late 1980s european standardisation group gsm worked pan-european digital mobile communication system gsm greatly expanded use aloha channels access radio channels mobile telephony addition sms message texting implemented 2g mobile phones early 2000s additional aloha channels added 2.5g 3g mobile phones widespread introduction gprs using slotted-aloha random-access channel combined version reservation aloha scheme first analyzed group bbn one early computer networking designs development aloha network begun september 1968 university hawaii leadership norman abramson along thomas gaarder franklin kuo shu lin wesley peterson edward ned weldon goal use low-cost commercial radio equipment connect users oahu hawaiian islands central time-sharing computer main oahu campus first packet broadcasting unit went operation june 1971 terminals connected special purpose terminal connection unit using rs-232 9600 bit/s original version aloha used two distinct frequencies hub configuration hub machine broadcasting packets everyone outbound channel various client machines sending data packets hub inbound channel data received correctly hub short acknowledgment packet sent client acknowledgment received client machine short wait time would automatically retransmit data packet waiting randomly selected time interval acknowledgment mechanism used detect correct collisions created two client machines attempted send packet time alohanet primary importance use shared medium client transmissions unlike arpanet node could talk directly node end wire satellite circuit alohanet client nodes communicated hub frequency meant sort mechanism needed control could talk time alohanet solution allow client send data without controlling sent acknowledgment/retransmission scheme used deal collisions approach radically reduced complexity protocol networking hardware since nodes need negotiate allowed speak see token ring solution became known pure aloha random-access channel basis subsequent ethernet development later wi-fi networks various versions aloha protocol slotted aloha also appeared later satellite communications used wireless data networks ardis mobitex cdpd gsm also important alohanet use outgoing hub channel broadcast packets directly clients second shared frequency using address packet allow selective receipt client node two frequencies used device could receive acknowledgments regardless transmissions aloha network introduced mechanism randomized multiple access resolved device transmission collisions transmitting package immediately acknowledgement present acknowledgment received transmission repeated random waiting time version protocol called pure aloha one implemented alohanet quite simple note first step implies pure aloha check whether channel busy transmitting since collisions occur data may sent aloha use 100 capacity communications channel long station waits transmits likelihood collision occurs interrelated affect efficiently channel used means concept transmit later critical aspect quality backoff scheme chosen significantly influences efficiency protocol ultimate channel capacity predictability behavior assess pure aloha need predict throughput rate successful transmission frames discussion pure aloha performance follows tanenbaum first let make simplifying assumptions let refer time needed transmit one frame channel let define frame-time unit time equal let g refer mean used poisson distribution transmission-attempt amounts average g transmission-attempts per frame-time consider needs happen frame transmitted successfully let refer time intended send frame preferable use channel one frame-time beginning stations refrain transmitting time frame-time probability k transmission-attempts frame-time formula_1 average amount transmission-attempts 2 consecutive frame-times 2 g hence pair consecutive frame-times probability k transmission-attempts two frame-times formula_2 therefore probability formula_3 zero transmission-attempts t-t t+t thus successful transmission us formula_4 throughput calculated rate transmission-attempts multiplied probability success concluded throughput formula_5 formula_6 vulnerable time=2*t. maximum throughput 0.5/e frames per frame-time reached g 0.5 approximately 0.184 frames per frame-time means pure aloha 18.4 time used successful transmissions another simple mathematical way establish equation throughput pure aloha slotted aloha follows consider needs happen frames transmitted successfully let represent frame time simplicity assumed contention begins t=0 exactly one node sends interval t=0 t=t node tries t=t t=2t frame transmitted successfully similarly next time intervals t=2nt t= 2n+1 exactly one node sends t= 2n+1 t= 2n+2 node tries send n=1,2,3 ... frames successfully transmitted pure aloha nodes begin transmission whenever want without checking nodes time thus sending frames independent events transmission particular node neither affects affected time start transmission nodes let g average number nodes begin transmission within period frame time large number nodes trying transmit using poisson distribution probability exactly x nodes begin transmission period formula_7 therefore probability particular period t=2nt t= 2n+1 particular non-zero integer value n exactly one node begin transmission formula_8 probability particular period t= 2n+1 t= 2n+2 node begin transmission formula_9 successful transmission frame events occur simultaneously period t=2nt t= 2n+1 exactly one node begins transmission t= 2n+1 t= 2n+2 node begins transmission hence probability independent events occur simultaneously formula_10 throughput throughput intended mean probability successful transmission minimum possible period therefore throughput pure aloha formula_6 suppose： 1 n nodes attempt send data time t. 2 probability successful transmission one node formula_12 probability successful transmission like following formula_13 similarly slotted aloha frame successfully transmitted exactly one node begin transmission beginning particular time slot equal frame time probability one node begin particular time slot formula_14 throughput slotted aloha thus formula_15 disadvantages pure aloha 1 time wasted 2 data lost improvement original aloha protocol slotted aloha introduced discrete timeslots increased maximum throughput station start transmission beginning timeslot thus collisions reduced case transmission-attempts within 1 frame-time 2 consecutive frame-times need considered since collisions occur timeslot thus probability zero transmission-attempts stations single timeslot formula_16 probability transmission requiring exactly k attempts k-1 collisions 1 success formula_17 throughput formula_18 maximum throughput 1/e frames per frame-time reached g 1 approximately 0.368 frames per frame-time 36.8 slotted aloha used low-data-rate tactical satellite communications networks military forces subscriber-based satellite communications networks mobile telephony call setup set-top box communications contactless rfid technologies use random-access channel alohanet led development carrier sense multiple access csma listen send random-access protocol used nodes send receive channel first implementation csma ethernet csma radio channels extensively modeled ax.25 packet radio protocol based csma approach collision recovery based experience gained alohanet aloha random-access protocols inherent variability throughput delay performance characteristics reason applications need highly deterministic load behavior sometimes used polling token-passing schemes token ring instead contention systems instance arcnet popular embedded data applications 1980 network two fundamental choices dictated much alohanet design two-channel star configuration network use random accessing user transmissions two-channel configuration primarily chosen allow efficient transmission relatively dense total traffic stream returned users central time-sharing computer additional reason star configuration desire centralize many communication functions possible central network node menehune minimizing cost original all-hardware terminal control unit tcu user node random-access channel communication users menehune designed specifically traffic characteristics interactive computing conventional communication system user might assigned portion channel either frequency-division multiple access fdma time-division multiple access tdma basis since well known time-sharing systems circa 1970 computer user data bursty fixed assignments generally wasteful bandwidth high peak-to-average data rates characterize traffic achieve efficient use bandwidth bursty traffic alohanet developed random-access packet switching method come known pure aloha channel approach effectively dynamically allocates bandwidth immediately user data send using acknowledgment/retransmission mechanism described earlier deal occasional access collisions average channel loading must kept 10 maintain low collision rate still results better bandwidth efficiency fixed allocations used bursty traffic context two 100 khz channels experimental uhf band used implemented system one user-to-computer random-access channel one computer-to-user broadcast channel system configured star network allowing central node receive transmissions random-access channel user tcus received transmission made central node broadcast channel transmissions made bursts 9600 bit/s data control information encapsulated packets packet consisted 32-bit header 16-bit header parity check word followed 80 bytes data 16-bit parity check word data header contained address information identifying particular user menehune broadcast packet intended user node would accept central node communications processor hp 2100 minicomputer called menehune hawaiian language word imp dwarf people named similar role original arpanet interface message processor imp deployed time original system menehune forwarded correctly received user data uh central computer ibm system 360/65 time-sharing system outgoing messages 360 converted packets menehune queued broadcast remote users data rate 9600 bit/s unlike half-duplex radios user tcus menehune interfaced radio channels full-duplex radio equipment original user interface developed system all-hardware unit called alohanet terminal control unit tcu sole piece equipment necessary connect terminal aloha channel tcu composed uhf antenna transceiver modem buffer control unit buffer designed full line length 80 characters allowed handling 40- 80-character fixed-length packets defined system typical user terminal original system consisted teletype model 33 dumb crt user terminal connected tcu using standard rs-232c interface shortly original aloha network went operation tcu redesigned one first intel microprocessors resulting upgrade called pcu programmable control unit additional basic functions performed tcu pcu generation cyclic-parity-check code vector decoding received packets packet error-detection purposes generation packet retransmissions using simple random interval generator acknowledgment received menehune prescribed number automatic retransmissions flashing light used indicator human user also since tcu pcu send acknowledgments menehune steady warning light displayed human user error detected received packet thus seen considerable simplification incorporated initial design tcu well pcu making use fact interfacing human user network later versions system simple radio relays placed operation connect main network island oahu islands hawaii menehune routing capabilities expanded allow user nodes exchange packets user nodes arpanet experimental satellite network details available technical reports listed reading section
node1:Wikipedia entry. Entry name: Xpress_Transport_Protocol. Entry content: xpress transport protocol xpress transport protocol xtp transport layer protocol high-speed networks promoted xtp forum developed replace tcp xtp provides protocol options error control flow control rate control instead separate protocols type communication xtp controls packet exchange patterns produce different models e.g reliable datagrams transactions unreliable streams reliable multicast connections long latency one major problems satellite communications couple possible environmental variables sometimes asymmetrical bandwidth conditions quality service satellite communications sometimes lacking xtp addresses issues variety ways selective retransmission algorithm deals loss recovery works receiver detecting missing data packets transmitting list missing packets sender able quickly resend missing packets needed stated xtp also provides rate control maximum bandwidth specified well size burst data accepted xtp also offers reliable multicast protocol flexibility match specific application needs xtp employ congestion avoidance algorithms xtp real-time option layer 4 us navy safenet lan profile caini c. firrincieli r. marchese m. de cola t. luglio m. roseti c. et al 2006 transport layer protocols architectures satellite networks international journal satellite communications networking 25 1-26 retrieved march 9 2009 http //citeseerx.ist.psu.edu/viewdoc/download doi=10.1.1.73.7647 rep=rep1 type=pdf w. timothy strayer bert j. dempsey alfred c. weaver xtp xpress transfer protocol addison-wesley reading mass 1992
node2:Wikipedia entry. Entry name: Asynchronous_serial_communication. Entry content: asynchronous serial communication asynchronous serial communication form serial communication communicating endpoints interfaces continuously synchronized common clock signal instead common synchronization signal data stream contains synchronization information form start stop signals unit transmission respectively start signal prepares receiver arrival data stop signal resets state enable triggering new sequence common kind start-stop transmission ascii rs-232 example use teletypewriter operation mechanical teleprinters using 5-bit codes see baudot code typically used stop period 1.5 bit times early electromechanical teletypewriters pre-1930 could require 2 stop bits allow mechanical impression without buffering hardware support fractional stop bits communicate device uses 1.5 bit times configured send 2 stop bits transmitting requiring 1 stop bit receiving format derived directly design teletypewriter designed way electromechanical technology day precise enough synchronous operation thus systems needed re-synchronized start character re-synchronized technology day good enough preserve bit-sync remainder character stop bits gave system time recover next start bit early teleprinter systems used five data bits typically variant baudot code early experimental printing telegraph devices used start bit required manual adjustment receiver mechanism speed reliably decode characters automatic synchronization required keep transmitting receiving units step finally achieved howard krum patented start-stop method synchronization granted september 19 1916 granted december 3 1918 shortly afterward practical teleprinter patented granted july 3 1917 signalling work sender receiver must agree signalling parameters asynchronous start-stop signalling widely used dial-up modem access time-sharing computers bbs systems systems used either seven eight data bits transmitted least-significant bit first accordance ascii standard computers common configuration used 8n1 eight bit characters one start bit one stop bit parity bit thus 10 baud times used send single character dividing signalling bit-rate ten results overall transmission speed characters per second asynchronous start-stop lower data-link layer used connect computers modems many dial-up internet access applications using second encapsulating data link framing protocol ppp create packets made asynchronous serial characters common physical layer interface used rs-232d performance loss relative synchronous access negligible modern modems use private synchronous protocol send data asynchronous links end operated faster data link flow control used throttle data rate prevent overrun
node3:Wikipedia entry. Entry name: Dynamic_synchronous_transfer_mode. Entry content: dynamic synchronous transfer mode dynamic synchronous transfer mode dtm optical networking technology standardized european telecommunications standards institute etsi 2001 beginning specification etsi es 201 803-1 dtm time division multiplexing circuit-switching network technology combines switching transport designed provide guaranteed quality service qos streaming video services used packet-based services well marketed professional media networks mobile tv networks digital terrestrial television dtt networks content delivery networks consumer oriented networks triple play networks dtm architecture conceived 1985 developed royal institute technology kth sweden published february 1996 research team split two spin-off companies reflecting two different approaches use technology one companies remains active field delivers commercial products based dtm technology name net insight
node4:Wikipedia entry. Entry name: Code-division_multiple_access. Entry content: code-division multiple access code-division multiple access cdma channel access method used various radio communication technologies cdma example multiple access several transmitters send information simultaneously single communication channel allows several users share band frequencies see bandwidth permit without undue interference users cdma employs spread spectrum technology special coding scheme transmitter assigned code cdma used access method many mobile phone standards is-95 also called cdmaone 3g evolution cdma2000 often simply referred cdma umts 3g standard used gsm carriers also uses wideband cdma w-cdma well td-cdma td-scdma radio technologies technology code-division multiple access channels long known soviet union ussr first work devoted subject published 1935 dmitry ageev shown use linear methods three types signal separation frequency time compensatory technology cdma used 1957 young military radio engineer leonid kupriyanovich moscow made experimental model wearable automatic mobile phone called lk-1 base station lk-1 weight 3 kg 20–30 km operating distance 20–30 hours battery life base station described author could serve several customers 1958 kupriyanovich made new experimental pocket model mobile phone phone weighed 0.5 kg serve customers kupriyanovich proposed device called correlator 1958 ussr also started development altai national civil mobile phone service cars based soviet mrt-1327 standard phone system weighed placed trunk vehicles high-ranking officials used standard handset passenger compartment main developers altai system vniis voronezh science research institute communications gspi state specialized project institute 1963 service started moscow 1970 altai service used 30 ussr cities cdma spread-spectrum multiple-access technique spread-spectrum technique spreads bandwidth data uniformly transmitted power spreading code pseudo-random code narrow ambiguity function unlike narrow pulse codes cdma locally generated code runs much higher rate data transmitted data transmission combined bitwise xor exclusive faster code figure shows spread-spectrum signal generated data signal pulse duration formula_1 symbol period xored code signal pulse duration formula_2 chip period note bandwidth proportional formula_3 formula_4 bit time therefore bandwidth data signal formula_5 bandwidth spread spectrum signal formula_6 since formula_2 much smaller formula_1 bandwidth spread-spectrum signal much larger bandwidth original signal ratio formula_9 called spreading factor processing gain determines certain extent upper limit total number users supported simultaneously base station user cdma system uses different code modulate signal choosing codes used modulate signal important performance cdma systems best performance occurs good separation signal desired user signals users separation signals made correlating received signal locally generated code desired user signal matches desired user code correlation function high system extract signal desired user code nothing common signal correlation close zero possible thus eliminating signal referred cross-correlation code correlated signal time offset zero correlation close zero possible referred auto-correlation used reject multi-path interference analogy problem multiple access room channel people wish talk simultaneously avoid confusion people could take turns speaking time division speak different pitches frequency division speak different languages code division cdma analogous last example people speaking language understand languages perceived noise rejected similarly radio cdma group users given shared code many codes occupy channel users associated particular code communicate general cdma belongs two basic categories synchronous orthogonal codes asynchronous pseudorandom codes digital modulation method analogous used simple radio transceivers analog case low-frequency data signal time-multiplied high-frequency pure sine-wave carrier transmitted effectively frequency convolution wiener–khinchin theorem two signals resulting carrier narrow sidebands digital case sinusoidal carrier replaced walsh functions binary square waves form complete orthonormal set data signal also binary time multiplication achieved simple xor function usually gilbert cell mixer circuitry synchronous cdma exploits mathematical properties orthogonality vectors representing data strings example binary string 1011 represented vector 1 0 1 1 vectors multiplied taking dot product summing products respective components example u b v c dot product u·v ac bd dot product zero two vectors said orthogonal properties dot product aid understanding w-cdma works vectors b orthogonal formula_10 user synchronous cdma uses code orthogonal others codes modulate signal example 4 mutually orthogonal digital signals shown figure orthogonal codes cross-correlation equal zero words interfere case is-95 64-bit walsh codes used encode signal separate different users since 64 walsh codes orthogonal signals channelized 64 orthogonal signals following example demonstrates user signal encoded decoded start set vectors mutually orthogonal although mutual orthogonality condition vectors usually constructed ease decoding example columns rows walsh matrices example orthogonal functions shown adjacent picture vectors assigned individual users called code chip code chipping code interest brevity rest example uses codes v two bits user associated different code say v. 1 bit represented transmitting positive code v 0 bit represented negative code −v example v v v 1 −1 data user wishes transmit 1 0 1 1 transmitted symbols would purposes article call constructed vector transmitted vector sender different unique vector v chosen set construction method transmitted vector identical due physical properties interference two signals point phase add give twice amplitude signal phase subtract give signal difference amplitudes digitally behaviour modelled addition transmission vectors component component sender0 code 1 −1 data 1 0 1 1 sender1 code 1 1 data 0 0 1 1 senders transmit simultaneously table describes coding steps signal0 signal1 transmitted time air add produce raw signal raw signal called interference pattern receiver extracts intelligible signal known sender combining sender code interference pattern following table explains works shows signals interfere one another decoding values greater 0 interpreted 1 values less zero interpreted 0 example decoding data0 2 −2 2 2 receiver interprets 1 0 1 1 values exactly 0 means sender transmit data following example assume signal0 1 −1 −1 1 1 −1 1 −1 transmitted alone following table shows decode receiver receiver attempts decode signal using sender1 code data zeros therefore cross-correlation equal zero clear sender1 transmit data mobile-to-base links precisely coordinated particularly due mobility handsets different approach required since mathematically possible create signature sequences orthogonal arbitrarily random starting points make full use code space unique pseudo-random pseudo-noise pn sequences used asynchronous cdma systems pn code binary sequence appears random reproduced deterministic manner intended receivers pn codes used encode decode user signal asynchronous cdma manner orthogonal codes synchronous cdma shown example pn sequences statistically uncorrelated sum large number pn sequences results multiple access interference mai approximated gaussian noise process following central limit theorem statistics gold codes example pn suitable purpose low correlation codes users received power level variance e.g. noise power mai increases direct proportion number users words unlike synchronous cdma signals users appear noise signal interest interfere slightly desired signal proportion number users forms cdma use spread-spectrum process gain allow receivers partially discriminate unwanted signals signals encoded specified pn sequence code received signals different codes code different timing offset appear wideband noise reduced process gain since user generates mai controlling signal strength important issue cdma transmitters cdm synchronous cdma tdma fdma receiver theory completely reject arbitrarily strong signals using different codes time slots frequency channels due orthogonality systems true asynchronous cdma rejection unwanted signals partial unwanted signals much stronger desired signal overwhelm leads general requirement asynchronous cdma system approximately match various signal power levels seen receiver cdma cellular base station uses fast closed-loop power-control scheme tightly control mobile transmit power theory cdma tdma fdma exactly spectral efficiency practice challenges – power control case cdma timing case tdma frequency generation/filtering case fdma tdma systems must carefully synchronize transmission times users ensure received correct time slot cause interference since perfectly controlled mobile environment time slot must guard time reduces probability users interfere decreases spectral efficiency similarly fdma systems must use guard band adjacent channels due unpredictable doppler shift signal spectrum user mobility guard bands reduce probability adjacent channels interfere decrease utilization spectrum asynchronous cdma offers key advantage flexible allocation resources i.e allocation pn codes active users case cdm synchronous cdma tdma fdma number simultaneous orthogonal codes time slots frequency slots respectively fixed hence capacity terms number simultaneous users limited fixed number orthogonal codes time slots frequency bands allocated cdm tdma fdma systems remain underutilized due bursty nature telephony packetized data transmissions strict limit number users supported asynchronous cdma system practical limit governed desired bit error probability since sir signal-to-interference ratio varies inversely number users bursty traffic environment like mobile telephony advantage afforded asynchronous cdma performance bit error rate allowed fluctuate randomly average value determined number users times percentage utilization suppose 2 n users talk half time 2 n users accommodated average bit error probability n users talk time key difference bit error probability n users talking time constant whereas random quantity mean 2 n users talking half time words asynchronous cdma ideally suited mobile network large numbers transmitters generate relatively small amount traffic irregular intervals cdm synchronous cdma tdma fdma systems recover underutilized resources inherent bursty traffic due fixed number orthogonal codes time slots frequency channels assigned individual transmitters instance n time slots tdma system 2 n users talk half time half time n users needing use n time slots furthermore would require significant overhead continually allocate deallocate orthogonal-code time-slot frequency-channel resources comparison asynchronous cdma transmitters simply send something say go air n't keeping pn signature sequence long connected system modulation schemes try minimize bandwidth signal since bandwidth limited resource however spread-spectrum techniques use transmission bandwidth several orders magnitude greater minimum required signal bandwidth one initial reasons military applications including guidance communication systems systems designed using spread spectrum security resistance jamming asynchronous cdma level privacy built signal spread using pseudo-random code code makes spread-spectrum signals appear random noise-like properties receiver demodulate transmission without knowledge pseudo-random sequence used encode data cdma also resistant jamming jamming signal finite amount power available jam signal jammer either spread energy entire bandwidth signal jam part entire signal cdma also effectively reject narrow-band interference since narrow-band interference affects small portion spread-spectrum signal easily removed notch filtering without much loss information convolution encoding interleaving used assist recovering lost data cdma signals also resistant multipath fading since spread-spectrum signal occupies large bandwidth small portion undergo fading due multipath given time like narrow-band interference result small loss data overcome another reason cdma resistant multipath interference delayed versions transmitted pseudo-random codes poor correlation original pseudo-random code thus appear another user ignored receiver words long multipath channel induces least one chip delay multipath signals arrive receiver shifted time least one chip intended signal correlation properties pseudo-random codes slight delay causes multipath appear uncorrelated intended signal thus ignored cdma devices use rake receiver exploits multipath delay components improve performance system rake receiver combines information several correlators one tuned different path delay producing stronger version signal simple receiver single correlation tuned path delay strongest signal frequency reuse ability reuse radio channel frequency cell sites within cellular system fdma tdma systems frequency planning important consideration frequencies used different cells must planned carefully ensure signals different cells interfere cdma system frequency used every cell channelization done using pseudo-random codes reusing frequency every cell eliminates need frequency planning cdma system however planning different pseudo-random sequences must done ensure received signal one cell correlate signal nearby cell since adjacent cells use frequencies cdma systems ability perform soft hand-offs soft hand-offs allow mobile telephone communicate simultaneously two cells best signal quality selected hand-off complete different hard hand-offs utilized cellular systems hard-hand-off situation mobile telephone approaches hand-off signal strength may vary abruptly contrast cdma systems use soft hand-off undetectable provides reliable higher-quality signal recent study novel collaborative multi-user transmission detection scheme called collaborative cdma investigated uplink exploits differences users fading channel signatures increase user capacity well beyond spreading length mai-limited environment authors show possible achieve increase low complexity high bit error rate performance flat fading channels major research challenge overloaded cdma systems approach instead using one sequence per user conventional cdma authors group small number users share spreading sequence enable group spreading despreading operations new collaborative multi-user receiver consists two stages group multi-user detection mud stage suppress mai groups low-complexity maximum-likelihood detection stage recover jointly co-spread users data using minimal euclidean-distance measure users channel-gain coefficients note research area going 2004 prof. li ping introduced new concept enhanced cdma version known interleave division multiple access idma scheme uses orthogonal interleaved means user separation place signature sequence used cdma system many researchers introduced various orthogonal interleaving mechanisms including tree based interleaved suggested prof. manoj kumar shukla harcourt butler technical university
node5:Wikipedia entry. Entry name: Carrier-sense_multiple_access_with_collision_detection. Entry content: carrier-sense multiple access collision detection carrier-sense multiple access collision detection csma/cd media access control method used notably early ethernet technology local area networking uses carrier-sensing defer transmissions stations transmitting used combination collision detection transmitting station detects collisions sensing transmissions stations transmitting frame collision condition detected station stops transmitting frame transmits jam signal waits random time interval trying resend frame csma/cd modification pure carrier-sense multiple access csma csma/cd used improve csma performance terminating transmission soon collision detected thus shortening time required retry attempted following procedure used initiate transmission procedure complete frame transmitted successfully collision detected transmission following procedure used resolve detected collision procedure complete retransmission initiated retransmission aborted due numerous collisions methods collision detection media dependent shared electrical bus 10base5 10base2 collisions detected comparing transmitted data received data recognizing higher normal signal amplitude bus media carrier sensed receive channel transmitting triggers collision event repeaters hubs detect collisions propagate jam signals collision recovery procedure likened happens dinner party guests talk common medium air speaking guest politely waits current speaker finish two guests start speaking time stop wait short random periods time ethernet time measured microseconds hope choosing random period time guests choose time try speak thus avoiding another collision jam signal jamming signal signal carries 32-bit binary pattern sent data station inform stations collision must transmit maximum jam-time calculated follows maximum allowed diameter ethernet installation limited 232 bits makes round-trip-time 464 bits slot time ethernet 512 bits difference slot time round-trip-time 48 bits 6 bytes maximum jam-time turn means station noting collision occurred sending 4 6 byte long pattern composed 16 1-0 bit combinations note size jam signal clearly minimum allowed frame-size 64 bytes purpose ensure node may currently receiving frame receive jam signal place correct 32-bit mac crc causes receivers discard frame due crc error late collision type collision happens packet allowed protocol standard question 10 megabit shared medium ethernet collision error occurs first 512 bits data transmitted transmitting station late collision said occurred importantly late collisions re-sent nic unlike collisions occurring first 64 octets left upper layers protocol stack determine loss data correctly set csma/cd network link late collisions usual possible causes full-duplex/half-duplex mismatch exceeded ethernet cable length limits defective hardware incorrect cabling non-compliant number hubs network bad nic local collision collision occurs nic opposed wire nic detect local collisions without attempting send information utp cable local collision detected local segment station detects signal rx pair time sending tx pair since two signals different pairs characteristic change signal collisions recognized utp station operating half-duplex functional difference half full-duplex operation regard whether transmit receive pairs permitted used simultaneously channel capture effect phenomenon one user shared medium captures medium significant time period usually 16 frames users denied use medium effect first seen networks using csma/cd ethernet effect data-intense connection dominates multiple-access wireless channel happens ethernet links way nodes back link attempt re-access ethernet protocol communication collision happens two users medium try send time user waits random period time re-accessing link however user wait back random amount time proportional number times successively tried access link channel capture effect happens one user continues win link example user user b try access quiet link time since detect collision user waits random time 0 1 time units user b let say user chooses lower back-off time user begins use link b allows finish sending frame user still send user user b cause another data collision choose random back-off time 0 1 user b choose back-off time 0 3 – b second time colliding row chances win one continues likely win collision battles 16 collisions number tries user backs extended period time user captured channel ability one node capture entire medium decreased number nodes increases number nodes increases higher probability one nodes lower back-off time capturing node channel capture effect creates situation one station able transmit others continually backing thus leading situation short-term unfairness yet situation long-term fair every station opportunity capture medium one station done transmitting efficiency channel increased one node captured channel negative side effect capture effect would idle time created due stations backing one station finished transmitting medium large idle times present stations continually backing instances back-off occur long stations actually discard packets maximum attempt limits reached csma/cd used now-obsolete shared media ethernet variants 10base5 10base2 early versions twisted-pair ethernet used repeater hubs modern ethernet networks built switches full-duplex connections longer need use csma/cd ethernet segment collision domain isolated csma/cd still supported backwards compatibility half-duplex connections ieee 802.3 standard defines ethernet variants historical reasons still bore title carrier sense multiple access collision detection csma/cd access method physical layer specifications 802.3-2008 uses new name ieee standard ethernet
node6:Wikipedia entry. Entry name: Fiber_Distributed_Data_Interface. Entry content: fiber distributed data interface fiber distributed data interface fddi standard data transmission local area network uses optical fiber standard underlying physical medium although also later specified use copper cable case may called cddi copper distributed data interface standardized tp-pmd twisted-pair physical medium-dependent also referred tp-ddi twisted-pair distributed data interface fddi effectively made obsolete local networks fast ethernet offered 100 mbit/s speeds much lower cost since 1998 gigabit ethernet due speed even lower cost ubiquity fddi provides 100 mbit/s optical standard data transmission local area network extend range although fddi logical topology ring-based token network use ieee 802.5 token ring protocol basis instead protocol derived ieee 802.4 token bus timed token protocol addition covering large geographical areas fddi local area networks support thousands users fddi offers dual-attached station das counter-rotating token ring topology single-attached station sas token bus passing ring topology fddi product american national standards institute x3t9.5 x3t12 conforms open systems interconnection osi model functional layering using protocols standards process started mid 1980s fddi-ii version fddi described 1989 added circuit-switched service capability network could also handle voice video signals work started connect fddi networks synchronous optical networking sonet technology fddi network contains two rings one secondary backup case primary ring fails primary ring offers 100 mbit/s capacity network requirement secondary ring backup also carry data extending capacity 200 mbit/s single ring extend maximum distance dual ring extend fddi larger maximum-frame size 4,352 bytes standard ethernet family supports maximum-frame size 1,500 bytes allowing better effective data rates cases designers normally constructed fddi rings network topology dual ring trees small number devices typically infrastructure devices routers concentrators rather host computers dual-attached rings host computers connect single-attached devices routers concentrators dual ring degenerate form simply collapses single device typically computer-room contained whole dual ring although implementations deployed fddi metropolitan area network fddi requires network topology dual ring actually passes connected device requires device remain continuously operational standard actually allows optical bypasses network engineers consider unreliable error-prone devices workstations minicomputers might come control network managers suitable connection dual ring alternative using dual-attached connection workstation obtain degree resilience dual-homed connection made simultaneously two separate devices fddi ring one connections becomes active one automatically blocked first connection fails backup link takes perceptible delay fddi data frame format pa preamble sd start delimiter fc frame control da destination address sa source address pdu protocol data unit packet data unit fcs frame check sequence checksum ed/fs end delimiter frame status internet engineering task force defined standard transmission internet protocol would protocol data unit case fddi first proposed june 1989 revised 1990 aspects protocol compatible ieee 802.2 standard logical link control example 48-bit mac addresses became popular ethernet family thus protocols address resolution protocol arp could common well fddi considered attractive campus backbone network technology early mid 1990s since existing ethernet networks offered 10 mbit/s data rates token ring networks offered 4 mbit/s 16 mbit/s rates thus relatively high-speed choice era 1994 vendors included cisco systems national semiconductor network peripherals syskonnect acquired marvell technology group 3com fddi installations largely replaced ethernet deployments fddi standards included
node7:Wikipedia entry. Entry name: Frame_(networking). Entry content: frame networking frame digital data transmission unit computer networking telecommunication packet switched systems frame simple container single network packet telecommunications systems frame repeating structure supporting time-division multiplexing frame typically includes frame synchronization features consisting sequence bits symbols indicate receiver beginning end payload data within stream symbols bits receives receiver connected system frame transmission ignores data detects new frame synchronization sequence osi model computer networking frame protocol data unit data link layer frames result final layer encapsulation data transmitted physical layer frame unit transmission link layer protocol consists link layer header followed packet frame separated next interframe gap frame series bits generally composed frame synchronization bits packet payload frame check sequence examples ethernet frames point-to-point protocol ppp frames fibre channel frames v.42 modem frames often frames several different sizes nested inside example using point-to-point protocol ppp asynchronous serial communication eight bits individual byte framed start stop bits payload data bytes network packet framed header footer several packets framed frame boundary octets telecommunications specifically time-division multiplex tdm time-division multiple access tdma variants frame cyclically repeated data block consists fixed number time slots one logical tdm channel tdma transmitter context frame typically entity physical layer tdm application examples sonet/sdh isdn circuit-switched b-channel tdma examples circuit switched data used early cellular voice services frame also entity time-division duplex mobile terminal may transmit time slots receive others
node8:Wikipedia entry. Entry name: Ethernet_in_the_first_mile. Entry content: ethernet first mile ethernet first mile efm refers using one ethernet family computer network protocols telecommunications company customer premises customer point view first mile although access network point view known last mile working group institute electrical electronics engineers ieee produced standards known ieee 802.3ah-2004 later included overall standard ieee 802.3-2008 although often used businesses also known ethernet home etth one family standards known ethernet passive optical network epon uses passive optical network wide metro local area networks using various forms ethernet goal eliminate non-native transport ethernet asynchronous transfer mode atm access networks one early effort etherloop technology invented nortel networks 1996 spun company elastic networks 1998 principal inventor jack terry hope combine packet-based nature ethernet ability digital subscriber line dsl technology work existing telephone access wires name comes local loop traditionally describes wires telephone company office subscriber protocol half-duplex control provider side loop adapted line conditions peak 10 mbit/s advertised 4-6 mbit/s typical distance symbol rates 1 megabaud 1.67 megabaud 2 4 6 bits per symbol etherloop product name registered trademark us canada etherloop technology eventually purchased paradyne networks 2002 turn purchased zhone technologies 2005 another effort concept promoted michael silverton using ethernet variants used fiber optic communication residential well business customers example become known fiber home ftth fiberhood networks company provided service 1999 2001 early products around year 2000 marketed 10bases infineon technologies although technically use baseband signalling rather passband very-high-bit-rate digital subscriber line vdsl technology patent filed 1997 peleg shimon porat boaz noam alroy rubinstain avinoam sfadya yackow long reach ethernet product name used cisco systems starting 2001 supported modes 5 mbit/s 10 mbit/s 15 mbit/s depending distance october 2000 howard frazier issued call interest ethernet last mile november 2000 meeting ieee 802.3 created ethernet first mile study group july 16 2001 802.3ah working group parallel participating vendors formed ethernet first mile alliance efma december 2001 promote ethernet subscriber access technology support ieee standard efforts early meeting etherloop technology called 100base-cu another technology called eovdsl ethernet vdsl working group efm standard approved june 24 2004 published september 7 2004 ieee 802.3ah-2004 2005 included base ieee 802.3 standard 2005 efma absorbed metro ethernet forum early 2006 work began even higher-speed 10 gigabit/second ethernet passive optical network 10g-epon standard ratified 2009 ieee 802.3av work epon continued ieee p802.3bk extended epon task force formed march 2012 major goals task force included adding support px30 px40 prx40 pr40 power budget classes 1g-epon 10g-epon 802.3bk amendment approved ieee-sa sb august 2013 published soon thereafter standard ieee std 802.3bk-2013 november 2011 ieee 802.3 began work epon protocol coax epoc efm defines ethernet transmitted new media types using new ethernet physical layer phy interfaces efm also addresses issues required mass deployment ethernet services operations administration management oa compatibility existing technologies plain old telephone service spectral compatibility copper twisted pair fiber home use passive optical network additionally clause 57 defines link-level oa including discovery link monitoring remote fault indication loopbacks variable access 2base-tl ieee 802.3-2008 physical layer phy specification full-duplex long-reach point-to-point ethernet link voice-grade copper wiring unlike 10base-t 100base-t 1000base-t phys providing single rate 10 100 1000 mbit/s respectively 2base-tl link rate vary depending copper media characteristics length wire diameter gauge number pairs link aggregated amount crosstalk pairs etc desired link parameters desired snr margin power back-off etc regional spectral limitations 2base-tl phys deliver minimum 2 mbit/s distances using itu-t g.991.2 g.shdsl.bis technology single copper pair phys may also support optional aggregation bonding multiple copper pairs called pme aggregation function paf single pair minimum possible link bitrate 192 kbit/s 3 x 64 kbit/s maximum bitrate 5.7 mbit/s 89 x 64 kbit/s 0.5 mm wire 3 db noise margin spectral limitations max bitrate achieved distances max achievable bitrate 850 kbit/s throughput 2base-tl link lower link bitrate average 5 due 64/65-octet encoding paf overhead factors depend packet size 10pass-ts ieee 802.3-2008 physical layer phy specification full-duplex short reach point-to-point ethernet link voice-grade copper wiring 10pass-ts phys deliver minimum 10 mbit/s distances using itu-t g.993.1 vdsl technology single copper pair phys may also support optional aggregation bonding multiple copper pairs called pme aggregation function paf unlike ethernet physical layers provide single rate 10 100 1000 mbit/s 10pass-ts link rate vary similar 2base-tl depending copper channel characteristics length wire diameter gauge wiring quality number pairs link aggregated factors vdsl short range technology designed provide broadband distances less 1 km voice-grade copper twisted pair line connection data rates deteriorate quickly line distance increases led vdsl referred fiber curb technology requires fiber backhaul connect carrier network greater distances vdsl ethernet first mile services using may useful way standardise functionality metro ethernet networks potentially distribute internet access services voice-grade wiring multi-dwelling unit buildings however vdsl2 already proven versatile faster standard greater reach vdsl
node9:Wikipedia entry. Entry name: Network_News_Transfer_Protocol. Entry content: network news transfer protocol network news transfer protocol nntp application protocol used transporting usenet news articles netnews news servers reading posting articles end user client applications brian kantor university california san diego phil lapsley university california berkeley wrote specification network news transfer protocol march 1986 contributors included stan o. barber baylor college medicine erik fair apple computer usenet originally designed based uucp network article transfers taking place direct point-to-point telephone links news servers powerful time-sharing systems readers posters logged computers reading articles directly local disk local area networks internet participation proliferated became desirable allow newsreaders run personal computers connected local networks resulting protocol nntp resembled simple mail transfer protocol smtp tailored exchanging newsgroup articles newsreader also known news client software application reads articles usenet either directly news server disks via nntp well-known tcp port 119 reserved nntp well-known tcp port 433 nnsp may used bulk transfer articles one server another clients connect news server transport layer security tls tcp port 563 often used sometimes referred nntps alternatively plain-text connection port 119 may changed use tls via codice_1 command october 2006 ietf released updates nntp codifies many additions made years since rfc 977 time ietf also released specifies use transport layer security tls via nntp starttls abortive attempt update nntp standard early 1990s specialized form nntp intended specifically use clients nnrp proposed protocol never completed fully implemented name persisted internetnews inn nnrpd program result subset standard nntp commands useful clients sometimes still referred nnrp
node10:Wikipedia entry. Entry name: L2TPv3. Entry content: l2tpv3 layer 2 tunnelling protocol version 3 ietf standard related l2tp used alternative protocol multiprotocol label switching mpls encapsulation multiprotocol layer 2 communications traffic ip networks like l2tp l2tpv3 provides pseudo-wire service scaled fit carrier requirements l2tpv3 regarded mpls ip atm simplified version concept much benefit achieved fraction effort cost losing technical features considered less important market case l2tpv3 features lost teletraffic engineering features considered important mpls however reason features could re-engineered top l2tpv3 later products protocol overhead l2tpv3 also significantly bigger mpls
node11:Wikipedia entry. Entry name: Usenet. Entry content: usenet usenet worldwide distributed discussion system available computers developed general-purpose unix-to-unix copy uucp dial-up network architecture tom truscott jim ellis conceived idea 1979 established 1980 users read post messages called articles posts collectively termed news one categories known newsgroups usenet resembles bulletin board system bbs many respects precursor internet forums widely used today discussions threaded web forums bbss though posts stored server sequentially name comes term users network major difference bbs web forum usenet absence central server dedicated administrator usenet distributed among large constantly changing conglomeration servers store forward messages one another so-called news feeds individual users may read messages post messages local server operated commercial usenet provider internet service provider university employer server usenet culturally historically significant networked world given rise popularized many widely recognized concepts terms faq flame sockpuppet spam 1990s internet became commonly affordable usenet connections via fidonet dial-up bbs networks made long-distance worldwide discussions communication widespread needing server local telephone service usenet conceived 1979 publicly established 1980 university north carolina chapel hill duke university decade world wide web went online general public received access internet making one oldest computer network communications systems still widespread use originally built poor man arpanet employing uucp transport protocol offer mail file transfers well announcements newly developed news software news name usenet emphasized creators hope usenix organization would take active role operation articles users post usenet organized topical categories known newsgroups logically organized hierarchies subjects instance sci.math sci.physics within sci hierarchy science talk.origins talk.atheism talk hierarchy user subscribes newsgroup news client software keeps track articles user read newsgroups majority articles responses article set articles traced one single non-reply article called thread modern newsreaders display articles arranged threads subthreads example wine-making newsgroup rec.crafts.winemaking someone might start thread called best yeast thread conversation might grow dozens replies long perhaps six eight different authors several days conversation different wine yeasts might branch several sub-threads tree-like form user posts article initially available user news server news server talks one servers newsfeeds exchanges articles fashion article copied server server eventually reach every server network later peer-to-peer networks operate similar principle usenet normally sender rather receiver initiates transfers usenet designed conditions networks much slower always available many sites original usenet network would connect twice day batch-transfer messages largely pots network typically used transfers phone charges lower night format transmission usenet articles similar internet e-mail messages difference two usenet articles read user whose news server carries group message posted opposed email messages one specific recipients today usenet diminished importance respect internet forums blogs mailing lists social media usenet differs media several ways usenet requires personal registration group concerned information need stored remote server archives always available reading messages require mail web client news client however possible read participate usenet newsgroups large degree using ordinary internet browsers since newsgroups copied several internet sites groups alt.binaries still widely used data transfer many internet service providers many internet sites operate news servers users access isps operate servers directly often offer users account another provider specifically operates newsfeeds early news implementations server newsreader single program suite running system today one uses separate newsreader client software program resembles email client accesses usenet servers instead clients mozilla thunderbird outlook express provide abilities isps run news servers news server one difficult internet services administer large amount data involved small customer base compared mainstream internet services email web access disproportionately high volume customer support incidents frequently complaining missing news articles isp fault isps outsource news operation specialist sites usually appear user though isp ran server many sites carry restricted newsfeed limited number newsgroups commonly omitted newsfeed foreign-language newsgroups alt.binaries hierarchy largely carries software music videos images accounts 99 percent article data also usenet providers specialize offering service users whose isps carry news carry restricted feed see also news server operation overview news systems implemented newsgroups typically accessed newsreaders applications allow users read reply postings newsgroups applications act clients one news servers although historically usenet associated unix operating system developed newsreaders available major operating systems modern mail clients communication suites commonly also integrated newsreader often however integrated clients low quality compared standalone newsreaders incorrectly implement usenet protocols standards conventions many integrated clients example one microsoft outlook express disliked purists misbehavior rise world wide web www web front-ends web2news become common web front ends lowered technical entry barrier requirements one application usenet nntp server account numerous websites offering web based gateways usenet groups although people begun filtering messages made web interfaces one reason another google groups one web based front end web browsers access google groups via news protocol links directly minority newsgroups moderated meaning messages submitted readers distributed directly usenet instead emailed moderators newsgroup approval moderator receive submitted articles review inject approved articles properly propagated worldwide articles approved moderator must bear approved header line moderators ensure messages readers see newsgroup conform charter newsgroup though required follow rules guidelines typically moderators appointed proposal newsgroup changes moderators follow succession plan historically mod hierarchy existed usenet reorganization moderated newsgroups may appear hierarchy typically .moderated added group name usenet newsgroups big-8 hierarchy created proposals called request discussion rfd rfd required following information newsgroup name checkgroups file entry moderated unmoderated status group moderated least one moderator valid email address must provided information beneficial required includes charter rationale moderation policy group moderated discussion new newsgroup proposal follows finished members big-8 management board making decision vote either approve disapprove new newsgroup unmoderated newsgroups form majority usenet newsgroups messages submitted readers unmoderated newsgroups immediately propagated everyone see minimal editorial content filtering vs propagation speed form one crux usenet community one little cited defense propagation canceling propagated message usenet users use command news readers offer cancellation commands part article storage expires relatively short order anyway almost unmoderated usenet groups become collections spam usenet set protocols generating storing retrieving news articles resemble internet mail messages exchanging among readership potentially widely distributed protocols commonly use flooding algorithm propagates copies throughout network participating servers whenever message reaches server server forwards message network neighbors n't yet seen article one copy message stored per server server makes available demand typically local readers able access server collection usenet servers thus certain peer-to-peer character share resources exchanging granularity exchange however different scale modern peer-to-peer system characteristic excludes actual users system connect news servers typical client-server application much like email reader rfc 850 first formal specification messages exchanged usenet servers superseded rfc 1036 subsequently rfc 5536 rfc 5537 cases unsuitable content posted usenet support automated removal posting whole network creating cancel message although due lack authentication resultant abuse capability frequently disabled copyright holders may still request manual deletion infringing material using provisions world intellectual property organization treaty implementations united states online copyright infringement liability limitation act would require giving notice individual news server administrator internet usenet transported via network news transfer protocol nntp tcp port 119 standard unprotected connections tcp port 563 ssl encrypted connections offered sites major set worldwide newsgroups contained within nine hierarchies eight operated consensual guidelines govern administration naming current big eight see also great renaming alt hierarchy subject procedures controlling groups big eight result less organized groups alt hierarchy tend specialized specific—for example might newsgroup big eight contains discussions children books group alt hierarchy may dedicated one specific author children books binaries posted alt.binaries making largest hierarchies many hierarchies newsgroups distributed alongside regional language-specific hierarchies ne serve specific countries regions japan malta new england companies projects administer hierarchies discuss products offer community technical support historical hierarchy free software foundation microsoft closed newsserver june 2010 providing support products forums users prefer use term usenet refer big eight hierarchies others include alt well general term netnews incorporates entire medium including private organizational news systems informal sub-hierarchy conventions also exist *.answers typically moderated cross-post groups faqs faq would posted within one group cross post *.answers group head hierarchy seen refining information news group subgroups recursive—to point silliness alt.* usenet originally created distribute text content encoded 7-bit ascii character set help programs encode 8-bit values ascii became practical distribute binary files content binary posts due size often-dubious copyright status time restricted specific newsgroups making easier administrators allow disallow traffic oldest widely used encoding method binary content uuencode unix uucp package late 1980s usenet articles often limited 60,000 characters larger hard limits exist today files therefore commonly split sections require reassembly reader header extensions base64 quoted-printable mime encodings new generation binary transport practice mime seen increased adoption text messages avoided binary attachments operating systems metadata attached files use specialized encoding formats mac os binhex special mime types used lesser known encoding systems may used one time btoa xx encoding boo usr encoding attempt reduce file transfer times informal file encoding known yenc introduced 2001 achieves 30 reduction data transferred assuming 8-bit characters safely transferred across network without first encoding 7-bit ascii space common method uploading large binary posts usenet convert files rar archives create parchive files parity files used recreate missing data every part files reaches server news server generally allocates certain amount storage space post content newsgroup storage filled time new post arrives old posts deleted make room new content network bandwidth available server high storage allocation small possible huge flood incoming content overflow allocation push everything group flood large enough beginning flood begin deleted even last part flood posted binary newsgroups able function reliably sufficient storage allocated group allow readers enough time download parts binary posting flushed group storage allocation one time posting undesired content countered newsgroup would flooded random garbage data posts sufficient quantity push content suppressed compensated service providers allocating enough storage retain everything posted day including spam floods without deleting anything average length time posts able stay group deleted commonly called retention time generally larger usenet servers enough capacity archive several years binary content even flooded new data maximum daily speed available good binaries service provider must accommodate users fast connections 3 megabit also users slow connections 256 kilobit less need time download content period several days weeks major nsps retention time 4 years results 33 petabytes 33000 terabytes storage part long retention times well growing internet upload speeds usenet also used individual users store backup data practice called usenet backup ubackup commercial providers offer easy use online backup services storing data usenet free charge although access usenet may method requires user manually select prepare upload data anyone potentially download backup files data typically encrypted files uploaded uploader control files automatically copied usenet providers multiple copies spread different geographical locations around world—desirable backup scheme binary newsgroups used distribute completely legal user-created works open-source software public domain material binary groups used illegally distribute commercial software copyrighted media pornographic material isp-operated usenet servers frequently block access alt.binaries groups reduce network traffic avoid related legal issues commercial usenet service providers claim operate telecommunications service assert responsible user-posted binary content transferred via equipment united states usenet providers qualify protection dmca safe harbor regulations provided establish mechanism comply respond takedown notices copyright holders removal copyrighted content entire usenet network nearly impossible task due rapid propagation servers retention done server petitioning usenet provider removal removes one server retention cache others possible special post cancellation message distributed remove servers many providers ignore cancel messages standard policy easily falsified submitted anyone takedown petition effective across whole network would issued origin server content posted propagated servers removal content early stage would prevent propagation modern high speed links content propagated fast arrives allowing time content review takedown issuance copyright holders establishing identity person posting illegal content equally difficult due trust-based design network like smtp email servers generally assume header origin information post true accurate however smtp email usenet post headers easily falsified obscure true identity location message source manner usenet significantly different modern p2p services p2p users distributing content typically immediately identifiable users network address origin information usenet posting completely obscured unobtainable propagated past original server also unlike modern p2p services identity downloaders hidden view p2p services downloader identifiable others network address usenet downloader connects directly server server knows address connecting usenet providers keep usage logs make logged information casually available outside parties recording industry association america existence anonymising gateways usenet also complicates tracing postings true origin newsgroup experiments first occurred 1979 tom truscott jim ellis duke university came idea replacement local announcement program established link nearby university north carolina using bourne shell scripts written steve bellovin public release news form conventional compiled software written steve daniel truscott 1980 usenet connected arpanet connections usenet arpanet mark horton graduate student set connection began feeding mailing lists arpanet usenet fa arpanet identifier usenet gained 50 member sites first year including reed college university oklahoma bell labs number people using network increased dramatically however still longer usenet users could contribute arpanet uucp networks spread quickly due lower costs involved ability use existing leased lines x.25 links even arpanet connections 1983 thousands people participated 500 hosts mostly universities bell labs sites also growing number unix-related companies number hosts nearly doubled 940 1984 100 newsgroups existed 20 devoted unix computer-related topics least third recreation mesh uucp hosts rapidly expanded became desirable distinguish usenet subset overall network vote taken 1982 usenix conference choose new name name usenet retained established applied news name uucpnet became common name overall network addition uucp early usenet traffic also exchanged fidonet dial-up bbs networks mid-1990s almost 40,000 fidonet systems operation possible communicate millions users around world local telephone service widespread use usenet bbs community facilitated introduction uucp feeds made possible ms-dos implementations uucp ufgate uucp fidonet gateway fsuucp uupc 1986 rfc 977 provided network news transfer protocol nntp specification distribution usenet articles tcp/ip flexible alternative informal internet transfers uucp traffic since internet boom 1990s almost usenet distribution nntp early versions usenet used duke news software designed one two articles day matt glickman horton berkeley produced improved version called b news could handle rising traffic 50 articles day late 1983 message format offered compatibility internet mail improved performance became dominant server software c news developed geoff collyer henry spencer university toronto comparable b news features offered considerably faster processing early 1990s internetnews rich salz developed take advantage continuous message flow made possible nntp versus batched store-and-forward design uucp since time inn development continued news server software also developed usenet first internet community place many important public developments pre-commercial internet place tim berners-lee announced launch world wide web linus torvalds announced linux project marc andreessen announced creation mosaic browser introduction image tag revolutionized world wide web turning graphical medium many jargon terms common use internet originated popularized usenet likewise many conflicts later spread rest internet ongoing difficulties spamming began usenet sascha segan pc magazine said 2008 usenet dying years segan said people pointed eternal september 1993 beginning usenet decline segan believes pornographers software crackers began putting large non-text files usenet late 1990s usenet disk space traffic increased correspondingly internet service providers questioned needed host space pornography unauthorized software state new york opened investigation child pornographers used usenet many isps dropped usenet access access alt hierarchy response john biggs techcrunch said long folks think command line better mouse original text-only social network live aol discontinued usenet access 2005 may 2010 duke university whose implementation kicked usenet 30 years earlier decommissioned usenet server citing low usage rising costs 32 years usenet news service link university north carolina chapel hill news.unc.edu retired february 4 2011 time amount usenet traffic steadily increased number text posts made big-8 newsgroups averaged 1,800 new messages every hour average 25,000 messages per day however averages minuscule comparison traffic binary groups much traffic increase reflects increase discrete users newsgroup discussions instead combination massive automated spamming increase use .binaries newsgroups large files often posted publicly small sampling change measured feed size per day follows 2008 verizon communications time warner cable sprint nextel signed agreement attorney general new york andrew cuomo shut access sources child pornography time warner cable stopped offering access usenet verizon reduced access big 8 hierarchies sprint stopped access alt hierarchies stopped access alt.binaries hierarchies cuomo never specifically named usenet anti-child pornography campaign david dejean pc world said worry isps used cuomo campaign excuse end portions usenet access costly internet service providers high demand customers 2008 aol longer offered usenet access four providers responded cuomo campaign five largest internet service providers united states 50 u.s. isp marketshare june 8 2009 announced would longer provide access usenet service july 15 2009 aol announced would discontinue integrated usenet service early 2005 citing growing popularity weblogs chat forums on-line conferencing aol community tremendous role popularizing usenet 11 years earlier august 2009 verizon announced would discontinue access usenet september 30 2009 janet announced would discontinue usenet service effective july 31 2010 citing google groups alternative microsoft announced would discontinue support public newsgroups msnews.microsoft.com june 1 2010 offering web forums alternative primary reasons cited discontinuance usenet service general isps include decline volume actual readers due competition blogs along cost liability concerns increasing proportion traffic devoted file-sharing spam unused discontinued groups isps include pressure cuomo campaign child pornography one reasons dropping usenet feeds part services isps cox atlantic communications resisted 2008 trend eventually drop respective usenet feeds 2010 public archives usenet articles existed since early days usenet system created kenneth almquist late 1982 distributed archiving usenet posts suggested november 1982 scott orshan proposed every site keep articles posted forever also november year rick adams responded post asking anyone archived netnews anyone plan stating afraid admit started archiving 'useful newsgroups september 18 june 1982 gregory g. woodbury proposed automatic access archives system consisted automatic answering fixed-format messages special mail recipient specified machines 1985 two news archiving systems one rfc posted internet first system called keepnews mark m. swenson university arizona described program attempts provide sane way extracting keeping information comes usenet main advantage system allow users mark articles worthwhile retain second system ya news archiver chuq von rospach similar keepnews designed work much larger archives wonderful quadratic search time feature unix ... becomes real problem von rospach early 1985 posted detailed rfc archiving accessing usenet articles keyword lookup rfc described program could generate maintain archive usenet articles allow looking articles based article-id subject lines keywords pulled article also included c code internal data structure system desire fulltext search index archived news articles new either one request made april 1991 alex martelli sought build sort keyword index news archive early may mr. martelli posted summary responses usenet noting popular suggestion award must definitely go 'lq-text package liam quin recently posted alt.sources huge site http //asstr.org archives indexes erotic pornographic stories posted usenet group alt.sex.stories today archiving usenet led fear loss privacy archive simplifies ways profile people partly countered introduction x-no-archive yes header controversial web-based archiving usenet posts began 1995 deja news large searchable database 2001 database acquired google google groups hosts archive usenet posts dating back may 1981 earliest posts date may 1981 june 1991 donated google university western ontario help david wiseman others originally archived henry spencer university toronto zoology department archives late 1991 early 1995 provided kent landfield netnews cd series jürgen christoffel gmd archive posts march 1995 onward started company dejanews later deja purchased google february 2001 google began archiving usenet posts starting second week august 2000 google criticized vice wired contributors well former employees stewardship archive breaking search functionality usenet whole administrators server administrator free whatever pleases long end users peer servers tolerate accept nevertheless famous administrators
node12:Wikipedia entry. Entry name: UDP_hole_punching. Entry content: udp hole punching udp hole punching commonly used technique employed network address translation nat applications maintaining user datagram protocol udp packet streams traverse nat nat traversal techniques typically required client-to-client networking applications internet involving hosts connected private networks especially peer-to-peer direct client-to-client dcc voice internet protocol voip deployments udp hole punching establishes connectivity two hosts communicating across one network address translators typically third-party hosts public transit network used establish udp port states may used direct communications communicating hosts port state successfully established hosts communicating port state may maintained either normal communications traffic prolonged absence thereof keep-alive packets usually consisting empty udp packets packets minimal non-intrusive content udp hole punching method establishing bidirectional udp connections internet hosts private networks using network address translators technique applicable scenarios types nats nat operating characteristics standardized hosts network connectivity inside private network connected via nat internet typically use session traversal utilities nat stun method interactive connectivity establishment ice determine public address nat communications peers require process another host public network used establish port mapping udp port state assumed valid direct communication application hosts since udp state usually expires short periods time range tens seconds minutes udp port closed process udp hole punching employs transmission periodic keep-alive packets renewing life-time counters udp state machine nat udp hole punching work symmetric nat devices also known bi-directional nat tend found large corporate networks symmetric nat nat mapping associated connection well-known stun server restricted receiving data well-known server therefore nat mapping well-known server sees useful information endpoint somewhat elaborate approach hosts start sending using multiple attempts restricted cone nat first packet host blocked nat device record sent packet machine let packets coming ip address port number technique widely used peer-to-peer software voice internet protocol telephony also used assist establishment virtual private networks operating udp technique sometimes extended transmission control protocol tcp connections though less success tcp connection streams controlled host os application sequence numbers selected randomly thus nat device performs sequence-number checking consider packets associated existing connection drop let b two hosts private network n n two nat devices globally reachable ip addresses eip eip respectively public server well-known globally reachable ip address
node13:Wikipedia entry. Entry name: Medium_access_control. Entry content: medium access control ieee 802 lan/man standards medium access control mac sublayer layer controls hardware responsible interaction wired optical wireless transmission medium mac sublayer logical link control llc sublayer together make data link layer within data link layer llc provides flow control multiplexing logical link i.e ethertype 802.1q vlan tag etc mac provides flow control multiplexing transmission medium two sublayers together correspond layer 2 osi model compatibility reasons llc optional implementations ieee 802.3 frames raw compulsory implementations ieee 802 physical layer standards within hierarchy osi model ieee 802 standards mac sublayer provides control abstraction physical layer complexities physical link control invisible llc upper layers network stack thus llc sublayer higher layers may used mac turn medium access control block formally connected phy via media-independent interface although mac block today typically integrated phy within device package historically mac could used phy independent transmission medium sending data another device network mac sublayer encapsulates higher-level frames frames appropriate transmission medium i.e mac adds syncword preamble also padding necessary adds frame check sequence identify transmission errors forwards data physical layer soon appropriate channel access method permits topologies collision domain bus ring mesh point-to-multipoint topologies controlling data sent wait necessary avoid collisions additionally mac also responsible compensating collisions initiating retransmission jam signal detected receiving data physical layer mac block ensures data integrity verifying sender frame check sequences strips sender preamble padding passing data higher layers according ieee std 802-2001 section 6.2.3 mac sublayer primary functions performed mac layer case ethernet according 802.3-2002 section 4.1.4 functions required mac local network addresses used ieee 802 networks fddi networks called media access control addresses based addressing scheme used early ethernet implementations mac address intended unique serial number mac addresses typically assigned network interface hardware time manufacture significant part address identifies manufacturer assigns remainder address thus provide potentially unique address makes possible frames delivered network link interconnects hosts combination repeaters hubs bridges switches network layer routers thus example ip packet reaches destination sub network destination ip address layer 3 network layer concept resolved address resolution protocol ipv4 neighbor discovery protocol ipv6 mac address layer 2 concept destination host examples physical networks ethernet networks wi-fi networks ieee 802 networks use ieee 802 48-bit mac addresses mac layer required full-duplex point-to-point communication address fields included point-to-point protocols compatibility reasons channel access control mechanisms provided mac layer also known multiple access protocol makes possible several stations connected physical medium share examples shared physical media bus networks ring networks hub networks wireless networks half-duplex point-to-point links multiple access protocol may detect avoid data packet collisions packet mode contention based channel access method used reserve resources establish logical channel circuit-switched channelization-based channel access method used channel access control mechanism relies physical layer multiplex scheme widespread multiple access protocol contention based csma/cd protocol used ethernet networks mechanism utilized within network collision domain example ethernet bus network hub-based star topology network ethernet network may divided several collision domains interconnected bridges switches multiple access protocol required switched full-duplex network today switched ethernet networks often available equipment compatibility reasons use directional antennas millimeter-wave communication wireless personal area network increases probability concurrent scheduling non‐interfering transmissions localized area results immense increase network throughput however optimum scheduling concurrent transmission np-hard problem cellular networks gsm umts lte networks also use mac layer mac protocol cellular networks designed maximize utilization expensive licensed spectrum air interface cellular network layers 1 2 osi model layer 2 divided multiple protocol layers umts lte protocols packet data convergence protocol pdcp radio link control rlc protocol mac protocol base station absolute control air interface schedules downlink access well uplink access devices mac protocol specified 3gpp ts 25.321 umts ts 36.321 lte ts 38.321 5g new radio nr
node14:Wikipedia entry. Entry name: QUIC. Entry content: quic quic pronounced 'quick general-purpose transport layer network protocol initially designed jim roskind google implemented deployed 2012 announced publicly 2013 experimentation broadened described ietf still internet draft quic used half connections chrome web browser google servers web browsers support protocol although name initially proposed acronym quick udp internet connections ietf use word quic acronym simply name protocol among applications quic improves performance connection-oriented web applications currently using tcp establishing number multiplexed connections two endpoints user datagram protocol udp works hand-in-hand http/2 multiplexed connections allowing multiple streams data reach endpoints independently hence independent packet losses involving streams contrast http/2 hosted transmission control protocol tcp suffer head-of-line-blocking delays multiplexed streams tcp packets delayed lost quic secondary goals include reduced connection transport latency bandwidth estimation direction avoid congestion also moves congestion control algorithms user space endpoints rather kernel space claimed allow algorithms improve rapidly additionally protocol extended forward error correction fec improve performance errors expected seen next step protocol evolution june 2015 internet draft specification quic submitted ietf standardization quic working group established 2016 october 2018 ietf http quic working groups jointly decided call http mapping quic http/3 advance making worldwide standard transmission control protocol tcp aims provide interface sending streams data two endpoints data handed tcp system ensures data makes end exactly form connection indicate error condition exists tcp breaks data network packets adds small amounts data packet additional data includes sequence number used detect packets lost transmitted order checksum allows errors within packet data detected either problem occurs tcp uses automatic repeat request arq tell sender re-send lost damaged packet implementations tcp see error connection blocking operation stopping transfers error resolved connection considered failed single connection used send multiple streams data case http/2 protocol streams blocked although one might problem instance single error occurs downloading gif image used favicon entire rest page wait problem resolved tcp system designed look like data pipe stream deliberately contains little understanding data transmits data additional requirements like encryption using tls must set systems running top tcp using tcp communicate similar software end connection sorts setup tasks requires handshake process often requires several round-trips requests responses connection established due inherent latency long-distance communications add significant overhead overall transmission quic aims nearly equivalent tcp connection much-reduced latency primarily two changes rely understanding behaviour http traffic first change greatly reduce overhead connection setup http connections demand tls quic makes exchange setup keys supported protocols part initial handshake process client opens connection response packet includes data needed future packets use encryption eliminates need set tcp connection negotiate security protocol via additional packets protocols serviced way combining together multiple steps single request-response data used following requests initial setup well future requests would otherwise negotiated separate connections quic uses udp basis include loss recovery instead quic stream separately flow controlled lost data retransmitted level quic udp means error occurs one stream like favicon example protocol stack continue servicing streams independently useful improving performance error-prone links cases considerable additional data may received tcp notices packet missing broken data blocked even flushed error corrected quic data free processed single multiplexed stream repaired quic includes number mundane changes also improve overall latency throughput instance packets encrypted individually result encrypted data waiting partial packets generally possible tcp encryption records bytestream protocol stack unaware higher-layer boundaries within stream negotiated layers running top quic aims single handshake process another goal quic system improve performance network-switch events like happens user mobile device moves local wifi hotspot mobile network occurs tcp lengthy process starts every existing connection times one-by-one re-established demand solve problem quic includes connection identifier uniquely identifies connection server regardless source allows connection re-established simply sending packet always contains id original connection id still valid even user ip address changes quic implemented application-space opposed operating system kernel generally invokes additional overhead due context switches data moved applications however case quic protocol stack intended used single application application using quic connections hosted udp ultimately difference could small much overall http/2 stack already applications libraries commonly placing remaining parts libraries essentially error correction little effect http/2 stack size overall complexity organization allows future changes made easily require changes kernel updates one quic longer-term goals add new systems forward error correction fec improved congestion control one concern move tcp udp tcp widely adopted many middle-boxes internet infrastructure tuned tcp rate-limit even block udp google carried number exploratory experiments characterize found small number connections blocked manner led use rapid fallback-to-tcp system chromium network stack opens quic traditional tcp connection time allows fallback zero latency protocol created google taken ietf name quic already 2012 around quic version 20 quite different quic continued evolve refined within ietf original google quic designed general purpose protocol though initially deployed protocol support http chromium current evolution ietf protocol quic general purpose transport protocol chromium developers continued track evolution ietf quic standardization efforts adopt fully comply recent internet standards quic chromium quic code experimentally developed google chrome starting 2012 announced part chromium version 29 released august 20 2013 chrome currently enabled default chromium chrome browser experimental quic support enabled chrome //flags also browser extension indicate pages served quic similarly introduced opera 16 turned opera //flags/ enable-quic opera //flags/ enable-quic-https active sessions seen opera //net-internals/ quic firefox yet support quic 2019-07 cronet library quic protocols available android applications module loadable via google play services 2017 three actively maintained implementations google servers support quic google published prototype server go implementation called quic-go also available powers experimental quic support caddy server july 11 2017 litespeed technologies officially began supporting quic load balancer webadc litespeed web server products july 2019 55.9 quic websites used litespeed 43.7 used nginx although first google servers supported http-over-quic connections facebook also launched technology 2018 cloudflare offering quic support beta basis since 2018 july 2019 3.2 websites use quic addition several stale community projects libquic created extracting chromium implementation quic modifying minimize dependency requirements goquic provides go bindings libquic finally quic-reverse-proxy docker image acts reverse proxy server translating quic requests plain http understood origin server following implementations quic gquic available source form
node15:Wikipedia entry. Entry name: IP_over_Avian_Carriers. Entry content: ip avian carriers computer networking ip avian carriers ipoac proposal carry internet protocol ip traffic birds homing pigeons ip avian carriers initially described rfc 1149 request comments rfc issued internet engineering task force ietf written d. waitzman released april 1 1990 one several april fools day request comments waitzman described improvement protocol rfc 2549 ip avian carriers quality service 1 april 1999 later rfc 6214—released 1 april 2011 13 years introduction ipv6—carpenter hinden published adaptation rfc 1149 ipv6 ipoac successfully implemented nine packets data packet loss ratio 55 due operator error response time ranging 3,000 seconds ≈54 minutes 6,000 seconds ≈1.77 hours thus technology suffers poor latency nevertheless large transfers avian carriers capable high average throughput carrying flash memory devices effectively implementing sneakernet last 20 years information density storage media thus bandwidth avian carrier increased 3 times fast bandwidth internet ipoac may achieve bandwidth peaks orders magnitude internet used multiple avian carriers rural areas example 16 homing pigeons given eight 512 gb sd cards take hour reach destination throughput transfer would 145.6 gbit/s excluding transfer sd cards 28 april 2001 ipoac actually implemented bergen linux user group name cpip carrier pigeon internet protocol sent nine packets distance approximately five kilometers three miles carried individual pigeon containing one ping icmp echo request received four responses real life implementation mentioned french mp martine billard french assemblée nationale debates hadopi implementation noted song paper pings steve savitzky december 2005 gartner report bird flu concluded “ pandemic would n't affect systems directly ” humorously criticized neglecting consider rfc 1149 rfc 2549 analysis although collisions unlikely packets lost particularly raptors rafting photographers already use pigeons sneakernet transport digital photos flash media camera tour operator 30-mile distance single pigeon may able carry tens gigabytes data around hour average bandwidth basis compares favorably current adsl standards even accounting lost drives march 12 2004 yossi vardi ami ben-bassat guy vardi sent 3 homing pigeons 100 km distance carrying 20-22 tiny memory cards msystems disk-on-chip containing 1.3 gb amounting total 4 gb data achieving effective throughput 2.27 mbps purpose test measure confirm improvement rfc 2549 since developers used flash memory instead paper notes specified rfc 2549 experiment widely criticized example optimized implementation breaks official standard inspired rfc 2549 9 september 2009 marketing team unlimited regional company south africa decided host tongue-in-cheek pigeon race pet pigeon winston local telecom company telkom sa race send 4 gigabytes data howick hillcrest approximately 60 km apart pigeon carried microsd card competed telkom adsl line winston beat data transfer telkom adsl line total time two hours six minutes 57 seconds uploading data microsd card completion download card time winston victory adsl transfer 4 complete november 2009 australian comedy/current-affairs television program hungry beast repeated experiment hungry beast team took challenge fiery parliament session wherein government time blasted opposition supporting telecommunications investments saying opposition way australians would data transfer carrier pigeons hungry beast team read south african experiment assumed developed western country australia would higher speeds experiment team transfer 700mb file via three delivery methods determine fastest carrier pigeon microsd card car carrying usb stick telstra australia largest telecom provider adsl line data transferred tarana rural new south wales western-sydney suburb prospect new south wales distance 132 km road approximately halfway race internet connection unexpectedly dropped transfer restarted pigeon race time approximately 1 hour 5 minutes car came second 2 hours 10 minutes internet transfer finish dropped second time coming back estimated time upload completion one point high 9 hours point estimated upload time fall 4 hours similar pigeon race conducted september 2010 tech blogger trefor.net isp timico cto trefor davies farmer michelle brumfield rural yorkshire england delivering five-minute video bbc correspondent 75 miles away skegness pigeon pitted carrying memory card 300mb hd video davies haircut upload youtube via british telecom broadband pigeon released 11.05 arrived loft one hour fifteen minutes later upload still incomplete failed interim
node16:Wikipedia entry. Entry name: EPON_Protocol_over_Coax. Entry content: epon protocol coax epon protocol coax epoc refers transparent extension ethernet passive optical network epon cable operator hybrid fiber-coax hfc network service provider perspective use coax portion network transparent epon protocol operation optical line terminal olt thereby creating unified scheduling management quality service qos environment includes optical coax portions network ieee 802.3 ethernet working group initiated standards process creation epoc study group november 2011 epoc adds family ieee 802.3 ethernet first mile efm standards institute electrical electronics engineers ieee 802.3 standards committee published standards symmetric 1gbit/s epon network originally published september 2004 ieee 802.3ah-2004 10gbit/s epon network permitting symmetric 10gbit/s asymmetric 10gbit/s downstream 1gbit/s upstream originally published june 2009 ieee 802.3av-2009 also known 10g-epon call interest cfi group process initiated may 2011 broadcom receiving requests initiating epoc standardization ieee chinese cable operators also north american cable operators many companies became involved cfi creation consensus process according cfi materials representatives following companies supported formation study group alcatel-lucent aurora networks bright house networks broadcom cogeco cable inc. cablelabs comcast cox networks dell fiberhome telecommunication technologies harmonic inc. hewlett-packard high speed design huawei neophotonics pmc-sierra qualcomm sumitomo electric industries technical working committee china radio tv association time warner cable wuhan yangtze optical technologies co. ltd. zte november 2011 epon phy coax cfi presented ieee 802.3 working group plenary creation epoc study group sg approved may 2012 epoc study group completed draft project authorization request par 5 criteria responses set objectives work materials require review approval ieee 802.3 working group ieee 802 lan/man standards committee lmsc ieee new standards committee nescom upon receiving approval epoc study group transition epoc task force tf begin work leads directly creating draft standard 30 august 2012 ieee-sa approved par permitting ieee 802.3 working group charter ieee p802.3bn task force ieee 802.3 standards apply media access control mac sublayer physical sublayer specifications respective management epon ieee 802.3 defined separately service provider mac phy called optical line terminal olt subscriber mac physical sublayer called optical network unit onu medium interconnecting olt onu fiber optical cable two wavelengths defined full-duplex operation one continuous downstream channel operation olt transmitting one onus another upstream burst mode channel operation permits olt-controlled time-division sharing upstream channel amongst onus pon similarly epoc architecture consists service provider coax line terminal clt subscriber coax network unit cnu intent clt mac sublayer olt mac sublayer cnu mac sublayer onu mac sublayer optical physical sublayer fiber optical media replaced coax physical sublayer coaxial distribution network cxdn media coax media downstream upstream communication channels utilize radio frequency rf spectrum assigned made available cable operator coax network case coax network medium dependent interface mdi typically industry standard f connector ieee 802.3 standards describe implementations system solutions use olt clt onu cnu standard apply respective mac physical sublayers two system models discussion ieee 802.3 epoc study group first direct output ieee 802.3 epoc standardization effort i.e. clt one cnus interconnected coaxial distribution network second enabled future epoc standard outside scope ieee 802.3 working group traditional epon deployment consisting olt device one onu devices attached pon one new devices referred functionally optical coax media converter cmc attach one side pon cxdn associated cnus communications coax media follows epoc standard intent second model permit olt transparently manage collection onu cnu devices similar fashion e.g unified epon management scheduling quality service second model viewed extending ethernet pon onto coax given likely shorter reach coax clt developed likely used fttb applications clt building epoc tenants second possibility outside plant e.g strand mounted cabinet based clt would fttc
node17:Wikipedia entry. Entry name: Chirp_spread_spectrum. Entry content: chirp spread spectrum digital communications chirp spread spectrum css spread spectrum technique uses wideband linear frequency modulated chirp pulses encode information chirp sinusoidal signal frequency increase decrease time often polynomial expression relationship time frequency picture example upchirp frequency increases linearly time sometimes frequency upchirps increase exponentially time spread spectrum methods chirp spread spectrum uses entire allocated bandwidth broadcast signal making robust channel noise chirps utilize broad band spectrum chirp spread spectrum also resistant multi-path fading even operating low power however unlike direct-sequence spread spectrum dsss frequency-hopping spread spectrum fhss add pseudo-random elements signal help distinguish noise channel instead relying linear nature chirp pulse additionally chirp spread spectrum resistant doppler effect typical mobile radio applications chirp spread spectrum originally designed compete ultra-wideband precision ranging low-rate wireless networks 2.45 ghz band however since release ieee 802.15.4a also known ieee 802.15.4a-2007 longer actively considered ieee standardization area precision ranging chirp spread spectrum ideal applications requiring low power usage needing relatively low data rates 1 mbit/s less particular ieee 802.15.4a specifies css technique use low-rate wireless personal area networks lr-wpan however whereas ieee 802.15.4-2006 standard specifies wpans encompass area 10 less ieee 802.15.4a-2007 specifies css physical layer used longer ranges devices moving high speeds part network nanotron css implementation actually seen work range 570 meters devices nanotron implementation work data rates 2 mbit/s higher specified 802.15.4a finally ieee 802.15.4a phy standard actually mixes css encoding techniques differential phase shift keying modulation dpsk achieve better data rates chirp spread spectrum may also used future military applications difficult detect intercept operating low power similar frequency swept waveforms used frequency modulated continuous wave radars measure range distance unmodulated continuous wave doppler radar measure range-rate relative velocity along line sight fm-cw radars widely used radio altimeters aircraft
node18:Wikipedia entry. Entry name: Multipath_TCP. Entry content: multipath tcp multipath tcp mptcp ongoing effort internet engineering task force ietf multipath tcp working group aims allowing transmission control protocol tcp connection use multiple paths maximize resource usage increase redundancy january 2013 ietf published multipath specification experimental standard rfc 6824 currently ietf works update version 1 mptcp protocol obsolete rfc 6824 approved 2019 redundancy offered multipath tcp enables inverse multiplexing resources thus increases tcp throughput sum available link-level channels instead using single one required plain tcp multipath tcp backward compatible plain tcp multipath tcp particularly useful context wireless networks using wi-fi mobile network typical use case addition gains throughput inverse multiplexing links may added dropped user moves coverage without disrupting end-to-end tcp connection problem link handover thus solved abstraction transport layer without special mechanisms network link level handover functionality implemented endpoints without requiring special functionality subnetworks accordance internet end-to-end principle multipath tcp also brings performance benefits datacenter environments contrast ethernet channel bonding using 802.3ad link aggregation multipath tcp balance single tcp connection across multiple interfaces reach high throughput order facilitate deployment multipath tcp presents socket interface tcp implies standard tcp application used multipath tcp fact spreading data across several subflows applications could benefit enhanced api control underlying multipath tcp stack two different apis proposed expose features multipath tcp stack applications api extends netlink linux enhanced socket api july 2013 mptcp working group reported five independent implementations multipath tcp including reference implementation linux kernel currently available implementations july 2014 oracle reported implementation solaris developed june 2015 work progress mptcp wg meeting ietf 93 sunghoon seo announced kt deployed since mid june commercial service allows smartphone users reach 1 gbit/s using mptcp proxy service multipath tcp designed backward compatible regular tcp support application however specific deployments leverage ability simultaneously using different paths apple uses multipath tcp support siri application iphone siri sends voice samples https session apple servers servers reply information requested users according apple engineers main benefits multipath tcp application deployment use multipath tcp aggregate bandwidth different networks example several types smartphones notably korea use multipath tcp bond wifi 4g socks proxies another example hybrid access networks deployed network operators willing combine xdsl lte networks deployment multipath tcp used efficiently balance traffic xdsl lte network multipath tcp uses options described detail rfc 6824 multipath tcp options encoded tcp options option kind 30 reserved iana multipath tcp option kind 30 length variable remainder content begins 4-bit subtype field iana created maintain sub-registry entitled mptcp option subtypes transmission control protocol tcp parameters registry subtype fields defined follows values 0x8 0xe currently unassigned core idea multipath tcp define way build connection two hosts two interfaces standard tcp instance alice smartphone 3g wifi interfaces ip addresses 10.11.12.13 10.11.12.14 bob computer ethernet interface ip address 20.21.22.23 standard tcp connection established two ip addresses tcp connection identified four-tuple source destination addresses ports given restriction application create one tcp connection single link multipath tcp allows connection use several paths simultaneously multipath tcp creates one tcp connection called subflow path needs used purpose different protocol operations defined rfc 6824 multipath tcp adds new mechanisms tcp transmissions detailed specification detailed protocol specification provided rfc 6824 several survey articles provide introduction protocol several congestion control mechanisms defined multipath tcp main difference classical tcp congestion control schemes need react congestion different paths without unfair single path tcp sources could compete one paths four multipath tcp congestion control schemes currently supported multipath tcp implementation linux kernel stream control transmission protocol sctp reliable in-order datagram stream transport protocol originally intended telecommunication signaling supports concurrent use multiple access links allows application influence access interface selections datagram stream basis also supports mobility via access renegotiation hence sctp also transport layer solution offers type 3 flow granularity concurrency flow scheduling control multipath tcp also fully supports mobility fashion similar multipath tcp within ip multimedia subsystem ims architecture session initiation protocol sip support concurrent use multiple contact ip addresses registration one ims user agents allows creation multiple ims signaling paths signaling paths signaling messages carry session description protocol sdp messaging negotiate media streams sdp allows re- negotiation streams one media session multiple paths turn enables application layer multipath transport point view ims therefore offer application layer multipath support flow granularity concurrent access multipath extension real-time transport protocol rtp currently discussion within ietf multipath rtp offer flow granularity concurrent access mobility via ims sdp signaling rtp control protocol ietf currently developing quic protocol integrates features traditionally found tcp tls http protocols thanks flexibility extensibility quic possible extend support multiple paths address use cases multipath tcp first design multipath quic proposed implemented evaluated session layer mobile access router project experimented 2003 aggregation multiple wireless accesses heterogeneous technologies transparently balancing traffic response perceived performance parallel access schemes used accelerate transfers taking advantage http range requests initiate connections multiple servers replicated content equivalent multipath tcp involve application layer limited content known size
node19:Wikipedia entry. Entry name: Peg_DHCP. Entry content: peg dhcp peg dhcp method defined rfc 2322 assign ip addresses context regular dhcp would n't work server hands wooden clothes-pegs numbered addresses allocate additional leaflet network information client typically user configures device accordingly even though rfc management ip numbers peg-dhcp published first april 1998 describes unlike april fools day rfcs regularly used protocol serious purpose preparation hacking progress 1997 organizers looking robust way assign ip addresses participants obvious first choice dhcp almost completely defenseless rogue servers retained considering traditionally creative use network instead every address allocate variable host part written wooden peg waterproof marker user would attach cable connecting device network peg accompanied leaflet information static net part ip address netmask default gateway dns servers often also mac addresses prevent arp spoofing different subnets lan wlan distinguished different colors used write pegs peg dhcp successfully used hacking progress '97 following events netherlands including 2009 event hacking random german chaos computer club used chaos communication camps still using editions chaos communication congress hacking random pegs distributed according network map event terrain every field distinct subnet per subnet division regular ip address distribution via dhcp fixed ip addresses distributed via peg dhcp obtain ip address via peg dhcp one note subnet number field datenklo dedicated rain-proof box networking equipment usually empty portable toilet subnet number correct routable ip address could handed
node20:Wikipedia entry. Entry name: Licklider_Transmission_Protocol. Entry content: licklider transmission protocol licklider transmission protocol point point protocol use deep space links ltp commonly seen standard underlying convergence layer protocol bundle protocol rfc 5050 supporting wide selection networks ltp named honor american computer scientist joseph carl robnett licklider ltp designed run directly data link layer e.g aos also run user datagram protocol udp e.g used sensor network private network bandwidth contestation ’ issue software debug purposes therefore address issues like routing congestion control originally designed support “ long-haul ” transmission interplanetary network design based experiences ccsds file delivery protocol cfdp developed space communication features application divides data send two parts either part may size 0 ltp engine stores data queue checks whether link towards destination available starts transmission link available data remains queue transmission starts soon so-called “ link state cue ” arrives either underlying link layer management information base given red data send last segment red data marked “ end red data ” flag timer started segment absent green data send “ end block ” flag set otherwise green data transmitted last segment part gets marked “ end block ” flag receiver issues report segment sender received “ end red data ” segment data complete report segment transmitted timer started upon arrival report segment sender cancels timer queues report-acknowledgement receiver informs application red data successfully transmitted receiver receives report-acknowledgement cancels timer transmission red data completed transmission completed “ end block ” segment arrived two reference implementations ltp
node21:Wikipedia entry. Entry name: Shared_medium. Entry content: shared medium telecommunication shared medium medium channel information transfer serves one user time channels function correctly one user transmitting channel access method always effect circuit switching user typically gets fixed share channel capacity multiplexing scheme divides capacity medium common multiplexing schemes include time-division multiplexing frequency-division multiplexing channel access methods circuit switching include time-division multiple access frequency-division multiple access etc packet switching sharing dynamic — user takes little none capacity idle utilize entire capacity transmitting users idle channel access methods packet switching include carrier sense multiple access token passing etc
node22:Wikipedia entry. Entry name: STUN. Entry content: stun session traversal utilities nat stun standardized set methods including network protocol traversal network address translator nat gateways applications real-time voice video messaging interactive communications stun tool used protocols interactive connectivity establishment ice session initiation protocol sip webrtc provides tool hosts discover presence network address translator discover mapped usually public internet protocol ip address port number nat allocated application user datagram protocol udp flows remote hosts protocol requires assistance third-party network server stun server located opposing public side nat usually public internet originally stun acronym simple traversal user datagram protocol udp network address translators title changed specification updated set methods published rfc 5389 retaining acronym stun tool communications protocols detect traverse network address translators located path two endpoints communication implemented light-weight client-server protocol requiring simple query response components third-party server located common easily accessible network typically internet client side implemented user communications application voice internet protocol voip phone instant messaging client basic protocol operates essentially follows client typically operating inside private network sends binding request stun server public internet stun server responds success response contains ip address port number client observed server perspective result obfuscated exclusive xor mapping avoid translation packet content application layer gateways algs perform deep packet inspection attempt perform alternate nat traversal methods stun messages sent user datagram protocol udp packets since udp provide reliable transport guarantees reliability achieved application-controlled retransmissions stun requests stun servers implement reliability mechanism responses reliability mandatory transmission control protocol tcp may used induces extra networking overhead security-sensitive applications stun may transported encrypted transport layer security tls application may automatically determine suitable stun server communications particular peer querying domain name system dns stun udp stuns tcp/tls server srv resource record e.g. _stun._udp.example.com standard listening port number stun server 3478 udp tcp 5349 tls alternatively tls may also run tcp port server implementation de-multiplex tls stun packets case stun server found using dns lookups standard recommends destination domain name queried address records aaaa would used default port numbers addition using protocol encryption tls stun also built-in authentication message-integrity mechanisms via specialized stun packet types client evaluated external address use candidate communicating peers sharing external nat address rather private address reachable peers public network communicating peers located different private networks behind nat peers must coordinate determine best communication path nat behavior may restrict peer connectivity even public binding known interactive connectivity establishment ice protocol provides structured mechanism determine optimal communication path two peers session initiation protocol sip extensions defined enable use ice setting call two hosts network address translation implemented via number different address port mapping schemes none standardized stun self-contained nat traversal solution applicable nat deployment scenarios work correctly tool among methods tool protocols dealing nat traversal notably traversal using relay nat turn interactive connectivity establishment ice stun work three types nat full cone nat restricted cone nat port restricted cone nat cases restricted cone port restricted cone nats client must send packet endpoint nat allow packets endpoint client stun work symmetric nat also known bi-directional nat often found networks large companies since ip address stun server different endpoint symmetric nat case nat mapping different stun server endpoint turn offers better results symmetric nat original specification stun rfc 3489 specified algorithm characterize nat behavior according address port mapping behavior algorithm reliably successful applicable subset nat devices deployed algorithm consists series tests performed application path diagram ends red box udp communication possible path ends yellow green box communication possible methods rfc 3489 proved unreliable cope plethora different nat implementations application scenarios encountered production networks stun protocol method updated rfc 5389 retaining many original specifications subset methods removing others
node23:Wikipedia entry. Entry name: Frequency-division_multiplexing. Entry content: frequency-division multiplexing telecommunications frequency-division multiplexing fdm technique total bandwidth available communication medium divided series non-overlapping frequency bands used carry separate signal allows single transmission medium cable optical fiber shared multiple independent signals another use carry separate serial bits segments higher rate signal parallel natural example frequency-division multiplexing radio television broadcasting multiple radio signals different frequencies pass air time another example cable television many television channels carried simultaneously single cable fdm also used telephone systems transmit multiple telephone calls high capacity trunklines communications satellites transmit multiple channels data uplink downlink radio beams broadband dsl modems transmit large amounts computer data twisted pair telephone lines among many uses analogous technique called wavelength division multiplexing used fiber-optic communication multiple channels data transmitted single optical fiber using different wavelengths frequencies light multiple separate information modulation signals sent fdm system video signals television channels sent cable tv system called baseband signals source end frequency channel electronic oscillator generates carrier signal steady oscillating waveform single frequency serves carry information carrier much higher frequency baseband signal carrier signal baseband signal combined modulator circuit modulator alters aspect carrier signal amplitude frequency phase baseband signal piggybacking data onto carrier result modulating mixing carrier baseband signal generate sub-frequencies near carrier frequency sum f f difference f − f frequencies information modulated signal carried sidebands side carrier frequency therefore information carried channel narrow band frequencies clustered around carrier frequency called passband channel similarly additional baseband signals used modulate carriers frequencies creating channels information carriers spaced far enough apart frequency band frequencies occupied channel passbands separate channels overlap channels sent transmission medium coaxial cable optical fiber air using radio transmitter long channel frequencies spaced far enough apart none passbands overlap separate channels interfere thus available bandwidth divided slots channels carry separate modulated signal example coaxial cable used cable television systems bandwidth 1000 mhz passband television channel 6 mhz wide room many channels cable modern digital cable systems channel turn subdivided subchannels carry 10 digital television channels destination end cable fiber radio receiver channel local oscillator produces signal carrier frequency channel mixed incoming modulated signal frequencies subtract producing baseband signal channel called demodulation resulting baseband signal filtered frequencies output user long distance telephone connections 20th century telephone companies used l-carrier similar coaxial cable systems carrying thousands voice circuits multiplexed multiple stages channel banks shorter distances cheaper balanced pair cables used various systems including bell system k- n-carrier cables n't allow large bandwidths 12 voice channels double sideband later 24 single sideband multiplexed four wires one pair direction repeaters every several miles approximately 10 km see 12-channel carrier system end 20th century fdm voice circuits become rare modern telephone systems employ digital transmission time-division multiplexing tdm used instead fdm since late 20th century digital subscriber lines dsl used discrete multitone dmt system divide spectrum frequency channels concept corresponding frequency-division multiplexing optical domain known wavelength-division multiplexing commonplace fdm system used example l-carrier uses crystal filters operate 8 mhz range form channel group 12 channels 48 khz bandwidth range 8140 8188 khz selecting carriers range 8140 8184 khz selecting upper sideband group translated standard range 60 108 khz carrier 8248 khz systems used dtl direct line dfsg directly formed super group 132 voice channels 2sg 1g formed using dtl plane modulation frequency plan given fig1 fig2 use dtl technique allows formation maximum 132 voice channels placed direct line dtl eliminates group super group equipment dfsg take similar steps direct formation number super groups obtained 8 khz dfsg also eliminates group equipment offer dtl dfsg fit requirement low density system using dtl higher density system using dfsg dfsg terminal similar dtl terminal except instead two super groups many super groups combined mastergroup 600 channels 10 super-groups example based dfsg fdm also used combine signals final modulation onto carrier wave case carrier signals referred subcarriers example stereo fm transmission 38 khz subcarrier used separate left-right difference signal central left-right sum channel prior frequency modulation composite signal analog ntsc television channel divided subcarrier frequencies video color audio dsl uses different frequencies voice upstream downstream data transmission conductors also example frequency duplex frequency-division multiplexing used allow multiple users share physical communications channel called frequency-division multiple access fdma fdma traditional way separating radio signals different transmitters 1860s 70s several inventors attempted fdm names acoustic telegraphy harmonic telegraphy practical fdm achieved electronic age meanwhile efforts led elementary understanding electroacoustic technology resulting invention telephone
node24:Wikipedia entry. Entry name: Space-division_multiple_access. Entry content: space-division multiple access space-division multiple access sdma channel access method based creating parallel spatial pipes next higher capacity pipes spatial multiplexing and/or diversity able offer superior performance radio multiple access communication systems traditional mobile cellular network systems base station information position mobile units within cell radiates signal directions within cell order provide radio coverage method results wasting power transmissions mobile units reach addition causing interference adjacent cells using frequency called co-channel cells likewise reception antenna receives signals coming directions including noise interference signals using smart antenna technology differing spatial locations mobile units within cell space-division multiple access techniques offer attractive performance enhancements radiation pattern base station transmission reception adapted user obtain highest gain direction user often done using phased array techniques gsm cellular networks base station aware distance direction mobile phone use technique called timing advance ta base transceiver station bts determine far mobile station ms interpreting reported ta information along parameters used power bts ms power control feature implemented network power control either bts ms implemented modern networks especially ms ensures better battery life ms also bts close user results less exposure electromagnetic radiation manner 5th generation mobile networks focused using given position ms relation bts order focus ms radio frequency power bts direction vice versa thus enabling power savings mobile operator reducing ms sar index reducing em field around base stations since beam forming concentrate rf power used rather spread uniformly around bts reducing health safety concerns enhancing spectral efficiency decreased ms battery consumption
node25:Wikipedia entry. Entry name: Berkeley_r-commands. Entry content: berkeley r-commands berkeley r-commands suite computer programs designed enable users one unix system log issue commands another unix computer via tcp/ip computer network r-commands developed 1982 computer systems research group university california berkeley based early implementation tcp/ip protocol stack internet csrg incorporated r-commands unix operating system berkeley software distribution bsd r-commands premiered bsd v4.1 among programs suite remote copy remote execution remote login remote shell remote r-commands significant innovation became de facto standards unix operating systems wider public adoption internet inherent security vulnerabilities became problem beginning development secure shell protocols applications 1995 adoption entirely supplanted deployment use r-commands telnet networked systems original berkeley package provides rlogin also features rcp remote-copy allowing files copied network rsh remote-shell allowing commands run remote machine without user logging share hosts.equiv .rhosts access-control scheme although connect different daemon rshd enables user log another server via computer network using tcp network port 513. rlogin also name application layer protocol used software part tcp/ip protocol suite authenticated users act physically present computer rfc 1282 defined states rlogin facility provides remote-echoed locally flow-controlled virtual terminal proper flushing output rlogin communicates daemon rlogind remote host rlogin similar telnet command customizable able connect unix-like hosts rsh opens shell remote computer without login procedure connected user execute commands remote computer shell command-line interface rsh passes input output standard streams sends standard output user console network standard input standard flow tcp port 514 standard error flows different tcp port rsh daemon rshd opens like rsh rexec enables user run shell commands remote computer however unlike rsh server rexec server rexecd requires login authenticates users reading username password unencrypted network socket rexec uses tcp port 512. rcp copy file directory local system remote system remote system local system one remote system another command line arguments cp rcp similar rcp remote files prefixed name remote system unix copy command cp rcp overwrites existing file name target unlike cp provides mechanism warning user overwriting target file like rsh rcp uses tcp port 514 command lists users logged local unix system rwho lists users logged multi-user unix systems local network rwho daemon rwhod maintains database status unix systems local network daemon database also used ruptime program command shows long unix system running since last restart requests status report computers local network returns uptime report computer respond within time limit ruptime reports system information tracked stored daemon rwhod also used rwho command r-commands involve user authentication rcp rexec rlogin rsh share several serious security vulnerabilities due problems r-commands fell relative disuse many unix linux distributions longer including default many networks formerly relied rlogin telnet replaced ssh rlogin-equivalent slogin
node26:Wikipedia entry. Entry name: Point_coordination_function. Entry content: point coordination function point coordination function pcf media access control mac technique used ieee 802.11 based wlans including wi-fi resides point coordinator also known access point ap coordinate communication within network ap waits pifs duration rather difs duration grasp channel pifs less difs duration hence point coordinator always priority access channel pcf located directly distributed coordination function dcf ieee 802.11 mac architecture channel access pcf mode centralized hence point coordinator sends cf-poll frame pcf capable station permit transmit frame case polled station frames send must transmit null frame due priority pcf dcf stations use dcf might gain access medium prevent repetition interval designed cover contention free pcf contention based dcf traffic repetition interval repeated continuously starts special control frame called beacon frame stations hear beacon frame start network allocation vector duration contention free period repetition period since aps logical bus topologies shared circuits one message processed one time contention based system thus media access control technique required wireless networks may suffer hidden node problem regular nodes communicate ap see nodes extreme edge geographical radius network wireless signal attenuates reach far thus ap middle allows distance halved allowing nodes see ap consequentially halving maximum distance two nodes extreme edges circle-star topology pcf seems implemented hardware devices part wi-fi alliance interoperability standard pcf interframe space pifs one interframe space used ieee 802.11 based wireless lans pcf enabled access point wait pifs duration rather difs occupy wireless medium pifs duration less difs greater sifs difs pifs sifs hence ap always priority access medium pifs duration calculated follows pifs sifs slot time
node27:Wikipedia entry. Entry name: Naemon. Entry content: naemon naemon open-source computer system monitoring network monitoring infrastructure monitoring software application naemon offers monitoring alerting services servers switches applications services alerts users things go wrong alerts second time problem resolved naemon created 2014 fork nagios available red hat centos suse debian ubuntu linux distribution naemon open source software licensed gnu gpl v2 provides
node28:Wikipedia entry. Entry name: Verilog. Entry content: verilog verilog standardized ieee 1364 hardware description language hdl used model electronic systems commonly used design verification digital circuits register-transfer level abstraction also used verification analog circuits mixed-signal circuits well design genetic circuits 2009 verilog standard ieee 1364-2005 merged systemverilog standard creating ieee standard 1800-2009 since verilog officially part systemverilog language current version ieee standard 1800-2017 hardware description languages verilog similar software programming languages include ways describing propagation time signal strengths sensitivity two types assignment operators blocking assignment non-blocking assignment non-blocking assignment allows designers describe state-machine update without needing declare use temporary storage variables since concepts part verilog language semantics designers could quickly write descriptions large circuits relatively compact concise form time verilog introduction 1984 verilog represented tremendous productivity improvement circuit designers already using graphical schematic capture software specially written software programs document simulate electronic circuits designers verilog wanted language syntax similar c programming language already widely used engineering software development like c verilog case-sensitive basic preprocessor though less sophisticated ansi c/c++ control flow keywords if/else case etc equivalent operator precedence compatible c. syntactic differences include required bit-widths variable declarations demarcation procedural blocks verilog uses begin/end instead curly braces many minor differences verilog requires variables given definite size c sizes assumed 'type variable instance integer type may 8 bits verilog design consists hierarchy modules modules encapsulate design hierarchy communicate modules set declared input output bidirectional ports internally module contain combination following net/variable declarations wire reg integer etc concurrent sequential statement blocks instances modules sub-hierarchies sequential statements placed inside begin/end block executed sequential order within block however blocks executed concurrently making verilog dataflow language verilog concept 'wire consists signal values 4-state 1 0 floating undefined signal strengths strong weak etc. system allows abstract modeling shared signal lines multiple sources drive common net wire multiple drivers wire readable value resolved function source drivers strengths subset statements verilog language synthesizable verilog modules conform synthesizable coding style known rtl register-transfer level physically realized synthesis software synthesis software algorithmically transforms abstract verilog source netlist logically equivalent description consisting elementary logic primitives flip-flops etc available specific fpga vlsi technology manipulations netlist ultimately lead circuit fabrication blueprint photo mask set asic bitstream file fpga verilog one first popular hardware description languages invented created prabhu goel phil moorby chi-lai huang douglas warmke late 1983 early 1984 chi-lai huang earlier worked hardware description lalsd language developed professor s.y.h su phd work wording process automated integrated design systems later renamed gateway design automation 1985 hardware modeling language gateway design automation purchased cadence design systems 1990 cadence full proprietary rights gateway verilog verilog-xl hdl-simulator would become de facto standard verilog logic simulators next decade originally verilog intended describe allow simulation automated synthesis subsets language physically realizable structures gates etc developed language achieved widespread usage verilog portmanteau words verification logic increasing success vhdl time cadence decided make language available open standardization cadence transferred verilog public domain open verilog international ovi known accellera organization verilog later submitted ieee became ieee standard 1364-1995 commonly referred verilog-95 time frame cadence initiated creation verilog-a put standards support behind analog simulator spectre verilog-a never intended standalone language subset verilog-ams encompassed verilog-95 extensions verilog-95 submitted back ieee cover deficiencies users found original verilog standard extensions became ieee standard 1364-2001 known verilog-2001 verilog-2001 significant upgrade verilog-95 first adds explicit support 2 complement signed nets variables previously code authors perform signed operations using awkward bit-level manipulations example carry-out bit simple 8-bit addition required explicit description boolean algebra determine correct value function verilog-2001 succinctly described one built-in operators » generate/endgenerate construct similar vhdl generate/endgenerate allows verilog-2001 control instance statement instantiation normal decision operators case/if/else using generate/endgenerate verilog-2001 instantiate array instances control connectivity individual instances file i/o improved several new system tasks finally syntax additions introduced improve code readability e.g always named parameter override c-style function/task/module header declaration verilog-2001 version verilog supported majority commercial eda software packages confused systemverilog verilog 2005 ieee standard 1364-2005 consists minor corrections spec clarifications new language features uwire keyword separate part verilog standard verilog-ams attempts integrate analog mixed signal modeling traditional verilog advent hardware verification languages openvera verisity e language encouraged development superlog co-design automation inc acquired synopsys foundations superlog vera donated accellera later became ieee standard p1800-2005 systemverilog systemverilog superset verilog-2005 many new features capabilities aid design verification design modeling 2009 systemverilog verilog language standards merged systemverilog 2009 ieee standard 1800-2009 current version ieee standard 1800-2017 simple example two flip-flops follows operator verilog another aspect hardware description language opposed normal procedural language known non-blocking assignment action register always block executed means order assignments irrelevant produce result flop1 flop2 swap values every clock assignment operator referred blocking assignment assignment used purposes logic target variable updated immediately example statements used blocking operator instead flop1 flop2 would swapped instead traditional programming compiler would understand simply set flop1 equal flop2 subsequently ignore redundant logic set flop2 equal flop1 example counter circuit follows example delays always clause illustrates type method use i.e executes whenever entities list b e changes one changes immediately assigned new value due blocking assignment b assigned new value afterward taking account new value delay 5 time units c assigned value b value c e tucked away invisible store 6 time units assigned value tucked away signals driven within process initial always block must type reg signals driven outside process must type wire keyword reg necessarily imply hardware register definition constants verilog supports addition width parameter basic syntax width bits base letter number examples several statements verilog analog real hardware e.g display consequently much language used describe hardware examples presented classic subset language direct mapping real gates next interesting structure transparent latch pass input output gate signal set pass-through captures input stores upon transition gate signal hold output remain stable regardless input signal gate set hold example pass-through level gate would value clause true i.e gate 1 read gate true din fed latch_out continuously clause false last value latch_out remain independent value din flip-flop next significant template verilog d-flop simplest modeled significant thing notice example use non-blocking assignment basic rule thumb use posedge negedge statement within always clause variant d-flop one asynchronous reset convention reset state first clause within statement next variant including asynchronous reset asynchronous set condition convention comes play i.e reset term followed set term note model used model set/reset flip flop simulation errors result consider following test sequence events 1 reset goes high 2 clk goes high 3 set goes high 4 clk goes high 5 reset goes low followed 6 set going low assume setup hold violations example always statement would first execute rising edge reset occurs would place q value 0 next time always block executes would rising edge clk would keep q value 0 always block executes set goes high reset high forces q remain 0 condition may may correct depending actual flip flop however main problem model notice reset goes low set still high real flip flop cause output go 1 however model occur always block triggered rising edges set reset — levels different approach may necessary set/reset flip flops final basic variant one implements d-flop mux feeding input mux d-input feedback flop allows gated load function note initial blocks mentioned description split fpga asic synthesis tools structure fpga tools allow initial blocks reg values established instead using reset signal asic synthesis tools n't support statement reason fpga initial state something downloaded memory tables fpga asic actual hardware implementation two separate ways declaring verilog process always initial keywords always keyword indicates free-running process initial keyword indicates process executes exactly constructs begin execution simulator time 0 execute end block always block reached end rescheduled common misconception believe initial block execute always block fact better think initial-block special-case always-block one terminates completes first time classic uses two keywords two significant additional uses common always keyword without ... sensitivity list possible use always shown always keyword acts similar c language construct 1 .. sense execute forever interesting exception use initial keyword addition forever keyword example functionally identical always example fork/join pair used verilog create parallel processes statements blocks fork/join pair begin execution simultaneously upon execution flow hitting fork execution continues join upon completion longest running statement block fork join way written possible either sequences abc bac print order simulation first write second write depends simulator implementation may purposefully randomized simulator allows simulation contain accidental race conditions well intentional non-deterministic behavior notice vhdl dynamically spawn multiple processes like verilog order execution n't always guaranteed within verilog best illustrated classic example consider code snippet printed values b depending order execution initial blocks could zero zero alternately zero arbitrary uninitialized value display statement always execute assignment blocks completed due 1 delay note operators shown order precedence ieee 1364 standard defines four-valued logic four states 0 1 z high impedance x unknown logic value competing vhdl dedicated standard multi-valued logic exists ieee 1164 nine levels system tasks available handle simple i/o various design measurement functions simulation system tasks prefixed distinguish user tasks functions section presents short list frequently used tasks means comprehensive list pli provides programmer mechanism transfer control verilog program function written c language officially deprecated ieee std 1364-2005 favor newer verilog procedural interface completely replaces pli pli vpi enables verilog cooperate programs written c language test harnesses instruction set simulators microcontroller debuggers example provides c functions codice_1 codice_2 used write read argument current verilog task function respectively information verilog simulators see list verilog simulators
node29:Wikipedia entry. Entry name: Time-division_multiple_access. Entry content: time-division multiple access time-division multiple access tdma channel access method shared-medium networks allows several users share frequency channel dividing signal different time slots users transmit rapid succession one using time slot allows multiple stations share transmission medium e.g radio frequency channel using part channel capacity tdma used digital 2g cellular systems global system mobile communications gsm is-136 personal digital cellular pdc iden digital enhanced cordless telecommunications dect standard portable phones tdma first used satellite communication systems western union westar 3 communications satellite 1979 used extensively satellite communications combat-net radio systems passive optical network pon networks upstream traffic premises operator usage dynamic tdma packet mode communication see tdma type time-division multiplexing tdm special point instead one transmitter connected one receiver multiple transmitters case uplink mobile phone base station becomes particularly difficult mobile phone move around vary timing advance required make transmission match gap transmission peers 2g cellular systems notable exception is-95 based tdma gsm d-amps pdc iden phs examples tdma cellular systems gsm combines tdma frequency hopping wideband transmission minimize common types interference gsm system synchronization mobile phones achieved sending timing advance commands base station instructs mobile phone transmit earlier much compensates propagation delay resulting light speed velocity radio waves mobile phone allowed transmit entire time slot guard interval end time slot transmission moves guard period mobile network adjusts timing advance synchronize transmission initial synchronization phone requires even care mobile transmits way actually know offset required reason entire time slot dedicated mobiles attempting contact network known random-access channel rach gsm mobile attempts broadcast beginning time slot received network mobile located next base station time delay succeed however mobile phone less 35 km base station time delay mean mobile broadcast arrives end time slot case mobile instructed broadcast messages starting nearly whole time slot earlier would expected otherwise finally mobile beyond 35 km cell range gsm rach arrive neighbouring time slot ignored feature rather limitations power limits range gsm cell 35 km special extension techniques used changing synchronization uplink downlink base station however limitation overcome although major 3g systems primarily based upon cdma time-division duplexing tdd packet scheduling dynamic tdma packet oriented multiple access schemes available 3g form combined cdma take advantage benefits technologies popular form umts 3g system uses cdma frequency division duplexing fdd instead tdma tdma combined cdma time-division duplexing two standard umts utra itu-t g.hn standard provides high-speed local area networking existing home wiring power lines phone lines coaxial cables based tdma scheme g.hn master device allocates contention-free transmission opportunities cftxop slave devices network one device use cftxop time thus avoiding collisions flexray protocol also wired network used safety-critical communication modern cars uses tdma method data transmission control radio systems tdma usually used alongside frequency-division multiple access fdma frequency division duplex fdd combination referred fdma/tdma/fdd case gsm is-136 example exceptions include dect personal handy-phone system phs micro-cellular systems umts-tdd umts variant china td-scdma use time-division duplexing different time slots allocated base station handsets frequency major advantage tdma radio part mobile needs listen broadcast time slot rest time mobile carry measurements network detecting surrounding transmitters different frequencies allows safe inter frequency handovers something difficult cdma systems supported is-95 supported complex system additions universal mobile telecommunications system umts turn allows co-existence microcell layers macrocell layers cdma comparison supports soft hand-off allows mobile phone communication 6 base stations simultaneously type same-frequency handover incoming packets compared quality best one selected cdma cell breathing characteristic terminal boundary two congested cells unable receive clear signal often negate advantage peak periods disadvantage tdma systems create interference frequency directly connected time slot length buzz sometimes heard tdma phone left next radio speakers another disadvantage dead time time slots limits potential bandwidth tdma channel implemented part difficulty ensuring different terminals transmit exactly times required handsets moving need constantly adjust timings ensure transmission received precisely right time move base station signal take longer arrive also means major tdma systems hard limits cell sizes terms range though practice power levels required receive transmit distances greater supported range would mostly impractical anyway dynamic time-division multiple access dynamic tdma scheduling algorithm dynamically reserves variable number time slots frame variable bit-rate data streams based traffic demand data stream dynamic tdma used
node30:Wikipedia entry. Entry name: Mobile_Slotted_Aloha. Entry content: mobile slotted aloha mobile slotted aloha ms-aloha wireless network protocol proposed applications vehicle networks considering typical taxonomy mac protocols ms-aloha represents hybrid solution based connection-oriented paradigm hence may fall class channel-based/tdma protocols however also reactive topology changes include reservations separate data exchanges classified among packet-based collision-free mac methods general slotted protocol either connectionless connection-oriented however latter case represents true alternative ieee 802.11p introducing determinism carrier sense multiple access collision avoidance csma/ca lacks vehicle networks connection set-up phases telephone call reservation request confirmation data exchange tear-down applied hold broadcast communications hampered hidden stations manageable heavy losses mobility varying channel conditions reasons ms-aloha connection oriented continuously refreshes reservation simply transmitting period ms-aloha adopts different approach subtends following hypotheses rules basically define main mechanisms",wikics,nc
"Classify the wikipedia page represented by node3 using its subgraph data (text attributes and connections) as follows.

node0: Compares CPU microarchitectures, detailing features and performance across generations.  
node1: Israeli data security firm acquired by Microsoft; develops embedded data protection and digital rights management solutions.  
node2: Freescale's 32-bit PowerPC e500 core for embedded systems, featuring configurable L2 cache, multi-core, and APUs.  
node3: MIPS processor designer facing market challenges; developed chips for networking/gaming, later acquired by PMC-Sierra.  
node4: Terminal multiplexer for Unix systems enabling multiple sessions, detachment, and client access via SSH.  
node5: 1990s RISC computing consortium dissolved due to market shifts and internal conflicts, influencing Windows NT/SGI systems.  
node6: Connection-oriented transport protocol (RDP) for reliable data transfer, less adopted than TCP despite BSD experiments.  
node7: Reconfigurable integrated circuits (FPGAs) for custom digital logic, used in high-performance computing and adaptive hardware.  
node8: Intel's 14nm Broadwell microarchitecture offers power improvements, used in 5th-gen Core CPUs for laptops/desktops.  
node9: LLC sublayer in data link layer manages protocol multiplexing, flow control, and error handling in IEEE 802 networks.
node10: Founded by Bill Hewlett and David Packard, a major IT firm known for PCs, printers, spin-offs like Agilent, and facing leadership/financial challenges.  
node11: A compact WebOS smartphone by Palm (later HP), featuring a touchscreen, QWERTY keyboard, 2MP camera, released via Sprint and Verizon.
node12: 64-bit MIPS III microprocessor announced 1991, featuring 8KB caches, scalar pipeline, R4000sc/mc configs, and on-die FPU with 32/64-bit modes.  
node13: Microsoft's 2017 Fluent Design System emphasizes light, motion, depth, and acrylic effects for Windows 10 UI with hover highlights and layered visuals.  
node14: Compaq Presario R3000 laptops with Intel/AMD CPUs, ATI graphics, JBL speakers, and expansion ports, running Windows 98/XP.  
node15: Superscalar processors execute multiple instructions/cycle via parallel units, contrasting scalar designs through pipelining and instruction-level parallelism.  
node16: VLIW architectures use long instructions for compiler-scheduled parallelism, reducing hardware complexity but increasing compiler dependency.  
node17: Classic RISC pipelines (5 stages) manage hazards via bypassing, interlocks, and stall mechanisms in MIPS/Sparc-like architectures.
node18: Branch predictors guess conditional jump outcomes to optimize CPU pipelines, reducing delays from mispredictions via static/dynamic methods.  
node19: Macintosh Quadra 605 (1993) was Apple's affordable desktop with a 25MHz 68LC040 CPU, SCSI ports, and variants for business/education/home markets.  
node20: PowerPC is a RISC ISA developed by Apple-IBM-Motorola, used in Macs until 2006, then shifted to embedded systems/game consoles with 32/64-bit support and endianness flexibility.
node21: Apple's PowerBook Duo series (1992-1997) were compact, lightweight laptops with unique docking stations offering expandability despite limited ports.  
node22: Windows NT (1993) is Microsoft's 32-bit, multi-user OS family, known for hardware abstraction, security, and evolving into modern Windows versions.  
node23: MS-Net (1985) was Microsoft's early NetBIOS-based LAN system for DOS, later replaced by LAN Manager in 1990 for SMB protocol support.  
node24: Metro, Microsoft's design language, emphasizes clean typography, flat icons, and live tiles, used in Windows Phone, Xbox, and Windows 8/10.  
node25: Zephyr protocol (MIT, 1980s) is an UDP-based Unix instant messaging system, used in academic institutions, now partially replaced by XMPP.
node26: Silicon Graphics Inc., founded 1981, pioneered 3D graphics workstations but faced decline due to commodity PCs, filed bankruptcy 2009, and was acquired by Rackable Systems.  
node27: Telnet is a legacy text-based network protocol (TCP port 23) for remote terminal access, supplanted by SSH due to security flaws.  
node28: Apple and Novell's 1992-1993 Star Trek project aimed to port Mac OS to x86, canceled due to internal conflicts, influencing later Apple x86 transitions.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node7>,<node0, node8>,<node0, node12>,<node0, node15>,<node0, node16>,<node0, node17>,<node0, node18>,<node1, node13>,<node1, node24>,<node2, node20>,<node3, node5>,<node3, node10>,<node3, node12>,<node3, node15>,<node3, node17>,<node3, node18>,<node3, node20>,<node3, node22>,<node3, node26>,<node4, node27>,<node5, node12>,<node5, node20>,<node5, node22>,<node5, node26>,<node6, node27>,<node7, node15>,<node7, node16>,<node7, node17>,<node7, node18>,<node7, node20>,<node9, node27>,<node10, node11>,<node10, node14>,<node10, node16>,<node12, node18>,<node12, node22>,<node12, node26>,<node13, node22>,<node13, node24>,<node15, node16>,<node15, node17>,<node15, node18>,<node15, node20>,<node16, node17>,<node16, node18>,<node16, node20>,<node17, node18>,<node17, node20>,<node18, node20>,<node19, node20>,<node19, node21>,<node20, node21>,<node20, node22>,<node20, node28>,<node22, node23>,<node22, node24>,<node22, node26>,<node22, node27>,<node25, node27>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

Your reasoning and response should be streamlined and restricted to within 2048 tokens.
Your response should be in forms as follows:
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",computer architecture,"node0: Compares CPU microarchitectures, detailing features and performance across generations.  
node1: Israeli data security firm acquired by Microsoft; develops embedded data protection and digital rights management solutions.  
node2: Freescale's 32-bit PowerPC e500 core for embedded systems, featuring configurable L2 cache, multi-core, and APUs.  
node3: MIPS processor designer facing market challenges; developed chips for networking/gaming, later acquired by PMC-Sierra.  
node4: Terminal multiplexer for Unix systems enabling multiple sessions, detachment, and client access via SSH.  
node5: 1990s RISC computing consortium dissolved due to market shifts and internal conflicts, influencing Windows NT/SGI systems.  
node6: Connection-oriented transport protocol (RDP) for reliable data transfer, less adopted than TCP despite BSD experiments.  
node7: Reconfigurable integrated circuits (FPGAs) for custom digital logic, used in high-performance computing and adaptive hardware.  
node8: Intel's 14nm Broadwell microarchitecture offers power improvements, used in 5th-gen Core CPUs for laptops/desktops.  
node9: LLC sublayer in data link layer manages protocol multiplexing, flow control, and error handling in IEEE 802 networks.
node10: Founded by Bill Hewlett and David Packard, a major IT firm known for PCs, printers, spin-offs like Agilent, and facing leadership/financial challenges.  
node11: A compact WebOS smartphone by Palm (later HP), featuring a touchscreen, QWERTY keyboard, 2MP camera, released via Sprint and Verizon.
node12: 64-bit MIPS III microprocessor announced 1991, featuring 8KB caches, scalar pipeline, R4000sc/mc configs, and on-die FPU with 32/64-bit modes.  
node13: Microsoft's 2017 Fluent Design System emphasizes light, motion, depth, and acrylic effects for Windows 10 UI with hover highlights and layered visuals.  
node14: Compaq Presario R3000 laptops with Intel/AMD CPUs, ATI graphics, JBL speakers, and expansion ports, running Windows 98/XP.  
node15: Superscalar processors execute multiple instructions/cycle via parallel units, contrasting scalar designs through pipelining and instruction-level parallelism.  
node16: VLIW architectures use long instructions for compiler-scheduled parallelism, reducing hardware complexity but increasing compiler dependency.  
node17: Classic RISC pipelines (5 stages) manage hazards via bypassing, interlocks, and stall mechanisms in MIPS/Sparc-like architectures.
node18: Branch predictors guess conditional jump outcomes to optimize CPU pipelines, reducing delays from mispredictions via static/dynamic methods.  
node19: Macintosh Quadra 605 (1993) was Apple's affordable desktop with a 25MHz 68LC040 CPU, SCSI ports, and variants for business/education/home markets.  
node20: PowerPC is a RISC ISA developed by Apple-IBM-Motorola, used in Macs until 2006, then shifted to embedded systems/game consoles with 32/64-bit support and endianness flexibility.
node21: Apple's PowerBook Duo series (1992-1997) were compact, lightweight laptops with unique docking stations offering expandability despite limited ports.  
node22: Windows NT (1993) is Microsoft's 32-bit, multi-user OS family, known for hardware abstraction, security, and evolving into modern Windows versions.  
node23: MS-Net (1985) was Microsoft's early NetBIOS-based LAN system for DOS, later replaced by LAN Manager in 1990 for SMB protocol support.  
node24: Metro, Microsoft's design language, emphasizes clean typography, flat icons, and live tiles, used in Windows Phone, Xbox, and Windows 8/10.  
node25: Zephyr protocol (MIT, 1980s) is an UDP-based Unix instant messaging system, used in academic institutions, now partially replaced by XMPP.
node26: Silicon Graphics Inc., founded 1981, pioneered 3D graphics workstations but faced decline due to commodity PCs, filed bankruptcy 2009, and was acquired by Rackable Systems.  
node27: Telnet is a legacy text-based network protocol (TCP port 23) for remote terminal access, supplanted by SSH due to security flaws.  
node28: Apple and Novell's 1992-1993 Star Trek project aimed to port Mac OS to x86, canceled due to internal conflicts, influencing later Apple x86 transitions.","node0:Wikipedia entry. Entry name: Comparison_of_CPU_microarchitectures. Entry content: comparison cpu microarchitectures following comparison cpu microarchitectures
node1:Wikipedia entry. Entry name: Secure_Islands. Entry content: secure islands secure islands technologies ltd. israeli privately held technology company headquartered 5 menachem begin ave. beit dagan subsequently acquired microsoft company develops markets information protection control ipc solutions secure islands technologies ltd. founded two brothers aki yuval eldar late 2006 develop sell advanced data security solutions jerusalem-based start-up company suggested new solution data protection embedding security directly data secure islands builds software designed classify sensitive information automatically based policies outlined enterprise wrap appropriate level digital rights management drm microsoft acquired israeli cyber-sec startup secure islands 2015 secure islands technologies ltd. software based active data immunization concept secure islands ’ data immunization technology uniquely embeds protection within information moment creation initial organizational access process automatic accompanies sensitive information throughout lifecycle creation usage collaboration storage archival company iqprotector product cloud-based classifies unstructured data automates irm classification endpoints
node2:Wikipedia entry. Entry name: PowerPC_e500. Entry content: powerpc e500 powerpc e500 32-bit microprocessor core freescale semiconductor core compatible older powerpc book e specification well power isa v.2.03 dual issue seven-stage pipeline fpus version 2 onwards 32/32 kib data instruction l1 caches 256 512 1024 kib l2 frontside cache speeds range 533 mhz 1.5 ghz core designed highly configurable meet specific needs embedded applications features like multi-core operation interface auxiliary application processing units apu e500 powers high-performance powerquicc iii system chip soc network processors share common naming scheme mpc85xx freescale new qoriq evolutionary step powerquicc iii also based e500 cores three versions e500 core namely original e500v1 e500v2 e500mc 64-bit evolution e500mc core called e5500 core introduced 2010 key improvements e500v2 e500v1 include freescale introduced e500mc qoriq family chips june 2008 e500mc following features powerquicc 85xx devices based e500v1 e500v2 cores e500v2 june 2008 freescale announced qoriq brand microprocessors based e500 family cores
node3:Wikipedia entry. Entry name: Quantum_Effect_Devices. Entry content: quantum effect devices quantum effect devices qed microprocessor design company incorporated 1991 quantum effect design based palo alto california three founders tom riordan earl killian ray kunita senior managers mips computer systems inc.. left mips time company difficult time selling entire computer systems mips magnum instead concentrating building microprocessor chips mips original mission soon sgi purchased mips idt major funder customer initial qed design original product plan qed build mips microprocessor laptop computer ace initiative microsoft support multiple risc architectures new windows nt operating system system companies like deskstation technology board companies like shablamm computer building products hope risc-based personal computers would become mainstream market never materialized first product r4600 orion microprocessor proved successful several embedded markets networking routers arcade games subsequent projects designed companies toshiba idt r4700 idt nkk r4650 sgi nec r5000 powerpc 603q powerpc microprocessor designed motorola meant apple computer home pc game machine designs neither designs productized powerpc 603q never reached full production several years later attempt increase product revenue company transformed product company selling line mips microprocessors time company changed name quantum effect devices successful products introductions like rm5200 rm7000 riscmark label company ipo 1 february 2000 initial stock price 16 jumped 56.50 first day trading company acquired pmc-sierra october 2000 time quantum effect devices valued stock swap worth 2.3 billion according one estimate company became microprocessor products division pmc acquisition done stock exchange valued 2.3 billion team completed rm9x00 product line pmc product line successful marketplace microprocessor core development team derived qed laid group pmc-sierra june 2005 last laid january 2006 company name attributed tom riordan believed company would survive age semiconductor geometry dimensions would become small quantum effects would dominate circuit behavior first qed microprocessor r4600 founders qed previously involved r4000 felt large device complicated simpler implementation would give better price/performance ratio reason r4600 re-implementation 5-stage classic risc pipeline large time caches small low cost device one highest performance microprocessors market initial target market mips laptop computer never materialized device found success several markets first risc processor used within cisco systems network router used several atari/midway arcade games well-known original mortal kombat game r4600 licensed idt toshiba manufactured sold devices r4700 targeted sgi wanted little floating point performance r4700 improved repeat rate floating point multiply instructions device used inside sgi indy low-end workstation r4700 licensed idt toshiba manufactured sold devices r4650 commissioned nkk desired cheaper implementation video console game machine r4650 achieved smaller die area cutting caches half implementing single precision floating-point device first qed device implemented multiply–accumulate instructions enabled software functions softmodem device used original microsoft webtv device r4650 licensed idt nkk manufactured sold devices r4640 chip system bus restricted 32-bits instead 64-bits r5000 commissioned sgi device doubled instruction data caches 32 kb implemented high-performance fully pipelined floating point unit multiply–accumulate capability srt divider device limited implementation superscalar instruction issue one integer instruction one floating-point instruction could issued one cycle device used sgi o2 sgi indy low-end workstations design owned sgi licensed design idt nec eventually toshiba powerpc 603q commissioned motorola target market apple computer low-cost accounts including home computer students home video console game named pippen 603q basically r4600 pipeline re-targeted powerpc instruction set since powerpc 603 power-efficient chip aim alliance name device chosen reflect low-cost low-power characteristics apple projects cancelled motorola stopped development 603q even though qed received first silicon samples functional rm52xx series first product line sold directly qed first series cost-reduced version r5000 smaller caches different pin-out earlier rm52x0 devices 16 kb caches later rm52x1 devices 32 kb caches rm523x devices 32-bit system buses rm526x 64-bit system buses product line successful laser printer market winning many accounts printer companies hewlett-packard lexmark ricoh samsung rm70xx series second product line sold directly qed implemented large 256 kb on-chip level 2 cache rm7000 one first microprocessors especially within embedded microprocessor market segment also implemented symmetric superscalar instruction issue two integer execution units rm7061 device pin-compatible upgrade rm526x series product line successful follow-on rm52xx products rm9x00 family first soc implemented qed apollo microprocessor core part rm9x00 pipeline lengthened 7 stages enable higher operating frequencies dynamic branch prediction added ameliorate longer branch latencies within rm9x00 two apollo cores used implement dual-core device processor cores successfully achieved operating frequency target 1 ghz soc system interconnect in-house design centralized storage transactions flowing soc peripherals included ddr memory controller sysad bus controller boot bus controller dma controller hypertransport controller second generation device added gigabit ethernet controller pci controller cache coherency product family successful due late market company financially conservative time leading company initial public offering would fully staff soc project one reasons selling company pmc-sierra fund soc projects time competitors like sibyte already entered market equivalent devices
node4:Wikipedia entry. Entry name: Tmux. Entry content: tmux tmux terminal multiplexer unix-like operating systems allows multiple terminal sessions accessed simultaneously single window useful running one command-line program time also used detach processes controlling terminals allowing ssh sessions remain active without visible tmux includes features gnu screen allows users start terminal session clients bound specific physical virtual console multiple terminal sessions created within single terminal session freely rebound one virtual console another session several connected clients tmux notable features tmux included openbsd available package many unix-like operating systems
node5:Wikipedia entry. Entry name: Advanced_Computing_Environment. Entry content: advanced computing environment advanced computing environment ace defined industry consortium early 1990s next generation commodity computing platform successor personal computers based intel 32-bit instruction set architecture effort found little support market dissolved due lack sales infighting within group consortium announced 9th april 1991 compaq microsoft mips computer systems digital equipment corporation santa cruz operation time widely believed risc-based systems would maintain price/performance advantage ad hoc wintel systems however also widely believed windows nt would quickly displace many operating systems combined effects wide selection software ease building wintel machines supported ace formed provide alternative platform wintel providing viable alternative advantages terms software support greater advantages terms performance environment standardized mips architecture two operating systems sco unix open desktop would become windows nt originally named os/2 3.0 advanced risc computing arc document produced give hardware firmware specifications platform members consortium included acer control data corporation kubota nec corporation nkk olivetti prime computer pyramid technology siemens silicon graphics sony sumitomo tandem computers wang laboratories zenith data systems besides large companies several start-up companies built ace-compliant systems well companies involved reasons joining ace effort initiative used microprocessor companies attempt take market share away intel system companies used initiative attempt take market share away workstation leader sun microsystems soon initiative announced dissenting faction seven ace members declared decision support little-endian architectures short-sighted subgroup known apache group promoted big-endian alternative group whose name conceived pun big indian unrelated later apache software foundation later adopted name mips/open rift within ace consortium averted decided add support big-endian svr4 even ace initiative consortium began fall apart little year started became apparent mass market alternative wintel computing platform upstart platforms offer enough performance improvement incumbent pc major cost disadvantages systems due low volume production initiative started risc based systems running 100-200 mhz time substantial performance advantage intel 80486 original pentium chips running approximately 60 mhz time intel quickly migrated pentium design newer semiconductor process generations performance operating frequency advantage slipped away compaq first company leave consortium stating departure ceo rod canion one primary backers behind formation ace shifting priorities away higher-end systems followed short order sco announcing suspending work moving version unix mips platform potential conflicts earlier year mips purchased sgi may also contributed concerns neutrality target platform dec released alpha processor less interested promoting competing architecture finally significant improvements intel x86 performance made abandoning less attractive although ace supported x86 time intel never member main product ace group advanced risc computing specification arc initially based mips-based computer hardware firmware environment although ace went defunct computer ever manufactured fully complied arc standard arc system still exerts widespread legacy microsoft windows nt-based operating systems windows xp used arc conventions naming boot devices windows vista sgi used modified version arc firmware calls arcs systems sgi computers run irix 6.1 later indy octane etc boot arcs console uses drive naming conventions windows accordingly addition various risc-based computers designed run windows nt used versions arc boot console boot nt among computers also predicted intel ia-32-based computers would adopt arc console although sgi ever marketed ia-32-based machines arc firmware namely sgi visual workstation series went sale 1999 products complying degree arc standard include
node6:Wikipedia entry. Entry name: Reliable_Data_Protocol. Entry content: reliable data protocol reliable data protocol rdp network transport protocol defined rfc 908 updated rfc 1151 meant provide facilities remote loading debugging bulk transfer images data reliable data protocol located transport layer osi model next protocols like tcp udp number 27 list ip protocol numbers similar tcp reliable data protocol connection oriented contrary tcp require sequenced delivery segments reliable data protocol gained popularity though experimental implementations bsd exist
node7:Wikipedia entry. Entry name: Field-programmable_gate_array. Entry content: field-programmable gate array field-programmable gate array fpga integrated circuit designed configured customer designer manufacturinghence term field-programmable fpga configuration generally specified using hardware description language hdl similar used application-specific integrated circuit asic circuit diagrams previously used specify configuration increasingly rare due advent electronic design automation tools fpgas contain array programmable logic blocks hierarchy reconfigurable interconnects allow blocks wired together like many logic gates inter-wired different configurations logic blocks configured perform complex combinational functions merely simple logic gates like xor fpgas logic blocks also include memory elements may simple flip-flops complete blocks memory many fpgas reprogrammed implement different logic functions allowing flexible reconfigurable computing performed computer software contemporary field-programmable gate arrays fpgas large resources logic gates ram blocks implement complex digital computations fpga designs employ fast i/o rates bidirectional data buses becomes challenge verify correct timing valid data within setup time hold time floor planning enables resource allocation within fpgas meet time constraints fpgas used implement logical function asic perform ability update functionality shipping partial re-configuration portion design low non-recurring engineering costs relative asic design notwithstanding generally higher unit cost offer advantages many applications fpgas analog features addition digital functions common analog feature programmable slew rate output pin allowing engineer set low rates lightly loaded pins would otherwise ring couple unacceptably set higher rates heavily loaded pins high-speed channels would otherwise run slowly also common quartz-crystal oscillators on-chip resistance-capacitance oscillators phase-locked loops embedded voltage-controlled oscillators used clock generation management high-speed serializer-deserializer serdes transmit clocks receiver clock recovery fairly common differential comparators input pins designed connected differential signaling channels mixed signal fpgas integrated peripheral analog-to-digital converters adcs digital-to-analog converters dacs analog signal conditioning blocks allowing operate system-on-a-chip soc devices blur line fpga carries digital ones zeros internal programmable interconnect fabric field-programmable analog array fpaa carries analog values internal programmable interconnect fabric fpga industry sprouted programmable read-only memory prom programmable logic devices plds proms plds option programmed batches factory field field-programmable however programmable logic hard-wired logic gates altera founded 1983 delivered industry first reprogrammable logic device 1984 – ep300 – featured quartz window package allowed users shine ultra-violet lamp die erase eprom cells held device configuration december 2015 intel acquired altera xilinx co-founders ross freeman bernard vonderschmitt invented first commercially viable field-programmable gate array 1985 – xc2064 xc2064 programmable gates programmable interconnects gates beginnings new technology market xc2064 64 configurable logic blocks clbs two three-input lookup tables luts 20 years later freeman entered national inventors hall fame invention 1987 naval surface warfare center funded experiment proposed steve casselman develop computer would implement 600,000 reprogrammable gates casselman successful patent related system issued 1992 altera xilinx continued unchallenged quickly grew 1985 mid-1990s competitors sprouted eroding significant market share 1993 actel microsemi serving 18 percent market 2013 altera 31 percent actel 10 percent xilinx 36 percent together represented approximately 77 percent fpga market 1990s period rapid growth fpgas circuit sophistication volume production early 1990s fpgas primarily used telecommunications networking end decade fpgas found way consumer automotive industrial applications companies like microsoft started use fpgas accelerate high-performance computationally intensive systems like data centers operate bing search engine due performance per watt advantage fpgas deliver microsoft began using fpgas accelerate bing 2014 2018 began deploying fpgas across data center workloads azure cloud computing platform 2012 coarse-grained architectural approach taken step combining logic blocks interconnects traditional fpgas embedded microprocessors related peripherals form complete system programmable chip work mirrors architecture created ron perlof hana potash burroughs advanced systems group 1982 combined reconfigurable cpu architecture single chip called sb24 examples hybrid technologies found xilinx zynq-7000 programmable soc includes 1.0 ghz dual-core arm cortex-a9 mpcore processor embedded within fpga logic fabric altera arria v fpga includes 800 mhz dual-core arm cortex-a9 mpcore atmel fpslic another device uses avr processor combination atmel programmable logic architecture microsemi smartfusion devices incorporate arm cortex-m3 hard processor core 512 kb flash 64 kb ram analog peripherals multi-channel analog-to-digital converters digital-to-analog converters flash memory-based fpga fabric alternate approach using hard-macro processors make use soft processor ip cores implemented within fpga logic nios ii microblaze mico32 examples popular softcore processors many modern fpgas programmed run time led idea reconfigurable computing reconfigurable systems – cpus reconfigure suit task hand additionally new non-fpga architectures beginning emerge software-configurable microprocessors stretch s5000 adopt hybrid approach providing array processor cores fpga-like programmable cores chip design start new custom design implementation fpga historically fpgas slower less energy efficient generally achieved less functionality fixed asic counterparts older study showed designs implemented fpgas need average 40 times much area draw 12 times much dynamic power run one third speed corresponding asic implementations recently fpgas xilinx virtex-7 altera stratix 5 come rival corresponding asic assp application-specific standard part standalone usb interface chip solutions providing significantly reduced power usage increased speed lower materials cost minimal implementation real-estate increased possibilities re-configuration 'on-the-fly design included 6 10 asics achieved using one fpga advantages fpgas include ability re-program already deployed i.e field fix bugs often include shorter time market lower non-recurring engineering costs vendors also take middle road via fpga prototyping developing prototype hardware fpgas manufacture final version asic longer modified design committed xilinx claimed several market technology dynamics changing asic/fpga paradigm february 2009 trends make fpgas better alternative asics larger number higher-volume applications historically used company attributes growing number fpga design starts see fpgas capability partial re-configuration lets one portion device re-programmed portions continue running primary differences complex programmable logic devices cplds fpgas architectural cpld comparatively restrictive structure consisting one programmable sum-of-products logic arrays feeding relatively small number clocked registers result cplds less flexible advantage predictable timing delays fpga architectures hand dominated interconnect makes far flexible terms range designs practical implementation also far complex design least requiring complex electronic design automation eda software practice distinction fpgas cplds often one size fpgas usually much larger terms resources cplds typically fpgas contain complex embedded functions adders multipliers memory serializer/deserializers another common distinction cplds contain embedded flash memory store configuration fpgas usually require external non-volatile memory always design requires simple instant-on logic already configured power-up cplds generally preferred applications fpgas generally preferred sometimes cplds fpgas used single system design designs cplds generally perform glue logic functions responsible “ booting ” fpga well controlling reset boot sequence complete circuit board therefore depending application may judicious use fpgas cplds single design fpgas advantages disadvantages compared asics secure microprocessors concerning hardware security fpgas flexibility makes malicious modifications fabrication lower risk previously many fpgas design bitstream exposed fpga loads external memory typically every power-on major fpga vendors offer spectrum security solutions designers bitstream encryption authentication example altera xilinx offer aes encryption 256-bit bitstreams stored external flash memory fpgas store configuration internally nonvolatile flash memory microsemi proasic 3 lattice xp2 programmable devices expose bitstream need encryption addition flash memory lookup table provides single event upset protection space applications customers wanting higher guarantee tamper resistance use write-once antifuse fpgas vendors microsemi stratix 10 fpgas socs altera introduced secure device manager physically uncloneable functions provide high levels protection physical attacks 2012 researchers sergei skorobogatov christopher woods demonstrated fpgas vulnerable hostile intent discovered critical backdoor vulnerability manufactured silicon part actel/microsemi proasic 3 making vulnerable many levels reprogramming crypto access keys accessing unencrypted bitstream modifying low-level silicon features extracting configuration data fpga used solve problem computable trivially proven fact fpgas used implement soft microprocessor xilinx microblaze altera nios ii advantage lies significantly faster applications parallel nature optimality terms number gates used certain processes fpgas originally began competitors cplds implement glue logic printed circuit boards size capabilities speed increased fpgas took additional functions point marketed full systems chips socs particularly introduction dedicated multipliers fpga architectures late 1990s applications traditionally sole reserve digital signal processor hardware dsps began incorporate fpgas instead another trend use fpgas hardware acceleration one use fpga accelerate certain parts algorithm share part computation fpga generic processor search engine bing noted adopting fpga acceleration search algorithm 2014. fpgas seeing increased use ai accelerators including microsoft so-termed project catapult accelerating artificial neural networks machine learning applications traditionally fpgas reserved specific vertical applications volume production small low-volume applications premium companies pay hardware cost per unit programmable chip affordable development resources spent creating asic new cost performance dynamics broadened range viable applications common fpga architecture consists array logic blocks i/o pads routing channels generally routing channels width number wires multiple i/o pads may fit height one row width one column array application circuit must mapped fpga adequate resources number clbs/labs i/os required easily determined design number routing tracks needed may vary considerably even among designs amount logic example crossbar switch requires much routing systolic array gate count since unused routing tracks increase cost decrease performance part without providing benefit fpga manufacturers try provide enough tracks designs fit terms lookup tables luts i/os routed determined estimates derived rent rule experiments existing designs network-on-chip architectures routing interconnection developed general logic block consists logical cells called alm le slice etc. typical cell consists 4-input lut full adder fa d-type flip-flop shown luts figure split two 3-input luts normal mode combined 4-input lut left multiplexer mux arithmetic mode outputs fed adder selection mode programmed middle mux output either synchronous asynchronous depending programming mux right figure example practice entire parts adder stored functions luts order save space modern fpga families expand upon capabilities include higher level functionality fixed silicon common functions embedded circuit reduces area required gives functions increased speed compared building logical primitives examples include multipliers generic dsp blocks embedded processors high speed i/o logic embedded memories higher-end fpgas contain high speed multi-gigabit transceivers hard ip cores processor cores ethernet medium access control units pci/pci express controllers external memory controllers cores exist alongside programmable fabric built transistors instead luts asic-level performance power consumption without consuming significant amount fabric resources leaving fabric free application-specific logic multi-gigabit transceivers also contain high performance analog input output circuitry along high-speed serializers deserializers components built luts higher-level physical layer phy functionality line coding may may implemented alongside serializers deserializers hard logic depending fpga circuitry built inside fpga synchronous circuitry requires clock signal fpgas contain dedicated global regional routing networks clock reset delivered minimal skew also fpgas generally contain analog phase-locked loop and/or delay-locked loop components synthesize new clock frequencies well attenuate jitter complex designs use multiple clocks different frequency phase relationships forming separate clock domains clock signals generated locally oscillator recovered high speed serial data stream care must taken building clock domain crossing circuitry avoid metastability fpgas generally contain block rams capable working dual port rams different clocks aiding construction building fifos dual port buffers connect differing clock domains shrink size power consumption fpgas vendors tabula xilinx introduced 3d stacked architectures following introduction 28 nm 7-series fpgas xilinx said several highest-density parts fpga product lines constructed using multiple dies one package employing technology developed 3d construction stacked-die assemblies xilinx approach stacks several three four active fpga dies side-by-side silicon interposer – single piece silicon carries passive interconnect multi-die construction also allows different parts fpga created different process technologies process requirements different fpga fabric high speed 28 gbit/s serial transceivers fpga built way called heterogeneous fpga altera heterogeneous approach involves using single monolithic fpga die connecting die/technologies fpga using intel embedded multi-die interconnect bridge emib technology labview define behavior fpga user provides design hardware description language hdl schematic design hdl form suited work large structures possible specify high-level functional behavior rather drawing every piece hand however schematic entry allow easier visualization design component modules using electronic design automation tool technology-mapped netlist generated netlist fit actual fpga architecture using process called place-and-route usually performed fpga company proprietary place-and-route software user validate map place route results via timing analysis simulation verification validation methodologies design validation process complete binary file generated typically using fpga vendor proprietary software used re- configure fpga file transferred fpga/cpld via serial interface jtag external memory device like eeprom common hdls vhdl verilog well extensions systemverilog however attempt reduce complexity designing hdls compared equivalent assembly languages moves raise abstraction level introduction alternative languages national instruments labview graphical programming language sometimes referred g fpga add-in module available target program fpga hardware simplify design complex systems fpgas exist libraries predefined complex functions circuits tested optimized speed design process predefined circuits commonly called intellectual property ip cores available fpga vendors third-party ip suppliers rarely free typically released proprietary licenses predefined circuits available developer communities opencores typically released free open source licenses gpl bsd similar license sources designs known open-source hardware typical design flow fpga application developer simulate design multiple stages throughout design process initially rtl description vhdl verilog simulated creating test benches simulate system observe results synthesis engine mapped design netlist netlist translated gate-level description simulation repeated confirm synthesis proceeded without errors finally design laid fpga point propagation delays added simulation run values back-annotated onto netlist recently opencl open computing language used programmers take advantage performance power efficiencies fpgas provide opencl allows programmers develop code c programming language target fpga functions opencl kernels using opencl constructs information see high-level synthesis c hdl 2016 long-time industry rivals xilinx altera intel subsidiary fpga market leaders time controlled nearly 90 percent market xilinx altera provide proprietary electronic design automation software windows linux ise/vivado quartus enables engineers design analyze simulate synthesize compile designs manufacturers include march 2010 tabula announced fpga technology uses time-multiplexed logic interconnect claims potential cost savings high-density applications march 24 2015 tabula officially shut june 1 2015 intel announced would acquire altera approximately 16.7 billion completed acquisition december 30 2015
node8:Wikipedia entry. Entry name: Broadwell_(microarchitecture). Entry content: broadwell microarchitecture broadwell intel codename 14 nanometer die shrink haswell microarchitecture tick intel tick–tock principle next step semiconductor fabrication like previous tick-tock iterations broadwell completely replace full range cpus previous microarchitecture haswell low-end desktop cpus based broadwell processors based broadwell microarchitecture marketed 5th-generation core i3 i5 i7 processors moniker however used marketing broadwell-based celeron pentium xeon chips microarchitecture also introduced core processor branding broadwell h c variants used conjunction intel 9 series chipsets z97 h97 hm97 addition retaining backward compatibility intel 8 series chipsets broadwell launched three major variants broadwell introduces instruction set architecture extensions broadwell intel quick sync video hardware video decoder adds vp8 hardware decoding encoding support adds vp9 hevc 10-bit decoding support integrated gpu hevc decode achieved combination fixed function video decoder shaders also two independent bit stream decoder bsd rings process video commands gt3 gpus allows one bsd ring process decoding bsd ring process encoding time broadwell integrated gpu supports windows direct3d 11.2 opengl 4.4 opengl 4.5 linux opencl 2.0 however marketed direct3d-12-ready broadwell-e introduced intel turbo boost max technology 3.0 september 10 2013 intel showcased broadwell 14 nm processor demonstration idf intel ceo brian krzanich claimed chip would allow systems provide 30 percent improvement power use haswell chips released mid-2013 krzanich also claimed chips would ship end 2013 however shipment delayed due low yields intel 14 nm process october 21 2013 leaked intel roadmap indicated late 2014 early 2015 release k-series broadwell lga 1150 platform parallel previously announced haswell refresh would coincide release intel 9-series chipset would required broadwell processors due change power specifications lga 1150 socket reuters quoted intel ceo promising broadwell-based pcs would shelves holiday season probably back-to-school shopping mobile cpus expected q4 2014 high-performance quad-core cpus 2015 mobile cpus would benefit reduced energy consumption die shrink intel told cnet specialized broadwell-based products would q4 2014 broader availability including mobile cpus would happen 2015. broadwell cpus available intel hardware partners sample quantities intel expected release 17 broadwell u series family microprocessors ces 2015 also according leak posted vr-zone broadwell-e chips would available 2016 intel unveiled formally 14 nm manufacturing process indicated mobile variants process would known core products additionally core products announced shipping end 2014 desktop variants shipping shortly broadwell intel focused mainly laptops miniature desktops all-in-one systems left traditional desktop users new socketed cpu options beyond fourth-generation haswell first arrived 2013 even though company finally introduced two broadwell desktop chips summer 2015 launched high-end sixth-generation skylake cpus shortly thereafter september 2015 kirk skaugen senior vice president general manager intel client computing group admitted skipping desktops broadwell poor decision end-of-life windows xp 2014 lack new desktop chips intel given desktop pc users good reasons upgrade 2015 intel launched first three broadwell-based processors belong low-tdp core family core 5y10 core 5y10a core 5y70 first laptop broadwell intel core 5y70 cpu lenovo yoga 3 pro launched four broadwell based cpus launched belonging core family increasing number launched broadwell cpus seven 17 additional broadwell laptop cpus launched celeron pentium core i3 i5 i7 series intel officially launched 14 nm broadwell-ep xeon e5 v4 cpus intel officially launched 14 nm broadwell-e core i7 69xx/68xx processor family
node9:Wikipedia entry. Entry name: Logical_link_control. Entry content: logical link control ieee 802 reference model computer networking logical link control llc data communication protocol layer upper sublayer data link layer layer 2 seven-layer osi model llc sublayer provides multiplexing mechanisms make possible several network protocols e.g ip ipx decnet appletalk coexist within multipoint network transported network medium also provide flow control automatic repeat request arq error management mechanisms llc sublayer acts interface media access control mac sublayer network layer llc sublayer primarily concerned multiplexing protocols transmitted mac layer transmitting demultiplexing receiving also provide node-to-node flow control error management flow control error management capabilities llc sublayer used protocols netbios frames protocol however protocol stacks running atop 802.2 use llc sublayer flow control error management cases flow control error management taken care transport layer protocol tcp application layer protocol higher layer protocols work end-to-end fashion i.e re-transmission done original source final destination rather individual physical segments protocol stacks multiplexing capabilities llc sublayer used llc sublayer key component early packet switching networks x.25 networks lapb data link layer protocol flow control error management carried node-to-node fashion meaning error detected frame frame retransmitted one switch next instead extensive handshaking nodes made networks slow ieee 802.2 standard specifies llc sublayer ieee 802 local area networks ieee 802.3/ethernet ethertype field used ieee 802.5 ieee 802.11 ieee 802.2 also used non-ieee 802 networks fddi since bit errors rare wired networks ethernet provide flow control automatic repeat request arq meaning incorrect packets detected cancelled retransmitted except case collisions detected csma/cd mac layer protocol instead retransmissions rely higher layer protocols ethertype ethernet frame using ethernet ii framing used multiplex different protocols top ethernet mac header seen llc identifier however ethernet frames lacking ethertype llc identifier ethernet header instead use ieee 802.2 llc header ethernet header provide protocol multiplexing function wireless communications bit errors common wireless networks ieee 802.11 flow control error management part csma/ca mac protocol part llc layer llc sublayer follows ieee 802.2 standard non-ieee 802 protocols thought split mac llc layers example hdlc specifies mac functions framing packets llc functions protocol multiplexing flow control detection error control retransmission dropped packets indicated protocols cisco hdlc use hdlc-like packet framing llc protocol telephone network modems ppp link layer protocols considered llc protocol providing multiplexing provide flow control error management telephone network bit errors might common meaning error management crucial today provided modern protocols today modem protocols inherited llc features older lapm link layer protocol made modem communication old x.25 networks gprs llc layer also ciphering deciphering sn-pdu sndcp packets another example data link layer split llc flow error control mac multiple access itu-t g.hn standard provides high-speed local area networking existing home wiring power lines phone lines coaxial cables
node10:Wikipedia entry. Entry name: Hewlett-Packard. Entry content: hewlett-packard hewlett-packard company commonly referred hp stylized hp hewlett-packard american multinational information technology company headquartered palo alto california developed provided wide variety hardware components well software related services consumers small- medium-sized businesses smbs large enterprises including customers government health education sectors company founded one-car garage palo alto bill hewlett david packard initially produced line electronic test equipment hp world leading pc manufacturer 2007 q2 2013 time lenovo ranked ahead hp hp specialized developing manufacturing computing data storage networking hardware designing software delivering services major product lines included personal computing devices enterprise industry standard servers related storage devices networking products software diverse range printers imaging products hp directly marketed products households small- medium-sized businesses enterprises well via online distribution consumer-electronics office-supply retailers software partners major technology vendors hp also services consulting business around products partner products hewlett-packard company events included spin-off electronic bio-analytical measurement instruments part business agilent technologies 1999 merger compaq 2002 acquisition eds 2008 led combined revenues 118.4 billion 2008 fortune 500 ranking 9 2009 november 2009 hp announced acquisition 3com deal closing april 12 2010 april 28 2010 hp announced buyout palm inc. 1.2 billion september 2 2010 hp bidding war 3par 33 share offer 2.07 billion dell declined match hewlett-packard spun enterprise products services business hewlett packard enterprise november 1 2015 hewlett-packard held onto pc printer businesses renamed hp inc. bill hewlett david packard graduated degrees electrical engineering stanford university 1935 company originated garage nearby palo alto fellowship past professor frederick terman stanford great depression considered terman mentor forming hewlett-packard 1938 packard hewlett began part-time work rented garage initial capital investment us 538 1939 hewlett packard decided formalize partnership tossed coin decide whether company founded would called hewlett-packard hp packard-hewlett hp incorporated august 18 1947 went public november 6 1957 many projects worked first financially successful product precision audio oscillator model hp200a innovation use small incandescent light bulb known pilot light temperature dependent resistor critical portion circuit negative feedback loop stabilized amplitude output sinusoidal waveform allowed sell model 200a 89.40 competitors selling less stable oscillators 200 model 200 series generators continued production least 1972 200ab still tube-based improved design years one company earliest customers walt disney productions bought eight model 200b oscillators 71.50 use certifying fantasound surround sound systems installed theaters movie fantasia worked counter-radar technology artillery shell fuses world war ii allowed packard hewlett exempt draft hp recognized symbolic founder silicon valley although actively investigate semiconductor devices years traitorous eight abandoned william shockley create fairchild semiconductor 1957 hewlett-packard hp associates division established around 1960 developed semiconductor devices primarily internal use hp associates co-founded another former bell labs researcher mosfet mos transistor inventor mohamed atalla served director semiconductor research instruments calculators products using semiconductor devices hp associates 1960s hp partnered sony yokogawa electric companies japan develop several high-quality products products huge success high costs building hp-looking products japan hp yokogawa formed joint venture yokogawa-hewlett-packard 1963 market hp products japan hp bought yokogawa electric share hewlett-packard japan 1999 hp spun small company dynac specialize digital equipment name picked hp logo hp could turned upside reverse reflect image logo dy new company eventually dynac changed dymec folded back hp 1959 hp experimented using digital equipment corporation dec minicomputers instruments deciding would easier build another small design team deal dec hp entered computer market 1966 hp 2100 hp 1000 series minicomputers simple accumulator-based design two accumulator registers hp 1000 models two index registers series produced 20 years spite several attempts replace forerunner hp 9800 hp 250 series desktop business computers hp 3000 advanced stack-based design business computing server later redesigned risc technology hp 2640 series smart intelligent terminals introduced forms-based interfaces ascii terminals also introduced screen labeled function keys commonly used gas pumps bank atms hp 2640 series included one first bit mapped graphics displays combined hp 2100 21mx f-series microcoded scientific instruction set enabled first commercial wysiwyg presentation program bruno later became program hp-draw hp 3000 although scoffed formative days computing hp would eventually surpass even ibm world largest technology vendor terms sales although programma 101 first commercial desktop computer hp identified wired magazine producer world first device called personal computer hewlett-packard 9100a introduced 1968 programma 101 called computer personale italian fiera di milano 1966 hp called desktop calculator bill hewlett said called computer would rejected customers computer gurus n't look like ibm therefore decided call calculator nonsense disappeared engineering triumph time logic circuit produced without integrated circuits assembly cpu entirely executed discrete components crt display magnetic-card storage printer price around 5,000 machine keyboard cross scientific calculator adding machine alphabetic keyboard steve wozniak co-founder apple originally designed apple computer working hp offered right first refusal work take company wanted stay scientific business industrial markets wozniak said hp turned 5 times loyalty hp made hesitant start apple steve jobs company earned global respect variety products introduced world first handheld scientific electronic calculator 1972 hp-35 first handheld programmable 1974 hp-65 first alphanumeric programmable expandable 1979 hp-41c first symbolic graphing calculator hp-28c like scientific business calculators oscilloscopes logic analyzers measurement instruments reputation sturdiness usability latter products part spin-off agilent product line later spun agilent keysight technologies company design philosophy period summarized design guy next bench 98x5 series technical desktop computers started 1975 9815 cheaper 80 series technical computers started 1979 85 machines used version basic programming language available immediately switched used proprietary magnetic tape storage hp computers similar capabilities much later ibm personal computer although limitations available technology forced prices high 1984 hp introduced inkjet laser printers desktop along scanner product line later developed successful multifunction products significant single-unit printer/scanner/copier/fax machines print mechanisms hp tremendously popular laserjet line laser printers depend almost entirely canon inc. components print engines turn use technology developed xerox hp develops hardware firmware software convert data dots printing march 3 1986 hp registered hp.com domain name making ninth internet .com domain ever registered 1987 palo alto garage hewlett packard started business designated california state historical landmark 1990s hp expanded computer product line initially targeted university research business users reach consumers hp also grew acquisitions bought apollo computer 1989 convex computer 1995 later decade hp opened hpshopping.com independent subsidiary sell online direct consumers 2005 store renamed hp home home office store 1995 1998 hewlett-packard sponsors english football team tottenham hotspur 1999 businesses related computers storage imaging spun hp form agilent technologies agilent spin-off largest initial public offering history silicon valley spin-off created 8 billion company 30,000 employees manufacturing scientific instruments semiconductors optical networking devices electronic test equipment telecom wireless r production july 1999 hp appointed carly fiorina formerly lucent first female ceo fortune-20 company dow jones industrial average fiorina received larger signing offer predecessors fiorina served ceo technology downturn early 2000s led merger compaq disastrous according cnn led firing 30,000 u.s. employees leadership company doubled size tenure ceo beset damaging leaks hp board directors asked fiorina step 2005 following boardroom disagreement resigned february 9 2005 1997 hp sold 120 million worth printers computer products iran european subsidiary dubai-based east distributor despite u.s. export sanctions prohibiting deals imposed bill clinton executive orders issued 1995 story initially reported boston globe triggered inquiry sec hp responded products worth 120 million sold fiscal year 2008 distribution way redington gulf company based netherlands sales took place foreign subsidiary hp violated sanctions hp named redington gulf wholesaler year 2003 turn published press release stating seeds redington-hewlett-packard relationship sowed six years ago one market — iran time redington gulf three employees whose sole purpose sell hp products iran market according former officials worked sanctions hp using loophole routing sales foreign subsidiary hp ended relationship redington gulf sec inquiry september 3 2001 hp announced agreement reached compaq merge two companies may 2002 passing shareholder vote hp officially merged compaq prior plans place consolidate companies product teams product lines compaq already taken digital equipment corporation 1998 hp therefore still offers support former digital equipment products pdp-11 vax alphaserver merger occurred proxy fight bill hewlett son walter objected merger compaq bought tandem computers 1997 started ex-hp employees digital equipment corporation 1998 following strategy hp became major player desktops laptops servers many different markets merger compaq new ticker symbol became hpq combination two previous symbols hwp cpq show significance alliance also key letters two companies hewlett-packard compaq latter company famous q logo products 2004 hp released dv 1000 series including hp pavilion dv 1658 1040 two years later may 2006 hp began campaign computer personal campaign designed bring back fact pc personal product campaign utilized viral marketing sophisticated visuals website www.hp.com/personal ads featured pharrell petra nemcova mark burnett mark cuban alicia keys jay-z gwen stefani shaun white january 2005 following years performance included hp compaq merger fell short disappointing earning reports board asked fiorina resign chair chief executive officer company following news fiorina departure hp stock jumped 6.9 percent robert wayman chief financial officer hp served interim ceo board undertook formal search replacement mark hurd ncr corporation hired take ceo president effective 1 april 2005 hurd board top choice given revival ncr took place leadership 2006 hp unveiled several new products including desktops enhanced notebooks workstation software manage openview client configuration manager 2.0 year hp share price skyrocketed due consistent results last couple quarters year hurd plan cutback hp workforce lower costs july 2007 hp signed definitive agreement acquire opsware cash tender deal values company 14.25 per share combined opsware software oracle enterprise management software first years hurd new role hp stock price doubled end fiscal 2007 hp hit 100 billion mark first time company annual revenue reached 104 billion allowing hp overtake competitor ibm may 13 2008 hp electronic data systems eds announced signed definitive agreement hp would purchase eds june 30 hp announced waiting period hart-scott-rodino antitrust improvements act 1976 expired transaction still requires eds stockholder approval regulatory clearance european commission non-u.s. jurisdictions subject satisfaction waiver closing conditions specified merger agreement agreement finalized august 26 2008 13 billion publicly announced eds would re-branded eds hp company first targeted layoff 24,600 former eds workers announced september 15 2008 company 2008 annual report gave number 24,700 completed end 2009 round factored purchase price 19.5 billion liability goodwill september 23 2009 eds known hp enterprise services november 11 2009 3com hewlett-packard announced hewlett-packard would acquiring 3com 2.7 billion cash acquisition one biggest size among series takeovers acquisitions technology giants push way become one-stop shops since beginning financial crisis 2007 tech giants constantly felt pressure expand beyond current market niches dell purchased perot systems recently invade technology consulting business area previously dominated ibm hewlett-packard latest move marked incursion enterprise networking gear market dominated cisco april 28 2010 palm inc. hewlett-packard announced hp would buy palm 1.2 billion cash debt announcement rumored either htc dell research motion hp would buy palm adding palm handsets hp product line created overlap ipaq series mobile devices thought significantly improve hp mobile presence ipaqdevices selling well buying palm gave hp library valuable patents well mobile operating platform known webos july 1 2010 acquisition palm final purchase palm webos began big gamble – build hp ecosystem july 1 2011 hp launched first tablet named hp touchpad bringing webos tablet devices september 2 2010 hp bidding war 3par 33 share offer 2.07 billion dell declined match hp acquisition palm phased compaq brand august 6 2010 ceo mark hurd resigned amid controversy cfo cathie lesjak assumed role interim ceo hurd turned hp around widely regarded one silicon valley star ceos leadership hp became largest computer company world measured total revenue accused sexual harassment colleague allegations deemed baseless investigation led questions concerning 1000 20000 private expenses lack disclosure related friendship observers argued hurd innocent board asked resignation avoid negative pr public analysis divided saw commendable tough action hp handling expenses irregularities saw ill-advised hasty expensive reaction ousting remarkably capable leader turned business around hp hurd oversaw series acquisitions worth 20 billion allowed company expand services networking equipment smartphones shares hp dropped 8.4 after-hours trading hitting 52-week low 9 billion market capitalization shaved larry ellison publicly attacked hp board ousting stating hp board made worst personnel decision since idiots apple board fired steve jobs many years ago september 30 2010 léo apotheker named hp new ceo president apotheker appointment sparked strong reaction oracle chief executive larry ellison complained apotheker charge sap one subsidiaries systematically stealing software oracle sap accepted subsidiary closed illegally accessed oracle intellectual property following hurd departure hp seen market problematic margins falling failed redirect establish major new markets cloud mobile services apotheker strategy broadly aim disposing hardware moving profitable software services sector august 18 2011 hp announced would strategically exit smartphone tablet computer business focusing higher-margin strategic priorities cloud solutions software emphasis enterprise commercial government markets also contemplated selling personal computer division spinning separate company quitting 'pc business continuing sell servers equipment business customers strategy already undertaken ibm 2005 hp stock continued drop 40 including 25 one day august 19 2011 company abruptly announced number decisions discontinue webos device business mobile phones tablet computers intent sell personal computer division time hp largest personal computer manufacturer world acquire british big data software firm autonomy 79 premium seen externally absurdly high price business known concerns accounts media analysts described hp actions botched strategy shift chaotic attempt rapidly reposition hp enhance earnings ultimately cost apotheker job autonomy acquisition objected even hp cfo september 22 2011 hp board directors fired apotheker chief executive effective immediately replaced fellow board member former ebay chief meg whitman raymond j lane executive chairman though apotheker served barely ten months received 13 million compensation hp lost 30 billion market capitalization tenure weeks later hp announced review concluded pc division integrated critical business operations company reaffirmed commitment personal systems group year later november 2012 wrote-down almost 9 billion related autonomy acquisition see takeover autonomy became subject intense litigation hp accused autonomy previous management fraudulently exaggerating autonomy financial position called law enforcement regulators countries autonomy previous management accused hp textbook obfuscation finger pointing protect hp executives criticism conceal hp culpability prior knowledge autonomy financial position gross mismanagement autonomy acquisition march 21 2012 hp said printing pc divisions would become one unit headed todd bradley pc division printing chief vyomesh joshi leaving company may 23 2012 hp announced plans lay approximately 27,000 employees posting profit decline 31 second quarter 2012 profit decline account growing popularity smart phones tablets mobile devices slowed sale personal computers may 30 2012 hp unveiled first net zero energy data center hp data center plans use solar energy renewable sources instead traditional power grids july 10 2012 hp server monitoring software discovered previously unknown security vulnerability security warning given customers two vulnerabilities patch released one month later hp official site training center hacked defaced pakistani hacker known 'hitcher demonstrate web vulnerability september 10 2012 hp revised restructuring figures cutting 29,000 jobs hp already cut 3,800 jobs – around 7 percent revised 29,000 figure – july 2012 december 31 2013 hp revised number jobs cut 29,000 34,000 october 2014 current number jobs cut end 2013 24,600 end 2013 company 317,500 employees may 22 2014 hp announced would cut 11,000 16,000 jobs addition 34,000 announced 2013 gradually shaping hp nimble lower-cost customer partner-centric company successfully compete across rapidly changing landscape ceo meg whitman said time june 2014 hp discover customer event las vegas meg whitman martin fink announced project radically new computer architecture called machine based memristors silicon photonics machine supposed come commercialization end decade meanwhile representing 75 research activity hp labs october 6 2014 hewlett-packard announced planning split two separate companies separating personal computer printer businesses technology services split first reported wall street journal confirmed media would result two publicly traded companies hewlett packard enterprise hp inc. meg whitman would serve chairman hp inc. ceo hewlett packard enterprise patricia russo would chairman enterprise business dion weisler would ceo hp inc. october 29 2014 hewlett-packard announced new sprout personal computer may 2015 company announced would selling controlling 51 percent stake chinese data-networking business tsinghua unigroup fee least 2.4 billion november 1 2015 previously announced hewlett-packard changed name hp inc. spun hewlett packard enterprise new publicly traded company hp inc. retains hewlett-packard stock price history stock ticker symbol hewlett packard enterprise trades symbol hp global operations directed headquarters palo alto california usa u.s. operations directed facility unincorporated harris county texas near houston latin america offices unincorporated miami-dade county florida u.s. near miami europe offices meyrin switzerland near geneva also research center paris-saclay cluster 20 km south paris france asia-pacific offices singapore also large operations leixlip ireland austin texas boise idaho corvallis oregon fort collins colorado roseville california saint petersburg florida san diego california tulsa oklahoma vancouver washington conway arkansas plano texas former headquarters eds hp acquired uk hp based large site bracknell berkshire offices various uk locations including landmark office tower london 88 wood street recent acquisition 3com expand employee base marlborough massachusetts company also large workforce numerous offices bucharest romania bangalore india address back end operations mphasis headquartered bangalore also enabled hp increase footprint city subsidiary eds company acquired hp produces lines printers scanners digital cameras calculators pdas servers workstation computers computers home small-business use many computers came 2002 merger compaq hp promotes supplying hardware software also full range services design implement support infrastructure hp imaging printing group ipg described company 2005 leading imaging printing systems provider world printer hardware printing supplies scanning devices providing solutions across customer segments individual consumers small medium businesses large enterprises products technology associated ipg include december 23 2008 hp released iprint photo iphone free downloadable software application allows printing 4 x 6 photos hp personal systems group psg claims one leading vendors personal computers pcs world based unit volume shipped annual revenue psg deals hp resold apple ipod november 2005 hp enterprise business eb incorporates hp technology services enterprise services amalgamation former eds known hp services hp enterprise security services oversees professional services network security information security information assurance/ compliancy hp software division enterprise servers storage networking group essn enterprise servers storage networking group essn oversees back end products like storage servers hp networking former procurve responsible nw family products business unit essn hp software division company enterprise software unit years hp produced marketed brand enterprise-management software hp openview september 2005 hp purchased several software companies part publicized deliberate strategy augment software offerings large business customers hp software sells several categories software including hp software also provides software service saas cloud computing solutions software services including consulting education professional services support hp office strategy technology four main functions office strategy technology comes hp labs research arm hp founded 1966 hp labs aims deliver new technologies create business opportunities go beyond hp current strategies examples recent hp labs technology includes memory spot chip 2006 hp idealab provides web forum early-state innovations encourage open feedback consumers development community hp also offers managed services provide complete it-support solutions companies organizations examples include founders developed management style came known hp way hewlett words hp way core ideology ... includes deep respect individual dedication affordable quality reliability commitment community responsibility view company exists make technical contributions advancement welfare humanity following tenets hp way july 2007 company announced met target set 2004 recycle one billion pounds electronics toner ink cartridges set new goal recycling two billion pounds hardware end 2010 2006 company recovered 187 million pounds electronics 73 percent closest competitor 2008 hp released supply chain emissions data — industry first september 2009 newsweek ranked hp 1 2009 green rankings america 500 largest corporations according environmentalleader.com hewlett-packard earned number one position due greenhouse gas ghg emission reduction programs first major company report ghg emissions associated supply chain according ranking addition hp made effort remove toxic substances products though greenpeace targeted company better hp took top spot corporate responsibility magazine 100 best corporate citizens list 2010 list cited pr week one america important business rankings hp beat russell 1000 index companies leadership seven categories including environment climate changes corporate philanthropy 2009 hp ranked fifth fortune magazine named hp one world admired companies 2010 placing 2 computer industry 32 overall list top 50 year computer industry hp ranked 1 social responsibility long-term investment global competitiveness use corporate assets may 2011 hp released global responsibility report covering accomplishments 2010 report company tenth provides comprehensive view hp global citizenship programs performance goals describes hp uses technology influence expertise make positive impact world company 2009 report best corporate responsibility report year 2009 reports claims hp decreased total energy use 9 percent compared 2008 hp recovered total 118,000 tonnes electronic products supplies recycling 2009 including 61 million print cartridges april 2010 san francisco chronicle article hp one 12 companies commended designing products safe start following principles green chemistry commendations came environment california environmental advocacy group praised select companies golden state bay area efforts keep planet clean green may 2010 hp named one world ethical companies ethisphere institute second year row hp made list ethisphere reviewed researched analyzed thousands nominations 100 countries 35 industries create 2010 list hp one 100 companies earn distinction top winner computer hardware vendor recognized ethisphere honors firms promote ethical business standards practices going beyond legal minimums introducing innovative ideas benefit public hp listed greenpeace guide greener electronics ranks electronics manufacturers according policies sustainability energy climate green products november 2011 hp secured 1st place 15 ranking climbing 3 places increased score 5.9 5.5 scored points new sustainable operations criteria best program measuring reducing emissions greenhouse gases suppliers scoring maximum points thorough paper procurement policy november 2012 report hp ranked second score 5.7 hp especially well disclosure externally verified greenhouse gas emissions setting targets reducing however greenpeace reports hp risks penalty point future editions due fact member trade associations commented energy efficiency standards hp earned recognition work area data privacy security 2010 company ranked 4 ponemon institute annual study trusted companies privacy since 2006 hp worked directly u.s. congress federal trade commission ftc department commerce establish new strategy federal legislation hp played key role work toward december 2010 ftc report protecting consumer privacy era rapid change winning nine straight annual respected company china awards economic observer peking university hp china added 10 year contribution award list accolades award aims identify companies business china outstanding sustained performance business operations development corporate social responsibility 2012 rankings consumer electronics companies progress relating conflict minerals enough project rated hp second 24 companies calling pioneer progress according businessweek study hp world 11th valuable brand 2009 hp many sponsorships one well known sponsorship epcot walt disney world resort 1995 1999 2013 hp shirt sponsor premier league club tottenham hotspur f.c 1997 1999 sponsors australian football league club north melbourne football club also sponsored bmw williams formula 1 team 2005 sponsorship formerly held compaq 2010 sponsor renault f1 hewlett-packard also naming rights arrangement hp pavilion san jose home san jose sharks nhl hockey team 2013 arena naming rights acquired sap ag renaming arena sap center san jose company also maintains number corporate sponsorships business sector including sponsorships trade organisations including fespa print trade exhibitions o'reilly media velocity web development conference acquisition compaq 2002 hp maintained compaq presario brand low-end home desktops laptops hp compaq brand business desktops laptops hp proliant brand intel-architecture servers hp pavilion brand used home entertainment laptops home desktops tandem nonstop servers branded hp integrity nonstop march 2003 hp restated first-quarter cash flow operations reducing 18 percent accounting error actual cash flow operations 647 million 791 million reported earlier hp shifted 144 million net cash used investing activities september 5 2006 shawn cabalfin david o'neil newsweek wrote hp general counsel behest chairwoman patricia dunn contracted team independent security experts investigate board members several journalists order identify source information leak turn security experts recruited private investigators used spying technique known pretexting pretexting involved investigators impersonating hp board members nine journalists including reporters cnet new york times wall street journal order obtain phone records information leaked related hp long-term strategy published part cnet article january 2006 hp employees accused criminal acts since acquitted november 2007 hewlett-packard released bios update covering wide range laptops intent speed computer fan well run constantly whether computer reason prevent overheating defective nvidia graphics processing units gpus shipped many original equipment manufacturers including hewlett-packard dell apple defect concerned new packaging material used nvidia 2007 onwards joining graphics chip onto motherboard perform well thermal cycling prone develop stress cracks – effectively severing connection gpu motherboard leading blank screen july 2008 hp issued extension initial one-year warranty replace motherboards selected models however option extended models defective nvidia chipsets despite research showing computers also affected fault furthermore replacement motherboard temporary fix since fault inherent units affected models point manufacture including replacement motherboards offered hp free 'repair since point several websites documenting issue notably www.hplies.com forum dedicated refer hewlett-packard multi-million dollar cover issue www.nvidiadefect.com details specifics fault offers advice owners affected computers several small-claims lawsuits filed several states well suits filed countries hewlett-packard also faced class-action lawsuit 2009 i7 processor computers complainants stated systems locked within 30 minutes powering consistently even replaced newer i7 systems lockups continued june 15 2011 hp filed lawsuit california superior court santa clara claiming oracle corporation breached agreement support itanium microprocessor used hp high-end enterprise servers june 15 2011 hp sent formal legal demand letter oracle attempt force world 3 software maker reverse decision discontinue software development intel itanium microprocessor build servers hp lawsuit 2012 requiring oracle continue produce software compatible itanium processor hp awarded 3 billion damages oracle june 30 2016 hp argued oracle canceling support damaged hp itanium server brand oracle announced appeal decision damages november 2012 hp recorded writedown around 8.8 billion related acquisition year earlier uk based autonomy corporation plc hp accused autonomy deliberately inflating value company prior takeover former management team autonomy flatly rejected charge autonomy specialized analysis large scale unstructured big data 2010 uk largest successful software business maintained aggressively entrepreneurial marketing approach controls described rod iron said include zero tolerance firing weakest 5 sales force quarter compensating best sales staff like rock stars time hp fired previous ceo expenses irregularities year appointed léo apotheker ceo president hp seen problematic market margins falling failed redirect establish major new markets cloud mobile services apotheker strategy aim disposing hardware moving profitable software services sector part strategy autonomy acquired hp october 2011 hp paid 10.3 billion 87.3 shares valuing autonomy around 11.7 billion £7.4 billion overall premium around 79 market price deal widely criticized absurdly high botched strategy shift chaotic attempt rapidly reposition hp enhance earnings objected even hp cfo within year apotheker fired major culture clashes became apparent hp written 8.8 billion autonomy value hp claim resulted accounting improprieties misrepresentations disclosure failures previous management turn accuse hp textbook example defensive stalling conceal evidence prior knowledge gross mismanagement undermining company noting public awareness since 2009 financial reporting issues even hp cfo disagreed price paid external observers generally state small part write-off appears due accounting mis-statements hp overpaid businesses previously serious fraud office united kingdom u.s. securities exchange commission joined fbi investigating potential anomalies hp incurred much damage stock falling decades low three lawsuits brought shareholders hp fall value hp shares august 2014 united states district court judge threw proposed settlement autonomy previous management argued would collusive intended divert scrutiny hp responsibility knowledge essentially engaging plaintiff attorneys existing cases redirecting previous autonomy vendors management fee 48 million plaintiffs agreeing end claims hp management similarly redirect claims previous autonomy vendors management january 2015 sfo closed investigation likelihood successful prosecution low dispute still litigated us investigated uk ireland financial reporting council june 9 2015 hp agreed pay 100 million investors bought hp shares august 19 2011 november 20 2012 settle suite autonomy purchase october 25 2012 richard falk human rights council special rapporteur situation human rights palestinian territories occupied since 1967 called boycotting hp together businesses profiting israeli settlements occupied palestinian lands brought operations line international human rights humanitarian law 2014 presbyterian church voted move forward divestment hp protest israeli policies toward palestinians 2015 city portland human rights commission requested place caterpillar g4s hewlett-packard motorola solutions city buy list april 9 2014 administrative proceeding securities exchange commission settled hp consenting order acknowledging hp violated foreign corrupt practices act fcpa hp subsidiaries russia poland mexico made improper payments government officials obtain retain lucrative public contracts sec order finds hp subsidiary russia paid 2 million agents various shell companies russian government official retain multimillion-dollar contract federal prosecutor office poland hp subsidiary provided gifts cash bribes worth 600,000 polish government official obtain contracts national police agency part bid win software sale mexico state-owned petroleum company hp subsidiary mexico paid 1 million inflated commissions consultant close ties company officials money funneled one officials hp agreed pay 108 million settle sec charges parallel criminal case
node11:Wikipedia entry. Entry name: Palm_Pixi. Entry content: palm pixi palm pixi pixi plus multimedia smartphones developed palm purchased 2010 hp device viewed successor palm centro smartphone palm second webos device palm pre phones considered smallest smartphone market able browse internet access facebook social media sites well online banking original pixi announced september 8 2009 palm official blog released november 15 2009 sprint carrier network u.s pixi plus announced ces 2010 plus versions include wifi ability act 3g mobile hotspot sometimes known mifi phone released january 7 2010 verizon wireless carrier network subsequently mobility released may 28 2010 o2 united kingdom pixi touch screen capability qwerty keyboard access battery interior hardware phone metal faceplate sits plastic backing palm inc. detailed specifications palm pixi company product web page according information given pixi features 2.63-inch capacitive touchscreen 18-bit color 320x400 screen resolution sub-hvga display device weighs 92.5 grams 3.51 ounces 55.0 mm 2.17 inches width 111.0 mm 4.37 inches height 10.85 mm 0.43 inches thick board radios include gps dual-band cdma2000 3g evdo rev data networking e-mail supports microsoft exchange services direct push well pop3 imap yahoo mail gmail aol microsoft outlook messaging features include im sms mms features 2 megapixel camera led flash proximity sensor accelerometer bluetooth 2.1 a2dp stereo microusb connector 3.5 mm headphone jack 8 gigabytes flash memory roughly 7 gigabytes available user like palm pre pixi features webos includes over-the-air synergy synchronization pixi plus display pixi hardware specs include qualcomm msm7627 600mhz cpu adreno 200 graphics 8gb storage 256 mb ram 802.11 b/g wifi bluetooth 2.1 capable using hsdpa 3.6 mbit/s well gprs offers a-gps navigation location services battery changeable 1,150 mah unit 5.5h talk time 2g 350h standby according manufacturer camera 2 megapixel device rear led flash
node12:Wikipedia entry. Entry name: R4000. Entry content: r4000 r4000 microprocessor developed mips computer systems implements mips iii instruction set architecture isa officially announced 1 october 1991 one first 64-bit microprocessors first mips iii implementation early 1990s risc microprocessors expected replace cisc microprocessors intel i486 r4000 selected microprocessor advanced computing environment ace industry standard intended define common risc platform ace ultimately failed number reasons r4000 found success workstation server markets three configurations r4000 r4000pc entry-level model support secondary cache r4000sc model secondary cache multiprocessor capability r4000mc model secondary cache support cache coherency protocols required multiprocessor systems r4000 scalar superpipelined microprocessor eight-stage integer pipeline first stage virtual address instruction generated instruction translation lookaside buffer tlb begins translation address physical address second stage translation completed instruction fetched internal 8 kb instruction cache instruction cache direct-mapped virtually indexed physically tagged 16- 32-byte line size architecturally could expanded 32 kb third stage rf instruction decoded register file read mips iii defines two register files one integer unit floating-point register file 64 bits wide contained 32 entries integer register file two read ports one write port floating-point register file two read ports two write ports execution begins stage four ex integer floating-point instructions written back register files completed stage eight wb results may bypassed possible r4000 arithmetic logic unit alu shifter multiplier divider load aligner executing integer instructions alu consists 64-bit carry-select adder logic unit pipelined shifter 32-bit barrel shifter performs 64-bit shifts two cycles stalling pipeline result design chosen save die area multiplier divider pipelined significant latencies multiplies 10- 20-cycle latency 32-bit 64-bit integers respectively whereas divides 69- 133-cycle latency 32-bit 64-bit integers respectively instructions single cycle latency alu adder also used calculating virtual addresses loads stores branches load store instructions executed integer pipeline access on-chip 8 kb data cache r4000 on-die ieee 754-1985-compliant floating-point unit fpu referred r4010 fpu coprocessor designated cp1 mips isa defined four coprocessors designated cp0 cp3 fpu operate two modes 32- 64-bit selected setting bit fr bit cpu status register 32-bit mode 32 floating-point registers become 32 bits wide used hold single-precision floating-point numbers used hold double-precision numbers 16 floating-point registers registers paired fpu operate parallel alu unless data resource dependency causes stall contains three sub-units adder multiplier divider multiplier divider execute instruction parallel adder use adder final stages execution thus imposing limits overlapping execution thus certain conditions execute three instructions time one unit fpu capable retiring one instruction per cycle adder multiplier pipelined multiplier four-stage multiplier pipeline clocked twice clock frequency microprocessor adequate performance uses dynamic logic achieve high clock frequency division 23- 36-cycle latency single- double-precision operations square-root 54- 112-cycle latency division square-root uses srt algorithm memory management unit mmu uses 48-entry translation lookaside buffer translate virtual addresses r4000 uses 64-bit virtual address implements 40 64-bits 1 tb virtual memory remaining bits checked ensure contain zero r4000 uses 36-bit physical address thus able address 64 gb physical memory r4000 sc mc configurations supports external secondary cache capacity 128 kb 4 mb cache accessed via dedicated 128-bit data bus secondary cache configured either unified cache split instruction data cache latter configuration cache capacity 128 kb 2 mb secondary cache physically indexed physically tagged programmable line size 128 256 512 1,024 bytes cache controller on-die cache built standard static random access memory sram data tag buses ecc-protected r4000 uses 64-bit system bus called sysad bus sysad bus address data multiplexed bus used set wires transfer data addresses reduces bandwidth also less expensive providing separate address bus requires pins increases complexity system sysad bus configured operate half third quarter internal clock frequency sysad bus generates clock signal dividing operating frequency r4000 contains 1.2 million transistors designed 1.0 µm two-layer metal complementary metal–oxide–semiconductor cmos process mips fabless company r4000 fabricated partners processes 0.8 µm minimum feature size r4000 generates various clock signals master clock signal generated externally operating frequency r4000 multiplies master clock signal two use on-die phase-locked loop pll r4000pc packaged 179-pin ceramic pin grid array cpga r4000sc r4000mc packaged 447-pin ceramic staggered pin grid array spga pin r4000mc different r4000sc pins unused r4000sc used signals implement cache coherency r4000mc pin-out r4000pc similar pga-packaged r4200 r4600 microprocessors characteristic enables properly designed system use three microprocessors r4400 development r4000 announced early november 1992 samples microprocessor shipped selected customers general availability january 1993 r4400 operates higher clock frequencies 100 133 150 200 250 mhz major improvement r4000 larger primary caches doubled capacity 16 kb 8 kb contained 2.3 million transistors r4400 licensed integrated device technology idt lsi logic nec performance semiconductor siemens ag toshiba idt nec siemens toshiba fabricated marketed microprocessor lsi logic used r4400 custom products performance semiconductor sold logic division cypress semiconductor mips microprocessor products discontinued nec marketed version vr4400 first version 150 mhz part announced november 1992 early versions fabricated 0.6 µm process mid-1995 250 mhz part began sampling fabricated 0.35 µm four-layer-metal process nec also produced mr4401 ceramic multi-chip module mcm contained vr4400sc ten 1 mbit sram chips implemented 1 mb secondary cache mcm pin-compatible r4x00pc first version 150 mhz part announced 1994 1995 200 mhz part announced toshiba marketed version tc86r4400 200 mhz part containing 2.3 million transistors measuring 134 mm fabricated 0.3 µm process introduced mid-1994 r4400pc priced 1,600 r4400sc 1,950 r4400mc 2,150 quantities 10,000 r4400 used r4000 r4400 require external core logic interface system commercially available proprietary core logic developed microprocessors proprietary designs developed system vendors sgi use systems commercial chipsets developed acer mips microprocessors fabricators nec toshiba acer developed pica chipset toshiba developed tiger shark chipset adapted sysad bus i486-compatible system bus
node13:Wikipedia entry. Entry name: Fluent_Design_System. Entry content: fluent design system fluent design system codenamed project neon officially unveiled microsoft fluent design system design language developed 2017 microsoft fluent design revamp microsoft design language 2 includes guidelines designs interactions used within software designed windows 10 devices platforms system based five key components light depth motion material scale new design language includes prominent use motion depth translucency effects transition fluent long-term project preliminary aspects design particularly acrylic translucency effects reveal effects buttons incorporated windows 10 particularly within fall creators update released october 2017 well update xbox one system software released alongside aspects fluent introduced windows time purpose light draw attention illuminate information upon hovering reveal highlight illuminates nearby hidden borders objects hamburger navigation menu lists buttons upon selection clicking tapping white circular illumination effect quickly appears additionally windows holographic environment rounded white pointer exists 6 november 2017 microsoft employee david haz stated plans apply reveal highlight taskbar exist—but occurred focusable items border glow via focus visual addition depth utilizes z-axis allows content differentiation via layering depth presented via drop shadows z-depth layering motion establishes relationship ui elements provides continuity experience list animations inserting removing items collection connected animations item transitions content change element appears continue flying across app used portion content page change fade-in fade-out bring dismiss items view parallax moves objects different rates background moves slower content example list scroll faster background image creating depth effect addition motion item pressed momentarily recedes background restores original position examples press feedback include start menu live tiles action center quick actions microsoft edge address bar buttons acrylic material creates translucent blurred effect slight noise effect visual hierarchy created using different opacities example app primary content surfaces often opaque exception widgets lightweight apps calculator secondary pane 80 background acrylic tertiary pane 60 background acrylic background acrylic blurs items behind active acrylic material in-app acrylic blurs content within app acrylic disabled specific window app longer selected types acrylic disabled system-wide transparency disabled battery saver mode enabled low-end hardware background acrylic disabled window de-selected windows 10 mobile hololens tablet mode apps scale across different form factors display sizes 0d 3d elements adapt screen size available across multiple dimensions conscious controls also categorized within scale e.g scrollbars inputs adapt different methods invocation fluent key principles blocks light depth motion material scale turn away flat concept metro defined preserving clean look feel metro introduced fluent renews visuals aero design approach introduced windows vista windows 7 including blurred translucency parallax animated patterns drop shadow highlight effects following mouse pointer input gesture movements faux materials metro dumped
node14:Wikipedia entry. Entry name: Compaq_Presario_R3000. Entry content: compaq presario r3000 compaq presario r3000 line series laptops designed built hewlett-packard corporation could shipped microsoft windows 98 2000 xp series used intel amd processors could 256 mb 256 mib 512 mb ram reserved graphics card ati mobility radeon 9000/9100 igp integrated graphics processor board sound card made analog devices also board connected jbl pro speakers ports computer usb ieee 1394 firewire headphone microphone s-video monitor parallel also rj45 connector network cable phone line jack one special series expansion port hp expansion dock type port found hp notebooks models series broadcom wifi adapters computer disk reader writer capable playing dvds burning cds downloading software disk computer encased black silver plastic shell weighs ten pounds two cooling fans mounted keyboard
node15:Wikipedia entry. Entry name: Superscalar_processor. Entry content: superscalar processor superscalar processor cpu implements form parallelism called instruction-level parallelism within single processor contrast scalar processor execute one single instruction per clock cycle superscalar processor execute one instruction clock cycle simultaneously dispatching multiple instructions different execution units processor therefore allows throughput number instructions executed unit time would otherwise possible given clock rate execution unit separate processor core processor multi-core processor execution resource within single cpu arithmetic logic unit flynn taxonomy single-core superscalar processor classified sisd processor single instruction stream single data stream though single-core superscalar processor supports short vector operations could classified simd single instruction stream multiple data streams multi-core superscalar processor classified mimd processor multiple instruction streams multiple data streams superscalar cpu typically also pipelined superscalar pipelining execution considered different performance enhancement techniques former executes multiple instructions parallel using multiple execution units whereas latter executes multiple instructions execution unit parallel dividing execution unit different phases superscalar technique traditionally associated several identifying characteristics within given cpu seymour cray cdc 6600 1966 often mentioned first superscalar design 1967 ibm system/360 model 91 another superscalar mainframe motorola mc88100 1988 intel i960ca 1989 amd 29000-series 29050 1990 microprocessors first commercial single-chip superscalar microprocessors risc microprocessors like first superscalar execution risc architectures free transistors die area used include multiple execution units risc designs faster cisc designs 1980s 1990s except cpus used low-power applications embedded systems battery-powered devices essentially general-purpose cpus developed since 1998 superscalar p5 pentium first superscalar x86 processor nx586 p6 pentium pro amd k5 among first designs decode x86-instructions asynchronously dynamic microcode-like micro-op sequences prior actual execution superscalar microarchitecture opened dynamic scheduling buffered partial instructions enabled parallelism extracted compared rigid methods used simpler p5 pentium also simplified speculative execution allowed higher clock frequencies compared designs advanced cyrix 6x86 simplest processors scalar processors instruction executed scalar processor typically manipulates one two data items time contrast instruction executed vector processor operates simultaneously many data items analogy difference scalar vector arithmetic superscalar processor mixture two instruction processes one data item multiple execution units within cpu thus multiple instructions processing separate data items concurrently superscalar cpu design emphasizes improving instruction dispatcher accuracy allowing keep multiple execution units use times become increasingly important number units increased early superscalar cpus would two alus single fpu later design powerpc 970 includes four alus two fpus two simd units dispatcher ineffective keeping units fed instructions performance system better simpler cheaper design superscalar processor usually sustains execution rate excess one instruction per machine cycle merely processing multiple instructions concurrently make architecture superscalar since pipelined multiprocessor multi-core architectures also achieve different methods superscalar cpu dispatcher reads instructions memory decides ones run parallel dispatching one several execution units contained inside single cpu therefore superscalar processor envisioned multiple parallel pipelines processing instructions simultaneously single instruction thread available performance improvement superscalar techniques limited three key areas existing binary executable programs varying degrees intrinsic parallelism cases instructions dependent executed simultaneously cases inter-dependent one instruction impacts either resources results instructions codice_1 run parallel none results depend calculations however instructions codice_2 might runnable parallel depending order instructions complete move units number simultaneously issued instructions increases cost dependency checking increases extremely rapidly exacerbated need check dependencies run time cpu clock rate cost includes additional logic gates required implement checks time delays gates research shows gate cost cases may formula_1 gates delay cost formula_2 formula_3 number instructions processor instruction set formula_4 number simultaneously dispatched instructions even though instruction stream may contain inter-instruction dependencies superscalar cpu must nonetheless check possibility since assurance otherwise failure detect dependency would produce incorrect results matter advanced semiconductor process fast switching speed places practical limit many instructions simultaneously dispatched process advances allow ever greater numbers execution units e.g. alus burden checking instruction dependencies grows rapidly complexity register renaming circuitry mitigate dependencies collectively power consumption complexity gate delay costs limit achievable superscalar speedup roughly eight simultaneously dispatched instructions however even given infinitely fast dependency checking logic otherwise conventional superscalar cpu instruction stream many dependencies would also limit possible speedup thus degree intrinsic parallelism code stream forms second limitation collectively limits drive investigation alternative architectural changes long instruction word vliw explicitly parallel instruction computing epic simultaneous multithreading smt multi-core computing vliw burdensome task dependency checking hardware logic run time removed delegated compiler explicitly parallel instruction computing epic like vliw extra cache prefetching instructions simultaneous multithreading smt technique improving overall efficiency superscalar processors smt permits multiple independent threads execution better utilize resources provided modern processor architectures superscalar processors differ multi-core processors several execution units entire processors single processor composed finer-grained execution units alu integer multiplier integer shifter fpu etc may multiple versions execution unit enable execution many instructions parallel differs multi-core processor concurrently processes instructions multiple threads one thread per processing unit called core also differs pipelined processor multiple instructions concurrently various stages execution assembly-line fashion various alternative techniques mutually exclusive—they frequently combined single processor thus multicore cpu possible core independent processor containing multiple parallel pipelines pipeline superscalar processors also include vector capability
node16:Wikipedia entry. Entry name: Very_long_instruction_word. Entry content: long instruction word long instruction word vliw refers instruction set architectures designed exploit instruction level parallelism ilp whereas conventional central processing units cpu processor mostly allow programs specify instructions execute sequence vliw processor allows programs explicitly specify instructions execute parallel design intended allow higher performance without complexity inherent designs traditional means improve performance processors include dividing instructions substeps instructions executed partly time termed pipelining dispatching individual instructions executed independently different parts processor superscalar architectures even executing instructions order different program out-of-order execution methods complicate hardware larger circuits higher cost energy use processor must make decisions internally methods work contrast vliw method depends programs providing decisions regarding instructions execute simultaneously resolve conflicts practical matter means compiler software used create final programs becomes far complex hardware simpler many means parallelism processor executes every instruction one i.e. non-pipelined scalar architecture may use processor resources inefficiently yielding potential poor performance performance improved executing different substeps sequential instructions simultaneously termed pipelining even executing multiple instructions entirely simultaneously superscalar architectures improvement achieved executing instructions order different occur program termed out-of-order execution three methods raise hardware complexity executing operations parallel processor must verify instructions interdependencies example first instruction result used second instruction input execute time second instruction execute first modern out-of-order processors increased hardware resources schedule instructions determine interdependencies contrast vliw executes operations parallel based fixed schedule determined programs compiled since determining order execution operations including operations execute simultaneously handled compiler processor need scheduling hardware three methods described require thus vliw cpus offer computing less hardware complexity greater compiler complexity superscalar cpus superscalar designs number execution units invisible instruction set instruction encodes one operation superscalar designs instruction width 32 bits fewer contrast one vliw instruction encodes multiple operations least one operation execution unit device example vliw device five execution units vliw instruction device five operation fields field specifying operation done corresponding execution unit accommodate operation fields vliw instructions usually least 64 bits wide far wider architectures example following instruction super harvard architecture single-chip computer sharc one cycle floating-point multiply floating-point add two autoincrement loads fits one 48-bit instruction codice_1 since earliest days computer architecture cpus added several arithmetic logic units alus run parallel superscalar cpus use hardware decide operations run parallel runtime vliw cpus use software compiler decide operations run parallel advance complexity instruction scheduling moved compiler complexity hardware reduced substantially similar problem occurs result parallelizable instruction used input branch modern cpus guess branch taken even calculation complete load instructions branch architectures even start compute speculatively cpu guesses wrong instructions context need flushed correct ones loaded takes time led increasingly complex instruction-dispatch logic attempts guess correctly simplicity original reduced instruction set computing risc designs eroded vliw lacks logic thus lacks energy use possible design defects negative aspects vliw compiler uses heuristics profile information guess direction branch allows move preschedule operations speculatively branch taken favoring likely path expects branch branch takes unexpected way compiler already generated compensating code discard speculative results preserve program semantics vector processor single instruction multiple data simd cores combined vliw architecture fujitsu fr-v microprocessor increasing throughput speed concept vliw architecture term vliw invented josh fisher research group yale university early 1980s original development trace scheduling compiling method vliw developed graduate student new york university vliw notion prescheduling execution units instruction-level parallelism software well established practice developing horizontal microcode fisher innovations involved developing compiler could target horizontal microcode programs written ordinary programming language realized get good performance target wide-issue machine would necessary find parallelism beyond generally within basic block also developed region scheduling methods identify parallelism beyond basic blocks trace scheduling method involves scheduling likely path basic blocks first inserting compensating code deal speculative motions scheduling second likely trace schedule complete fisher second innovation notion target cpu architecture designed reasonable target compiler compiler architecture vliw processor must codesigned inspired partly difficulty fisher observed yale compiling architectures like floating point systems fps164 complex instruction set computing cisc architecture separated instruction initiation instructions saved result needing complex scheduling algorithms fisher developed set principles characterizing proper vliw design self-draining pipelines wide multi-port register files memory architectures principles made easier compilers emit fast code first vliw compiler described ph.d. thesis john ellis supervised fisher compiler named bulldog yale mascot fisher left yale 1984 found startup company multiflow along cofounders john o'donnell john ruttenberg multiflow produced trace series vliw minisupercomputers shipping first machines 1987 multiflow vliw could issue 28 operations parallel per instruction trace system implemented mix medium-scale integration msi large-scale integration lsi large-scale integration vlsi packaged cabinets technology obsoleted grew cost-effective integrate components processor excluding memory one chip multiflow early catch following wave chip architectures began allow multiple-issue cpus major semiconductor companies recognized value multiflow technology context compiler architecture subsequently licensed firms cydrome company producing vliw numeric processors using emitter-coupled logic ecl integrated circuits timeframe late 1980s company like multiflow failed years one licensees multiflow technology hewlett-packard josh fisher joined multiflow demise bob rau founder cydrome also joined hp cydrome failed two would lead computer architecture research hewlett-packard 1990s along systems time 1989–1990 intel implemented vliw intel i860 first 64-bit microprocessor first processor implement vliw one chip processor could operate simple risc mode vliw mode early 1990s intel introduced i860 risc microprocessor simple chip two modes operation scalar mode vliw mode vliw mode processor always fetched two instructions assumed one integer instruction floating-point i860 vliw mode used extensively embedded digital signal processor dsp applications since application execution datasets simple well ordered predictable allowing designers fully exploit parallel execution advantages enabled vliw vliw mode i860 could maintain floating-point performance range 20-40 double-precision mflops high value time processor running 25-50mhz 1990s hewlett-packard researched problem side effect ongoing work pa-risc processor family found cpu could greatly simplified removing complex dispatch logic cpu placing compiler compilers day far complex 1980s added complexity compiler considered small cost vliw cpus usually made multiple risc-like execution units operate independently contemporary vliws usually four eight main execution units compilers generate initial instruction sequences vliw cpu roughly manner traditional cpus generating sequence risc-like instructions compiler analyzes code dependence relationships resource requirements schedules instructions according constraints process independent instructions scheduled parallel vliws typically represent instructions scheduled parallel longer instruction word incorporates individual instructions results much longer opcode termed long specify executes given cycle examples contemporary vliw cpus include trimedia media processors nxp formerly philips semiconductors super harvard architecture single-chip computer sharc dsp analog devices c6000 digital signal processor dsp family texas instruments st200 family stmicroelectronics based lx architecture designed josh fisher hp lab paolo faraboschi mppa manycore family kalray contemporary vliw cpus mainly successful embedded media processors consumer electronic devices vliw features also added configurable processor cores system-on-a-chip soc designs example tensilica xtensa lx2 processor incorporates technology named flexible length instruction extensions flix allows multi-operation instructions xtensa c/c++ compiler freely intermix 32- 64-bit flix instructions xtensa processor one-operation risc instructions 16 24 bits wide packing multiple operations wide 32- 64-bit instruction word allowing multi-operation instructions intermix shorter risc instructions flix allows soc designers realize vliw performance advantages eliminating code bloat early vliw architectures infineon carmel dsp another vliw processor core intended soc uses similar code density improvement method called configurable long instruction word cliw outside embedded processing markets intel itanium ia-64 explicitly parallel instruction computing epic elbrus 2000 appear examples widely used vliw cpu architectures however epic architecture sometimes distinguished pure vliw architecture since epic advocates full instruction predication rotating register files long instruction word encode non-parallel instruction groups vliws also gained significant consumer penetration graphics processing unit gpu market though nvidia amd since moved risc architectures improve performance non-graphics workloads ati technologies ati advanced micro devices amd terascale microarchitecture graphics processing units gpus vliw microarchitecture december 2015 first shipment pcs based vliw cpu elbrus-4s made russia silicon technology allowed wider implementations execution units built compiled programs earlier generation would run wider implementations encoding binary instructions depended number execution units machine transmeta addressed issue including binary-to-binary software compiler layer termed code morphing crusoe implementation x86 architecture mechanism advertised basically recompile optimize translate x86 opcodes runtime cpu internal machine code thus transmeta chip internally vliw processor effectively decoupled x86 cisc instruction set executes intel itanium architecture among others solved backward-compatibility problem general mechanism within multiple-opcode instructions bit field allocated denote dependency prior vliw instruction within program instruction stream bits set compile time thus relieving hardware calculating dependency information dependency information encoded instruction stream allows wider implementations issue multiple non-dependent vliw instructions parallel per cycle narrower implementations would issue smaller number vliw instructions per cycle another perceived deficiency vliw designs code bloat occurs one execution unit useful work thus must execute operation nop instructions occurs dependencies code instruction pipelines must allowed drain later operations proceed since number transistors chip grown perceived disadvantages vliw diminished importance vliw architectures growing popularity especially embedded system market possible customize processor application system-on-a-chip embedded vliw products available several vendors including fr-v fujitsu bsp15/16 pixelworks st231 stmicroelectronics trimedia nxp semiconductors ceva-x dsp ceva jazz dsp improv systems silicon hive texas instruments tms320 dsp line evolved c6xxx family look like vliw contrast earlier c5xxx family
node17:Wikipedia entry. Entry name: Classic_RISC_pipeline. Entry content: classic risc pipeline history computer hardware early reduced instruction set computer central processing units risc cpus used similar architectural solution called classic risc pipeline cpus mips sparc motorola 88000 later notional cpu dlx invented education classic scalar risc designs fetched tried execute one instruction per cycle main common concept design five-stage execution instruction pipeline operation pipeline stage worked one instruction time stages consisted initial set flip-flops combinational logic operated outputs flip-flops instruction cache machines latency one cycle meaning instruction cache would ready next clock cycle instruction fetch stage 32-bit instruction fetched cache program counter pc register holds address current instruction feeds pc predictor sends program counter pc instruction cache read current instruction time pc predictor predicts address next instruction incrementing pc 4 instructions 4 bytes long prediction always wrong case taken branch jump exception see delayed branches later machines would use complicated accurate algorithms branch prediction branch target prediction guess next instruction address unlike earlier microcoded machines first risc machines microcode fetched instruction cache instruction bits shifted pipeline simple combinational logic pipeline stage could produce control signals datapath directly instruction bits result little decoding done stage traditionally called decode stage consequence lack decoding meant however instruction bits used specifying instruction also leaves fewer bits things like register indices mips sparc dlx instructions two register inputs decode stage two register names identified within instruction two registers named read register file mips design register file 32 entries time register file read instruction issue logic stage determined pipeline ready execute instruction stage issue logic would cause instruction fetch stage decode stage stall stall cycle stages would prevent initial flip-flops accepting new bits instruction decoded branch jump target address branch jump computed parallel reading register file branch condition computed register file read branch taken instruction jump pc predictor first stage assigned branch target rather incremented pc computed architectures made use alu execute stage cost slightly decreased instruction throughput decode stage ended quite lot hardware mips possibility branching two registers equal 32-bit-wide tree ran series register file read making long critical path stage also branch target computation generally required 16 bit add 14 bit incrementer resolving branch decode stage made possible single-cycle branch mispredict penalty since branches often taken thus mispredicted important keep penalty low execute stage actual computation occurs typically stage consists arithmetic logic unit also bit shifter may also include multiple cycle multiplier divider arithmetic logic unit responsible performing boolean operations nand xor xnor also performing integer addition subtraction besides result alu typically provides status bits whether result 0 overflow occurred bit shifter responsible shift rotations instructions simple risc machines divided three latency classes according type operation data memory needs accessed done stage stage single cycle latency instructions simply results forwarded next stage forwarding ensures one two cycle instructions always write results stage pipeline one write port register file used always available direct mapped virtually tagged data caching simplest far numerous data cache organizations two srams used one storing data storing tags stage single cycle two cycle instructions write results register file hennessy patterson coined term hazard situations instructions pipeline would produce wrong answers structural hazards occur two instructions might attempt use resources time classic risc pipelines avoided hazards replicating hardware particular branch instructions could used alu compute target address branch alu used decode stage purpose alu instruction followed branch would seen instructions attempt use alu simultaneously simple resolve conflict designing specialized branch target adder decode stage data hazards occur instruction scheduled blindly would attempt use data data available register file classic risc pipeline data hazards avoided one two ways bypassing also known operand forwarding suppose cpu executing following piece code instruction fetch decode stages send second instruction one cycle first flow pipeline shown diagram naive pipeline without hazard consideration data hazard progresses follows cycle 3 codice_1 instruction calculates new value codice_2 cycle codice_3 operation decoded value codice_2 fetched register file however codice_1 instruction yet written result codice_2 write-back normally occurs cycle 5 green box therefore value read register file passed alu execute stage codice_3 operation red box incorrect instead must pass data computed codice_1 back execute stage i.e red circle diagram codice_3 operation normally written-back solution problem pair bypass multiplexers multiplexers sit end decode stage flopped outputs inputs alu multiplexer selects decode stage logic compares registers written instructions execute access stages pipeline registers read instruction decode stage cause multiplexers select recent data bypass multiplexers make possible pipeline execute simple instructions latency alu multiplexer flip-flop without multiplexers latency writing reading register file would included latency instructions note data passed forward time data bypassed back earlier stage processed yet case data passed forward time codice_3 ready register alu codice_1 already computed however consider following instructions data read address codice_13 n't present data cache memory access stage codice_14 instruction time codice_3 instruction already alu resolve would require data memory passed backwards time input alu possible solution delay codice_3 instruction one cycle data hazard detected decode stage fetch decode stages stalled prevented flopping inputs stay state cycle execute access write-back stages downstream see extra no-operation instruction nop inserted codice_14 codice_3 instructions nop termed pipeline bubble since floats pipeline like air bubble occupying resources producing useful results hardware detect data hazard stall pipeline hazard cleared called pipeline interlock pipeline interlock used data forwarding however first example codice_1 followed codice_3 second example codice_14 followed codice_3 solved stalling first stage three cycles write-back achieved data register file correct causing correct register value fetched codice_3 decode stage causes quite performance hit processor spends lot time processing nothing clock speeds increased less forwarding logic wait data hazard detected quite easily program machine code written compiler stanford mips machine relied compiler add nop instructions case rather circuitry detect taxingly stall first two pipeline stages hence name mips microprocessor without interlocked pipeline stages turned extra nop instructions added compiler expanded program binaries enough instruction cache hit rate reduced stall hardware although expensive put back later designs improve instruction cache hit rate point acronym longer made sense control hazards caused conditional unconditional branching classic risc pipeline resolves branches decode stage means branch resolution recurrence two cycles long three implications four schemes solve performance problem branches delayed branches controversial first semantics complicated delayed branch specifies jump new location happens next instruction next instruction one unavoidably loaded instruction cache branch delayed branches criticized poor short-term choice isa design suppose 32-bit risc processes add instruction adds two large numbers result fit 32 bits happens simplest solution provided architectures wrapping arithmetic numbers greater maximum possible encoded value significant bits chopped fit usual integer number system 3000000000+3000000000=6000000000 unsigned 32 bit wrapping arithmetic 3000000000+3000000000=1705032704 6000000000 mod 2^32 may seem terribly useful largest benefit wrapping arithmetic every operation well defined result programmer especially programming language supporting large integers e.g lisp scheme may want wrapping arithmetic architectures e.g mips define special addition operations branch special locations overflow rather wrapping result software target location responsible fixing problem special branch called exception exceptions differ regular branches target address specified instruction branch decision dependent outcome instruction common kind software-visible exception one classic risc machines tlb miss see virtual memory exceptions different branches jumps control flow changes resolved decode stage exceptions resolved writeback stage exception detected following instructions earlier pipeline marked invalid flow end pipe results discarded program counter set address special exception handler special registers written exception location cause make easy fast software fix problem restart program cpu must take precise exception precise exception means instructions excepting instruction executed excepting instruction everything afterwards executed take precise exceptions cpu must commit changes software visible state program order in-order commit happens naturally classic risc pipeline instructions write results register file writeback stage writes automatically happen program order store instructions however write results store data queue access stage store instruction takes exception store data queue entry invalidated written cache data sram later occasionally either data instruction cache n't contain required datum instruction cases cpu must suspend operation cache filled necessary data must resume execution problem filling cache required data potentially writing back memory evicted cache line specific pipeline organization discussed two strategies handle suspend/resume problem first global stall signal signal activated prevents instructions advancing pipeline generally gating clock flip-flops start stage disadvantage strategy large number flip flops global stall signal takes long time propagate since machine generally stall cycle identifies condition requiring stall stall signal becomes speed-limiting critical path another strategy handle suspend/resume reuse exception logic machine takes exception offending instruction instructions invalidated cache filled necessary data instruction caused cache miss restarts expedite data cache miss handling instruction restarted access cycle happens one cycle data cache filled
node18:Wikipedia entry. Entry name: Branch_predictor. Entry content: branch predictor computer architecture branch predictor digital circuit tries guess way branch e.g if–then–else structure go known definitively purpose branch predictor improve flow instruction pipeline branch predictors play critical role achieving high effective performance many modern pipelined microprocessor architectures x86 two-way branching usually implemented conditional jump instruction conditional jump either taken continue execution first branch code follows immediately conditional jump taken jump different place program memory second branch code stored known certain whether conditional jump taken taken condition calculated conditional jump passed execution stage instruction pipeline see fig 1 without branch prediction processor would wait conditional jump instruction passed execute stage next instruction enter fetch stage pipeline branch predictor attempts avoid waste time trying guess whether conditional jump likely taken taken branch guessed likely fetched speculatively executed later detected guess wrong speculatively executed partially executed instructions discarded pipeline starts correct branch incurring delay time wasted case branch misprediction equal number stages pipeline fetch stage execute stage modern microprocessors tend quite long pipelines misprediction delay 10 20 clock cycles result making pipeline longer increases need advanced branch predictor first time conditional jump instruction encountered much information base prediction branch predictor keeps records whether branches taken taken encounters conditional jump seen several times base prediction history branch predictor may example recognize conditional jump taken often taken every second time branch prediction branch target prediction branch prediction attempts guess whether conditional jump taken branch target prediction attempts guess target taken conditional unconditional jump computed decoding executing instruction branch prediction branch target prediction often combined circuitry static prediction simplest branch prediction technique rely information dynamic history code executing instead predicts outcome branch based solely branch instruction early implementations sparc mips two first commercial risc architectures used single-direction static branch prediction always predict conditional jump taken always fetch next sequential instruction branch jump evaluated found taken instruction pointer get set non-sequential address cpus evaluate branches decode stage single cycle instruction fetch result branch target recurrence two cycles long machine always fetches instruction immediately taken branch architectures define branch delay slots order utilize fetched instructions advanced form static prediction presumes backward branches taken forward branches backward branch one target address lower address technique help prediction accuracy loops usually backward-pointing branches taken often taken processors allow branch prediction hints inserted code tell whether static prediction taken taken intel pentium 4 accepts branch prediction hints feature abandoned later intel processors static prediction used fall-back technique processors dynamic branch prediction dynamic predictors sufficient information use motorola mpc7450 g4e intel pentium 4 use technique fall-back static prediction decisions made compile time execution program dynamic branch prediction uses information taken taken branches gathered run-time predict outcome branch using random pseudorandom bit pure guess would guarantee every branch 50 correct prediction rate improved worsened reordering instructions simplest static prediction assume take compilers reorder instructions get better 50 correct prediction also would make timing much nondeterministic superscalar processors mips r8000 alpha 21264 alpha 21464 ev8 fetch line instructions pointer next line next-line predictor handles branch target prediction well branch direction prediction next-line predictor points aligned groups 2 4 8 instructions branch target usually first instruction fetched initial instructions fetched wasted assuming simplicity uniform distribution branch targets 0.5 1.5 3.5 instructions fetched discarded respectively since branch generally last instruction aligned group instructions taken branch delay slot discarded assuming uniform distribution branch instruction placements 0.5 1.5 3.5 instructions fetched discarded discarded instructions branch destination lines add nearly complete fetch cycle even single-cycle next-line predictor 1-bit saturating counter essentially flip-flop records last outcome branch simple version dynamic branch predictor possible although accurate 2-bit saturating counter state machine four states branch evaluated corresponding state machine updated branches evaluated taken change state toward strongly taken branches evaluated taken change state toward strongly taken advantage two-bit counter scheme one-bit scheme conditional jump deviate twice done past prediction changes example loop-closing conditional jump mispredicted rather twice original non-mmx intel pentium processor uses saturating counter though imperfect implementation spec'89 benchmarks large bimodal predictors saturate 93.5 correct every branch maps unique counter predictor table indexed instruction address bits processor fetch prediction every instruction instruction decoded two-level branch predictor also referred correlation-based branch predictor uses two-dimensional table counters also called pattern history table table entries two-bit counters codice_1 statement executed three times decision made third execution might depend upon whether previous two taken scenarios two-level adaptive predictor works efficiently saturation counter conditional jumps taken every second time regularly recurring pattern predicted well saturating counter two-level adaptive predictor remembers history last n occurrences branch uses one saturating counter possible 2 history patterns method illustrated figure 3 consider example n 2 means last two occurrences branch stored two-bit shift register branch history register four different binary values 00 01 10 11 zero means taken one means taken pattern history table contains four entries per branch one 2 4 possible branch histories entry table contains two-bit saturating counter type figure 2 branch branch history register used choosing four saturating counters use history 00 first counter used history 11 last four counters used assume example conditional jump taken every third time branch sequence 001001001 ... case entry number 00 pattern history table go state strongly taken indicating two zeroes comes one entry number 01 go state strongly taken indicating 01 comes zero case entry number 10 entry number 11 never used never two consecutive ones general rule two-level adaptive predictor n-bit history predict repetitive sequence period n-bit sub-sequences different advantage two-level adaptive predictor quickly learn predict arbitrary repetitive pattern method invented t.-y yeh yale patt university michigan since initial publication 1991 method become popular variants prediction method used modern microprocessors local branch predictor separate history buffer conditional jump instruction may use two-level adaptive predictor history buffer separate conditional jump instruction pattern history table may separate well may shared conditional jumps intel pentium mmx pentium ii pentium iii local branch predictors local 4-bit history local pattern history table 16 entries conditional jump spec'89 benchmarks large local predictors saturate 97.1 correct global branch predictor keep separate history record conditional jump instead keeps shared history conditional jumps advantage shared history correlation different conditional jumps part making predictions disadvantage history diluted irrelevant information different conditional jumps uncorrelated history buffer may include bits branch many branches may use two-level adaptive predictor scheme better saturating counter scheme large table sizes rarely good local prediction history buffer must longer order make good prediction size pattern history table grows exponentially size history buffer hence big pattern history table must shared among conditional jumps two-level adaptive predictor globally shared history buffer pattern history table called gshare predictor xors global history branch pc gselect concatenates global branch prediction used amd processors intel pentium core core 2 silvermont-based atom processors alloyed branch predictor combines local global prediction principles concatenating local global branch histories possibly bits program counter well tests indicate via nano processor may using technique agree predictor two-level adaptive predictor globally shared history buffer pattern history table additional local saturating counter outputs local global predictors xored give final prediction purpose reduce contentions pattern history table two branches opposite prediction happen share entry pattern history table agree predictor used first version intel pentium 4 later abandoned hybrid predictor also called combined predictor implements one prediction mechanism final prediction based either meta-predictor remembers predictors made best predictions past majority vote function based odd number different predictors scott mcfarling proposed combined branch prediction 1993 paper spec'89 benchmarks predictor good local predictor predictors like gshare use multiple table entries track behavior particular branch multiplication entries makes much likely two branches map table entry situation called aliasing turn makes much likely prediction accuracy suffer branches multiple predictors beneficial arrange predictor different aliasing patterns likely least one predictor aliasing combined predictors different indexing functions different predictors called gskew predictors analogous skewed associative caches used data instruction caching conditional jump controls loop best predicted special loop predictor conditional jump bottom loop repeats n times taken n-1 times taken conditional jump placed top loop taken n-1 times taken conditional jump goes many times one way way detected loop behavior conditional jump predicted easily simple counter loop predictor part hybrid predictor meta-predictor detects whether conditional jump loop behavior indirect jump instruction choose among two branches processors specialized indirect branch predictors newer processors intel amd predict indirect branches using two-level adaptive predictor kind instruction contributes one bit history buffer zec12 later z/architecture processors ibm support instruction preload branch predictor entry given instruction branch target address constructed adding contents general-purpose register immediate displacement value processors without mechanism simply predict indirect jump go target last time function normally return called return instruction indirect jump reads target address call stack many microprocessors separate prediction mechanism return instructions mechanism based so-called return stack buffer local mirror call stack size return stack buffer typically 4 16 entries trade-off fast branch prediction good branch prediction sometimes dealt two branch predictors first branch predictor fast simple second branch predictor slower complicated bigger tables override possibly wrong prediction made first predictor alpha 21264 alpha ev8 microprocessors used fast single-cycle next-line predictor handle branch target recurrence provide simple fast branch prediction next-line predictor inaccurate branch resolution recurrence takes long cores two-cycle secondary branch predictors override prediction next-line predictor cost single lost fetch cycle intel core i7 two branch target buffers possibly two branch predictors machine learning branch prediction using lvq multi-layer perceptrons called neural branch prediction proposed lucian vintan lucian blaga university sibiu one year later developed perceptron branch predictor neural branch predictor research developed much daniel jimenez 2001 first perceptron predictor presented feasible implement hardware first commercial implementation perceptron branch predictor amd piledriver microarchitecture main advantage neural predictor ability exploit long histories requiring linear resource growth classical predictors require exponential resource growth jimenez reports global improvement 5.7 mcfarling-style hybrid predictor also used gshare/perceptron overriding hybrid predictors main disadvantage perceptron predictor high latency even taking advantage high-speed arithmetic tricks computation latency relatively high compared clock period many modern microarchitectures order reduce prediction latency jimenez proposed 2003 fast-path neural predictor perceptron predictor chooses weights according current branch path rather according branch pc many researchers developed concept a. seznec m. monchiero d. tarjan k. skadron v. desmet akkary et al. k. aasaraai michael black etc state-of-the-art branch predictors using perceptron predictor see intel championship branch prediction competition intel already implements idea one ia-64 simulators 2003 amd ryzen multi-core processor infinity fabric samsung exynos processor include perceptron based neural branch predictor ibm 7030 stretch designed late 1950s pre-executes unconditional branches conditional branches depended index registers conditional branches first two production models implemented predict untaken subsequent models changed implement predictions based current values indicator bits corresponding today condition codes stretch designers considered static hint bits branch instructions early project decided misprediction recovery provided lookahead unit stretch part stretch reputation less-than-stellar performance blamed time required misprediction recovery subsequent ibm large computer designs use branch prediction speculative execution ibm 3090 1985 two-bit predictors introduced tom mcwilliams curt widdoes 1977 lawrence livermore national lab s-1 supercomputer independently jim smith 1979 cdc microprogrammed processors popular 1960s 1980s beyond took multiple cycles per instruction generally require branch prediction however addition ibm 3090 several examples microprogrammed designs incorporated branch prediction burroughs b4900 microprogrammed cobol machine released around 1982 pipelined used branch prediction b4900 branch prediction history state stored back in-memory instructions program execution b4900 implements 4-state branch prediction using 4 semantically equivalent branch opcodes represent branch operator type opcode used indicated history particular branch instruction hardware determines branch prediction state particular branch needs updated rewrites opcode semantically equivalent opcode hinted proper history scheme obtains 93 hit rate others granted scheme vax 9000 announced 1989 microprogrammed pipelined performs branch prediction first commercial risc processors mips r2000 r3000 earlier sparc processors trivial not-taken branch prediction use branch delay slots fetched one instruction per cycle execute in-order performance loss later r4000 uses trivial not-taken branch prediction loses two cycles taken branch branch resolution recurrence four cycles long branch prediction became important introduction pipelined superscalar processors like intel pentium dec alpha 21064 mips r8000 ibm power series processors rely one-bit simple bimodal predictors dec alpha 21264 ev6 uses next-line predictor overridden combined local predictor global predictor combining choice made bimodal predictor amd k8 combined bimodal global predictor combining choice another bimodal predictor processor caches base choice bimodal predictor counters bits l2 cache otherwise used ecc result effectively large base choice predictor tables parity rather ecc instructions l2 cache parity design sufficient since instruction suffering parity error invalidated refetched memory alpha 21464 ev8 cancelled late design minimum branch misprediction penalty 14 cycles use complex fast next-line predictor overridden combined bimodal majority-voting predictor majority vote bimodal two gskew predictors 2018 catastrophic security vulnerability called spectre made public google project zero researchers affecting virtually modern cpus vulnerability involves extracting private data leftover data caches branch mispredictions
node19:Wikipedia entry. Entry name: Macintosh_Quadra_605. Entry content: macintosh quadra 605 macintosh quadra 605 also sold macintosh lc 475 macintosh performa 475 personal computer designed manufactured sold apple computer inc. october 1993 july 1996 model names reflect decision made apple 1993 follow emerging industry trend naming product families target customers quadra business lc education performa home accordingly performa 475 476 sold department stores electronics stores circuit city whereas quadra purchased authorized apple reseller introduced quadra 605 least expensive new computer apple lineup performa 410 introduced time price 1,000 usd included monitor based much older macintosh lc ii 16 mhz 68030 processor quadra 605 reuses macintosh lc iii pizza box form factor minor modifications quadra 605 discontinued october 1994 lc 475 variant continued sold schools july 1996 apple offered direct replacement machines making final macintosh use lc lightweight slim-line form factor apple would release another desktop computer mac mini nearly ten years later models come standard 68lc040 cpu running 25 mhz 4 mb ram board 512 kb vram expandable 1 mb 1 lc iii-style processor direct slot 1 adb 2 serial ports external scsi port manual-inject floppy drive introduced october 18 1993 introduced october 21 1993 central processing unit 25 mhz mc68lc040 32-bit bus 8 kb on-chip l1 cache divided 4 kb data 4 kb instruction cache caches although l2 cache possible via lc pds card 68lc040 replaced 68040 includes onboard floating point unit approximately triple speed floating point operations random access memory 4 mb motherboard one 72-pin simm socket 80 ns faster simms official supported maximum ram 36 mb one 32 mb 72-pin simm plus 4 mb motherboard larger simms work—up 128 mb may used limits ram type physical limits might apply side simm facing cpu thicker chips clips simm socket close around automatically possible manually push clips enough hold simm place djmemc memory controller used quadra 605 predecessors quadra/centris 610 quadra/centris 650 quadra 800 recognize simms 32 mb newer memcjr used quadra 605 recognizes larger sizes video video provided one da15f connector compatible vga monitors use adaptor two internal video ram slots take either two 256 kb 80 ns 68-pin vram simms two 512 kb simms installing one 512 kb one 256 kb vram simm garbles display resolutions colors available two vram configurations shown table audio recording possible 11,000 22,000 samples/second filters applied 3.5 khz 7 khz respectively recording floppy drive 1.4 mb superdrive manual-inject hard drive 80 mb 160 mb 230 mb scsi hard drive depending model battery quadra 605s take lithium half-aa cell 3.6 v battery battery drained video start start quadra 605 flat missing battery turned seconds turned second leaves enough charge system capacitors video start power supply 30 watts standard many second-hand machines come replacement psus either third-party apple replacement stripped earlier lc models go 45 watts quadra 605 registered energy star-compliant product weight 8.8 lb 4 kg standard quadra 605 support monitor 35 lb 15.9 kg dimensions 2.9 high x 12.2 wide x 15.3 deep 7.4 cm high x 31 cm wide x 38.8 cm deep quadra 605 contains one lc iii-style 68030-compatible lc processor direct slot mechanically compatible previous models lc pds take 96-pin 114-pin lc pds slot cards true lc pds emulates previous machine 68030 slot due success lc pds earlier macs many expansion options already manufactured apple kept slot type 68040 machines quadra 605 lc pds mostly 68030-compatible expansion cards made specifically '030 processors 68881 68882 fpus work addition utilize apple iie card allows 605 emulate apple iie quadra 605 one scsi bus 50-pin internal connector space one low-profile 3.5 scsi device one 25-pin db25f external connector scsi provided ncr 53c96 controller achieve 6 mb/s internally fast enough drive 4 mb/s externally two serial ports provided quadra 605 one 8-pin mini-din printer port one 9-pin mini-din modem port similar printer port extra pin supply +5 v power adb power supply apple recommends 100 drawn pin quadra 605 like macintoshes manufactured 1999 includes apple desktop bus port use keyboard mouse low-speed low-power peripherals earlier models also contain rom simm socket located left vram simms made slot boards contain solder pads indicating position roms used production machines two surface mount chips located directly behind cpu quadra 605s use 1024 kb rom version 7c quadra 605 compatible apple macintosh processor upgrade card provided 50 mhz powerpc 601 cpu daystar digital sonnet manufactured 100 mhz versions card could also used quadra 605 upgrade cards fitted lc pds expansion slot making slot unavailable expansion cards quadra 605s cuda reset switch used manually reset pram located towards rear motherboard front audio port labeled s1 others include switch instead two solder pads within silkscreened square keyboard power-on key start quadra 605 soft power-on rocker switch back turn quadra 605 pressing power-on key booted selecting shut command finder quadra 605 completed shutdown process prompt operator manually turn quadra 605s reset button programmer button key combinations perform functions reset users hold command control power keys programmer button click users hold command power keys hard crash situations even enough restore system case power switch recourse modified quadra 605 motherboard used basis early apple interactive television box prototypes later prototypes used board design still retained resemblance 605 standard gestalt id 25 mhz quadra 605 94 id logic board quadra 605 shares lc/performa models depends two things jumper j18 located behind hard drive identify computer quadra 605 id 94 25 mhz lc475/performa 47x id 89 25 mhz over-clocking under-clocking motherboard also changes gestalt id list gestalt ids returned various logic board modifications speed reported newer technology clockometer follows standard quadra 605 capable running classic mac os versions 7.1 7.1.1 pro 7.5 7.5.1 7.5.3 7.5.5 7.6 7.6.1 8.0 8.1 powerpc upgrade installed run 8.5 8.5.1 8.6 9.0 9.0.1 9.0.2 9.0.3 9.0.4 9.1 versions system software 7.5 require use system enabler 065 quadra 605 running version system 7.1 over-clocking standard 25 mhz 33 mhz change gestalt id enabler recognize new id under-clocking 20 mhz however change gestalt id one enabler n't recognize compatible system wo n't boot system 7.5 later affected issue
node20:Wikipedia entry. Entry name: PowerPC. Entry content: powerpc powerpc backronym performance optimization enhanced risc – performance computing sometimes abbreviated ppc reduced instruction set computer risc instruction set architecture isa created 1991 apple–ibm–motorola alliance known aim powerpc evolving instruction set since 2006 named power isa old name lives trademark implementations power architecture-based processors powerpc cornerstone aim prep common hardware reference platform initiatives 1990s originally intended personal computers architecture well known used apple power macintosh powerbook imac ibook xserve lines 1994 2006 apple migrated intel x86 since become niche personal computers remains popular embedded high-performance processors use 7th generation video game consoles embedded applications provided array uses addition powerpc cpus still used amigaone third party amigaos 4 personal computers powerpc largely based ibm earlier power instruction set architecture retains high level compatibility architectures remained close enough programs operating systems run care taken preparation newer chips power series use power isa history risc began ibm 801 research project john cocke lead developer developed concepts risc 1975–78 801-based microprocessors used number ibm embedded products eventually becoming 16-register ibm romp processor used ibm rt pc rt pc rapid design implementing risc architecture years 1982–1984 ibm started project build fastest microprocessor market new 32-bit architecture became referred america project throughout development cycle lasted approximately 5–6 years result power instruction set architecture introduced risc system/6000 early 1990 original power microprocessor one first superscalar risc implementations high performance multi-chip design ibm soon realized single-chip microprocessor needed order scale rs/6000 line lower-end high-end machines work began one-chip power microprocessor designated rsc risc single chip early 1991 ibm realized design could potentially become high-volume microprocessor used across industry apple already realized limitations risks dependency upon single cpu vendor time motorola falling behind delivering 68040 cpu furthermore apple conducted research made experimental quad-core cpu design called aquarius convinced company technology leadership future computing risc methodology ibm approached apple goal collaborating development family single-chip microprocessors based power architecture soon apple one motorola largest customers desktop-class microprocessors asked motorola join discussions due long relationship motorola extensive experience manufacturing high-volume microprocessors ibm form second source microprocessors three-way collaboration apple ibm motorola became known aim alliance 1991 powerpc one facet larger alliance among three companies time personal computer industry shipping systems based intel 80386 80486 chips complex instruction set computer cisc architecture development pentium processor well underway powerpc chip one several joint ventures involving three alliance members efforts counter growing microsoft-intel dominance personal computing motorola power looked like unbelievable deal allowed company sell widely tested powerful risc cpu little design cash part also maintained ties important customer apple seemed offer possibility adding ibm might buy smaller versions motorola instead making point motorola already risc design form 88000 poorly market motorola well 68000 family majority funding focused 88000 effort somewhat starved resources 88000 already production however data general shipping 88000 machines apple already 88000 prototype machines running 88000 also achieved number embedded design wins telecom applications new power one-chip version could made bus-compatible hardware level 88000 would allow apple motorola bring machines market far faster since would redesign board architecture result various requirements powerpc performance computing specification differences earlier power instruction set powerpc outlined appendix e manual powerpc isa v.2.02 since 1991 ibm long-standing desire unifying operating system would simultaneously host existing operating systems personalities upon one microkernel 1991 1995 company designed aggressively evangelized would become workplace os primarily targeting powerpc first powerpc products reached market met enthusiasm addition apple ibm motorola computer group offered systems built around processors microsoft released windows nt 3.51 architecture used motorola powerpc servers sun microsystems offered version solaris os ibm ported aix unix workplace os featured new port os/2 intel emulation application compatibility pending successful launch powerpc 620 throughout mid-1990s powerpc processors achieved benchmark test scores matched exceeded fastest x86 cpus ultimately demand new architecture desktop never truly materialized windows os/2 sun customers faced lack application software powerpc almost universally ignored chip ibm workplace os platform thus os/2 powerpc summarily canceled upon first developers release december 1995 due simultaneous buggy launch powerpc 620 powerpc versions solaris windows discontinued brief period market macintosh due apple persistence powerpc gain traction apple performance powerpc bright spot face increased competition windows 95 windows nt-based pcs cancellation workplace os general powerpc platform especially aim common hardware reference platform instead seen hardware-only compromise run many operating systems one time upon single unifying vendor-neutral hardware platform parallel alliance ibm motorola companies development efforts underway internally powerquicc line result work inside motorola 4xx series embedded processors underway inside ibm ibm embedded processor business grew nearly us 100 million revenue attracted hundreds customers toward close decade manufacturing issues began plaguing aim alliance much way motorola consistently pushed back deployments new processors apple vendors first motorola 1990s powerpc 7xx 74xx processors ibm 64-bit powerpc 970 processor 2003 2004 motorola exited chip manufacturing business spinning semiconductor business independent company called freescale semiconductor around time ibm exited 32-bit embedded processor market selling line powerpc products applied micro circuits corporation amcc focusing 64-bit chip designs maintaining commitment powerpc cpus toward game console makers nintendo gamecube wii sony playstation 3 microsoft xbox 360 latter two use 64-bit processors 2005 apple announced would longer use powerpc processors apple macintosh computers favoring intel-produced processors instead citing performance limitations chip future personal computer hardware specifically related heat generation energy usage well inability ibm move 970 processor 3 ghz range ibm-freescale alliance replaced open standards body called power.org power.org operates governance ieee ibm continuing use evolve powerpc processor game consoles freescale semiconductor focusing solely embedded devices ibm continues develop powerpc microprocessor cores use application-specific integrated circuit asic offerings many high volume applications embed powerpc cores powerpc specification handled power.org ibm freescale amcc members powerpc cell power processors jointly marketed power architecture power.org released unified isa combining power powerpc isas new power isa v.2.03 specification new reference platform servers called papr power architecture platform reference ibm power microprocessors implement power isa used ibm ibm power systems running ibm aix linux many powerpc designs named labeled apparent technology generation began g3 internal project name inside aim development would become powerpc 750 family apple popularized term g3 introduced power mac g3 powerbook g3 event 10 november 1997 motorola apple liked moniker used term g4 7400 family introduced 1998 power mac g4 1999 time g4 launched motorola categorized powerpc models former current future according generation adhered even renaming older 603e core g2 motorola g5 project never came fruition name stuck apple reused 970 family launched 2003 even designed built ibm powerpc designed along risc principles allows superscalar implementation versions design exist 32-bit 64-bit implementations starting basic power specification powerpc added instructions present power instruction set deemed complex removed powerpc architecture removed instructions could emulated operating system necessary removed instructions powerpc chips switch endianness via bit msr machine state register second bit provided allow os run different endianness accesses inverted page table hash table functions tlb off-chip storage always done big-endian mode processor starts big-endian mode little-endian mode three lowest-order bits effective address exclusive-ored three bit value selected length operand enough appear fully little-endian normal software operating system see warped view world accesses external chips video network hardware fixing warped view requires motherboard perform unconditional 64-bit byte swap data entering leaving processor endianness thus becomes property motherboard os operates little-endian mode big-endian motherboard must swap bytes undo exclusive-or accessing little-endian chips altivec operations despite 128-bit treated 64-bit allows compatibility little-endian motherboards designed prior altivec interesting side effect implementation program store 64-bit value longest operand format memory one endian mode switch modes read back 64-bit value without seeing change byte order case motherboard switched time mercury systems matrox ran powerpc little-endian mode done powerpc devices serving co-processors pci boards could share data structures host computers based x86 pci x86 little-endian os/2 windows nt powerpc ran processor little-endian mode solaris aix linux ran big endian ibm embedded powerpc chips use per-page endianness bit none previous applies first implementation architecture powerpc 601 released 1992 based rsc implementing hybrid power1 powerpc instructions allowed chip used ibm existing power1-based platforms although also meant slight pain switching 2nd generation pure powerpc designs apple continued work new line macintosh computers based chip eventually released 601-based power macintosh march 14 1994 ibm also full line powerpc based desktops built ready ship unfortunately operating system ibm intended run desktops—microsoft windows nt—was complete early 1993 machines ready marketing accordingly ibm developed animosity toward microsoft ibm decided port os/2 powerpc form workplace os new software platform spent three years 1992 1995 development canceled december 1995 developer release disappointing launch powerpc 620 reason ibm powerpc desktops ship although reference design codenamed sandalbow based powerpc 601 cpu released rs/6000 model byte april 1994 issue included extensive article apple ibm powerpc desktops apple also lacked powerpc based os took different route utilizing portability platform yielded secret star trek project company ported essential pieces mac os operating system powerpc architecture wrote 68k emulator could run 68k based applications parts os rewritten second generation pure includes low end powerpc 603 high end powerpc 604 603 notable due low cost power consumption deliberate design goal motorola part used 603 project build basic core future generations ppc chips apple tried use 603 new laptop design unable due small 8 kib level 1 cache 68000 emulator mac os could fit 8 kib thus slowed computer drastically 603e solved problem 16 kib l1 cache allowed emulator run efficiently 1993 developers ibm essex junction burlington vermont facility started work version powerpc would support intel x86 instruction set directly cpu one several concurrent power architecture projects ibm working chip began known inside ibm media powerpc 615 profitability concerns rumors performance issues switching x86 native powerpc instruction sets resulted project canceled 1995 limited number chips produced in-house testing aside rumors switching process took 5 cycles amount time needed processor empty instruction pipeline microsoft also aided processor demise refusing support powerpc mode first 64-bit implementation powerpc 620 appears seen little use apple n't want buy large die area costly embedded market later slower promised ibm used power3 design instead offering 64-bit small version late-2002 introduction powerpc 970 970 64-bit processor derived power4 server processor create power4 core modified backward-compatible 32-bit powerpc processors vector unit similar altivec extensions motorola 74xx series added ibm rs64 processors family chips implementing amazon variant powerpc architecture processors used rs/6000 as/400 computer families amazon architecture includes proprietary extensions used as/400 power4 later power processors implement amazon architecture replaced rs64 chips rs/6000 as/400 families ibm developed separate product line called 4xx line focused embedded market designs included 401 403 405 440 460 2004 ibm sold 4xx product line applied micro circuits corporation amcc amcc continues develop new high performance products partly based ibm technology along technology developed within amcc products focus variety applications including networking wireless storage printing/imaging industrial automation numerically powerpc mostly found controllers cars automotive market freescale semiconductor initially offered many variations called mpc5xx family mpc555 built variation 601 core called 8xx designed israel msil motorola silicon israel limited 601 core single issue meaning issue one instruction clock cycle add various bits custom hardware allow i/o one chip 2004 next-generation four-digit 55xx devices launched automotive market use newer e200 series powerpc cores networking another area embedded powerpc processors found large numbers msil took quicc engine mc68302 made powerquicc mpc860 famous processor used many cisco edge routers late 1990s variants powerquicc include mpc850 mpc823/mpc823e variants include separate risc microengine called cpm offloads communications processing tasks central processor functions dma follow-on chip family mpc8260 603e-based core different cpm honda also uses powerpc processors asimo 2003 bae systems platform solutions delivered vehicle-management computer f-35 fighter jet platform consists dual powerpcs made freescale triple redundant setup operating systems work powerpc architecture generally divided oriented toward general-purpose powerpc systems oriented toward embedded powerpc systems companies licensed 64-bit power 32-bit powerpc ibm include powerpc processors used number now-discontinued video game consoles power architecture currently used following desktop computers power architecture currently used following embedded applications
node21:Wikipedia entry. Entry name: PowerBook_Duo. Entry content: powerbook duo powerbook duo line small subnotebooks manufactured sold apple computer 1992 1997 compact companion powerbook line improving upon powerbook 100 portability immediate predecessor apple third-smallest laptop duo came seven different models duo 210 230 250 270c 280 280c 2300c 210 230 earliest 2300c final incarnation entire line dropped early 1997 weighing mere slightly smaller sheet paper thick lightest smallest apple powerbooks time remains one apple smallest notebooks ever produced macbook air retina macbook pro retina macbook weigh less though wider deeper considerably thinner duo common original macbook air included one usb 2.0 port one video port requiring adapter one speaker port ability expansion powerbook duo line replaced powerbook 2400 slightly larger size duos still fifth-smallest behind 12-inch powerbook g4 succeeded fourth-smallest although featured much onboard functionality lacked docking ability duo line offered ultraportable design light functional travel expandable via unique docking connector however certain compromises made achieve level portability duo series used 88 standard desktop-sized keyboard criticized difficult type likewise trackball reduced size even used powerbook 100 usable port came standard duo dual printer/modem eia-422 serial port slot expensive optional internal 14.4 express modem provision built-in ethernet somewhat limited configuration meant way move data laptop stock configuration without purchasing additional accessories via relatively slow appletalk connection practical event hard drive problems compensating limitations initial duo offering provided considerably higher ram limit 24 mb compared 100 series 14 mb standard 80 mb hard drive versus 100 40 mb drive debut year duo offered passive matrix display mid-level high-end models contrast high end 100-series line duos shared processors powerbook 170 180 crisp active matrix displays already great demand lower-powered models passive matrix displays following year apple replaced earlier models active matrix display color active matrix display latter becoming de facto standard powerbook line respective duo models easily differentiated display method processor features identical 2xx duos powered either motorola 68030 68lc040 processors ranging 25-33 mhz apple debuted next-generation powerpc processors 1994 took nearly two years first powerpc duo 2300c debut original powerpc 601 like original 68040 produced much heat consumed much power apple use laptop end 1995 efficient powerpc 603e developed featured duo 2300c full-size companion powerbook 5300 series powerpc 603e designed 64-bit bus engineered apple run older 32-bit bus maintain compatibility duo docks led poor system video performance powerbook duos lacked common ports featuring one internal printer/modem serial port optional fax/modem card port place docking ability accomplished via unique 156-pin processor direct slot pds giving docks full access duo central processing unit cpu data buses several dock options offered apple third parties largest expensive dock powerbook duo form factor offered exclusively apple unlike docks port replicators plugged back laptops duo dock pulled laptop inside dock metal plastic case via internal sliding mechanism similar vhs player dock turned powerbook duo full-size ac-powered fully functional desktop computer standard ports like desktop computer dock could physically support heavy high-resolution crt display top duo dock included floppy drive side two nubus expansion slots optional floating-point unit fpu level 2 cache slot vram enable colors higher resolutions space second hard drive original duo dock replaced duo dock ii added aaui networking compatibility newer color-screen powerbook duos replacement lid offered allow use thicker color duos original duo dock dock ii followed duo dock plus identical duo dock ii lacked fpu level 2 cache—which compatible 68lc040-processor duo 280 powerpc-processor duo 2300c laptop lcd display obviously could opened inside dock additional nubus video cards could installed drive three monitors mini dock port expander powerbook duo popularly offered many third-party manufacturers apple attached powerbook duo could plugged various standard desktop devices including scsi apple desktop bus adb serial floppy disk external speakers external display type dock also allowed duo internal lcd battery used third-party contributions mini dock added variety specialized custom options including ethernet connectivity ntsc pal video ports significant difference docks full desktop configuration lack custom pds nubus expansion slots included standard desktop macs shortfall made task-specific third-party dock offerings type dock manufactured apple many third parties gave powerbook duo three extra ports minimal configuration examples include floppy scsi video ethernet docks typically included one adb port well least expensive basic docks type dock allowed duo internal lcd used well could run duo internal battery reduced amount time popular due minimal impact accessories must carried duo offered practical alternative emergency hard disk software situations task-specific needs 2300 last apple product carry vestige snow white design language apple phasing since 1990 drawing heavily upon improvements made original powerbook 140 design duo series continues many styling traits powerbook 100 approximately equivalent size weight addition snow white features duo takes 100 radius curves step along display top front sides also heavily mirrored various docks penlite early tablet computer prototyped apple computer 1993 around time apple newton pda rather complete computer project canceled 1994 due similarity newton penlite based powerbook duo meant tablet-style addition stylus input device designed compatible powerbook duo docks accessories ran standard classic mac os one stylish iconic laptops available time duo widely used advertising film television
node22:Wikipedia entry. Entry name: Windows_NT. Entry content: windows nt windows nt family operating systems produced microsoft first version released july 27 1993 processor-independent multiprocessing multi-user operating system first version windows nt windows nt 3.1 produced workstations server computers intended complement consumer versions windows based ms-dos including windows 1.0 windows 3.1x gradually windows nt family expanded microsoft general-purpose operating system product line personal computers deprecating windows 9x family nt formerly expanded new technology longer carries specific meaning starting windows 2000 nt removed product name included product version string nt first purely 32-bit version windows whereas consumer-oriented counterparts windows 3.1x windows 9x 16-bit/32-bit hybrids multi-architecture operating system initially supported several instruction set architectures including ia-32 mips dec alpha support powerpc itanium x64 arm added later latest versions support x86 specifically ia-32 x64 arm major features windows nt family include windows shell windows api native api active directory group policy hardware abstraction layer ntfs bitlocker windows store windows update hyper-v suggested dave cutler intended initialism wnt play vms incrementing letter one however project originally intended follow-on os/2 referred nt os/2 receiving windows brand one original nt developers mark lucovsky states name taken original target processor—the intel i860 code-named n10 n-ten 1998 question-and-answer session bill gates revealed letters previously expanded new technology longer carry specific meaning letters dropped names releases windows 2000 later though microsoft described product built nt technology main design goal nt hardware software portability various versions nt family operating systems released variety processor architectures initially ia-32 mips dec alpha powerpc itanium x86-64 arm supported later releases idea common code base custom hardware abstraction layer hal platform however support mips alpha powerpc later dropped windows 2000 broad software compatibility achieved support several api personalities including windows api posix os/2 apis – latter two phased starting windows xp partial ms-dos compatibility achieved via integrated dos virtual machine – although feature phased x86-64 architecture nt supported per-object file function role access control lists allowing rich set security permissions applied systems services nt supported windows network protocols inheriting previous os/2 lan manager networking well tcp/ip networking microsoft would implement tcp/ip stack derived first streams-based stack spider systems later rewritten in-house windows nt 3.1 first version windows use 32-bit flat virtual memory addressing 32-bit processors companion product windows 3.1 used segmented addressing switches 16-bit 32-bit addressing pages windows nt 3.1 featured core kernel providing system api running supervisor mode ring 0 x86 referred windows nt kernel mode platforms set user-space environments apis included new win32 environment os/2 1.3 text-mode environment posix environment full preemptive multitasking kernel could interrupt running tasks schedule tasks without relying user programs voluntarily give control cpu windows 3.1 windows applications although ms-dos applications preemptively multitasked windows starting windows/386 notably windows nt 3.x several i/o driver subsystems video printing user-mode subsystems windows nt 4 video server printer spooler subsystems moved kernel mode windows nt first gui strongly influenced programmatically compatible windows 3.1 windows nt 4 interface redesigned match brand new windows 95 moving program manager windows shell design ntfs journaled secure file system created nt windows nt also allows installable file systems starting versions 3.1 nt could installed fat hpfs file systems windows nt introduced driver model windows nt driver model incompatible older driver frameworks windows 2000 windows nt driver model enhanced become windows driver model first introduced windows 98 based nt driver model windows vista added native support windows driver foundation also available windows xp windows server 2003 extent windows 2000 microsoft decided create portable operating system compatible os/2 posix supporting multiprocessing october 1988 development started november 1989 windows nt known os/2 3.0 third version operating system developed jointly microsoft ibm ensure portability initial development targeted intel i860xr risc processor switching mips r3000 late 1989 intel i386 1990 microsoft also continued parallel development dos-based less resource-demanding windows environment resulting release windows 3.0 may 1990 windows 3 eventually successful microsoft decided change primary application programming interface still unreleased nt os/2 known extended os/2 api extended windows api decision caused tension microsoft ibm collaboration ultimately fell apart ibm continued os/2 development alone microsoft continued work newly renamed windows nt though neither operating system would immediately popular microsoft ms-dos windows products windows nt would eventually far successful os/2 microsoft hired group developers digital equipment corporation led dave cutler build windows nt many elements design reflect earlier dec experience cutler vms rsx-11 also unreleased object-based operating system developed dave cutler dec prism team joined selected members disbanded os/2 team including moshe dunie operating system designed run multiple instruction set architectures multiple hardware platforms within architecture platform dependencies largely hidden rest system kernel mode module called hal hardware abstraction layer windows nt kernel mode code distinguishes kernel whose primary purpose implement processor- architecture-dependent functions executive designed modified microkernel windows nt kernel influenced mach microkernel developed carnegie mellon university meet criteria pure microkernel kernel executive linked together single loaded module ntoskrnl.exe outside module little distinction kernel executive routines directly accessible example kernel-mode device drivers api sets windows nt family implemented subsystems atop publicly undocumented native api allowed late adoption windows api win32 subsystem windows nt one earliest operating systems use unicode internally windows nt 3.1 3.51 incorporated program manager file manager windows 3.1x series windows nt 4.0 onwards replaced programs windows explorer including taskbar start menu originally appeared windows 95 first release given version number 3.1 match contemporary 16-bit windows magazines era claimed number also used make version seem reliable .0 release also novell ipx protocol apparently licensed 3.1 versions windows software nt version number generally used marketing purposes still used internally said reflect degree changes core operating system however application compatibility reasons microsoft kept major version number 6 releases following vista changed later 10 windows 10 build number internal identifier used microsoft developers beta testers windows nt written c c++ small amount written assembly language c mostly used kernel code c++ mostly used user-mode code assembly language avoided possible would impede portability order prevent intel x86-specific code slipping operating system developers used developing x86 chips windows nt 3.1 initially developed using non-x86 development systems ported x86 architecture work initially based intel i860-based dazzle system later mips r4000-based jazz platform systems designed internally microsoft windows nt 3.1 released intel x86 pc compatible pc-98 dec alpha arc-compliant mips platforms windows nt 3.51 added support powerpc processor 1995 specifically prep-compliant systems ibm power series desktops/laptops motorola powerstack series despite meetings michael spindler bill gates power macintosh prep compliant power macintosh project failed ship intergraph corporation ported windows nt clipper architecture later announced intention port windows nt 3.51 sun microsystems sparc architecture neither version sold public retail product two windows nt 4.0 variants ia-32 alpha full set service packs available ports done third parties motorola intergraph etc publicly available updates windows nt 4.0 last major release support alpha mips powerpc though development windows 2000 alpha continued august 1999 compaq stopped support windows nt architecture three days later microsoft also canceled alphant program even though alpha nt 5 windows 2000 release reached rc1 status microsoft announced january 5 2011 next major version windows nt family include support arm architecture microsoft demonstrated preliminary version windows version 6.2.7867 running arm-based computer 2011 consumer electronics show eventually led commercial release windows 8-derived windows rt october 26 2012 implementation nt ce windows phone 8 according microsoft common misconception xbox xbox 360 use modified windows 2000 kernel xbox operating system built scratch implements subset windows apis 64-bit versions windows nt originally intended run itanium dec alpha latter used internally microsoft early development 64-bit windows continued time microsoft publicly announced cancelling plans ship 64-bit windows alpha alpha versions windows nt 32-bit windows 2000 supports intel ia-32 32-bit windows xp server 2003 server 2008 server 2008 r2 one edition dedicated itanium-based systems comparison itanium microsoft adopted x64 greater scale every version windows since windows xp dedicated x64 edition x64 editions minimum hardware specification required run release professional workstation version windows nt fairly slow-moving 6.0 vista release requires minimum 15 gb free disk space 10-fold increase free disk space alone previous version
node23:Wikipedia entry. Entry name: MS-Net. Entry content: ms-net ms-net sometimes stylized ms-net early network operating system sold microsoft earliest days local area networking lans ms-net complete networking system microsoft licensed vendors used basis server programs ran ms-dos porting underlying networking hardware adding services top version 1.0 announced 14 august 1984 released along pc/at 2 april 1985 number ms-net products sold late 1980s replaced lan manager 1990 ms-net network interface based ibm netbios protocol definition allowed ported different networking systems relative ease implement entire netbios protocol however small number features required server role one key feature implemented netbios name management routines feature 3rd parties often added back system also supplied program redir.exe allowed transparent file access dos machines ms-net based server several products mid-to-late-1980s based ms-net system ibm pc-net slightly modified version ms-net system typically used token ring ms partnered 3com produce widely used 3+share system running 3com networking stack based xns protocol ethernet well-known systems including banyan vines novell netware use ms-net basis using unix custom os respectively however allow access files via redir.exe ms-net sold short period time ms 3com collaborated replacement known lan manager running os/2 using new server message block standard file transfer 3com version product retained xns-based protocol 3com abandoned server market long ms version remained based netbios supported number underlying protocols hardware lan manager replaced 1993 windows nt 3.1
node24:Wikipedia entry. Entry name: Metro_(design_language). Entry content: metro design language microsoft design language mdl design language created microsoft design language focused typography simplified icons absence clutter increased content chrome ratio content chrome basic geometric shapes early examples mdl principles found encarta 95 msn 2.0 design language evolved windows media center zune formally introduced metro unveiling windows phone 7 since incorporated several company products including xbox 360 system software xbox one windows 8 windows phone outlook.com microsoft design language title became official microsoft representative qi lu referred modern ui design language mixx conference keynote speech according microsoft metro always codename never meant final product news websites attribute change trademark issues microsoft design language 2 mdl2 developed alongside windows 10 later fluent design language extended design language based design principles classic swiss graphic design early glimpses style could seen windows media center windows xp media center edition favored text primary form navigation interface carried later iterations media center 2006 zune refreshed interface using principles microsoft designers decided redesign interface focus clean typography less ui chrome principles new zune ui carried windows phone much drawn windows 8 zune desktop client also redesigned emphasis typography clean design different zune previous portable media center based ui flat colored live tiles introduced design language early windows phones studies microsoft design language 2 mdl2 developed alongside windows 10 version introduced new set widgets including date pickers toggles switches reduced border thicknesses user interface elements microsoft design team cites inspiration design language signs commonly found public transport systems design language places emphasis good typography large text catches eye microsoft sees design language sleek quick modern refresh icon-based interfaces windows android ios instances use fonts based segoe font family designed steve matteson agfa monotype licensed microsoft zune microsoft created custom version called zegoe ui windows phone microsoft created segoe wp font family fonts mostly differ minor details obvious differences segoe ui segoe wp apparent respective numerical characters segoe ui font windows 8 obvious differences – similar segoe wp characters notable typographic changes included 1 2 4 5 7 8 q. microsoft designed design language specifically consolidate groups common tasks speed usage achieves excluding superfluous graphics instead relying actual content function main ui resulting interfaces favor larger hubs smaller buttons often feature laterally scrolling canvases page titles usually large consequently also take advantage lateral scrolling animation plays large part microsoft recommends consistent acknowledgement transitions user interactions presses swipes form natural animation motion aims give user impression alive responsive ui added sense depth early response language generally positive review zune hd engadget said microsoft continues push towards big big typography providing sophisticated neatly designed layout almost functional attractive cnet complimented design language saying bit daring informal tight sterile icon grids rolodex menus iphone ipod touch idea 2011 ceremony industrial designers society america idsa gave windows phone 7 uses ui gold interactive award people choice award best show award isabel ancona user experience consultant idsa explained windows phone criticism particularly focused use caps text rise internet usage critics compared computer program shouting user journalist lee hutchinson described microsoft use practice macos version onenote terrible claiming cursed insane non-standard application window menus caps ’ much violate os x ’ design conventions take behind shed pour gasoline set fire arrival windows 8 operating system user interface use design language drew generally negative critical responses 25 august 2012 peter bright ars technica reviewed preview release windows 8 dedicating first part review comparison start menu designs used windows 8 windows 7 recounting pros cons peter bright concluded start menu windows 8 dubbed start screen though devoid problems clear winner however concluded windows 8 user interface frustrating various aspects user interface work well together woody leonhard even critical said user standpoint windows 8 failure – awkward mishmash pulls user two directions addition changes start menu windows 8 takes modal approach use full-screen apps steer away reliance icon-based desktop interface however microsoft shifted focus away multitasking business productivity august 2012 verge announced internal memorandum sent developers microsoft employees announcing decision discontinue use term metro discussions important european partner working replacement term technology news outlets ars technica techradar cnet engadget network world mainstream press bits blog new york times company bbc news online published partner mentioned memo could one microsoft retail partners german company metro ag name potential infringe metro trademark microsoft later stated reason de-emphasizing name related current litigation metro internal project codename despite heavily promoted brand public september 2012 microsoft design language adopted official name design style term used microsoft developer network documentation 2012 build conference refer design language related change microsoft dropped use phrase metro-style apps refer mobile apps distributed via windows store
node25:Wikipedia entry. Entry name: Zephyr_(protocol). Entry content: zephyr protocol created mit part project athena zephyr designed instant messaging protocol application-suite heavy unix background using one thing well philosophy unix made several separate programs working together make complete messaging system zephyr irc first widely used ip-based instant-messaging systems zephyr invention ciarán anthony dellafera time employee digital equipment corporation visiting research scientist project athena design originated solution reverse remote procedure call rpc problem service providers servers client–server system locate communicate service users initial concept emerged conversations ciarán michael r. gretzinger another systems engineer project athena early 1986 mid late 1986 ciarán distilled problem two specific issues ability locate users distributed computing environment known today presence detection ability deliver scalable light-weight authentic messages distributed computing environment zephyr development team mark w. eichin robert s. french david c. jedlinsky john t. kohl william e. sommerfeld responsible creation initial code-base subsequent releases issued throughout late 1980s zephyr still use today university environments carnegie mellon iowa state university maryland college park brown university mit largely replaced modern popular instant messenger systems xmpp mit currently operates zephyr xmpp zephyr uses udp datagrams sent ports 2102 2103 2104 incompatible routers nat reports internal ip address returning datagrams incorrectly routed sites deployed zephyr using kerberos 4 authentication exclusively though late 2007 sites including iowa state deployed zephyr using kerberos 5
node26:Wikipedia entry. Entry name: Silicon_Graphics. Entry content: silicon graphics silicon graphics inc. later rebranded sgi historically known silicon graphics computer systems sgcs american high-performance computing manufacturer producing computer hardware software founded mountain view california november 1981 jim clark initial market 3d graphics computer workstations products strategies market positions developed significantly time early systems based geometry engine clark marc hannah developed stanford university derived clark broader background computer graphics geometry engine first very-large-scale integration vlsi implementation geometry pipeline specialized hardware accelerated inner-loop geometric computations needed display three-dimensional images much history company focused 3d imaging major supplier hardware software market silicon graphics reincorporated delaware corporation january 1990 mid late-1990s rapidly improving performance commodity wintel machines began erode sgi stronghold 3d market porting maya platforms major event process sgi made several attempts address including disastrous move existing mips platforms intel itanium well introducing linux-based intel ia-32 based workstations servers failed market mid-2000s company repositioned supercomputer vendor move also failed april 1 2009 sgi filed chapter 11 bankruptcy protection announced would sell substantially assets rackable systems deal finalized may 11 2009 rackable assuming name silicon graphics international remains silicon graphics inc. became graphics properties holdings inc. james h. clark left position electrical engineering associate professor stanford university found sgi 1982 along group seven graduate students research staff stanford kurt akeley david j brown tom davis rocky rhodes marc hannah herb kuta mark grossman along abbey silverstone others ed mccracken ceo silicon graphics 1984 1997 years sgi grew annual revenues 5.4 million 3.7 billion addition 3d graphic capabilities pcs ability clusters linux- bsd-based pcs take many tasks larger sgi servers ate sgi core markets porting maya linux mac os x microsoft windows eroded low end sgi product line response challenges faced marketplace falling share price ed mccracken fired sgi brought richard belluzzo replace belluzzo leadership number initiatives taken considered accelerated corporate decline one initiative trying sell workstations running windows nt called visual workstations instead ones ran irix company version unix put company even direct competition likes dell making difficult justify price premium product line unsuccessful abandoned years later sgi premature announcement migration mips itanium abortive ventures ia-32 architecture systems visual workstation line ex-intergraph zx10 range sgi 1000-series linux servers damaged sgi credibility market 1999 attempt clarify current market position graphics company silicon graphics inc. changed corporate identity sgi although legal name unchanged time sgi announced new logo consisting letters sgi proprietary font called sgi created branding design consulting firm landor associates collaboration designer joe stitzlein sgi continued use silicon graphics name workstation product line later re-adopted cube logo workstation models november 2005 sgi announced delisted new york stock exchange common stock fallen minimum share price listing exchange sgi market capitalization dwindled peak seven billion dollars 1995 120 million time delisting february 2006 sgi noted could run cash end year mid-2005 sgi hired alix partners advise returning profitability received new line credit sgi announced postponing scheduled annual december stockholders meeting march 2006 proposed reverse stock split deal de-listing new york stock exchange january 2006 sgi hired dennis mckenna new ceo chairman board directors mr. mckenna succeeded robert bishop remained vice chairman board directors may 8 2006 sgi announced filed chapter 11 bankruptcy protection u.s. subsidiaries part plan reduce debt 250 million two days later u.s. bankruptcy court approved first day motions use 70 million financing facility provided group bondholders foreign subsidiaries unaffected september 6 2006 sgi announced end development mips/irix line irix operating system production would end december 29 last orders would fulfilled march 2007 support products would end december 2013 sgi emerged bankruptcy protection october 17 2006 stock symbol point sgid.pk canceled new stock issued nasdaq exchange symbol sgic new stock distributed company creditors sgid common stockholders left worthless shares end year company moved headquarters mountain view sunnyvale earlier north shoreline headquarters occupied computer history museum newer amphitheater parkway headquarters sold google locations award-winning designs studios architecture april 2008 sgi re-entered visualization market sgi virtu range visualization servers workstations re-badged systems boxx technologies based intel xeon amd opteron processors nvidia quadro graphics chipsets running red hat enterprise linux suse linux enterprise server windows compute cluster server december 2008 sgi received delisting notification nasdaq market value minimum 35 million requirement 10 consecutive trading days also meet nasdaq alternative requirements minimum stockholders equity 2.5 million annual net income continuing operations 500,000 april 1 2009 sgi filed chapter 11 announced would sell substantially assets rackable systems 25 million sale ultimately 42.5 million finalized may 11 2009 time rackable announced adoption silicon graphics international global name brand bankruptcy court scheduled continuing proceedings hearings june 3 24 2009 july 22 2009 rackable acquisition vizworld magazine published series six articles chronicle downfall sgi hewlett packard enterprise acquired sgi november 2016 allowed hpe place top500 nasa ames research center pleiades sgi ice supercomputer portfolio sgi continuous presence high performance compute silicon graphics inc. second bankruptcy phase renamed graphics properties holdings inc. gphi june 2009 2010 gphi announced significant favorable ruling litigation ati technologies amd june 2010 following patent lawsuit originally filed silicon graphics inc. era following 2008 appeal ati validity '327 silicon graphics inc voluntary dismissal '376 patent lawsuit federal circuit upheld jury verdict validity gphi u.s. patent 6,650,327 furthermore found amd lost right challenge patent validity future proceedings january 31 2011 district court entered order permits amd pursue invalidity affirmative defense trial permit sgi accuse amd radeon r700 series graphics products infringement case april 18 2011 gphi amd entered confidential settlement license agreement resolved litigation matter immaterial amount provides immunity gphi patents alleged infringement amd products including components software designs april 26 2011 court entered order granting parties agreed motion dismissal final judgment 2011-11 gphi filed another patent infringement lawsuit apple inc. delaware involving patents original patent infringement case apple last november alleged violation u.s. patents 6,650,327 '327 '145 '881 2012 gphi filed lawsuit apple sony htc corp lg electronics inc. samsung electronics co. research motion ltd. allegedly violating patent relating computer graphics process turns text images pixels displayed screens affected devices include apple iphone htc evo4g lg thrill research motion torch samsung galaxy galaxy ii sony xperia play smartphones sgi first generation products starting iris integrated raster imaging system 1000 series high-performance graphics terminals based motorola 68000 family microprocessors later iris 2000 3000 models developed full unix workstations first entries 1000 series models 1000 1200 introduced 1984 graphics terminals peripherals connected general-purpose computer digital equipment corporation vax provide graphical raster display abilities used 8 mhz motorola 68000 cpus ram disk drives booted network via excelan exos/101 ethernet card controlling computer used pm1 cpu board variant board used stanford university sun workstation later sun-1 workstation sun microsystems graphics system composed gf1 frame buffer uc3 update controller dc3 display controller bp2 bitplane 1000-series machines designed around multibus standard later 1000-series machines 1400 1500 ran 10 mhz 1.5 mb ram 1400 73 mb st-506 disk drive 1500 474 mb smd-based disk drive xylogics 450 disk controller may used pm2 cpu pm2m1 ram board 2000 series usual monitor 1000 series ran 30 hz interlaced six beta-test units 1400 workstation produced first production unit sgi first commercial computer shipped carnegie-mellon university electronic imaging laboratory 1984 sgi rapidly developed machines workstations second product line — iris 2000 series first released august 1985 sgi began using unix system v operating system five models two product ranges 2000/2200/2300/2400/2500 range used 68010 cpus pm2 cpu module later turbo systems 2300t 2400t 2500t 68020s ip2 cpu module used excelan exos/201 ethernet card graphics hardware gf2 frame buffer uc4 update controller dc4 display controller bp3 bitplane main differences cpu ram weitek floating point accelerator boards disk controllers disk drives st-506 smd available could upgraded example 2400 2400t 2500 2500t larger chassis standard 6 19 eia rack space bottom two smd disk drives weighing approximately non-turbo models used multibus cpu communicate floating point accelerator turbos added ribbon cable dedicated 60 hz monitors used 2000 series height machines using motorola cpus reached iris 3000 series models 3010/3020/3030 3110/3115/3120/3130 30s full-size rack machines used graphics subsystem ethernet 2000s could also use 12 geometry engines first widespread use hardware graphics accelerators standard monitor 19 60 hz non-interlaced unit tilt/swivel base 19 30 hz interlaced 15 60 hz non-interlaced tilt/swivel base also available iris 3130 smaller siblings impressive time complete unix workstations 3130 powerful enough support complete 3d animation rendering package without mainframe support large capacity hard drives standards day two 300 mb drives streaming tape ethernet could centerpiece animation operation line formally discontinued november 1989 3500 systems shipped 2000 3000 models combined introduction iris 4d series sgi switched mips microprocessors machines powerful came powerful on-board floating-point capability 3d graphics became popular television film time systems responsible establishing much sgi reputation sgi produced broad range mips-based workstations servers 1990s running sgi version unix system v called irix included massive onyx visualization systems size refrigerators capable supporting 64 processors managing three streams high resolution fully realized 3d graphics october 1991 mips announced first commercially available 64-bit microprocessor r4000 sgi used r4000 crimson workstation irix 6.2 first fully 64-bit irix release including 64-bit pointers secure supply future generations mips microprocessors 64-bit r4000 sgi acquired company 1992 333 million renamed mips technologies inc. wholly owned subsidiary sgi 1993 silicon graphics sgi signed deal nintendo develop reality coprocessor rcp gpu used nintendo 64 n64 video game console deal signed early 1993 later made public august year console later released 1996 rcp developed sgi nintendo operations department led engineer dr. wei yen 1997 twenty sgi employees led yen left sgi founded artx later acquired ati technologies 2000 1998 sgi relinquished ownership mips technologies inc re-ipo fully divested 2000 late 1990s much industry expected itanium replace cisc risc architectures non-embedded computers sgi announced intent phase mips systems development new mips microprocessors stopped existing r12000 design extended multiple times 2003 provide existing customers time migrate itanium august 2006 sgi announced end production mips/irix systems end year mips/irix products longer generally available sgi second generation onyx reality engine machines sgi offered access high performance 3d graphics subsystems proprietary api known iris graphics language iris gl features added years iris gl became harder maintain cumbersome use 1992 sgi decided clean reform iris gl made bold move allowing resulting opengl api cheaply licensed sgi competitors set industry-wide consortium maintain opengl standard opengl architecture review board meant first time fast efficient cross-platform graphics programs could written day opengl remains real-time 3d graphics standard portable across variety operating systems opengl-es even runs many types cell phones main competitor direct3d microsoft runs microsoft windows-based machines consoles sgi part advanced computing environment initiative formed early 1990s 20 companies including compaq digital equipment corporation mips computer systems groupe bull siemens nec netpower microsoft santa cruz operation intent introduce workstations based mips architecture able run windows nt sco unix group produced advanced risc computing arc specification began unravel little year formation sgi crimson system fsn three-dimensional file system navigator appeared 1993 movie jurassic park movie twister protagonists seen using sgi laptop computer however unit shown actual working computer rather fake laptop shell built around sgi corona lcd flat screen display 1995 film congo also features sgi laptop computer used dr. ross laura linney communicate via satellite travicom hq purple lowercased sgi logo seen beginning opening credits hbo series silicon valley taken replaced google logo intro graphics progress google leased former sgi buildings 2003 headquarters mountain view ca purchased buildings outright 2006 eight consecutive years 1995–2002 films nominated academy award distinguished achievement visual effects created silicon graphics computer systems inexpensive pcs began graphics performance close expensive specialized graphical workstations sgi core business sgi shifted focus high performance servers digital video web many sgi graphics engineers left work computer graphics companies ati nvidia contributing pc 3d graphics revolution 1995 film toy story used silicon graphics indigo2 computers create scenes movie sgi promoter free software supporting several projects linux samba opening previously proprietary code xfs filesystem open64 compiler 1995 sgi purchased alias research kroyer films wavefront technologies deal totaling approximately 500 million merged companies alias|wavefront june 2004 sgi sold business later renamed alias/wavefront private equity investment firm accel-kkr 57.1 million october 2005 autodesk announced signed definitive agreement acquire alias 182 million cash february 1996 sgi purchased well-known supercomputer manufacturer cray research 740 million began use marketing names craylink sgi-developed technology integrated sgi server line three months later sold cray business systems division responsible cs6400 sparc/solaris server sun microsystems undisclosed amount acknowledged later sun executive significantly less 100 million many cray t3e engineers designed developed sgi altix numalink technology sgi sold cray brand product lines tera computer company march 31 2000 35 million plus one million shares sgi also distributed remaining interest mips technologies spin-off effective june 20 2000 september 2000 sgi acquired zx10 series windows workstations servers intergraph computer systems rumored 100 million rebadged sgi systems product line discontinued june 2001 another attempt sgi late 1990s introduce family intel-based workstations running windows nt red hat linux see also sgi visual workstation proved financial disaster shook customer confidence sgi ’ commitment mips-based line 1998 sgi announced future generations machines would based mips processors upcoming super-chip intel code-named merced later called itanium funding high-end processors reduced planned r10000 would last mips mainstream processor mips technologies would focus entirely embedded market success sgi would longer fund development cpu since failure arc found use machines plan quickly went awry early 1999 clear itanium going delivered late would nowhere near performance originally expected production delays increased mips existing r10000-based machines grew increasingly uncompetitive eventually forced introduce faster mips processors r12000 r14000 r16000 used series models 2002 2006 sgi first itanium-based system short-lived sgi 750 workstation launched 2001 sgi mips-based systems superseded launch itanium 2-based altix servers prism workstations time later unlike mips systems ran irix itanium systems used suse linux enterprise server sgi enhancements operating system sgi used transitive corporation quicktransit software allow old mips/irix applications run emulation new itanium/linux platform server market itanium 2-based altix eventually replaced mips-based origin product line workstation market switch itanium completed sgi exited market altix powerful computer world 2006 assuming computer defined collection hardware running single instance operating system altix 512 itanium processors running single instance linux cluster 20 machines eighth-fastest supercomputer faster supercomputers clusters none many flops per machine however recent supercomputers large clusters machines individually less capable sgi acknowledged 2007 moved away massive numa model clusters although sgi continued market itanium-based machines recent machines based intel xeon processor first altix xe systems relatively low-end machines december 2006 xe systems capable itanium machines measures e.g. power consumption flops/w density flops/m cost/flops xe1200 xe1300 servers used cluster architecture departure pure numa architectures earlier itanium mips servers june 2007 sgi announced altix ice 8200 blade-based xeon system 512 xeon cores per rack altix ice 8200 installed new mexico computing applications center 14336 processors ranked number 3 top500 list november 2007 conventional wisdom holds sgi core market traditionally hollywood visual effects studios fact sgi largest revenue always generated government defense applications energy scientific technical computing one case silicon graphics largest single sale ever united states postal services usps sgi servers powered artificial intelligence ai program mechanically read tag sort mail hand-written block number usps key mail centers rise cheap yet powerful commodity workstations running linux windows mac os x availability diverse professional software effectively pushed sgi visual effects industry niche markets sgi continued enhance line servers including supercomputers based sn architecture sn scalable node technology developed sgi mid-1990s uses cache-coherent non-uniform memory access cc-numa sn system processors memory bus- memory-controller coupled together entity called node usually single circuit board nodes connected high-speed interconnect called numalink originally marketed craylink internal bus instead access processors memory i/o devices done switched fabric links routers thanks cache coherence distributed shared memory sn systems scale along several axes cpu count increases memory capacity i/o capacity system bisection bandwidth allows combined memory nodes accessed single os image using standard shared-memory synchronization methods makes sn system far easier program able achieve higher sustained-to-peak performance non-cache-coherent systems like conventional clusters massively parallel computers require applications code written re-written explicit message-passing communication nodes first sn system known sn-0 released 1996 product name origin 2000 based mips r10000 processor scaled 2 128 processors smaller version origin 200 sn-00 scaled 1 4 later enhancements enabled systems large 512 processors second generation system originally called sn-1 later sn-mips released july 2000 origin 3000 scaled 4 512 processors 1,024-processor configurations delivered special order customers smaller less scalable implementation followed called origin 300 november 2002 sgi announced repackaging sn system name origin 3900 quadrupled processor area density sn-mips system 32 128 processors per rack moving fat tree interconnect topology january 2003 sgi announced variant sn platform called altix 3000 internally called sn-ia used intel itanium 2 processors ran linux operating system kernel time released world scalable linux-based computer supporting 64 processors single system node nodes could connected using numalink technology form sgi predictably termed superclusters february 2004 sgi announced general support 128 processor nodes followed 256 512 processor versions year april 2004 sgi announced sale alias software business approximately 57 million october 2004 sgi built supercomputer columbia broke world record computer speed nasa ames research center cluster 20 altix supercomputers 512 intel itanium 2 processors running linux achieved sustained speed 42.7 trillion floating-point operations per second teraflops easily topping japan famed earth simulator record 35.86 teraflops week later ibm upgraded blue gene/l clocked 70.7 teraflops july 2006 sgi announced sgi altix 4700 system 1,024 processors 4 tb memory running single linux system image 68k mips-based models also rebadged vendors including cdc tandem computers prime computer siemens-nixdorf sgi onyx sgi indy series systems used game development nintendo 64
node27:Wikipedia entry. Entry name: Telnet. Entry content: telnet telnet application protocol used internet local area network provide bidirectional interactive text-oriented communication facility using virtual terminal connection user data interspersed in-band telnet control information 8-bit byte oriented data connection transmission control protocol tcp telnet developed 1969 beginning rfc 15 extended rfc 855 standardized internet engineering task force ietf internet standard std 8 one first internet standards name stands teletype network historically telnet provided access command-line interface usually operating system remote host including network equipment operating systems configuration utility including systems based windows nt however serious security concerns using telnet open network internet use purpose waned significantly favor ssh term telnet also used refer software implements client part protocol telnet client applications available virtually computer platforms telnet also used verb telnet means establish connection using telnet protocol either command line client graphical interface example common directive might change password telnet server log run passwd command cases user would telnetting unix-like server system network device router telnet client-server protocol based reliable connection-oriented transport typically protocol used establish connection transmission control protocol tcp port number 23 telnet server application telnetd listening telnet however predates tcp/ip originally run network control program ncp protocols even though telnet ad hoc protocol official definition march 5 1973 name actually referred teletype network protocol rfc 206 nic 7176 telnet makes connection clear many extensions made telnet negotiable options protocol architecture extensions adopted internet standards ietf documents std 27 std 32 extensions widely implemented others proposed standards ietf standards track see telnet best understood context user simple terminal using local telnet program known client program run logon session remote computer user communications needs handled telnet server program telnet initially developed 1969 users networked computers computer departments academic institutions large private government research facilities environment security nearly much concern became bandwidth explosion 1990s rise number people access internet extension number people attempting hack people servers made encrypted alternatives necessary experts computer security sans institute recommend use telnet remote logins discontinued normal circumstances following reasons security-related shortcomings seen usage telnet protocol drop rapidly especially public internet favor secure shell ssh protocol first released 1995 ssh practically replaced telnet older protocol used days rare cases access decades old legacy equipment support modern protocols ssh provides much functionality telnet addition strong encryption prevent sensitive data passwords intercepted public key authentication ensure remote computer actually claims happened early internet protocols extensions telnet protocol provide transport layer security tls security simple authentication security layer sasl authentication address concerns however telnet implementations support extensions relatively little interest implementing ssh adequate purposes note large number industrial scientific devices telnet available communication option built standard rs-232 port use serial server hardware appliance provide translation tcp/telnet data rs-232 serial data cases ssh option unless interface appliance configured ssh ibm 5250 3270 workstation emulation supported via custom telnet clients tn5250/tn3270 ibm servers clients servers designed pass ibm 5250 data streams telnet generally support ssl encryption ssh include 5250 emulation os/400 also known ibm port 992 default port secured telnet data octets except 0xff transmitted telnet sometimes used telnet client applications establish interactive raw tcp session due commonly mistaken belief session use iac functionally identical example user could make http request hand using command line version telnet client application follows case however network virtual terminal nvt rules requirement bare carriage return character cr ascii 13 followed nul ascii 0 character distinguish telnet protocol raw tcp sessions hand many systems possess true raw tcp clients netcat socat unix putty windows also used manually talk services without specialized client software nevertheless telnet still sometimes used debugging network services smtp irc http ftp pop3 servers issue commands server examine responses protocols ftp really uses telnet data format another difference telnet raw tcp session telnet 8-bit clean default 8-bit mode may negotiated high-bit-set octets may garbled mode requested requested non-telnet connection 8-bit mode named binary option intended transmit binary data characters though standard suggests interpretation codes 0000–0176 ascii offer meaning high-bit-set data octets attempt introduce switchable character encoding support like http nothing known actual software support
node28:Wikipedia entry. Entry name: Star_Trek_project. Entry content: star trek project star trek code name given secret prototype project running port mac os 7 applications intel-compatible x86 personal computers project starting february 1992 conceived collaboration apple computer provided majority engineers novell time one leaders cross-platform file-servers plan novell would market resulting os challenge microsoft windows project discontinued 1993 never released although components reused projects project named star trek science fiction franchise slogan boldly go mac gone impetus creation star trek project began novell desire increase competition monopoly microsoft dos-based windows products microsoft eventually convicted many years later illegal monopoly status novell called microsoft presence predatory us department justice called exclusionary unlawful novell first idea extend desktop presence graphical computing environment adapt digital research gem desktop environment novell legal department rejected due apprehension possible legal response apple company went directly apple shared concerns anti-competitive marketplace intel ceo andy grove supported two companies launching joint project star trek february 14 1992 valentine day apple set deadline october 31 1992 halloween day promising engineering team members performance bonus large cash award vacation cancun mexico project team member fred monroe later reflected worked like dogs fun ’ working achieving deadline goal receiving bonuses developers eventually reached point could boot intel 486 pc specific hardware system 7.1 on-screen appearance indistinguishable mac however every program would need ported new x86 architecture run supposed programs could ported little effort apple developed equivalent headers x86 tagline project boldly go mac gone computerworld mocked comment os boldly goes everyone else however project canceled mid-1993 political infighting personnel issues questionable marketability project apple side project seen exit supportive ceo john sculley favor new ceo michael spindler spindler interested project instead reallocating software engineering resources toward company total migration competing powerpc architecture macintosh operating system launched natively intel hardware official transition mac os x 2006 star trek designed hybrid apple macintosh operating system made run operating system gui shell application upon novell next in-development version dr dos operating system designed user could think standalone application platform general computing environment concept similar microsoft competing windows 3.1x running top dos radical tedious departure technologically culturally time mac os ever officially run apple computers based motorola 68000 architecture system built successor digital research dr dos 6.0 bdos level 6.7 7.1 netware palmdos 1.0 code named merlin bdos level 7.0 novell dr dos panther fully pc dos compatible 16-bit disk operating system genuinely dos compatible internal data structures bootstrapping media access device drivers file system support system would utilize dr dos new vladivar extended dos component flat memory support development since 1991 vladivar codice_1 aka codice_2 codice_3 dynamically loadable 32-bit protected mode system core advanced memory management hardware virtualization scheduling domain management pre-emptive multithreading within applications well multitasking independent applications running different virtual dos machines comparable windows 386 enhanced mode without gui thereby previously loaded dos environment including device drivers became part system domain multitasker unless specific protected mode virtual device drivers loaded hardware access got tunneled 16-bit sub-system default maximum speed minimum resource footprint dr dos bios bdos kernel device drivers memory managers multitasker written pure x86 assembly language apple port system 7.1 would run top high-performance yet light-weight hybrid 32-bit/16-bit protected mode multitasking environment graphical system shell user space macintosh resource forks long filenames mapped onto fat12 fat16 file systems though joint effort canceled novell published long-awaited dr dos 7.0 novell dos 7 bdos 7.2 1994 besides many additions areas advanced memory disk management networking novell dos 7 provided novell underlying stdos components dr dos panther vladivar projects except graphical star trek component jointly developed apple novell instead taskmgr provided text mode interface underlying multitasker emm386 system also provided api allow third-party guis take control microsoft windows viewmax 2 3 pc/geos newdeal known utilize interface run novell dos 7 successors opendos 7.01 dr-dos 7.02 higher star trek would yet another one fact additional hooks implemented specifically star trek gui frame buffer access hooks never stripped emm386 left undocumented apple reused platform abstraction technology developed star trek incorporating concurrently developed—and consider competing—migration powerpc architecture abstraction technology included capability loading mac os rom data file instead rom chip former star trek team members fred monroe fred huxham formed company fredlabs inc january 1997 company released virtualmac mac os application compatibility virtual machine beos apple first quickly aborted concept porting flagship operating system intel systems 1985 following exit steve jobs apple reattempt effort star trek n't launch product 2006 apple actually shipped products based upon concept hybridizing mac os 7 shell application platform accomplished form codice_4 process hybridized applications launched atop unix-based a/ux system also accomplished form macintosh application environment mae functional equivalent star trek plus embedded 68k emulator case system 7 power macintosh running application solaris hp/ux apple also delivered dos compatible models macs hybridized mac concurrently functional intel coprocessor card inside mac os 7 later always dos filesystem compatibility although direct x86 port classic mac os never released public determined users could make apple retail os run upon non-mac computers emulation development emulation environments said inspired initiative shown star trek project two popular 68k macintosh emulators vmac basilisk ii powerpc macintosh emulator sheepshaver written third parties ten years project star trek became possible natively run darwin unix-based core mac os x x86 platform virtue nextstep foundation port widely available darwin open source apple public source license however mac os x graphical user interface named aqua proprietary included darwin depended window managers running x11 graphical interfaces thus commercial mac os applications run natively darwin alone apple ran similar project star trek mac os x called marklar later referred steve jobs secret double life publicly power pc-only mac os project retain openstep x86 port keeping mac os x supporting applications including ilife xcode running x86 architecture well powerpc marklar publicly revealed apple ceo steve jobs june 2005 announced macintosh transition intel processors starting 2006 comparing contrasting apple efforts ibm long since attempted different strategy provide essential goal innovating new software platform upon commodity hardware nondestructively preserving existing legacy installations ms-dos heritage however strategy based upon os/2 operating system long since achieved seamless backward compatibility ms-dos applications 1992 roughly coinciding timeframe star trek project ibm devised new fundamentally integral subsystem backward compatibility windows 3.0 windows 3.1 applications new subsystem os/2 called win-os/2 integrated beginning os/2 2.0 although conceived different legacy business requirements cultures win-os/2 designed similar software engineering objectives virtualization techniques star trek coincidentally ibm also code-named os/2 releases star trek themes would eventually make references integral os/2 public brand beginning os/2 warp apple ibm attempted several proprietary cross-platform collaborations including unreleased port quicktime os/2 significant traction opendoc software framework aim alliance kaleida labs taligent companies utilized actual personnel star trek television movie franchise promotional purposes corporation formerly known ardi developed product called executor run compatible selection 68k macintosh applications hosted upon either dos linux operating systems intel cpu executor cleanroom reimplementation macintosh toolbox versions 6 7 operating system integrated 68k cpu emulator called syn68k liken andataco sun hp workstations emulates macintosh hardware environment including 68k cpu upon user must install system 6.0.7 quorum software systems made two apps targeting unix workstations equal provides binary compatibility emulating mac apis 68k cpu put precertified mac app x window sun sgi workstations latitude provides source code porting layer display postscript driver",wikics,nc
