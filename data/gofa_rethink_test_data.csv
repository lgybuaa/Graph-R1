prompt,ground_truth,summary,nodes_description,dataset,task
"Classify the relationship between two essays denoted as node15 and node21 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Approximation in Lp spaces using perturbed integer translates of radially symmetric functions like Gauss kernels in non-stationary settings.  
node1: Reinforcement learning for race car control with separate networks for behaviors, enabling collision avoidance and passing via layered architecture.  
node2: Comparative analysis of localization methods for scattered shifts of functions, advocating original translates over modified ones.  
node3: Mobile robot collision avoidance using adaptive quantization and reinforcement learning with binary feedback.  
node4: Environmental modeling to prevent local learning optima, improving decision-making adaptability.  
node5: Generalized MDP framework extending algorithms like value iteration to risk-averse scenarios, games, and approximate max-picking.  
node6: Bounds on performance loss from approximate value functions in RL, validating greedy action selection with Q-learning extensions.  
node7: Neural network model combining self-organization and associative memory via feedback/feedforward synapses for nonlinear learning.  
node8: Analytical MSE analysis of TD learning in absorbing Markov chains, highlighting parameter sensitivity and bias-variance tradeoffs.  
node9: XCS classifier system改进 with Specify operator to enhance generalization, enabling performance in diverse environments.  
node10: SMART algorithm for continuous-time factory optimization using average reward RL in simulation tools like ARENA.  
node11: COLUMBUS robot explores unknown environments using neural networks, prioritizing low-confidence areas for real-time mapping.  
node12: Policy iteration variants and early actor-critic learning analysis, citing contributions from key researchers.  
node13: Generalized prioritized sweeping for compact state representations (e.g., Bayesian networks) to optimize resource allocation.  
node14: Lp approximation orders for radial basis functions with scattered centers, extending uniform grid-based schemes.  
node15: L1 approximation using scattered radial basis functions, preserving uniform grid approximation orders through conversion methods.  
node16: Temporal difference methods for prediction, offering efficiency gains over conventional supervised learning approaches.  
node17: Dyna architectures integrate learning/planning via dynamic programming, demonstrated in navigation and adaptive control.  
node18: Neural networks optimize satellite attitude control, reducing RMS error by 30% in noisy measurement scenarios.  
node19: Characterizing shift-invariant L2 subspaces for approximation orders without decay requirements, extending Strang-Fix conditions.  
node20: Neuro-dynamic programming combines neural networks and dynamic programming for optimization problems.  
node21: MLP outperforms LVQ in high-dimensional pattern discrimination due to sigmoid functions and efficient hyper-plane use.  
node22: Evolving optimal populations using XCS classifier systems for adaptive rule-based learning.  
node23: Learning curve bounds for undiscounted MDPs using statistical mechanics, linking exploration time and state space size.  
node24: Correcting imperfect domain theories in EBL via knowledge-level analysis, emphasizing theory refinement through error diagnosis.

the connection relationship among the nodes mentioned:
 <node0, node14>,<node0, node15>,<node1, node16>,<node2, node15>,<node2, node19>,<node3, node7>,<node3, node17>,<node4, node9>,<node4, node17>,<node4, node22>,<node5, node17>,<node6, node12>,<node6, node16>,<node6, node17>,<node7, node21>,<node8, node16>,<node9, node22>,<node10, node16>,<node11, node17>,<node13, node17>,<node14, node15>,<node15, node19>,<node16, node17>,<node16, node18>,<node16, node20>,<node16, node23>,<node17, node24>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","No, they do not have citation relationships","

node0: Approximation in Lp spaces using perturbed integer translates of radially symmetric functions like Gauss kernels in non-stationary settings.  
node1: Reinforcement learning for race car control with separate networks for behaviors, enabling collision avoidance and passing via layered architecture.  
node2: Comparative analysis of localization methods for scattered shifts of functions, advocating original translates over modified ones.  
node3: Mobile robot collision avoidance using adaptive quantization and reinforcement learning with binary feedback.  
node4: Environmental modeling to prevent local learning optima, improving decision-making adaptability.  
node5: Generalized MDP framework extending algorithms like value iteration to risk-averse scenarios, games, and approximate max-picking.  
node6: Bounds on performance loss from approximate value functions in RL, validating greedy action selection with Q-learning extensions.  
node7: Neural network model combining self-organization and associative memory via feedback/feedforward synapses for nonlinear learning.  
node8: Analytical MSE analysis of TD learning in absorbing Markov chains, highlighting parameter sensitivity and bias-variance tradeoffs.  
node9: XCS classifier system改进 with Specify operator to enhance generalization, enabling performance in diverse environments.  
node10: SMART algorithm for continuous-time factory optimization using average reward RL in simulation tools like ARENA.  
node11: COLUMBUS robot explores unknown environments using neural networks, prioritizing low-confidence areas for real-time mapping.  
node12: Policy iteration variants and early actor-critic learning analysis, citing contributions from key researchers.  
node13: Generalized prioritized sweeping for compact state representations (e.g., Bayesian networks) to optimize resource allocation.  
node14: Lp approximation orders for radial basis functions with scattered centers, extending uniform grid-based schemes.  
node15: L1 approximation using scattered radial basis functions, preserving uniform grid approximation orders through conversion methods.  
node16: Temporal difference methods for prediction, offering efficiency gains over conventional supervised learning approaches.  
node17: Dyna architectures integrate learning/planning via dynamic programming, demonstrated in navigation and adaptive control.  
node18: Neural networks optimize satellite attitude control, reducing RMS error by 30% in noisy measurement scenarios.  
node19: Characterizing shift-invariant L2 subspaces for approximation orders without decay requirements, extending Strang-Fix conditions.  
node20: Neuro-dynamic programming combines neural networks and dynamic programming for optimization problems.  
node21: MLP outperforms LVQ in high-dimensional pattern discrimination due to sigmoid functions and efficient hyper-plane use.  
node22: Evolving optimal populations using XCS classifier systems for adaptive rule-based learning.  
node23: Learning curve bounds for undiscounted MDPs using statistical mechanics, linking exploration time and state space size.  
node24: Correcting imperfect domain theories in EBL via knowledge-level analysis, emphasizing theory refinement through error diagnosis.","node0:Academic paper with title and abstract: APPROXIMATION IN L p (R d FROM SPACES SPANNED BY THE PERTURBED INTEGER TRANSLATES OF: The problem of approximating smooth L p -functions from spaces spanned by the integer translates of a radially symmetric function is very well understood. In case the points of translation, ffi, are scattered throughout R d , the approximation problem is only well understood in the ""stationary"" setting. In this work, we treat the ""non-stationary"" setting under the assumption that ffi is a small perturbation of Z d . Our results, which are similar in many respects to the known results for the case ffi = Z d , apply specifically to the examples of the Gauss kernel and the Generalized Multiquadric.
node1:Academic paper with title and abstract: Learning to Race: Experiments with a Simulated Race Car: We have implemented a reinforcement learning architecture as the reactive component of a two layer control system for a simulated race car. We have found that separating the layers has expedited gradually improving competition and mult-agent interaction. We ran experiments to test the tuning, decomposition and coordination of the low level behaviors. We then extended our control system to allow passing of other cars and tested its ability to avoid collisions. The best design used reinforcement learning with separate networks for each behavior, coarse coded input and a simple rule based coordination mechanism.
node2:Academic paper with title and abstract: Negative observations concerning approximations from spaces generated by scattered shifts of functions vanishing at 1: Approximation by scattered shifts f( ff)g ff2A of a basis function are considered, and different methods for localizing these translates are compared. It is argued in the note that the superior localization processes are those that employ the original translates only.
node3:Academic paper with title and abstract: Adaptive state space quantisation: adding and removing neurons: This paper describes a self-learning control system for a mobile robot. Based on local sensor data, a robot is taught to avoid collisions with obstacles. The only feedback to the control system is a binary-valued external reinforcement signal, which indicates whether or not a collision has occured. A reinforcement learning scheme is used to find a correct mapping from input (sensor) space to output (steering signal) space. An adaptive quantisation scheme is introduced, through which the discrete division of input space is built up from scratch by the system itself.
node4:Academic paper with title and abstract: Model of the Environment to Avoid Local Learning: Pier Luca Lanzi Technical Report N. 97.46 December 20 th , 1997
node5:Academic paper with title and abstract:  Dynamic Programming and Markov Processes. : The problem of maximizing the expected total discounted reward in a completely observable Markovian environment, i.e., a Markov decision process (mdp), models a particular class of sequential decision problems. Algorithms have been developed for making optimal decisions in mdps given either an mdp specification or the opportunity to interact with the mdp over time. Recently, other sequential decision-making problems have been studied prompting the development of new algorithms and analyses. We describe a new generalized model that subsumes mdps as well as many of the recent variations. We prove some basic results concerning this model and develop generalizations of value iteration, policy iteration, model-based reinforcement-learning, and Q-learning that can be used to make optimal decisions in the generalized model under various assumptions. Applications of the theory to particular models are described, including risk-averse mdps, exploration-sensitive mdps, sarsa, Q-learning with spreading, two-player games, and approximate max picking via sampling. Central to the results are the contraction property of the value operator and a stochastic-approximation theorem that reduces asynchronous convergence to synchronous convergence.
node6:Academic paper with title and abstract:  An upper bound on the loss from approximate optimal value functions. : Many reinforcement learning (RL) approaches can be formulated from the theory of Markov decision processes and the associated method of dynamic programming (DP). The value of this theoretical understanding, however, is tempered by many practical concerns. One important question is whether DP-based approaches that use function approximation rather than lookup tables, can avoid catastrophic effects on performance. This note presents a result in Bertsekas (1987) which guarantees that small errors in the approximation of a task's optimal value function cannot produce arbitrarily bad performance when actions are selected greedily. We derive an upper bound on performance loss which is slightly tighter than that in Bertsekas (1987), and we show the extension of the bound to Q-learning (Watkins, 1989). These results provide a theoretical justification for a practice that is common in reinforcement learning.
node7:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node8:Academic paper with title and abstract:  Analytical mean squared error curves in temporal difference learning. : We have calculated analytical expressions for how the bias and variance of the estimators provided by various temporal difference value estimation algorithms change with o*ine updates over trials in absorbing Markov chains using lookup table representations. We illustrate classes of learning curve behavior in various chains, and show the manner in which TD is sensitive to the choice of its step size and eligibility trace parameters.
node9:Academic paper with title and abstract:  A Study on the Generalization Capabilities of XCS. : We analyze the generalization behavior of the XCS classifier system in environments in which only a few generalizations can be done. Experimental results presented in the paper evidence that the generalization mechanism of XCS can prevent it from learning even simple tasks in such environments. We present a new operator, named Specify, which contributes to the solution of this problem. XCS with the Specify operator, named XCSS, is compared to XCS in terms of performance and generalization capabilities in different types of environments. Experimental results show that XCSS can deal with a greater variety of environments and that it is more robust than XCS with respect to population size.
node10:Academic paper with title and abstract:  ""Self-improving factory simulation using continuous-time average reward reinforcement learning"" in Proceedings of the Fourteenth International Machine Learning Conference., : Many factory optimization problems, from inventory control to scheduling and reliability, can be formulated as continuous-time Markov decision processes. A primary goal in such problems is to find a gain-optimal policy that minimizes the long-run average cost. This paper describes a new average-reward algorithm called SMART for finding gain-optimal policies in continuous time semi-Markov decision processes. The paper presents a detailed experimental study of SMART on a large unreliable production inventory problem. SMART outperforms two well-known reliability heuristics from industrial engineering. A key feature of this study is the integration of the reinforcement learning algorithm directly into two commercial discrete-event simulation packages, ARENA and CSIM, paving the way for this approach to be applied to many other factory optimization problems for which there already exist simulation models.
node11:Academic paper with title and abstract:  ""Exploration and model building in mobile robot domains"", : I present first results on COLUMBUS, an autonomous mobile robot. COLUMBUS operates in initially unknown, structured environments. Its task is to explore and model the environment efficiently while avoiding collisions with obstacles. COLUMBUS uses an instance-based learning technique for modeling its environment. Real-world experiences are generalized via two artificial neural networks that encode the characteristics of the robot's sensors, as well as the characteristics of typical environments the robot is assumed to face. Once trained, these networks allow for knowledge transfer across different environments the robot will face over its lifetime. COLUMBUS' models represent both the expected reward and the confidence in these expectations. Exploration is achieved by navigating to low confidence regions. An efficient dynamic programming method is employed in background to find minimal-cost paths that, executed by the robot, maximize exploration. COLUMBUS operates in real-time. It has been operating successfully in an office building environment for periods up to hours.
node12:Academic paper with title and abstract:  Analysis of some incremental variants of policy iteration: First steps toward understanding actor-critic learning systems. : Northeastern University College of Computer Science Technical Report NU-CCS-93-11 fl We gratefully acknowledge the substantial contributions to this effort provided by Andy Barto, who sparked our original interest in these questions and whose continued encouragement and insightful comments and criticisms have helped us greatly. Recent discussions with Satinder Singh and Vijay Gullapalli have also had a helpful impact on this work. Special thanks also to Rich Sutton, who has influenced our thinking on this subject in numerous ways. This work was supported by Grant IRI-8921275 from the National Science Foundation and by the U. S. Air Force.
node13:Academic paper with title and abstract:  Generalized Prioritized Sweeping. : Prioritized sweeping is a model-based reinforcement learning method that attempts to focus an agent's limited computational resources to achieve a good estimate of the value of environment states. To choose effectively where to spend a costly planning step, classic prioritized sweeping uses a simple heuristic to focus computation on the states that are likely to have the largest errors. In this paper, we introduce generalized prioritized sweeping, a principled method for generating such estimates in a representation-specific manner. This allows us to extend prioritized sweeping beyond an explicit, state-based representation to deal with compact representations that are necessary for dealing with large state spaces. We apply this method for generalized model approximators (such as Bayesian networks), and describe preliminary experiments that compare our approach with classical prioritized sweeping.
node14:Academic paper with title and abstract:  RADIAL BASIS FUNCTIONS: L p -Approximation orders with scattered centres, Preprint. APPROXIMATION FROM PERTURBED SHIFTS 35 : In this paper we generalize several results on uniform approximation orders with radial basis functions in (Buhmann, Dyn and Levin, 1993) and (Dyn and Ron, 1993) to L p -approximation orders. These results apply, in particular, to approximants from spaces spanned by translates of radial basis functions by scattered centres. Examples to which our results apply include quasi-interpolation and least-squares approximation from radial function spaces.
node15:Academic paper with title and abstract:  Approximation by scattered shifts of a radial basis function, : The paper studies L 1 (IR d )-norm approximations from a space spanned by a discrete set of translates of a basis function . Attention here is restricted to functions whose Fourier transform is smooth on IR d n0, and has a singularity at the origin. Examples of such basis functions are the thin-plate splines and the multiquadrics, as well as other types of radial basis functions that are employed in Approximation Theory. The above approximation problem is well-understood in case the set of points ffi used for translating forms a lattice in IR d , and many optimal and quasi-optimal approximation schemes can already be found in the literature. In contrast, only few, mostly specific, results are known for a set ffi of scattered points. The main objective of this paper is to provide a general tool for extending approximation schemes that use integer translates of a basis function to the non-uniform case. We introduce a single, relatively simple, conversion method that preserves the approximation orders provided by a large number of schemes presently in the literature (more precisely, to almost all ""stationary schemes""). In anticipation of future introduction of new schemes for uniform grids, an effort is made to impose only a few mild conditions on the function , which still allow for a unified error analysis to hold. In the course of the discussion here, the recent results of [BuDL] on scattered center approximation are reproduced and improved upon.
node16:Academic paper with title and abstract:  Learning to predict by the methods of temporal differences. : This article introduces a class of incremental learning procedures specialized for prediction|that is, for using past experience with an incompletely known system to predict its future behavior. Whereas conventional prediction-learning methods assign credit by means of the difference between predicted and actual outcomes, the new methods assign credit by means of the difference between temporally successive predictions. Although such temporal-difference methods have been used in Samuel's checker player, Holland's bucket brigade, and the author's Adaptive Heuristic Critic, they have remained poorly understood. Here we prove their convergence and optimality for special cases and relate them to supervised-learning methods. For most real-world prediction problems, temporal-difference methods require less memory and less peak computation than conventional methods; and they produce more accurate predictions. We argue that most problems to which supervised learning is currently applied are really prediction problems of the sort to which temporal-difference methods can be applied to advantage.
node17:Academic paper with title and abstract:  Integrated Architectures for Learning, Planning and Reacting Based on Approximating Dynamic Programming, : This paper extends previous work with Dyna, a class of architectures for intelligent systems based on approximating dynamic programming methods. Dyna architectures integrate trial-and-error (reinforcement) learning and execution-time planning into a single process operating alternately on the world and on a learned model of the world. In this paper, I present and show results for two Dyna architectures. The Dyna-PI architecture is based on dynamic programming's policy iteration method and can be related to existing AI ideas such as evaluation functions and universal plans (reactive systems). Using a navigation task, results are shown for a simple Dyna-PI system that simultaneously learns by trial and error, learns a world model, and plans optimal routes using the evolving world model. The Dyna-Q architecture is based on Watkins's Q-learning, a new kind of reinforcement learning. Dyna-Q uses a less familiar set of data structures than does Dyna-PI, but is arguably simpler to implement and use. We show that Dyna-Q architectures are easy to adapt for use in changing environments.
node18:Academic paper with title and abstract:  Optimal attitude control of satellites by artificial neural networks: a pilot study. : A pilot study is described on the practical application of artificial neural networks. The limit cycle of the attitude control of a satellite is selected as the test case. One of the sources of the limit cycle is a position dependent error in the observed attitude. A Reinforcement Learning method is selected, which is able to adapt a controller such that a cost function is optimised. An estimate of the cost function is learned by a neural `critic'. In our approach, the estimated cost function is directly represented as a function of the parameters of a linear controller. The critic is implemented as a CMAC network. Results from simulations show that the method is able to find optimal parameters without unstable behaviour. In particular in the case of large discontinuities in the attitude measurements, the method shows a clear improvement compared to the conventional approach: the RMS attitude error decreases approximately 30%.
node19:Academic paper with title and abstract:  Approximation from shift-invariant subspaces of L 2 (IR d ), CMS TSR #92-2, : A complete characterization is given of closed shift-invariant subspaces of L 2 (IR d ) which provide a specified approximation order. When such a space is principal (i.e., generated by a single function), then this characterization is in terms of the Fourier transform of the generator. As a special case, we obtain the classical Strang-Fix conditions, but without requiring the generating function to decay at infinity. The approximation order of a general closed shift-invariant space is shown to be already realized by a specifiable principal subspace.
node20:Academic paper with title and abstract:  Neuro-dynamic Programming. : 
node21:Academic paper with title and abstract:  ""Pattern Discrimination Using Feedforward Networks: A Benchmark Study of Scaling Behavior"", : The discrimination powers of Multilayer perceptron (MLP) and Learning Vector Quantisation (LVQ) networks are compared for overlapping Gaussian distributions. It is shown, both analytically and with Monte Carlo studies, that the MLP network handles high dimensional problems in a more efficient way than LVQ. This is mainly due to the sigmoidal form of the MLP transfer function, but also to the the fact that the MLP uses hyper-planes more efficiently. Both algorithms are equally robust to limited training sets and the learning curves fall off like 1=M, where M is the training set size, which is compared to theoretical predictions from statistical estimates and Vapnik-Chervonenkis bounds.
node22:Academic paper with title and abstract:  Evolving Optimal Populations with XCS Classifier Systems, : 
node23:Academic paper with title and abstract:  Learning curves bounds for Markov decision processes with undiscounted rewards. : Markov decision processes (MDPs) with undis-counted rewards represent an important class of problems in decision and control. The goal of learning in these MDPs is to find a policy that yields the maximum expected return per unit time. In large state spaces, computing these averages directly is not feasible; instead, the agent must estimate them by stochastic exploration of the state space. In this case, longer exploration times enable more accurate estimates and more informed decision-making. The learning curve for an MDP measures how the agent's performance depends on the allowed exploration time, T . In this paper we analyze these learning curves for a simple control problem with undiscounted rewards. In particular, methods from statistical mechanics are used to calculate lower bounds on the agent's performance in the thermodynamic limit T ! 1, N ! 1, ff = T =N (finite), where T is the number of time steps allotted per policy evaluation and N is the size of the state space. In this limit, we provide a lower bound on the return of policies that appear optimal based on imperfect statistics.
node24:Academic paper with title and abstract:  Correcting imperfect domain theories: A knowledge-level analysis. : Explanation-Based Learning [Mitchell et al., 1986; DeJong and Mooney, 1986] has shown promise as a powerful analytical learning technique. However, EBL is severely hampered by the requirement of a complete and correct domain theory for successful learning to occur. Clearly, in non-trivial domains, developing such a domain theory is a nearly impossible task. Therefore, much research has been devoted to understanding how an imperfect domain theory can be corrected and extended during system performance. In this paper, we present a characterization of this problem, and use it to analyze past research in the area. Past characterizations of the problem (e.g, [Mitchell et al., 1986; Rajamoney and DeJong, 1987]) have viewed the types of performance errors caused by a faulty domain theory as primary. In contrast, we focus primarily on the types of knowledge deficiencies present in the theory, and from these derive the types of performance errors that can result. Correcting the theory can be viewed as a search through the space of possible domain theories, with a variety of knowledge sources that can be used to guide the search. We examine the types of knowledge used by a variety of past systems for this purpose. The hope is that this analysis will indicate the need for a ""universal weak method"" of domain theory correction, in which different sources of knowledge for theory correction can be freely and flexibly combined.",cora_link,lp
"Classify the relationship between two essays denoted as node17 and node18 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Hippocampal remapping in old vs young animals; dentate gyrus and self-localization errors explain bimodal ensemble correlations.  
node1: Multiassociative memory models enable many-to-many mappings using cascaded networks, addressing cognitive modeling challenges.  
node2: Rectified Gaussian uses nonnegative variables for multimodal distributions, modeling pattern manifolds via cooperative/competitive structures.  
node3: Visual attention guides barn owl auditory map plasticity via a Kohonen model, showing developmental shifts with prism-like visual adjustments.  
node4: Neural population decoding reconstructs physical variables (e.g., rat trajectories), comparing Bayesian/basis methods near theoretical limits.  
node5: Gibbs sampler convergence bounds for Bayesian image restoration, scaling quadratically with pixels.  
node6: Metropolis-Hastings chains with high self-probability lack CLTs; examples include independence samplers and MALA.  
node7: Adaptive self-regenerative MCMC updates via regeneration, improving efficiency in Bayesian computations like predator-prey modeling.  
node8: DSOM model uses leaky integrators for temporal compositionality, enabling hierarchical dynamic bindings via temporal correlations.  
node9: Neural network combines self-organized feedforward synapses with feedback suppression to learn non-linearly separable tasks.  
node10: Reinforcement learning avoids collisions in robots via discrete state coding and Temporal Difference rules.  
node11: Self-organized feature maps in neural networks (citing PDP literature).  
node12: Competitive anti-Hebbian learning extracts invariants (e.g., depth) from stereograms without supervision.  
node13: Attractor networks model sensory analysis/synthesis using hidden variables, with linear/nonlinear architectures for pattern completion.  
node14: Minorization conditions and simulations estimate MCMC convergence rates when analytical methods fail.  
node15: Adaptive MCMC via regeneration allows infinite kernel updates without disrupting stationary distribution consistency.  
node16: Adaptive Metropolis adjusts proposal distributions adaptively, ensuring ergodicity with strong numerical performance.  
node17: Self-regenerative MCMC constructs efficient chains via auxiliary sampling, offering adaptability and simplicity.  
node18: Exact n-step transition probabilities for independence Metropolis samplers, extending eigenvalue analysis to finite/continuous spaces.  
node19: Gibbs sampler convergence depends on region boundary smoothness; jagged edges hinder geometric ergodicity.  
node20: Recurrent networks learn continuous attractors for invariant pattern completion via corrupted input restoration.  
node21: Hierarchical generative model uses Bayesian inference and local learning to extract sparse, distributed neural representations.  
node22: HD cell network dynamics explain direction coding via symmetric weights and self-motion integration for stable calibration.  
node23: Neural networks outperform statistical methods in classifying liver diseases using ultrasound-derived texture parameters.

the connection relationship among the nodes mentioned:
 <node0, node9>,<node0, node11>,<node0, node22>,<node1, node9>,<node2, node21>,<node2, node22>,<node3, node9>,<node4, node22>,<node5, node14>,<node6, node18>,<node7, node15>,<node7, node17>,<node8, node9>,<node8, node11>,<node9, node10>,<node9, node12>,<node9, node23>,<node11, node21>,<node13, node20>,<node13, node21>,<node14, node15>,<node14, node19>,<node15, node16>,<node15, node17>,<node16, node17>,<node20, node22>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","Yes, they have citation relationships","

node0: Hippocampal remapping in old vs young animals; dentate gyrus and self-localization errors explain bimodal ensemble correlations.  
node1: Multiassociative memory models enable many-to-many mappings using cascaded networks, addressing cognitive modeling challenges.  
node2: Rectified Gaussian uses nonnegative variables for multimodal distributions, modeling pattern manifolds via cooperative/competitive structures.  
node3: Visual attention guides barn owl auditory map plasticity via a Kohonen model, showing developmental shifts with prism-like visual adjustments.  
node4: Neural population decoding reconstructs physical variables (e.g., rat trajectories), comparing Bayesian/basis methods near theoretical limits.  
node5: Gibbs sampler convergence bounds for Bayesian image restoration, scaling quadratically with pixels.  
node6: Metropolis-Hastings chains with high self-probability lack CLTs; examples include independence samplers and MALA.  
node7: Adaptive self-regenerative MCMC updates via regeneration, improving efficiency in Bayesian computations like predator-prey modeling.  
node8: DSOM model uses leaky integrators for temporal compositionality, enabling hierarchical dynamic bindings via temporal correlations.  
node9: Neural network combines self-organized feedforward synapses with feedback suppression to learn non-linearly separable tasks.  
node10: Reinforcement learning avoids collisions in robots via discrete state coding and Temporal Difference rules.  
node11: Self-organized feature maps in neural networks (citing PDP literature).  
node12: Competitive anti-Hebbian learning extracts invariants (e.g., depth) from stereograms without supervision.  
node13: Attractor networks model sensory analysis/synthesis using hidden variables, with linear/nonlinear architectures for pattern completion.  
node14: Minorization conditions and simulations estimate MCMC convergence rates when analytical methods fail.  
node15: Adaptive MCMC via regeneration allows infinite kernel updates without disrupting stationary distribution consistency.  
node16: Adaptive Metropolis adjusts proposal distributions adaptively, ensuring ergodicity with strong numerical performance.  
node17: Self-regenerative MCMC constructs efficient chains via auxiliary sampling, offering adaptability and simplicity.  
node18: Exact n-step transition probabilities for independence Metropolis samplers, extending eigenvalue analysis to finite/continuous spaces.  
node19: Gibbs sampler convergence depends on region boundary smoothness; jagged edges hinder geometric ergodicity.  
node20: Recurrent networks learn continuous attractors for invariant pattern completion via corrupted input restoration.  
node21: Hierarchical generative model uses Bayesian inference and local learning to extract sparse, distributed neural representations.  
node22: HD cell network dynamics explain direction coding via symmetric weights and self-motion integration for stable calibration.  
node23: Neural networks outperform statistical methods in classifying liver diseases using ultrasound-derived texture parameters.","node0:Academic paper with title and abstract: Separating hippocampal maps  Spatial Functions of the Hippocampal Formation and the: The place fields of hippocampal cells in old animals sometimes change when an animal is removed from and then returned to an environment [ Barnes et al., 1997 ] . The ensemble correlation between two sequential visits to the same environment shows a strong bimodality for old animals (near 0, indicative of remapping, and greater than 0.7, indicative of a similar representation between experiences), but a strong unimodality for young animals (greater than 0.7, indicative of a similar representation between experiences). One explanation for this is the multi-map hypothesis in which multiple maps are encoded in the hippocampus: old animals may sometimes be returning to the wrong map. A theory proposed by Samsonovich and McNaughton (1997) suggests that the Barnes et al. experiment implies that the maps are pre-wired in the CA3 region of hippocampus. Here, we offer an alternative explanation in which orthogonalization properties in the dentate gyrus (DG) region of hippocampus interact with errors in self-localization (reset of the path integrator on re-entry into the environment) to produce the bimodality.
node1:Academic paper with title and abstract: Multiassociative Memory: This paper discusses the problem of how to implement many-to-many, or multi-associative, mapping within connectionist models. Traditional symbolic approaches work through explicit representation of all alternatives via stored links, or implicitly through enumerative algorithms. Classical pattern association models ignore the issue of generating multiple outputs for a single input pattern, and while recent research on recurrent networks is promising, the field has not clearly focused upon multi-associativity as a goal. In this paper, we define multiassociative memory (MM), and several possible variants, and discuss its utility in general cognitive modeling. We extend sequential cascaded networks (Pollack 1987, 1990a) to fit the task, and perform several initial experiments which demonstrate the feasibility of the concept.
node2:Academic paper with title and abstract: The Rectified Gaussian Distribution: A simple but powerful modification of the standard Gaussian distribution is studied. The variables of the rectified Gaussian are constrained to be nonnegative, enabling the use of nonconvex energy functions. Two multimodal examples, the competitive and cooperative distributions, illustrate the representational power of the rectified Gaussian. Since the cooperative distribution can represent the translations of a pattern, it demonstrates the potential of the rectified Gaussian for modeling pattern manifolds.
node3:Academic paper with title and abstract: A Model of Visually Guided Plasticity of the Auditory Spatial Map in the Barn Owl: In the barn owl, the self-organization of the auditory map of space in the external nucleus of the inferior colliculus (ICx) is strongly influenced by vision, but the nature of this interaction is unknown. In this paper a biologically plausible and mini-malistic model of ICx self-organization is proposed where the ICx receives a learn signal based on the owl's visual attention. When the visual attention is focused in the same spatial location as the auditory input, the learn signal is turned on, and the map is allowed to adapt. A two-dimensional Kohonen map is used to model the ICx, and simulations were performed to evaluate how the learn signal would affect the auditory map. When primary area of visual attention was shifted at different spatial locations, the auditory map shifted to the corresponding location. The shift was complete when done early in the development and partial when done later. Similar results have been observed in the barn owl with its visual field modified with prisms. Therefore, the simulations suggest that a learn signal, based on visual attention, is a possible explanation for the auditory plasticity.
node4:Academic paper with title and abstract: Interpreting neuronal population activity by reconstruction: A unified framework with application to hippocampal place cells: Physical variables such as the orientation of a line in the visual field or the location of the body in space are coded as activity levels in populations of neurons. Reconstruction or decoding is an inverse problem in which the physical variables are estimated from observed neural activity. Reconstruction is useful first in quantifying how much information about the physical variables is present in the population, and second, in providing insight into how the brain might use distributed representations in solving related computational problems such as visual object recognition and spatial navigation. Two classes of reconstruction methods, namely, probabilistic or Bayesian methods and basis function methods, are discussed. They include important existing methods as special cases, such as population vector coding, optimal linear estimation and template matching. As a representative example for the reconstruction problem, different methods were applied to multi-electrode spike train data from hippocampal place cells in freely moving rats. The reconstruction accuracy of the trajectories of the rats was compared for the different methods. Bayesian methods were especially accurate when a continuity constraint was enforced, and the best errors were within a factor of two of the the information-theoretic limit on how accurate any reconstruction can be, which were comparable with the intrinsic experimental errors in position tracking. In addition, the reconstruction analysis uncovered some interesting aspects of place cell activity, such as the tendency for erratic jumps of the reconstructed trajectory when the animal stopped running. In general, the theoretical values of the minimal achievable reconstruction errors quantify how accurately a physical variable is encoded in the neuronal population in the sense of mean square error, regardless of the method used for reading out the information. One related result is that the theoretical accuracy is independent of the width of the Gaussian tuning function only in two dimensions. Finally, all the reconstruction methods considered in this paper can be implemented by a unified neural network architecture, which the brain could feasibly use to solve related problems.
node5:Academic paper with title and abstract: Bounding Convergence Time of the Gibbs Sampler in Bayesian Image Restoration: This paper gives precise, easy to compute bounds on the convergence time of the Gibbs sampler used in Bayesian image reconstruction. For sampling from the Gibbs distribution both with and without the presence of an external field, bounds that are N 2 in the number of pixels are obtained, with a proportionality constant that is easy to calculate. Some key words: Bayesian image restoration; Convergence; Gibbs sampler; Ising model; Markov chain Monte Carlo.
node6:Academic paper with title and abstract: A note on acceptance rate criteria for CLTs for Hastings-Metropolis algorithms: This note considers positive recurrent Markov chains where the probability of remaining in the current state is arbitrarily close to 1. Specifically, conditions are given which ensure the non-existence of central limit theorems for ergodic averages of functionals of the chain. The results are motivated by applications for Metropolis-Hastings algorithms which are constructed in terms of a rejection probability, (where a rejection involves remaining at the current state). Two examples for commonly used algorithms are given, for the independence sampler and the Metropolis adjusted Langevin algorithm. The examples are rather specialised, although in both cases, the problems which arise are typical of problems commonly occurring for the particular algorithm being used. 0 I would like to thank Kerrie Mengersen Jeff Rosenthal and Richard Tweedie for useful conversations on the subject of this paper.
node7:Academic paper with title and abstract: Adaptation for Self Regenerative MCMC  SUMMARY: The self regenerative MCMC is a tool for constructing a Markov chain with a given stationary distribution by constructing an auxiliary chain with some other stationary distribution . Elements of the auxiliary chain are picked a suitable random number of times so that the resulting chain has the stationary distribution , Sahu and Zhigljavsky (1998). In this article we provide a generic adaptation scheme for the above algorithm. The adaptive scheme is to use the knowledge of the stationary distribution gathered so far and then to update during the course of the simulation. This method is easy to implement and often leads to considerable improvement. We obtain theoretical results for the adaptive scheme. Our proposed methodology is illustrated with a number of realistic examples in Bayesian computation and its performance is compared with other available MCMC techniques. In one of our applications we develop a non-linear dynamics model for modeling predator-prey relationships in the wild.
node8:Academic paper with title and abstract: Temporal Compositional Processing by a DSOM Hierarchical Model: Any intelligent system, whether human or robotic, must be capable of dealing with patterns over time. Temporal pattern processing can be achieved if the system has a short-term memory capacity (STM) so that different representations can be maintained for some time. In this work we propose a neural model wherein STM is realized by leaky integrators in a self-organizing system. The model exhibits compo-sitionality, that is, it has the ability to extract and construct progressively complex and structured associations in an hierarchical manner, starting with basic and primitive (temporal) elements. An important feature of the proposed model is the use of temporal correlations to express dynamic bindings.
node9:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node10:Academic paper with title and abstract:  ""Adaptive State Space Quantization for Reinforcement Learning of Collision-Free Navigation"", : The paper describes a self-learning control system for a mobile robot. Based on sensor information the control system has to provide a steering signal in such a way that collisions are avoided. Since in our case no `examples' are available, the system learns on the basis of an external reinforcement signal which is negative in case of a collision and zero otherwise. Rules from Temporal Difference learning are used to find the correct mapping between the (discrete) sensor input space and the steering signal. We describe the algorithm for learning the correct mapping from the input (state) vector to the output (steering) signal, and the algorithm which is used for a discrete coding of the input state space.
node11:Academic paper with title and abstract:  Self-organized formation of typologically correct feature maps. : 2] D. E. Rumelhart, G. E. Hinton and R. J. Williams, ""Learning Internal Representations by Error Propagation"", in D. E. Rumelhart and J. L. McClelland (eds.) Parallel Distributed Processing: Explorations in the Microstructure of Cognition (Vol. 1), MIT Press (1986).
node12:Academic paper with title and abstract:  Competitive anti-hebbian learning of invariants. : Although the detection of invariant structure in a given set of input patterns is vital to many recognition tasks, connectionist learning rules tend to focus on directions of high variance (principal components). The prediction paradigm is often used to reconcile this dichotomy; here we suggest a more direct approach to invariant learning based on an anti-Hebbian learning rule. An unsupervised two-layer network implementing this method in a competitive setting learns to extract coherent depth information from random-dot stereograms.
node13:Academic paper with title and abstract:  Pattern analysis and synthesis in attractor neural networks. : The representation of hidden variable models by attractor neural networks is studied. Memories are stored in a dynamical attractor that is a continuous manifold of fixed points, as illustrated by linear and nonlinear networks with hidden neurons. Pattern analysis and synthesis are forms of pattern completion by recall of a stored memory. Analysis and synthesis in the linear network are performed by bottom-up and top-down connections. In the nonlinear network, the analysis computation additionally requires rectification nonlinearity and inner product inhibition between hidden neurons. One popular approach to sensory processing is based on generative models, which assume that sensory input patterns are synthesized from some underlying hidden variables. For example, the sounds of speech can be synthesized from a sequence of phonemes, and images of a face can be synthesized from pose and lighting variables. Hidden variables are useful because they constitute a simpler representation of the variables that are visible in the sensory input. Using a generative model for sensory processing requires a method of pattern analysis. Given a sensory input pattern, analysis is the recovery of the hidden variables from which it was synthesized. In other words, analysis and synthesis are inverses of each other. There are a number of approaches to pattern analysis. In analysis-by-synthesis, the synthetic model is embedded inside a negative feedback loop[1]. Another approach is to construct a separate analysis model[2]. This paper explores a third approach, in which visible-hidden pairs are embedded as attractive fixed points, or attractors, in the state space of a recurrent neural network. The attractors can be regarded as memories stored in the network, and analysis and synthesis as forms of pattern completion by recall of a memory. The approach is illustrated with linear and nonlinear network architectures. In both networks, the synthetic model is linear, as in principal
node14:Academic paper with title and abstract:  Minorization conditions and convergence rates for Markov chain Monte Carlo. : Markov chain Monte Carlo (MCMC) methods, including the Gibbs sampler and the Metropolis-Hastings algorithm, are very commonly used in Bayesian statistics for sampling from complicated, high-dimensional posterior distributions. A continuing source of uncertainty is how long such a sampler must be run in order to converge approximately to its target stationary distribution. Rosenthal (1995b) presents a method to compute rigorous theoretical upper bounds on the number of iterations required to achieve a specified degree of convergence in total variation distance by verifying drift and minorization conditions. We propose the use of auxiliary simulations to estimate the numerical values needed in Rosenthal's theorem. Our simulation method makes it possible to compute quantitative convergence bounds for models for which the requisite analytical computations would be prohibitively difficult or impossible. On the other hand, although our method appears to perform well in our example problems, it can not provide the guarantees offered by analytical proof. Acknowledgements. We thank Brad Carlin for assistance and encouragement.
node15:Academic paper with title and abstract:  G.O. and Sahu, S.K. (1997) Adaptive Markov chain Monte Carlo through regeneration. : Markov chain Monte Carlo (MCMC) is used for evaluating expectations of functions of interest under a target distribution . This is done by calculating averages over the sample path of a Markov chain having as its stationary distribution. For computational efficiency, the Markov chain should be rapidly mixing. This can sometimes be achieved only by careful design of the transition kernel of the chain, on the basis of a detailed preliminary exploratory analysis of . An alternative approach might be to allow the transition kernel to adapt whenever new features of are encountered during the MCMC run. However, if such adaptation occurs infinitely often, the stationary distribution of the chain may be disturbed. We describe a framework, based on the concept of Markov chain regeneration, which allows adaptation to occur infinitely often, but which does not disturb the stationary distribution of the chain or the consistency of sample-path averages. Key Words: Adaptive method; Bayesian inference; Gibbs sampling; Markov chain Monte Carlo;
node16:Academic paper with title and abstract:  An Adaptive Metropolis algorithm. : A proper choice of a proposal distribution for MCMC methods, e.g. for the Metropolis-Hastings algorithm, is well known to be a crucial factor for the convergence of the algorithm. In this paper we introduce an adaptive Metropolis Algorithm (AM), where the Gaussian proposal distribution is updated along the process using the full information cumulated so far. Due to the adaptive nature of the process, the AM algorithm is non-Markovian, but we establish here that it has the correct ergodic properties. We also include the results of our numerical tests, which indicate that the AM algorithm competes well with traditional Metropolis-Hastings algorithms, and demonstrate that AM provides an easy to use algorithm for practical computation. 1991 Mathematics Subject Classification: 65C05, 65U05. Keywords: adaptive MCMC, comparison, convergence, ergodicity, Markov Chain
node17:Academic paper with title and abstract:  Self regenerative Markov chain Monte Carlo. : We propose a new method of construction of Markov chains with a given stationary distribution . This method is based on construction of an auxiliary chain with some other stationary distribution and picking elements of this auxiliary chain a suitable number of times. The proposed method has many advantages over its rivals. It is easy to implement; it provides a simple analysis; it can be faster and more efficient than the currently available techniques and it can also be adapted during the course of the simulation. We make theoretical and numerical comparisons of the characteristics of the proposed algorithm with some other MCMC techniques.
node18:Academic paper with title and abstract:  Exact transition probabilities for the independence Metropolis sampler. : A recent result of Jun Liu's has shown how to compute explicitly the eigen-values and eigenvectors for the Markov chain derived from a special case of the Hastings sampling algorithm, known as the indepdendence Metropolis sampler. In this note, we show how to extend the result to obtain exact n-step transition probabilities for any n. This is done first for a chain on a finite state space, and then extended to a general (discrete or continuous) state space. The paper concludes with some implications for diagnostic tests of convergence of Markov chain samplers.
node19:Academic paper with title and abstract:  On convergence rates of Gibbs samplers for uniform distributions. : We consider a Gibbs sampler applied to the uniform distribution on a bounded region R R d . We show that the convergence properties of the Gibbs sampler depend greatly on the smoothness of the boundary of R. Indeed, for sufficiently smooth boundaries the sampler is uniformly ergodic, while for jagged boundaries the sampler could fail to even be geometrically ergodic.
node20:Academic paper with title and abstract:  Learning continuous attractors in recurrent networks. : One approach to invariant object recognition employs a recurrent neural network as an associative memory. In the standard depiction of the network's state space, memories of objects are stored as attractive fixed points of the dynamics. I argue for a modification of this picture: if an object has a continuous family of instantiations, it should be represented by a continuous attractor. This idea is illustrated with a network that learns to complete patterns. To perform the task of filling in missing information, the network develops a continuous attractor that models the manifold from which the patterns are drawn. From a statistical viewpoint, the pattern completion task allows a formulation of unsupervised A classic approach to invariant object recognition is to use a recurrent neural network as an associative memory[1]. In spite of the intuitive appeal and biological plausibility of this approach, it has largely been abandoned in practical applications. This paper introduces two new concepts that could help resurrect it: object representation by continuous attractors, and learning attractors by pattern completion. In most models of associative memory, memories are stored as attractive fixed points at discrete locations in state space[1]. Discrete attractors may not be appropriate for patterns with continuous variability, like the images of a three-dimensional object from different viewpoints. When the instantiations of an object lie on a continuous pattern manifold, it is more appropriate to represent objects by attractive manifolds of fixed points, or continuous attractors. To make this idea practical, it is important to find methods for learning attractors from examples. A naive method is to train the network to retain examples in short-term memory. This method is deficient because it does not prevent the network from storing spurious fixed points that are unrelated to the examples. A superior method is to train the network to restore examples that have been corrupted, so that it learns to complete patterns by filling in missing information. learning in terms of regression rather than density estimation.
node21:Academic paper with title and abstract:  Generative models for discovering sparse distributed representations. : We describe a hierarchical, generative model that can be viewed as a non-linear generalization of factor analysis and can be implemented in a neural network. The model uses bottom-up, top-down and lateral connections to perform Bayesian perceptual inference correctly. Once perceptual inference has been performed the connection strengths can be updated using a very simple learning rule that only requires locally available information. We demon strate that the network learns to extract sparse, distributed, hierarchical representations.
node22:Academic paper with title and abstract:  Representation of spatial orientation by the intrinsic dynamics of the head-direction cell ensemble: a theory. : The head-direction (HD) cells found in the limbic system in freely moving rats represent the instantaneous head direction of the animal in the horizontal plane regardless of the location of the animal. The internal direction represented by these cells uses both self-motion information for inertially based updating and familiar visual landmarks for calibration. Here, a model of the dynamics of the HD cell ensemble is presented. The stability of a localized static activity profile in the network and a dynamic shift mechanism are explained naturally by synaptic weight distribution components with even and odd symmetry, respectively. Under symmetric weights or symmetric reciprocal connections, a stable activity profile close to the known directional tuning curves will emerge. By adding a slight asymmetry to the weights, the activity profile will shift continuously without disturbances to its shape, and the shift speed can be accurately controlled by the strength of the odd-weight component. The generic formulation of the shift mechanism is determined uniquely within the current theoretical framework. The attractor dynamics of the system ensures modality-independence of the internal representation and facilitates the correction for cumulative error by the putative local-view detectors. The model offers a specific one-dimensional example of a computational mechanism in which a truly world-centered representation can be derived from observer-centered sensory inputs by integrating self-motion information.
node23:Academic paper with title and abstract:  Application of neural networks for the classification of diffuse liver disease by quantitative echography. Ultrasonic Imaging, : Three different methods were investigated to determine their ability to detect and classify various categories of diffuse liver disease. A statistical method, i.e., discriminant analysis, a supervised neural network called backpropagation and a nonsupervised, self-organizing feature map were examined. The investigation was performed on the basis of a previously selected set of acoustic and image texture parameters. The limited number of patients was successfully extended by generating additional but independent data with identical statistical properties. The generated data were used for training and test sets. The final test was made with the original patient data as a validation set. It is concluded that neural networks are an attractive alternative to traditional statistical techniques when dealing with medical detection and classification tasks. Moreover, the use of generated data for training the networks and the discriminant classifier has been shown to be justified and profitable.",cora_link,lp
"Classify the relationship between two essays denoted as node13 and node17 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Analyzing conflict databases using machine learning methods for knowledge discovery.  
node1: Using ConDet algorithm to simplify knowledge structures via feature selection and condensation for better understanding.  
node2: PCA-based penalty term for neural networks to accurately estimate complexity and prevent overfitting.  
node3: Greedy feature selection algorithms improve efficiency without sacrificing accuracy in regression and handwriting recognition.  
node4: Unsupervised neural networks with projection pursuit methods to explore multimodality in data.  
node5: Transforming regression to classification via interval discretization and misclassification costs with RECLA system.  
node6: Acknowledgments and funding details without abstract content.  
node7: Automated model selection via local optimization using empirical evaluation, tested with Magnus system.  
node8: Research on wrappers for performance and oblivious decision graphs (abstract missing).  
node9: MDL-based feature selection for efficient and accurate subset selection outperforming cross-validation methods.  
node10: Underwater mammal sound classification using wavelet decomposition and BCM neural networks for high accuracy.  
node11: Combining exploratory and projection pursuit methods to improve neural network generalization with penalty terms.  
node12: BCM theory's statistical links to Projection Pursuit for analyzing visual cortex plasticity and network stability.  
node13: Hybrid supervised/unsupervised neural network for face recognition with overfitting reduction techniques.  
node14: Re-defining feature relevance and subset selection using cross-validation for algorithm-dependent feature choice.  
node15: MLC++ C++ library for machine learning algorithms, emphasizing unified design and research tools.  
node16: Wrapper method for feature selection addresses overfitting with best-first search and dynamic search space adjustments.  
node17: Phonetic classification using Lyon's cochlear model and hybrid neural networks without time normalization.  
node18: Oblivious decision trees and pruning for handling irrelevant features in case-based learning.  
node19: Simpler decision trees via genetic feature selection (SET-Gen) maintaining accuracy and improving comprehensibility.  
node20: Feature subset selection framed as probabilistic search with trade-offs between estimate accuracy and exploration.  
node21: Rule-based DNF decision rules for interpretable function prediction with competitive regression performance.  
node22: Unsupervised neural network for feature extraction emphasizing multimodality, linked to BCM neuron learning rules.  
node23: Hypothetical cortical architecture for visual object recognition using Memory-Based Models and biophysical mechanisms.  
node24: Theory linking neural networks to approximation methods (GRBF, splines) for function reconstruction and learning.

the connection relationship among the nodes mentioned:
 <node0, node14>,<node1, node14>,<node1, node18>,<node2, node14>,<node3, node14>,<node4, node10>,<node4, node12>,<node4, node13>,<node4, node22>,<node5, node8>,<node5, node14>,<node5, node21>,<node6, node12>,<node7, node14>,<node9, node14>,<node10, node12>,<node10, node13>,<node10, node22>,<node11, node12>,<node11, node13>,<node11, node17>,<node11, node22>,<node12, node13>,<node12, node17>,<node12, node22>,<node12, node23>,<node14, node16>,<node14, node18>,<node14, node19>,<node14, node20>,<node15, node16>,<node16, node20>,<node17, node22>,<node23, node24>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","Yes, they have citation relationships","

node0: Analyzing conflict databases using machine learning methods for knowledge discovery.  
node1: Using ConDet algorithm to simplify knowledge structures via feature selection and condensation for better understanding.  
node2: PCA-based penalty term for neural networks to accurately estimate complexity and prevent overfitting.  
node3: Greedy feature selection algorithms improve efficiency without sacrificing accuracy in regression and handwriting recognition.  
node4: Unsupervised neural networks with projection pursuit methods to explore multimodality in data.  
node5: Transforming regression to classification via interval discretization and misclassification costs with RECLA system.  
node6: Acknowledgments and funding details without abstract content.  
node7: Automated model selection via local optimization using empirical evaluation, tested with Magnus system.  
node8: Research on wrappers for performance and oblivious decision graphs (abstract missing).  
node9: MDL-based feature selection for efficient and accurate subset selection outperforming cross-validation methods.  
node10: Underwater mammal sound classification using wavelet decomposition and BCM neural networks for high accuracy.  
node11: Combining exploratory and projection pursuit methods to improve neural network generalization with penalty terms.  
node12: BCM theory's statistical links to Projection Pursuit for analyzing visual cortex plasticity and network stability.  
node13: Hybrid supervised/unsupervised neural network for face recognition with overfitting reduction techniques.  
node14: Re-defining feature relevance and subset selection using cross-validation for algorithm-dependent feature choice.  
node15: MLC++ C++ library for machine learning algorithms, emphasizing unified design and research tools.  
node16: Wrapper method for feature selection addresses overfitting with best-first search and dynamic search space adjustments.  
node17: Phonetic classification using Lyon's cochlear model and hybrid neural networks without time normalization.  
node18: Oblivious decision trees and pruning for handling irrelevant features in case-based learning.  
node19: Simpler decision trees via genetic feature selection (SET-Gen) maintaining accuracy and improving comprehensibility.  
node20: Feature subset selection framed as probabilistic search with trade-offs between estimate accuracy and exploration.  
node21: Rule-based DNF decision rules for interpretable function prediction with competitive regression performance.  
node22: Unsupervised neural network for feature extraction emphasizing multimodality, linked to BCM neuron learning rules.  
node23: Hypothetical cortical architecture for visual object recognition using Memory-Based Models and biophysical mechanisms.  
node24: Theory linking neural networks to approximation methods (GRBF, splines) for function reconstruction and learning.","node0:Academic paper with title and abstract: Knowledge Discovery in International Conflict Databases: In the last decade research in Machine Learning has developed a variety of powerful tools for inductive learning and data analysis. On the other hand, research in International Relations has developed a variety of different conflict databases that are mostly analyzed with classical statistical methods. As these databases are in general of a symbolic nature, they provide an interesting domain for application of Machine Learning algorithms. This paper gives a short overview of available conflict databases and subsequently concentrates on the application of machine learning methods for the analysis and interpretation of such databases.
node1:Academic paper with title and abstract: Induction of Condensed Determinations: In this paper we suggest determinations as a representation of knowledge that should be easy to understand. We briefly review determinations, which can be displayed in a tabular format, and their use in prediction, which involves a simple matching process. We describe ConDet, an algorithm that uses feature selection to construct determinations from training data, augmented by a condensation process that collapses rows to produce simpler structures. We report experiments that show condensation reduces complexity with no loss of accuracy, then discuss ConDet's relation to other work and outline directions for future studies.
node2:Academic paper with title and abstract: The Effective Size of a Neural Network: A Principal Component Approach: Often when learning from data, one attaches a penalty term to a standard error term in an attempt to prefer simple models and prevent overfitting. Current penalty terms for neural networks, however, often do not take into account weight interaction. This is a critical drawback since the effective number of parameters in a network usually differs dramatically from the total number of possible parameters. In this paper, we present a penalty term that uses Principal Component Analysis to help detect functional redundancy in a neural network. Results show that our new algorithm gives a much more accurate estimate of network complexity than do standard approaches. As a result, our new term should be able to improve techniques that make use of a penalty term, such as weight decay, weight pruning, feature selection, Bayesian, and prediction-risk tech niques.
node3:Academic paper with title and abstract: On the Greediness of Feature Selection Algorithms: Based on our analysis and experiments using real-world datasets, we find that the greediness of forward feature selection algorithms does not severely corrupt the accuracy of function approximation using the selected input features, but improves the efficiency significantly. Hence, we propose three greedier algorithms in order to further enhance the efficiency of the feature selection processing. We provide empirical results for linear regression, locally weighted regression and k-nearest-neighbor models. We also propose to use these algorithms to develop an offline Chinese and Japanese handwriting recognition system with auto matically configured, local models.
node4:Academic paper with title and abstract: Multimodality Exploration in Training an Unsupervised Projection Pursuit Neural Network: Graphical inspection of multimodality is demonstrated using unsupervised lateral-inhibition neural networks. Three projection pursuit indices are compared on low dimensional simulated and real-world data: principal components [22], Legendre poly nomial [6] and projection pursuit network [16].
node5:Academic paper with title and abstract: Search-based Class Discretization: We present a methodology that enables the use of classification algorithms on regression tasks. We implement this method in system RECLA that transforms a regression problem into a classification one and then uses an existent classification system to solve this new problem. The transformation consists of mapping a continuous variable into an ordinal variable by grouping its values into an appropriate set of intervals. We use misclassification costs as a means to reflect the implicit ordering among the ordinal values of the new variable. We describe a set of alternative discretization methods and, based on our experimental results, justify the need for a search-based approach to choose the best method. Our experimental results confirm the validity of our search-based approach to class discretization, and reveal the accuracy benefits of adding misclassification costs.
node6:Academic paper with title and abstract: Contextually Guided Unsupervised Learning using Local Multivariate Binary Processors: We thank Sue Becker, Peter Hancock and Darragh Smyth for helpful comments on this work. The work of Dario Floreano and Bill Phillips was supported by a Network Grant from the Human Capital and Mobility Programme of the European Community.
node7:Academic paper with title and abstract: Automated model selection: Many algorithms have parameters that should be set by the user. For most machine learning algorithms parameter setting is a non-trivial task that influence knowledge model returned by the algorithm. Parameter values are usually set approximately according to some characteristics of the target problem, obtained in different ways. The usual way is to use background knowledge about the target problem (if any) and perform some testing experiments. The paper presents an approach to automated model selection based on local optimization that uses an empirical evaluation of the constructed concept description to guide the search. The approach was tested by using the inductive concept learning system Magnus
node8:Academic paper with title and abstract:  Wrappers for Performance Enhancement and Oblivious Decision Graphs. : 
node9:Academic paper with title and abstract:  Compression-Based Feature Subset Selection, : Irrelevant and redundant features may reduce both predictive accuracy and comprehensibility of induced concepts. Most common Machine Learning approaches for selecting a good subset of relevant features rely on cross-validation. As an alternative, we present the application of a particular Minimum Description Length (MDL) measure to the task of feature subset selection. Using the MDL principle allows taking into account all of the available data at once. The new measure is information-theoretically plausible and yet still simple and therefore efficiently computable. We show empirically that this new method for judging the value of feature subsets is more efficient than and performs at least as well as methods based on cross-validation. Domains with both a large number of training examples and a large number of possible features yield the biggest gains in efficiency. Thus our new approach seems to scale up better to large learning problems than previous methods.
node10:Academic paper with title and abstract:  Classification of underwater mammals using feature extraction based on time-frequency analysis and bcm theory. : Underwater mammal sound classification is demonstrated using a novel application of wavelet time/frequency decomposition and feature extraction using a BCM unsupervised network. Different feature extraction methods and different wavelet representations are studied. The system achieves outstanding classification performance even when tested with mammal sounds recorded at very different locations (from those used for training). The improved results suggest that nonlinear feature extraction from wavelet representations outperforms different linear choices of basis functions.
node11:Academic paper with title and abstract:  Combining exploratory projection pursuit and projection pursuit regression with application to neural networks, 1991. : We present a novel classification and regression method that combines exploratory projection pursuit (unsupervised training) with projection pursuit regression (supervised training), to yield a new family of cost/complexity penalty terms. Some improved generalization properties are demonstrated on real world problems.
node12:Academic paper with title and abstract:  Objective function formulation of the BCM theory of visual cortical plasticity: Statistical connections, stability conditions. : In this paper, we present an objective function formulation of the BCM theory of visual cortical plasticity that permits us to demonstrate the connection between the unsupervised BCM learning procedure and various statistical methods, in particular, that of Projection Pursuit. This formulation provides a general method for stability analysis of the fixed points of the theory and enables us to analyze the behavior and the evolution of the network under various visual rearing conditions. It also allows comparison with many existing unsupervised methods. This model has been shown successful in various applications such as phoneme and 3D object recognition. We thus have the striking and possibly highly significant result that a biological neuron is performing a sophisticated statistical procedure.
node13:Academic paper with title and abstract:  Face recognition using a hybrid supervised/unsupervised neural network, 1992. : A system for automatic face recognition is presented. It consists of several steps; Automatic detection of the eyes and mouth is followed by a spatial normalization of the images. The classification of the normalized images is carried out by a hybrid (supervised and unsupervised) Neural Network. Two methods for reducing the overfitting a common problem in high dimensional classification schemes are presented, and the superiority of their combination is demonstrated.
node14:Academic paper with title and abstract:  Irrelevant features and the subset selection problem. : We address the problem of finding a subset of features that allows a supervised induction algorithm to induce small high-accuracy concepts. We examine notions of relevance and irrelevance, and show that the definitions used in the machine learning literature do not adequately partition the features into useful categories of relevance. We present definitions for irrelevance and for two degrees of relevance. These definitions improve our understanding of the behavior of previous subset selection algorithms, and help define the subset of features that should be sought. The features selected should depend not only on the features and the target concept, but also on the induction algorithm. We describe a method for feature subset selection using cross-validation that is applicable to any induction algorithm, and discuss experiments conducted with ID3 and C4.5 on artificial and real datasets.
node15:Academic paper with title and abstract:  A machine learning library in C++. : We present MLC ++ , a library of C ++ classes and tools for supervised Machine Learning. While MLC ++ provides general learning algorithms that can be used by end users, the main objective is to provide researchers and experts with a wide variety of tools that can accelerate algorithm development, increase software reliability, provide comparison tools, and display information visually. More than just a collection of existing algorithms, MLC ++ is an attempt to extract commonalities of algorithms and decompose them for a unified view that is simple, coherent, and extensible. In this paper we discuss the problems MLC ++ aims to solve, the design of MLC ++ , and the current functionality.
node16:Academic paper with title and abstract:  Feature subset selection using the wrapper method: Overfitting and dynamic search space. : In the wrapper approach to feature subset selection, a search for an optimal set of features is made using the induction algorithm as a black box. The estimated future performance of the algorithm is the heuristic guiding the search. Statistical methods for feature subset selection including forward selection, backward elimination, and their stepwise variants can be viewed as simple hill-climbing techniques in the space of feature subsets. We utilize best-first search to find a good feature subset and discuss overfitting problems that may be associated with searching too many feature subsets. We introduce compound operators that dynamically change the topology of the search space to better utilize the information available from the evaluation of feature subsets. We show that compound operators unify previous approaches that deal with relevant and irrelevant features. The improved feature subset selection yields significant improvements for real-world datasets when using the ID3 and the Naive-Bayes induction algorithms.
node17:Academic paper with title and abstract:  Phonetic classification of TIMIT segments preprocessed with lyon\'s cochlear model using a supervised/unsupervised hybrid neural network. : We report results on vowel and stop consonant recognition with tokens extracted from the TIMIT database. Our current system differs from others doing similar tasks in that we do not use any specific time normalization techniques. We use a very detailed biologically motivated input representation of the speech tokens - Lyon's cochlear model as implemented by Slaney [20]. This detailed, high dimensional representation, known as a cochleagram, is classified by either a back-propagation or by a hybrid supervised/unsupervised neural network classifier. The hybrid network is composed of a biologically motivated unsupervised network and a supervised back-propagation network. This approach produces results comparable to those obtained by others without the addition of time normalization.
node18:Academic paper with title and abstract:  Oblivious decision trees and abstract cases. : In this paper, we address the problem of case-based learning in the presence of irrelevant features. We review previous work on attribute selection and present a new algorithm, Oblivion, that carries out greedy pruning of oblivious decision trees, which effectively store a set of abstract cases in memory. We hypothesize that this approach will efficiently identify relevant features even when they interact, as in parity concepts. We report experimental results on artificial domains that support this hypothesis, and experiments with natural domains that show improvement in some cases but not others. In closing, we discuss the implications of our experiments, consider additional work on irrelevant features, and outline some directions for future research.
node19:Academic paper with title and abstract:  Growing Simpler Decision Trees to Facilitate Knowledge Discovery, : When using machine learning techniques for knowledge discovery, output that is comprehensible to a human is as important as predictive accuracy. We introduce a new algorithm, SET-Gen, that improves the comprehensibility of decision trees grown by standard C4.5 without reducing accuracy. It does this by using genetic search to select the set of input features C4.5 is allowed to use to build its tree. We test SET-Gen on a wide variety of real-world datasets and show that SET-Gen trees are significantly smaller and reference significantly fewer features than trees grown by C4.5 without using SET-Gen. Statistical significance tests show that the accuracies of SET-Gen's trees are either not distinguishable from or are more accurate than those of the original C4.5 trees on all ten datasets tested.
node20:Academic paper with title and abstract:  Feature subset selection as search with probabilistic estimates. : Irrelevant features and weakly relevant features may reduce the comprehensibility and accuracy of concepts induced by supervised learning algorithms. We formulate the search for a feature subset as an abstract search problem with probabilistic estimates. Searching a space using an evaluation function that is a random variable requires trading off accuracy of estimates for increased state exploration. We show how recent feature subset selection algorithms in the machine learning literature fit into this search problem as simple hill climbing approaches, and conduct a small experiment using a best-first search technique.
node21:Academic paper with title and abstract:  Rule-based machine learning methods for function prediction. : We describe a machine learning method for predicting the value of a real-valued function, given the values of multiple input variables. The method induces solutions from samples in the form of ordered disjunctive normal form (DNF) decision rules. A central objective of the method and representation is the induction of compact, easily interpretable solutions. This rule-based decision model can be extended to search efficiently for similar cases prior to approximating function values. Experimental results on real-world data demonstrate that the new techniques are competitive with existing machine learning and statistical methods and can sometimes yield superior regression performance.
node22:Academic paper with title and abstract:  (1992) Feature extraction using an unsupervised neural network. : A novel unsupervised neural network for dimensionality reduction that seeks directions emphasizing multimodality is presented, and its connection to exploratory projection pursuit methods is discussed. This leads to a new statistical insight into the synaptic modification equations governing learning in Bienenstock, Cooper, and Munro (BCM) neurons (1982). The importance of a dimensionality reduction principle based solely on distinguishing features is demonstrated using a phoneme recognition experiment. The extracted features are compared with features extracted using a back-propagation network.
node23:Academic paper with title and abstract:  Observation on cortical mechanisms for object recognition and learning. : This paper sketches several aspects of a hypothetical cortical architecture for visual object recognition, based on a recent computational model. The scheme relies on modules for learning from examples, such as Hyperbf-like networks, as its basic components. Such models are not intended to be precise theories of the biological circuitry but rather to capture a class of explanations we call Memory-Based Models (MBM) that contains sparse population coding, memory-based recognition and codebooks of prototypes. Unlike the sigmoidal units of some artificial neural networks, the units of MBMs are consistent with the usual description of cortical neurons as tuned to multidimensional optimal stimuli. We will describe how an example of MBM may be realized in terms of cortical circuitry and biophysical mechanisms, consistent with psychophysical and physiological data. A number of predictions, testable with physiological techniques, are made. This memo describes research done within the Center for Biological and Computational Learning in the Department of Brain and Cognitive Sciences and at the Artificial Intelligence Laboratory at the Massachusetts Institute of Technology. This research is sponsored by grants from the Office of Naval Research under contracts N00014-92-J-1879 and N00014-93-1-0385; and by a grant from the National Science Foundation under contract ASC-9217041 (this award includes funds from ARPA provided under the HPCC program). Additional support is provided by the North Atlantic Treaty Organization, ATR Audio and Visual Perception Research Laboratories, Mitsubishi Electric Corporation, Sumitomo Metal Industries, and Siemens AG. Support for the A.I. Laboratory's artificial intelligence research is provided by ARPA contract N00014-91-J-4038. Tomaso Poggio is supported by the Uncas and Helen Whitaker Chair at MIT's Whitaker College.
node24:Academic paper with title and abstract:  A Theory of Networks for Approximation and Learning, : Learning an input-output mapping from a set of examples, of the type that many neural networks have been constructed to perform, can be regarded as synthesizing an approximation of a multi-dimensional function, that is solving the problem of hy-persurface reconstruction. From this point of view, this form of learning is closely related to classical approximation techniques, such as generalized splines and regularization theory. This paper considers the problems of an exact representation and, in more detail, of the approximation of linear and nonlinear mappings in terms of simpler functions of fewer variables. Kolmogorov's theorem concerning the representation of functions of several variables in terms of functions of one variable turns out to be almost irrelevant in the context of networks for learning. We develop a theoretical framework for approximation based on regularization techniques that leads to a class of three-layer networks that we call Generalized Radial Basis Functions (GRBF), since they are mathematically related to the well-known Radial Basis Functions, mainly used for strict interpolation tasks. GRBF networks are not only equivalent to generalized splines, but are also closely related to pattern recognition methods such as Parzen windows and potential functions and to several neural network algorithms, such as Kanerva's associative memory, backpropagation and Kohonen's topology preserving map. They also have an interesting interpretation in terms of prototypes that are synthesized and optimally combined during the learning stage. The paper introduces several extensions and applications of the technique and discusses intriguing analogies with neurobiological data. c fl Massachusetts Institute of Technology, 1994 This paper describes research done within the Center for Biological Information Processing, in the Department of Brain and Cognitive Sciences, and at the Artificial Intelligence Laboratory. This research is sponsored by a grant from the Office of Naval Research (ONR), Cognitive and Neural Sciences Division; by the Artificial Intelligence Center of Hughes Aircraft Corporation; by the Alfred P. Sloan Foundation; by the National Science Foundation. Support for the A. I. Laboratory's artificial intelligence research is provided by the Advanced Research Projects Agency of the Department of Defense under Army contract DACA76-85-C-0010, and in part by ONR contract N00014-85-K-0124.",cora_link,lp
"Classify the relationship between two essays denoted as node15 and node14 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Combines optical (Landsat-TM) and radar (ERS-1/SAR) imagery for classification using neural networks, evaluates data combinations with ground truth.  
node1: Explores monitoring strategies for embedded agents, compares periodic vs. interval reduction methods, analyzes environmental impacts on optimal strategies.  
node2: Empirically compares stochastic algorithms (e.g., genetic, simulated annealing) for graph optimization, evaluates performance vs. computational time against greedy heuristics.  
node3: Technical description of CONVIS, a tool for controlling and visualizing neural networks' operations.  
node4: Proposes n² classifier approach using genetic algorithms for constructive induction, employs voting for multi-class classification on medical datasets.  
node5: Applies genetic algorithms for efficient near-field sonar target localization using large arrays, avoids eigenvalue methods by optimizing sensor outputs.  
node6: Develops adaptive state-space quantization for mobile robot collision avoidance via reinforcement learning with binary feedback.  
node7: Analyzes merged genetic algorithm's exponential convergence on monotonic functions, proving optimal solution efficiency under ideal conditions.  
node8: Presents Growing Cell Structures: self-organizing neural networks for unsupervised clustering and supervised learning with adaptive size.  
node9: Uses genetic algorithms and simulation competition to learn sequential decision rules for flight simulator tasks, addresses model-enviroment differences.  
node10: Proposes synaptic suppression mechanism for integrating associative feedback with self-organized feedforward networks, validated experimentally.  
node11: Introduces PREENS, a distributed neurosimulator for large neural networks on networks/transputers, enabling coarse-grained parallelism.  
node12: Describes the Rochester Connectionist Simulator tool for specifying, constructing, and simulating connectionist networks with detailed implementation.  
node13: Proposes dynamic hill climbing algorithm with adaptive mutation rates and search granularity, outperforms genetic algorithms in optimization tests.  
node14: Applies genetic algorithms to job-shop and open-shop scheduling problems for optimized solutions.  
node15: Evaluates stochastic hillclimbing as baseline for genetic algorithms, shows comparable/superior results on four combinatorial problems.  
node16: Book on genetic algorithms for search, optimization, and machine learning, including neural network construction via evolutionary methods.  
node17: Applies genetic algorithms to NP-complete problems (subset sum, max cut) achieving high-quality solutions without problem-specific modifications.  
node18: Implements parallel genetic algorithms to learn robot decision strategies from simulations, utilizing networked workstations for speed.  
node19: Proposes heuristic to enhance genetic algorithm performance in bin-packing problems, focusing on efficiency and solution quality.  
node20: Examines methods to reduce disruption of effective genetic algorithm building blocks during optimization.  
node21: Proposes incremental grid-growing method to encode high-dimensional data into 2D maps, preserving cluster structures.  
node22: Studies machine learning techniques applied to the game of Checkers, analyzing strategies and decision-making patterns.  
node23: Presents coevolutionary approach to learn sequential decision rules, enhancing learning speed and problem decomposition in robot tasks.  
node24: Applies self-supervised backpropagation to create topology-preserving maps, demonstrated on the Traveling Salesman Problem.

the connection relationship among the nodes mentioned:
 <node0, node11>,<node1, node16>,<node2, node15>,<node3, node11>,<node3, node12>,<node4, node16>,<node5, node13>,<node6, node10>,<node7, node16>,<node8, node21>,<node9, node16>,<node9, node18>,<node9, node22>,<node9, node23>,<node10, node11>,<node10, node21>,<node10, node24>,<node11, node12>,<node13, node16>,<node15, node16>,<node15, node17>,<node16, node17>,<node16, node19>,<node16, node20>,<node16, node22>,<node19, node20>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","Yes, they have citation relationships","

node0: Combines optical (Landsat-TM) and radar (ERS-1/SAR) imagery for classification using neural networks, evaluates data combinations with ground truth.  
node1: Explores monitoring strategies for embedded agents, compares periodic vs. interval reduction methods, analyzes environmental impacts on optimal strategies.  
node2: Empirically compares stochastic algorithms (e.g., genetic, simulated annealing) for graph optimization, evaluates performance vs. computational time against greedy heuristics.  
node3: Technical description of CONVIS, a tool for controlling and visualizing neural networks' operations.  
node4: Proposes n² classifier approach using genetic algorithms for constructive induction, employs voting for multi-class classification on medical datasets.  
node5: Applies genetic algorithms for efficient near-field sonar target localization using large arrays, avoids eigenvalue methods by optimizing sensor outputs.  
node6: Develops adaptive state-space quantization for mobile robot collision avoidance via reinforcement learning with binary feedback.  
node7: Analyzes merged genetic algorithm's exponential convergence on monotonic functions, proving optimal solution efficiency under ideal conditions.  
node8: Presents Growing Cell Structures: self-organizing neural networks for unsupervised clustering and supervised learning with adaptive size.  
node9: Uses genetic algorithms and simulation competition to learn sequential decision rules for flight simulator tasks, addresses model-enviroment differences.  
node10: Proposes synaptic suppression mechanism for integrating associative feedback with self-organized feedforward networks, validated experimentally.  
node11: Introduces PREENS, a distributed neurosimulator for large neural networks on networks/transputers, enabling coarse-grained parallelism.  
node12: Describes the Rochester Connectionist Simulator tool for specifying, constructing, and simulating connectionist networks with detailed implementation.  
node13: Proposes dynamic hill climbing algorithm with adaptive mutation rates and search granularity, outperforms genetic algorithms in optimization tests.  
node14: Applies genetic algorithms to job-shop and open-shop scheduling problems for optimized solutions.  
node15: Evaluates stochastic hillclimbing as baseline for genetic algorithms, shows comparable/superior results on four combinatorial problems.  
node16: Book on genetic algorithms for search, optimization, and machine learning, including neural network construction via evolutionary methods.  
node17: Applies genetic algorithms to NP-complete problems (subset sum, max cut) achieving high-quality solutions without problem-specific modifications.  
node18: Implements parallel genetic algorithms to learn robot decision strategies from simulations, utilizing networked workstations for speed.  
node19: Proposes heuristic to enhance genetic algorithm performance in bin-packing problems, focusing on efficiency and solution quality.  
node20: Examines methods to reduce disruption of effective genetic algorithm building blocks during optimization.  
node21: Proposes incremental grid-growing method to encode high-dimensional data into 2D maps, preserving cluster structures.  
node22: Studies machine learning techniques applied to the game of Checkers, analyzing strategies and decision-making patterns.  
node23: Presents coevolutionary approach to learn sequential decision rules, enhancing learning speed and problem decomposition in robot tasks.  
node24: Applies self-supervised backpropagation to create topology-preserving maps, demonstrated on the Traveling Salesman Problem.","node0:Academic paper with title and abstract: Segmentation and Classification of Combined Optical and Radar Imagery: The classification performance of a neural network for combined six-band Landsat-TM and one-band ERS-1/SAR PRI imagery from the same scene is carried out. Different combinations of the data | either raw, segmented or filtered |, using the available ground truth polygons, training and test sets are created. The training sets are used for learning while the test sets are used for verification of the neural network. The different combinations are evaluated here.
node1:Academic paper with title and abstract: Monitoring in Embedded Agents: Finding good monitoring strategies is an important process in the design of any embedded agent. We describe the nature of the monitoring problem, point out what makes it difficult, and show that while periodic monitoring strategies are often the easiest to derive, they are not always the most appropriate. We demonstrate mathematically and empirically that for a wide class of problems, the so-called ""cupcake problems"", there exists a simple strategy, interval reduction, that outperforms periodic monitoring. We also show how features of the environment may influence the choice of the optimal strategy. The paper concludes with some thoughts about a monitoring strategy taxonomy, and what its defining features might be.
node2:Academic paper with title and abstract: Chapter 4 Empirical comparison of stochastic algorithms Empirical comparison of stochastic algorithms in a graph: There are several stochastic methods that can be used for solving NP-hard optimization problems approximatively. Examples of such algorithms include (in order of increasing computational complexity) stochastic greedy search methods, simulated annealing, and genetic algorithms. We investigate which of these methods is likely to give best performance in practice, with respect to the computational effort each requires. We study this problem empirically by selecting a set of stochastic algorithms with varying computational complexity, and by experimentally evaluating for each method how the goodness of the results achieved improves with increasing computational time. For the evaluation, we use a graph optimization problem, which is closely related to several real-world practical problems. To get a wider perspective of the goodness of the achieved results, the stochastic methods are also compared against special-case greedy heuristics. This investigation suggests that although genetic algorithms can provide good results, simpler stochastic algorithms can achieve similar performance more quickly.
node3:Academic paper with title and abstract: CONVIS: Action Oriented Control and Visualization of Neural Networks Introduction and Technical Description: 
node4:Academic paper with title and abstract: 21 Using n 2 classifier in constructive induction: In this paper, we propose a multi-classification approach for constructive induction. The idea of an improvement of classification accuracy is based on iterative modification of input data space. This process is independently repeated for each pair of n classes. Finally, it gives (n 2 n)/2 input data subspaces of attributes dedicated for optimal discrimination of appropriate pairs of classes. We use genetic algorithms as a constructive induction engine. A final classification is obtained by a weighted majority voting rule, according to n 2 - classifier approach. The computational experiment was performed on medical data set. The obtained results point out the advantage of using a multi-classification model (n 2 classifier) in constructive induction in relation to the analogous single-classifier approach.
node5:Academic paper with title and abstract: Numerical techniques for efficient sonar bearing and range searching in the near field using genetic algorithms: This article describes a numerical method that may be used to efficiently locate and track underwater sonar targets in the near-field, with both bearing and range estimation, for the case of very large passive arrays. The approach used has no requirement for a priori knowledge about the source and uses only limited information about the receiver array shape. The role of sensor position uncertainty and the consequence of targets always being in the near-field are analysed and the problems associated with the manipulation of large matrices inherent in conventional eigenvalue type algorithms noted. A simpler numerical approach is then presented which reduces the problem to that of search optimization. When using this method the location of a target corresponds to finding the position of the maximum weighted sum of the output from all sensors. Since this search procedure can be dealt with using modern stochastic optimization methods, such as the genetic algorithm, the operational requirement that an acceptable accuracy be achieved in real time can usually be met. The array studied here consists of 225 elements positioned along a flexible cable towed behind a ship with 3.4m between sensors, giving an effective aperture of 761.6m. For such a long array, the far field assumption used in most beam-forming algorithms is no longer appropriate. The waves emitted by the targets then have to be considered as curved rather than plane. It is shown that, for simulated data, if no significant noise
node6:Academic paper with title and abstract: Adaptive state space quantisation: adding and removing neurons: This paper describes a self-learning control system for a mobile robot. Based on local sensor data, a robot is taught to avoid collisions with obstacles. The only feedback to the control system is a binary-valued external reinforcement signal, which indicates whether or not a collision has occured. A reinforcement learning scheme is used to find a correct mapping from input (sensor) space to output (steering signal) space. An adaptive quantisation scheme is introduced, through which the discrete division of input space is built up from scratch by the system itself.
node7:Academic paper with title and abstract: : A lower-bound result on the power of Abstract This paper presents a lower-bound result on the computational power of a genetic algorithm in the context of combinatorial optimization. We describe a new genetic algorithm, the merged genetic algorithm, and prove that for the class of monotonic functions, the algorithm finds the optimal solution, and does so with an exponential convergence rate. The analysis pertains to the ideal behavior of the algorithm where the main task reduces to showing convergence of probability distributions over the search space of combinatorial structures to the optimal one. We take exponential convergence to be indicative of efficient solvability for the sample-bounded algorithm, although a sampling theory is needed to better relate the limit behavior to actual behavior. The paper concludes with a discussion of some immediate problems that lie ahead. a genetic algorithm
node8:Academic paper with title and abstract:  Growing Cell Structures A Self-Organizing Network for Unsupervised and Supervised Learning, : We present a new self-organizing neural network model having two variants. The first variant performs unsupervised learning and can be used for data visualization, clustering, and vector quantization. The main advantage over existing approaches, e.g., the Kohonen feature map, is the ability of the model to automatically find a suitable network structure and size. This is achieved through a controlled growth process which also includes occasional removal of units. The second variant of the model is a supervised learning method which results from the combination of the abovementioned self-organizing network with the radial basis function (RBF) approach. In this model it is possible in contrast to earlier approaches toperform the positioning of the RBF units and the supervised training of the weights in parallel. Therefore, the current classification error can be used to determine where to insert new RBF units. This leads to small networks which generalize very well. Results on the two-spirals benchmark and a vowel classification problem are presented which are better than any results previously published. fl submitted for publication
node9:Academic paper with title and abstract:  ""Learning sequential decision rules using simulation models and competition,"" : The problem of learning decision rules for sequential tasks is addressed, focusing on the problem of learning tactical decision rules from a simple flight simulator. The learning method relies on the notion of competition and employs genetic algorithms to search the space of decision policies. Several experiments are presented that address issues arising from differences between the simulation model on which learning occurs and the target environment on which the decision rules are ultimately tested.
node10:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node11:Academic paper with title and abstract:  Vytopil. Design Issues Towards PREENS, a Parallel Research Execution Environment for Neural Systems. : PREENS a Parallel Research Execution Environment for Neural Systems is a distributed neurosimulator, targeted on networks of workstations and transputer systems. As current applications of neural networks often contain large amounts of data and as the neural networks involved in tasks such as vision are very large, high requirements on memory and computational resources are imposed on the target execution platforms. PREENS can be executed in a distributed environment, i.e. tools and neural network simulation programs can be running on any machine connectable via TCP/IP. Using this approach, larger tasks and more data can be examined using an efficient coarse grained parallelism. Furthermore, the design of PREENS allows for neural networks to be running on any high performance MIMD machine such as a trans-puter system. In this paper, the different features and design concepts of PREENS are discussed. These can also be used for other applications, like image processing.
node12:Academic paper with title and abstract:  Rochester Connectionist Simulator. : Specifying, constructing and simulating structured connectionist networks requires significant programming effort. System tools can greatly reduce the effort required, and by providing a conceptual structure within which to work, make large and complex network simulations possible. The Rochester Connectionist Simulator is a system tool designed to aid specification, construction and simulation of connectionist networks. This report describes this tool in detail: the facilities provided and how to use them, as well as details of the implementation. Through this we hope not only to make designing and verifying connectionist networks easier, but also to encourage the development and refinement of connectionist research tools themselves.
node13:Academic paper with title and abstract:  Dynamic hill climbing: Overcoming the limitations of optimization techniques. : This paper describes a novel search algorithm, called dynamic hill climbing, that borrows ideas from genetic algorithms and hill climbing techniques. Unlike both genetic and hill climbing algorithms, dynamic hill climbing has the ability to dynamically change its coordinate frame during the course of an optimization. Furthermore, the algorithm moves from a coarse-grained search to a fine-grained search of the function space by changing its mutation rate and uses a diversity-based distance metric to ensure that it searches new regions of the space. Dynamic hill climbing is empirically compared to a traditional genetic algorithm using De Jong's well-known five function test suite [4] and is shown to vastly surpass the performance of the genetic algorithm, often finding better solutions using only 1% as many function evaluations.
node14:Academic paper with title and abstract:  A promising genetic algorithm approach to job-shop scheduling, rescheduling, and open-shop scheduling problems. : 
node15:Academic paper with title and abstract:  Stochastic hillclimbing as a baseline method for evaluating genetic algorithms. : We investigate the effectiveness of stochastic hillclimbing as a baseline for evaluating the performance of genetic algorithms (GAs) as combinatorial function optimizers. In particular, we address four problems to which GAs have been applied in the literature: the maximum cut problem, Koza's 11-multiplexer problem, MDAP (the Multiprocessor Document Allocation Problem), and the jobshop problem. We demonstrate that simple stochastic hillclimbing methods are able to achieve results comparable or superior to those obtained by the GAs designed to address these four problems. We further illustrate, in the case of the jobshop problem, how insights obtained in the formulation of a stochastic hillclimbing algorithm can lead to improvements in the encoding used by a GA. fl Department of Computer Science, University of California at Berkeley. Supported by a NASA Graduate Fellowship. This paper was written while the author was a visiting researcher at the Ecole Normale Superieure-rue d'Ulm, Groupe de BioInformatique, France. E-mail: juels@cs.berkeley.edu y Department of Mathematics, University of California at Berkeley. Supported by an NDSEG Graduate Fellowship. E-mail: wattenbe@math.berkeley.edu
node16:Academic paper with title and abstract:  Genetic Algorithms in Search, Optimization and Machine Learning. : Angeline, P., Saunders, G. and Pollack, J. (1993) An evolutionary algorithm that constructs recurrent neural networks, LAIR Technical Report #93-PA-GNARLY, Submitted to IEEE Transactions on Neural Networks Special Issue on Evolutionary Programming.
node17:Academic paper with title and abstract:  An evolutionary approach to com-binatorial optimization problems. : The paper reports on the application of genetic algorithms, probabilistic search algorithms based on the model of organic evolution, to NP-complete combinatorial optimization problems. In particular, the subset sum, maximum cut, and minimum tardy task problems are considered. Except for the fitness function, no problem-specific changes of the genetic algorithm are required in order to achieve results of high quality even for the problem instances of size 100 used in the paper. For constrained problems, such as the subset sum and the minimum tardy task, the constraints are taken into account by incorporating a graded penalty term into the fitness function. Even for large instances of these highly multimodal optimization problems, an iterated application of the genetic algorithm is observed to find the global optimum within a number of runs. As the genetic algorithm samples only a tiny fraction of the search space, these results are quite encouraging.
node18:Academic paper with title and abstract:  Learning decision strategies with genetic algorithms. : This work explores the use of machine learning methods for extracting knowledge from simulations of complex systems. In particular, we use genetic algorithms to learn rule-based strategies used by autonomous robots. The evaluation of a given strategy may require several executions of a simulation to produce a meaningful estimate of the quality of the strategy. As a consequence, the evaluation of a single individual in the genetic algorithm requires a fairly substantial amount of computation. Such a system suggests the sort of large-grained parallelism that is available on a network of workstations. We describe an implementation of a parallel genetic algorithm, and present case studies of the resulting speedup on two robot learning tasks.
node19:Academic paper with title and abstract:  A heuristic for improved genetic bin packing. : University of Tulsa Technical Report UTULSA-MCS-93-8, May, 1993. Submitted to Information Processing Letters, May, 1993.
node20:Academic paper with title and abstract:  Reducing disruption of superior building blocks in genetic algorithms. : 
node21:Academic paper with title and abstract:  Incremental grid growing: encoding high-dimensional structure into a two-dimensional feature map. : Knowledge of clusters and their relations is important in understanding high-dimensional input data with unknown distribution. Ordinary feature maps with fully connected, fixed grid topology cannot properly reflect the structure of clusters in the input space|there are no cluster boundaries on the map. Incremental feature map algorithms, where nodes and connections are added to or deleted from the map according to the input distribution, can overcome this problem. However, so far such algorithms have been limited to maps that can be drawn in 2-D only in the case of 2-dimensional input space. In the approach proposed in this paper, nodes are added incrementally to a regular, 2-dimensional grid, which is drawable at all times, irrespective of the dimensionality of the input space. The process results in a map that explicitly represents the cluster structure of the high-dimensional input.
node22:Academic paper with title and abstract:  Some studies in machine learning using the game of Checkers. : 
node23:Academic paper with title and abstract:  ""A Coevolutionary Approach to Learning Sequential Decision Rules"", : We present a coevolutionary approach to learning sequential decision rules which appears to have a number of advantages over non-coevolutionary approaches. The coevolutionary approach encourages the formation of stable niches representing simpler sub-behaviors. The evolutionary direction of each subbehavior can be controlled independently, providing an alternative to evolving complex behavior using intermediate training steps. Results are presented showing a significant learning rate speedup over a non-coevolutionary approach in a simulated robot domain. In addition, the results suggest the coevolutionary approach may lead to emer gent problem decompositions.
node24:Academic paper with title and abstract:  Learning topology-preserving maps using self-supervised backpropagation. : Self-supervised backpropagation is an unsupervised learning procedure for feedfor-ward networks, where the desired output vector is identical with the input vector. For backpropagation, we are able to use powerful simulators running on parallel machines. Topology-preserving maps, on the other hand, can be developed by a variant of the competitive learning procedure. However, in a degenerate case, self-supervised backpropagation is a version of competitive learning. A simple extension of the cost function of backpropagation leads to a competitive version of self-supervised backpropagation, which can be used to produce topographic maps. We demonstrate the approach applied to the Traveling Salesman Problem (TSP). The algorithm was implemented using the backpropagation simulator (CLONES) on a parallel machine (RAP).",cora_link,lp
"Classify the relationship between two essays denoted as node24 and node26 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Memory-based methodology for time series recognition with real-world applications.  
node1: Factorial learning using EM with Gibbs sampling/mean-field approximation for causal structure discovery.  
node2: Rectified Gaussian distribution enables non-negative variables and nonconvex energy for pattern manifold modeling.  
node3: Optimistic induction outperforms pessimism in decision trees, especially with sparse/noisy data.  
node4: Concept learning challenges posed by small disjuncts in rule-based systems.  
node5: Data mining association rules using Gaussian mixtures and factor analysis in unsupervised neural networks.  
node6: Same as node5.  
node7: Predictive neural networks (TDNN) reduce multiprocessor memory access latency via pattern prediction.  
node8: Handwritten digit recognition using mixtures of linear models with EM/PCA and tangent-plane deformations.  
node9: Soft classification via penalized log-likelihood and smoothing splines for risk estimation.  
node10: Continuous sigmoidal belief networks trained with slice sampling for latent variable modeling.  
node11: Modular Q-learning architecture with CMAC for robot task decomposition and multi-actuator control.  
node12: Theoretical neural computation textbook analyzing models from a physics perspective.  
node13: Hierarchical logistic belief net selects linear models via Gibbs sampling for data generation.  
node14: Unsupervised convex/conic coding learns local features and reconstruction via feedback in neural nets.  
node15: Attractor neural networks model pattern completion using recurrent dynamics and hidden variables.  
node16: Factor analysis via delta-rule wake-sleep learning as a simple alternative to Hebbian methods.  
node17: Hierarchical mixtures of experts use EM/online learning for supervised tasks like robot dynamics.  
node18: Fossil: a robust relational learner with statistical search and pruning, compared to Foil.  
node19: Binary vector modeling using influence combination and gradient/greedy learning algorithms.  
node20: Small disjuncts’ error proneness due to noise, missing attributes, and data size in concept learning.  
node21: Noise impacts small disjuncts evaluated in chess and breast cancer domains, confirming error sensitivity.  
node22: Up-propagation inverts generative models via feedback, contrasting with backpropagation’s learning role.  
node23: Continuous attractors in recurrent networks enable pattern completion for unsupervised learning.  
node24: Hierarchical generative model extracts sparse, distributed representations using neural networks.  
node25: Hierarchical visualization via latent variable mixtures for complex high-dimensional datasets.  
node26: Axis-parallel rectangles solve multiple-instance problems, excelling in musk-odor prediction.

the connection relationship among the nodes mentioned:
 <node0, node17>,<node1, node14>,<node1, node17>,<node2, node24>,<node3, node4>,<node4, node18>,<node4, node20>,<node4, node21>,<node5, node8>,<node5, node24>,<node6, node8>,<node6, node24>,<node7, node17>,<node8, node16>,<node9, node17>,<node10, node24>,<node11, node17>,<node12, node19>,<node13, node17>,<node13, node24>,<node14, node15>,<node14, node19>,<node14, node22>,<node14, node24>,<node15, node22>,<node15, node23>,<node15, node24>,<node16, node24>,<node17, node25>,<node20, node21>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","No, they do not have citation relationships","

node0: Memory-based methodology for time series recognition with real-world applications.  
node1: Factorial learning using EM with Gibbs sampling/mean-field approximation for causal structure discovery.  
node2: Rectified Gaussian distribution enables non-negative variables and nonconvex energy for pattern manifold modeling.  
node3: Optimistic induction outperforms pessimism in decision trees, especially with sparse/noisy data.  
node4: Concept learning challenges posed by small disjuncts in rule-based systems.  
node5: Data mining association rules using Gaussian mixtures and factor analysis in unsupervised neural networks.  
node6: Same as node5.  
node7: Predictive neural networks (TDNN) reduce multiprocessor memory access latency via pattern prediction.  
node8: Handwritten digit recognition using mixtures of linear models with EM/PCA and tangent-plane deformations.  
node9: Soft classification via penalized log-likelihood and smoothing splines for risk estimation.  
node10: Continuous sigmoidal belief networks trained with slice sampling for latent variable modeling.  
node11: Modular Q-learning architecture with CMAC for robot task decomposition and multi-actuator control.  
node12: Theoretical neural computation textbook analyzing models from a physics perspective.  
node13: Hierarchical logistic belief net selects linear models via Gibbs sampling for data generation.  
node14: Unsupervised convex/conic coding learns local features and reconstruction via feedback in neural nets.  
node15: Attractor neural networks model pattern completion using recurrent dynamics and hidden variables.  
node16: Factor analysis via delta-rule wake-sleep learning as a simple alternative to Hebbian methods.  
node17: Hierarchical mixtures of experts use EM/online learning for supervised tasks like robot dynamics.  
node18: Fossil: a robust relational learner with statistical search and pruning, compared to Foil.  
node19: Binary vector modeling using influence combination and gradient/greedy learning algorithms.  
node20: Small disjuncts’ error proneness due to noise, missing attributes, and data size in concept learning.  
node21: Noise impacts small disjuncts evaluated in chess and breast cancer domains, confirming error sensitivity.  
node22: Up-propagation inverts generative models via feedback, contrasting with backpropagation’s learning role.  
node23: Continuous attractors in recurrent networks enable pattern completion for unsupervised learning.  
node24: Hierarchical generative model extracts sparse, distributed representations using neural networks.  
node25: Hierarchical visualization via latent variable mixtures for complex high-dimensional datasets.  
node26: Axis-parallel rectangles solve multiple-instance problems, excelling in musk-odor prediction.","node0:Academic paper with title and abstract: Memory-based Time Series Recognition  A New Methodology and Real World Applications: 
node1:Academic paper with title and abstract:  ""Factorial learning and the EM algorithm"", : Many real world learning problems are best characterized by an interaction of multiple independent causes or factors. Discovering such causal structure from the data is the focus of this paper. Based on Zemel and Hinton's cooperative vector quantizer (CVQ) architecture, an unsupervised learning algorithm is derived from the Expectation-Maximization (EM) framework. Due to the combinatorial nature of the data generation process, the exact E-step is computationally intractable. Two alternative methods for computing the E-step are proposed: Gibbs sampling and mean-field approximation, and some promising empirical results are presented.
node2:Academic paper with title and abstract: The Rectified Gaussian Distribution: A simple but powerful modification of the standard Gaussian distribution is studied. The variables of the rectified Gaussian are constrained to be nonnegative, enabling the use of nonconvex energy functions. Two multimodal examples, the competitive and cooperative distributions, illustrate the representational power of the rectified Gaussian. Since the cooperative distribution can represent the translations of a pattern, it demonstrates the potential of the rectified Gaussian for modeling pattern manifolds.
node3:Academic paper with title and abstract: Pessimistic and Optimistic Induction: Learning methods vary in the optimism or pessimism with which they regard the informativeness of learned knowledge. Pessimism is implicit in hypothesis testing, where we wish to draw cautious conclusions from experimental evidence. However, this paper demonstrates that optimism in the utility of derived rules may be the preferred bias for learning systems themselves. We examine the continuum between naive pessimism and naive optimism in the context of a decision tree learner that prunes rules based on stringent (i.e., pessimistic) or weak (i.e., optimistic) tests of their significance. Our experimental results indicate that in most cases optimism is preferred, but particularly in cases of sparse training data and high noise. This work generalizes earlier findings by Fisher and Schlimmer (1988) and Schaffer (1992), and we discuss its relevance to unsupervised learning, small disjuncts, and other issues.
node4:Academic paper with title and abstract:  Concept learning and the problem of small disjuncts. : 
node5:Academic paper with title and abstract: Data Mining for Association Rules with Unsupervised Neural Networks: results for Gaussian mixture models and factor analysis are discussed.
node6:Academic paper with title and abstract: Data Mining for Association Rules with Unsupervised Neural Networks: results for Gaussian mixture models and factor analysis are discussed.
node7:Academic paper with title and abstract:  D.M. Chiarulli, On-Line Prediction of Multiprocessor Memory Access Patterns, : Technical Report UMIACS-TR-96-59 and CS-TR-3676 Institute for Advanced Computer Studies University of Maryland College Park, MD 20742 Abstract Shared memory multiprocessors require reconfigurable interconnection networks (INs) for scalability. These INs are reconfigured by an IN control unit. However, these INs are often plagued by undesirable reconfiguration time that is primarily due to control latency, the amount of time delay that the control unit takes to decide on a desired new IN configuration. To reduce control latency, a trainable prediction unit (PU) was devised and added to the IN controller. The PUs job is to anticipate and reduce control configuration time, the major component of the control latency. Three different on-line prediction techniques were tested to learn and predict repetitive memory access patterns for three typical parallel processing applications, the 2-D relaxation algorithm, matrix multiply and Fast Fourier Transform. The predictions were then used by a routing control algorithm to reduce control latency by configuring the IN to provide needed memory access paths before they were requested. Three prediction techniques were used and tested: 1). a Markov predictor, 2). a linear predictor and 3). a time delay neural network (TDNN) predictor. As expected, different predictors performed best on different applications, however, the TDNN produced the best overall results.
node8:Academic paper with title and abstract:  ""Recognizing handwritten digits using mixtures of linear models"", : We construct a mixture of locally linear generative models of a collection of pixel-based images of digits, and use them for recognition. Different models of a given digit are used to capture different styles of writing, and new images are classified by evaluating their log-likelihoods under each model. We use an EM-based algorithm in which the M-step is computationally straightforward principal components analysis (PCA). Incorporating tangent-plane information [12] about expected local deformations only requires adding tangent vectors into the sample covariance matrices for the PCA, and it demonstrably improves performance.
node9:Academic paper with title and abstract:  Soft classification, a.k.a. risk estimation, via penalized log likelihood and smoothing spline analysis of variance. : 1 to appear in Cowan, J., Tesauro, G., and Alspector, J. (eds.), Advances in Neural Information Processing Systems 6. San Francisco, CA: Morgan Kaufmann Publishers. This paper has been written tersely to accomodate an 8 page limitation. Presented as a (refereed) poster session at the 1993 Conference on Neural Information Processing Systems-Natural and Synthetic, November 29, Denver, CO. Supported by the NSF under grants DMS-9121003 and DMS-9301511, and by the National Eye Institute-NIH under grants EY09946 and EY03083
node10:Academic paper with title and abstract:  Continuous sigmoidal belief networks trained using slice sampling. : Real-valued random hidden variables can be useful for modelling latent structure that explains correlations among observed variables. I propose a simple unit that adds zero-mean Gaussian noise to its input before passing it through a sigmoidal squashing function. Such units can produce a variety of useful behaviors, ranging from deterministic to binary stochastic to continuous stochastic. I show how ""slice sampling"" (Neal 1996) can be used for inference and learning in top-down networks of these units and demonstrate learning on two simple problems.
node11:Academic paper with title and abstract:  A modular Q-learning architecture for manipulator task decomposition, : Compositional Q-Learning (CQ-L) (Singh 1992) is a modular approach to learning to perform composite tasks made up of several elemental tasks by reinforcement learning. Skills acquired while performing elemental tasks are also applied to solve composite tasks. Individual skills compete for the right to act and only winning skills are included in the decomposition of the composite task. We extend the original CQ-L concept in two ways: (1) a more general reward function, and (2) the agent can have more than one actuator. We use the CQ-L architecture to acquire skills for performing composite tasks with a simulated two-linked manipulator having large state and action spaces. The manipulator is a non-linear dynamical system and we require its end-effector to be at specific positions in the workspace. Fast function approximation in each of the Q-modules is achieved through the use of an array of Cerebellar Model Articulation Controller (CMAC) (Albus
node12:Academic paper with title and abstract:  Introduction to the Theory of Neural Computa 92 tion. : Neural computation, also called connectionism, parallel distributed processing, neural network modeling or brain-style computation, has grown rapidly in the last decade. Despite this explosion, and ultimately because of impressive applications, there has been a dire need for a concise introduction from a theoretical perspective, analyzing the strengths and weaknesses of connectionist approaches and establishing links to other disciplines, such as statistics or control theory. The Introduction to the Theory of Neural Computation by Hertz, Krogh and Palmer (subsequently referred to as HKP) is written from the perspective of physics, the home discipline of the authors. The book fulfills its mission as an introduction for neural network novices, provided that they have some background in calculus, linear algebra, and statistics. It covers a number of models that are often viewed as disjoint. Critical analyses and fruitful comparisons between these models
node13:Academic paper with title and abstract:  (in press). A hierarchical community of experts. : We describe a directed acyclic graphical model that contains a hierarchy of linear units and a mechanism for dynamically selecting an appropriate subset of these units to model each observation. The non-linear selection mechanism is a hierarchy of binary units each of which gates the output of one of the linear units. There are no connections from linear units to binary units, so the generative model can be viewed as a logistic belief net (Neal 1992) which selects a skeleton linear model from among the available linear units. We show that Gibbs sampling can be used to learn the parameters of the linear and binary units even when the sampling is so brief that the Markov chain is far from equilibrium.
node14:Academic paper with title and abstract:  Unsupervised learning by convex and conic coding. : Unsupervised learning algorithms based on convex and conic encoders are proposed. The encoders find the closest convex or conic combination of basis vectors to the input. The learning algorithms produce basis vectors that minimize the reconstruction error of the encoders. The convex algorithm develops locally linear models of the input, while the conic algorithm discovers features. Both algorithms are used to model handwritten digits and compared with vector quantization and principal component analysis. The neural network implementations involve feedback connections that project a reconstruction back to the input layer.
node15:Academic paper with title and abstract:  Pattern analysis and synthesis in attractor neural networks. : The representation of hidden variable models by attractor neural networks is studied. Memories are stored in a dynamical attractor that is a continuous manifold of fixed points, as illustrated by linear and nonlinear networks with hidden neurons. Pattern analysis and synthesis are forms of pattern completion by recall of a stored memory. Analysis and synthesis in the linear network are performed by bottom-up and top-down connections. In the nonlinear network, the analysis computation additionally requires rectification nonlinearity and inner product inhibition between hidden neurons. One popular approach to sensory processing is based on generative models, which assume that sensory input patterns are synthesized from some underlying hidden variables. For example, the sounds of speech can be synthesized from a sequence of phonemes, and images of a face can be synthesized from pose and lighting variables. Hidden variables are useful because they constitute a simpler representation of the variables that are visible in the sensory input. Using a generative model for sensory processing requires a method of pattern analysis. Given a sensory input pattern, analysis is the recovery of the hidden variables from which it was synthesized. In other words, analysis and synthesis are inverses of each other. There are a number of approaches to pattern analysis. In analysis-by-synthesis, the synthetic model is embedded inside a negative feedback loop[1]. Another approach is to construct a separate analysis model[2]. This paper explores a third approach, in which visible-hidden pairs are embedded as attractive fixed points, or attractors, in the state space of a recurrent neural network. The attractors can be regarded as memories stored in the network, and analysis and synthesis as forms of pattern completion by recall of a memory. The approach is illustrated with linear and nonlinear network architectures. In both networks, the synthetic model is linear, as in principal
node16:Academic paper with title and abstract:  ""Factor analysis using delta-rule wake-sleep learning"", : Technical Report No. 9607, Department of Statistics, University of Toronto We describe a linear network that models correlations between real-valued visible variables using one or more real-valued hidden variables a factor analysis model. This model can be seen as a linear version of the Helmholtz machine, and its parameters can be learned using the wake-sleep method, in which learning of the primary generative model is assisted by a recognition model, whose role is to fill in the values of hidden variables based on the values of visible variables. The generative and recognition models are jointly learned in wake and sleep phases, using just the delta rule. This learning procedure is comparable in simplicity to Oja's version of Hebbian learning, which produces a somewhat different representation of correlations in terms of principal components. We argue that the simplicity of wake-sleep learning makes factor analysis a plau sible alternative to Hebbian learning as a model of activity-dependent cortical plasticity.
node17:Academic paper with title and abstract:  Hierarchical Mixtures of Experts and the EM Algorithm, : We present a tree-structured architecture for supervised learning. The statistical model underlying the architecture is a hierarchical mixture model in which both the mixture coefficients and the mixture components are generalized linear models (GLIM's). Learning is treated as a maximum likelihood problem; in particular, we present an Expectation-Maximization (EM) algorithm for adjusting the parameters of the architecture. We also develop an on-line learning algorithm in which the parameters are updated incrementally. Comparative simulation results are presented in the robot dynamics domain. *We want to thank Geoffrey Hinton, Tony Robinson, Mitsuo Kawato and Daniel Wolpert for helpful comments on the manuscript. This project was supported in part by a grant from the McDonnell-Pew Foundation, by a grant from ATR Human Information Processing Research Laboratories, by a grant from Siemens Corporation, by by grant IRI-9013991 from the National Science Foundation, and by grant N00014-90-J-1942 from the Office of Naval Research. The project was also supported by NSF grant ASC-9217041 in support of the Center for Biological and Computational Learning at MIT, including funds provided by DARPA under the HPCC program, and NSF grant ECS-9216531 to support an Initiative in Intelligent Control at MIT. Michael I. Jordan is a NSF Presidential Young Investigator.
node18:Academic paper with title and abstract:  Fossil: A robust relational learner"". : The research reported in this paper describes Fossil, an ILP system that uses a search heuristic based on statistical correlation. Several interesting properties of this heuristic are discussed, and a it is shown how it naturally can be extended with a simple, but powerful stopping criterion that is independent of the number of training examples. Instead, Fossil's stopping criterion depends on a search heuristic that estimates the utility of literals on a uniform scale. After a comparison with Foil and mFoil in the KRK domain and on the mesh data, we outline some ideas how Fossil can be adopted for top-down pruning and present some preliminary results.
node19:Academic paper with title and abstract:  Unsupevised learning of distributions on binary vectors using two-layer networks. : We present a distribution model for binary vectors, called the influence combination model and show how this model can be used as the basis for unsupervised learning algorithms for feature selection. The model is closely related to the Harmonium model defined by Smolensky [RM86][Ch.6]. In the first part of the paper we analyze properties of this distribution representation scheme. We show that arbitrary distributions of binary vectors can be approximated by the combination model. We show how the weight vectors in the model can be interpreted as high order correlation patterns among the input bits. We compare the combination model with the mixture model and with principle component analysis. In the second part of the paper we present two algorithms for learning the combination model from examples. The first algorithm is based on gradient ascent. Here we give a closed form for this gradient that is significantly easier to compute than the corresponding gradient for the general Boltzmann machine. The second learning algorithm is a greedy method that creates the hidden units and computes their weights one at a time. This method is a variant of projection pursuit density estimation. In the third part of the paper we give experimental results for these learning methods on synthetic data and on natural data of handwritten digit images.
node20:Academic paper with title and abstract:  Learning with Small Disjuncts, : Systems that learn from examples often create a disjunctive concept definition. The disjuncts in the concept definition which cover only a few training examples are referred to as small disjuncts. The problem with small disjuncts is that they are more error prone than large disjuncts, but may be necessary to achieve a high level of predictive accuracy [Holte, Acker, and Porter, 1989]. This paper extends previous work done on the problem of small disjuncts by investigating the reasons why small disjuncts are more error prone than large disjuncts, and evaluating the impact small disjuncts have on inductive learning. This paper shows that attribute noise, missing attributes, class noise, and training set size can each cause small disjuncts to be more error prone than large disjuncts. This paper also evaluates the impact that these factors have on learning with small disjuncts (i.e., on the error rate). It shows, for two artificial domains, that when low levels of attribute noise are applied only to the training set (the ability to learn the correct noise-free concept is being evaluated), small disjuncts are primarily responsible for making learning difficult.
node21:Academic paper with title and abstract:  The problem with noise and small disjuncts. : Systems that learn from examples often create a disjunctive concept definition. The disjuncts in the concept definition which cover only a few training examples are referred to as small disjuncts. The problem with small disjuncts is that they are more error prone than large disjuncts, but may be necessary to achieve a high level of predictive accuracy [Holte, Acker, and Porter, 1989]. This paper extends previous work done on the problem of small disjuncts by taking noise into account. It investigates the assertion that it is hard to learn from noisy data because it is difficult to distinguish between noise and true exceptions. In the process of evaluating this assertion, insights are gained into the mechanisms by which noise affects learning. Two domains are investigated. The experimental results in this paper suggest that for both Shapiro's chess endgame domain [Shapiro, 1987] and for the Wisconsin breast cancer domain [Wolberg, 1990], the assertion is true, at least for low levels (5-10%) of class noise.
node22:Academic paper with title and abstract:  Learning generative models with the up-propagation algorithm. : Up-propagation is an algorithm for inverting and learning neural network generative models. Sensory input is processed by inverting a model that generates patterns from hidden variables using top-down connections. The inversion process is iterative, utilizing a negative feedback loop that depends on an error signal propagated by bottom-up connections. The error signal is also used to learn the generative model from examples. The algorithm is benchmarked against principal component analysis in In his doctrine of unconscious inference, Helmholtz argued that perceptions are formed by the interaction of bottom-up sensory data with top-down expectations. According to one interpretation of this doctrine, perception is a procedure of sequential hypothesis testing. We propose a new algorithm, called up-propagation, that realizes this interpretation in layered neural networks. It uses top-down connections to generate hypotheses, and bottom-up connections to revise them. It is important to understand the difference between up-propagation and its ancestor, the backpropagation algorithm[1]. Backpropagation is a learning algorithm for recognition models. As shown in Figure 1a, bottom-up connections recognize patterns, while top-down connections propagate an error signal that is used to learn the recognition model. In contrast, up-propagation is an algorithm for inverting and learning generative models, as shown in Figure 1b. Top-down connections generate patterns from a set of hidden variables. Sensory input is processed by inverting the generative model, recovering hidden variables that could have generated the sensory data. This operation is called either pattern recognition or pattern analysis, depending on the meaning of the hidden variables. Inversion of the generative model is done iteratively, through a negative feedback loop driven by an error signal from the bottom-up connections. The error signal is also used for learning the connections experiments on images of handwritten digits.
node23:Academic paper with title and abstract:  Learning continuous attractors in recurrent networks. : One approach to invariant object recognition employs a recurrent neural network as an associative memory. In the standard depiction of the network's state space, memories of objects are stored as attractive fixed points of the dynamics. I argue for a modification of this picture: if an object has a continuous family of instantiations, it should be represented by a continuous attractor. This idea is illustrated with a network that learns to complete patterns. To perform the task of filling in missing information, the network develops a continuous attractor that models the manifold from which the patterns are drawn. From a statistical viewpoint, the pattern completion task allows a formulation of unsupervised A classic approach to invariant object recognition is to use a recurrent neural network as an associative memory[1]. In spite of the intuitive appeal and biological plausibility of this approach, it has largely been abandoned in practical applications. This paper introduces two new concepts that could help resurrect it: object representation by continuous attractors, and learning attractors by pattern completion. In most models of associative memory, memories are stored as attractive fixed points at discrete locations in state space[1]. Discrete attractors may not be appropriate for patterns with continuous variability, like the images of a three-dimensional object from different viewpoints. When the instantiations of an object lie on a continuous pattern manifold, it is more appropriate to represent objects by attractive manifolds of fixed points, or continuous attractors. To make this idea practical, it is important to find methods for learning attractors from examples. A naive method is to train the network to retain examples in short-term memory. This method is deficient because it does not prevent the network from storing spurious fixed points that are unrelated to the examples. A superior method is to train the network to restore examples that have been corrupted, so that it learns to complete patterns by filling in missing information. learning in terms of regression rather than density estimation.
node24:Academic paper with title and abstract:  Generative models for discovering sparse distributed representations. : We describe a hierarchical, generative model that can be viewed as a non-linear generalization of factor analysis and can be implemented in a neural network. The model uses bottom-up, top-down and lateral connections to perform Bayesian perceptual inference correctly. Once perceptual inference has been performed the connection strengths can be updated using a very simple learning rule that only requires locally available information. We demon strate that the network learns to extract sparse, distributed, hierarchical representations.
node25:Academic paper with title and abstract:  Bishop (1997a). Hierarchical models for data visualization. : Visualization has proven to be a powerful and widely-applicable tool for the analysis and interpretation of multi-variate data. Most visualization algorithms aim to find a projection from the data space down to a two-dimensional visualization space. However, for complex data sets living in a high-dimensional space it is unlikely that a single two-dimensional projection can reveal all of the interesting structure. We therefore introduce a hierarchical visualization algorithm which allows the complete data set to be visualized at the top level, with clusters and sub-clusters of data points visualized at deeper levels. The algorithm is based on a hierarchical mixture of latent variable models, whose parameters are estimated using the expectation-maximization algorithm. We demonstrate the principle of the approach on a toy data set, and we then apply the algorithm to the visualization of a synthetic data set in 12 dimensions obtained from a simulation of multi-phase flows in oil pipelines, and to data in 36 dimensions derived from satellite images. A Matlab software implementation of the algorithm is publicly available from the world-wide web.
node26:Academic paper with title and abstract:  Solving the multiple-instance problem with axis-parallel rectangles. : The multiple instance problem arises in tasks where the training examples are ambiguous: a single example object may have many alternative feature vectors (instances) that describe it, and yet only one of those feature vectors may be responsible for the observed classification of the object. This paper describes and compares three kinds of algorithms that learn axis-parallel rectangles to solve the multiple-instance problem. Algorithms that ignore the multiple instance problem perform very poorly. An algorithm that directly confronts the multiple instance problem (by attempting to identify which feature vectors are responsible for the observed classifications) performs best, giving 89% correct predictions on a musk-odor prediction task. The paper also illustrates the use of artificial data to debug and compare these algorithms.",cora_link,lp
"Classify the relationship between two essays denoted as node10 and node1 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Explores evolutionary costs of learning, showing genetic assimilation of traits via models like NK landscapes and robot experiments, revealing a plasticity ""hump.""  
node1: Introduces EMMA for entropy optimization via kernel density, applied to 3D model alignment and MRI corruption detection.  
node2: Examines island model GAs on linearly separable problems, highlighting subpopulations' role in preserving diversity and tracking search paths.  
node3: Discusses genetic programming methodology, parallelization, and applications (abstract unavailable).  
node4: Focuses on learning overcomplete representations (abstract unavailable).  
node5: Proposes contextual ICA, incorporating temporal structures to separate sources with Gaussian or low-kurtosis distributions.  
node6: Applies ICA to Japanese stock data, identifying shock-based and fluctuation components for improved portfolio reconstruction.  
node7: Studies IPD with partner choice/refusal, revealing metastable mixed-strategy populations in complex adaptive systems.  
node8: Explores neural map formation via objective functions derived from neural dynamics (cites Rumelhart et al.).  
node9: Uses info maximization for blind separation of delayed sources, validated with speech signals.  
node10: Derives an info-max network for blind source separation/deconvolution, achieving high accuracy with non-linear units.  
node11: Textbook on GAs covering search, optimization, and machine learning (Michalewicz).  
node12: Introduces ARL to evolve subroutines in GP, enhancing scalability for complex control problems.  
node13: Demonstrates GP evolving abstract data structures (e.g., lists) using Pareto fitness and shared ADFs.  
node14: Uses GP to optimize UK power network maintenance scheduling, improving on prior GA methods.  
node15: Analyzes the ""Ant problem's"" deceptive fitness landscape, hindering evolutionary algorithms' performance.  
node16: Applies forward models to supervised learning with distal teachers, addressing action-outcome dynamics.  
node17: Learns sparse overcomplete image codes via efficient coding, outperforming Fourier/Wavelet bases.  
node18: Links neural map dynamics to objective functions, using coordinate transformations to compare models.  
node19: Proposes a heuristic to enhance genetic algorithms for bin-packing optimization.  
node20: Evolutionary heuristic for the minimum vertex cover problem (abstract incomplete).  
node21: Improves vector quantization (LBG-U) using neural network-inspired methods.  
node22: Develops recurrent NNs with adaptive learning rates for faster blind source separation.  
node23: Uses frequency-domain infomax for real-room source separation, bypassing non-minimum phase issues.  
node24: Investigates unsupervised category learning, focusing on credit allocation and generalization.  
node25: Proposes predictability minimization to learn factorial codes with non-redundant, independent features.  
node26: Shows GP can evolve abstract data structures (stacks/queues) via multi-tree programs and ADFs.  
node27: Presents a fast, parameter-free fixed-point ICA algorithm with cubic convergence for non-Gaussian sources.

the connection relationship among the nodes mentioned:
 <node0, node11>,<node2, node11>,<node3, node11>,<node4, node10>,<node4, node17>,<node5, node9>,<node5, node10>,<node6, node9>,<node6, node10>,<node7, node11>,<node8, node16>,<node8, node18>,<node8, node21>,<node8, node24>,<node9, node10>,<node9, node23>,<node10, node17>,<node10, node18>,<node10, node22>,<node10, node23>,<node10, node24>,<node10, node25>,<node10, node27>,<node11, node12>,<node11, node13>,<node11, node14>,<node11, node19>,<node11, node20>,<node13, node26>,<node14, node26>,<node15, node26>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","Yes, they have citation relationships","

node0: Explores evolutionary costs of learning, showing genetic assimilation of traits via models like NK landscapes and robot experiments, revealing a plasticity ""hump.""  
node1: Introduces EMMA for entropy optimization via kernel density, applied to 3D model alignment and MRI corruption detection.  
node2: Examines island model GAs on linearly separable problems, highlighting subpopulations' role in preserving diversity and tracking search paths.  
node3: Discusses genetic programming methodology, parallelization, and applications (abstract unavailable).  
node4: Focuses on learning overcomplete representations (abstract unavailable).  
node5: Proposes contextual ICA, incorporating temporal structures to separate sources with Gaussian or low-kurtosis distributions.  
node6: Applies ICA to Japanese stock data, identifying shock-based and fluctuation components for improved portfolio reconstruction.  
node7: Studies IPD with partner choice/refusal, revealing metastable mixed-strategy populations in complex adaptive systems.  
node8: Explores neural map formation via objective functions derived from neural dynamics (cites Rumelhart et al.).  
node9: Uses info maximization for blind separation of delayed sources, validated with speech signals.  
node10: Derives an info-max network for blind source separation/deconvolution, achieving high accuracy with non-linear units.  
node11: Textbook on GAs covering search, optimization, and machine learning (Michalewicz).  
node12: Introduces ARL to evolve subroutines in GP, enhancing scalability for complex control problems.  
node13: Demonstrates GP evolving abstract data structures (e.g., lists) using Pareto fitness and shared ADFs.  
node14: Uses GP to optimize UK power network maintenance scheduling, improving on prior GA methods.  
node15: Analyzes the ""Ant problem's"" deceptive fitness landscape, hindering evolutionary algorithms' performance.  
node16: Applies forward models to supervised learning with distal teachers, addressing action-outcome dynamics.  
node17: Learns sparse overcomplete image codes via efficient coding, outperforming Fourier/Wavelet bases.  
node18: Links neural map dynamics to objective functions, using coordinate transformations to compare models.  
node19: Proposes a heuristic to enhance genetic algorithms for bin-packing optimization.  
node20: Evolutionary heuristic for the minimum vertex cover problem (abstract incomplete).  
node21: Improves vector quantization (LBG-U) using neural network-inspired methods.  
node22: Develops recurrent NNs with adaptive learning rates for faster blind source separation.  
node23: Uses frequency-domain infomax for real-room source separation, bypassing non-minimum phase issues.  
node24: Investigates unsupervised category learning, focusing on credit allocation and generalization.  
node25: Proposes predictability minimization to learn factorial codes with non-redundant, independent features.  
node26: Shows GP can evolve abstract data structures (stacks/queues) via multi-tree programs and ADFs.  
node27: Presents a fast, parameter-free fixed-point ICA algorithm with cubic convergence for non-Gaussian sources.","node0:Academic paper with title and abstract:  The evolutionary cost of learning. : Traits that are acquired by members of an evolving population during their lifetime, through adaptive processes such as learning, can become genetically specified in later generations. Thus there is a change in the level of learning in the population over evolutionary time. This paper explores the idea that as well as the benefits to be gained from learning, there may also be costs to be paid for the ability to learn. It is these costs that supply the selection pressure for the genetic assimilation of acquired traits. Two models are presented that attempt to illustrate this assertion. The first uses Kauffman's NK fitness landscapes to show the effect that both explicit and implicit costs have on the assimilation of learnt traits. A characteristic `hump' is observed in the graph of the level of plasticity in the population showing that learning is first selected for and then against as evolution progresses. The second model is a practical example in which neural network controllers are evolved for a small mobile robot. Results from this experiment also show the hump.
node1:Academic paper with title and abstract: Empirical Entropy Manipulation for Real-World Problems: No finite sample is sufficient to determine the density, and therefore the entropy, of a signal directly. Some assumption about either the functional form of the density or about its smoothness is necessary. Both amount to a prior over the space of possible density functions. By far the most common approach is to assume that the density has a parametric form. By contrast we derive a differential learning rule called EMMA that optimizes entropy by way of kernel density estimation. Entropy and its derivative can then be calculated by sampling from this density estimate. The resulting parameter update rule is surprisingly simple and efficient. We will describe two real-world applications that can be solved efficiently and reliably using EMMA. In the first application EMMA is used to align 3D models to complex natural images. In the second application EMMA is used to detect and correct corruption in magnetic resonance images (MRI). Both applications are beyond the scope of existing parametric entropy models.
node2:Academic paper with title and abstract: Island Model Genetic Algorithms and Linearly Separable Problems: Parallel Genetic Algorithms have often been reported to yield better performance than Genetic Algorithms which use a single large panmictic population. In the case of the Island Model Genetic Algorithm, it has been informally argued that having multiple subpopulations helps to preserve genetic diversity, since each island can potentially follow a different search trajectory through the search space. On the other hand, linearly separable functions have often been used to test Island Model Genetic Algorithms; it is possible that Island Models are particular well suited to separable problems. We look at how Island Models can track multiple search trajectories using the infinite population models of the simple genetic algorithm. We also introduce a simple model for better understanding when Island Model Genetic Algorithms may have an advantage when processing linearly separable problems.
node3:Academic paper with title and abstract: Genetic Programming Methodology, Parallelization and Applications  par: 
node4:Academic paper with title and abstract: Learning overcomplete representations: 
node5:Academic paper with title and abstract: A Context-Sensitive Generalization of ICA: Source separation arises in a surprising number of signal processing applications, from speech recognition to EEG analysis. In the square linear blind source separation problem without time delays, one must find an unmixing matrix which can detangle the result of mixing n unknown independent sources through an unknown n fi n mixing matrix. The recently introduced ICA blind source separation algorithm (Baram and Roth 1994; Bell and Sejnowski 1995) is a powerful and surprisingly simple technique for solving this problem. ICA is all the more remarkable for performing so well despite making absolutely no use of the temporal structure of its input! This paper presents a new algorithm, contextual ICA, which derives from a maximum likelihood density estimation formulation of the problem. cICA can incorporate arbitrarily complex adaptive history-sensitive source models, and thereby make use of the temporal structure of its input. This allows it to separate in a number of situations where standard ICA cannot, including sources with low kurtosis, colored gaussian sources, and sources which have gaussian histograms. Since ICA is a special case of cICA, the MLE derivation provides as a corollary a rigorous derivation of classic ICA.
node6:Academic paper with title and abstract: Working Paper IS-97-22 (Information Systems) A First Application of Independent Component Analysis to Extracting Structure: This paper discusses the application of a modern signal processing technique known as independent component analysis (ICA) or blind source separation to multivariate financial time series such as a portfolio of stocks. The key idea of ICA is to linearly map the observed multivariate time series into a new space of statistically independent components (ICs). This can be viewed as a factorization of the portfolio since joint probabilities become simple products in the coordinate system of the ICs. We apply ICA to three years of daily returns of the 28 largest Japanese stocks and compare the results with those obtained using principal component analysis. The results indicate that the estimated ICs fall into two categories, (i) infrequent but large shocks (responsible for the major changes in the stock prices), and (ii) frequent smaller fluctuations (contributing little to the overall level of the stocks). We show that the overall stock price can be reconstructed surprisingly well by using a small number of thresholded weighted ICs. In contrast, when using shocks derived from principal components instead of independent components, the reconstructed price is less similar to the original one. Independent component analysis is a potentially powerful method of analyzing and understanding driving mechanisms in financial markets. There are further promising applications to risk management since ICA focuses on higher order statistics.
node7:Academic paper with title and abstract:  Iterated prisoner\'s dilemma with choice and refusal of partners. : University of Wisconsin-Madison, Department of Computer Sciences Technical Report CS-TR-94-1259 Abstract The Iterated Prisoner's Dilemma with Choice and Refusal (IPD/CR) [46] is an extension of the Iterated Prisoner's Dilemma with evolution that allows players to choose and to refuse their game partners. From individual behaviors, behavioral population structures emerge. In this report, we examine one particular IPD/CR environment and document the social network methods used to identify population behaviors found within this complex adaptive system. In contrast to the standard homogeneous population of nice cooperators, we have also found metastable populations of mixed strategies within this environment. In particular, the social networks of interesting populations and their evolution are examined.
node8:Academic paper with title and abstract:  Self-organized formation of typologically correct feature maps. : 2] D. E. Rumelhart, G. E. Hinton and R. J. Williams, ""Learning Internal Representations by Error Propagation"", in D. E. Rumelhart and J. L. McClelland (eds.) Parallel Distributed Processing: Explorations in the Microstructure of Cognition (Vol. 1), MIT Press (1986).
node9:Academic paper with title and abstract:  Blind separation of delayed sources based on information maximisation, : Blind separation of independent sources from their convolutive mixtures is a problem in many real world multi-sensor applications. In this paper we present a solution to this problem based on the information maximization principle, which was recently proposed by Bell and Sejnowski for the case of blind separation of instantaneous mixtures. We present a feedback network architecture capable of coping with convolutive mixtures, and we derive the adaptation equations for the adaptive filters in the network by maximizing the information transferred through the network. Examples using speech signals are presented to illustrate the algorithm.
node10:Academic paper with title and abstract:  An Information Maximization Approach to Blind Separation and Blind Deconvolution. : We derive a new self-organising learning algorithm which maximises the information transferred in a network of non-linear units. The algorithm does not assume any knowledge of the input distributions, and is defined here for the zero-noise limit. Under these conditions, information maximisation has extra properties not found in the linear case (Linsker 1989). The non-linearities in the transfer function are able to pick up higher-order moments of the input distributions and perform something akin to true redundancy reduction between units in the output representation. This enables the network to separate statistically independent components in the inputs: a higher-order generalisation of Principal Components Analysis. We apply the network to the source separation (or cocktail party) problem, successfully separating unknown mixtures of up to ten speakers. We also show that a variant on the network architecture is able to perform blind deconvolution (cancellation of unknown echoes and reverberation in a speech signal). Finally, we derive dependencies of information transfer on time delays. We suggest that information max-imisation provides a unifying framework for problems in `blind' signal processing. fl Please send comments to tony@salk.edu. This paper will appear as Neural Computation, 7, 6, 1004-1034 (1995). The reference for this version is: Technical Report no. INC-9501, February 1995, Institute for Neural Computation, UCSD, San Diego, CA 92093-0523.
node11:Academic paper with title and abstract:  Genetic Algorithms in Search, Optimization and Machine Learning. : Angeline, P., Saunders, G. and Pollack, J. (1993) An evolutionary algorithm that constructs recurrent neural networks, LAIR Technical Report #93-PA-GNARLY, Submitted to IEEE Transactions on Neural Networks Special Issue on Evolutionary Programming.
node12:Academic paper with title and abstract:  Towards automatic discovery of building blocks in genetic programming. : This paper presents an algorithm for the discovery of building blocks in genetic programming (GP) called adaptive representation through learning (ARL). The central idea of ARL is the adaptation of the problem representation, by extending the set of terminals and functions with a set of evolvable subroutines. The set of subroutines extracts common knowledge emerging during the evolutionary process and acquires the necessary structure for solving the problem. ARL supports subroutine creation and deletion. Subroutine creation or discovery is performed automatically based on the differential parent-offspring fitness and block activation. Subroutine deletion relies on a utility measure similar to schema fitness over a window of past generations. The technique described is tested on the problem of controlling an agent in a dynamic and non-deterministic environment. The automatic discovery of subroutines can help scale up the GP technique to complex problems.
node13:Academic paper with title and abstract:  A bibliography for genetic programming. : In real world applications, software engineers recognise the use of memory must be organised via data structures and that software using the data must be independant of the data structures' implementation details. They achieve this by using abstract data structures, such as records, files and buffers. We demonstrate that genetic programming can automatically implement simple abstract data structures, considering in detail the task of evolving a list. We show general and reasonably efficient implementations can be automatically generated from simple primitives. A model for maintaining evolved code is demonstrated using the list problem. Much published work on genetic programming (GP) evolves functions without side-effects to learn patterns in test data. In contrast human written programs often make extensive and explicit use of memory. Indeed memory in some form is required for a programming system to be Turing Complete, i.e. for it to be possible to write any (computable) program in that system. However inclusion of memory can make the interactions between parts of programs much more complex and so make it harder to produce programs. Despite this it has been shown GP can automatically create programs which explicitly use memory [Teller 1994]. In both normal and genetic programming considerable benefits have been found in adopting a structured approach. For example [Koza 1994] shows the introduction of evolvable code modules (automatically defined functions, ADFs) can greatly help GP to reach a solution. We suggest that a corresponding structured approach to use of data will similarly have significant advantage to GP. Earlier work has demonstrated that genetic programming can automatically generate simple abstract data structures, namely stacks and queues [Langdon 1995a]. That is, GP can evolve programs that organise memory (accessed via simple read and write primitives) into data structures which can be used by external software without it needing to know how they are implemented. This chapter shows it is possible to evolve a list data structure from basic primitives. [Aho, Hopcroft and Ullman 1987] suggest three different ways to implement a list but these experiments show GP can evolve its own implementation. This requires all the list components to agree on one implementation as they co-evolve together. Section 20.3 describes the GP architecture, including use of Pareto multiple component fitness scoring (20.3.4) and measures aimed at speeding the GP search (20.3.5). The evolved solutions are described in Section 20.4. Section 20.5 presents a candidate model for maintaining evolved software. This is followed by a discussion of what we have learned (20.6) and conclusions that can be drawn (20.7).
node14:Academic paper with title and abstract:  Scheduling maintenance of electrical power transmission networks using genetic programming. : Previous work showed the combination of a Genetic Algorithm using an order or permutation chromosome combined with hand coded ""Greedy"" Optimizers can readily produce an optimal schedule for a four node test problem [ Langdon, 1995 ] . Following this the same GA has been used to find low cost schedules for the South Wales region of the UK high voltage power network. This paper describes the evolution of the best known schedule for the base South Wales problem using Genetic Programming starting from the hand coded heuris tics used with the GA.
node15:Academic paper with title and abstract:  Why ants are hard. : The problem of programming an artificial ant to follow the Santa Fe trail is used as an example program search space. Previously reported genetic programming, simulated annealing and hill climbing performance is shown not to be much better than random search on the Ant problem. Analysis of the program search space in terms of fixed length schema suggests it is highly deceptive and that for the simplest solutions large building blocks must be assembled before they have above average fitness. In some cases we show solutions cannot be assembled using a fixed representation from small building blocks of above average fitness. This suggest the Ant problem is difficult for Genetic Algorithms.
node16:Academic paper with title and abstract:  ""Forward Models: Supervised Learning with a Distal Teacher,"" : Internal models of the environment have an important role to play in adaptive systems in general and are of particular importance for the supervised learning paradigm. In this paper we demonstrate that certain classical problems associated with the notion of the ""teacher"" in supervised learning can be solved by judicious use of learned internal models as components of the adaptive system. In particular, we show how supervised learning algorithms can be utilized in cases in which an unknown dynamical system intervenes between actions and desired outcomes. Our approach applies to any supervised learning algorithm that is capable of learning in multi-layer networks. *This paper is a revised version of MIT Center for Cognitive Science Occasional Paper #40. We wish to thank Michael Mozer, Andrew Barto, Robert Jacobs, Eric Loeb, and James McClelland for helpful comments on the manuscript. This project was supported in part by BRSG 2 S07 RR07047-23 awarded by the Biomedical Research Support Grant Program, Division of Research Resources, National Institutes of Health, by a grant from ATR Auditory and Visual Perception Research Laboratories, by a grant from Siemens Corporation, by a grant from the Human Frontier Science Program, and by grant N00014-90-J-1942 awarded by the Office of Naval Research.
node17:Academic paper with title and abstract:  Inferring sparse, overcomplete image codes using an efficient coding framework. : We apply a general technique for learning overcomplete bases to the problem of finding efficient image codes. The bases learned by the algorithm are localized, oriented, and bandpass, consistent with earlier results obtained using related methods. We show that the learned bases are Gabor-like in structure and that higher degrees of overcompleteness produce greater sampling density in position, orientation, and scale. The efficient coding framework provides a method for comparing different bases objectively by calculating their probability given the observed data or by measuring the entropy of the basis function coefficients. Compared to complete and overcomplete Fourier and wavelet bases, the learned bases have much better coding efficiency. We demonstrate the improvement in the representation of the learned bases by showing superior performance in image denoising and filling-in of missing pixels.
node18:Academic paper with title and abstract:  Objective functions for neural map formation. : Institute for Neural Computation Technical Report Series, No. INC-9701, January 1997. University of California, San Diego. La Jolla, CA 92093. Abstract Computational models of neural map formation can be considered on at least three different levels of abstraction: detailed models including neural activity dynamics, weight dynamics which abstract from the the neural activity dynamics by an adiabatic approximation, and objective functions from which weight dynamics may be derived as gradient flows. In this paper we present an example of how an objective function can be derived from detailed non-linear neural dynamics. A systematic investigation reveals how different weight dynamics introduced previously can be derived from objective functions generated from a few prototypical terms. This includes dynamic link matching as a special case of neural map formation. We focus in particular on the role of coordinate transformations to derive different weight dynamics from the same objective function. Coordinate transformations are also important in deriving normalization rules from constraints. Several examples illustrate how objective functions can help in understanding, generating, and comparing different models of neural map formation. The techniques used in this analysis may also be useful in investigating other types of neural dynamics.
node19:Academic paper with title and abstract:  A heuristic for improved genetic bin packing. : University of Tulsa Technical Report UTULSA-MCS-93-8, May, 1993. Submitted to Information Processing Letters, May, 1993.
node20:Academic paper with title and abstract:  Back. An evolutionary heuristic for the minimum vertex cover prob-lem. : 
node21:Academic paper with title and abstract:  ""The LBG-U method for vector quantization An improvement over LBG inspired from neural networks,"" : Internal Report 97-01
node22:Academic paper with title and abstract:  Recurrent neural networks for blind separation of sources, : Novel on-line learning algorithms with self adaptive learning rates (parameters) for blind separation of signals are proposed. The main motivation for development of new learning rules is to improve convergence speed and to reduce cross-talking, especially for non-stationary signals. Furthermore, we have discovered that under some conditions the proposed neural network models with associated learning algorithms exhibit a random switch of attention, i.e. they have ability of chaotic or random switching or cross-over of output signals in such way that a specified separated signal may appear at various outputs at different time windows. Validity, performance and dynamic properties of the proposed learning algorithms are investigated by computer simulation experiments.
node23:Academic paper with title and abstract:  Blind separation of delayed and convolved sources. : We address the difficult problem of separating multiple speakers with multiple microphones in a real room. We combine the work of Torkkola and Amari, Cichocki and Yang, to give Natural Gradient information maximisation rules for recurrent (IIR) networks, blindly adjusting delays, separating and deconvolving mixed signals. While they work well on simulated data, these rules fail in real rooms which usually involve non-minimum phase transfer functions, not-invertible using stable IIR filters. An approach that sidesteps this problem is to perform infomax on a feedforward architecture in the frequency domain (Lambert 1996). We demonstrate real-room separation of two natural signals using this approach.
node24:Academic paper with title and abstract:  Generalization and exclusive allocation of credit in unsupervised category learning. Network: : Acknowledgements: This research was supported in part by the Office of Naval Research (Cognitive and Neural Sciences, N00014-93-1-0208) and by the Whitaker Foundation (Special Opportunity Grant). We thank George Kalarickal, Charles Schmitt, William Ross, and Douglas Kelly for valuable discussions.
node25:Academic paper with title and abstract:  Learning factorial codes by predictability minimization. : I propose a novel general principle for unsupervised learning of distributed non-redundant internal representations of input patterns. The principle is based on two opposing forces. For each representational unit there is an adaptive predictor which tries to predict the unit from the remaining units. In turn, each unit tries to react to the environment such that it minimizes its predictability. This encourages each unit to filter `abstract concepts' out of the environmental input such that these concepts are statistically independent of those upon which the other units focus. I discuss various simple yet potentially powerful implementations of the principle which aim at finding binary factorial codes (Bar-low et al., 1989), i.e. codes where the probability of the occurrence of a particular input is simply the product of the probabilities of the corresponding code symbols. Such codes are potentially relevant for (1) segmentation tasks, (2) speeding up supervised learning, (3) novelty detection. Methods for finding factorial codes automatically implement Occam's razor for finding codes using a minimal number of units. Unlike previous methods the novel principle has a potential for removing not only linear but also non-linear output redundancy. Illustrative experiments show that algorithms based on the principle of predictability minimization are practically feasible. The final part of this paper describes an entirely local algorithm that has a potential for learning unique representations of extended input sequences.
node26:Academic paper with title and abstract:  Data Structures and Genetic Programming, : It is established good software engineering practice to ensure that programs use memory via abstract data structures such as stacks, queues and lists. These provide an interface between the program and memory, freeing the program of memory management details which are left to the data structures to implement. The main result presented herein is that GP can automatically generate stacks and queues. Typically abstract data structures support multiple operations, such as put and get. We show that GP can simultaneously evolve all the operations of a data structure by implementing each such operation with its own independent program tree. That is, the chromosome consists of a fixed number of independent program trees. Moreover, crossover only mixes genetic material of program trees that implement the same operation. Program trees interact with each other only via shared memory and shared ""Automatically Defined Functions"" (ADFs).
node27:Academic paper with title and abstract:  A fast txed-point algorithm for independent component analysis, : This paper will appear in Neural Computation, 9:1483-1492, 1997. Abstract We introduce a novel fast algorithm for Independent Component Analysis, which can be used for blind source separation and feature extraction. It is shown how a neural network learning rule can be transformed into a txed-point iteration, which provides an algorithm that is very simple, does not depend on any user-detned parameters, and is fast to converge to the most accurate solution allowed by the data. The algorithm tnds, one at a time, all non-Gaussian independent components, regardless of their probability distributions. The computations can be performed either in batch mode or in a semi-adaptive manner. The convergence of the algorithm is rigorously proven, and the convergence speed is shown to be cubic. Some comparisons to gradient based algorithms are made, showing that the new algorithm is usually 10 to 100 times faster, sometimes giving the solution in just a few iterations.",cora_link,lp
"Classify the relationship between two essays denoted as node3 and node17 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Integrates Bayesian networks and case-based reasoning for multiagent planning tasks, using soccer as an example, focusing on action selection and feature-based context.  
node1: Annotated ML bibliography from a 1995 tutorial, noting its outdated status and referencing upcoming textbooks.  
node2: Navy's Java-based CBR tool (NACODAE) for decision support in maintenance, training, and logistics, aiming for operational deployment.  
node3: Explores distributed processing in Case Retrieval Nets, distinguishing between library and case distribution, with extended partitioning models.  
node4: Enhances MCMC via auxiliary variables (e.g., Swendsen-Wang) and partial decoupling, applied to Bayesian image analysis tasks.  
node5: Analyzes slice sampler's geometric ergodicity, providing convergence bounds using Foster-Lyapunov drift conditions.  
node6: Reviews foundational CBR concepts, methodologies, and system approaches, with acknowledgments for technical support.  
node7: Develops dynamic factor models with stochastic volatility for financial time series, comparing Bayesian methods to variance discounting.  
node8: CBET tool for interactive case base exploration, aiding firefighting training via clustering, feature selection, and visualization.  
node9: Statistical methods for detecting change points in stochastic processes and spatial data, citing collaborative research and funding.  
node10: Cooperative CBR agents (DistCBR/ColCBR) for protein purification, using Plural Noos to enable inter-agent communication.  
node11: Proposes a memory model for case retrieval using activation passing, though abstract is incomplete.  
node12: Introduces Case Retrieval Nets with spreading activation for efficient case retrieval and suggests model extensions.  
node13: Applies object-directed Case Retrieval Nets to technical diagnosis by integrating domain models with case data.  
node14: Compares marker-passing and KDSA retrieval methods, analyzing scalability for large knowledge bases.  
node15: Refines conversational case libraries via Clire, improving CBR performance through automated guideline adherence.  
node16: Uses sampling and hill climbing algorithms to reduce prototype/feature sets for efficient nearest neighbor classification.  
node17: Parallel island model GA outperforms serial GA in multiprocessor scheduling, offering faster computation and better solutions.  
node18: Examines geometric ergodicity in hybrid Markov chains, linking their properties to constituent component behaviors.  
node19: Discusses Dirichlet process prior in Bayesian nonparametric inference under partial exchangeability conditions.  
node20: Gibbs sampler convergence rates depend on region boundary smoothness, with geometric ergodicity for smooth boundaries.  
node21: Empirical method to generalize case study results for ML algorithms, with an example applying rules to predict algorithm performance.

the connection relationship among the nodes mentioned:
 <node0, node6>,<node1, node6>,<node1, node21>,<node2, node6>,<node2, node15>,<node3, node6>,<node3, node11>,<node3, node12>,<node3, node13>,<node3, node14>,<node4, node5>,<node4, node20>,<node5, node20>,<node6, node8>,<node6, node10>,<node7, node9>,<node8, node16>,<node9, node19>,<node11, node12>,<node11, node13>,<node12, node13>,<node12, node14>,<node13, node14>,<node16, node21>,<node18, node20>,<node19, node20>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","No, they do not have citation relationships","

node0: Integrates Bayesian networks and case-based reasoning for multiagent planning tasks, using soccer as an example, focusing on action selection and feature-based context.  
node1: Annotated ML bibliography from a 1995 tutorial, noting its outdated status and referencing upcoming textbooks.  
node2: Navy's Java-based CBR tool (NACODAE) for decision support in maintenance, training, and logistics, aiming for operational deployment.  
node3: Explores distributed processing in Case Retrieval Nets, distinguishing between library and case distribution, with extended partitioning models.  
node4: Enhances MCMC via auxiliary variables (e.g., Swendsen-Wang) and partial decoupling, applied to Bayesian image analysis tasks.  
node5: Analyzes slice sampler's geometric ergodicity, providing convergence bounds using Foster-Lyapunov drift conditions.  
node6: Reviews foundational CBR concepts, methodologies, and system approaches, with acknowledgments for technical support.  
node7: Develops dynamic factor models with stochastic volatility for financial time series, comparing Bayesian methods to variance discounting.  
node8: CBET tool for interactive case base exploration, aiding firefighting training via clustering, feature selection, and visualization.  
node9: Statistical methods for detecting change points in stochastic processes and spatial data, citing collaborative research and funding.  
node10: Cooperative CBR agents (DistCBR/ColCBR) for protein purification, using Plural Noos to enable inter-agent communication.  
node11: Proposes a memory model for case retrieval using activation passing, though abstract is incomplete.  
node12: Introduces Case Retrieval Nets with spreading activation for efficient case retrieval and suggests model extensions.  
node13: Applies object-directed Case Retrieval Nets to technical diagnosis by integrating domain models with case data.  
node14: Compares marker-passing and KDSA retrieval methods, analyzing scalability for large knowledge bases.  
node15: Refines conversational case libraries via Clire, improving CBR performance through automated guideline adherence.  
node16: Uses sampling and hill climbing algorithms to reduce prototype/feature sets for efficient nearest neighbor classification.  
node17: Parallel island model GA outperforms serial GA in multiprocessor scheduling, offering faster computation and better solutions.  
node18: Examines geometric ergodicity in hybrid Markov chains, linking their properties to constituent component behaviors.  
node19: Discusses Dirichlet process prior in Bayesian nonparametric inference under partial exchangeability conditions.  
node20: Gibbs sampler convergence rates depend on region boundary smoothness, with geometric ergodicity for smooth boundaries.  
node21: Empirical method to generalize case study results for ML algorithms, with an example applying rules to predict algorithm performance.","node0:Academic paper with title and abstract: Cooperative Bayesian and Case-Based Reasoning for Solving Multiagent Planning Tasks: We describe an integrated problem solving architecture named INBANCA in which Bayesian networks and case-based reasoning (CBR) work cooperatively on multiagent planning tasks. This includes two-team dynamic tasks, and this paper concentrates on simulated soccer as an example. Bayesian networks are used to characterize action selection whereas a case-based approach is used to determine how to implement actions. This paper has two contributions. First, we survey integrations of case-based and Bayesian approaches from the perspective of a popular CBR task decomposition framework, thus explaining what types of integrations have been attempted. This allows us to explain the unique aspects of our proposed integration. Second, we demonstrate how Bayesian nets can be used to provide environmental context, and thus feature selection information, for the case-based reasoner.
node1:Academic paper with title and abstract: Machine Learning: An Annotated Bibliography for the 1995 AI Statistics Tutorial on Machine Learning (Version 1): This is a brief annotated bibliography that I wanted to make available to the attendees of my Machine Learning tutorial at the 1995 AI & Statistics Workshop. These slides are available in my WWW pages under slides. Please contact me if you have any questions. Please also note the date (listed above) on which this was most recently updated. While I plan to make occasional updates to this file, it is bound to be outdated quickly. Also, I apologize for the lack of figures, but my time on this project is limited and the slides should compensate. Finally, this bibliography is, by definition, This book is now out of date. Both Pat Langley and Tom Mitchell are in the process of writing textbooks on this subject, but we're still waiting for them. Until then, I suggest looking at both the Readings and the recent ML conference proceedings (both International and European). There are also a few introductory papers on this subject, though I haven't gotten around to putting them in here yet. However, Pat Langley and Dennis Kibler (1988) have written a good paper on ML as an empirical science, and Pat has written several editorials of use to the ML author (Langley 1986; 1987; 1990). incomplete, and I've left out many other references that may be of some use.
node2:Academic paper with title and abstract: NACODAE: Navy Conversational Decision Aids Environment: This report documents NACODAE, the Navy Conversational Decision Aids Environment being developed at the Navy Center for Applied Research in Artificial Intelligence (NCARAI), which is a branch of the Naval Research Laboratory. NA-CODAE is a software prototype that is being developed under the Practical Advances in Case-Based Reasoning project, which is funded by the Office for Naval Research, for the purpose of assisting Navy and other DoD personnel in decision aids tasks such as system maintenance, operational training, crisis response planning, logistics, fault diagnosis, target classification, and meteorological nowcasting. Implemented in Java, NACODAE can be used on any machine containing a Java virtual machine (e.g., PCs, Unix). This document describes and exemplifies NACODAE's capabilities. Our goal is to transition this tool to operational personnel, and to continue its enhancement through user feedback and by testing recent research advances in case-based reasoning and related areas.
node3:Academic paper with title and abstract: Preparing Case Retrieval Nets for Distributed Processing: In this paper, we discuss two approaches of applying the memory model of Case Retrieval Nets to applications where a distributed processing of information is required. For this, we distinguish two types of such applications, namely (a) the case of distributed case libraries and (b) the case of distributed cases. While a solution to the former is straightforward, the latter requires an extension to Case Retrieval Nets which provides a kind of partitioning of the entire net structure. This extended model even allows for a concurrent implementation of the retrieval process or for the use of collaborative agents for retrieval. Keywords: Case-based reasoning, case retrieval, memory structures, distributed processing.
node4:Academic paper with title and abstract:  Auxilliary variable methods for Markov chain Monte Carlo with applications. : Suppose one wishes to sample from the density (x) using Markov chain Monte Carlo (MCMC). An auxiliary variable u and its conditional distribution (ujx) can be defined, giving the joint distribution (x; u) = (x)(ujx). A MCMC scheme which samples over this joint distribution can lead to substantial gains in efficiency compared to standard approaches. The revolutionary algorithm of Swendsen and Wang (1987) is one such example. In addition to reviewing the Swendsen-Wang algorithm and its generalizations, this paper introduces a new auxiliary variable method called partial decoupling. Two applications in Bayesian image analysis are considered. The first is a binary classification problem in which partial decoupling out performs SW and single site Metropolis. The second is a PET reconstruction which uses the gray level prior of Geman and McClure (1987). A generalized Swendsen-Wang algorithm is developed for this problem, which reduces the computing time to the point that MCMC is a viable method of posterior exploration.
node5:Academic paper with title and abstract:  Convergence Rates of Markov Chains. : In this paper, we analyse theoretical properties of the slice sampler. We find that the algorithm has extremely robust geometric ergodicity properties. For the case of just one auxiliary variable, we demonstrate that the algorithm is stochastically monotone, and deduce analytic bounds on the total variation distance from stationarity of the method using Foster-Lyapunov drift condition methodology.
node6:Academic paper with title and abstract:  Case-based reasoning: Foundational issues, methodological variations, and system approaches. : 10 resources, Alan Schultz for installing a WWW server and providing knowledge on CGI scripts, and John Grefenstette for his comments on an earlier version of this paper.
node7:Academic paper with title and abstract:  Bayesian forecasting and dynamic models. : We discuss the development of dynamic factor models for multivariate financial time series, and the incorporation of stochastic volatility components for latent factor processes. Bayesian inference and computation is developed and explored in a study of the dynamic factor structure of daily spot exchange rates for a selection of international currencies. The models are direct generalisations of univariate stochastic volatility models, and represent specific varieties of models recently discussed in the growing multivariate stochastic volatility literature. We also discuss connections and comparisons with the much simpler method of dynamic variance discounting that, for over a decade, has been a standard approach in applied financial econometrics in the Bayesian forecasting world. We review empirical findings in applying these models to the exchange rate series, including aspects of model performance in dynamic portfolio allocation. We conclude with comments on the potential practical utility of structured factor models and future potential developments and model extensions. The authors acknowledge useful discussions with Jose M Quintana, Neil Shephard and Hong Chang, and partial support from NSF grants DMS-9704432 and DMS-9707914. This manuscript represents a preliminary draft report subject to revision. Before quoting or referencing, please check the authors' web site for a possible updated version. The latest version will be found as ISDS Discussion Paper 98-03 on the Duke web site, http://www.stat.duke.edu/papers/
node8:Academic paper with title and abstract:  Cbet: a case base exploration tool. : CBET is a software tool for the interactive exploration of a case base. CBET is an integrated environment that provides a range of browsing and display functions that make possible knowledge extraction from a set of cases. CBET is motivated by an application to training firemen. Here cases describe past forest fire fighting interventions and CBET is used to detect dependencies between data, acquire practical planning competences, visualize complex data, clustering similar cases. In CBET well rooted Machine Learning techniques for selecting relevant features, clustering cases and forecasting unknown values have been adapted and reused for case base exploration.
node9:Academic paper with title and abstract:  (1994) Change point and change curve modeling in stochastic processes and spatial statistics. : 1 This article will appear in Volume 1, no. 4 (1994) of Journal of Applied Statistical Science. Adrian E. Raftery is Professor of Statistics and Sociology, Department of Statistics, GN-22, University of Washington, Seattle, WA 98195. This research was supported by ONR contract no. N-00014-91-J-1074, by NIH Grant no. 5R01HD26330-02, by the Ministere de la Recherche et de l'Espace, Paris, by the Universite de Paris VI, and by INRIA, Rocquencourt, France. Raftery thanks the latter two institutions, Paul Deheuvels and Gilles Celeux for hearty hospitality during his Paris sabbatical in which this article was written. This article was prepared for presentation at the Conference on Applied Change Point Analysis, University of Maryland-Baltimore, March 17-18, 1993. Parts of this article review collaborative research with others to whom I would like to express my appreciation, namely Volkan Akman, Jeff Banfield, Nhu Le, Steven Lewis, Doug Martin, Fionn Murtagh, Ross Taplin and Simon Tavare.
node10:Academic paper with title and abstract:  ""Cooperative Case-Based Reasoning"", : We are investigating possible modes of cooperation among homogeneous agents with learning capabilities. In this paper we will be focused on agents that learn and solve problems using Case-based Reasoning (CBR), and we will present two modes of cooperation among them: Distributed Case-based Reasoning (DistCBR) and Collective Case-based Reasoning (ColCBR). We illustrate these modes with an application where different CBR agents able to recommend chromatography techniques for protein purification cooperate. The approach taken is to extend Noos, the representation language being used by the CBR agents. Noos is knowledge modeling framework designed to integrate learning methods and based on the task/method decomposition principle. The extension we present, Plural Noos, allows communication and cooperation among agents implemented in Noos by means of three basic constructs: alien references, foreign method evaluation, and mobile methods.
node11:Academic paper with title and abstract:  A Memory Model for Case Retrieval by Activation Passing. : 
node12:Academic paper with title and abstract:  Case Retrieval Nets: Basic ideas and extensions. accepted for: : An efficient retrieval of a relatively small number of relevant cases from a huge case base is a crucial subtask of Case-Based Reasoning (CBR). In this article, we present Case Retrieval Nets, a memory model that has recently been developed for this task. The main idea is to apply a spreading activation process to the case memory structured as a Case Retrieval Net in order to retrieve cases being sufficiently similar to a posed query case. This article summarizes the basic ideas of Case Retrieval Nets and suggests some useful extensions.
node13:Academic paper with title and abstract:  Applying Case Retrieval Nets to diagnostic tasks in technical domains. accepted for: : This paper presents Objectdirected Case Retrieval Nets, a memory model developed for an application of Case-Based Reasoning to the task of technical diagnosis. The key idea is to store cases, i.e. observed symptoms and diagnoses, in a network and to enhance this network with an object model encoding knowledge about the devices in the application domain.
node14:Academic paper with title and abstract:  An investigation of marker-passing algorithms for analogue retrieval. : If analogy and case-based reasoning systems are to scale up to very large case bases, it is important to analyze the various methods used for retrieving analogues to identify the features of the problem for which they are appropriate. This paper reports on one such analysis, a comparison of retrieval by marker passing or spreading activation in a semantic network with Knowledge-Directed Spreading Activation, a method developed to be well-suited for retrieving semantically distant analogues from a large knowledge base. The analysis has two complementary components: (1) a theoretical model of the retrieval time based on a number of problem characteristics, and (2) experiments showing how the retrieval time of the approaches varies with the knowledge base size. These two components, taken together, suggest that KDSA is more likely than SA to be able to scale up to retrieval in large knowledge bases.
node15:Academic paper with title and abstract:  Refining conversational case libraries. : Conversational case-based reasoning (CBR) shells (e.g., Inference's CBR Express) are commercially successful tools for supporting the development of help desk and related applications. In contrast to rule-based expert systems, they capture knowledge as cases rather than more problematic rules, and they can be incrementally extended. However, rather than eliminate the knowledge engineering bottleneck, they refocus it on case engineering, the task of carefully authoring cases according to library design guidelines to ensure good performance. Designing complex libraries according to these guidelines is difficult; software is needed to assist users with case authoring. We describe an approach for revising case libraries according to design guidelines, its implementation in Clire, and empirical results showing that, under some conditions, this approach can improve conversational CBR performance.
node16:Academic paper with title and abstract:  Prototype and feature selection by sampling and random mutation hill climbing algorithms. : With the goal of reducing computational costs without sacrificing accuracy, we describe two algorithms to find sets of prototypes for nearest neighbor classification. Here, the term prototypes refers to the reference instances used in a nearest neighbor computation the instances with respect to which similarity is assessed in order to assign a class to a new data item. Both algorithms rely on stochastic techniques to search the space of sets of prototypes and are simple to implement. The first is a Monte Carlo sampling algorithm; the second applies random mutation hill climbing. On four datasets we show that only three or four prototypes sufficed to give predictive accuracy equal or superior to a basic nearest neighbor algorithm whose run-time storage costs were approximately 10 to 200 times greater. We briefly investigate how random mutation hill climbing may be applied to select features and prototypes simultaneously. Finally, we explain the performance of the sampling algorithm on these datasets in terms of a statistical measure of the extent of clustering displayed by the target classes.
node17:Academic paper with title and abstract:  A parallel island model genetic algorithm for the multiprocessor scheduling problem. : In this paper we compare the performance of a serial and a parallel island model Genetic Algorithm for solving the Multiprocessor Scheduling Problem. We show results using fixed and scaled problems both using and not using migration. We have found that in addition to providing a speedup through the use of parallel processing, the parallel island model GA with migration finds better quality solutions than the serial GA.
node18:Academic paper with title and abstract:  Geometric ergodicity and hybrid Markov chains. : Various notions of geometric ergodicity for Markov chains on general state spaces exist. In this paper, we review certain relations and implications among them. We then apply these results to a collection of chains commonly used in Markov chain Monte Carlo simulation algorithms, the so-called hybrid chains. We prove that under certain conditions, a hybrid chain will ""inherit"" the geometric ergodicity of its constituent parts. Acknowledgements. We thank Charlie Geyer for a number of very useful comments regarding spectral theory and central limit theorems. We thank Alison Gibbs, Phil Reiss, Peter Rosenthal, and Richard Tweedie for very helpful discussions. We thank the referee and the editor for many excellent suggestions.
node19:Academic paper with title and abstract:  A note on the Dirichlet process prior in Bayesian nonparametric inference with partial exchangeability. : Technical Report no. 297 Department of Statistics University of Washington 1 Sonia Petrone is Assistant Professor, Universita di Pavia, Dipartimento di Economia Politica e Metodi Quantitativi, I-27100 Pavia, Italy and Adrian E. Raftery is Professor of Statistics and Sociology, Department of Statistics, University of Washington, Box 354322, Seattle, WA 98195-4322. This research was supported by ONR grant no. N-00014-91-J-1074 and by grants from MURST, Rome.
node20:Academic paper with title and abstract:  On convergence rates of Gibbs samplers for uniform distributions. : We consider a Gibbs sampler applied to the uniform distribution on a bounded region R R d . We show that the convergence properties of the Gibbs sampler depend greatly on the smoothness of the boundary of R. Indeed, for sufficiently smooth boundaries the sampler is uniformly ergodic, while for jagged boundaries the sampler could fail to even be geometrically ergodic.
node21:Academic paper with title and abstract:  Generalizing from case studies: A case study. : Most empirical evaluations of machine learning algorithms are case studies evaluations of multiple algorithms on multiple databases. Authors of case studies implicitly or explicitly hypothesize that the pattern of their results, which often suggests that one algorithm performs significantly better than others, is not limited to the small number of databases investigated, but instead holds for some general class of learning problems. However, these hypotheses are rarely supported with additional evidence, which leaves them suspect. This paper describes an empirical method for generalizing results from case studies and an example application. This method yields rules describing when some algorithms significantly outperform others on some dependent measures. Advantages for generalizing from case studies and limitations of this particular approach are also described.",cora_link,lp
"Classify the relationship between two essays denoted as node5 and node3 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Goal-driven explanation as a learning process; critiques single-strategy AI models, advocates multi-strategy approaches for better goal-oriented learning.  
node1: Culture improves cognitive evolution via non-genetic info transmission; genetic programming experiments show enhanced evolvability in solving tasks.  
node2: Examines breeding strategies and coordination in multi-agent teams; restricted breeding and name-based sensing outperform others in predator/prey environments.  
node3: Cross-validation's modal theories aren't more accurate; they may signal when estimates are unreliable, challenging their perceived reliability.  
node4: Explores automatic creation of adaptive programs for animat systems, focusing on evolving behaviors in artificial life.  
node5: Failure-driven learning uses performance failures as bias; reduces degrees of freedom, enhancing learning efficiency through constrained example selection.  
node6: Analyzes evolved neuro-controllers for robotic bulldozers; shows environment influences network structures through evolutionary design constraints.  
node7: Introspective reasoning using Meta-XPs identifies failures and selects learning strategies to improve future performance in multistrategy systems.  
node8: MAPMAKER evolves agents to create mental models and plans; demonstrates mapping environments and using stored info to find resources like gold.  
node9: Evolves both program code and control structures simultaneously to optimize computational systems' functionality and efficiency.  
node10: Compares mutation vs. crossover in genetic programming; large-scale experiments analyze their roles in optimizing evolutionary algorithm performance.  
node11: Uses introspective reasoning to select learning strategies via Meta-XPs; implemented in Meta-AQUA for drug smuggling domain tasks.  
node12: Addresses learning strategy selection as a planning problem; explores automatic technique choice in multistrategy systems like Meta-AQUA.  
node13: Functional theory integrates reading and creativity; ISAAC system applies to science fiction by analyzing structure and creativity in narratives.  
node14: Enhances genetic programming with cultural info transmission; shared memory mechanisms reduce computational effort in problem-solving tasks.  
node15: SBF models aid structural index learning in case-based systems; provides vocabulary and bias for design case generalization in physical devices.  
node16: Incremental case-based learning refines cases over time; improves understanding through repeated application and refinement in story contexts.

the connection relationship among the nodes mentioned:
 <node0, node7>,<node1, node8>,<node1, node9>,<node2, node8>,<node2, node9>,<node4, node8>,<node4, node9>,<node5, node7>,<node5, node12>,<node5, node16>,<node6, node8>,<node7, node13>,<node8, node9>,<node8, node10>,<node8, node14>,<node9, node14>,<node11, node16>,<node15, node16>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","No, they do not have citation relationships","

node0: Goal-driven explanation as a learning process; critiques single-strategy AI models, advocates multi-strategy approaches for better goal-oriented learning.  
node1: Culture improves cognitive evolution via non-genetic info transmission; genetic programming experiments show enhanced evolvability in solving tasks.  
node2: Examines breeding strategies and coordination in multi-agent teams; restricted breeding and name-based sensing outperform others in predator/prey environments.  
node3: Cross-validation's modal theories aren't more accurate; they may signal when estimates are unreliable, challenging their perceived reliability.  
node4: Explores automatic creation of adaptive programs for animat systems, focusing on evolving behaviors in artificial life.  
node5: Failure-driven learning uses performance failures as bias; reduces degrees of freedom, enhancing learning efficiency through constrained example selection.  
node6: Analyzes evolved neuro-controllers for robotic bulldozers; shows environment influences network structures through evolutionary design constraints.  
node7: Introspective reasoning using Meta-XPs identifies failures and selects learning strategies to improve future performance in multistrategy systems.  
node8: MAPMAKER evolves agents to create mental models and plans; demonstrates mapping environments and using stored info to find resources like gold.  
node9: Evolves both program code and control structures simultaneously to optimize computational systems' functionality and efficiency.  
node10: Compares mutation vs. crossover in genetic programming; large-scale experiments analyze their roles in optimizing evolutionary algorithm performance.  
node11: Uses introspective reasoning to select learning strategies via Meta-XPs; implemented in Meta-AQUA for drug smuggling domain tasks.  
node12: Addresses learning strategy selection as a planning problem; explores automatic technique choice in multistrategy systems like Meta-AQUA.  
node13: Functional theory integrates reading and creativity; ISAAC system applies to science fiction by analyzing structure and creativity in narratives.  
node14: Enhances genetic programming with cultural info transmission; shared memory mechanisms reduce computational effort in problem-solving tasks.  
node15: SBF models aid structural index learning in case-based systems; provides vocabulary and bias for design case generalization in physical devices.  
node16: Incremental case-based learning refines cases over time; improves understanding through repeated application and refinement in story contexts.","node0:Academic paper with title and abstract:  Issues in goal-driven explanation. : When a reasoner explains surprising events for its internal use, a key motivation for explaining is to perform learning that will facilitate the achievement of its goals. Human explainers use a range of strategies to build explanations, including both internal reasoning and external information search, and goal-based considerations have a profound effect on their choices of when and how to pursue explanations. However, standard AI models of explanation rely on goal-neutral use of a single fixed strategy|generally backwards chaining|to build their explanations. This paper argues that explanation should be modeled as a goal-driven learning process for gathering and transforming information, and discusses the issues involved in developing an active multi-strategy process for goal-driven explanation.
node1:Academic paper with title and abstract: Culture Enhances the Evolvability of Cognition: This paper discusses the role of culture in the evolution of cognitive systems. We define culture as any information transmitted between individuals and between generations by non-genetic means. Experiments are presented that use genetic programming systems that include special mechanisms for cultural transmission of information. These systems evolve computer programs that perform cognitive tasks including mathematical function mapping and action selection in a virtual world. The data show that the presence of culture-supporting mechanisms can have a clear beneficial impact on the evolvability of correct programs. The implications that these results may have for cognitive science are briefly discussed.
node2:Academic paper with title and abstract: Evolving Teamwork and Coordination with Genetic Programming: Some problems can be solved only by multi-agent teams. In using genetic programming to produce such teams, one faces several design decisions. First, there are questions of team diversity and of breeding strategy. In one commonly used scheme, teams consist of clones of single individuals; these individuals breed in the normal way and are cloned to form teams during fitness evaluation. In contrast, teams could also consist of distinct individuals. In this case one can either allow free interbreeding between members of different teams, or one can restrict interbreeding in various ways. A second design decision concerns the types of coordination-facilitating mechanisms provided to individual team members; these range from sensors of various sorts to complex communication systems. This paper examines three breeding strategies (clones, free, and restricted) and three coordination mechanisms (none, deictic sensing, and name-based sensing) for evolving teams of agents in the Serengeti world, a simple predator/prey environment. Among the conclusions are the fact that a simple form of restricted interbreeding outperforms free interbreeding in all teams with distinct individuals, and the fact that name-based sensing consistently outperforms deictic sensing.
node3:Academic paper with title and abstract: From: Computational Learning Theory and Natural Systems, Chapter 18, ""Cross-validation and Modal Theories"", Cross-Validation and: Cross-validation is a frequently used, intuitively pleasing technique for estimating the accuracy of theories learned by machine learning algorithms. During testing of a machine learning algorithm (foil) on new databases of prokaryotic RNA transcription promoters which we have developed, cross-validation displayed an interesting phenomenon. One theory is found repeatedly and is responsible for very little of the cross-validation error, whereas other theories are found very infrequently which tend to be responsible for the majority of the cross-validation error. It is tempting to believe that the most frequently found theory (the ""modal theory"") may be more accurate as a classifier of unseen data than the other theories. However, experiments showed that modal theories are not more accurate on unseen data than the other theories found less frequently during cross-validation. Modal theories may be useful in predicting when cross-validation is a poor estimate of true accuracy. We offer explanations 1 For correspondence: Department of Computer Science and Engineering, University of California, San
node4:Academic paper with title and abstract: Automatic Generation of Adaptive Programs Automatic Generation of Adaptive Programs. In From Animals to Animats: 
node5:Academic paper with title and abstract: Abstract: Self-selection of input examples on the basis of performance failure is a powerful bias for learning systems. The definition of what constitutes a learning bias, however, has been typically restricted to bias provided by the input language, hypothesis language, and preference criteria between competing concept hypotheses. But if bias is taken in the broader context as any basis that provides a preference for one concept change over another, then the paradigm of failure-driven processing indeed provides a bias. Bias is exhibited by the selection of examples from an input stream that are examples of failure; successful performance is filtered out. We show that the degrees of freedom are less in failure-driven learning than in success-driven learning and that learning is facilitated because of this constraint. We also broaden the definition of failure, provide a novel taxonomy of failure causes, and illustrate the interaction of both in a multistrategy learning system called Meta-AQUA.
node6:Academic paper with title and abstract:  Analysis of neurocon-trollers designed by simulated evolution. : Randomized adaptive greedy search, using evolutionary algorithms, offers a powerful and versatile approach to the automated design of neural network architectures for a variety of tasks in artificial intelligence and robotics. In this paper we present results from the evolutionary design of a neuro-controller for a robotic bulldozer. This robot is given the task of clearing an arena littered with boxes by pushing boxes to the sides. Through a careful analysis of the evolved networks we show how evolution exploits the design constraints and properties of the environment to produce network structures of high fitness. We conclude with a brief summary of related ongoing research examining the intricate interplay between environment and evolutionary processes in determining the structure and function of the resulting neural architectures.
node7:Academic paper with title and abstract:  Introspective Reasoning using Meta-Explanations for Multistrat-egy Learning. : In order to learn effectively, a reasoner must not only possess knowledge about the world and be able to improve that knowledge, but it also must introspectively reason about how it performs a given task and what particular pieces of knowledge it needs to improve its performance at the current task. Introspection requires declarative representations of meta-knowledge of the reasoning performed by the system during the performance task, of the system's knowledge, and of the organization of this knowledge. This chapter presents a taxonomy of possible reasoning failures that can occur during a performance task, declarative representations of these failures, and associations between failures and particular learning strategies. The theory is based on Meta-XPs, which are explanation structures that help the system identify failure types, formulate learning goals, and choose appropriate learning strategies in order to avoid similar mistakes in the future. The theory is implemented in a computer model of an introspective reasoner that performs multistrategy learning during a story understanding task.
node8:Academic paper with title and abstract:  ""The Evolution of Agents that Build Mental Models and Create Simple Plans Using Genetic Programming,"" : An essential component of an intelligent agent is the ability to notice, encode, store, and utilize information about its environment. Traditional approaches to program induction have focused on evolving functional or reactive programs. This paper presents MAPMAKER, an approach to the automatic generation of agents that discover information about their environment, encode this information for later use, and create simple plans utilizing the stored mental models. In this approach, agents are multipart computer programs that communicate through a shared memory. Both the programs and the representation scheme are evolved using genetic programming. An illustrative problem of 'gold' collection is used to demonstrate the approach in which one part of a program makes a map of the world and stores it in memory, and the other part uses this map to find the gold The results indicate that the approach can evolve programs that store simple representations of their environments and use these representations to produce simple plans. 1. Introduction
node9:Academic paper with title and abstract:  Simultaneous evolution of programs and their control structures. : 
node10:Academic paper with title and abstract:  A comparison of crossover and mutation in genetic programming. : This paper presents a large and systematic body of data on the relative effectiveness of mutation, crossover, and combinations of mutation and crossover in genetic programming (GP). The literature of traditional genetic algorithms contains related studies, but mutation and crossover in GP differ from their traditional counterparts in significant ways. In this paper we present the results from a very large experimental data set, the equivalent of approximately 12,000 typical runs of a GP system, systematically exploring a range of parameter settings. The resulting data may be useful not only for practitioners seeking to optimize parameters for GP runs, but also for theorists exploring issues such as the role of building blocks in GP.
node11:Academic paper with title and abstract:  Using Introspective Reasoning to Select Learning Strategies. : In order to learn effectively, a system must not only possess knowledge about the world and be able to improve that knowledge, but it also must introspectively reason about how it performs a given task and what particular pieces of knowledge it needs to improve its performance at the current task. Introspection requires a declaratflive representation of the reasoning performed by the system during the performance task. This paper presents a taxonomy of possible reasoning failures that can occur during this task, their declarative representations, and their associations with particular learning strategies. We propose a theory of Meta-XPs, which are explanation structures that help the system identify failure types and choose appropriate learning strategies in order to avoid similar mistakes in the future. A program called Meta-AQUA embodies the theory and processes examples in the domain of drug smuggling.
node12:Academic paper with title and abstract:  Choosing learning strategies to achieve learning goals. : In open world applications a number of machine-learning techniques may potentially apply to a given learning situation. The research presented here illustrates the complexity involved in automatically choosing an appropriate technique in a multistrategy learning system. It also constitutes a step toward a general computational solution to the learning-strategy selection problem. The approach is to treat learning-strategy selection as a separate planning problem with its own set of goals, as is the case with ordinary problem-solvers. Therefore, the management and pursuit of these learning goals becomes a central issue in learning, similar to the goal-management problems associated with traditional planning systems. This paper explores some issues, problems, and possible solutions in such a framework. Examples are presented from a multistrategy learning system called Meta-AQUA.
node13:Academic paper with title and abstract:  Integrating reading and creativity: A functional approach. : Reading has been studied for decades by a variety of cognitive disciplines, yet no theories exist which sufficiently describe and explain how people accomplish the complete task of reading real-world texts. In particular, a type of knowledge intensive reading known as creative reading has been largely ignored by the past research. We argue that creative reading is an aspect of practically all reading experiences; as a result, any theory which overlooks this will be insufficient. We have built on results from psychology, artificial intelligence, and education in order to produce a functional theory of the complete reading process. The overall framework describes the set of tasks necessary for reading to be performed. Within this framework, we have developed a theory of creative reading. The theory is implemented in the ISAAC (Integrated Story Analysis And Creativity) system, a reading system which reads science fiction stories.
node14:Academic paper with title and abstract:  Cultural transmission of information in genetic programming. : This paper shows how the performance of a genetic programming system can be improved through the addition of mechanisms for non-genetic transmission of information between individuals (culture). Teller has previously shown how genetic programming systems can be enhanced through the addition of memory mechanisms for individual programs [Teller 1994]; in this paper we show how Teller's memory mechanism can be changed to allow for communication between individuals within and across generations. We show the effects of indexed memory and culture on the performance of a genetic programming system on a symbolic regression problem, on Koza's Lawnmower problem, and on Wum-pus world agent problems. We show that culture can reduce the computational effort required to solve all of these problems. We conclude with a discussion of possible improvements.
node15:Academic paper with title and abstract:  Model-Based Learning of Structural Indices to Design Cases. : A major issue in case-basedsystems is retrieving the appropriate cases from memory to solve a given problem. This implies that a case should be indexed appropriately when stored in memory. A case-based system, being dynamic in that it stores cases for reuse, needs to learn indices for the new knowledge as the system designers cannot envision that knowledge. Irrespective of the type of indexing (structural or functional), a hierarchical organization of the case memory raises two distinct but related issues in index learning: learning the indexing vocabulary and learning the right level of generalization. In this paper we show how structure-behavior-function (SBF) models help in learning structural indices to design cases in the domain of physical devices. The SBF model of a design provides the functional and causal explanation of how the structure of the design delivers its function. We describe how the SBF model of a design provides both the vocabulary for structural indexing of design cases and the inductive biases for index generalization. We further discuss how model-based learning can be integrated with similarity-based learning (that uses prior design cases) for learning the level of index generalization.
node16:Academic paper with title and abstract:  Indexing, Elaboration and Refinement: Incremental Learning of Explanatory Cases. : This article describes how a reasoner can improve its understanding of an incompletely understood domain through the application of what it already knows to novel problems in that domain. Case-based reasoning is the process of using past experiences stored in the reasoner's memory to understand novel situations or solve novel problems. However, this process assumes that past experiences are well understood and provide good ""lessons"" to be used for future situations. This assumption is usually false when one is learning about a novel domain, since situations encountered previously in this domain might not have been understood completely. Furthermore, the reasoner may not even have a case that adequately deals with the new situation, or may not be able to access the case using existing indices. We present a theory of incremental learning based on the revision of previously existing case knowledge in response to experiences in such situations. The theory has been implemented in a case-based story understanding program that can (a) learn a new case in situations where no case already exists, (b) learn how to index the case in memory, and (c) incrementally refine its understanding of the case by using it to reason about new situations, thus evolving a better understanding of its domain through experience. This research complements work in case-based reasoning by providing mechanisms by which a case library can be automatically built for use by a case-based reasoning program.",cora_link,lp
"Classify the relationship between two essays denoted as node5 and node24 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Academic paper on incremental decision tree induction with numeric variables using 'slewing' operator and non-incremental metric-based method.  
node1: MDP-based production scheduling using value functions for optimal decisions, applied to manufacturing with industrial examples.  
node2: Fringe Exploration improves exploration in partially observable domains via short-term memory statistics, tested in mazes and driving.  
node3: TD() with neural networks for NASA job-shop scheduling outperforms simulated annealing, analyzing value function approximation benefits.  
node4: Reinforcement learning methodology for combinatorial optimization, applying learned search control policies to scheduling tasks.  
node5: Reinforcement learning optimizes dialogue strategies for email agents (ELVIS), choosing agent initiatives and message summaries.  
node6: Academic paper on exploration techniques in active learning.  
node7: Real-time dynamic programming learning with acknowledgments and funding details.  
node8: Theoretical bounds on performance loss from approximate value functions in RL, extending to Q-learning.  
node9: Genetic algorithms and simulation models for tactical flight decision rules via competitive learning.  
node10: Genetic algorithms train robot behaviors in simulations for safe navigation and collision avoidance.  
node11: LRTA*-based algorithms solve tasks with O(n²) actions, enabling optimal path planning in state spaces.  
node12: SMART algorithm for continuous-time RL improves factory inventory control via simulation integration.  
node13: Residual algorithms stabilize RL with function approximation, balancing convergence and learning speed.  
node14: Genetic learning combined with behavior-based robotics mimics animal behavior structures in simulated robots.  
node15: Residual Q-learning enhances foveal vision systems for efficient target recognition via strategic fixations.  
node16: Generalized prioritized sweeping extends RL planning to compact representations like Bayesian networks.  
node17: Auto-exploratory H-learning improves average reward RL exploration in robot scheduling tasks.  
node18: Neural elements solving complex control problems through adaptive learning mechanisms.  
node19: Genetic programming evolves board evaluation functions for skillful Senet gameplay via tournament selection.  
node20: Connectionist systems refine search strategies, with two-layer networks excelling in balance control tasks.  
node21: Direct RL methods outperform indirect methods computationally in Markov decision problems.  
node22: Temporal difference methods assign credit via temporal prediction differences, improving accuracy over conventional approaches.  
node23: Dyna architectures integrate learning/planning/reacting via dynamic programming, tested in navigation and adaptive planning.  
node24: Incremental dynamic programming updates evaluation functions for optimal actions in stochastic environments.  
node25: Evolutionary algorithms (SAMUEL) learn collision-avoidance behaviors in simulated mobile robots.  
node26: Statistical mechanics analyze MDP learning curves, providing bounds on undiscounted reward policy performance.

the connection relationship among the nodes mentioned:
 <node0, node22>,<node1, node7>,<node1, node12>,<node1, node22>,<node2, node7>,<node2, node23>,<node3, node22>,<node4, node7>,<node4, node22>,<node5, node7>,<node6, node7>,<node6, node21>,<node6, node23>,<node7, node8>,<node7, node11>,<node7, node17>,<node7, node21>,<node7, node26>,<node8, node18>,<node8, node22>,<node8, node23>,<node9, node10>,<node9, node14>,<node9, node22>,<node9, node25>,<node12, node22>,<node13, node15>,<node13, node22>,<node14, node25>,<node16, node23>,<node18, node20>,<node18, node21>,<node18, node22>,<node18, node23>,<node19, node22>,<node20, node21>,<node20, node22>,<node20, node23>,<node21, node22>,<node21, node23>,<node22, node23>,<node22, node24>,<node22, node26>,<node23, node24>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","Yes, they have citation relationships","

node0: Academic paper on incremental decision tree induction with numeric variables using 'slewing' operator and non-incremental metric-based method.  
node1: MDP-based production scheduling using value functions for optimal decisions, applied to manufacturing with industrial examples.  
node2: Fringe Exploration improves exploration in partially observable domains via short-term memory statistics, tested in mazes and driving.  
node3: TD() with neural networks for NASA job-shop scheduling outperforms simulated annealing, analyzing value function approximation benefits.  
node4: Reinforcement learning methodology for combinatorial optimization, applying learned search control policies to scheduling tasks.  
node5: Reinforcement learning optimizes dialogue strategies for email agents (ELVIS), choosing agent initiatives and message summaries.  
node6: Academic paper on exploration techniques in active learning.  
node7: Real-time dynamic programming learning with acknowledgments and funding details.  
node8: Theoretical bounds on performance loss from approximate value functions in RL, extending to Q-learning.  
node9: Genetic algorithms and simulation models for tactical flight decision rules via competitive learning.  
node10: Genetic algorithms train robot behaviors in simulations for safe navigation and collision avoidance.  
node11: LRTA*-based algorithms solve tasks with O(n²) actions, enabling optimal path planning in state spaces.  
node12: SMART algorithm for continuous-time RL improves factory inventory control via simulation integration.  
node13: Residual algorithms stabilize RL with function approximation, balancing convergence and learning speed.  
node14: Genetic learning combined with behavior-based robotics mimics animal behavior structures in simulated robots.  
node15: Residual Q-learning enhances foveal vision systems for efficient target recognition via strategic fixations.  
node16: Generalized prioritized sweeping extends RL planning to compact representations like Bayesian networks.  
node17: Auto-exploratory H-learning improves average reward RL exploration in robot scheduling tasks.  
node18: Neural elements solving complex control problems through adaptive learning mechanisms.  
node19: Genetic programming evolves board evaluation functions for skillful Senet gameplay via tournament selection.  
node20: Connectionist systems refine search strategies, with two-layer networks excelling in balance control tasks.  
node21: Direct RL methods outperform indirect methods computationally in Markov decision problems.  
node22: Temporal difference methods assign credit via temporal prediction differences, improving accuracy over conventional approaches.  
node23: Dyna architectures integrate learning/planning/reacting via dynamic programming, tested in navigation and adaptive planning.  
node24: Incremental dynamic programming updates evaluation functions for optimal actions in stochastic environments.  
node25: Evolutionary algorithms (SAMUEL) learn collision-avoidance behaviors in simulated mobile robots.  
node26: Statistical mechanics analyze MDP learning curves, providing bounds on undiscounted reward policy performance.","node0:Academic paper with title and abstract:  Incremental induction of decision trees. : Technical Report 94-07 February 7, 1994 (updated April 25, 1994) This paper will appear in Proceedings of the Eleventh International Conference on Machine Learning. Abstract This paper presents an algorithm for incremental induction of decision trees that is able to handle both numeric and symbolic variables. In order to handle numeric variables, a new tree revision operator called `slewing' is introduced. Finally, a non-incremental method is given for finding a decision tree based on a direct metric of a candidate tree.
node1:Academic paper with title and abstract: Value Function Based Production Scheduling: Production scheduling, the problem of sequentially configuring a factory to meet forecasted demands, is a critical problem throughout the manufacturing industry. The requirement of maintaining product inventories in the face of unpredictable demand and stochastic factory output makes standard scheduling models, such as job-shop, inadequate. Currently applied algorithms, such as simulated annealing and constraint propagation, must employ ad-hoc methods such as frequent replanning to cope with uncertainty. In this paper, we describe a Markov Decision Process (MDP) formulation of production scheduling which captures stochasticity in both production and demands. The solution to this MDP is a value function which can be used to generate optimal scheduling decisions online. A simple example illustrates the theoretical superiority of this approach over replanning-based methods. We then describe an industrial application and two reinforcement learning methods for generating an approximate value function on this domain. Our results demonstrate that in both deterministic and noisy scenarios, value function approx imation is an effective technique.
node2:Academic paper with title and abstract: Category: Control, Navigation and Planning. Key words: Reinforcement learning, Exploration, Hidden state. Prefer oral presentation.: This paper presents Fringe Exploration, a technique for efficient exploration in partially observable domains. The key idea, (applicable to many exploration techniques), is to keep statistics in the space of possible short-term memories, instead of in the agent's current state space. Experimental results in a partially observable maze and in a difficult driving task with visual routines show dramatic performance improvements.
node3:Academic paper with title and abstract: Value Function Approximations and Job-Shop Scheduling: We report a successful application of TD() with value function approximation to the task of job-shop scheduling. Our scheduling problems are based on the problem of scheduling payload processing steps for the NASA space shuttle program. The value function is approximated by a 2-layer feedforward network of sigmoid units. A one-step lookahead greedy algorithm using the learned evaluation function outperforms the best existing algorithm for this task, which is an iterative repair method incorporating simulated annealing. To understand the reasons for this performance improvement, this paper introduces several measurements of the learning process and discusses several hypotheses suggested by these measurements. We conclude that the use of value function approximation is not a source of difficulty for our method, and in fact, it may explain the success of the method independent of the use of value iteration. Additional experiments are required to discriminate among our hypotheses.
node4:Academic paper with title and abstract: Solving Combinatorial Optimization Tasks by Reinforcement Learning: A General Methodology Applied to Resource-Constrained Scheduling: This paper introduces a methodology for solving combinatorial optimization problems through the application of reinforcement learning methods. The approach can be applied in cases where several similar instances of a combinatorial optimization problem must be solved. The key idea is to analyze a set of ""training"" problem instances and learn a search control policy for solving new problem instances. The search control policy has the twin goals of finding high-quality solutions and finding them quickly. Results of applying this methodology to a NASA scheduling problem show that the learned search control policy is much more effective than the best known non-learning search procedure|a method based on simulated annealing.
node5:Academic paper with title and abstract: Learning Optimal Dialogue Strategies: A Case Study of a Spoken Dialogue Agent for Email: This paper describes a novel method by which a dialogue agent can learn to choose an optimal dialogue strategy. While it is widely agreed that dialogue strategies should be formulated in terms of communicative intentions, there has been little work on automatically optimizing an agent's choices when there are multiple ways to realize a communicative intention. Our method is based on a combination of learning algorithms and empirical evaluation techniques. The learning component of our method is based on algorithms for reinforcement learning, such as dynamic programming and Q-learning. The empirical component uses the PARADISE evaluation framework (Walker et al., 1997) to identify the important performance factors and to provide the performance function needed by the learning algorithm. We illustrate our method with a dialogue agent named ELVIS (EmaiL Voice Interactive System), that supports access to email over the phone. We show how ELVIS can learn to choose among alternate strategies for agent initiative, for reading messages, and for summarizing email folders.
node6:Academic paper with title and abstract: Exploration in Active Learning: 
node7:Academic paper with title and abstract:  Learning to Act using Real- Time Dynamic Programming. : fl The authors thank Rich Yee, Vijay Gullapalli, Brian Pinette, and Jonathan Bachrach for helping to clarify the relationships between heuristic search and control. We thank Rich Sutton, Chris Watkins, Paul Werbos, and Ron Williams for sharing their fundamental insights into this subject through numerous discussions, and we further thank Rich Sutton for first making us aware of Korf's research and for his very thoughtful comments on the manuscript. We are very grateful to Dimitri Bertsekas and Steven Sullivan for independently pointing out an error in an earlier version of this article. Finally, we thank Harry Klopf, whose insight and persistence encouraged our interest in this class of learning problems. This research was supported by grants to A.G. Barto from the National Science Foundation (ECS-8912623 and ECS-9214866) and the Air Force Office of Scientific Research, Bolling AFB (AFOSR-89-0526).
node8:Academic paper with title and abstract:  An upper bound on the loss from approximate optimal value functions. : Many reinforcement learning (RL) approaches can be formulated from the theory of Markov decision processes and the associated method of dynamic programming (DP). The value of this theoretical understanding, however, is tempered by many practical concerns. One important question is whether DP-based approaches that use function approximation rather than lookup tables, can avoid catastrophic effects on performance. This note presents a result in Bertsekas (1987) which guarantees that small errors in the approximation of a task's optimal value function cannot produce arbitrarily bad performance when actions are selected greedily. We derive an upper bound on performance loss which is slightly tighter than that in Bertsekas (1987), and we show the extension of the bound to Q-learning (Watkins, 1989). These results provide a theoretical justification for a practice that is common in reinforcement learning.
node9:Academic paper with title and abstract:  ""Learning sequential decision rules using simulation models and competition,"" : The problem of learning decision rules for sequential tasks is addressed, focusing on the problem of learning tactical decision rules from a simple flight simulator. The learning method relies on the notion of competition and employs genetic algorithms to search the space of decision policies. Several experiments are presented that address issues arising from differences between the simulation model on which learning occurs and the target environment on which the decision rules are ultimately tested.
node10:Academic paper with title and abstract:  ""Learning robot behaviors using genetic algorithms,"" : Genetic Algorithms are used to learn navigation and collision avoidance behaviors for robots. The learning is performed under simulation, and the resulting behaviors are then used to control the The approach to learning behaviors for robots described here reflects a particular methodology for learning via a simulation model. The motivation is that making mistakes on real systems may be costly or dangerous. In addition, time constraints might limit the number of experiences during learning in the real world, while in many cases, the simulation model can be made to run faster than real time. Since learning may require experimenting with behaviors that might occasionally produce unacceptable results if applied to the real world, or might require too much time in the real environment, we assume that hypothetical behaviors will be evaluated in a simulation model (the off-line system). As illustrated in Figure 1, the current best behavior can be placed in the real, on-line system, while learning continues in the off-line system [1]. The learning algorithm was designed to learn useful behaviors from simulations of limited fidelity. The expectation is that behaviors learned in these simulations will be useful in real-world environments. Previous studies have illustrated that knowledge learned under simulation is robust and might be applicable to the real world if the simulation is more general (i.e. has more noise, more varied conditions, etc.) than the real world environment [2]. Where this is not possible, it is important to identify the differences between the simulation and the world and note the effect upon the learning process. The research reported here continues to examine this hypothesis. The next section very briefly explains the learning algorithm (and gives pointers to where more extensive documentation can be found). After that, the actual robot is described. Then we describe the simulation of the robot. The task _______________ actual robot.
node11:Academic paper with title and abstract:  ""The Complexity of Real-time Search."" : In this paper, we develop new LRTA*-based algorithms for a variety of tasks, and analyze their complexity. The LRTA* algorithm is a real-time search algorithm developed by Korf. It can be used to reach a stationary or moving goal state or to identify all shortest paths from a given start state to a stationary goal state, if the algorithm is reset to the start state when it reaches a goal state. Our algorithms have a search horizon of one and require no internal memory (but must be able to store some information in the states). For example, the bi-directional LRTS algorithm determines optimal universal plans (i.e. finds all optimal paths from all states to a set of stationary goal states), even if reset actions are not available. We show that all tasks studied in this paper can be solved by such LRTA*-based algorithms with only O(n 2 ) action executions for state spaces of size n.
node12:Academic paper with title and abstract:  ""Self-improving factory simulation using continuous-time average reward reinforcement learning"" in Proceedings of the Fourteenth International Machine Learning Conference., : Many factory optimization problems, from inventory control to scheduling and reliability, can be formulated as continuous-time Markov decision processes. A primary goal in such problems is to find a gain-optimal policy that minimizes the long-run average cost. This paper describes a new average-reward algorithm called SMART for finding gain-optimal policies in continuous time semi-Markov decision processes. The paper presents a detailed experimental study of SMART on a large unreliable production inventory problem. SMART outperforms two well-known reliability heuristics from industrial engineering. A key feature of this study is the integration of the reinforcement learning algorithm directly into two commercial discrete-event simulation packages, ARENA and CSIM, paving the way for this approach to be applied to many other factory optimization problems for which there already exist simulation models.
node13:Academic paper with title and abstract:  Baird (1995). Residual algorithms: Reinforcement learning with function approximation. : A number of reinforcement learning algorithms have been developed that are guaranteed to converge to the optimal solution when used with lookup tables. It is shown, however, that these algorithms can easily become unstable when implemented directly with a general function-approximation system, such as a sigmoidal multilayer perceptron, a radial-basis-function system, a memory-based learning system, or even a linear function-approximation system. A new class of algorithms, residual gradient algorithms, is proposed, which perform gradient descent on the mean squared Bellman residual, guaranteeing convergence. It is shown, however, that they may learn very slowly in some cases. A larger class of algorithms, residual algorithms, is proposed that has the guaranteed convergence of the residual gradient algorithms, yet can retain the fast learning speed of direct algorithms. In fact, both direct and residual gradient algorithms are shown to be special cases of residual algorithms, and it is shown that residual algorithms can combine the advantages of each approach. The direct, residual gradient, and residual forms of value iteration, Q-learning, and advantage learning are all presented. Theoretical analysis is given explaining the properties these algorithms have, and simulation results are given that demonstrate these properties.
node14:Academic paper with title and abstract:  Genetic-based machine learning and behavior based robotics: a new syntesis. : difficult. We face this problem using an architecture based on learning classifier systems and on the description of the learning technique used and of the organizational structure proposed, we present experiments that show how behaviour acquisition can be achieved. Our simulated robot learns to structural properties of animal behavioural organization, as proposed by ethologists. After a
node15:Academic paper with title and abstract:  Residual q-learning aplied to visual attention. : Foveal vision features imagers with graded acuity coupled with context sensitive sensor gaze control, analogous to that prevalent throughout vertebrate vision. Foveal vision operates more efficiently than uniform acuity vision because resolution is treated as a dynamically allocatable resource, but requires a more refined visual attention mechanism. We demonstrate that reinforcement learning (RL) significantly improves the performance of foveal visual attention, and of the overall vision system, for the task of model based target recognition. A simulated foveal vision system is shown to classify targets with fewer fixations by learning strategies for the acquisition of visual information relevant to the task, and learning how to generalize these strategies in ambiguous and unexpected scenario conditions.
node16:Academic paper with title and abstract:  Generalized Prioritized Sweeping. : Prioritized sweeping is a model-based reinforcement learning method that attempts to focus an agent's limited computational resources to achieve a good estimate of the value of environment states. To choose effectively where to spend a costly planning step, classic prioritized sweeping uses a simple heuristic to focus computation on the states that are likely to have the largest errors. In this paper, we introduce generalized prioritized sweeping, a principled method for generating such estimates in a representation-specific manner. This allows us to extend prioritized sweeping beyond an explicit, state-based representation to deal with compact representations that are necessary for dealing with large state spaces. We apply this method for generalized model approximators (such as Bayesian networks), and describe preliminary experiments that compare our approach with classical prioritized sweeping.
node17:Academic paper with title and abstract:  Auto-exploratory av-erage reward reinforcement learning. : We introduce a model-based average reward Reinforcement Learning method called H-learning and compare it with its discounted counterpart, Adaptive Real-Time Dynamic Programming, in a simulated robot scheduling task. We also introduce an extension to H-learning, which automatically explores the unexplored parts of the state space, while always choosing greedy actions with respect to the current value function. We show that this ""Auto-exploratory H-learning"" performs better than the original H-learning under previously studied exploration methods such as random, recency-based, or counter-based exploration.
node18:Academic paper with title and abstract:  Neuronlike adaptive elements that can solve difficult learning control problems. : Miller, G. (1956). The magical number seven, plus or minus two: Some limits on our capacity for processing information. The Psychological Review, 63(2):81-97. Schmidhuber, J. (1990b). Towards compositional learning with dynamic neural networks. Technical Report FKI-129-90, Technische Universitat Munchen, Institut fu Informatik. Servan-Schreiber, D., Cleermans, A., and McClelland, J. (1988). Encoding sequential structure in simple recurrent networks. Technical Report CMU-CS-88-183, Carnegie Mellon University, Computer Science Department.
node19:Academic paper with title and abstract:  Using genetic programming to evolve board evaluation functions. : In this paper, we employ the genetic programming paradigm to enable a computer to learn to play strategies for the ancient Egyptian boardgame Senet by evolving board evaluation functions. Formulating the problem in terms of board evaluation functions made it feasible to evaluate the fitness of game playing strategies by using tournament-style fitness evaluation. The game has elements of both strategy and chance. Our approach learns strategies which enable the computer to play consistently at a reasonably skillful level.
node20:Academic paper with title and abstract:  Strategy Learning with Multilayer Connectionist Represent ations. : Results are presented that demonstrate the learning and fine-tuning of search strategies using connectionist mechanisms. Previous studies of strategy learning within the symbolic, production-rule formalism have not addressed fine-tuning behavior. Here a two-layer connectionist system is presented that develops its search from a weak to a task-specific strategy and fine-tunes its performance. The system is applied to a simulated, real-time, balance-control task. We compare the performance of one-layer and two-layer networks, showing that the ability of the two-layer network to discover new features and thus enhance the original representation is critical to solving the balancing task.
node21:Academic paper with title and abstract:  On the Computational Economics of Reinforcement Learning. : Following terminology used in adaptive control, we distinguish between indirect learning methods, which learn explicit models of the dynamic structure of the system to be controlled, and direct learning methods, which do not. We compare an existing indirect method, which uses a conventional dynamic programming algorithm, with a closely related direct reinforcement learning method by applying both methods to an infinite horizon Markov decision problem with unknown state-transition probabilities. The simulations show that although the direct method requires much less space and dramatically less computation per control action, its learning ability in this task is superior to, or compares favorably with, that of the more complex indirect method. Although these results do not address how the methods' performances compare as problems become more difficult, they suggest that given a fixed amount of computational power available per control action, it may be better to use a direct reinforcement learning method augmented with indirect techniques than to devote all available resources to a computation-ally costly indirect method. Comprehensive answers to the questions raised by this study depend on many factors making up the eco nomic context of the computation.
node22:Academic paper with title and abstract:  Learning to predict by the methods of temporal differences. : This article introduces a class of incremental learning procedures specialized for prediction|that is, for using past experience with an incompletely known system to predict its future behavior. Whereas conventional prediction-learning methods assign credit by means of the difference between predicted and actual outcomes, the new methods assign credit by means of the difference between temporally successive predictions. Although such temporal-difference methods have been used in Samuel's checker player, Holland's bucket brigade, and the author's Adaptive Heuristic Critic, they have remained poorly understood. Here we prove their convergence and optimality for special cases and relate them to supervised-learning methods. For most real-world prediction problems, temporal-difference methods require less memory and less peak computation than conventional methods; and they produce more accurate predictions. We argue that most problems to which supervised learning is currently applied are really prediction problems of the sort to which temporal-difference methods can be applied to advantage.
node23:Academic paper with title and abstract:  Integrated Architectures for Learning, Planning and Reacting Based on Approximating Dynamic Programming, : This paper extends previous work with Dyna, a class of architectures for intelligent systems based on approximating dynamic programming methods. Dyna architectures integrate trial-and-error (reinforcement) learning and execution-time planning into a single process operating alternately on the world and on a learned model of the world. In this paper, I present and show results for two Dyna architectures. The Dyna-PI architecture is based on dynamic programming's policy iteration method and can be related to existing AI ideas such as evaluation functions and universal plans (reactive systems). Using a navigation task, results are shown for a simple Dyna-PI system that simultaneously learns by trial and error, learns a world model, and plans optimal routes using the evolving world model. The Dyna-Q architecture is based on Watkins's Q-learning, a new kind of reinforcement learning. Dyna-Q uses a less familiar set of data structures than does Dyna-PI, but is arguably simpler to implement and use. We show that Dyna-Q architectures are easy to adapt for use in changing environments.
node24:Academic paper with title and abstract:  ""Planning by Incremental Dynamic Programming."" : This paper presents the basic results and ideas of dynamic programming as they relate most directly to the concerns of planning in AI. These form the theoretical basis for the incremental planning methods used in the integrated architecture Dyna. These incremental planning methods are based on continually updating an evaluation function and the situation-action mapping of a reactive system. Actions are generated by the reactive system and thus involve minimal delay, while the incremental planning process guarantees that the actions and evaluation function will eventually be optimal|no matter how extensive a search is required. These methods are well suited to stochastic tasks and to tasks in which a complete and accurate model is not available. For tasks too large to implement the situation-action mapping as a table, supervised-learning methods must be used, and their capabilities remain a significant limitation of the approach.
node25:Academic paper with title and abstract:  Schultz (1994). ""An evolutionary approach to learning in robots,"" Machine Learning Workshop on Robot Learning, : Evolutionary learning methods have been found to be useful in several areas in the development of intelligent robots. In the approach described here, evolutionary algorithms are used to explore alternative robot behaviors within a simulation model as a way of reducing the overall knowledge engineering effort. This paper presents some initial results of applying the SAMUEL genetic learning system to a collision avoidance and navigation task for mobile robots.
node26:Academic paper with title and abstract:  Learning curves bounds for Markov decision processes with undiscounted rewards. : Markov decision processes (MDPs) with undis-counted rewards represent an important class of problems in decision and control. The goal of learning in these MDPs is to find a policy that yields the maximum expected return per unit time. In large state spaces, computing these averages directly is not feasible; instead, the agent must estimate them by stochastic exploration of the state space. In this case, longer exploration times enable more accurate estimates and more informed decision-making. The learning curve for an MDP measures how the agent's performance depends on the allowed exploration time, T . In this paper we analyze these learning curves for a simple control problem with undiscounted rewards. In particular, methods from statistical mechanics are used to calculate lower bounds on the agent's performance in the thermodynamic limit T ! 1, N ! 1, ff = T =N (finite), where T is the number of time steps allotted per policy evaluation and N is the size of the state space. In this limit, we provide a lower bound on the return of policies that appear optimal based on imperfect statistics.",cora_link,lp
"Classify the relationship between two essays denoted as node2 and node24 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Proposes bucket elimination for probabilistic inference, unifying algorithms like MPE, MAP, and MEU with links to dynamic programming, enabling structured complexity analysis.  
node1: Introduces global conditioning for belief networks, generalizing loop-cutset methods, enabling parallel processing, and unifying with Lauritzen-Spiegelhalter frameworks.  
node2: Proposes hierarchical dynamic Bayesian networks to model complex stochastic systems with modular structures, capturing varying interaction rates and intermittent processes.  
node3: Discusses nonparametric methods for selecting input variables in neural networks, optimizing feature relevance without parametric assumptions.  
node4: Presents a six-layer neural architecture for financial forecasting, using derivative predictions and adaptive input preprocessing to improve DAX index predictions.  
node5: Develops a logarithmic-time parallel Bayesian inference algorithm for Bayesian networks on CREW PRAM, efficient for polytrees and structured arbitrary networks.  
node6: Explores state reconstruction techniques to assess predictability in driven nonlinear acoustical systems under uncertainty.  
node7: Introduces ""clearning"" for noisy inputs, combining data cleaning and neural learning to boost forex prediction accuracy and robustness via sparse networks.  
node8: Same as node7; duplicates focus on ""clearning"" for forex prediction, emphasizing robust sparse networks and improved returns.  
node9: Proposes space-efficient hindsight inference in dynamic networks, reducing space to O(S log N) for long observation sequences in learning tasks.  
node10: Uses neural networks with weight-elimination to predict sunspots and exchange rates, outperforming statistical methods via noise resilience.  
node11: Applies gated experts to time series, capturing nonstationarity by segmenting regimes and adapting variances, tested on laser and electricity demand data.  
node12: Develops tractable approximations for dynamic belief states, proving error contraction over time, enabling fast inference in complex stochastic processes.  
node13: Defines context-specific independence in Bayesian networks via tree-structured CPTs, enhancing inference efficiency through structural decompositions.  
node14: Studies hidden Markov decision trees with variational approximations, applied to synthetic and Bach chorale data for time series modeling.  
node15: Introduces evidence reversal and survival sampling for stochastic simulation in dynamic probabilistic networks, improving accuracy over time.  
node16: Explores compositional modeling with dynamic probabilistic networks, focusing on modular system representation (abstract unavailable).  
node17: Derives local error bars for nonlinear regression using max-likelihood, quantifying model uncertainty in noisy and chaotic data.  
node18: Uses neural networks to predict full probability distributions for time series, outperforming point predictions on laser and multi-scale Markov processes.  
node19: Compares TD and supervised learning for multi-step forecasts, finding supervised methods superior for low-noise data with shared hidden layers.  
node20: Applies bootstrapping to evaluate neural network forecasts, highlighting resampling variability and probabilistic predictions for financial data.  
node21: Maximizes Sharpe Ratio via neural networks for trading strategies, achieving better risk-adjusted returns on DAX and synthetic financial data.  
node22: Extends HMMs to factorial models with distributed states, using variational approximations for efficient inference on Bach chorales.  
node23: Designs a Bayesian decision-theoretic autonomous vehicle using dynamic probabilistic networks to handle uncertainty in traffic scenarios.  
node24: Explores learning active classifiers that dynamically request attributes, analyzing tractability under PAC models with cost-sensitive decision-making.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node13>,<node1, node2>,<node1, node5>,<node2, node12>,<node2, node13>,<node2, node15>,<node2, node22>,<node3, node18>,<node4, node21>,<node6, node11>,<node7, node10>,<node7, node11>,<node7, node17>,<node7, node18>,<node7, node20>,<node8, node10>,<node8, node11>,<node8, node17>,<node8, node18>,<node8, node20>,<node9, node16>,<node9, node22>,<node9, node23>,<node10, node19>,<node11, node21>,<node12, node15>,<node12, node22>,<node12, node23>,<node14, node22>,<node15, node23>,<node16, node22>,<node17, node18>,<node17, node19>,<node17, node20>,<node17, node21>.

Consider: semantic and structural information.In your reasoning process provide the predicted connection bond value of the two target nodes between 0 and 1, set the threshold to 0.5.Based on your predicted connection bond value select strictly from: 'Yes, they have citation relationships' or 'No, they do not have citation relationships'.Respond only with the choice content and brief summary the reasoning process.

Provide an estimated connection bond value (ranging from 0 to 1). A higher value indicates a stronger likelihood of a relationship. Consider multiple factors, such as:
- Structural information: Evaluate the direct and indirect connections between the two target nodes through their neighbors.
- Semantic similarities: Analyze the relevance or similarity in meaning between the two target nodes.
- Comprehensive information: If there exist two nodes that are semantically similar to each other, and these two nodes are respectively connected to the two target nodes, this can indirectly indicate the strength of the connection between the target nodes.

If you can identify direct or indirect connections based on structural information, set the bond strength to 1 and specify the path(s) of connection in your reasoning. 
If no such connections can be identified, evaluate the bond strength based on the semantic similarity between the target node and its neighboring nodes semantics.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, provide comprehensive information inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of the two given answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning</comprehensive>
<rethink>Here ongoing re-reasoning with each of the two candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer
Brief_reasoning: Your_brief_reasoning
Bond_value: Your_predicted_bond_value","No, they do not have citation relationships","

node0: Proposes bucket elimination for probabilistic inference, unifying algorithms like MPE, MAP, and MEU with links to dynamic programming, enabling structured complexity analysis.  
node1: Introduces global conditioning for belief networks, generalizing loop-cutset methods, enabling parallel processing, and unifying with Lauritzen-Spiegelhalter frameworks.  
node2: Proposes hierarchical dynamic Bayesian networks to model complex stochastic systems with modular structures, capturing varying interaction rates and intermittent processes.  
node3: Discusses nonparametric methods for selecting input variables in neural networks, optimizing feature relevance without parametric assumptions.  
node4: Presents a six-layer neural architecture for financial forecasting, using derivative predictions and adaptive input preprocessing to improve DAX index predictions.  
node5: Develops a logarithmic-time parallel Bayesian inference algorithm for Bayesian networks on CREW PRAM, efficient for polytrees and structured arbitrary networks.  
node6: Explores state reconstruction techniques to assess predictability in driven nonlinear acoustical systems under uncertainty.  
node7: Introduces ""clearning"" for noisy inputs, combining data cleaning and neural learning to boost forex prediction accuracy and robustness via sparse networks.  
node8: Same as node7; duplicates focus on ""clearning"" for forex prediction, emphasizing robust sparse networks and improved returns.  
node9: Proposes space-efficient hindsight inference in dynamic networks, reducing space to O(S log N) for long observation sequences in learning tasks.  
node10: Uses neural networks with weight-elimination to predict sunspots and exchange rates, outperforming statistical methods via noise resilience.  
node11: Applies gated experts to time series, capturing nonstationarity by segmenting regimes and adapting variances, tested on laser and electricity demand data.  
node12: Develops tractable approximations for dynamic belief states, proving error contraction over time, enabling fast inference in complex stochastic processes.  
node13: Defines context-specific independence in Bayesian networks via tree-structured CPTs, enhancing inference efficiency through structural decompositions.  
node14: Studies hidden Markov decision trees with variational approximations, applied to synthetic and Bach chorale data for time series modeling.  
node15: Introduces evidence reversal and survival sampling for stochastic simulation in dynamic probabilistic networks, improving accuracy over time.  
node16: Explores compositional modeling with dynamic probabilistic networks, focusing on modular system representation (abstract unavailable).  
node17: Derives local error bars for nonlinear regression using max-likelihood, quantifying model uncertainty in noisy and chaotic data.  
node18: Uses neural networks to predict full probability distributions for time series, outperforming point predictions on laser and multi-scale Markov processes.  
node19: Compares TD and supervised learning for multi-step forecasts, finding supervised methods superior for low-noise data with shared hidden layers.  
node20: Applies bootstrapping to evaluate neural network forecasts, highlighting resampling variability and probabilistic predictions for financial data.  
node21: Maximizes Sharpe Ratio via neural networks for trading strategies, achieving better risk-adjusted returns on DAX and synthetic financial data.  
node22: Extends HMMs to factorial models with distributed states, using variational approximations for efficient inference on Bach chorales.  
node23: Designs a Bayesian decision-theoretic autonomous vehicle using dynamic probabilistic networks to handle uncertainty in traffic scenarios.  
node24: Explores learning active classifiers that dynamically request attributes, analyzing tractability under PAC models with cost-sensitive decision-making.","node0:Academic paper with title and abstract:  ""Bucket elimination: A unifying framework for probabilistic inference,"" : Probabilistic inference algorithms for finding the most probable explanation, the maximum aposteriori hypothesis, and the maximum expected utility and for updating belief are reformulated as an elimination-type algorithm called bucket elimination. This emphasizes the principle common to many of the algorithms appearing in that literature and clarifies their relationship to nonserial dynamic programming algorithms. We also present a general way of combining conditioning and elimination within this framework. Bounds on complexity are given for all the algorithms as a function of the problem's struc ture.
node1:Academic paper with title and abstract:  Global conditioning for probabilistic inference in belief networks. : In this paper we propose a new approach to probabilistic inference on belief networks, global conditioning, which is a simple generalization of Pearl's (1986b) method of loop-cutset conditioning. We show that global conditioning, as well as loop-cutset conditioning, can be thought of as a special case of the method of Lauritzen and Spiegelhalter (1988) as refined by Jensen et al (1990a; 1990b). Nonetheless, this approach provides new opportunities for parallel processing and, in the case of sequential processing, a tradeoff of time for memory. We also show how a hybrid method (Suermondt and others 1990) combining loop-cutset conditioning with Jensen's method can be viewed within our framework. By exploring the relationships between these methods, we develop a unifying framework in which the advantages of each approach can be combined successfully.
node2:Academic paper with title and abstract: Structured Representation of Complex Stochastic Systems: This paper considers the problem of representing complex systems that evolve stochastically over time. Dynamic Bayesian networks provide a compact representation for stochastic processes. Unfortunately, they are often unwieldy since they cannot explicitly model the complex organizational structure of many real life systems: the fact that processes are typically composed of several interacting subprocesses, each of which can, in turn, be further decomposed. We propose a hierarchically structured representation language which extends both dynamic Bayesian networks and the object-oriented Bayesian network framework of [9], and show that our language allows us to describe such systems in a natural and modular way. Our language supports a natural representation for certain system characteristics that are hard to capture using more traditional frameworks. For example, it allows us to represent systems where some processes evolve at a different rate than others, or systems where the processes interact only intermittently. We provide a simple inference mechanism for our representation via translation to Bayesian networks, and suggest ways in which the inference algorithm can exploit the additional structure encoded in our representation.
node3:Academic paper with title and abstract: NONPARAMETRIC SELECTION OF INPUT VARIABLES FOR CONNECTIONIST LEARNING: 
node4:Academic paper with title and abstract: TO IMPROVE FORECASTING: Working Paper IS-97-007, Leonard N. Stern School of Business, New York University. In: Journal of Computational Intelligence in Finance 6 (1998) 14-23. (Special Issue on ""Improving Generalization of Nonlinear Financial Forecasting Models"".) http://www.stern.nyu.edu/~aweigend/Research/Papers/InteractionLayer Abstract. Predictive models for financial data are often based on a large number of plausible inputs that are potentially nonlinearly combined to yield the conditional expectation of a target, such as a daily return of an asset. This paper introduces a new architecture for this task: On the output side, we predict dynamical variables such as first derivatives and curvatures on different time spans. These are subsequently combined in an interaction output layer to form several estimates of the variable of interest. Those estimates are then averaged to yield the final prediction. Independently from this idea, on the input side, we propose a new internal preprocessing layer connected with a diagonal matrix of positive weights to a layer of squashing functions. These weights adapt for each input individually and learn to squash outliers in the input. We apply these two ideas to the real world example of the daily predictions of the German stock index DAX (Deutscher Aktien Index), and compare the results to a network with a single output. The new six layer architecture is more stable in training due to two facts: (1) More information is flowing back from the outputs to the input in the backward pass; (2) The constraint of predicting first and second derivatives focuses the learning on the relevant variables for the dynamics. The architectures are compared from both the training perspective (squared errors, robust errors), and from the trading perspective (annualized returns, percent correct, Sharpe ratio).
node5:Academic paper with title and abstract: Logarithmic Time Parallel Bayesian Inference: I present a parallel algorithm for exact probabilistic inference in Bayesian networks. For polytree networks with n variables, the worst-case time complexity is O(log n) on a CREW PRAM (concurrent-read, exclusive-write parallel random-access machine) with n processors, for any constant number of evidence variables. For arbitrary networks, the time complexity is O(r 3w log n) for n processors, or O(w log n) for r 3w n processors, where r is the maximum range of any variable, and w is the induced width (the maximum clique size), after moralizing and trian gulating the network.
node6:Academic paper with title and abstract: State Reconstruction for Determining Predictability in Driven Nonlinear Acoustical Systems: 
node7:Academic paper with title and abstract: : Most connectionist modeling assumes noise-free inputs. This assumption is often violated. This paper introduces the idea of clearning, of simultaneously cleaning the data and learning the underlying structure. The cleaning step can be viewed as top-down processing (where the model modifies the data), and the learning step can be viewed as bottom-up processing (where the data modifies the model). Clearning is used in conjunction with standard pruning. This paper discusses the statistical foundation of clearning, gives an interpretation in terms of a mechanical model, describes how to obtain both point predictions and conditional densities for the output, and shows how the resulting model can be used to discover properties of the data otherwise not accessible (such as the signal-to-noise ratio of the inputs). This paper uses clearning to predict foreign exchange rates, a noisy time series problem with well-known benchmark performances. On the out-of-sample 1993-1994 test period, clearning obtains an annualized return on investment above 30%, significantly better than an otherwise identical network. The final ultra-sparse network with 36 remaining non-zero input-to-hidden weights (of the 1035 initial weights between 69 inputs and 15 hidden units) is very robust against overfitting. This small network also lends itself to interpretation.
node8:Academic paper with title and abstract: : Most connectionist modeling assumes noise-free inputs. This assumption is often violated. This paper introduces the idea of clearning, of simultaneously cleaning the data and learning the underlying structure. The cleaning step can be viewed as top-down processing (where the model modifies the data), and the learning step can be viewed as bottom-up processing (where the data modifies the model). Clearning is used in conjunction with standard pruning. This paper discusses the statistical foundation of clearning, gives an interpretation in terms of a mechanical model, describes how to obtain both point predictions and conditional densities for the output, and shows how the resulting model can be used to discover properties of the data otherwise not accessible (such as the signal-to-noise ratio of the inputs). This paper uses clearning to predict foreign exchange rates, a noisy time series problem with well-known benchmark performances. On the out-of-sample 1993-1994 test period, clearning obtains an annualized return on investment above 30%, significantly better than an otherwise identical network. The final ultra-sparse network with 36 remaining non-zero input-to-hidden weights (of the 1035 initial weights between 69 inputs and 15 hidden units) is very robust against overfitting. This small network also lends itself to interpretation.
node9:Academic paper with title and abstract:  Space-efficient inference in dynamic probabilistic networks. : Dynamic probabilistic networks (DPNs) are a useful tool for modeling complex stochastic processes. The simplest inference task in DPNs is monitoring | that is, computing a posterior distribution for the state variables at each time step given all observations up to that time. Recursive, constant-space algorithms are well-known for monitoring in DPNs and other models. This paper is concerned with hindsight | that is, computing a posterior distribution given both past and future observations. Hindsight is an essential subtask of learning DPN models from data. Existing algorithms for hindsight in DPNs use O(SN ) space and time, where N is the total length of the observation sequence and S is the state space size for each time step. They are therefore impractical for hindsight in complex models with long observation sequences. This paper presents an O(S log N ) space, O(SN log N ) time hindsight algorithm. We demonstrates the effectiveness of the algorithm in two real-world DPN learning problems. We also discuss the possibility of an O(S)-space, O(SN )-time algorithm.
node10:Academic paper with title and abstract:  Predicting sunspots and exchange rates with connectionist networks. : We investigate the effectiveness of connectionist networks for predicting the future continuation of temporal sequences. The problem of overfitting, particularly serious for short records of noisy data, is addressed by the method of weight-elimination: a term penalizing network complexity is added to the usual cost function in back-propagation. The ultimate goal is prediction accuracy. We analyze two time series. On the benchmark sunspot series, the networks outperform traditional statistical approaches. We show that the network performance does not deteriorate when there are more input units than needed. Weight-elimination also manages to extract some part of the dynamics of the notoriously noisy currency exchange rates and makes the network solution interpretable.
node11:Academic paper with title and abstract:  Nonlinear gated experts for time series: Discovering regimes and avoiding overfitting. : In: International Journal of Neural Systems 6 (1995) p. 373 - 399. URL of this paper: ftp://ftp.cs.colorado.edu/pub/Time-Series/MyPapers/experts.ps.Z, or http://www.cs.colorado.edu/~andreas/Time-Series/MyPapers/experts.ps.Z University of Colorado Computer Science Technical Report CU-CS-798-95. In the analysis and prediction of real-world systems, two of the key problems are nonstationarity(often in the form of switching between regimes), and overfitting (particularly serious for noisy processes). This article addresses these problems using gated experts, consisting of a (nonlinear) gating network, and several (also nonlinear) competing experts. Each expert learns to predict the conditional mean, and each expert adapts its width to match the noise level in its regime. The gating network learns to predict the probability of each expert, given the input. This article focuses on the case where the gating network bases its decision on information from the inputs. This can be contrasted to hidden Markov models where the decision is based on the previous state(s) (i.e., on the output of the gating network at the previous time step), as well as to averaging over several predictors. In contrast, gated experts soft-partition the input space. This article discusses the underlying statistical assumptions, derives the weight update rules, and compares the performance of gated experts to standard methods on three time series: (1) a computer-generated series, obtained by randomly switching between two nonlinear processes, (2) a time series from the Santa Fe Time Series Competition (the light intensity of a laser in chaotic state), and (3) the daily electricity demand of France, a real-world multivariate problem with structure on several time scales. The main results are (1) the gating network correctly discovers the different regimes of the process, (2) the widths associated with each expert are important for the segmentation task (and they can be used to characterize the sub-processes), and (3) there is less overfitting compared to single networks (homogeneous multi-layer perceptrons), since the experts learn to match their variances to the (local) noise levels. This can be viewed as matching the local complexity of the model to the local complexity of the data.
node12:Academic paper with title and abstract:  Tractable inference for complex stochastic processes. : The monitoring and control of any dynamic system depends crucially on the ability to reason about its current status and its future trajectory. In the case of a stochastic system, these tasks typically involve the use of a belief state|a probability distribution over the state of the process at a given point in time. Unfortunately, the state spaces of complex processes are very large, making an explicit representation of a belief state intractable. Even in dynamic Bayesian networks (DBNs), where the process itself can be represented compactly, the representation of the belief state is intractable. We investigate the idea of utilizing a compact approximation to the true belief state, and analyze the conditions under which the errors due to the approximations taken over the lifetime of the process do not accumulate to make our answers completely irrelevant. We show that the error in a belief state contracts exponentially as the process evolves. Thus, even with multiple approximations, the error in our process remains bounded indefinitely. We show how the additional structure of a DBN can be used to design our approximation scheme, improving its performance significantly. We demonstrate the applicability of our ideas in the context of a monitoring task, showing that orders of magnitude faster inference can be achieved with only a small degradation in accuracy.
node13:Academic paper with title and abstract:  Context-specific independence in Bayesian networks. : Bayesian networks provide a language for qualitatively representing the conditional independence properties of a distribution. This allows a natural and compact representation of the distribution, eases knowledge acquisition, and supports effective inference algorithms. It is well-known, however, that there are certain independencies that we cannot capture qualitatively within the Bayesian network structure: independencies that hold only in certain contexts, i.e., given a specific assignment of values to certain variables. In this paper, we propose a formal notion of context-specific independence (CSI), based on regularities in the conditional probability tables (CPTs) at a node. We present a technique, analogous to (and based on) d-separation, for determining when such independence holds in a given network. We then focus on a particular qualitative representation schemetree-structured CPTs for capturing CSI. We suggest ways in which this representation can be used to support effective inference algorithms. In particular, we present a structural decomposition of the resulting network which can improve the performance of clustering algorithms, and an alternative algorithm based on cutset conditioning.
node14:Academic paper with title and abstract:  Hidden Markov decision trees. : We study a time series model that can be viewed as a decision tree with Markov temporal structure. The model is intractable for exact calculations, thus we utilize variational approximations. We consider three different distributions for the approximation: one in which the Markov calculations are performed exactly and the layers of the decision tree are decoupled, one in which the decision tree calculations are performed exactly and the time steps of the Markov chain are decoupled, and one in which a Viterbi-like assumption is made to pick out a single most likely state sequence. We present simulation results for artificial data and the Bach chorales.
node15:Academic paper with title and abstract:  Stochastic simulation algorithms for dynamic probabilistic networks. : Stochastic simulation algorithms such as likelihood weighting often give fast, accurate approximations to posterior probabilities in probabilistic networks, and are the methods of choice for very large networks. Unfortunately, the special characteristics of dynamic probabilistic networks (DPNs), which are used to represent stochastic temporal processes, mean that standard simulation algorithms perform very poorly. In essence, the simulation trials diverge further and further from reality as the process is observed over time. In this paper, we present simulation algorithms that use the evidence observed at each time step to push the set of trials back towards reality. The first algorithm, ""evidence reversal"" (ER) restructures each time slice of the DPN so that the evidence nodes for the slice become ancestors of the state variables. The second algorithm, called ""survival of the fittest"" sampling (SOF), ""repopulates"" the set of trials at each time step using a stochastic reproduction rate weighted by the likelihood of the evidence according to each trial. We compare the performance of each algorithm with likelihood weighting on the original network, and also investigate the benefits of combining the ER and SOF methods. The ER/SOF combination appears to maintain bounded error independent of the number of time steps in the simulation.
node16:Academic paper with title and abstract:  Compositional modeling with dpns. : 
node17:Academic paper with title and abstract:  Local error bars for nonlinear regression and time series prediction. : We present a new method for obtaining local error bars for nonlinear regression, i.e., estimates of the confidence in predicted values that depend on the input. We approach this problem by applying a maximum-likelihood framework to an assumed distribution of errors. We demonstrate our method first on computer-generated data with locally varying, normally distributed target noise. We then apply it to laser data from the Santa Fe Time Series Competition where the underlying system noise is known quantization error and the error bars give local estimates of model misspecification. In both cases, the method also provides a weighted-regression effect that improves generalization performance.
node18:Academic paper with title and abstract:  Predicting probability distributions: A connectionist approach. : Most traditional prediction techniques deliver the mean of the probability distribution (a single point). For multimodal processes, instead of predicting the mean of the probability distribution, it is important to predict the full distribution. This article presents a new connectionist method to predict the conditional probability distribution in response to an input. The main idea is to transform the problem from a regression to a classification problem. The conditional probability distribution network can perform both direct predictions and iterated predictions, a task which is specific for time series problems. We compare our method to fuzzy logic and discuss important differences, and also demonstrate the architecture on two time series. The first is the benchmark laser series used in the Santa Fe competition, a deterministic chaotic system. The second is a time series from a Markov process which exhibits structure on two time scales. The network produces multimodal predictions for this series. We compare the predictions of the network with a nearest-neighbor predictor and find that the conditional probability network is more than twice as likely a model.
node19:Academic paper with title and abstract:  Kazlas and A.S. Weigend. (1995) Direct Multi-Step Time Series Prediction Using TD(). : This paper explores the application of Temporal Difference (TD) learning (Sutton, 1988) to forecasting the behavior of dynamical systems with real-valued outputs (as opposed to game-like situations). The performance of TD learning in comparison to standard supervised learning depends on the amount of noise present in the data. In this paper, we use a deterministic chaotic time series from a low-noise laser. For the task of direct five-step ahead predictions, our experiments show that standard supervised learning is better than TD learning. The TD algorithm can be viewed as linking adjacent predictions. A similar effect can be obtained by sharing the internal representation in the network. We thus compare two architectures for both paradigms: the first architecture (separate hidden units) consists of individual networks for each of the five direct multi-step prediction tasks, the second (shared hidden units) has a single (larger) hidden layer that finds a representation from which all five predictions for the next five steps are generated. For this data set we do not find any significant difference between the two architectures. fl http://www.cs.colorado.edu/~andreas/Home.html. This paper is available as ftp://ftp.cs.colorado.edu/pub/Time-Series/MyPapers/kazlas.weigend nips7.ps.Z
node20:Academic paper with title and abstract:  Evaluating neural network predictors by bootstrapping. : We present a new method, inspired by the bootstrap, whose goal it is to determine the quality and reliability of a neural network predictor. Our method leads to more robust forecasting along with a large amount of statistical information on forecast performance that we exploit. We exhibit the method in the context of multi-variate time series prediction on financial data from the New York Stock Exchange. It turns out that the variation due to different resamplings (i.e., splits between training, cross-validation, and test sets) is significantly larger than the variation due to different network conditions (such as architecture and initial weights). Furthermore, this method allows us to forecast a probability distribution, as opposed to the traditional case of just a single value at each time step. We demonstrate this on a strictly held-out test set that includes the 1987 stock market crash. We also compare the performance of the class of neural networks to identically bootstrapped linear models.
node21:Academic paper with title and abstract:  Nonlinear trading models through Sharpe Ratio maximization. : Working Paper IS-97-005, Leonard N. Stern School of Business, New York University. In: Decision Technologies for Financial Engineering (Proceedings of the Fourth International Conference on Neural Networks in the Capital Markets, NNCM-96), pp. 3-22. Edited by A.S.Weigend, Y.S.Abu-Mostafa, and A.-P.N.Refenes. Singapore: World Scientific, 1997. http://www.stern.nyu.edu/~aweigend/Research/Papers/SharpeRatio While many trading strategies are based on price prediction, traders in financial markets are typically interested in risk-adjusted performance such as the Sharpe Ratio, rather than price predictions themselves. This paper introduces an approach which generates a nonlinear strategy that explicitly maximizes the Sharpe Ratio. It is expressed as a neural network model whose output is the position size between a risky and a risk-free asset. The iterative parameter update rules are derived and compared to alternative approaches. The resulting trading strategy is evaluated and analyzed on both computer-generated data and real world data (DAX, the daily German equity index). Trading based on Sharpe Ratio maximization compares favorably to both profit optimization and probability matching (through cross-entropy optimization). The results show that the goal of optimizing out-of-sample risk-adjusted profit can be achieved with this nonlinear approach.
node22:Academic paper with title and abstract:  Factorial hidden Markov models. : Hidden Markov models (HMMs) have proven to be one of the most widely used tools for learning probabilistic models of time series data. In an HMM, information about the past is conveyed through a single discrete variable|the hidden state. We discuss a generalization of HMMs in which this state is factored into multiple state variables and is therefore represented in a distributed manner. We describe an exact algorithm for inferring the posterior probabilities of the hidden state variables given the observations, and relate it to the forward-backward algorithm for HMMs and to algorithms for more general graphical models. Due to the combinatorial nature of the hidden state representation, this exact algorithm is intractable. As in other intractable systems, approximate inference can be carried out using Gibbs sampling or variational methods. Within the variational framework, we present a structured approximation in which the the state variables are decoupled, yielding a tractable algorithm for learning the parameters of the model. Empirical comparisons suggest that these approximations are efficient and provide accurate alternatives to the exact methods. Finally, we use the structured approximation to model Bach's chorales and show that factorial HMMs can capture statistical structure in this data set which an unconstrained HMM cannot.
node23:Academic paper with title and abstract:  The BATmobile: Towards a Bayesian automated taxi. : The problem of driving an autonomous vehicle in normal traffic engages many areas of AI research and has substantial economic significance. We describe a new approach to this problem based on a decision-theoretic architecture using dynamic probabilistic networks. The architecture provides a sound solution to the problems of sensor noise, sensor failure, and uncertainty about the behavior of other vehicles and about the effects of one's own actions. We report on several advances in the theory and practice of inference and decision making in dynamic, partially observable domains. Our approach has been implemented in a simulation system, and the autonomous vehicle successfully negotiates a variety of difficult situations. Multiple submissions: This paper has not already been accepted by and is not currently under review for a journal or another conference. Nor will it be submitted for such during IJCAI's review period.
node24:Academic paper with title and abstract:  Learning active classifiers. : Many classification algorithms are ""passive"", in that they assign a class-label to each instance based only on the description given, even if that description is incomplete. In contrast, an active classifier can | at some cost | obtain the values of missing attributes, before deciding upon a class label. The expected utility of using an active classifier depends on both the cost required to obtain the additional attribute values and the penalty incurred if it outputs the wrong classification. This paper considers the problem of learning near-optimal active classifiers, using a variant of the probably-approximately-correct (PAC) model. After defining the framework | which is perhaps the main contribution of this paper | we describe a situation where this task can be achieved efficiently, but then show that the task is often intractable.",cora_link,lp
"Classify the essay represented by node5 using its subgraph data (text attributes and connections) as follows.

node0: Incremental decision tree induction with numeric/symbolic variables using 'slewing' for numeric handling and non-incremental metric-based method.  
node1: Improves TD learning via LSTD, eliminating stepsize parameters, generalizing to any λ, and interpreting LSTD as model-based RL.  
node2: Fringe Exploration uses short-term memory stats for efficient exploration in partially observable domains, validated in mazes and driving.  
node3: Neural network architecture decomposes reactive behaviors for race car control, testing coordination and learning convergence.  
node4: Lazy induction triggered by CBR induces context-specific rules to enhance CBR indexing and similarity assessment.  
node5: Multi-criteria RL with ordered priorities, deriving asymptotically optimal algorithms validated via experiments.  
node6: Averaged reward RL tunes fuzzy control rules for smoother pole balancing via simplified method.  
node7: Neurocontrol via RL: model-free dynamic system tuning, applied to satellite attitude control, linking RL to optimal control.  
node8: Real-Time Dynamic Programming integrates heuristic search and RL for adaptive control, with theoretical and application insights.  
node9: Linear-programming-based ML for cancer diagnosis and prognosis.  
node10: Q-learning with restarted hidden units accelerates inverted pendulum solutions in neural networks.  
node11: Reinforcement learning shapes robot behaviors via classifier systems, testing architectures and training strategies for autonomous agents.  
node12: Advice-taking RL agents integrate external instructions into neural networks, boosting performance via refined utility functions.  
node13: Reinforcement learning trainer’s role in three-stage agent development, demonstrated on an autonomous robot.  
node14: Unified convergence analysis for value-function-based RL, covering Q-learning, model-based methods, and risk-sensitive learning.  
node15: Web agents using advice-taking neural networks improve search tasks like home-page finding via user feedback and heuristics.  
node16: Policy iteration using relative advantage functions avoids absolute utility for smooth problems, enforcing consistency conditions.  
node17: Temporal difference methods enable accurate prediction in dynamic systems, outperforming conventional techniques.  
node18: Dyna architectures integrate RL, planning, and reacting using dynamic programming, tested in navigation and adaptive environments.  
node19: Online learning with random representations balances efficiency and accuracy, outperforming backpropagation in high-dimension tasks.  
node20: Identifies overestimation issues in RL with function approximation, causing failures validated via experiments.  
node21: Bounded suboptimality of greedy policies linked to Bellman residuals in imperfect value functions.  
node22: Neuro-dynamic programming combines neural networks and dynamic programming for optimization and control.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node0, node9>,<node0, node17>,<node0, node19>,<node1, node17>,<node1, node18>,<node1, node22>,<node2, node8>,<node2, node18>,<node3, node11>,<node3, node17>,<node5, node8>,<node5, node14>,<node5, node17>,<node6, node17>,<node7, node17>,<node8, node10>,<node8, node11>,<node8, node14>,<node8, node16>,<node8, node20>,<node10, node17>,<node11, node13>,<node12, node15>,<node14, node22>,<node15, node17>,<node17, node18>,<node17, node20>,<node17, node21>,<node17, node22>,<node18, node21>,<node20, node21>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Reinforcement Learning,"

node0: Incremental decision tree induction with numeric/symbolic variables using 'slewing' for numeric handling and non-incremental metric-based method.  
node1: Improves TD learning via LSTD, eliminating stepsize parameters, generalizing to any λ, and interpreting LSTD as model-based RL.  
node2: Fringe Exploration uses short-term memory stats for efficient exploration in partially observable domains, validated in mazes and driving.  
node3: Neural network architecture decomposes reactive behaviors for race car control, testing coordination and learning convergence.  
node4: Lazy induction triggered by CBR induces context-specific rules to enhance CBR indexing and similarity assessment.  
node5: Multi-criteria RL with ordered priorities, deriving asymptotically optimal algorithms validated via experiments.  
node6: Averaged reward RL tunes fuzzy control rules for smoother pole balancing via simplified method.  
node7: Neurocontrol via RL: model-free dynamic system tuning, applied to satellite attitude control, linking RL to optimal control.  
node8: Real-Time Dynamic Programming integrates heuristic search and RL for adaptive control, with theoretical and application insights.  
node9: Linear-programming-based ML for cancer diagnosis and prognosis.  
node10: Q-learning with restarted hidden units accelerates inverted pendulum solutions in neural networks.  
node11: Reinforcement learning shapes robot behaviors via classifier systems, testing architectures and training strategies for autonomous agents.  
node12: Advice-taking RL agents integrate external instructions into neural networks, boosting performance via refined utility functions.  
node13: Reinforcement learning trainer’s role in three-stage agent development, demonstrated on an autonomous robot.  
node14: Unified convergence analysis for value-function-based RL, covering Q-learning, model-based methods, and risk-sensitive learning.  
node15: Web agents using advice-taking neural networks improve search tasks like home-page finding via user feedback and heuristics.  
node16: Policy iteration using relative advantage functions avoids absolute utility for smooth problems, enforcing consistency conditions.  
node17: Temporal difference methods enable accurate prediction in dynamic systems, outperforming conventional techniques.  
node18: Dyna architectures integrate RL, planning, and reacting using dynamic programming, tested in navigation and adaptive environments.  
node19: Online learning with random representations balances efficiency and accuracy, outperforming backpropagation in high-dimension tasks.  
node20: Identifies overestimation issues in RL with function approximation, causing failures validated via experiments.  
node21: Bounded suboptimality of greedy policies linked to Bellman residuals in imperfect value functions.  
node22: Neuro-dynamic programming combines neural networks and dynamic programming for optimization and control.","node0:Academic paper with title and abstract:  Incremental induction of decision trees. : Technical Report 94-07 February 7, 1994 (updated April 25, 1994) This paper will appear in Proceedings of the Eleventh International Conference on Machine Learning. Abstract This paper presents an algorithm for incremental induction of decision trees that is able to handle both numeric and symbolic variables. In order to handle numeric variables, a new tree revision operator called `slewing' is introduced. Finally, a non-incremental method is given for finding a decision tree based on a direct metric of a candidate tree.
node1:Academic paper with title and abstract: Least-Squares Temporal Difference Learning: Submitted to NIPS-98 TD() is a popular family of algorithms for approximate policy evaluation in large MDPs. TD() works by incrementally updating the value function after each observed transition. It has two major drawbacks: it makes inefficient use of data, and it requires the user to manually tune a stepsize schedule for good performance. For the case of linear value function approximations and = 0, the Least-Squares TD (LSTD) algorithm of Bradtke and Barto [5] eliminates all stepsize parameters and improves data efficiency. This paper extends Bradtke and Barto's work in three significant ways. First, it presents a simpler derivation of the LSTD algorithm. Second, it generalizes from = 0 to arbitrary values of ; at the extreme of = 1, the resulting algorithm is shown to be a practical formulation of supervised linear regression. Third, it presents a novel, intuitive interpretation of LSTD as a model-based reinforcement learning technique.
node2:Academic paper with title and abstract: Category: Control, Navigation and Planning. Key words: Reinforcement learning, Exploration, Hidden state. Prefer oral presentation.: This paper presents Fringe Exploration, a technique for efficient exploration in partially observable domains. The key idea, (applicable to many exploration techniques), is to keep statistics in the space of possible short-term memories, instead of in the agent's current state space. Experimental results in a partially observable maze and in a difficult driving task with visual routines show dramatic performance improvements.
node3:Academic paper with title and abstract: Coordinating Reactive Behaviors  keywords: reactive systems, planning and learning: Combinating reactivity with planning has been proposed as a means of compensating for potentially slow response times of planners while still making progress toward long term goals. The demands of rapid response and the complexity of many environments make it difficult to decompose, tune and coordinate reactive behaviors while ensuring consistency. Neural networks can address the tuning problem, but are less useful for decomposition and coordination. We hypothesize that interacting reactions can be decomposed into separate behaviors resident in separate networks and that the interaction can be coordinated through the tuning mechanism and a higher level controller. To explore these issues, we have implemented a neural network architecture as the reactive component of a two layer control system for a simulated race car. By varying the architecture, we test whether decomposing reactivity into separate behaviors leads to superior overall performance, coordination and learning convergence.
node4:Academic paper with title and abstract: Lazy Induction Triggered by CBR: In recent years, case-based reasoning has been demonstrated to be highly useful for problem solving in complex domains. Also, mixed paradigm approaches emerged for combining CBR and induction techniques aiming at verifying the knowledge and/or building an efficient case memory. However, in complex domains induction over the whole problem space is often not possible or too time consuming. In this paper, an approach is presented which (owing to a close interaction with the CBR part) attempts to induce rules only for a particular context, i.e. for a problem just being solved by a CBR-oriented system. These rules may then be used for indexing purposes or similarity assessment in order to support the CBR process in the future.
node5:Academic paper with title and abstract: Multi-criteria reinforcement learning: We consider multi-criteria sequential decision making problems, where the criteria are ordered according to their importance. Structural properties of these problems are touched and reinforcement learning algorithms, which learn asymptotically optimal decisions, are derived. Computer experiments confirm the theoretical results and provide further insight in the learning processes.
node6:Academic paper with title and abstract: AVERAGED REWARD REINFORCEMENT LEARNING APPLIED TO FUZZY RULE TUNING: Fuzzy rules for control can be effectively tuned via reinforcement learning. Reinforcement learning is a weak learning method, which only requires information on the success or failure of the control application. The tuning process allows people to generate fuzzy rules which are unable to accurately perform control and have them tuned to be rules which provide smooth control. This paper explores a new simplified method of using reinforcement learning for the tuning of fuzzy control rules. It is shown that the learned fuzzy rules provide smoother control in the pole balancing domain than another approach.
node7:Academic paper with title and abstract: NEUROCONTROL BY REINFORCEMENT LEARNING: Reinforcement learning (RL) is a model-free tuning and adaptation method for control of dynamic systems. Contrary to supervised learning, based usually on gradient descent techniques, RL does not require any model or sensitivity function of the process. Hence, RL can be applied to systems that are poorly understood, uncertain, nonlinear or for other reasons untractable with conventional methods. In reinforcement learning, the overall controller performance is evaluated by a scalar measure, called reinforcement. Depending on the type of the control task, reinforcement may represent an evaluation of the most recent control action or, more often, of an entire sequence of past control moves. In the latter case, the RL system learns how to predict the outcome of each individual control action. This prediction is then used to adjust the parameters of the controller. The mathematical background of RL is closely related to optimal control and dynamic programming. This paper gives a comprehensive overview of the RL methods and presents an application to the attitude control of a satellite. Some well known applications from the literature are reviewed as well.
node8:Academic paper with title and abstract:  Learning to Act using Real- Time Dynamic Programming. : fl The authors thank Rich Yee, Vijay Gullapalli, Brian Pinette, and Jonathan Bachrach for helping to clarify the relationships between heuristic search and control. We thank Rich Sutton, Chris Watkins, Paul Werbos, and Ron Williams for sharing their fundamental insights into this subject through numerous discussions, and we further thank Rich Sutton for first making us aware of Korf's research and for his very thoughtful comments on the manuscript. We are very grateful to Dimitri Bertsekas and Steven Sullivan for independently pointing out an error in an earlier version of this article. Finally, we thank Harry Klopf, whose insight and persistence encouraged our interest in this class of learning problems. This research was supported by grants to A.G. Barto from the National Science Foundation (ECS-8912623 and ECS-9214866) and the Air Force Office of Scientific Research, Bolling AFB (AFOSR-89-0526).
node9:Academic paper with title and abstract:  Street. Cancer diagnosis and prognosis via linear-programming-based machine learning. : 
node10:Academic paper with title and abstract:  Q-learning with hidden-unit restarting. : Platt's resource-allocation network (RAN) (Platt, 1991a, 1991b) is modified for a reinforcement-learning paradigm and to ""restart"" existing hidden units rather than adding new units. After restarting, units continue to learn via back-propagation. The resulting restart algorithm is tested in a Q-learning network that learns to solve an inverted pendulum problem. Solutions are found faster on average with the restart algorithm than without it.
node11:Academic paper with title and abstract:  Robot shaping: Developing autonomous agents though learning. : Learning plays a vital role in the development of situated agents. In this paper, we explore the use of reinforcement learning to ""shape"" a robot to perform a predefined target behavior. We connect both simulated and real robots to A LECSYS, a parallel implementation of a learning classifier system with an extended genetic algorithm. After classifying different kinds of Animat-like behaviors, we explore the effects on learning of different types of agent's architecture (monolithic, flat and hierarchical) and of training strategies. In particular, hierarchical architecture requires the agent to learn how to coordinate basic learned responses. We show that the best results are achieved when both the agent's architecture and the training strategy match the structure of the behavior pattern to be learned. We report the results of a number of experiments carried out both in simulated and in real environments, and show that the results of simulations carry smoothly to real robots. While most of our experiments deal with simple reactive behavior, in one of them we demonstrate the use of a simple and general memory mechanism. As a whole, our experimental activity demonstrates that classifier systems with genetic algorithms can be practically employed to develop autonomous agents.
node12:Academic paper with title and abstract:  Creating advice-taking reinforcement learners. : Learning from reinforcements is a promising approach for creating intelligent agents. However, reinforcement learning usually requires a large number of training episodes. We present and evaluate a design that addresses this shortcoming by allowing a connectionist Q-learner to accept advice given, at any time and in a natural manner, by an external observer. In our approach, the advice-giver watches the learner and occasionally makes suggestions, expressed as instructions in a simple imperative programming language. Based on techniques from knowledge-based neural networks, we insert these programs directly into the agent's utility function. Subsequent reinforcement learning further integrates and refines the advice. We present empirical evidence that investigates several aspects of our approach and show that, given good advice, a learner can achieve statistically significant gains in expected reward. A second experiment shows that advice improves the expected reward regardless of the stage of training at which it is given, while another study demonstrates that subsequent advice can result in further gains in reward. Finally, we present experimental results that indicate our method is more powerful than a naive technique for making use of advice.
node13:Academic paper with title and abstract:  Colombetti (1994b). The role of the trainer in reinforcement learning. : In this paper we propose a threestage incremental approach to the development of autonomous agents. We discuss some issues about the characteristics which differentiate reinforcement programs (RPs), and define the trainer as a particular kind of RP. We present a set of results obtained running experiments with a trainer which provides guidance to the AutonoMouse, our mousesized autonomous robot.
node14:Academic paper with title and abstract:  Szepesvari and M.L. Littman. A unified analysis of value-function-based reinforcement-learning algorithms. : Reinforcement learning is the problem of generating optimal behavior in a sequential decision-making environment given the opportunity of interacting with it. Many algorithms for solving reinforcement-learning problems work by computing improved estimates of the optimal value function. We extend prior analyses of reinforcement-learning algorithms and present a powerful new theorem that can provide a unified analysis of value-function-based reinforcement-learning algorithms. The usefulness of the theorem lies in how it allows the asynchronous convergence of a complex reinforcement-learning algorithm to be proven by verifying that a simpler synchronous algorithm converges. We illustrate the application of the theorem by analyzing the convergence of Q-learning, model-based reinforcement learning, Q-learning with multi-state updates, Q-learning for Markov games, and risk-sensitive reinforcement learning.
node15:Academic paper with title and abstract:  Intelligent agents for Web-based tasks: An advice-taking approach. : We present and evaluate an implemented system with which to rapidly and easily build intelligent software agents for Web-based tasks. Our design is centered around two basic functions: ScoreThisLink and ScoreThisPage. If given highly accurate such functions, standard heuristic search would lead to efficient retrieval of useful information. Our approach allows users to tailor our system's behavior by providing approximate advice about the above functions. This advice is mapped into neural network implementations of the two functions. Subsequent reinforcements from the Web (e.g., dead links) and any ratings of retrieved pages that the user wishes to provide are, respectively, used to refine the link- and page-scoring functions. Hence, our architecture provides an appealing middle ground between nonadaptive agent programming languages and systems that solely learn user preferences from the user's ratings of pages. We describe our internal representation of Web pages, the major predicates in our advice language, how advice is mapped into neural networks, and the mechanisms for refining advice based on subsequent feedback. We also present a case study where we provide some simple advice and specialize our general-purpose system into a ""home-page finder"". An empirical study demonstrates that our approach leads to a more effective home-page finder than that of a leading commercial Web search site.
node16:Academic paper with title and abstract:  SP (1996). Improving policies without measuring merits. : Performing policy iteration in dynamic programming should only require knowledge of relative rather than absolute measures of the utility of actions what Baird (1993) calls the advantages of actions at states. Nevertheless, existing methods in dynamic programming (including Baird's) compute some form of absolute utility function. For smooth problems, advantages satisfy two differential consistency conditions (including the requirement that they be free of curl), and we show that enforcing these can lead to appropriate policy improvement solely in terms of advantages.
node17:Academic paper with title and abstract:  Learning to predict by the methods of temporal differences. : This article introduces a class of incremental learning procedures specialized for prediction|that is, for using past experience with an incompletely known system to predict its future behavior. Whereas conventional prediction-learning methods assign credit by means of the difference between predicted and actual outcomes, the new methods assign credit by means of the difference between temporally successive predictions. Although such temporal-difference methods have been used in Samuel's checker player, Holland's bucket brigade, and the author's Adaptive Heuristic Critic, they have remained poorly understood. Here we prove their convergence and optimality for special cases and relate them to supervised-learning methods. For most real-world prediction problems, temporal-difference methods require less memory and less peak computation than conventional methods; and they produce more accurate predictions. We argue that most problems to which supervised learning is currently applied are really prediction problems of the sort to which temporal-difference methods can be applied to advantage.
node18:Academic paper with title and abstract:  Integrated Architectures for Learning, Planning and Reacting Based on Approximating Dynamic Programming, : This paper extends previous work with Dyna, a class of architectures for intelligent systems based on approximating dynamic programming methods. Dyna architectures integrate trial-and-error (reinforcement) learning and execution-time planning into a single process operating alternately on the world and on a learned model of the world. In this paper, I present and show results for two Dyna architectures. The Dyna-PI architecture is based on dynamic programming's policy iteration method and can be related to existing AI ideas such as evaluation functions and universal plans (reactive systems). Using a navigation task, results are shown for a simple Dyna-PI system that simultaneously learns by trial and error, learns a world model, and plans optimal routes using the evolving world model. The Dyna-Q architecture is based on Watkins's Q-learning, a new kind of reinforcement learning. Dyna-Q uses a less familiar set of data structures than does Dyna-PI, but is arguably simpler to implement and use. We show that Dyna-Q architectures are easy to adapt for use in changing environments.
node19:Academic paper with title and abstract:  R.S., & Whitehead, S.D. (1993). Online learning with random representations. : We consider the requirements of online learning|learning which must be done incrementally and in realtime, with the results of learning available soon after each new example is acquired. Despite the abundance of methods for learning from examples, there are few that can be used effectively for online learning, e.g., as components of reinforcement learning systems. Most of these few, including radial basis functions, CMACs, Ko-honen's self-organizing maps, and those developed in this paper, share the same structure. All expand the original input representation into a higher dimensional representation in an unsupervised way, and then map that representation to the final answer using a relatively simple supervised learner, such as a perceptron or LMS rule. Such structures learn very rapidly and reliably, but have been thought either to scale poorly or to require extensive domain knowledge. To the contrary, some researchers (Rosenblatt, 1962; Gallant & Smith, 1987; Kanerva, 1988; Prager & Fallside, 1988) have argued that the expanded representation can be chosen largely at random with good results. The main contribution of this paper is to develop and test this hypothesis. We show that simple random-representation methods can perform as well as nearest-neighbor methods (while being more suited to online learning), and significantly better than backpropagation. We find that the size of the random representation does increase with the dimensionality of the problem, but not unreasonably so, and that the required size can be reduced substantially using unsupervised-learning techniques. Our results suggest that randomness has a useful role to play in online supervised learning and constructive induction.
node20:Academic paper with title and abstract:  Issues in using function approximation for reinforcement learning. : Reinforcement learning techniques address the problem of learning to select actions in unknown, dynamic environments. It is widely acknowledged that to be of use in complex domains, reinforcement learning techniques must be combined with generalizing function approximation methods such as artificial neural networks. Little, however, is understood about the theoretical properties of such combinations, and many researchers have encountered failures in practice. In this paper we identify a prime source of such failuresnamely, a systematic overestimation of utility values. Using Watkins' Q-Learning [18] as an example, we give a theoretical account of the phenomenon, deriving conditions under which one may expected it to cause learning to fail. Employing some of the most popular function approximators, we present experimental results which support the theoretical findings.
node21:Academic paper with title and abstract:  Tight Performance Bounds on Greedy Poli cies Based on Imperfect Value Functions. : Northeastern University College of Computer Science Technical Report NU-CCS-93-14 Abstract Consider a given value function on states of a Markov decision problem, as might result from applying a reinforcement learning algorithm. Unless this value function equals the corresponding optimal value function, at some states there will be a discrepancy, which is natural to call the Bellman residual, between what the value function specifies at that state and what is obtained by a one-step lookahead along the seemingly best action at that state using the given value function to evaluate all succeeding states. This paper derives a tight bound on how far from optimal the discounted return for a greedy policy based on the given value function will be as a function of the maximum norm magnitude of this Bellman residual. A corresponding result is also obtained for value functions defined on state-action pairs, as are used in Q-learning. One significant application of these results is to problems where a function approximator is used to learn a value function, with training of the approximator based on trying to minimize the Bellman residual across states or state-action pairs. When
node22:Academic paper with title and abstract:  Neuro-dynamic Programming. : ",cora_node,nc
"Classify the essay represented by node3 using its subgraph data (text attributes and connections) as follows.

node0: Examines invention goals' role in expert innovation using Bell's telephone as a case study, proposing model ALEC.  
node1: Presents computational approach using recursive schemes for analogical problem-solving via learning by doing.  
node2: Explores method-specific data-to-knowledge compilation integrating legacy databases with design systems via HIPED architecture.  
node3: Investigates generic models' role in scientific conceptual change using theories of constructive and adaptive modeling with ToRQUE.  
node4: Proposes story-based advice-taking using cached analyses in planner Brainstormer for matching new situations.  
node5: Introduces Functional Representation (FR) to capture causal design rationale for tasks like diagnosis and verification.  
node6: Explores generalizing design experiences into physical principles using SBF models and function-driven abstraction.  
node7: Presents Structure-Mapping Engine (SME) for analogical processing, efficient with polynomial complexity, simulating structure-mapping theory.  
node8: Proposes MAC/FAC model for similarity-based retrieval combining fast non-structural filtering with structural matching (SME).  
node9: Presents model-based approach using SBF models for assigning blame in design failures, indexed via KRITIK2 system.  
node10: Describes model-based learning to derive generic mechanisms from design experiences, illustrated via feedback mechanism learning.  
node11: Focuses on representing physical and design knowledge for innovative engineering design (abstract unavailable).  
node12: Explores structural analogy evaluation via SME, emphasizing specificity conjecture and normalization techniques.  
node13: Modifies SME for greedy, pragmatic analogical mapping to improve computational efficiency and goal-relevance.  
node14: Examines use of generic teleological mechanisms (GTMs) in adapting past designs for new functional needs via Kritik2.  
node15: Studies machine learning techniques using the game of Checkers (abstract unavailable).  
node16: Uses explicit knowledge goals to guide inference and learning in resource-constrained systems, illustrated via news analysis and diagnosis.  
node17: Retrospective on Kritik, an early case-based design system using SBF models for design adaptation and verification.

the connection relationship among the nodes mentioned:
 <node0, node10>,<node0, node16>,<node1, node7>,<node2, node9>,<node2, node17>,<node3, node7>,<node3, node10>,<node3, node14>,<node4, node7>,<node5, node10>,<node5, node17>,<node6, node10>,<node6, node14>,<node7, node8>,<node7, node11>,<node7, node12>,<node7, node13>,<node8, node12>,<node8, node13>,<node9, node14>,<node9, node15>,<node9, node17>,<node10, node14>,<node12, node13>,<node14, node17>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Case-Based,"

node0: Examines invention goals' role in expert innovation using Bell's telephone as a case study, proposing model ALEC.  
node1: Presents computational approach using recursive schemes for analogical problem-solving via learning by doing.  
node2: Explores method-specific data-to-knowledge compilation integrating legacy databases with design systems via HIPED architecture.  
node3: Investigates generic models' role in scientific conceptual change using theories of constructive and adaptive modeling with ToRQUE.  
node4: Proposes story-based advice-taking using cached analyses in planner Brainstormer for matching new situations.  
node5: Introduces Functional Representation (FR) to capture causal design rationale for tasks like diagnosis and verification.  
node6: Explores generalizing design experiences into physical principles using SBF models and function-driven abstraction.  
node7: Presents Structure-Mapping Engine (SME) for analogical processing, efficient with polynomial complexity, simulating structure-mapping theory.  
node8: Proposes MAC/FAC model for similarity-based retrieval combining fast non-structural filtering with structural matching (SME).  
node9: Presents model-based approach using SBF models for assigning blame in design failures, indexed via KRITIK2 system.  
node10: Describes model-based learning to derive generic mechanisms from design experiences, illustrated via feedback mechanism learning.  
node11: Focuses on representing physical and design knowledge for innovative engineering design (abstract unavailable).  
node12: Explores structural analogy evaluation via SME, emphasizing specificity conjecture and normalization techniques.  
node13: Modifies SME for greedy, pragmatic analogical mapping to improve computational efficiency and goal-relevance.  
node14: Examines use of generic teleological mechanisms (GTMs) in adapting past designs for new functional needs via Kritik2.  
node15: Studies machine learning techniques using the game of Checkers (abstract unavailable).  
node16: Uses explicit knowledge goals to guide inference and learning in resource-constrained systems, illustrated via news analysis and diagnosis.  
node17: Retrospective on Kritik, an early case-based design system using SBF models for design adaptation and verification.","node0:Academic paper with title and abstract: an Opportunistic Enterprise: Tech Report GIT-COGSCI-97/04 Abstract This paper identifies goal handling processes that begin to account for the kind of processes involved in invention. We identify new kinds of goals with special properties and mechanisms for processing such goals, as well as means of integrating opportunism, deliberation, and social interaction into goal/plan processes. We focus on invention goals, which address significant enterprises associated with an inventor. Invention goals represent seed goals of an expert, around which the whole knowledge of an expert gets reorganized and grows more or less opportunistically. Invention goals reflect the idiosyncrasy of thematic goals among experts. They constantly increase the sensitivity of individuals for particular events that might contribute to their satisfaction. Our exploration is based on a well-documented example: the invention of the telephone by Alexander Graham Bell. We propose mechanisms to explain: (1) how Bell's early thematic goals gave rise to the new goals to invent the multiple telegraph and the telephone, and (2) how the new goals interacted opportunistically. Finally, we describe our computational model, ALEC, that accounts for the role of goals in invention.
node1:Academic paper with title and abstract: Analogical Problem Solving by Adaptation of Schemes: We present a computational approach to the acquisition of problem schemes by learning by doing and to their application in analogical problem solving. Our work has its background in automatic program construction and relies on the concept of recursive program schemes. In contrast to the usual approach to cognitive modelling where computational models are designed to fit specific data we propose a framework to describe certain empirically established characteristics of human problem solving and learning in a uniform and formally sound way.
node2:Academic paper with title and abstract: METHOD-SPECIFIC KNOWLEDGE COMPILATION: TOWARDS PRACTICAL DESIGN SUPPORT SYSTEMS: Modern knowledge systems for design typically employ multiple problem-solving methods which in turn use different kinds of knowledge. The construction of a heterogeneous knowledge system that can support practical design thus raises two fundamental questions: how to accumulate huge volumes of design information, and how to support heterogeneous design processing? Fortunately, partial answers to both questions exist separately. Legacy databases already contain huge amounts of general-purpose design information. In addition, modern knowledge systems typically characterize the kinds of knowledge needed by specific problem-solving methods quite precisely. This leads us to hypothesize method-specific data-to-knowledge compilation as a potential mechanism for integrating heterogeneous knowledge systems and legacy databases for design. In this paper, first we outline a general computational architecture called HIPED for this integration. Then, we focus on the specific issue of how to convert data accessed from a legacy database into a form appropriate to the problem-solving method used in a heterogeneous knowledge system. We describe an experiment in which a legacy knowledge system called Interactive Kritik is integrated with an ORACLE database using IDI as the communication tool. The limited experiment indicates the computational feasibility of method-specific data-to-knowledge compilation, but also raises additional research issues.
node3:Academic paper with title and abstract: The Role of Generic Models in Conceptual Change: 1 This research was funded in part by NSF Grant No. IRI-92-10925 and in part by ONR Grant No. N00014-92-J-1234. We thank John Clement for the use of his protocol transcript, James Greeno for his contribution to developing our constructive modeling interpretation of it, and Ryan Tweney for his helpful comments Todd W. Griffith, Nancy J. Nersessian, and Ashok Goel Abstract We hypothesize generic models to be central in conceptual change in science. This hypothesis has its origins in two theoretical sources. The first source, constructive modeling, derives from a philosophical theory that synthesizes analyses of historical conceptual changes in science with investigations of reasoning and representation in cognitive psychology. The theory of constructive modeling posits generic mental models as productive in conceptual change. The second source, adaptive modeling, derives from a computational theory of creative design. Both theories posit situation independent domain abstractions, i.e. generic models. Using a constructive modeling interpretation of the reasoning exhibited in protocols collected by John Clement (1989) of a problem solving session involving conceptual change, we employ the resources of the theory of adaptive modeling to develop a new computational model, ToRQUE. Here we describe a piece of our analysis of the protocol to illustrate how our synthesis of the two theories is being used to develop a system for articulating and testing ToRQUE. The results of our research show how generic modeling plays a central role in conceptual change. They also demonstrate how such an interdisciplinary synthesis can provide significant insights into scientific reasoning.
node4:Academic paper with title and abstract: Role of Stories 1: PO Box 600 Wellington New Zealand Tel: +64 4 471 5328 Fax: +64 4 495 5232 Internet: Tech.Reports@comp.vuw.ac.nz Technical Report CS-TR-92/4 October 1992 Abstract People often give advice by telling stories. Stories both recommend a course of action and exemplify general conditions in which that recommendation is appropriate. A computational model of advice taking using stories must address two related problems: determining the story's recommendations and appropriateness conditions, and showing that these obtain in the new situation. In this paper, we present an efficient solution to the second problem based on caching the results of the first. Our proposal has been implemented in brainstormer, a planner that takes abstract advice.
node5:Academic paper with title and abstract:  Functional representation as design rationale. : Design rationale is a record of design activity: of alternatives available, choices made, the reasons for them, and explanations of how a proposed design is intended to work. We describe a representation called the Functional Representation (FR) that has been used to represent how a device's functions arise causally from the functions of its components and their interconnections. We propose that FR can provide the basis for capturing the causal aspects of the design rationale. We briefly discuss the use of FR for a number of tasks in which we would expect the design rationale to be useful: generation of diagnostic knowledge, design verification and redesign.
node6:Academic paper with title and abstract:  Discovery of Physical Principles from Design Experiences. : One method for making analogies is to access and instantiate abstract domain principles, and one method for acquiring knowledge of abstract principles is to discover them from experience. We view generalization over experiences in the absence of any prior knowledge of the target principle as the task of hypothesis formation, a subtask of discovery. Also, we view the use of the hypothesized principles for analogical design as the task of hypothesis testing, another subtask of discovery. In this paper, we focus on discovery of physical principles by generalization over design experiences in the domain of physical devices. Some important issues in generalization from experiences are what to generalize from an experience, how far to generalize, and what methods to use. We represent a reasoner's comprehension of specific designs in the form of structure-behavior-function (SBF) models. An SBF model provides a functional and causal explanation of the working of a device. We represent domain principles as device-independent behavior-function (BF) models. We show that (i) the function of a device determines what to generalize from its SBF model, (ii) the SBF model itself suggests how far to generalize, and (iii) the typology of functions indicates what method to use.
node7:Academic paper with title and abstract:  The Structure-Mapping Engine: Algorithms and Examples. : This paper describes the Structure-Mapping Engine (SME), a program for studying analogical processing. SME has been built to explore Gentner's Structure-mapping theory of analogy, and provides a ""tool kit"" for constructing matching algorithms consistent with this theory. Its flexibility enhances cognitive simulation studies by simplifying experimentation. Furthermore, SME is very efficient, making it a useful component in machine learning systems as well. We review the Structure-mapping theory and describe the design of the engine. We analyze the complexity of the algorithm, and demonstrate that most of the steps are polynomial, typically bounded by O (N 2 ). Next we demonstrate some examples of its operation taken from our cognitive simulation studies and work in machine learning. Finally, we compare SME to other analogy programs and discuss several areas for future work. This paper appeared in Artificial Intelligence, 41, 1989, pp 1-63. For more information, please contact forbus@ils.nwu.edu
node8:Academic paper with title and abstract:  A model of similarity-based retrieval. : We present a model of similarity-based retrieval which attempts to capture three psychological phenomena: (1) people are extremely good at judging similarity and analogy when given items to compare. (2) Superficial remindings are much more frequent than structural remindings. (3) People sometimes experience and use purely structural analogical re-mindings. Our model, called MAC/FAC (for ""many are called but few are chosen"") consists of two stages. The first stage (MAC) uses a computationally cheap, non-structural matcher to filter candidates from a pool of memory items. That is, we redundantly encode structured representations as content vectors, whose dot product yields an estimate of how well the corresponding structural representations will match. The second stage (FAC) uses SME to compute a true structural match between the probe and output from the first stage. MAC/FAC has been fully implemented, and we show that it is capable of modeling patterns of access found in psychological data.
node9:Academic paper with title and abstract:  A Model-Based Approach to Blame Assignment in Design. : We analyze the blame-assignment task in the context of experience-based design and redesign of physical devices. We identify three types of blame-assignment tasks that differ in the types of information they take as input: the design does not achieve a desired behavior of the device, the design results in an undesirable behavior, a specific structural element in the design misbehaves. We then describe a model-based approach for solving the blame-assignment task. This approach uses structure-behavior-function models that capture a designer's comprehension of the way a device works in terms of causal explanations of how its structure results in its behaviors. We also address the issue of indexing the models in memory. We discuss how the three types of blame-assignment tasks require different types of indices for accessing the models. Finally we describe the KRITIK2 system that implements and evaluates this model-based approach to blame assignment.
node10:Academic paper with title and abstract:  From Design Experiences to Generic Mechanisms: Model-Based Learning in Analogical Design. : Analogical reasoning plays an important role in design. In particular, cross-domain analogies appear to be important in innovative and creative design. However, making cross-domain analogies is hard and often requires abstractions common to the source and target domains. Recent work in case-based design suggests that generic mechanisms are one type of abstractions useful in adapting past designs. However, one important yet unexplored issue is where these generic mechanisms come from. We hypothesize that they are acquired incrementally from design experiences in familiar domains by generalization over patterns of regularity. Three important issues in generalization from experiences are what to generalize from an experience, how far to generalize, and what methods to use. In this paper, we describe how structure-behavior-function models of designs in a familiar domain provide the content, and together with the problem-solving context in which learning occurs, also provide the constraints for learning generic mechanisms from design experiences. In particular, we describe the model-based learning method with a scenario of learning of feedback mechanism.
node11:Academic paper with title and abstract:  Representing physical and design knowledge in innovative engineering design. : 
node12:Academic paper with title and abstract:  Structural evaluation of analogies: : Judgments of similarity and soundness are important aspects of human analogical processing. This paper explores how these judgments can be modeled using SME, a simulation of Gentner's structure-mapping theory. We focus on structural evaluation, explicating several principles which psychologically plausible algorithms should follow. We introduce the Specificity Conjecture, which claims that naturalistic representations include a preponderance of appearance and low-order information. We demonstrate via computational experiments that this conjecture affects how structural evaluation should be performed, including the choice of normalization technique and how the systematicity preference is implemented.
node13:Academic paper with title and abstract:  Making SME greedy and pragmatic. : The Structure-Mapping Engine (SME) has successfully modeled several aspects of human consistent interpretations of an analogy. While useful for theoretical explorations, this aspect of the algorithm is both psychologically implausible and computationally inefficient. (2) SME contains no mechanism for focusing on interpretations relevant to an analogizer's goals. This paper describes modifications to SME which overcome these flaws. We describe a greedy merge algorithm which efficiently computes an approximate ""best"" interpretation, and can generate alternate interpretations when necessary. We describe pragmatic marking, a technique which focuses the mapping to produce relevant, yet novel, inferences. We illustrate these techniques via example and evaluate their performance using empirical data and theoretical analysis. analogical processing. However, it has two significant drawbacks: (1) SME constructs all structurally
node14:Academic paper with title and abstract:  (1992) Generic Teleological Mechanisms and their Use in Case Adaptation, : In experience-based (or case-based) reasoning, new problems are solved by retrieving and adapting the solutions to similar problems encountered in the past. An important issue in experience-based reasoning is to identify different types of knowledge and reasoning useful for different classes of case-adaptation tasks. In this paper, we examine a class of non-routine case-adaptation tasks that involve patterned insertions of new elements in old solutions. We describe a model-based method for solving this task in the context of the design of physical devices. The method uses knowledge of generic teleological mechanisms (GTMs) such as cascading. Old designs are adapted to meet new functional specifications by accessing and instantiating the appropriate GTM. The Kritik2 system evaluates the computational feasibility and sufficiency of this method for design adaptation.
node15:Academic paper with title and abstract:  Some studies in machine learning using the game of Checkers. : 
node16:Academic paper with title and abstract:  The Use of Explicit Goals for Knowledge to Guide Inference and Learning. : Combinatorial explosion of inferences has always been a central problem in artificial intelligence. Although the inferences that can be drawn from a reasoner's knowledge and from available inputs is very large (potentially infinite), the inferential resources available to any reasoning system are limited. With limited inferential capacity and very many potential inferences, reasoners must somehow control the process of inference. Not all inferences are equally useful to a given reasoning system. Any reasoning system that has goals (or any form of a utility function) and acts based on its beliefs indirectly assigns utility to its beliefs. Given limits on the process of inference, and variation in the utility of inferences, it is clear that a reasoner ought to draw the inferences that will be most valuable to it. This paper presents an approach to this problem that makes the utility of a (potential) belief an explicit part of the inference process. The method is to generate explicit desires for knowledge. The question of focus of attention is thereby transformed into two related problems: How can explicit desires for knowledge be used to control inference and facilitate resource-constrained goal pursuit in general? and, Where do these desires for knowledge come from? We present a theory of knowledge goals, or desires for knowledge, and their use in the processes of understanding and learning. The theory is illustrated using two case studies, a natural language understanding program that learns by reading novel or unusual newspaper stories, and a differential diagnosis program that improves its accuracy with experience.
node17:Academic paper with title and abstract:  Kritik: An early case-based design system. In Maher, M.L. & Pu, : In the late 1980s, we developed one of the early case-based design systems called Kritik. Kritik autonomously generated preliminary (conceptual, qualitative) designs for physical devices by retrieving and adapting past designs stored in its case memory. Each case in the system had an associated structure-behavior-function (SBF) device model that explained how the structure of the device accomplished its functions. These casespecific device models guided the process of modifying a past design to meet the functional specification of a new design problem. The device models also enabled verification of the design modifications. Kritik2 is a new and more complete implementation of Kritik. In this paper, we take a retrospective view on Kritik. In early papers, we had described Kritik as integrating case-based and model-based reasoning. In this integration, Kritik also grounds the computational process of case-based reasoning in the SBF content theory of device comprehension. The SBF models not only provide methods for many specific tasks in case-based design such as design adaptation and verification, but they also provide the vocabulary for the whole process of case-based design, from retrieval of old cases to storage of new ones. This grounding, we believe, is essential for building well-constrained theories of case-based design.",cora_node,nc
"Classify the essay represented by node1 using its subgraph data (text attributes and connections) as follows.

node0: Incremental algorithm for regular grammar inference using positive examples, membership queries, and lattice-based candidate elimination.  
node1: Sequential PAC learning reduces training examples by halting early when converged, improving efficiency with distribution-free guarantees.  
node2: Improved bounds for PAC learning hyper-rectangles and pseudorandom sets in high-dimensional spaces.  
node3: Evidence-driven state merging algorithm wins DFA learning competition by prioritizing merges with strong evidence.  
node4: Inductive Logic Programming merges logic and statistics, unifying inverse resolution and RLGG for predicate invention.  
node5: Passive learning of finite automata via random walks, minimizing prediction mistakes without experimental control.  
node6: Efficient learning of probabilistic concepts (p-concepts) with uncertain outputs under distribution-free models.  
node7: DOLCE uses gradient descent and clustering in recurrent nets to induce discrete finite-state machine states.  
node8: Cryptographic proofs show learning Boolean formulas/automata would break RSA, factoring, or quadratic residue detection.  
node9: Pruning recurrent neural networks improves generalization and rule extraction accuracy for regular grammars.  
node10: Focuses on designing and analyzing efficient machine learning algorithms, though abstract details are missing.  
node11: Tight lower bound on PAC learning examples using VC-dimension, accuracy, and confidence parameters.  
node12: RNN learns Self-Routing Interconnection Networks (SRIN) as augmented sequential machines via multiple initial states.  
node13: PAC-learn one-dimensional geometric patterns using Hausdorff metric for landmark recognition; polynomial algorithm.  
node14: Teaching dimension measures minimum instances needed to uniquely identify concepts in on-line learning.  
node15: Apple tasting model learns with feedback only on accepted instances, balancing false accept/reject errors.  
node16: Characterizes learnability for functions valued 0 to n, extending PAC learning frameworks (abstract incomplete).  
node17: SAGE uses adaptive sampling for tree-based problems, applied to grammar induction and DFA learning.  
node18: Marvin learns concepts via prior knowledge, forming hypotheses and asking questions to generalize examples.  
node19: Links prediction, scale-sensitive dimensions, and uniform convergence; provides learning bounds and packing numbers.

the connection relationship among the nodes mentioned:
 <node0, node10>,<node1, node8>,<node1, node10>,<node1, node11>,<node1, node15>,<node2, node11>,<node3, node5>,<node3, node8>,<node3, node17>,<node4, node11>,<node4, node18>,<node5, node8>,<node6, node8>,<node6, node19>,<node7, node12>,<node8, node11>,<node8, node12>,<node8, node14>,<node9, node12>,<node11, node13>,<node11, node16>,<node11, node19>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Theory,"

node0: Incremental algorithm for regular grammar inference using positive examples, membership queries, and lattice-based candidate elimination.  
node1: Sequential PAC learning reduces training examples by halting early when converged, improving efficiency with distribution-free guarantees.  
node2: Improved bounds for PAC learning hyper-rectangles and pseudorandom sets in high-dimensional spaces.  
node3: Evidence-driven state merging algorithm wins DFA learning competition by prioritizing merges with strong evidence.  
node4: Inductive Logic Programming merges logic and statistics, unifying inverse resolution and RLGG for predicate invention.  
node5: Passive learning of finite automata via random walks, minimizing prediction mistakes without experimental control.  
node6: Efficient learning of probabilistic concepts (p-concepts) with uncertain outputs under distribution-free models.  
node7: DOLCE uses gradient descent and clustering in recurrent nets to induce discrete finite-state machine states.  
node8: Cryptographic proofs show learning Boolean formulas/automata would break RSA, factoring, or quadratic residue detection.  
node9: Pruning recurrent neural networks improves generalization and rule extraction accuracy for regular grammars.  
node10: Focuses on designing and analyzing efficient machine learning algorithms, though abstract details are missing.  
node11: Tight lower bound on PAC learning examples using VC-dimension, accuracy, and confidence parameters.  
node12: RNN learns Self-Routing Interconnection Networks (SRIN) as augmented sequential machines via multiple initial states.  
node13: PAC-learn one-dimensional geometric patterns using Hausdorff metric for landmark recognition; polynomial algorithm.  
node14: Teaching dimension measures minimum instances needed to uniquely identify concepts in on-line learning.  
node15: Apple tasting model learns with feedback only on accepted instances, balancing false accept/reject errors.  
node16: Characterizes learnability for functions valued 0 to n, extending PAC learning frameworks (abstract incomplete).  
node17: SAGE uses adaptive sampling for tree-based problems, applied to grammar induction and DFA learning.  
node18: Marvin learns concepts via prior knowledge, forming hypotheses and asking questions to generalize examples.  
node19: Links prediction, scale-sensitive dimensions, and uniform convergence; provides learning bounds and packing numbers.","node0:Academic paper with title and abstract: An Incremental Interactive Algorithm for Regular Grammar Inference: We present interactive algorithms for learning regular grammars from positive examples and membership queries. A structurally complete set of strings from a language L(G) corresponding to an unknown regular grammar G implicitly specifies a lattice (or version space) which represents a space of candidate grammars containing the unknown grammar G. This lattice can be searched efficiently using membership queries to identify the unknown grammar G using an implicit representation of the version space in the form of two sets S and G that correspond (respectively) to the set of most specific and most general grammars consistent with the set of positive examples provided and the queries answered by the teacher at any given time. We present a provably correct incremental version of the algorithm in which a structurally complete set of positive samples is not necessarily available to the learner at the beginning of learning. The learner constructs a lattice of grammars based on the strings provided at the start and performs candidate elimination by posing safe membership queries. When additional examples become available, the learner incrementally updates the lattice and continues with candidate elimination. Eventually, when the set of positive samples provided by the teacher encompasses a structurally complete set for the unknown grammar, the algorithm terminates by identifying the unknown grammar G.
node1:Academic paper with title and abstract: Sequential PAC Learning: We consider the use of ""on-line"" stopping rules to reduce the number of training examples needed to pac-learn. Rather than collect a large training sample that can be proved sufficient to eliminate all bad hypotheses a priori, the idea is instead to observe training examples one-at-a-time and decide ""on-line"" whether to stop and return a hypothesis, or continue training. The primary benefit of this approach is that we can detect when a hypothesizer has actually ""converged,"" and halt training before the standard fixed-sample-size bounds. This paper presents a series of such sequential learning procedures for: distribution-free pac-learning, ""mistake-bounded to pac"" conversion, and distribution-specific pac-learning, respectively. We analyze the worst case expected training sample size of these procedures, and show that this is often smaller than existing fixed sample size bounds | while providing the exact same worst case pac-guarantees. We also provide lower bounds that show these reductions can at best involve constant (and possibly log) factors. However, empirical studies show that these sequential learning procedures actually use many times fewer training examples in prac tice.
node2:Academic paper with title and abstract: Approximating Hyper-Rectangles: Learning and Pseudo-random Sets: The PAC learning of rectangles has been studied because they have been found experimentally to yield excellent hypotheses for several applied learning problems. Also, pseudorandom sets for rectangles have been actively studied recently because (i) they are a subprob-lem common to the derandomization of depth-2 (DNF) circuits and derandomizing Randomized Logspace, and (ii) they approximate the distribution of n independent multivalued random variables. We present improved upper bounds for a class of such problems of approximating high-dimensional rectangles that arise in PAC learning and pseudorandomness.
node3:Academic paper with title and abstract: New Evidence Driven State Merging Algorithm: Results of the Abbadingo One DFA Learning Abstract. This paper first describes the structure and results of the Abbadingo One DFA Learning Competition. The competition was designed to encourage work on algorithms that scale wellboth to larger DFAs and to sparser training data. We then describe and discuss the winning algorithm of Rodney Price, which orders state merges according to the amount of evidence in their favor. A second winning algorithm, of Hugues Juille, will be described in a separate paper.
node4:Academic paper with title and abstract: Inductive Logic Programming: A new research area, Inductive Logic Programming, is presently emerging. While inheriting various positive characteristics of the parent subjects of Logic Programming and Machine Learning, it is hoped that the new area will overcome many of the limitations of its forebears. The background to present developments within this area is discussed and various goals and aspirations for the increasing body of researchers are identified. Inductive Logic Programming needs to be based on sound principles from both Logic and Statistics. On the side of statistical justification of hypotheses we discuss the possible relationship between Algorithmic Complexity theory and Probably-Approximately-Correct (PAC) Learning. In terms of logic we provide a unifying framework for Muggleton and Buntine's Inverse Resolution (IR) and Plotkin's Relative Least General Generali-sation (RLGG) by rederiving RLGG in terms of IR. This leads to a discussion of the feasibility of extending the RLGG framework to allow for the invention of new predicates, previously discussed only within the context of IR.
node5:Academic paper with title and abstract:  Efficient learning of typical finite automata from random walks. : This paper describes new and efficient algorithms for learning deterministic finite automata. Our approach is primarily distinguished by two features: (1) the adoption of an average-case setting to model the ""typical"" labeling of a finite automaton, while retaining a worst-case model for the underlying graph of the automaton, along with (2) a learning model in which the learner is not provided with the means to experiment with the machine, but rather must learn solely by observing the automaton's output behavior on a random input sequence. The main contribution of this paper is in presenting the first efficient algorithms for learning non-trivial classes of automata in an entirely passive learning model. We adopt an on-line learning model in which the learner is asked to predict the output of the next state, given the next symbol of the random input sequence; the goal of the learner is to make as few prediction mistakes as possible. Assuming the learner has a means of resetting the target machine to a fixed start state, we first present an efficient algorithm that makes an expected polynomial number of mistakes in this model. Next, we show how this first algorithm can be used as a subroutine by a second algorithm that also makes a polynomial number of mistakes even in the absence of a reset. Along the way, we prove a number of combinatorial results for randomly labeled automata. We also show that the labeling of the states and the bits of the input sequence need not be truly random, but merely semi-random. Finally, we discuss an extension of our results to a model in which automata are used to represent distributions over binary strings.
node6:Academic paper with title and abstract:  Efficient distribution-free learning of probabilistic concepts. : In this paper we investigate a new formal model of machine learning in which the concept (boolean function) to be learned may exhibit uncertain or probabilistic behavior|thus, the same input may sometimes be classified as a positive example and sometimes as a negative example. Such probabilistic concepts (or p-concepts) may arise in situations such as weather prediction, where the measured variables and their accuracy are insufficient to determine the outcome with certainty. We adopt from the Valiant model of learning [27] the demands that learning algorithms be efficient and general in the sense that they perform well for a wide class of p-concepts and for any distribution over the domain. In addition to giving many efficient algorithms for learning natural classes of p-concepts, we study and develop in detail an underlying theory of learning p-concepts.
node7:Academic paper with title and abstract:  A unified gradient-descent/clustering algorithm architecture for finite state machine induction. : Although recurrent neural nets have been moderately successful in learning to emulate finite-state machines (FSMs), the continuous internal state dynamics of a neural net are not well matched to the discrete behavior of an FSM. We describe an architecture, called DOLCE, that allows discrete states to evolve in a net as learning progresses. dolce consists of a standard recurrent neural net trained by gradient descent and an adaptive clustering technique that quantizes the state space. dolce is based on the assumption that a finite set of discrete internal states is required for the task, and that the actual network state belongs to this set but has been corrupted by noise due to inaccuracy in the weights. dolce learns to recover the discrete state with maximum a posteriori probability from the noisy state. Simulations show that dolce leads to a significant improvement in generalization performance over earlier neural net approaches to FSM induction.
node8:Academic paper with title and abstract:  Cryptographic limitations on learning boolean formulae and finite automata. : In this paper we prove the intractability of learning several classes of Boolean functions in the distribution-free model (also called the Probably Approximately Correct or PAC model) of learning from examples. These results are representation independent, in that they hold regardless of the syntactic form in which the learner chooses to represent its hypotheses. Our methods reduce the problems of cracking a number of well-known public-key cryptosys- tems to the learning problems. We prove that a polynomial-time learning algorithm for Boolean formulae, deterministic finite automata or constant-depth threshold circuits would have dramatic consequences for cryptography and number theory: in particular, such an algorithm could be used to break the RSA cryptosystem, factor Blum integers (composite numbers equivalent to 3 modulo 4), and detect quadratic residues. The results hold even if the learning algorithm is only required to obtain a slight advantage in prediction over random guessing. The techniques used demonstrate an interesting duality between learning and cryptography. We also apply our results to obtain strong intractability results for approximating a gener - alization of graph coloring. fl This research was conducted while the author was at Harvard University and supported by an A.T.& T. Bell Laboratories scholarship. y Supported by grants ONR-N00014-85-K-0445, NSF-DCR-8606366 and NSF-CCR-89-02500, DAAL03-86-K-0171, DARPA AFOSR 89-0506, and by SERC.
node9:Academic paper with title and abstract:  Pruning recurrent neural networks for improved generalization performance. : Determining the architecture of a neural network is an important issue for any learning task. For recurrent neural networks no general methods exist that permit the estimation of the number of layers of hidden neurons, the size of layers or the number of weights. We present a simple pruning heuristic which significantly improves the generalization performance of trained recurrent networks. We illustrate this heuristic by training a fully recurrent neural network on positive and negative strings of a regular grammar. We also show that if rules are extracted from networks trained to recognize these strings, that rules extracted after pruning are more consistent with the rules to be learned. This performance improvement is obtained by pruning and retraining the networks. Simulations are shown for training and pruning a recurrent neural net on strings generated by two regular grammars, a randomly-generated 10-state grammar and an 8-state triple parity grammar. Further simulations indicate that this pruning method can gives generalization performance superior to that obtained by training with weight decay.
node10:Academic paper with title and abstract:  The Design and Analysis of Efficient Learning Algorithms. : 
node11:Academic paper with title and abstract:  ""A General Lower Bound on the Number of Examples Needed for Learning,"" : We prove a lower bound of ( 1 * ln 1 ffi + VCdim(C) * ) on the number of random examples required for distribution-free learning of a concept class C, where VCdim(C) is the Vapnik-Chervonenkis dimension and * and ffi are the accuracy and confidence parameters. This improves the previous best lower bound of ( 1 * ln 1 ffi + VCdim(C)), and comes close to the known general upper bound of O( 1 ffi + VCdim(C) * ln 1 * ) for consistent algorithms. We show that for many interesting concept classes, including kCNF and kDNF, our bound is actually tight to within a constant factor.
node12:Academic paper with title and abstract:  Using Recurrent Neural Networks to Learn the Structure of Interconnection Networks, : A modified Recurrent Neural Network (RNN) is used to learn a Self-Routing Interconnection Network (SRIN) from a set of routing examples. The RNN is modified so that it has several distinct initial states. This is equivalent to a single RNN learning multiple different synchronous sequential machines. We define such a sequential machine structure as augmented and show that a SRIN is essentially an Augmented Synchronous Sequential Machine (ASSM). As an example, we learn a small six-switch SRIN. After training we extract the net-work's internal representation of the ASSM and corresponding SRIN. fl This paper is adapted from ( Goudreau, 1993, Chapter 6 ) . A shortened version of this paper was published in ( Goudreau & Giles, 1993 ) .
node13:Academic paper with title and abstract:  PAC learning of one-dimensional patterns. : Developing the ability to recognize a landmark from a visual image of a robot's current location is a fundamental problem in robotics. We consider the problem of PAC-learning the concept class of geometric patterns where the target geometric pattern is a configuration of k points on the real line. Each instance is a configuration of n points on the real line, where it is labeled according to whether or not it visually resembles the target pattern. To capture the notion of visual resemblance we use the Hausdorff metric. Informally, two geometric patterns P and Q resemble each other under the Hausdorff metric, if every point on one pattern is ""close"" to some point on the other pattern. We relate the concept class of geometric patterns to the landmark recognition problem and then present a polynomial-time algorithm that PAC-learns the class of one-dimensional geometric patterns. We also present some experimental results on how our algorithm performs.
node14:Academic paper with title and abstract:  On the sample complexity of weak learning. : While most theoretical work in machine learning has focused on the complexity of learning, recently there has been increasing interest in formally studying the complexity of teaching. In this paper we study the complexity of teaching by considering a variant of the on-line learning model in which a helpful teacher selects the instances. We measure the complexity of teaching a concept from a given concept class by a combinatorial measure we call the teaching dimension. Informally, the teaching dimension of a concept class is the minimum number of instances a teacher must reveal to uniquely identify any target concept chosen from the class. fl A preliminary version of this paper appeared in the Proceedings of the Fourth Annual Workshop on Computational Learning Theory, pages 303-314. August 1991. Most of this research was carried out while both authors were at MIT Laboratory for Computer Science with support provided by ARO Grant DAAL03-86-K-0171, DARPA Contract N00014-89-J-1988, NSF Grant CCR-88914428, and a grant from the Siemens Corporation. S. Goldman is currently supported in part by a G.E. Foundation Junior Faculty Grant and NSF Grant CCR-9110108.
node15:Academic paper with title and abstract:  and P.M. Long. Apple tasting and nearly one-sided learning. : In the standard on-line model the learning algorithm tries to minimize the total number of mistakes made in a series of trials. On each trial the learner sees an instance, either accepts or rejects that instance, and then is told the appropriate response. We define a natural variant of this model (""apple tasting"") where the learner gets feedback only when the instance is accepted. We use two transformations to relate the apple tasting model to an enhanced standard model where false acceptances are counted separately from false rejections. We present a strategy for trading between false acceptances and false rejections in the standard model. From one perspective this strategy is exactly optimal, including constants. We apply our results to obtain a good general purpose apple tasting algorithm as well as nearly optimal apple tasting algorithms for a variety of standard classes, such as conjunctions and disjunctions of n boolean variables. We also present and analyze a simpler transformation useful when the instances are drawn at random rather than selected by an adversary.
node16:Academic paper with title and abstract:  and P.M. Long. Characterizations of learnability for classes of f0; :::; ng-valued functions. To appear, : 
node17:Academic paper with title and abstract:  A sampling-based heuristic for tree search. : In the field of Operation Research and Artificial Intelligence, several stochastic search algorithms have been designed based on the theory of global random search (Zhigljavsky 1991). Basically, those techniques iteratively sample the search space with respect to a probability distribution which is updated according to the result of previous samples and some predefined strategy. Genetic Algorithms (GAs) (Goldberg 1989) or Greedy Randomized Adaptive Search Procedures (GRASP) (Feo & Resende 1995) are two particular instances of this paradigm. In this paper, we present SAGE, a search algorithm based on the same fundamental mechanisms as those techniques. However, it addresses a class of problems for which it is difficult to design transformation operators to perform local search because of intrinsic constraints in the definition of the problem itself. For those problems, a procedural approach is the natural way to construct solutions, resulting in a state space represented as a tree or a DAG. The aim of this paper is to describe the underlying heuristics used by SAGE to address problems belonging to that class. The performance of SAGE is analyzed on the problem of grammar induction and its successful application to problems from the recent Abbadingo DFA learning competition is presented.
node18:Academic paper with title and abstract:  Learning concepts by asking questions. In R.S. : Tw o important issues in machine learning are explored: the role that memory plays in acquiring new concepts; and the extent to which the learner can take an active part in acquiring these concepts. This chapter describes a program, called Marvin, which uses concepts it has learned previously to learn new concepts. The program forms hypotheses about the concept being learned and tests the hypotheses by asking the trainer questions. Learning begins when the trainer shows Marvin an example of the concept to be learned. The program determines which objects in the example belong to concepts stored in the memory. A description of the new concept is formed by using the information obtained from the memory to generalize the description of the training example. The generalized description is tested when the program constructs new examples and shows these to the trainer, asking if they belong to the target concept.
node19:Academic paper with title and abstract:  Long. Prediction, learning, uniform convergence, and scale-sensitive dimensions, : We present a new general-purpose algorithm for learning classes of [0; 1]-valued functions in a generalization of the prediction model, and prove a general upper bound on the expected absolute error of this algorithm in terms of a scale-sensitive generalization of the Vapnik dimension proposed by Alon, Ben-David, Cesa-Bianchi and Haussler. We give lower bounds implying that our upper bounds cannot be improved by more than a constant factor in general. We apply this result, together with techniques due to Haussler and to Benedek and Itai, to obtain new upper bounds on packing numbers in terms of this scale-sensitive notion of dimension. Using a different technique, we obtain new bounds on packing numbers in terms of Kearns and Schapire's fat-shattering function. We show how to apply both packing bounds to obtain improved general bounds on the sample complexity of agnostic learning. For each * &gt; 0, we establish weaker sufficient and stronger necessary conditions for a class of [0; 1]-valued functions to be agnostically learnable to within *, and to be an *-uniform Glivenko-Cantelli class.",cora_node,nc
"Classify the essay represented by node13 using its subgraph data (text attributes and connections) as follows.

node0: Explores computation, representation limits in learning; funded by cognitive science initiative.  
node1: Hippocampal place field variability in aging; bimodal remapping via dentate gyrus errors vs CA3 pre-wired maps.  
node2: Wolpert's NFL theorems emphasize learner bias for generalization amid zero-sum performance trade-offs.  
node3: ""Truth-from-Trash"" model uses sensory waste to enhance mobot's strategic learning via simulation.  
node4: Distributed collective memory improves combinatorial optimization by integrating weak/strong heuristics.  
node5: Genetic programming for supervised learning faces coding size and generalization challenges in complex tasks.  
node6: Transfer learning is a subprocess of induction, not independent, resolving multi-task conceptual issues.  
node7: VISIT, a biologically plausible neural model, efficiently solves visual tasks with linear complexity.  
node8: General multi-agent reinforcement learning method for unrestricted environments, focusing on adaptation.  
node9: Neural layer suppression enables non-linear mapping via local rules, combining feedback/forward learning.  
node10: Coevolution mechanisms develop high-level abstract representations in complex systems.  
node11: Critiques test suites for evolutionary algorithms, proposes scalable nonlinear functions for evaluation.  
node12: Proposes generic complexity classes to classify supervised learning problems by tractability.  
node13: Backpropagation's bias toward statistical effects weakens noise resistance in supervised learning.  
node14: Genetic algorithms in search, optimization, and machine learning, including neural network evolution.  
node15: Evolution-learning strategies outperform evolution-only in constant-utility nonstationary environments.  
node16: Genetic algorithms solve NP-complete problems via penalty-based fitness functions for high-quality results.  
node17: Distributed genetic algorithms with strategy parameters enhance global optimization performance.  
node18: Genetic programming estimates Kolmogorov complexity via Lisp programs, overcoming computational limits.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node3>,<node0, node5>,<node0, node12>,<node0, node13>,<node0, node14>,<node1, node9>,<node2, node9>,<node3, node9>,<node4, node14>,<node5, node12>,<node6, node8>,<node6, node9>,<node6, node12>,<node6, node13>,<node7, node9>,<node10, node14>,<node11, node14>,<node12, node14>,<node14, node15>,<node14, node16>,<node14, node17>,<node14, node18>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: Explores computation, representation limits in learning; funded by cognitive science initiative.  
node1: Hippocampal place field variability in aging; bimodal remapping via dentate gyrus errors vs CA3 pre-wired maps.  
node2: Wolpert's NFL theorems emphasize learner bias for generalization amid zero-sum performance trade-offs.  
node3: ""Truth-from-Trash"" model uses sensory waste to enhance mobot's strategic learning via simulation.  
node4: Distributed collective memory improves combinatorial optimization by integrating weak/strong heuristics.  
node5: Genetic programming for supervised learning faces coding size and generalization challenges in complex tasks.  
node6: Transfer learning is a subprocess of induction, not independent, resolving multi-task conceptual issues.  
node7: VISIT, a biologically plausible neural model, efficiently solves visual tasks with linear complexity.  
node8: General multi-agent reinforcement learning method for unrestricted environments, focusing on adaptation.  
node9: Neural layer suppression enables non-linear mapping via local rules, combining feedback/forward learning.  
node10: Coevolution mechanisms develop high-level abstract representations in complex systems.  
node11: Critiques test suites for evolutionary algorithms, proposes scalable nonlinear functions for evaluation.  
node12: Proposes generic complexity classes to classify supervised learning problems by tractability.  
node13: Backpropagation's bias toward statistical effects weakens noise resistance in supervised learning.  
node14: Genetic algorithms in search, optimization, and machine learning, including neural network evolution.  
node15: Evolution-learning strategies outperform evolution-only in constant-utility nonstationary environments.  
node16: Genetic algorithms solve NP-complete problems via penalty-based fitness functions for high-quality results.  
node17: Distributed genetic algorithms with strategy parameters enhance global optimization performance.  
node18: Genetic programming estimates Kolmogorov complexity via Lisp programs, overcoming computational limits.","node0:Academic paper with title and abstract:  Trading spaces: computation, representation and the limits of learning. : fl Research on this paper was partly supported by a Senior Research Leave fellowship granted by the Joint Council (SERC/MRC/ESRC) Cognitive Science Human Computer Interaction Initiative to one of the authors (Clark). Thanks to the Initiative for that support. y The order of names is arbitrary.
node1:Academic paper with title and abstract: Separating hippocampal maps  Spatial Functions of the Hippocampal Formation and the: The place fields of hippocampal cells in old animals sometimes change when an animal is removed from and then returned to an environment [ Barnes et al., 1997 ] . The ensemble correlation between two sequential visits to the same environment shows a strong bimodality for old animals (near 0, indicative of remapping, and greater than 0.7, indicative of a similar representation between experiences), but a strong unimodality for young animals (greater than 0.7, indicative of a similar representation between experiences). One explanation for this is the multi-map hypothesis in which multiple maps are encoded in the hippocampus: old animals may sometimes be returning to the wrong map. A theory proposed by Samsonovich and McNaughton (1997) suggests that the Barnes et al. experiment implies that the maps are pre-wired in the CA3 region of hippocampus. Here, we offer an alternative explanation in which orthogonalization properties in the dentate gyrus (DG) region of hippocampus interact with errors in self-localization (reset of the path integrator on re-entry into the environment) to produce the bimodality.
node2:Academic paper with title and abstract: There is No Free Lunch but the Starter is Cheap: Generalisation from First Principles: According to Wolpert's no-free-lunch (NFL) theorems [1, 2], gener-alisation in the absence of domain knowledge is necessarily a zero-sum enterprise. Good generalisation performance in one situation is always offset by bad performance in another. Wolpert notes that the theorems do not demonstrate that effective generalisation is a logical impossibility but merely that a learner's bias (or assumption set) is of key importance
node3:Academic paper with title and abstract: Truth-from-Trash Learning and the Mobot: As natural resources become less abundant, we naturally become more interested in, and more adept at utilisation of waste materials. In doing this we are bringing to bear a ploy which is of key importance in learning | or so I argue in this paper. In the `Truth from Trash' model, learning is viewed as a process which uses environmental feedback to assemble fortuitous sensory predispositions (sensory `trash') into useful, information vehicles, i.e., `truthful' indicators of salient phenomena. The main aim will be to show how a computer implementation of the model has been used to enhance (through learning) the strategic abilities of a simulated, football playing mobot.
node4:Academic paper with title and abstract: Distributed Collective Adaptation Applied to a Hard Combinatorial Optimization Problem: We utilize collective memory to integrate weak and strong search heuristics to find cliques in FC, a family of graphs. We construct FC such that pruning of partial solutions will be ineffective. Each weak heuristic maintains a local cache of the collective memory. We examine the impact on the distributed search from the various characteristics of the distribution of the collective memory, the search algorithms, and our family of graphs. We find the distributed search performs better than the individuals, even though the space of partial solutions is combinatorially explosive.
node5:Academic paper with title and abstract: Simple Genetic Programming for Supervised Learning Problems: This paper presents an evolutionary approach and an incremental approach to find learning rules of several supervised learning tasks. In evolutionary approach potential solutions are represented as variable length mathematical (LISP S-) expressions. Thus, it is similar to Genetic Programming (GP) but it employs only a fixed set of non-problem specific functions to solve a variety of problems. The model is tested on three Monks' and parity problems. The results indicate the usefulness of the encoding schema in discovering learning rules for simple supervised learning problems. However, hard learning problems require special attention in terms of their need for larger size codings of the potential solutions and their ability of generalisa-tion over the testing set. In order to find better solutions to these issues, a hill climbing strategy with an incremental coding of potential solutions is used in discovering learning rules for the same problems. It is found that with this strategy larger solutions can easily be coded for with less computational effort. Although a better performance is achieved in training for the hard learning problems, the ability of the generalisation over the testing cases is observed to be poor.
node6:Academic paper with title and abstract: Is Transfer Inductive?: Work is currently underway to devise learning methods which are better able to transfer knowledge from one task to another. The process of knowledge transfer is usually viewed as logically separate from the inductive procedures of ordinary learning. However, this paper argues that this `seperatist' view leads to a number of conceptual difficulties. It offers a task analysis which situates the transfer process inside a generalised inductive protocol. It argues that transfer should be viewed as a subprocess within induction and not as an independent procedure for transporting knowledge between learning trials.
node7:Academic paper with title and abstract:  An Efficient Computational Model of Human Visual Attention. : One of the challenges for models of cognitive phenomena is the development of efficient and exible interfaces between low level sensory information and high level processes. For visual processing, researchers have long argued that an attentional mechanism is required to perform many of the tasks required by high level vision. This thesis presents VISIT, a connectionist model of covert visual attention that has been used as a vehicle for studying this interface. The model is efficient, exible, and is biologically plausible. The complexity of the network is linear in the number of pixels. Effective parallel strategies are used to minimize the number of iterations required. The resulting system is able to efficiently solve two tasks that are particularly difficult for standard bottom-up models of vision: computing spatial relations and visual search. Simulations show that the networks behavior matches much of the known psychophysical data on human visual attention. The general architecture of the model also closely matches the known physiological data on the human attention system. Various extensions to VISIT are discussed, including methods for learning the component modules.
node8:Academic paper with title and abstract:  A general method for multi-agent reinforcement learning in unrestricted environments. In Adaptation, Coevolution and Learning in Multiagent Systems: : 
node9:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node10:Academic paper with title and abstract:  ""Coevolving High Level Representations,"" : 
node11:Academic paper with title and abstract:  Evaluating Evolutionary Algorithms. : Test functions are commonly used to evaluate the effectiveness of different search algorithms. However, the results of evaluation are as dependent on the test problems as they are on the algorithms that are the subject of comparison. Unfortunately, developing a test suite for evaluating competing search algorithms is difficult without clearly defined evaluation goals. In this paper we discuss some basic principles that can be used to develop test suites and we examine the role of test suites as they have been used to evaluate evolutionary search algorithms. Current test suites include functions that are easily solved by simple search methods such as greedy hill-climbers. Some test functions also have undesirable characteristics that are exaggerated as the dimensionality of the search space is increased. New methods are examined for constructing functions with different degrees of nonlinearity, where the interactions and the cost of evaluation scale with respect to the dimensionality of the search space.
node12:Academic paper with title and abstract:  Measuring the difficulty of specific learning problems. : Existing complexity measures from contemporary learning theory cannot be conveniently applied to specific learning problems (e.g., training sets). Moreover, they are typically non-generic, i.e., they necessitate making assumptions about the way in which the learner will operate. The lack of a satisfactory, generic complexity measure for learning problems poses difficulties for researchers in various areas; the present paper puts forward an idea which may help to alleviate these. It shows that supervised learning problems fall into two, generic, complexity classes only one of which is associated with computational tractability. By determining which class a particular problem belongs to, we can thus effectively evaluate its degree of generic difficulty.
node13:Academic paper with title and abstract:  Statistical biases in backpropagation learning. : The paper investigates the statistical effects which may need to be exploited in supervised learning. It notes that these effects can be classified according to their conditionality and their order and proposes that learning algorithms will typically have some form of bias towards particular classes of effect. It presents the results of an empirical study of the statistical bias of backpropagation. The study involved applying the algorithm to a wide range of learning problems using a variety of different internal architectures. The results of the study revealed that backpropagation has a very specific bias in the general direction of statistical rather than relational effects. The paper shows how the existence of this bias effectively constitutes a weakness in the algorithm's ability to discount noise.
node14:Academic paper with title and abstract:  Genetic Algorithms in Search, Optimization and Machine Learning. : Angeline, P., Saunders, G. and Pollack, J. (1993) An evolutionary algorithm that constructs recurrent neural networks, LAIR Technical Report #93-PA-GNARLY, Submitted to IEEE Transactions on Neural Networks Special Issue on Evolutionary Programming.
node15:Academic paper with title and abstract:  Adaptation in constant utility nonstationary environments. : Environments that vary over time present a fundamental problem to adaptive systems. Although in the worst case there is no hope of effective adaptation, some forms environmental variability do provide adaptive opportunities. We consider a broad class of non-stationary environments, those which combine a variable result function with an invariant utility function, and demonstrate via simulation that an adaptive strategy employing both evolution and learning can tolerate a much higher rate of environmental variation than an evolution-only strategy. We suggest that in many cases where stability has previously been assumed, the constant utility non-stationary environment may in fact be a more powerful viewpoint.
node16:Academic paper with title and abstract:  An evolutionary approach to com-binatorial optimization problems. : The paper reports on the application of genetic algorithms, probabilistic search algorithms based on the model of organic evolution, to NP-complete combinatorial optimization problems. In particular, the subset sum, maximum cut, and minimum tardy task problems are considered. Except for the fitness function, no problem-specific changes of the genetic algorithm are required in order to achieve results of high quality even for the problem instances of size 100 used in the paper. For constrained problems, such as the subset sum and the minimum tardy task, the constraints are taken into account by incorporating a graded penalty term into the fitness function. Even for large instances of these highly multimodal optimization problems, an iterated application of the genetic algorithm is observed to find the global optimum within a number of runs. As the genetic algorithm samples only a tiny fraction of the search space, these results are quite encouraging.
node17:Academic paper with title and abstract:  (1991) Global optimization by means of distributed evolution Genetic Algorithms in Engineering and Computer Science Editor J. : Genetic Algorithms (GAs) are powerful heuristic search strategies based upon a simple model of organic evolution. The basic working scheme of GAs as developed by Holland [Hol75] is described within this paper in a formal way, and extensions based upon the second-level learning principle for strategy parameters as introduced in Evolution Strategies (ESs) are proposed. First experimental results concerning this extension of GAs are also reported.
node18:Academic paper with title and abstract:  Genetic programming estimates of kol-mogorov complexity. : In this paper the problem of the Kolmogorov complexity related to binary strings is faced. We propose a Genetic Programming approach which consists in evolving a population of Lisp programs looking for the optimal program that generates a given string. This evolutionary approach has permited to overcome the intractable space and time difficulties occurring in methods which perform an approximation of the Kolmogorov complexity function. The experimental results are quite significant and also show interesting computational strategies so proving the effectiveness of the implemented technique.",cora_node,nc
"Classify the essay represented by node6 using its subgraph data (text attributes and connections) as follows.

node0: ASOCS uses adaptive digital elements for incremental rule-based learning, ensuring parallel processing and stable arbitrary boolean mappings without forgetting.  
node1: DNA ASOCS model addresses VLSI implementation challenges via flexible nodes, resolving unused node allocation and hierarchical structure dependencies.  
node2: Digital boolean nodes in ASOCS enable efficient parallel self-organizing networks, contrasting analog models by comparing learning algorithms' efficiencies.  
node3: Neural model uses suppressed feedback synapses during learning, enabling non-linear mapping via local rules with experimental validation on layer-specific suppression.  
node4: Classifies neural network applications, highlighting strengths like parallelism but cautioning inefficiency in some tasks, comparing supervised/unsupervised methods.  
node5: Predicts MIMD system performance for neural simulations, validated on backpropagation/Kohonen networks, estimating scalability and execution on transputer architectures.  
node6: ASOCS architecture enables parallel adaptive logic through incremental rule addition, separating processing/adaptation phases with linear-time self-organization.  
node7: ASOCS's AA3 algorithm uses a binary decision tree for incremental rule-based systems, emphasizing simplicity, parallelism, and fast distributed learning.  
node8: Combines Gaussian codebooks and Parzen windows for efficient probability estimation/classification, offering faster computation with adaptive scaling.  
node9: Unsupervised neural network enables robot maze navigation via PCR for sensorimotor associations, outperforming Q-learning in dynamic visual categorization tasks.  
node10: Explores rodent navigation theories beyond cognitive maps using computational neuroscience models (abstract incomplete).  
node11: MLP outperforms LVQ in high-dimensional pattern discrimination due to sigmoid functions and efficient hyper-plane use, with similar training robustness.  
node12: MCM-based multi-chip neural network implementation tackles dense interconnect needs, applicable to self-organizing and parallel models.  
node13: SARDNET extends Kohonen maps for sequence classification via activation decay, effectively processing binary/phonemic sequences for speech recognition.

the connection relationship among the nodes mentioned:
 <node0, node3>,<node0, node6>,<node1, node6>,<node2, node6>,<node3, node4>,<node3, node5>,<node3, node8>,<node3, node9>,<node3, node10>,<node3, node11>,<node3, node13>,<node4, node6>,<node4, node7>,<node7, node12>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: ASOCS uses adaptive digital elements for incremental rule-based learning, ensuring parallel processing and stable arbitrary boolean mappings without forgetting.  
node1: DNA ASOCS model addresses VLSI implementation challenges via flexible nodes, resolving unused node allocation and hierarchical structure dependencies.  
node2: Digital boolean nodes in ASOCS enable efficient parallel self-organizing networks, contrasting analog models by comparing learning algorithms' efficiencies.  
node3: Neural model uses suppressed feedback synapses during learning, enabling non-linear mapping via local rules with experimental validation on layer-specific suppression.  
node4: Classifies neural network applications, highlighting strengths like parallelism but cautioning inefficiency in some tasks, comparing supervised/unsupervised methods.  
node5: Predicts MIMD system performance for neural simulations, validated on backpropagation/Kohonen networks, estimating scalability and execution on transputer architectures.  
node6: ASOCS architecture enables parallel adaptive logic through incremental rule addition, separating processing/adaptation phases with linear-time self-organization.  
node7: ASOCS's AA3 algorithm uses a binary decision tree for incremental rule-based systems, emphasizing simplicity, parallelism, and fast distributed learning.  
node8: Combines Gaussian codebooks and Parzen windows for efficient probability estimation/classification, offering faster computation with adaptive scaling.  
node9: Unsupervised neural network enables robot maze navigation via PCR for sensorimotor associations, outperforming Q-learning in dynamic visual categorization tasks.  
node10: Explores rodent navigation theories beyond cognitive maps using computational neuroscience models (abstract incomplete).  
node11: MLP outperforms LVQ in high-dimensional pattern discrimination due to sigmoid functions and efficient hyper-plane use, with similar training robustness.  
node12: MCM-based multi-chip neural network implementation tackles dense interconnect needs, applicable to self-organizing and parallel models.  
node13: SARDNET extends Kohonen maps for sequence classification via activation decay, effectively processing binary/phonemic sequences for speech recognition.","node0:Academic paper with title and abstract: ASOCS: A Multilayered Connectionist Network with Guaranteed Learning of Arbitrary Mappings: This paper reviews features of a new class of multilayer connectionist architectures known as ASOCS (Adaptive Self-Organizing Concurrent Systems). ASOCS is similar to most decision-making neural network models in that it attempts to learn an adaptive set of arbitrary vector mappings. However, it differs dramatically in its mechanisms. ASOCS is based on networks of adaptive digital elements which self-modify using local information. Function specification is entered incrementally by use of rules, rather than complete input-output vectors, such that a processing network is able to extract critical features from a large environment and give output in a parallel fashion. Learning also uses parallelism and self-organization such that a new rule is completely learned in time linear with the depth of the network. The model guarantees learning of any arbitrary mapping of boolean input-output vectors. The model is also stable in that learning does not erase any previously learned mappings except those explicitly contradicted.
node1:Academic paper with title and abstract: DNA: A New ASOCS Model With Improved Implementation Potential: A new class of highspeed, self-adaptive, massively parallel computing models called ASOCS (Adaptive Self-Organizing Concurrent Systems) has been proposed. Current analysis suggests that there may be problems implementing ASOCS models in VLSI using the hierarchical network structures originally proposed. The problems are not inherent in the models, but rather in the technology used to implement them. This has led to the development of a new ASOCS model called DNA (Discriminant-Node ASOCS) that does not depend on a hierarchical node structure for success. Three areas of the DNA model are briefly discussed in this paper: DNA's flexible nodes, how DNA overcomes problems other models have allocating unused nodes, and how DNA operates during processing and learning.
node2:Academic paper with title and abstract: Digital Neural Networks: Demands for applications requiring massive parallelism in symbolic environments have given rebirth to research in models labeled as neura l networks. These models are made up of many simple nodes which are highly interconnected such that computation takes place as data flows amongst the nodes of the network. To present, most models have proposed nodes based on simple analog functions, where inputs are multiplied by weights and summed, the total then optionally being transformed by an arbitrary function at the node. Learning in these systems is accomplished by adjusting the weights on the input lines. This paper discusses the use of digital (boolean) nodes as a primitive building block in connectionist systems. Digital nodes naturally engender new paradigms and mechanisms for learning and processing in connectionist networks. The digital nodes are used as the basic building block of a class of models called ASOCS (Adaptive Self-Organizing Concurrent Systems). These models combine massive parallelism with the ability to adapt in a self-organizing fashion. Basic features of standard neural network learning algorithms and those proposed using digital nodes are compared and contrasted. The latter mechanisms can lead to vastly improved efficiency for many applications.
node3:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node4:Academic paper with title and abstract:  Neural Network Applicability: Classifying the Problem Space, : The tremendous current effort to propose neurally inspired methods of computation forces closer scrutiny of real world application potential of these models. This paper categorizes applications into classes and particularly discusses features of applications which make them efficiently amenable to neural network methods. Computational machines do deterministic mappings of inputs to outputs and many computational mechanisms have been proposed for problem solutions. Neural network features include parallel execution, adaptive learning, generalization, and fault tolerance. Often, much effort is given to a model and applications which can already be implemented in a much more efficient way with an alternate technology. Neural networks are potentially powerful devices for many classes of applications, but not all. However, it is proposed that the class of applications for which neural networks are efficient is both large and commonly occurring in nature. Comparison of supervised, unsupervised, and generalizing systems is also included.
node5:Academic paper with title and abstract:  Performance Prediction of Large MIMD Systems for Parallel Neural Network Simulations. : In this paper, we present a performance prediction model for indicating the performance range of MIMD parallel processor systems for neural network simulations. The model expresses the total execution time of a simulation as a function of the execution times of a small number of kernel functions, which have to be measured on only one processor and one physical communication link. The functions depend on the type of neural network, its geometry, decomposition and the connection structure of the MIMD machine. Using the model, the execution time, speedup, scalability and efficiency of large MIMD systems can be predicted. The model is validated quantitatively by applying it to two popular neural networks, backpropagation and the Kohonen self-organizing feature map, decomposed on a GCel-512 1 , a 512 transputer system. Measurements are taken from network simulations decomposed via dataset and network decomposition techniques. Agreement of the model with the measurements is within 1%-14%. Estimates are given for the performances that can be expected for the new T9000 transputer systems. The presented method can also be used for other application areas such as image processing.
node6:Academic paper with title and abstract:  ""Models of Parallel Adaptive Logic,"" : This paper overviews a proposed architecture for adaptive parallel logic referred to as ASOCS (Adaptive Self-Organizing Concurrent System). The ASOCS approach is based on an adaptive network composed of many simple computing elements which operate in a parallel asynchronous fashion. Problem specification is given to the system by presenting if-then rules in the form of boolean conjunctions. Rules are added incrementally and the system adapts to the changing rule-base. Adaptation and data processing form two separate phases of operation. During processing the system acts as a parallel hardware circuit. The adaptation process is distributed amongst the computing elements and efficiently exploits parallelism. Adaptation is done in a self-organizing fashion and takes place in time linear with the depth of the network. This paper summarizes the overall ASOCS concept and overviews three specific architectures.
node7:Academic paper with title and abstract:  A self-organizing binary decision tree for incrementally defined rule based systems. : This paper presents an ASOCS (adaptive self-organizing concurrent system) model for massively parallel processing of incrementally defined rule systems in such areas as adaptive logic, robotics, logical inference, and dynamic control. An ASOCS is an adaptive network composed of many simple computing elements operating asynchronously and in parallel. This paper focuses on adaptive algorithm 3 (AA3) and details its architecture and learning algorithm. It has advantages over previous ASOCS models in simplicity, implementability, and cost. An ASOCS can operate in either a data processing mode or a learning mode. During the data processing mode, an ASOCS acts as a parallel hardware circuit. In learning mode, rules expressed as boolean conjunctions are incrementally presented to the ASOCS. All ASOCS learning algorithms incorporate a new rule in a distributed fashion in a short, bounded time.
node8:Academic paper with title and abstract:  On estimation of a probability density function and mode. : To apply the algorithm for classification we assign each class a separate set of codebook Gaussians. Each set is only trained with patterns from a single class. After having trained the codebook Gaussians, each set provides an estimate of the probability function of one class; just as with Parzen window estimation, we take as the estimate of the pattern distribution the average of all Gaussians in the set. Classification of a pattern may now be done by calculating the probability of each class at the respective sample point, and assigning to the pattern the class with the highest probability. Hence the whole codebook plays a role in the classification of patterns. This is not the case with regular classification schemes using codebooks. We have tested the classification scheme on several classification tasks including the two spiral problem. We compared our algorithm to various other classification algorithms and it came out second; the best algorithm for the applications is the Parzen window estimation. However, the computing time and memory for Parzen window estimation are excessive when compared to our algorithm, and hence, in practical situations, our algorithm is to be preferred. We have developed a fast algorithm which combines attractive properties of both Parzen window estimation and vector quantization. The scale parameter is tuned adaptively and, therefore, is not set in an ad hoc manner. It allows a classification strategy in which all the codebook vectors are taken into account. This yields better results than the standard vector quantization techniques. An interesting topic for further research is to use radially non-symmetric Gaussians.
node9:Academic paper with title and abstract:  Living in a partially structured environment: How to bypass the limitation of classical reinforcement techniques. : In this paper, we propose an unsupervised neural network allowing a robot to learn sensori-motor associations with a delayed reward. The robot task is to learn the ""meaning"" of pictograms in order to ""survive"" in a maze. First, we introduce a new neural conditioning rule (PCR: Probabilistic Conditioning Rule) allowing to test hypotheses (associations between visual categories and movements) during a given time span. Second, we describe a real maze experiment with our mobile robot. We propose a neural architecture to solve this problem and we discuss the difficulty to build visual categories dynamically while associating them to movements. Third, we propose to use our algorithm on a simulation in order to test it exhaustively. We give the results for different kind of mazes and we compare our system to an adapted version of the Q-learning algorithm. Finally, we conclude by showing the limitations of approaches that do not take into account the intrinsic complexity of a reasonning based on image recognition.
node10:Academic paper with title and abstract:  Redish. Beyond the Cognitive Map: Contributions to a Computational Neu-roscience Theory of Rodent Navigation. : 
node11:Academic paper with title and abstract:  ""Pattern Discrimination Using Feedforward Networks: A Benchmark Study of Scaling Behavior"", : The discrimination powers of Multilayer perceptron (MLP) and Learning Vector Quantisation (LVQ) networks are compared for overlapping Gaussian distributions. It is shown, both analytically and with Monte Carlo studies, that the MLP network handles high dimensional problems in a more efficient way than LVQ. This is mainly due to the sigmoidal form of the MLP transfer function, but also to the the fact that the MLP uses hyper-planes more efficiently. Both algorithms are equally robust to limited training sets and the learning curves fall off like 1=M, where M is the training set size, which is compared to theoretical predictions from statistical estimates and Vapnik-Chervonenkis bounds.
node12:Academic paper with title and abstract:  A multi-chip module implementation of a neural network. : The requirement for dense interconnect in artificial neural network systems has led researchers to seek high-density interconnect technologies. This paper reports an implementation using multi-chip modules (MCMs) as the interconnect medium. The specific system described is a self-organizing, parallel, and dynamic learning model which requires a dense interconnect technology for effective implementation; this requirement is fulfilled by exploiting MCM technology. The ideas presented in this paper regarding an MCM implementation of artificial neural networks are versatile and can be adapted to apply to other neural network and connectionist models.
node13:Academic paper with title and abstract:  a self-organizing feature map for sequences. : A self-organizing neural network for sequence classification called SARDNET is described and analyzed experimentally. SARDNET extends the Kohonen Feature Map architecture with activation retention and decay in order to create unique distributed response patterns for different sequences. SARDNET yields extremely dense yet descriptive representations of sequential input in very few training iterations. The network has proven successful on mapping arbitrary sequences of binary and real numbers, as well as phonemic representations of English words. Potential applications include isolated spoken word recognition and cognitive science models of sequence processing.",cora_node,nc
"Classify the essay represented by node9 using its subgraph data (text attributes and connections) as follows.

node0: Encoding DFAs into RNNs with sigmoid functions, proving equivalent language acceptance; experiments with 10-1,000 states show stable weight strength despite theoretical predictions.  
node1: Theoretical framework combining finite automata and linear systems for hybrid systems; summarizes early 1980s work and mentions recent developments.  
node2: Analyzes non-Gaussian performance distributions in neural networks, showing skewed results by target function smoothness; warns against Gaussian assumptions.  
node3: Examines dimensionality aspects of recurrent neural networks, as per DIMACS Technical Report 96-56.  
node4: Explores reachability, observability, and minimal realizations in sign-linear systems; analyzes state distinguishability via output behavior and system properties.  
node5: Shows threshold LMS error functions avoid local minima in linearly separable data; compares favorably to standard LMS in perceptron learning.  
node6: Characterizes observability in nonlinear systems, particularly recurrent neural networks, to assess internal state determination.  
node7: Investigates sample complexity required to learn mappings using recurrent perceptron models, per DIMACS Report 95-17.  
node8: Surveys recent findings on using neural networks for system modeling and control applications.  
node9: Analyzes observability and minimal realizations in linear systems with sign-outputs, highlighting contrasts with standard linear systems.  
node10: Demonstrates single neurons with logistic functions can have exponentially many local minima in error functions based on square loss.  
node11: Shows neural networks can simulate Turing machines in linear time; a 1000-processor net achieves universal computation.  
node12: Proves neural networks with continuous activations have VC dimension quadratic in weights, exceeding prior O(w log w) bounds.  
node13: Analyzes critical points in least-squares problems for analytic functions, providing bounds for sigmoid-based neural networks.  
node14: Introduces neural computation theory, connecting to statistics/control; serves as a physics-based入门 for newcomers.  
node15: Presents a neural net example without hidden layers showing spurious local minima in error functions with sigmoid activation.  
node16: Examines observability in linear systems with saturated outputs, providing conditions for state observability through measured outputs.

the connection relationship among the nodes mentioned:
 <node0, node11>,<node1, node6>,<node1, node9>,<node1, node11>,<node2, node10>,<node3, node7>,<node3, node8>,<node3, node11>,<node3, node12>,<node4, node9>,<node5, node9>,<node5, node10>,<node5, node15>,<node6, node14>,<node7, node9>,<node9, node16>,<node10, node15>,<node13, node15>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: Encoding DFAs into RNNs with sigmoid functions, proving equivalent language acceptance; experiments with 10-1,000 states show stable weight strength despite theoretical predictions.  
node1: Theoretical framework combining finite automata and linear systems for hybrid systems; summarizes early 1980s work and mentions recent developments.  
node2: Analyzes non-Gaussian performance distributions in neural networks, showing skewed results by target function smoothness; warns against Gaussian assumptions.  
node3: Examines dimensionality aspects of recurrent neural networks, as per DIMACS Technical Report 96-56.  
node4: Explores reachability, observability, and minimal realizations in sign-linear systems; analyzes state distinguishability via output behavior and system properties.  
node5: Shows threshold LMS error functions avoid local minima in linearly separable data; compares favorably to standard LMS in perceptron learning.  
node6: Characterizes observability in nonlinear systems, particularly recurrent neural networks, to assess internal state determination.  
node7: Investigates sample complexity required to learn mappings using recurrent perceptron models, per DIMACS Report 95-17.  
node8: Surveys recent findings on using neural networks for system modeling and control applications.  
node9: Analyzes observability and minimal realizations in linear systems with sign-outputs, highlighting contrasts with standard linear systems.  
node10: Demonstrates single neurons with logistic functions can have exponentially many local minima in error functions based on square loss.  
node11: Shows neural networks can simulate Turing machines in linear time; a 1000-processor net achieves universal computation.  
node12: Proves neural networks with continuous activations have VC dimension quadratic in weights, exceeding prior O(w log w) bounds.  
node13: Analyzes critical points in least-squares problems for analytic functions, providing bounds for sigmoid-based neural networks.  
node14: Introduces neural computation theory, connecting to statistics/control; serves as a physics-based入门 for newcomers.  
node15: Presents a neural net example without hidden layers showing spurious local minima in error functions with sigmoid activation.  
node16: Examines observability in linear systems with saturated outputs, providing conditions for state observability through measured outputs.","node0:Academic paper with title and abstract: Fault-Tolerant Implementation of Finite-State Automata in Recurrent Neural Networks: We propose an algorithm for encoding deterministic finite-state automata (DFAs) in second-order recurrent neural networks with sigmoidal discriminant function and we prove that the languages accepted by the constructed network and the DFA are identical. The desired finite-state network dynamics is achieved by programming a small subset of all weights. A worst case analysis reveals a relationship between the weight strength and the maximum allowed network size which guarantees finite-state behavior of the constructed network. We illustrate the method by encoding random DFAs with 10, 100, and 1,000 states. While the theory predicts that the weight strength scales with the DFA size, we find the weight strength to be almost constant for all the experiments. These results can be explained by noting that the generated DFAs represent average cases. We empirically demonstrate the existence of extreme DFAs for which the weight strength scales with DFA size.
node1:Academic paper with title and abstract: Interconnected Automata and Linear Systems: A Theoretical Framework in Discrete-Time In Hybrid Systems III: Verification: This paper summarizes the definitions and several of the main results of an approach to hybrid systems, which combines finite automata and linear systems, developed by the author in the early 1980s. Some related more recent results are briefly mentioned as well.
node2:Academic paper with title and abstract: On the Distribution of Performance from Multiple Neural Network Trials, On the Distribution of Performance: Andrew D. Back was with the Department of Electrical and Computer Engineering, University of Queensland. St. Lucia, Australia. He is now with the Brain Information Processing Group, Frontier Research Program, RIKEN, The Institute of Physical and Chemical Research, 2-1 Hirosawa, Wako-shi, Saitama 351-01, Japan Abstract The performance of neural network simulations is often reported in terms of the mean and standard deviation of a number of simulations performed with different starting conditions. However, in many cases, the distribution of the individual results does not approximate a Gaussian distribution, may not be symmetric, and may be multimodal. We present the distribution of results for practical problems and show that assuming Gaussian distributions can significantly affect the interpretation of results, especially those of comparison studies. For a controlled task which we consider, we find that the distribution of performance is skewed towards better performance for smoother target functions and skewed towards worse performance
node3:Academic paper with title and abstract: Dimension of Recurrent Neural Networks: DIMACS Technical Report 96-56 December 1996
node4:Academic paper with title and abstract: Lemma 2.3 The system is reachable and observable and realizes the same input/output behavior as: Here we show a similar construction for multiple-output systems, with some modifications. Let = (A; B; C) s be a discrete-time sign-linear system with state space IR n and p outputs. Perform a change of ; where A 1 (n 1 fi n 1 ) is invertible and A 2 (n 2 fi n 2 ) is nilpotent. If (A; B) is a reachable pair and (A; C) is an observable pair, then is minimal in the sense that any other sign-linear system with the same input/output behavior has dimension at least n. But, if n 1 &lt; n, then det A = 0 and is not observable and hence not canonical. Let us find another system ~ (necessarily not sign-linear) which has the same input/output behavior as , but is canonical. Let i be the relative degree of the ith row of the Markov sequence A, and = minf i : i = 1; : : : ; pg. Let the initial state be x. There is a difference between the case when the smallest relative degree is greater or equal to n 2 and the case when &lt; n 2 . Roughly speaking, when n 2 the outputs of the sign-linear system give us information about sign (Cx), sign (CAx), : : : , sign (CA 1 x), which are the first outputs of the sys tem. After that, we can use the inputs and outputs to learn only about x 1 (the first n 1 components of x). When &lt; n 2 , we may be able to use some controls to learn more about x 2 (the last n 2 components of x) before time n 2 when the nilpotency of A 2 has finally Lemma 2.4 Two states x and z are indistinguishable for if and only if (x) = (z). Proof. In the case n 2 , we have only the equations x 1 = z 1 and the equality of the 's. The first ` output terms for are exactly the terms of . So these equalities are satisfied if and only if the first ` output terms coincide for x and z, for any input. Equality of everything but the first n 1 components is equivalent to the first n 2 output terms coinciding for x and z, since the jth row of the qth output, for initial state x, for example, is either sign (c j A q x) if j &gt; q, or sign (c j A q x + + A j j u q j +1 + ) if j q in which case we may use the control u q j +1 to identify c j A q x (using Remark 3.3 in [1]).
node5:Academic paper with title and abstract:  Backpropagation Separates when Perceptrons Do, : Feedforward nets with sigmoidal activation functions are often designed by minimizing a cost criterion. It has been pointed out before that this technique may be outperformed by the classical perceptron learning rule, at least on some problems. In this paper, we show that no such pathologies can arise if the error criterion is of a threshold LMS type, i.e., is zero for values ""beyond"" the desired target values. More precisely, we show that if the data are linearly separable, and one considers nets with no hidden neurons, then an error function as above cannot have any local minima that are not global. Simulations of networks with hidden units are consistent with these results, in that often data which can be classified when minimizing a threshold LMS criterion may fail to be classified when using instead a simple LMS cost. In addition, the proof gives the following stronger result, under the stated hypotheses: the continuous gradient adjustment procedure is such that from any initial weight configuration a separating set of weights is obtained in finite time. This is a precise analogue of the Perceptron Learning Theorem. The results are then compared with the more classical pattern recognition problem of threshold LMS with linear activations, where no spurious local minima exist even for nonseparable data: here it is shown that even if using the threshold criterion, such bad local minima may occur, if the data are not separable and sigmoids are used.
node6:Academic paper with title and abstract:  ""State observability in recurrent neural networks,"" : Report SYCON-92-07rev ABSTRACT We obtain a characterization of observability for a class of nonlinear systems which appear in neural networks research.
node7:Academic paper with title and abstract:  ""Sample complexity for learning recurrent perceptron mappings,"" : DIMACS Technical Report 95-17
node8:Academic paper with title and abstract:  Neural nets as systems models and controllers. : This paper briefly surveys some recent results relevant
node9:Academic paper with title and abstract:  ""Linear systems with sign-observations,"" : This paper deals with systems that are obtained from linear time-invariant continuous-or discrete-time devices followed by a function that just provides the sign of each output. Such systems appear naturally in the study of quantized observations as well as in signal processing and neural network theory. Results are given on observability, minimal realizations, and other system-theoretic concepts. Certain major differences exist with the linear case, and other results generalize in a surprisingly straightforward manner.
node10:Academic paper with title and abstract:  Exponentially many local minima for single neurons. : We show that for a single neuron with the logistic function as the transfer function the number of local minima of the error function based on the square loss can grow exponentially in the dimension.
node11:Academic paper with title and abstract:  On the Computational Power of Neural Nets. : Report SYCON-91-11 ABSTRACT This paper deals with the simulation of Turing machines by neural networks. Such networks are made up of interconnections of synchronously evolving processors, each of which updates its state according to a ""sigmoidal"" linear combination of the previous states of all units. The main result states that one may simulate all Turing machines by nets, in linear time. In particular, it is possible to give a net made up of about 1,000 processors which computes a universal partial-recursive function. (This is an update of Report SYCON-91-08; new results include the simulation in linear time of binary-tape machines, as opposed to the unary alphabets used in the previous version.)
node12:Academic paper with title and abstract:  ""Neural networks with quadratic VC dimension,"" : This paper shows that neural networks which use continuous activation functions have VC dimension at least as large as the square of the number of weights w. This result settles a long-standing open question, namely whether the well-known O(w log w) bound, known for hard-threshold nets, also held for more general sigmoidal nets. Implications for the number of samples needed for valid gen eralization are discussed.
node13:Academic paper with title and abstract:  ""Critical points for least-squares problems involving certain analytic functions, with applications to sigmoidal nets,"" : This paper deals with nonlinear least-squares problems involving the fitting to data of parameterized analytic functions. For generic regression data, a general result establishes the countability, and under stronger assumptions finiteness, of the set of functions giving rise to critical points of the quadratic loss function. In the special case of what are usually called ""single-hidden layer neural networks,"" which are built upon the standard sigmoidal activation tanh(x) (or equivalently (1 + e x ) 1 ), a rough upper bound for this cardinality is provided as well.
node14:Academic paper with title and abstract:  Introduction to the Theory of Neural Computa 92 tion. : Neural computation, also called connectionism, parallel distributed processing, neural network modeling or brain-style computation, has grown rapidly in the last decade. Despite this explosion, and ultimately because of impressive applications, there has been a dire need for a concise introduction from a theoretical perspective, analyzing the strengths and weaknesses of connectionist approaches and establishing links to other disciplines, such as statistics or control theory. The Introduction to the Theory of Neural Computation by Hertz, Krogh and Palmer (subsequently referred to as HKP) is written from the perspective of physics, the home discipline of the authors. The book fulfills its mission as an introduction for neural network novices, provided that they have some background in calculus, linear algebra, and statistics. It covers a number of models that are often viewed as disjoint. Critical analyses and fruitful comparisons between these models
node15:Academic paper with title and abstract:  Backpropagation can give rise to spurious local minima even for networks without hidden layers. : We give an example of a neural net without hidden layers and with a sigmoid transfer function, together with a training set of binary vectors, for which the sum of the squared errors, regarded as a function of the weights, has a local minimum which is not a global minimum. The example consists of a set of 125 training instances, with four weights and a threshold to be learnt. We do not know if substantially smaller binary examples exist.
node16:Academic paper with title and abstract:  HAUTUS M.L.J.Observability of Linear Systems with Saturated Outputs, : In this paper, we present necessary and sufficient conditions for observability of the class of output-saturated systems. These are linear systems whose output passes through a saturation function before it can be measured.",cora_node,nc
"Classify the essay represented by node9 using its subgraph data (text attributes and connections) as follows.

node0: Explores breaking rotational symmetry in self-organizing maps for orientation development using feedback mechanisms.  
node1: Discusses implementing multi-associative mappings in neural networks, comparing with symbolic methods and demonstrating feasibility through experiments.  
node2: Presents a random approach to motion planning in technical report format, focusing on computational methods.  
node3: Introduces generalized model extending MDPs, covering risk and exploration with value/policy iteration and reinforcement learning adaptations.  
node4: Proposes synaptic suppression mechanisms for combining self-organization and associative feedback in neural networks, validated through experimental data.  
node5: Introduces PREENS, a distributed neurosimulator enabling parallel processing on networks and MIMD systems for large-scale neural network simulations.  
node6: Analyzes bias/variance in TD learning, providing tools to evaluate mean-square-error curves and optimize parameters for better performance.  
node7: Examines reasoning frameworks integrating temporal and probabilistic aspects in formal logic systems.  
node8: Extends Compositional Q-Learning for robotic task decomposition using CMAC function approximation in multi-actuator systems.  
node9: Describes a reinforcement learning algorithm for collision-free navigation using state space quantization and Temporal Difference methods.  
node10: Discusses self-organized feature map formation referencing Rumelhart's error propagation in neural networks.  
node11: Categorizes problem domains suitable for neural networks, highlighting their advantages like parallelism and adaptability over traditional methods.  
node12: Introduces DG-learning to efficiently achieve dynamic goals, outperforming Q-learning via knowledge transfer and experimental validation.  
node13: Proposes a minimal-model causation theory, distinguishing true causal influences from spurious correlations via inductive reasoning.  
node14: Presents hierarchical mixture models using EM algorithm for supervised learning, applied to robot dynamics with simulation results.  
node15: Describes neuron-like adaptive elements capable of tackling complex learning and control tasks through compositional learning.  
node16: Models topographic mapping and ocular dominance stripes in visual systems, showing correlation effects on stripe width through simulations.  
node17: Proposes Dyna-PI and Dyna-Q architectures combining reinforcement learning and planning for adaptive navigation and dynamic environments.  
node18: Presents reinforcement learning algorithms for mobile robots to avoid collisions using adaptive state coding and steering signal mapping.  
node19: Investigates objective functions in neural map formation, linking dynamics to weight adjustments and normalization rules via coordinate transformations.  
node20: Models self-organization of visual cortex receptive fields and lateral connections, explaining size selectivity and efficient visual processing.  
node21: Develops methods for theory refinement using intermediate concepts and inverse resolution to handle incomplete domain theories.  
node22: Introduces closed-loop macro actions for multi-level planning in MDPs, enabling variable-duration actions and valid model-based planning.  
node23: Analyzes methods to correct flawed domain theories via knowledge-level approaches, emphasizing flexible combination of correction strategies.

the connection relationship among the nodes mentioned:
 <node0, node16>,<node1, node4>,<node2, node4>,<node3, node7>,<node3, node12>,<node3, node17>,<node4, node5>,<node4, node9>,<node4, node11>,<node4, node16>,<node4, node18>,<node4, node20>,<node6, node22>,<node7, node13>,<node7, node17>,<node8, node14>,<node8, node15>,<node9, node15>,<node9, node17>,<node9, node18>,<node10, node16>,<node10, node19>,<node10, node20>,<node12, node17>,<node15, node17>,<node15, node18>,<node16, node19>,<node16, node20>,<node17, node18>,<node17, node22>,<node17, node23>,<node21, node23>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Reinforcement Learning,"

node0: Explores breaking rotational symmetry in self-organizing maps for orientation development using feedback mechanisms.  
node1: Discusses implementing multi-associative mappings in neural networks, comparing with symbolic methods and demonstrating feasibility through experiments.  
node2: Presents a random approach to motion planning in technical report format, focusing on computational methods.  
node3: Introduces generalized model extending MDPs, covering risk and exploration with value/policy iteration and reinforcement learning adaptations.  
node4: Proposes synaptic suppression mechanisms for combining self-organization and associative feedback in neural networks, validated through experimental data.  
node5: Introduces PREENS, a distributed neurosimulator enabling parallel processing on networks and MIMD systems for large-scale neural network simulations.  
node6: Analyzes bias/variance in TD learning, providing tools to evaluate mean-square-error curves and optimize parameters for better performance.  
node7: Examines reasoning frameworks integrating temporal and probabilistic aspects in formal logic systems.  
node8: Extends Compositional Q-Learning for robotic task decomposition using CMAC function approximation in multi-actuator systems.  
node9: Describes a reinforcement learning algorithm for collision-free navigation using state space quantization and Temporal Difference methods.  
node10: Discusses self-organized feature map formation referencing Rumelhart's error propagation in neural networks.  
node11: Categorizes problem domains suitable for neural networks, highlighting their advantages like parallelism and adaptability over traditional methods.  
node12: Introduces DG-learning to efficiently achieve dynamic goals, outperforming Q-learning via knowledge transfer and experimental validation.  
node13: Proposes a minimal-model causation theory, distinguishing true causal influences from spurious correlations via inductive reasoning.  
node14: Presents hierarchical mixture models using EM algorithm for supervised learning, applied to robot dynamics with simulation results.  
node15: Describes neuron-like adaptive elements capable of tackling complex learning and control tasks through compositional learning.  
node16: Models topographic mapping and ocular dominance stripes in visual systems, showing correlation effects on stripe width through simulations.  
node17: Proposes Dyna-PI and Dyna-Q architectures combining reinforcement learning and planning for adaptive navigation and dynamic environments.  
node18: Presents reinforcement learning algorithms for mobile robots to avoid collisions using adaptive state coding and steering signal mapping.  
node19: Investigates objective functions in neural map formation, linking dynamics to weight adjustments and normalization rules via coordinate transformations.  
node20: Models self-organization of visual cortex receptive fields and lateral connections, explaining size selectivity and efficient visual processing.  
node21: Develops methods for theory refinement using intermediate concepts and inverse resolution to handle incomplete domain theories.  
node22: Introduces closed-loop macro actions for multi-level planning in MDPs, enabling variable-duration actions and valid model-based planning.  
node23: Analyzes methods to correct flawed domain theories via knowledge-level approaches, emphasizing flexible combination of correction strategies.","node0:Academic paper with title and abstract: Breaking Rotational Symmetry in a Self-Organizing Map-Model for Orientation Map Development: 
node1:Academic paper with title and abstract: Multiassociative Memory: This paper discusses the problem of how to implement many-to-many, or multi-associative, mapping within connectionist models. Traditional symbolic approaches work through explicit representation of all alternatives via stored links, or implicitly through enumerative algorithms. Classical pattern association models ignore the issue of generating multiple outputs for a single input pattern, and while recent research on recurrent networks is promising, the field has not clearly focused upon multi-associativity as a goal. In this paper, we define multiassociative memory (MM), and several possible variants, and discuss its utility in general cognitive modeling. We extend sequential cascaded networks (Pollack 1987, 1990a) to fit the task, and perform several initial experiments which demonstrate the feasibility of the concept.
node2:Academic paper with title and abstract: : 11] M.H. Overmars. A random approach to motion planning. Technical Report RUU-CS-92-32, Department of Computer Science, Utrecht University, October 1992.
node3:Academic paper with title and abstract:  Dynamic Programming and Markov Processes. : The problem of maximizing the expected total discounted reward in a completely observable Markovian environment, i.e., a Markov decision process (mdp), models a particular class of sequential decision problems. Algorithms have been developed for making optimal decisions in mdps given either an mdp specification or the opportunity to interact with the mdp over time. Recently, other sequential decision-making problems have been studied prompting the development of new algorithms and analyses. We describe a new generalized model that subsumes mdps as well as many of the recent variations. We prove some basic results concerning this model and develop generalizations of value iteration, policy iteration, model-based reinforcement-learning, and Q-learning that can be used to make optimal decisions in the generalized model under various assumptions. Applications of the theory to particular models are described, including risk-averse mdps, exploration-sensitive mdps, sarsa, Q-learning with spreading, two-player games, and approximate max picking via sampling. Central to the results are the contraction property of the value operator and a stochastic-approximation theorem that reduces asynchronous convergence to synchronous convergence.
node4:Academic paper with title and abstract:  Self-Organization and Associative Memory, : Selective suppression of transmission at feedback synapses during learning is proposed as a mechanism for combining associative feedback with self-organization of feedforward synapses. Experimental data demonstrates cholinergic suppression of synaptic transmission in layer I (feedback synapses), and a lack of suppression in layer IV (feed-forward synapses). A network with this feature uses local rules to learn mappings which are not linearly separable. During learning, sensory stimuli and desired response are simultaneously presented as input. Feedforward connections form self-organized representations of input, while suppressed feedback connections learn the transpose of feedfor-ward connectivity. During recall, suppression is removed, sensory input activates the self-organized representation, and activity generates the learned response.
node5:Academic paper with title and abstract:  Vytopil. Design Issues Towards PREENS, a Parallel Research Execution Environment for Neural Systems. : PREENS a Parallel Research Execution Environment for Neural Systems is a distributed neurosimulator, targeted on networks of workstations and transputer systems. As current applications of neural networks often contain large amounts of data and as the neural networks involved in tasks such as vision are very large, high requirements on memory and computational resources are imposed on the target execution platforms. PREENS can be executed in a distributed environment, i.e. tools and neural network simulation programs can be running on any machine connectable via TCP/IP. Using this approach, larger tasks and more data can be examined using an efficient coarse grained parallelism. Furthermore, the design of PREENS allows for neural networks to be running on any high performance MIMD machine such as a trans-puter system. In this paper, the different features and design concepts of PREENS are discussed. These can also be used for other applications, like image processing.
node6:Academic paper with title and abstract:  Improving generalization for temporal difference learning: : We provide analytical expressions governing changes to the bias and variance of the lookup table estimators provided by various Monte Carlo and temporal difference value estimation algorithms with o*ine updates over trials in absorbing Markov reward processes. We have used these expressions to develop software that serves as an analysis tool: given a complete description of a Markov reward process, it rapidly yields an exact mean-square-error curve, the curve one would get from averaging together sample mean-square-error curves from an infinite number of learning trials on the given problem. We use our analysis tool to illustrate classes of mean-square-error curve behavior in a variety of example reward processes, and we show that although the various temporal difference algorithms are quite sensitive to the choice of step-size and eligibility-trace parameters, there are values of these parameters that make them similarly competent, and generally good.
node7:Academic paper with title and abstract:  Kanazawa, Reasoning about Time and Probability, : 
node8:Academic paper with title and abstract:  A modular Q-learning architecture for manipulator task decomposition, : Compositional Q-Learning (CQ-L) (Singh 1992) is a modular approach to learning to perform composite tasks made up of several elemental tasks by reinforcement learning. Skills acquired while performing elemental tasks are also applied to solve composite tasks. Individual skills compete for the right to act and only winning skills are included in the decomposition of the composite task. We extend the original CQ-L concept in two ways: (1) a more general reward function, and (2) the agent can have more than one actuator. We use the CQ-L architecture to acquire skills for performing composite tasks with a simulated two-linked manipulator having large state and action spaces. The manipulator is a non-linear dynamical system and we require its end-effector to be at specific positions in the workspace. Fast function approximation in each of the Q-modules is achieved through the use of an array of Cerebellar Model Articulation Controller (CMAC) (Albus
node9:Academic paper with title and abstract:  ""Adaptive State Space Quantization for Reinforcement Learning of Collision-Free Navigation"", : The paper describes a self-learning control system for a mobile robot. Based on sensor information the control system has to provide a steering signal in such a way that collisions are avoided. Since in our case no `examples' are available, the system learns on the basis of an external reinforcement signal which is negative in case of a collision and zero otherwise. Rules from Temporal Difference learning are used to find the correct mapping between the (discrete) sensor input space and the steering signal. We describe the algorithm for learning the correct mapping from the input (state) vector to the output (steering) signal, and the algorithm which is used for a discrete coding of the input state space.
node10:Academic paper with title and abstract:  Self-organized formation of typologically correct feature maps. : 2] D. E. Rumelhart, G. E. Hinton and R. J. Williams, ""Learning Internal Representations by Error Propagation"", in D. E. Rumelhart and J. L. McClelland (eds.) Parallel Distributed Processing: Explorations in the Microstructure of Cognition (Vol. 1), MIT Press (1986).
node11:Academic paper with title and abstract:  Neural Network Applicability: Classifying the Problem Space, : The tremendous current effort to propose neurally inspired methods of computation forces closer scrutiny of real world application potential of these models. This paper categorizes applications into classes and particularly discusses features of applications which make them efficiently amenable to neural network methods. Computational machines do deterministic mappings of inputs to outputs and many computational mechanisms have been proposed for problem solutions. Neural network features include parallel execution, adaptive learning, generalization, and fault tolerance. Often, much effort is given to a model and applications which can already be implemented in a much more efficient way with an alternate technology. Neural networks are potentially powerful devices for many classes of applications, but not all. However, it is proposed that the class of applications for which neural networks are efficient is both large and commonly occurring in nature. Comparison of supervised, unsupervised, and generalizing systems is also included.
node12:Academic paper with title and abstract:  Learning to achieve goals. : Temporal difference methods solve the temporal credit assignment problem for reinforcement learning. An important subproblem of general reinforcement learning is learning to achieve dynamic goals. Although existing temporal difference methods, such as Q learning, can be applied to this problem, they do not take advantage of its special structure. This paper presents the DG-learning algorithm, which learns efficiently to achieve dynamically changing goals and exhibits good knowledge transfer between goals. In addition, this paper shows how traditional relaxation techniques can be applied to the problem. Finally, experimental results are given that demonstrate the superiority of DG learning over Q learning in a moderately large, synthetic, non-deterministic domain.
node13:Academic paper with title and abstract:  A theory of inferred causation. : This paper concerns the empirical basis of causation, and addresses the following issues: We propose a minimal-model semantics of causation, and show that, contrary to common folklore, genuine causal influences can be distinguished from spurious covariations following standard norms of inductive reasoning. We also establish a sound characterization of the conditions under which such a distinction is possible. We provide an effective algorithm for inferred causation and show that, for a large class of data the algorithm can uncover the direction of causal influences as defined above. Finally, we ad dress the issue of non-temporal causation.
node14:Academic paper with title and abstract:  Hierarchical Mixtures of Experts and the EM Algorithm, : We present a tree-structured architecture for supervised learning. The statistical model underlying the architecture is a hierarchical mixture model in which both the mixture coefficients and the mixture components are generalized linear models (GLIM's). Learning is treated as a maximum likelihood problem; in particular, we present an Expectation-Maximization (EM) algorithm for adjusting the parameters of the architecture. We also develop an on-line learning algorithm in which the parameters are updated incrementally. Comparative simulation results are presented in the robot dynamics domain. *We want to thank Geoffrey Hinton, Tony Robinson, Mitsuo Kawato and Daniel Wolpert for helpful comments on the manuscript. This project was supported in part by a grant from the McDonnell-Pew Foundation, by a grant from ATR Human Information Processing Research Laboratories, by a grant from Siemens Corporation, by by grant IRI-9013991 from the National Science Foundation, and by grant N00014-90-J-1942 from the Office of Naval Research. The project was also supported by NSF grant ASC-9217041 in support of the Center for Biological and Computational Learning at MIT, including funds provided by DARPA under the HPCC program, and NSF grant ECS-9216531 to support an Initiative in Intelligent Control at MIT. Michael I. Jordan is a NSF Presidential Young Investigator.
node15:Academic paper with title and abstract:  Neuronlike adaptive elements that can solve difficult learning control problems. : Miller, G. (1956). The magical number seven, plus or minus two: Some limits on our capacity for processing information. The Psychological Review, 63(2):81-97. Schmidhuber, J. (1990b). Towards compositional learning with dynamic neural networks. Technical Report FKI-129-90, Technische Universitat Munchen, Institut fu Informatik. Servan-Schreiber, D., Cleermans, A., and McClelland, J. (1988). Encoding sequential structure in simple recurrent networks. Technical Report CMU-CS-88-183, Carnegie Mellon University, Computer Science Department.
node16:Academic paper with title and abstract:  Topography and ocular dominance: A model exploring positive correla-tions. : The map from eye to brain in vertebrates is topographic, i.e. neighbouring points in the eye map to neighbouring points in the brain. In addition, when two eyes innervate the same target structure, the two sets of fibres segregate to form ocular dominance stripes. Experimental evidence from the frog and goldfish suggests that these two phenomena may be subserved by the same mechanisms. We present a computational model that addresses the formation of both topography and ocular dominance. The model is based on a form of competitive learning with subtractive enforcement of a weight normalization rule. Inputs to the model are distributed patterns of activity presented simultaneously in both eyes. An important aspect of this model is that ocular dominance segregation can occur when the two eyes are positively correlated, whereas previous models have tended to assume zero or negative correlations between the eyes. This allows investigation of the dependence of the pattern of stripes on the degree of correlation between the eyes: we find that increasing correlation leads to narrower stripes. Experiments are suggested to test this prediction.
node17:Academic paper with title and abstract:  Integrated Architectures for Learning, Planning and Reacting Based on Approximating Dynamic Programming, : This paper extends previous work with Dyna, a class of architectures for intelligent systems based on approximating dynamic programming methods. Dyna architectures integrate trial-and-error (reinforcement) learning and execution-time planning into a single process operating alternately on the world and on a learned model of the world. In this paper, I present and show results for two Dyna architectures. The Dyna-PI architecture is based on dynamic programming's policy iteration method and can be related to existing AI ideas such as evaluation functions and universal plans (reactive systems). Using a navigation task, results are shown for a simple Dyna-PI system that simultaneously learns by trial and error, learns a world model, and plans optimal routes using the evolving world model. The Dyna-Q architecture is based on Watkins's Q-learning, a new kind of reinforcement learning. Dyna-Q uses a less familiar set of data structures than does Dyna-PI, but is arguably simpler to implement and use. We show that Dyna-Q architectures are easy to adapt for use in changing environments.
node18:Academic paper with title and abstract:  ""Learning to avoid collisions: a reinforcement learning paradigm for mobile robot navigation"", : The paper describes a self-learning control system for a mobile robot. Based on sensor information the control system has to provide a steering signal in such a way that collisions are avoided. Since in our case no `examples' are available, the system learns on the basis of an external reinforcement signal which is negative in case of a collision and zero otherwise. We describe the adaptive algorithm which is used for a discrete coding of the state space, and the adaptive algorithm for learning the correct mapping from the input (state) vector to the output (steering) signal.
node19:Academic paper with title and abstract:  Objective functions for neural map formation. : Institute for Neural Computation Technical Report Series, No. INC-9701, January 1997. University of California, San Diego. La Jolla, CA 92093. Abstract Computational models of neural map formation can be considered on at least three different levels of abstraction: detailed models including neural activity dynamics, weight dynamics which abstract from the the neural activity dynamics by an adiabatic approximation, and objective functions from which weight dynamics may be derived as gradient flows. In this paper we present an example of how an objective function can be derived from detailed non-linear neural dynamics. A systematic investigation reveals how different weight dynamics introduced previously can be derived from objective functions generated from a few prototypical terms. This includes dynamic link matching as a special case of neural map formation. We focus in particular on the role of coordinate transformations to derive different weight dynamics from the same objective function. Coordinate transformations are also important in deriving normalization rules from constraints. Several examples illustrate how objective functions can help in understanding, generating, and comparing different models of neural map formation. The techniques used in this analysis may also be useful in investigating other types of neural dynamics.
node20:Academic paper with title and abstract:  Self-organization and functional role of lateral connections and multi size receptive fields in the primary visual cortex. Neural Processing Letters, : Cells in the visual cortex are selective not only to ocular dominance and orientation of the input, but also to its size and spatial frequency. The simulations reported in this paper show how size selectivity could develop through Hebbian self-organization, and how receptive fields of different sizes could organize into columns like those for orientation and ocular dominance. The lateral connections in the network self-organize cooperatively and simultaneously with the receptive field sizes, and produce patterns of lateral connectivity that closely follow the receptive field organization. Together with our previous work on ocular dominance and orientation selectivity, these results suggest that a single Hebbian self-organizing process can give rise to all the major receptive field properties in the visual cortex, and also to structured patterns of lateral interactions, some of which have been verified experimentally and others predicted by the model. The model also suggests a functional role for the self-organized structures: The afferent receptive fields develop a sparse coding of the visual input, and the recurrent lateral interactions eliminate redundancies in cortical activity patterns, allowing the cortex to efficiently process massive amounts of visual information.
node21:Academic paper with title and abstract:  Finding new rules for incomplete theories: Explicit biases for induction with contextual information. : addressed in KBANN (which translates a theory into a neural-net, refines it using backpropagation, and then retranslates the result back into rules) by adding extra hidden units and connections to the initial network; however, this would require predetermining the num In this paper, we have presented constructive induction techniques recently added to the EITHER theory refinement system. Intermediate concept utilization employs existing rules in the theory to derive higher-level features for use in induction. Intermediate concept creation employs inverse resolution to introduce new intermediate concepts in order to fill gaps in a theory than span multiple levels. These revisions allow EITHER to make use of imperfect domain theories in the ways typical of previous work in both constructive induction and theory refinement. As a result, EITHER is able to handle a wider range of theory imperfections than any other existing theory refinement system.
node22:Academic paper with title and abstract:  Planning with closed-loop macro actions. : Planning and learning at multiple levels of temporal abstraction is a key problem for artificial intelligence. In this paper we summarize an approach to this problem based on the mathematical framework of Markov decision processes and reinforcement learning. Conventional model-based reinforcement learning uses primitive actions that last one time step and that can be modeled independently of the learning agent. These can be generalized to macro actions, multi-step actions specified by an arbitrary policy and a way of completing. Macro actions generalize the classical notion of a macro operator in that they are closed loop, uncertain, and of variable duration. Macro actions are needed to represent common-sense higher-level actions such as going to lunch, grasping an object, or traveling to a distant city. This paper generalizes prior work on temporally abstract models (Sutton 1995) and extends it from the prediction setting to include actions, control, and planning. We define a semantics of models of macro actions that guarantees the validity of planning using such models. This paper present new results in the theory of planning with macro actions and illustrates its potential advantages in a gridworld task.
node23:Academic paper with title and abstract:  Correcting imperfect domain theories: A knowledge-level analysis. : Explanation-Based Learning [Mitchell et al., 1986; DeJong and Mooney, 1986] has shown promise as a powerful analytical learning technique. However, EBL is severely hampered by the requirement of a complete and correct domain theory for successful learning to occur. Clearly, in non-trivial domains, developing such a domain theory is a nearly impossible task. Therefore, much research has been devoted to understanding how an imperfect domain theory can be corrected and extended during system performance. In this paper, we present a characterization of this problem, and use it to analyze past research in the area. Past characterizations of the problem (e.g, [Mitchell et al., 1986; Rajamoney and DeJong, 1987]) have viewed the types of performance errors caused by a faulty domain theory as primary. In contrast, we focus primarily on the types of knowledge deficiencies present in the theory, and from these derive the types of performance errors that can result. Correcting the theory can be viewed as a search through the space of possible domain theories, with a variety of knowledge sources that can be used to guide the search. We examine the types of knowledge used by a variety of past systems for this purpose. The hope is that this analysis will indicate the need for a ""universal weak method"" of domain theory correction, in which different sources of knowledge for theory correction can be freely and flexibly combined.",cora_node,nc
"Classify the essay represented by node7 using its subgraph data (text attributes and connections) as follows.

nodex: <your summary>  
node0: Fast bottom-up decision tree pruning algorithm with strong generalization guarantees to combat overfitting.  
node1: Robust model selection using estimation and approximation error bounds for improved accuracy.  
node2: Foundational work on decision tree induction methods for classification tasks.  
node3: Addresses cross-validation overfitting by proposing LOOCVCV to avoid noise-induced errors.  
node4: Theoretical framework for learning classification rules in machine learning.  
node5: Analyzes cross-validation error via approximation and estimation rates to optimize training-test splits.  
node6: Compares GRM, MDL, and CV experimentally, concluding cross-validation often outperforms others.  
node7: Shows top-down decision tree algorithms amplify weak learners into strong classifiers via boosting.  
node8: Efficient decision tree prediction method competitive with best pruning using expert advice synthesis.  
node9: Theoretically grounded pessimistic pruning for decision trees using VC dimension and uniform convergence.  
node10: Empirical comparison of selection measures for decision tree induction to evaluate effectiveness.

the connection relationship among the nodes mentioned:
 <node0, node6>,<node0, node7>,<node0, node8>,<node0, node9>,<node1, node6>,<node2, node3>,<node2, node9>,<node3, node5>,<node3, node6>,<node4, node8>,<node4, node10>,<node5, node6>,<node9, node10>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Theory,"

nodex: <your summary>  
node0: Fast bottom-up decision tree pruning algorithm with strong generalization guarantees to combat overfitting.  
node1: Robust model selection using estimation and approximation error bounds for improved accuracy.  
node2: Foundational work on decision tree induction methods for classification tasks.  
node3: Addresses cross-validation overfitting by proposing LOOCVCV to avoid noise-induced errors.  
node4: Theoretical framework for learning classification rules in machine learning.  
node5: Analyzes cross-validation error via approximation and estimation rates to optimize training-test splits.  
node6: Compares GRM, MDL, and CV experimentally, concluding cross-validation often outperforms others.  
node7: Shows top-down decision tree algorithms amplify weak learners into strong classifiers via boosting.  
node8: Efficient decision tree prediction method competitive with best pruning using expert advice synthesis.  
node9: Theoretically grounded pessimistic pruning for decision trees using VC dimension and uniform convergence.  
node10: Empirical comparison of selection measures for decision tree induction to evaluate effectiveness.","node0:Academic paper with title and abstract: A Fast, Bottom-Up Decision Tree Pruning Algorithm with Near-Optimal Generalization: In this work, we present a new bottom-up algorithm for decision tree pruning that is very efficient (requiring only a single pass through the given tree), and prove a strong performance guarantee for the generalization error of the resulting pruned tree. We work in the typical setting in which the given tree T may have been derived from the given training sample S, and thus may badly overfit S. In this setting, we give bounds on the amount of additional generalization error that our pruning suffers compared to the optimal pruning of T . More generally, our results show that if there is a pruning of T with small error, and whose size is small compared to jSj, then our algorithm will find a pruning whose error is not much larger. This style of result has been called an index of resolvability result by Barron and Cover in the context of density estimation. A novel feature of our algorithm is its locality | the decision to prune a subtree is based entirely on properties of that subtree and the sample reaching it. To analyze our algorithm, we develop tools of local uniform convergence, a generalization of the standard notion that may prove useful in other settings.
node1:Academic paper with title and abstract: Towards Robust Model Selection using Estimation and Approximation Error Bounds: 
node2:Academic paper with title and abstract:  ""Induction of Decision Trees,"" : 
node3:Academic paper with title and abstract:  Preventing ""overfitting"" of Cross-Validation data. : Suppose that, for a learning task, we have to select one hypothesis out of a set of hypotheses (that may, for example, have been generated by multiple applications of a randomized learning algorithm). A common approach is to evaluate each hypothesis in the set on some previously unseen cross-validation data, and then to select the hypothesis that had the lowest cross-validation error. But when the cross-validation data is partially corrupted such as by noise, and if the set of hypotheses we are selecting from is large, then ""folklore"" also warns about ""overfitting"" the cross- validation data [Klockars and Sax, 1986, Tukey, 1949, Tukey, 1953]. In this paper, we explain how this ""overfitting"" really occurs, and show the surprising result that it can be overcome by selecting a hypothesis with a higher cross-validation error, over others with lower cross-validation errors. We give reasons for not selecting the hypothesis with the lowest cross-validation error, and propose a new algorithm, LOOCVCV, that uses a computa- tionally efficient form of leave-one-out cross- validation to select such a hypothesis. Fi- nally, we present experimental results for one domain, that show LOOCVCV consistently beating picking the hypothesis with the lowest cross-validation error, even when using reasonably large cross-validation sets.
node4:Academic paper with title and abstract:  A Theory of Learning Classification Rules. : 
node5:Academic paper with title and abstract:  A bound on the error of Cross Validation using the approxima-tion and estimation rates, with consequences for the training-test split. : We give an analysis of the generalization error of cross validation in terms of two natural measures of the difficulty of the problem under consideration: the approximation rate (the accuracy to which the target function can be ideally approximated as a function of the number of hypothesis parameters), and the estimation rate (the deviation between the training and generalization errors as a function of the number of hypothesis parameters). The approximation rate captures the complexity of the target function with respect to the hypothesis model, and the estimation rate captures the extent to which the hypothesis model suffers from overfitting. Using these two measures, we give a rigorous and general bound on the error of cross validation. The bound clearly shows the tradeoffs involved with making fl the fraction of data saved for testing too large or too small. By optimizing the bound with respect to fl, we then argue (through a combination of formal analysis, plotting, and controlled experimentation) that the following qualitative properties of cross validation behavior should be quite robust to significant changes in the underlying model selection problem:
node6:Academic paper with title and abstract:  An experimental and theoretical comparison of model selection methods. : We investigate the problem of model selection in the setting of supervised learning of boolean functions from independent random examples. More precisely, we compare methods for finding a balance between the complexity of the hypothesis chosen and its observed error on a random training sample of limited size, when the goal is that of minimizing the resulting generalization error. We undertake a detailed comparison of three well-known model selection methods | a variation of Vapnik's Guaranteed Risk Minimization (GRM), an instance of Rissanen's Minimum Description Length Principle (MDL), and cross validation (CV). We introduce a general class of model selection methods (called penalty-based methods) that includes both GRM and MDL, and provide general methods for analyzing such rules. We provide both controlled experimental evidence and formal theorems to support the following conclusions: * The class of penalty-based methods is fundamentally handicapped in the sense that there exist two types of model selection problems for which every penalty-based method must incur large generalization error on at least one, while CV enjoys small generalization error Despite the inescapable incomparability of model selection methods under certain circumstances, we conclude with a discussion of our belief that the balance of the evidence provides specific reasons to prefer CV to other methods, unless one is in possession of detailed problem-specific information. on both.
node7:Academic paper with title and abstract:  On the Boosting Ability of Top-Down Decision Tree Learning Algorithms. : We analyze the performance of top-down algorithms for decision tree learning, such as those employed by the widely used C4.5 and CART software packages. Our main result is a proof that such algorithms are boosting algorithms. By this we mean that if the functions that label the internal nodes of the decision tree can weakly approximate the unknown target function, then the top-down algorithms we study will amplify this weak advantage to build a tree achieving any desired level of accuracy. The bounds we obtain for this amplification show an interesting dependence on the splitting criterion used by the top-down algorithm. More precisely, if the functions used to label the internal nodes have error 1=2 fl as approximations to the target function, then for the splitting criteria used by CART and C4.5, trees of size (1=*) O(1=fl 2 * 2 ) and (1=*) O(log(1=*)=fl 2 ) (respectively) suffice to drive the error below *. Thus (for example), small constant advantage over random guessing is amplified to constant error with trees of constant size. For a new splitting criterion suggested by our analysis, the
node8:Academic paper with title and abstract:  Predicting nearly as well as the best pruning of a decision tree. : In this paper, we suggest an alternative approach to the pruning phase. Using a given unpruned decision tree, we present a new method of making predictions on test data, and we prove that our algorithm's performance will not be ""much worse"" (in a precise technical sense) than the predictions made by the best reasonably small pruning of the given decision tree. Thus, our procedure is guaranteed to be competitive (in terms of the quality of its predictions) with any pruning algorithm. We prove that our procedure is very efficient and highly robust. Our method can be viewed as a synthesis of two previously studied techniques. First, we apply Cesa-Bianchi et al.'s [3] results on predicting using ""expert advice"" (where we view each pruning as an ""expert"") to obtain an algorithm that has provably low prediction loss, but that is computationally infeasible. Next, we generalize and apply a method developed by Buntine [2, 1] and Willems, Shtarkov and Tjalkens [18, 19] to derive a very efficient implementation of this procedure.
node9:Academic paper with title and abstract:  Pessimistic Decision Tree Pruning Based on Tree Size. : In this work we develop a new criteria to perform pessimistic decision tree pruning. Our method is theoretically sound and is based on theoretical concepts such as uniform convergence and the Vapnik-Chervonenkis dimension. We show that our criteria is very well motivated, from the theory side, and performs very well in practice. The accuracy of the new criteria is comparable to that of the current method used in C4.5.
node10:Academic paper with title and abstract:  An empirical comparison of selection measures for decision-tree induction. : Ourston and Mooney, 1990b ] D. Ourston and R. J. Mooney. Improving shared rules in multiple category domain theories. Technical Report AI90-150, Artificial Intelligence Labora tory, University of Texas, Austin, TX, December 1990.",cora_node,nc
"Classify the essay represented by node1 using its subgraph data (text attributes and connections) as follows.

node0: Game theory for moving horizon control of linear time-varying systems; H-infinity control, stability conditions, risk-sensitive state estimation.  
node1: Receding horizon H-infinity control for time-varying systems; online synthesis, Riccati inequalities, robust performance, adaptive controllers with norm bounds.

the connection relationship among the nodes mentioned:
 <node0, node1>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Reinforcement Learning,"

node0: Game theory for moving horizon control of linear time-varying systems; H-infinity control, stability conditions, risk-sensitive state estimation.  
node1: Receding horizon H-infinity control for time-varying systems; online synthesis, Riccati inequalities, robust performance, adaptive controllers with norm bounds.","node0:Academic paper with title and abstract:  A game theoretic approach to moving horizon control. : A control law is constructed for a linear time varying system by solving a two player zero sum differential game on a moving horizon, the game being that which is used to construct an H 1 controller on a finite horizon. Conditions are given under which this controller results in a stable system and satisfies an infinite horizon H 1 norm bound. A risk sensitive formulation is used to provide a state estimator in the observation feedback case.
node1:Academic paper with title and abstract:  Robust performance and adaptation using receding horizon H 1 control of time varying systems. : In this paper we construct suboptimal H 1 controllers which satisfy a new robust performance condition, using the receding horizon technique. A method is described for the synthesis of H 1 controllers online, making use of the exact plant model only on a finite interval extending into the future. Inequalities based on the two Riccati differential equation solution to the finite horizon H 1 problem are derived, and the resulting freedom is exploited to construct H 1 controllers which have a closed loop induced norm less than a prespecified value for all plants within a set, which is described in terms of the future variation of the plant. Dual results, with a possible adaptive interpretation, are also constructed.",cora_node,nc
"Classify the essay represented by node10 using its subgraph data (text attributes and connections) as follows.

node0: Proposes EMMA, a differential learning rule using kernel density estimation to optimize entropy, applied to 3D model alignment and MRI corruption correction.  
node1: Explores overcomplete representations for feature extraction, emphasizing sparse coding and efficient signal decomposition.  
node2: Uses temporal association in recurrent networks with Hebbian learning to develop viewpoint-invariant face recognition via temporal proximity of views.  
node3: Applies ICA to simulated EEG using a three-shell spherical head model, supported by military research grants.  
node4: Enhances blind audio source separation using overdetermined mixtures and MBLMS, improving performance with additional sensors.  
node5: Extracts coherent depth from stereograms via competitive anti-Hebbian learning in unsupervised neural networks.  
node6: Uses information maximization in nonlinear units for blind source separation and deconvolution, achieving high speech separation accuracy.  
node7: Links BCM theory to Projection Pursuit, enabling stability analysis and applications in phoneme/3D object recognition.  
node8: Applies nonlinear Hebbian learning for signal separation, focusing on adaptive neural network structures.  
node9: Combines ICA and attractor networks for viewpoint-invariant face recognition, outperforming PCA in pose variance.  
node10: Learns efficient overcomplete image codes (Gabor-like) via sparse coding, excelling in denoising and pixel recovery.  
node11: Proposes recurrent NNs with adaptive learning rates for faster blind separation, enabling chaotic output switching in non-stationary signals.  
node12: Uses multi-layer networks with local learning rules for blind image separation, enabling VLSI implementation and sequential source extraction.  
node13: Addresses real-room speaker separation using frequency-domain infomax to handle non-minimum phase filters.  
node14: Employs predictability minimization to learn edge and feature detectors from raw images without preprocessing.  
node15: Develops factorial codes via predictability minimization, yielding distributed non-redundant representations for segmentation and novelty detection.  
node16: Introduces fast fixed-point ICA algorithm with cubic convergence, requiring no user parameters for blind source separation.

the connection relationship among the nodes mentioned:
 <node0, node6>,<node0, node7>,<node1, node6>,<node1, node10>,<node2, node9>,<node3, node6>,<node4, node13>,<node5, node6>,<node6, node8>,<node6, node9>,<node6, node10>,<node6, node11>,<node6, node12>,<node6, node13>,<node6, node15>,<node6, node16>,<node8, node11>,<node8, node12>,<node8, node16>,<node11, node12>,<node14, node15>.

Consider: semantic and structural information. Select strictly from:'Theroy', 'Probabilistic Methods', 'Genetic Algorithms', 'Reinforcement Learning', 'Case-Based', 'Neural Networks', ' Rule Learning'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Case-Based)
Brief_reasoning: Your_brief_reasoning",Neural Networks,"

node0: Proposes EMMA, a differential learning rule using kernel density estimation to optimize entropy, applied to 3D model alignment and MRI corruption correction.  
node1: Explores overcomplete representations for feature extraction, emphasizing sparse coding and efficient signal decomposition.  
node2: Uses temporal association in recurrent networks with Hebbian learning to develop viewpoint-invariant face recognition via temporal proximity of views.  
node3: Applies ICA to simulated EEG using a three-shell spherical head model, supported by military research grants.  
node4: Enhances blind audio source separation using overdetermined mixtures and MBLMS, improving performance with additional sensors.  
node5: Extracts coherent depth from stereograms via competitive anti-Hebbian learning in unsupervised neural networks.  
node6: Uses information maximization in nonlinear units for blind source separation and deconvolution, achieving high speech separation accuracy.  
node7: Links BCM theory to Projection Pursuit, enabling stability analysis and applications in phoneme/3D object recognition.  
node8: Applies nonlinear Hebbian learning for signal separation, focusing on adaptive neural network structures.  
node9: Combines ICA and attractor networks for viewpoint-invariant face recognition, outperforming PCA in pose variance.  
node10: Learns efficient overcomplete image codes (Gabor-like) via sparse coding, excelling in denoising and pixel recovery.  
node11: Proposes recurrent NNs with adaptive learning rates for faster blind separation, enabling chaotic output switching in non-stationary signals.  
node12: Uses multi-layer networks with local learning rules for blind image separation, enabling VLSI implementation and sequential source extraction.  
node13: Addresses real-room speaker separation using frequency-domain infomax to handle non-minimum phase filters.  
node14: Employs predictability minimization to learn edge and feature detectors from raw images without preprocessing.  
node15: Develops factorial codes via predictability minimization, yielding distributed non-redundant representations for segmentation and novelty detection.  
node16: Introduces fast fixed-point ICA algorithm with cubic convergence, requiring no user parameters for blind source separation.","node0:Academic paper with title and abstract: Empirical Entropy Manipulation for Real-World Problems: No finite sample is sufficient to determine the density, and therefore the entropy, of a signal directly. Some assumption about either the functional form of the density or about its smoothness is necessary. Both amount to a prior over the space of possible density functions. By far the most common approach is to assume that the density has a parametric form. By contrast we derive a differential learning rule called EMMA that optimizes entropy by way of kernel density estimation. Entropy and its derivative can then be calculated by sampling from this density estimate. The resulting parameter update rule is surprisingly simple and efficient. We will describe two real-world applications that can be solved efficiently and reliably using EMMA. In the first application EMMA is used to align 3D models to complex natural images. In the second application EMMA is used to detect and correct corruption in magnetic resonance images (MRI). Both applications are beyond the scope of existing parametric entropy models.
node1:Academic paper with title and abstract: Learning overcomplete representations: 
node2:Academic paper with title and abstract: Learning Viewpoint Invariant Face Representations from Visual Experience by Temporal Association: In natural visual experience, different views of an object or face tend to appear in close temporal proximity. A set of simulations is presented which demonstrate how viewpoint invariant representations of faces can be developed from visual experience by capturing the temporal relationships among the input patterns. The simulations explored the interaction of temporal smoothing of activity signals with Hebbian learning (Foldiak, 1991) in both a feed-forward system and a recurrent system. The recurrent system was a generalization of a Hopfield network with a lowpass temporal filter on all unit activities. Following training on sequences of graylevel images of faces as they changed pose, multiple views of a given face fell into the same basin of attraction, and the system acquired representations of faces that were approximately viewpoint invariant.
node3:Academic paper with title and abstract: Independent Component Analysis of Simulated EEG Using a Three-Shell Spherical Head Model 1: 1 This report was supported in part by the Navy Medical Research and Development Command and the Office of Naval Research, Department of the Navy under work unit ONR.Reimb-6429. The views expressed in this article are those of the authors and do not reflect the official policy or position of the Department of the Navy, Department of Defense, or the U.S. Government. Approved for public release, distribution unlimited.
node4:Academic paper with title and abstract: BLIND SEPARATION OF REAL WORLD AUDIO SIGNALS USING OVERDETERMINED MIXTURES: We discuss the advantages of using overdetermined mixtures to improve upon blind source separation algorithms that are designed to extract sound sources from acoustic mixtures. A study of the nature of room impulse responses helps us choose an adaptive filter architecture. We use ideal inverses of acquired room impulse responses to compare the effectiveness of different-sized separating filter configurations of various filter lengths. Using a multi-channel blind least-mean-square algorithm (MBLMS), we show that, by adding additional sensors, we can improve upon the separation of signals mixed with real world filters.
node5:Academic paper with title and abstract:  Competitive anti-hebbian learning of invariants. : Although the detection of invariant structure in a given set of input patterns is vital to many recognition tasks, connectionist learning rules tend to focus on directions of high variance (principal components). The prediction paradigm is often used to reconcile this dichotomy; here we suggest a more direct approach to invariant learning based on an anti-Hebbian learning rule. An unsupervised two-layer network implementing this method in a competitive setting learns to extract coherent depth information from random-dot stereograms.
node6:Academic paper with title and abstract:  An Information Maximization Approach to Blind Separation and Blind Deconvolution. : We derive a new self-organising learning algorithm which maximises the information transferred in a network of non-linear units. The algorithm does not assume any knowledge of the input distributions, and is defined here for the zero-noise limit. Under these conditions, information maximisation has extra properties not found in the linear case (Linsker 1989). The non-linearities in the transfer function are able to pick up higher-order moments of the input distributions and perform something akin to true redundancy reduction between units in the output representation. This enables the network to separate statistically independent components in the inputs: a higher-order generalisation of Principal Components Analysis. We apply the network to the source separation (or cocktail party) problem, successfully separating unknown mixtures of up to ten speakers. We also show that a variant on the network architecture is able to perform blind deconvolution (cancellation of unknown echoes and reverberation in a speech signal). Finally, we derive dependencies of information transfer on time delays. We suggest that information max-imisation provides a unifying framework for problems in `blind' signal processing. fl Please send comments to tony@salk.edu. This paper will appear as Neural Computation, 7, 6, 1004-1034 (1995). The reference for this version is: Technical Report no. INC-9501, February 1995, Institute for Neural Computation, UCSD, San Diego, CA 92093-0523.
node7:Academic paper with title and abstract:  Objective function formulation of the BCM theory of visual cortical plasticity: Statistical connections, stability conditions. : In this paper, we present an objective function formulation of the BCM theory of visual cortical plasticity that permits us to demonstrate the connection between the unsupervised BCM learning procedure and various statistical methods, in particular, that of Projection Pursuit. This formulation provides a general method for stability analysis of the fixed points of the theory and enables us to analyze the behavior and the evolution of the network under various visual rearing conditions. It also allows comparison with many existing unsupervised methods. This model has been shown successful in various applications such as phoneme and 3D object recognition. We thus have the striking and possibly highly significant result that a biological neuron is performing a sophisticated statistical procedure.
node8:Academic paper with title and abstract:  Signal separation by nonlinear Hebbian learning, : 
node9:Academic paper with title and abstract:  Viewpoint invariant face recognition using independent component analysis and attractor networks. : We have explored two approaches to recognizing faces across changes in pose. First, we developed a representation of face images based on independent component analysis (ICA) and compared it to a principal component analysis (PCA) representation for face recognition. The ICA basis vectors for this data set were more spatially local than the PCA basis vectors and the ICA representation had greater invariance to changes in pose. Second, we present a model for the development of viewpoint invariant responses to faces from visual experience in a biological system. The temporal continuity of natural visual experience was incorporated into an attractor network model by Hebbian learning following a lowpass temporal filter on unit activities. When combined with the temporal filter, a basic Hebbian update rule became a generalization of Griniasty et al. (1993), which associates temporally proximal input patterns into basins of attraction. The system acquired rep resentations of faces that were largely independent of pose.
node10:Academic paper with title and abstract:  Inferring sparse, overcomplete image codes using an efficient coding framework. : We apply a general technique for learning overcomplete bases to the problem of finding efficient image codes. The bases learned by the algorithm are localized, oriented, and bandpass, consistent with earlier results obtained using related methods. We show that the learned bases are Gabor-like in structure and that higher degrees of overcompleteness produce greater sampling density in position, orientation, and scale. The efficient coding framework provides a method for comparing different bases objectively by calculating their probability given the observed data or by measuring the entropy of the basis function coefficients. Compared to complete and overcomplete Fourier and wavelet bases, the learned bases have much better coding efficiency. We demonstrate the improvement in the representation of the learned bases by showing superior performance in image denoising and filling-in of missing pixels.
node11:Academic paper with title and abstract:  Recurrent neural networks for blind separation of sources, : Novel on-line learning algorithms with self adaptive learning rates (parameters) for blind separation of signals are proposed. The main motivation for development of new learning rules is to improve convergence speed and to reduce cross-talking, especially for non-stationary signals. Furthermore, we have discovered that under some conditions the proposed neural network models with associated learning algorithms exhibit a random switch of attention, i.e. they have ability of chaotic or random switching or cross-over of output signals in such way that a specified separated signal may appear at various outputs at different time windows. Validity, performance and dynamic properties of the proposed learning algorithms are investigated by computer simulation experiments.
node12:Academic paper with title and abstract:  ""Local adaptive learning algorithms for blind separation of natural images"", : In this paper a neural network approach for reconstruction of natural highly correlated images from linear (additive) mixture of them is proposed. A multi-layer architecture with local on-line learning rules is developed to solve the problem of blind separation of sources. The main motivation for using a multi-layer network instead of a single-layer one is to improve the performance and robustness of separation, while applying a very simple local learning rule, which is biologically plausible. Moreover such architecture with on-chip learning is relatively easy implementable using VLSI electronic circuits. Furthermore it enables the extraction of source signals sequentially one after the other, starting from the strongest signal and finishing with the weakest one. The experimental part focuses on separating highly correlated human faces from mixture of them, with additive noise and under unknown number of sources.
node13:Academic paper with title and abstract:  Blind separation of delayed and convolved sources. : We address the difficult problem of separating multiple speakers with multiple microphones in a real room. We combine the work of Torkkola and Amari, Cichocki and Yang, to give Natural Gradient information maximisation rules for recurrent (IIR) networks, blindly adjusting delays, separating and deconvolving mixed signals. While they work well on simulated data, these rules fail in real rooms which usually involve non-minimum phase transfer functions, not-invertible using stable IIR filters. An approach that sidesteps this problem is to perform infomax on a feedforward architecture in the frequency domain (Lambert 1996). We demonstrate real-room separation of two natural signals using this approach.
node14:Academic paper with title and abstract:  Semilinear predictability minimization produces well-known feature detectors. : Predictability minimization (PM | Schmidhuber, 1992) exhibits various intuitive and theoretical advantages over many other methods for unsupervised redundancy reduction. So far, however, there were only toy applications of PM. In this paper, we apply semilinear PM to static real world images and find: without a teacher and without any significant preprocessing, the system automatically learns to generate distributed representations based on well-known feature detectors, such as orientation sensitive edge detectors and off-center-on-surround-like structures, thus extracting simple features related to those considered useful for image pre-processing and compression.
node15:Academic paper with title and abstract:  Learning factorial codes by predictability minimization. : I propose a novel general principle for unsupervised learning of distributed non-redundant internal representations of input patterns. The principle is based on two opposing forces. For each representational unit there is an adaptive predictor which tries to predict the unit from the remaining units. In turn, each unit tries to react to the environment such that it minimizes its predictability. This encourages each unit to filter `abstract concepts' out of the environmental input such that these concepts are statistically independent of those upon which the other units focus. I discuss various simple yet potentially powerful implementations of the principle which aim at finding binary factorial codes (Bar-low et al., 1989), i.e. codes where the probability of the occurrence of a particular input is simply the product of the probabilities of the corresponding code symbols. Such codes are potentially relevant for (1) segmentation tasks, (2) speeding up supervised learning, (3) novelty detection. Methods for finding factorial codes automatically implement Occam's razor for finding codes using a minimal number of units. Unlike previous methods the novel principle has a potential for removing not only linear but also non-linear output redundancy. Illustrative experiments show that algorithms based on the principle of predictability minimization are practically feasible. The final part of this paper describes an entirely local algorithm that has a potential for learning unique representations of extended input sequences.
node16:Academic paper with title and abstract:  A fast txed-point algorithm for independent component analysis, : This paper will appear in Neural Computation, 9:1483-1492, 1997. Abstract We introduce a novel fast algorithm for Independent Component Analysis, which can be used for blind source separation and feature extraction. It is shown how a neural network learning rule can be transformed into a txed-point iteration, which provides an algorithm that is very simple, does not depend on any user-detned parameters, and is fast to converge to the most accurate solution allowed by the data. The algorithm tnds, one at a time, all non-Gaussian independent components, regardless of their probability distributions. The computations can be performed either in batch mode or in a semi-adaptive manner. The convergence of the algorithm is rigorously proven, and the convergence speed is shown to be cubic. Some comparisons to gradient based algorithms are made, showing that the new algorithm is usually 10 to 100 times faster, sometimes giving the solution in just a few iterations.",cora_node,nc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: People should be allowed to believe fairy tales if they want to. Argument 2: Some fairy tales are based on facts with a colorful details added. 

node0:Common sense concept: believable
node1:Common sense concept: by people
node2:Common sense concept: believe
node3:Common sense concept: fairy tales
node4:Common sense concept: based on facts
node5:Common sense concept: colorful details added
node6:Common sense concept: truth

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node3, node4>,<node3, node5>,<node4, node6>,<node6, node0>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: believable
node1:Common sense concept: by people
node2:Common sense concept: believe
node3:Common sense concept: fairy tales
node4:Common sense concept: based on facts
node5:Common sense concept: colorful details added
node6:Common sense concept: truth","node0:Common sense concept: believable
node1:Common sense concept: by people
node2:Common sense concept: believe
node3:Common sense concept: fairy tales
node4:Common sense concept: based on facts
node5:Common sense concept: colorful details added
node6:Common sense concept: truth",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Assisted suicide is murder. Argument 2: The dying party has consented, negating murder. 

node0:Common sense concept: assisted suicide
node1:Common sense concept: the dying party
node2:Common sense concept: has chosen
node3:Common sense concept: has consented
node4:Common sense concept: ruling out murder
node5:Common sense concept: murder

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>,<node3, node4>,<node4, node5>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: assisted suicide
node1:Common sense concept: the dying party
node2:Common sense concept: has chosen
node3:Common sense concept: has consented
node4:Common sense concept: ruling out murder
node5:Common sense concept: murder","node0:Common sense concept: assisted suicide
node1:Common sense concept: the dying party
node2:Common sense concept: has chosen
node3:Common sense concept: has consented
node4:Common sense concept: ruling out murder
node5:Common sense concept: murder",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: factory farming should no longer exist. Argument 2: Factory farming feeds millions. 

node0:Common sense concept: factory farming
node1:Common sense concept: feeds millions
node2:Common sense concept: low cost food
node3:Common sense concept: exist

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: factory farming
node1:Common sense concept: feeds millions
node2:Common sense concept: low cost food
node3:Common sense concept: exist","node0:Common sense concept: factory farming
node1:Common sense concept: feeds millions
node2:Common sense concept: low cost food
node3:Common sense concept: exist",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Young people need money compared to the older folks, so force them to retire Argument 2: Young mismanage all they have, so older folks should not be forced to retire. 

node0:Common sense concept: older generation
node1:Common sense concept: forced to retire
node2:Common sense concept: young people
node3:Common sense concept: younger generation
node4:Common sense concept: older folks
node5:Common sense concept: mismanage
node6:Common sense concept: money

the connection relationship among the nodes mentioned:
 <node0, node1>,<node2, node3>,<node3, node0>,<node3, node5>,<node4, node0>,<node5, node6>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: older generation
node1:Common sense concept: forced to retire
node2:Common sense concept: young people
node3:Common sense concept: younger generation
node4:Common sense concept: older folks
node5:Common sense concept: mismanage
node6:Common sense concept: money","node0:Common sense concept: older generation
node1:Common sense concept: forced to retire
node2:Common sense concept: young people
node3:Common sense concept: younger generation
node4:Common sense concept: older folks
node5:Common sense concept: mismanage
node6:Common sense concept: money",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: School uniforms are good at making more united communities. Argument 2: School uniforms are bad at highlighting individuals, which creates some sense of equality. 

node0:Common sense concept: school uniforms
node1:Common sense concept: highlighting individuals
node2:Common sense concept: sense of equality
node3:Common sense concept: united communities

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: school uniforms
node1:Common sense concept: highlighting individuals
node2:Common sense concept: sense of equality
node3:Common sense concept: united communities","node0:Common sense concept: school uniforms
node1:Common sense concept: highlighting individuals
node2:Common sense concept: sense of equality
node3:Common sense concept: united communities",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Guantanamo Bay is a safe place to hold prisoners Argument 2: Guantanamo Bay is a safely guarded prison 

node0:Common sense concept: guantanamo bay
node1:Common sense concept: jail
node2:Common sense concept: safely guarded prison
node3:Common sense concept: prisoners

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: guantanamo bay
node1:Common sense concept: jail
node2:Common sense concept: safely guarded prison
node3:Common sense concept: prisoners","node0:Common sense concept: guantanamo bay
node1:Common sense concept: jail
node2:Common sense concept: safely guarded prison
node3:Common sense concept: prisoners",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Cannabis is helpful, and people should be allowed to use it. Argument 2: Cannabis is the choice of many people for ailments. 

node0:Common sense concept: ailments
node1:Common sense concept: treatments
node2:Common sense concept: cannabis
node3:Common sense concept: natural
node4:Common sense concept: allowed to use
node5:Common sense concept: benefit to society
node6:Common sense concept: helpful

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>,<node3, node4>,<node4, node5>,<node5, node6>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: ailments
node1:Common sense concept: treatments
node2:Common sense concept: cannabis
node3:Common sense concept: natural
node4:Common sense concept: allowed to use
node5:Common sense concept: benefit to society
node6:Common sense concept: helpful","node0:Common sense concept: ailments
node1:Common sense concept: treatments
node2:Common sense concept: cannabis
node3:Common sense concept: natural
node4:Common sense concept: allowed to use
node5:Common sense concept: benefit to society
node6:Common sense concept: helpful",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: telemarketing is a nuisance Argument 2: telemarketing is not popular with many people 

node0:Common sense concept: telemarketing
node1:Common sense concept: bothersome
node2:Common sense concept: nuisance
node3:Common sense concept: not popular

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node3>,<node1, node2>,<node3, node2>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",support,"node0:Common sense concept: telemarketing
node1:Common sense concept: bothersome
node2:Common sense concept: nuisance
node3:Common sense concept: not popular","node0:Common sense concept: telemarketing
node1:Common sense concept: bothersome
node2:Common sense concept: nuisance
node3:Common sense concept: not popular",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: The blockade should end. Argument 2: The blockade keeps the area safe. 

node0:Common sense concept: the blockade
node1:Common sense concept: barrier
node2:Common sense concept: keeping
node3:Common sense concept: area safe
node4:Common sense concept: end

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>,<node3, node4>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: the blockade
node1:Common sense concept: barrier
node2:Common sense concept: keeping
node3:Common sense concept: area safe
node4:Common sense concept: end","node0:Common sense concept: the blockade
node1:Common sense concept: barrier
node2:Common sense concept: keeping
node3:Common sense concept: area safe
node4:Common sense concept: end",expla_graph,gc
"Determine the logical relationship between two arguments related to connected entities by the following given graph ( nodes represent commonsense objects and edges represent the relation between two objects). Determine if the arguments support or counter each other based on their logical coherence. 
Argument 1: Social media is negative for society. Argument 2: Many people get connected on social media. 

node0:Common sense concept: social media
node1:Common sense concept: connected
node2:Common sense concept: causing content
node3:Common sense concept: negative

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node2, node3>.

Consider: semantic and structural information. Select strictly from:'support', 'counter'. Respond only with the choice content and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:support)
Brief_reasoning: Your_brief_reasoning",counter,"node0:Common sense concept: social media
node1:Common sense concept: connected
node2:Common sense concept: causing content
node3:Common sense concept: negative","node0:Common sense concept: social media
node1:Common sense concept: connected
node2:Common sense concept: causing content
node3:Common sense concept: negative",expla_graph,gc
"Classify the relationship between two entities denoted as source node27 and target node23 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: TV program host with alternative titles like host or TV presenter.  
node1: Actor, producer, and director known as David Schwimmer.  
node2: Musician who writes, composes, and performs their own songs.  
node3: Missing.  
node4: Southeast Asian republic also called Socialist Republic of Vietnam.  
node5: Person overseeing creative and financial aspects of film production.  
node6: American record label named Jive Records.  
node7: American musician known as Chris Thile.  
node8: English-Canadian actor, director, producer, and voice actor.  
node9: American singer-songwriter and actress known as Pink.  
node10: American musician and rapper known as KRS-One.  
node11: American actress and comedian Betty White.  
node12: MTV award recognizing new artists in music videos.  
node13: MTV award for excellence in music video art direction.  
node14: Film director oversees film production as part of their job.  
node15: American actor Gregory ""Greg"" Kinnear.  
node16: Ethnic group native to England, known as the English.  
node17: Private school located in New York City.  
node18: American actress Mary Lynn Rajskub.  
node19: Chinese Special Administrative Region, Hong Kong SAR.  
node20: English comedian and actor John Cleese.  
node21: Ethnoreligious group originating from Judaism and Israelite ancestry.  
node22: Southeast Asian country officially the Lao People's Democratic Republic.  
node23: Event host with titles like MC or emcee.  
node24: Capital city of England and the United Kingdom.  
node25: Social or legal union between spouses creating kinship.  
node26: 2009 Hong Kong action film titled *Bodyguards and Assassins*.  
node27: Hong Kong actor Eric Tsang, also known as Zeng Zhiwei.  
node28: Hong Kong film award for Best Supporting Actor.  
node29: East Asian state commonly known as China.  
node30: Writer creating scripts for films, TV, or games.  
node31: Major city in Scotland, part of the UK.

the connection relationship among the nodes mentioned:
 <node0, node23>,<node0, node27>,<node1, node5>,<node1, node14>,<node1, node21>,<node1, node25>,<node2, node7>,<node2, node9>,<node3, node9>,<node4, node22>,<node4, node29>,<node5, node20>,<node5, node27>,<node6, node9>,<node6, node10>,<node7, node25>,<node8, node14>,<node8, node18>,<node8, node24>,<node8, node25>,<node9, node12>,<node9, node13>,<node9, node21>,<node9, node25>,<node10, node23>,<node10, node25>,<node10, node30>,<node11, node17>,<node11, node25>,<node14, node20>,<node14, node27>,<node15, node25>,<node15, node30>,<node16, node20>,<node18, node25>,<node19, node25>,<node19, node26>,<node19, node27>,<node19, node29>,<node20, node25>,<node20, node30>,<node22, node29>,<node24, node25>,<node25, node27>,<node25, node31>,<node26, node27>,<node26, node28>,<node26, node29>,<node27, node28>,<node27, node29>,<node27, node30>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Friendships Among Celebrities; Films Directed by a Director; GDP Per Capita in Currency; Gender of a Person; Award Winners; Major Field of Study for Graduates; Olympic Medals Awarded; Dubbing Performances by Language; Person's Profession; International Tuition in Currency. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Person's Profession,"

node0: TV program host with alternative titles like host or TV presenter.  
node1: Actor, producer, and director known as David Schwimmer.  
node2: Musician who writes, composes, and performs their own songs.  
node3: Missing.  
node4: Southeast Asian republic also called Socialist Republic of Vietnam.  
node5: Person overseeing creative and financial aspects of film production.  
node6: American record label named Jive Records.  
node7: American musician known as Chris Thile.  
node8: English-Canadian actor, director, producer, and voice actor.  
node9: American singer-songwriter and actress known as Pink.  
node10: American musician and rapper known as KRS-One.  
node11: American actress and comedian Betty White.  
node12: MTV award recognizing new artists in music videos.  
node13: MTV award for excellence in music video art direction.  
node14: Film director oversees film production as part of their job.  
node15: American actor Gregory ""Greg"" Kinnear.  
node16: Ethnic group native to England, known as the English.  
node17: Private school located in New York City.  
node18: American actress Mary Lynn Rajskub.  
node19: Chinese Special Administrative Region, Hong Kong SAR.  
node20: English comedian and actor John Cleese.  
node21: Ethnoreligious group originating from Judaism and Israelite ancestry.  
node22: Southeast Asian country officially the Lao People's Democratic Republic.  
node23: Event host with titles like MC or emcee.  
node24: Capital city of England and the United Kingdom.  
node25: Social or legal union between spouses creating kinship.  
node26: 2009 Hong Kong action film titled *Bodyguards and Assassins*.  
node27: Hong Kong actor Eric Tsang, also known as Zeng Zhiwei.  
node28: Hong Kong film award for Best Supporting Actor.  
node29: East Asian state commonly known as China.  
node30: Writer creating scripts for films, TV, or games.  
node31: Major city in Scotland, part of the UK.","node0:Entity in the knowledge graph. Entity name: television presenter, Entity alternatives: host, TV presenter, hostess, television personality, TV personality, TV host, television host. Entity description:person who introduces or hosts television programs
node1:Entity in the knowledge graph. Entity name: David Schwimmer, Entity alternatives: . Entity description:actor, producer, director
node2:Entity in the knowledge graph. Entity name: singer-songwriter, Entity alternatives: singersongwriter, singer/songwriter, singer songwriter. Entity description:musician who writes, composes and sings
node3:Missing.
node4:Entity in the knowledge graph. Entity name: Vietnam, Entity alternatives: Socialist Republic of Vietnam, Viet Nam, vn, 🇻🇳, Good Morning, Vietnam. Entity description:republic in Southeast Asia
node5:Entity in the knowledge graph. Entity name: film producer, Entity alternatives: producer, movie producer. Entity description:person who supervises the overall process, creative and financial, of making a film
node6:Entity in the knowledge graph. Entity name: Jive Records, Entity alternatives: . Entity description:American record label
node7:Entity in the knowledge graph. Entity name: Chris Thile, Entity alternatives: . Entity description:American musician
node8:Entity in the knowledge graph. Entity name: Kiefer Sutherland, Entity alternatives: Kiefer William Frederick Dempsey George Rufus Sutherland. Entity description:English-Canadian actor, director, producer, voice actor
node9:Entity in the knowledge graph. Entity name: Pink, Entity alternatives: Alecia Beth Moore, P!nk. Entity description:American singer, songwriter, and actress
node10:Entity in the knowledge graph. Entity name: KRS-One, Entity alternatives: Lawrence Krisna Parker, Teacha, Big Joe Krash. Entity description:American musician
node11:Entity in the knowledge graph. Entity name: Betty White, Entity alternatives: Betty Marion White, Betty White Ludden. Entity description:actress from the United States
node12:Entity in the knowledge graph. Entity name: MTV Video Music Award for Best New Artist, Entity alternatives: . Entity description:award
node13:Entity in the knowledge graph. Entity name: MTV Video Music Award for Best Art Direction, Entity alternatives: . Entity description:award
node14:Entity in the knowledge graph. Entity name: film director, Entity alternatives: director, movie director. Entity description:occupation of a person who directs a film
node15:Entity in the knowledge graph. Entity name: Greg Kinnear, Entity alternatives: Gregory ""Greg"" Kinnear. Entity description:American actor
node16:Entity in the knowledge graph. Entity name: English people, Entity alternatives: the English, English. Entity description:nation and ethnic group native to England
node17:Entity in the knowledge graph. Entity name: Horace Mann School, Entity alternatives: . Entity description:private school in New York City
node18:Entity in the knowledge graph. Entity name: Mary Lynn Rajskub, Entity alternatives: Rajskub. Entity description:American actress
node19:Entity in the knowledge graph. Entity name: Hong Kong, Entity alternatives: China Hong Kong, Hong Kong SAR, China, 🇭🇰, hk, Hong Kong, China, HK, Hong Kong SAR, HKG, Hong Kong Special Administrative Region, HKSAR. Entity description:Special Administrative Region of China
node20:Entity in the knowledge graph. Entity name: John Cleese, Entity alternatives: John Marwood Cleese. Entity description:English comedian and actor
node21:Entity in the knowledge graph. Entity name: Jewish people, Entity alternatives: Jewish person, Jews. Entity description:nation and an ethnoreligious group
node22:Entity in the knowledge graph. Entity name: Laos, Entity alternatives: 🇱🇦, Lao PDR, la, Lao People's Democratic Republic. Entity description:republic in Southeast Asia
node23:Entity in the knowledge graph. Entity name: master of ceremonies, Entity alternatives: emcee, compère, MC, Master of ceremonies, emcee 或 MC, compere. Entity description:official host of a staged event or similar performance
node24:Entity in the knowledge graph. Entity name: London, Entity alternatives: London, England, London, United Kingdom, London, UK. Entity description:capital of England and the United Kingdom
node25:Entity in the knowledge graph. Entity name: marriage, Entity alternatives: husband and wife, wedlock, matrimony, الزواج. Entity description:social union or legal contract between people called spouses that creates kinship
node26:Entity in the knowledge graph. Entity name: Bodyguards and Assassins, Entity alternatives: . Entity description:2009 Hong Kong film
node27:Entity in the knowledge graph. Entity name: Eric Tsang, Entity alternatives: Zeng Zhiwei, Tsang Chi Wai. Entity description:Hong Kong actor
node28:Entity in the knowledge graph. Entity name: Hong Kong Film Award for Best Supporting Actor, Entity alternatives: . Entity description:film award
node29:Entity in the knowledge graph. Entity name: People's Republic of China, Entity alternatives: PRC, 🇨🇳, CN, PR China, cn, China. Entity description:state in East Asia
node30:Entity in the knowledge graph. Entity name: screenwriter, Entity alternatives: writer, scenarist, scriptwriter. Entity description:writer who writes for TV, films, comics and games
node31:Entity in the knowledge graph. Entity name: Glasgow, Entity alternatives: Glasgow City, Glasgow, Scotland. Entity description:city in Scotland, UK; unitary authority",fb15k237,lc
"Classify the relationship between two entities denoted as source node21 and target node14 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Relationship between cohabiting, unmarried individuals.  
node1: American political satirist, writer, TV host, actor, and media critic.  
node2: Indian musician, singer, and actor.  
node3: American political satirist, writer, comedian, TV host, and actor.  
node4: American actor and writer born in 1973.  
node5: American screenwriter.  
node6: Film genre focusing on romantic relationships.  
node7: Humorist and performer known for comedic roles.  
node8: American TV period drama series and movie.  
node9: American comedy writer.  
node10: 2008 film directed by Marco Schnabel.  
node11: British film director and writer.  
node12: Occupation managing TV production processes and creative aspects.  
node13: Missing.  
node14: Emmy award for outstanding writing in comedy, variety, or music programs.  
node15: American actor and comedian in TV/film and stand-up.  
node16: Screenwriter and television producer for acclaimed series.  
node17: Acclaimed American film director, producer, and screenwriter.  
node18: Academy Award-winning actor, director, and producer in films.  
node19: Professional overseeing special effects in film/TV production.  
node20: Missing.  
node21: English comedian and TV host.  
node22: American singer-songwriter and actress.  
node23: British comedian and actor known for comedic characters.  
node24: Missing.  
node25: American screenwriter for TV series like 'Lost'.  
node26: 2012 crime thriller film directed by Oliver Stone.  
node27: American TV writer and producer.  
node28: Performer providing voices for animated or media characters.  
node29: Award-winning actress and comedian in TV (e.g., 'Seinfeld').  
node30: Actor, comedian, director, and producer in film/TV.

the connection relationship among the nodes mentioned:
 <node0, node22>,<node1, node3>,<node1, node9>,<node1, node12>,<node1, node13>,<node1, node14>,<node1, node15>,<node1, node21>,<node2, node12>,<node3, node9>,<node3, node10>,<node3, node12>,<node3, node13>,<node3, node14>,<node3, node15>,<node3, node21>,<node4, node7>,<node4, node14>,<node5, node12>,<node5, node28>,<node6, node10>,<node7, node12>,<node7, node14>,<node8, node13>,<node8, node20>,<node9, node12>,<node9, node13>,<node9, node14>,<node9, node15>,<node9, node21>,<node10, node19>,<node10, node21>,<node10, node22>,<node10, node24>,<node11, node12>,<node12, node16>,<node12, node17>,<node12, node21>,<node12, node23>,<node12, node25>,<node12, node27>,<node12, node29>,<node12, node30>,<node13, node14>,<node13, node20>,<node14, node23>,<node15, node21>,<node16, node27>,<node17, node26>,<node18, node30>,<node19, node26>,<node23, node28>,<node24, node26>,<node25, node27>,<node28, node30>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Award Nominations for Individuals; Nominated Works for Awards; Players by Sports Position in Team Roster; Organization Headquarters Country; Award Nominations Received; Countries Within Continents; Editors of a Film; Dubbing Performances in Films; Place in HUD County; TV Program Genres. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Award Nominations Received,"

node0: Relationship between cohabiting, unmarried individuals.  
node1: American political satirist, writer, TV host, actor, and media critic.  
node2: Indian musician, singer, and actor.  
node3: American political satirist, writer, comedian, TV host, and actor.  
node4: American actor and writer born in 1973.  
node5: American screenwriter.  
node6: Film genre focusing on romantic relationships.  
node7: Humorist and performer known for comedic roles.  
node8: American TV period drama series and movie.  
node9: American comedy writer.  
node10: 2008 film directed by Marco Schnabel.  
node11: British film director and writer.  
node12: Occupation managing TV production processes and creative aspects.  
node13: Missing.  
node14: Emmy award for outstanding writing in comedy, variety, or music programs.  
node15: American actor and comedian in TV/film and stand-up.  
node16: Screenwriter and television producer for acclaimed series.  
node17: Acclaimed American film director, producer, and screenwriter.  
node18: Academy Award-winning actor, director, and producer in films.  
node19: Professional overseeing special effects in film/TV production.  
node20: Missing.  
node21: English comedian and TV host.  
node22: American singer-songwriter and actress.  
node23: British comedian and actor known for comedic characters.  
node24: Missing.  
node25: American screenwriter for TV series like 'Lost'.  
node26: 2012 crime thriller film directed by Oliver Stone.  
node27: American TV writer and producer.  
node28: Performer providing voices for animated or media characters.  
node29: Award-winning actress and comedian in TV (e.g., 'Seinfeld').  
node30: Actor, comedian, director, and producer in film/TV.","node0:Entity in the knowledge graph. Entity name: domestic partnership, Entity alternatives: domestic partnership. Entity description:relationship between two people who live together but are not married
node1:Entity in the knowledge graph. Entity name: Jon Stewart, Entity alternatives: Jonathan Stuart Leibowitz, Jonathan ""Jon"" Stewart. Entity description:American political satirist, writer, television host, actor, media critic and stand-up comedian
node2:Entity in the knowledge graph. Entity name: Himesh Reshammiya, Entity alternatives: . Entity description:Indian musician, singer and actor
node3:Entity in the knowledge graph. Entity name: Stephen Colbert, Entity alternatives: Stephen Tyrone Colbert. Entity description:American political satirist, writer, comedian, television host, and actor
node4:Entity in the knowledge graph. Entity name: John Lutz, Entity alternatives: . Entity description:American actor and writer (b. 1973)
node5:Entity in the knowledge graph. Entity name: Chris Sheridan, Entity alternatives: . Entity description:American screenwriter
node6:Entity in the knowledge graph. Entity name: romance film, Entity alternatives: romance genre. Entity description:film genre
node7:Entity in the knowledge graph. Entity name: Robert Smigel, Entity alternatives: . Entity description:Humorist, performer
node8:Entity in the knowledge graph. Entity name: Mad Men, Entity alternatives: . Entity description:American television period drama series y pelicula
node9:Entity in the knowledge graph. Entity name: David Javerbaum, Entity alternatives: . Entity description:American comedy writer
node10:Entity in the knowledge graph. Entity name: The Love Guru, Entity alternatives: Love Guru. Entity description:2008 film by Marco Schnabel
node11:Entity in the knowledge graph. Entity name: Dick Clement, Entity alternatives: . Entity description:British film director and writer
node12:Entity in the knowledge graph. Entity name: television producer, Entity alternatives: TV producer, Television producers, Series Producer, Television executive producer, Producer (television), producer, Tv producer, Television Executive Producer, Television Producer. Entity description:occupation within video production for TV
node13:Missing.
node14:Entity in the knowledge graph. Entity name: Primetime Emmy Award for Outstanding Writing for a Variety, Music or Comedy Program, Entity alternatives: . Entity description:award
node15:Entity in the knowledge graph. Entity name: Wyatt Cenac, Entity alternatives: . Entity description:American actor and comedian
node16:Entity in the knowledge graph. Entity name: David Milch, Entity alternatives: . Entity description:Screenwriter, television producer
node17:Entity in the knowledge graph. Entity name: Oliver Stone, Entity alternatives: William Oliver Stone,, William Oliver Stone. Entity description:American film director, screenwriter, and producer
node18:Entity in the knowledge graph. Entity name: Jack Nicholson, Entity alternatives: John Joseph Nicholson. Entity description:American actor, film director, producer, and writer
node19:Entity in the knowledge graph. Entity name: special effects supervisor, Entity alternatives: SFX Supervisor, special effects coordinator. Entity description:individual who works on a commercial, theater, television or film set creating special effects
node20:Missing.
node21:Entity in the knowledge graph. Entity name: John Oliver, Entity alternatives: John William Oliver. Entity description:English comedian
node22:Entity in the knowledge graph. Entity name: Jessica Simpson, Entity alternatives: Jessica Ann Simpson. Entity description:American singer-songwriter and actress
node23:Entity in the knowledge graph. Entity name: Sacha Baron Cohen, Entity alternatives: Sacha Noam Baron Cohen. Entity description:English stand-up comedian, writer, actor, and voice actor
node24:Missing.
node25:Entity in the knowledge graph. Entity name: Edward Kitsis, Entity alternatives: Edward ""Eddy"" Lawrence Kitsis. Entity description:American screenwriter
node26:Entity in the knowledge graph. Entity name: Savages, Entity alternatives: . Entity description:2012 film by Oliver Stone
node27:Entity in the knowledge graph. Entity name: Elizabeth Sarnoff, Entity alternatives: Elizabeth ""Liz"" Sarnoff. Entity description:American television writer and producer
node28:Entity in the knowledge graph. Entity name: voice actor, Entity alternatives: voice artist, voice actress. Entity description:person who provides voice-overs for a character in films, animation, video games or in other media
node29:Entity in the knowledge graph. Entity name: Julia Louis-Dreyfus, Entity alternatives: Julia Scarlett Elizabeth Louis-Dreyfus, Julia Louis, Julia Louis Dreyfus. Entity description:American actress, comedian and producer
node30:Entity in the knowledge graph. Entity name: Danny DeVito, Entity alternatives: . Entity description:American actor, comedian, director and producer",fb15k237,lc
"Classify the relationship between two entities denoted as source node7 and target node22 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Musician who writes, composes, and performs their own songs.  
node1: Private research university in Evanston and Chicago, Illinois, USA.  
node2: Engineering branch optimizing complex processes/systems for efficiency.  
node3: 1969 film directed by Guy Hamilton.  
node4: American musician known for contributions to music industry.  
node5: Professional selecting and assembling sound recordings for media.  
node6: American multinational consumer goods company (P&G).  
node7: Singer, songwriter, and actress known for music and acting roles.  
node8: Grammy category for songs in films, TV, or visual media.  
node9: Versatile American actor and voice actor in films/TV.  
node10: Actress and voice actress in TV and animation.  
node11: Actress and musician known for indie pop and TV/film roles.  
node12: 2002 action film directed by Chuck Russell.  
node13: Public research university in Ames, Iowa (ISU).  
node14: Alternative pop genre with indie influences and DIY ethos.  
node15: American actress known for TV/film roles.  
node16: Pioneering industrial music musician.  
node17: Constitutional monarchy in Northern Europe (Norway).  
node18: Versatile American actress in TV/film.  
node19: American actress in film/TV productions.  
node20: American director, producer, writer, and philanthropist.  
node21: 1994 action film directed by Luis Llosa.  
node22: Federal republic in North America with 50 states.  
node23: Official currency of the United States (USD).  
node24: 2011 sci-fi film directed by Rupert Wyatt.  
node25: USA-based entertainment company (Marvel Comics/franchises).  
node26: County in Pennsylvania, USA.  
node27: Acclaimed American actor noted for film/TV roles.  
node28: Punk rock subgenre with fast tempos and rebellious themes.  
node29: County in Maine, USA.  
node30: City in Madison County, Illinois, USA.  
node31: Americans of Italian ancestry preserving cultural heritage.

the connection relationship among the nodes mentioned:
 <node0, node7>,<node0, node11>,<node1, node2>,<node1, node11>,<node1, node22>,<node1, node23>,<node2, node13>,<node3, node5>,<node3, node17>,<node3, node22>,<node3, node23>,<node4, node22>,<node6, node22>,<node6, node23>,<node7, node23>,<node8, node11>,<node9, node22>,<node9, node23>,<node10, node22>,<node11, node14>,<node11, node22>,<node11, node23>,<node12, node22>,<node12, node23>,<node13, node22>,<node13, node23>,<node15, node22>,<node15, node31>,<node16, node22>,<node16, node28>,<node17, node22>,<node17, node23>,<node18, node22>,<node18, node27>,<node19, node22>,<node19, node31>,<node20, node22>,<node20, node23>,<node21, node22>,<node21, node23>,<node22, node23>,<node22, node24>,<node22, node26>,<node22, node27>,<node22, node29>,<node22, node30>,<node22, node31>,<node23, node24>,<node23, node25>,<node23, node26>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Leadership Roles in an Organization; Film's Estimated Budget; Place of Death; Risk Factors for Diseases; Phone Service Location; Nationality of a Person; Current Clubs of World Cup Squad; Sports Position Players; Film Crew Roles; Regular Personal Appearances on TV. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Nationality of a Person,"

node0: Musician who writes, composes, and performs their own songs.  
node1: Private research university in Evanston and Chicago, Illinois, USA.  
node2: Engineering branch optimizing complex processes/systems for efficiency.  
node3: 1969 film directed by Guy Hamilton.  
node4: American musician known for contributions to music industry.  
node5: Professional selecting and assembling sound recordings for media.  
node6: American multinational consumer goods company (P&G).  
node7: Singer, songwriter, and actress known for music and acting roles.  
node8: Grammy category for songs in films, TV, or visual media.  
node9: Versatile American actor and voice actor in films/TV.  
node10: Actress and voice actress in TV and animation.  
node11: Actress and musician known for indie pop and TV/film roles.  
node12: 2002 action film directed by Chuck Russell.  
node13: Public research university in Ames, Iowa (ISU).  
node14: Alternative pop genre with indie influences and DIY ethos.  
node15: American actress known for TV/film roles.  
node16: Pioneering industrial music musician.  
node17: Constitutional monarchy in Northern Europe (Norway).  
node18: Versatile American actress in TV/film.  
node19: American actress in film/TV productions.  
node20: American director, producer, writer, and philanthropist.  
node21: 1994 action film directed by Luis Llosa.  
node22: Federal republic in North America with 50 states.  
node23: Official currency of the United States (USD).  
node24: 2011 sci-fi film directed by Rupert Wyatt.  
node25: USA-based entertainment company (Marvel Comics/franchises).  
node26: County in Pennsylvania, USA.  
node27: Acclaimed American actor noted for film/TV roles.  
node28: Punk rock subgenre with fast tempos and rebellious themes.  
node29: County in Maine, USA.  
node30: City in Madison County, Illinois, USA.  
node31: Americans of Italian ancestry preserving cultural heritage.","node0:Entity in the knowledge graph. Entity name: singer-songwriter, Entity alternatives: singersongwriter, singer/songwriter, singer songwriter. Entity description:musician who writes, composes and sings
node1:Entity in the knowledge graph. Entity name: Northwestern University, Entity alternatives: NU, Northwestern. Entity description:private research university with campuses in Evanston and Chicago, Illinois, United States
node2:Entity in the knowledge graph. Entity name: industrial engineering, Entity alternatives: Industrial engineering, IE. Entity description:branch of engineering which deals with the optimization of complex processes or systems
node3:Entity in the knowledge graph. Entity name: Battle of Britain, Entity alternatives: The Battle of Britain. Entity description:1969 film by Guy Hamilton
node4:Entity in the knowledge graph. Entity name: Ralph Burns, Entity alternatives: . Entity description:American musician
node5:Entity in the knowledge graph. Entity name: sound editor, Entity alternatives: . Entity description:creative professional responsible for selecting and assembling sound recordings
node6:Entity in the knowledge graph. Entity name: Procter & Gamble, Entity alternatives: P&G, Procter & Gamble Co.. Entity description:American multinational consumer goods company
node7:Entity in the knowledge graph. Entity name: Kelly Rowland, Entity alternatives: . Entity description:singer, songwriter, actress
node8:Entity in the knowledge graph. Entity name: Grammy Award for Best Song Written for a Motion Picture, Television or Other Visual Media, Entity alternatives: . Entity description:award
node9:Entity in the knowledge graph. Entity name: Frank Welker, Entity alternatives: Franklin Wendell ""Frank"" Welker, Franklin Wendell Welker. Entity description:American actor
node10:Entity in the knowledge graph. Entity name: Lacey Chabert, Entity alternatives: Lacey Nicole Chabert. Entity description:American actress and voice actress
node11:Entity in the knowledge graph. Entity name: Zooey Deschanel, Entity alternatives: Zooey Claire Deschanel. Entity description:American actress, musician, and singer-songwriter
node12:Entity in the knowledge graph. Entity name: The Scorpion King, Entity alternatives: '' The Scorpion King '', Scorpion King. Entity description:2002 film by Chuck Russell
node13:Entity in the knowledge graph. Entity name: Iowa State University, Entity alternatives: ISU, IAState, Iowa State College, Iowa State University of Science and Technology, Iowa State. Entity description:public research university in Ames, Iowa, United States
node14:Entity in the knowledge graph. Entity name: indie pop, Entity alternatives: indiepop, alt-pop, indie-pop, indie pop music, alt pop, alternative pop. Entity description:genre of alternative pop music
node15:Entity in the knowledge graph. Entity name: Rachel Bilson, Entity alternatives: Rachel Sarah Bilson. Entity description:American actress
node16:Entity in the knowledge graph. Entity name: Al Jourgensen, Entity alternatives: . Entity description:musician
node17:Entity in the knowledge graph. Entity name: Norway, Entity alternatives: Norwegen‏, Kingdom of Norway, Norvège‏, Noreg, NO, 🇳🇴, Norge, no, NOR. Entity description:constitutional monarchy in Northern Europe
node18:Entity in the knowledge graph. Entity name: Mary McCormack, Entity alternatives: Mary Catherine McCormack. Entity description:American actress
node19:Entity in the knowledge graph. Entity name: Carla Gugino, Entity alternatives: . Entity description:American actress
node20:Entity in the knowledge graph. Entity name: Sam Simon, Entity alternatives: Samuel Michael Simon. Entity description:American director, producer, writer, boxing manager and philanthropist
node21:Entity in the knowledge graph. Entity name: The Specialist, Entity alternatives: Specialist. Entity description:1994 film by Luis Llosa
node22:Entity in the knowledge graph. Entity name: United States of America, Entity alternatives: U.S.A., the United States of America, the States, US, USA, America, the US, 🇺🇸, the United States, United States, U.S.. Entity description:federal republic in North America
node23:Entity in the knowledge graph. Entity name: United States dollar, Entity alternatives: American dollar, $, USD, US dollar, US$. Entity description:currency of the United States of America
node24:Entity in the knowledge graph. Entity name: Rise of the Planet of the Apes, Entity alternatives: . Entity description:2011 science fiction film by Rupert Wyatt
node25:Entity in the knowledge graph. Entity name: Marvel Entertainment, Entity alternatives: Marvel Entertainment LLC, Toy Biz, Marvel Enterprises. Entity description:entertainment company in the USA
node26:Entity in the knowledge graph. Entity name: Clinton County, Entity alternatives: Clinton County, Pennsylvania. Entity description:county in Pennsylvania, United States
node27:Entity in the knowledge graph. Entity name: Martin Sheen, Entity alternatives: Ramón Antonio Gerardo Estévez, Ramon Antonio Gerardo Estevez. Entity description:American actor
node28:Entity in the knowledge graph. Entity name: hardcore punk, Entity alternatives: hXc, Punk/HC, hardcore. Entity description:subgenere of punk rock
node29:Entity in the knowledge graph. Entity name: York County, Entity alternatives: York County, Maine. Entity description:county in Maine, United States
node30:Entity in the knowledge graph. Entity name: Alton, Entity alternatives: . Entity description:city in Madison County, Illinois, United States
node31:Entity in the knowledge graph. Entity name: Italian American, Entity alternatives: . Entity description:United States citizens of Italian ancestry",fb15k237,lc
"Classify the relationship between two entities denoted as source node20 and target node7 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: American Motown vocal group with alternative name Temptations.  
node1: American singer-songwriter and businessman (no alternatives).  
node2: American comedian, actor, and producer with multiple alternative names.  
node3: American rock duo (no alternatives).  
node4: Scottish musician born John Symon Asher Bruce.  
node5: American singer-actress known as ""The Divine Miss M.""  
node6: American musician (no alternative names).  
node7: American singer-songwriter and actress with alternative names like Madonna Louise Ciccone.  
node8: British singer-songwriter known as Seal, full name Henry Olusegun Adeola morocho.  
node9: American singer-songwriter born Mac Rebennack in 1940 with multiple aliases.  
node10: Percussion instrument called cowbell.  
node11: Electrified string instrument using pickups to amplify sound.  
node12: British band known as ELO.  
node13: American record producer and songwriter known as The-Dream.  
node14: U.S. city nicknamed ""LA"" or ""City of Angels"" with many aliases.  
node15: Stringed instrument played with fingers or a pick.  
node16: Music genre combining electronic and dance elements (Eurotrance).  
node17: English musician and producer known as William Orbit.  
node18: American singer-songwriter with former names like Katheryn Hudson.  
node19: American singer with real name Thaddis Harrell.  
node20: American singer-actress with stage names like Lady GaGa and Stefani Germanotta.  
node21: American rock band formed by Frank Zappa (no alternatives).  
node22: Grammy category for dance/electronic music albums.  
node23: Music genre originating from 1950s rock and roll.  
node24: Music genre abbreviated as R&B, focusing on rhythm.  
node25: Guitar technique using a slide for steel guitars.  
node26: 2000 film directed by John Schlesinger.  
node27: Medical term for loss of appetite.  
node28: American musician and songwriter of Simon & Garfunkel fame.  
node29: American singer and part of the Jackson family (Jackson5).  
node30: U.S. citizens of Italian heritage.

the connection relationship among the nodes mentioned:
 <node0, node24>,<node1, node15>,<node1, node23>,<node2, node7>,<node3, node15>,<node4, node15>,<node5, node23>,<node6, node15>,<node7, node10>,<node7, node14>,<node7, node15>,<node7, node17>,<node7, node22>,<node7, node23>,<node7, node26>,<node7, node30>,<node8, node14>,<node8, node15>,<node8, node23>,<node8, node24>,<node9, node11>,<node9, node14>,<node9, node15>,<node9, node24>,<node10, node11>,<node10, node15>,<node11, node15>,<node11, node25>,<node11, node28>,<node12, node15>,<node12, node23>,<node13, node19>,<node13, node23>,<node13, node24>,<node14, node18>,<node15, node17>,<node15, node18>,<node15, node21>,<node15, node25>,<node15, node28>,<node16, node20>,<node18, node19>,<node18, node20>,<node18, node23>,<node19, node23>,<node20, node22>,<node20, node23>,<node20, node27>,<node20, node30>,<node21, node25>,<node23, node24>,<node23, node29>,<node24, node29>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Artist Contributions to Music; Subject of Films; Government Positions Held During Legislative Sessions; Breakups Among Celebrities; Celebrities Who Dated; Climate of a Travel Destination; Net Worth in Currency; Influences on Individuals or Works; Creator of a TV Program; Awards Won by a Work. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Influences on Individuals or Works,"

node0: American Motown vocal group with alternative name Temptations.  
node1: American singer-songwriter and businessman (no alternatives).  
node2: American comedian, actor, and producer with multiple alternative names.  
node3: American rock duo (no alternatives).  
node4: Scottish musician born John Symon Asher Bruce.  
node5: American singer-actress known as ""The Divine Miss M.""  
node6: American musician (no alternative names).  
node7: American singer-songwriter and actress with alternative names like Madonna Louise Ciccone.  
node8: British singer-songwriter known as Seal, full name Henry Olusegun Adeola morocho.  
node9: American singer-songwriter born Mac Rebennack in 1940 with multiple aliases.  
node10: Percussion instrument called cowbell.  
node11: Electrified string instrument using pickups to amplify sound.  
node12: British band known as ELO.  
node13: American record producer and songwriter known as The-Dream.  
node14: U.S. city nicknamed ""LA"" or ""City of Angels"" with many aliases.  
node15: Stringed instrument played with fingers or a pick.  
node16: Music genre combining electronic and dance elements (Eurotrance).  
node17: English musician and producer known as William Orbit.  
node18: American singer-songwriter with former names like Katheryn Hudson.  
node19: American singer with real name Thaddis Harrell.  
node20: American singer-actress with stage names like Lady GaGa and Stefani Germanotta.  
node21: American rock band formed by Frank Zappa (no alternatives).  
node22: Grammy category for dance/electronic music albums.  
node23: Music genre originating from 1950s rock and roll.  
node24: Music genre abbreviated as R&B, focusing on rhythm.  
node25: Guitar technique using a slide for steel guitars.  
node26: 2000 film directed by John Schlesinger.  
node27: Medical term for loss of appetite.  
node28: American musician and songwriter of Simon & Garfunkel fame.  
node29: American singer and part of the Jackson family (Jackson5).  
node30: U.S. citizens of Italian heritage.","node0:Entity in the knowledge graph. Entity name: The Temptations, Entity alternatives: Temptations. Entity description:American Motown vocal group
node1:Entity in the knowledge graph. Entity name: Jimmy Buffett, Entity alternatives: . Entity description:American singer–songwriter and businessman
node2:Entity in the knowledge graph. Entity name: Chris Rock, Entity alternatives: Cris Rock, Lil penny, Christopher Rock, Christopher Julius Rock III. Entity description:American comedian, actor, screenwriter, television producer, film producer, and director
node3:Entity in the knowledge graph. Entity name: The White Stripes, Entity alternatives: . Entity description:American rock duo
node4:Entity in the knowledge graph. Entity name: Jack Bruce, Entity alternatives: John Symon Asher Bruce. Entity description:Scottish musician
node5:Entity in the knowledge graph. Entity name: Bette Midler, Entity alternatives: The Divine Miss M. Entity description:American singer-songwriter, actress, comedian and film producer
node6:Entity in the knowledge graph. Entity name: Sam Bush, Entity alternatives: . Entity description:American musician
node7:Entity in the knowledge graph. Entity name: Madonna, Entity alternatives: Madonna Louise Ciccone, Madonna Louise Veronica Ciccone. Entity description:American singer, songwriter, and actress
node8:Entity in the knowledge graph. Entity name: Seal, Entity alternatives: Henry Olusegun Adeola morocho. Entity description:British singer-songwriter
node9:Entity in the knowledge graph. Entity name: Dr. John, Entity alternatives: Mac Rebennack, Dr. John Creaux, Dr. John the Night Tripper, Doctor John, Malcolm John Rebennack. Entity description:Born 1940; American singer-songwriter, pianist and guitarist
node10:Entity in the knowledge graph. Entity name: cowbell, Entity alternatives: . Entity description:musical instrument
node11:Entity in the knowledge graph. Entity name: electric guitar, Entity alternatives: . Entity description:electrified guitar; fretted stringed instrument with a neck and body that uses a pickup to convert the vibration of its strings into electrical signals
node12:Entity in the knowledge graph. Entity name: Electric Light Orchestra, Entity alternatives: ELO. Entity description:British band
node13:Entity in the knowledge graph. Entity name: The-Dream, Entity alternatives: Terius Youngdell Nash. Entity description:American singer-songwriter and record producer
node14:Entity in the knowledge graph. Entity name: Los Angeles, Entity alternatives: L.A., Pink City, LA, California, Tinsel Town, City of Angels, La La Land, LA, The town of Our Lady the Queen of the Angels of the Little Portion, Los Angeles, California, City of Los Angeles. Entity description:county seat of Los Angeles County, United States
node15:Entity in the knowledge graph. Entity name: guitar, Entity alternatives: . Entity description:type of string instrument
node16:Entity in the knowledge graph. Entity name: Eurodance, Entity alternatives: Eurotrance. Entity description:music genre
node17:Entity in the knowledge graph. Entity name: William Orbit, Entity alternatives: . Entity description:English musician, composer and record producer
node18:Entity in the knowledge graph. Entity name: Katy Perry, Entity alternatives: Katheryn Elizabeth ""Katy"" Hudson, Katheryn Elizabeth Hudson Perry, Katy Perry, Katheryn Hudson, Katy Hudson, Katheryn Elizabeth Hudson. Entity description:American singer, songwriter and actress
node19:Entity in the knowledge graph. Entity name: Kuk Harrell, Entity alternatives: Thaddis Harrell. Entity description:American singer
node20:Entity in the knowledge graph. Entity name: Lady Gaga, Entity alternatives: Lady GaGa, Mary Jane Holland, Joanne, Jo Calderone, Goodness of Love, Stefani Joanne Angelina Germanotta Bisett, Gaga, Stefani Germanotta, Mother Monster, Venus. Entity description:American singer, songwriter, and actress
node21:Entity in the knowledge graph. Entity name: The Mothers of Invention, Entity alternatives: . Entity description:band
node22:Entity in the knowledge graph. Entity name: Grammy Award for Best Dance/Electronic Album, Entity alternatives: Grammy Award for Best Dance/Electronica Album. Entity description:music award
node23:Entity in the knowledge graph. Entity name: pop music, Entity alternatives: pop. Entity description:genre of popular music which originated in its modern form in the late-1950s, deriving from rock and roll
node24:Entity in the knowledge graph. Entity name: rhythm and blues, Entity alternatives: R&B, RNB, R and B, RnB. Entity description:music genre
node25:Entity in the knowledge graph. Entity name: slide, Entity alternatives: bottleneck. Entity description:guitar technique for steelguitars
node26:Entity in the knowledge graph. Entity name: The Next Best Thing, Entity alternatives: Next Best Thing. Entity description:2000 film by John Schlesinger
node27:Entity in the knowledge graph. Entity name: anorexia, Entity alternatives: loss of appetite. Entity description:medical symptom
node28:Entity in the knowledge graph. Entity name: Paul Simon, Entity alternatives: Paul Frederic Simon. Entity description:American musician, songwriter and producer
node29:Entity in the knowledge graph. Entity name: Janet Jackson, Entity alternatives: Jackson5, Janet Damita Jo Jackson. Entity description:singer from the United States
node30:Entity in the knowledge graph. Entity name: Italian American, Entity alternatives: . Entity description:United States citizens of Italian ancestry",fb15k237,lc
"Classify the relationship between two entities denoted as source node29 and target node25 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: American guitarist, singer, and composer (Ryland Peter Cooder).  
node1: American television series titled ""Curb Your Enthusiasm"".  
node2: American singer and actress Irene Cara.  
node3: Voice actor Billy West.  
node4: American singer Fergie (Stacy Ferguson).  
node5: American musician, songwriter, and producer Danger Mouse.  
node6: Rapper David Banner.  
node7: Greek pianist Yanni (Giannis Chrysomallis).  
node8: British-American actor and writer Christopher Guest (Baron Haden-Guest).  
node9: Nation/ethnic group native to Italy (Italiani).  
node10: American musician Charlie Daniels (Charles Edward Daniels).  
node11: Musical theatre composer Stephen Schwartz.  
node12: American actor Jason Biggs (Jason Matthew Biggs).  
node13: Band member singing main vocal parts (lead singer).  
node14: Missing.  
node15: Rapper Fabolous (John David Jackson).  
node16: Indian actor Ajay Devgan.  
node17: British composer Harry Gregson-Williams.  
node18: Biological male category (non-human).  
node19: Actor Rainn Wilson (Rainn Dietrich Wilson).  
node20: Indian actor and scriptwriter Kader Khan.  
node21: Missing.  
node22: American actor Leslie David Baker.  
node23: Missing.  
node24: Writer creating scripts for films, TV, etc.  
node25: Music producer managing recording sessions.  
node26: American cinematographer Dean Cundey.  
node27: Monotheistic religion based on the Quran (founded by Muhammad).  
node28: Canadian-American actor Michael J. Fox (Michael Andrew Fox).  
node29: American singer-actor Justin Timberlake.  
node30: 1990 film ""Dances with Wolves"" directed by Kevin Costner.  
node31: Canadian actor Graham Greene.

the connection relationship among the nodes mentioned:
 <node0, node18>,<node0, node25>,<node1, node23>,<node1, node28>,<node2, node25>,<node3, node18>,<node4, node29>,<node5, node18>,<node5, node25>,<node6, node15>,<node6, node18>,<node6, node25>,<node7, node18>,<node7, node25>,<node8, node13>,<node8, node14>,<node8, node18>,<node8, node21>,<node8, node24>,<node9, node12>,<node10, node18>,<node11, node18>,<node11, node21>,<node11, node25>,<node12, node18>,<node15, node18>,<node15, node25>,<node16, node18>,<node17, node18>,<node17, node25>,<node18, node19>,<node18, node20>,<node18, node22>,<node18, node26>,<node18, node28>,<node18, node29>,<node18, node31>,<node19, node22>,<node19, node23>,<node19, node24>,<node20, node24>,<node20, node27>,<node22, node23>,<node30, node31>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Baseball Team Statistics by Season; Operating Income of a Business; Administrative Divisions and Their Capitals; Country of a Bibs Location; Religion of a Person; Artists in Broadcast Content; Country of an Administrative Division; Person's Profession; TV Programs Produced by a Producer; TV Program Genres. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Person's Profession,"

node0: American guitarist, singer, and composer (Ryland Peter Cooder).  
node1: American television series titled ""Curb Your Enthusiasm"".  
node2: American singer and actress Irene Cara.  
node3: Voice actor Billy West.  
node4: American singer Fergie (Stacy Ferguson).  
node5: American musician, songwriter, and producer Danger Mouse.  
node6: Rapper David Banner.  
node7: Greek pianist Yanni (Giannis Chrysomallis).  
node8: British-American actor and writer Christopher Guest (Baron Haden-Guest).  
node9: Nation/ethnic group native to Italy (Italiani).  
node10: American musician Charlie Daniels (Charles Edward Daniels).  
node11: Musical theatre composer Stephen Schwartz.  
node12: American actor Jason Biggs (Jason Matthew Biggs).  
node13: Band member singing main vocal parts (lead singer).  
node14: Missing.  
node15: Rapper Fabolous (John David Jackson).  
node16: Indian actor Ajay Devgan.  
node17: British composer Harry Gregson-Williams.  
node18: Biological male category (non-human).  
node19: Actor Rainn Wilson (Rainn Dietrich Wilson).  
node20: Indian actor and scriptwriter Kader Khan.  
node21: Missing.  
node22: American actor Leslie David Baker.  
node23: Missing.  
node24: Writer creating scripts for films, TV, etc.  
node25: Music producer managing recording sessions.  
node26: American cinematographer Dean Cundey.  
node27: Monotheistic religion based on the Quran (founded by Muhammad).  
node28: Canadian-American actor Michael J. Fox (Michael Andrew Fox).  
node29: American singer-actor Justin Timberlake.  
node30: 1990 film ""Dances with Wolves"" directed by Kevin Costner.  
node31: Canadian actor Graham Greene.","node0:Entity in the knowledge graph. Entity name: Ry Cooder, Entity alternatives: Ryland Peter Cooder. Entity description:American guitarist, singer and composer
node1:Entity in the knowledge graph. Entity name: Curb Your Enthusiasm, Entity alternatives: . Entity description:American television series
node2:Entity in the knowledge graph. Entity name: Irene Cara, Entity alternatives: . Entity description:American singer and actress
node3:Entity in the knowledge graph. Entity name: Billy West, Entity alternatives: . Entity description:voice actor
node4:Entity in the knowledge graph. Entity name: Fergie, Entity alternatives: Hot Stuff, Stacy Ferguson, Stacy Ann Ferguson, Fergie Duhamel. Entity description:singer from the United States
node5:Entity in the knowledge graph. Entity name: Danger Mouse, Entity alternatives: . Entity description:American musician, songwriter and producer
node6:Entity in the knowledge graph. Entity name: David Banner, Entity alternatives: . Entity description:American rapper
node7:Entity in the knowledge graph. Entity name: Yanni, Entity alternatives: Giannis Chrysomallis. Entity description:Greek pianist, keyboardist, composer, and music producer
node8:Entity in the knowledge graph. Entity name: Christopher Guest, Entity alternatives: Christopher Haden-Guest, 5th Baron Haden-Guest. Entity description:British and American screenwriter, comedian, musician, director, and actor
node9:Entity in the knowledge graph. Entity name: Italians, Entity alternatives: Italiani. Entity description:nation and ethnic group native to Italy
node10:Entity in the knowledge graph. Entity name: Charlie Daniels, Entity alternatives: Charles Edward Daniels. Entity description:American singer and musician
node11:Entity in the knowledge graph. Entity name: Stephen Schwartz, Entity alternatives: . Entity description:American musical theatre lyricist and composer
node12:Entity in the knowledge graph. Entity name: Jason Biggs, Entity alternatives: Jason Matthew Biggs. Entity description:American actor
node13:Entity in the knowledge graph. Entity name: lead vocalist, Entity alternatives: lead vocal, lead singer. Entity description:member of a band who sings the main solo vocal portions of a song
node14:Missing.
node15:Entity in the knowledge graph. Entity name: Fabolous, Entity alternatives: John David Jackson. Entity description:rapper, songwriter
node16:Entity in the knowledge graph. Entity name: Ajay Devgan, Entity alternatives: . Entity description:Indian actor
node17:Entity in the knowledge graph. Entity name: Harry Gregson-Williams, Entity alternatives: . Entity description:British composer
node18:Entity in the knowledge graph. Entity name: male organism, Entity alternatives: male creature, male, sex — male, ♂, male animal. Entity description:determined sex of an animal or plant. Use Q6581097 for a male human
node19:Entity in the knowledge graph. Entity name: Rainn Wilson, Entity alternatives: Rainn Dietrich Wilson. Entity description:actor
node20:Entity in the knowledge graph. Entity name: Kader Khan, Entity alternatives: . Entity description:Indian actor, script and dialogue writer
node21:Missing.
node22:Entity in the knowledge graph. Entity name: Leslie David Baker, Entity alternatives: . Entity description:American actor
node23:Missing.
node24:Entity in the knowledge graph. Entity name: screenwriter, Entity alternatives: writer, scenarist, scriptwriter. Entity description:writer who writes for TV, films, comics and games
node25:Entity in the knowledge graph. Entity name: record producer, Entity alternatives: music producer, Record producer. Entity description:individual who oversees and manages the recording of an artist's music
node26:Entity in the knowledge graph. Entity name: Dean Cundey, Entity alternatives: . Entity description:American cinematographer
node27:Entity in the knowledge graph. Entity name: Islam, Entity alternatives: Muslim religion, Mohammedanism, Islamic religion. Entity description:monotheistic religion founded by Muhammad and based on the teachings of the Quran
node28:Entity in the knowledge graph. Entity name: Michael J. Fox, Entity alternatives: Michael Andrew Fox. Entity description:Canadian-American actor
node29:Entity in the knowledge graph. Entity name: Justin Timberlake, Entity alternatives: Justin Randall Timberlake. Entity description:American singer and actor
node30:Entity in the knowledge graph. Entity name: Dances with Wolves, Entity alternatives: . Entity description:1990 film by Kevin Costner
node31:Entity in the knowledge graph. Entity name: Graham Greene, Entity alternatives: . Entity description:Canadian actor",fb15k237,lc
"Classify the relationship between two entities denoted as source node11 and target node20 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: 1986 film directed by Jim Henson about a labyrinth adventure.  
node1: 12th Winter Olympics held in Innsbruck, Austria, 1976.  
node2: British multinational venture capital conglomerate.  
node3: Films produced outside major studio systems.  
node4: 2006 British drama directed by Shane Meadows on 1980s youth.  
node5: Saturn Award category for film writing.  
node6: 1939 musical film based on L. Frank Baum's novel.  
node7: Films dramatizing real people's lives.  
node8: 2006 James Bond film directed by Martin Campbell.  
node9: American film director, producer, and screenwriter.  
node10: 2006 fantasy adventure sequel in Pirates of the Caribbean series.  
node11: 2011 Pixar spy comedy with cars as characters.  
node12: 2009 comedy-drama exploring love's complexities.  
node13: 2004 biographical drama about Howard Hughes' life.  
node14: Missing.  
node15: 2007 animated film based on ""The Simpsons"" TV show.  
node16: 1997 biographical film on the Dalai Lama by Scorsese.  
node17: Southwestern European nation, Portuguese Republic.  
node18: 2009 Swedish thriller about investigative journalism.  
node19: American producer, writer, and philanthropist.  
node20: Continuous media streamed to users by providers.  
node21: 2006 British drama about Uganda's Idi Amin.  
node22: 2009 drama directed by Tom Ford on a gay man's life.  
node23: European country including England, Scotland, and Wales.  
node24: 2010 biopic on poet Allen Ginsberg's life.  
node25: 2002 drama film about interconnected women's lives.  
node26: 2011 comedy-drama directed by Tom Hanks.  
node27: 1966 historical drama about Sir Thomas More.  
node28: 2007 family fantasy film about a Scottish boy and a dinosaur-like creature.  
node29: 1990 crime film about NYC mob life.  
node30: 2000 Summer Olympics held in Sydney, Australia.  
node31: City in South Yorkshire, England, named Sheffield.

the connection relationship among the nodes mentioned:
 <node0, node17>,<node0, node20>,<node0, node23>,<node1, node23>,<node2, node23>,<node3, node4>,<node3, node24>,<node4, node17>,<node4, node23>,<node5, node8>,<node6, node20>,<node6, node23>,<node7, node13>,<node7, node16>,<node7, node21>,<node7, node24>,<node7, node27>,<node7, node29>,<node8, node14>,<node8, node23>,<node9, node15>,<node9, node19>,<node10, node20>,<node10, node23>,<node11, node17>,<node11, node23>,<node12, node17>,<node12, node20>,<node12, node23>,<node13, node14>,<node14, node21>,<node14, node22>,<node14, node29>,<node15, node19>,<node15, node20>,<node15, node23>,<node17, node24>,<node17, node30>,<node18, node20>,<node18, node23>,<node20, node22>,<node20, node24>,<node20, node26>,<node20, node28>,<node21, node23>,<node22, node23>,<node23, node24>,<node23, node25>,<node23, node26>,<node23, node27>,<node23, node28>,<node23, node30>,<node23, node31>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Celebrity Impersonations; Marriage Unions and Their Locations; Honored Individuals at an Award Ceremony; Place in HUD County; Creator of a TV Program; Film Distribution Medium; Parent Genre of Music; Registration of Non-Profit Organizations; TV Programs Produced by a Producer; Guest Performances in Music. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Film Distribution Medium,"

node0: 1986 film directed by Jim Henson about a labyrinth adventure.  
node1: 12th Winter Olympics held in Innsbruck, Austria, 1976.  
node2: British multinational venture capital conglomerate.  
node3: Films produced outside major studio systems.  
node4: 2006 British drama directed by Shane Meadows on 1980s youth.  
node5: Saturn Award category for film writing.  
node6: 1939 musical film based on L. Frank Baum's novel.  
node7: Films dramatizing real people's lives.  
node8: 2006 James Bond film directed by Martin Campbell.  
node9: American film director, producer, and screenwriter.  
node10: 2006 fantasy adventure sequel in Pirates of the Caribbean series.  
node11: 2011 Pixar spy comedy with cars as characters.  
node12: 2009 comedy-drama exploring love's complexities.  
node13: 2004 biographical drama about Howard Hughes' life.  
node14: Missing.  
node15: 2007 animated film based on ""The Simpsons"" TV show.  
node16: 1997 biographical film on the Dalai Lama by Scorsese.  
node17: Southwestern European nation, Portuguese Republic.  
node18: 2009 Swedish thriller about investigative journalism.  
node19: American producer, writer, and philanthropist.  
node20: Continuous media streamed to users by providers.  
node21: 2006 British drama about Uganda's Idi Amin.  
node22: 2009 drama directed by Tom Ford on a gay man's life.  
node23: European country including England, Scotland, and Wales.  
node24: 2010 biopic on poet Allen Ginsberg's life.  
node25: 2002 drama film about interconnected women's lives.  
node26: 2011 comedy-drama directed by Tom Hanks.  
node27: 1966 historical drama about Sir Thomas More.  
node28: 2007 family fantasy film about a Scottish boy and a dinosaur-like creature.  
node29: 1990 crime film about NYC mob life.  
node30: 2000 Summer Olympics held in Sydney, Australia.  
node31: City in South Yorkshire, England, named Sheffield.","node0:Entity in the knowledge graph. Entity name: Labyrinth, Entity alternatives: . Entity description:1986 film directed by Jim Henson
node1:Entity in the knowledge graph. Entity name: 1976 Winter Olympics, Entity alternatives: Innsbruck 1976, XII Olympic Winter Games. Entity description:12th edition of Winter Olympics, held in Innsbruck (Austria) in 1976
node2:Entity in the knowledge graph. Entity name: Virgin Group, Entity alternatives: Virgin Group Ltd.. Entity description:British multinational branded venture capital conglomerate
node3:Entity in the knowledge graph. Entity name: independent film, Entity alternatives: independent movie, indie movie, indie film. Entity description:film production mostly or completely done outside of the major film studio system
node4:Entity in the knowledge graph. Entity name: This Is England, Entity alternatives: . Entity description:2006 British drama film written and directed by Shane Meadows
node5:Entity in the knowledge graph. Entity name: Saturn Award for Best Writing, Entity alternatives: . Entity description:award
node6:Entity in the knowledge graph. Entity name: The Wizard of Oz, Entity alternatives: Wizard of Oz. Entity description:1939 movie based on the book by L. Frank Baum
node7:Entity in the knowledge graph. Entity name: biographical film, Entity alternatives: biographical picture, biography movie, biographical movie, biography film, biopic. Entity description:film genre; dramatizes the life of an actual person or people
node8:Entity in the knowledge graph. Entity name: Casino Royale, Entity alternatives: . Entity description:2006 James Bond film by Martin Campbell
node9:Entity in the knowledge graph. Entity name: James L. Brooks, Entity alternatives: James Lawrence Brooks. Entity description:American director, producer and screenwriter
node10:Entity in the knowledge graph. Entity name: Pirates of the Caribbean: Dead Man's Chest, Entity alternatives: . Entity description:2006 fantasy adventure movie
node11:Entity in the knowledge graph. Entity name: Cars 2, Entity alternatives: . Entity description:2011 American computer-animated action comedy spy film produced by Pixar Animation Studios
node12:Entity in the knowledge graph. Entity name: (500) Days of Summer, Entity alternatives: 500 Days of Summer. Entity description:2009 American comedy drama film
node13:Entity in the knowledge graph. Entity name: The Aviator, Entity alternatives: Aviator. Entity description:2004 American biographical drama film
node14:Missing.
node15:Entity in the knowledge graph. Entity name: The Simpsons Movie, Entity alternatives: Simpsons Movie. Entity description:2007 film directed by David Silverman
node16:Entity in the knowledge graph. Entity name: Kundun, Entity alternatives: . Entity description:1997 film by Martin Scorsese
node17:Entity in the knowledge graph. Entity name: Portugal, Entity alternatives: PT, 🇵🇹, pt, Portuguese Republic. Entity description:republic in Southwestern Europe
node18:Entity in the knowledge graph. Entity name: The Girl with the Dragon Tattoo, Entity alternatives: Girl with the Dragon Tattoo. Entity description:2009 Swedish drama thriller by Niels Arden Oplev
node19:Entity in the knowledge graph. Entity name: Sam Simon, Entity alternatives: Samuel Michael Simon. Entity description:American director, producer, writer, boxing manager and philanthropist
node20:Entity in the knowledge graph. Entity name: streaming media, Entity alternatives: . Entity description:continuous multimedia operated and presented to users by a provider
node21:Entity in the knowledge graph. Entity name: The Last King of Scotland, Entity alternatives: Last King of Scotland. Entity description:2006 British drama film
node22:Entity in the knowledge graph. Entity name: A Single Man, Entity alternatives: Single Man, A single man, A Single Man (film), A Single Man (2009 film). Entity description:2009 film by Tom Ford
node23:Entity in the knowledge graph. Entity name: United Kingdom, Entity alternatives: UK, GB, 🇬🇧, United Kingdom of Great Britain and Northern Ireland, GBR, Great Britain. Entity description:country in Europe
node24:Entity in the knowledge graph. Entity name: Howl, Entity alternatives: . Entity description:2010 film by Jeffrey Friedman, Rob Epstein
node25:Entity in the knowledge graph. Entity name: The Hours, Entity alternatives: Hours, '' The Hours ''. Entity description:2002 drama film
node26:Entity in the knowledge graph. Entity name: Larry Crowne, Entity alternatives: . Entity description:2011 film by Tom Hanks
node27:Entity in the knowledge graph. Entity name: A Man for All Seasons, Entity alternatives: '' A Man for All Seasons '', Man for All Seasons. Entity description:1966 film by Fred Zinnemann
node28:Entity in the knowledge graph. Entity name: The Water Horse, Entity alternatives: Water Horse. Entity description:2007 film by Jay Russell
node29:Entity in the knowledge graph. Entity name: Goodfellas, Entity alternatives: '' Goodfellas ''. Entity description:1990 American crime film
node30:Entity in the knowledge graph. Entity name: 2000 Summer Olympics, Entity alternatives: Games of the XXVII Olympics, Sydney 2000. Entity description:games of the XXVII Olympiad, celebrated in Sydney in 2000
node31:Entity in the knowledge graph. Entity name: Sheffield, Entity alternatives: Sheffield, England, Sheffield, South Yorkshire. Entity description:city in South Yorkshire, England",fb15k237,lc
"Classify the relationship between two entities denoted as source node3 and target node14 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Republic of Croatia, Southeast European country with names like HR, HRV, 🇭🇷.  
node1: Canadian film director David Cronenberg, known for works like *Dead Ringers*.  
node2: 2007 film *I Know Who Killed Me* directed by Chris Sivertson.  
node3: 1979 film *Murder by Decree* by Bob Clark, starring historical figures.  
node4: 1974 comedy *Young Frankenstein* starring Gene Wilder, directed by Mel Brooks.  
node5: 2002 film *Mr. Deeds* directed by Steven Brill, comedic legal drama.  
node6: Finland (Suomi, 🇫🇮), Northern European country with ""Land of Thousand Lakes"" nickname.  
node7: Olympic sport of fencing, involves blade weapons and precision.  
node8: American film studio Morgan Creek Productions, produces movies and TV.  
node9: English actor Harry Andrews, also known as Harry Fleetwood Andrews.  
node10: Missing entity in knowledge graph.  
node11: 2010 psychological thriller *Shutter Island* directed by Martin Scorsese.  
node12: 1988 Cronenberg film *Dead Ringers* about twin gynecologists.  
node13: British actress Emily Mortimer, known for diverse film roles.  
node14: Horror film genre, includes scary, suspenseful movies like *Alien*.  
node15: American film producer James G. Robinson, works in Hollywood.  
node16: 2009 romantic comedy *The Proposal* starring Sandra Bullock.  
node17: Director Martin Scorsese, noted for films like *Shutter Island*, spelled Skorseze sometimes.  
node18: Missing entity in knowledge graph.  
node19: 2012 horror *The Cabin in the Woods* parodying slasher tropes.  
node20: Pamela Anderson, Canadian-American model and actress from *Baywatch*.  
node21: 1979 sci-fi horror *Alien* by Ridley Scott, influential franchise starter.  
node22: Cinematographer Robert Richardson, collaborates with major directors.  
node23: 2002 French film *8 Women* about murder in a mansion.  
node24: 2003 horror remake *The Texas Chainsaw Massacre*.  
node25: Producer Brad Grey, former Paramount Pictures CEO.  
node26: Actress Sharon Stone, iconic in *Basic Instinct* and *Casino*.  
node27: 2011 film *Wuthering Heights* adaptation directed by Andrea Arnold.  
node28: 1977 drama *Equus* based on Peter Shaffer’s play, stars Peter Firth.  
node29: 2007 post-apocalyptic *I Am Legend* with Will Smith.  
node30: 2000 sci-fi *Battlefield Earth* criticized as a box-office flop.  
node31: Canadian actor Donald Sutherland, in *Cliffhanger* and *Equus*.

the connection relationship among the nodes mentioned:
 <node0, node6>,<node0, node7>,<node0, node16>,<node0, node19>,<node1, node12>,<node2, node10>,<node2, node14>,<node3, node6>,<node3, node31>,<node4, node14>,<node5, node10>,<node6, node16>,<node6, node19>,<node6, node20>,<node6, node21>,<node6, node23>,<node6, node27>,<node8, node12>,<node8, node15>,<node8, node30>,<node9, node28>,<node10, node20>,<node10, node26>,<node11, node13>,<node11, node14>,<node11, node17>,<node11, node22>,<node12, node14>,<node12, node15>,<node14, node18>,<node14, node19>,<node14, node21>,<node14, node24>,<node14, node28>,<node14, node29>,<node17, node25>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Colors of an Educational Institution; Film Locations Featured; Specializations Within a Profession; Members of an Organization; Editors of a Film; Net Worth in Currency; Administrative Parent of an Area; Film Genres; Recurring Events; Leadership Roles in an Organization. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Film Genres,"

node0: Republic of Croatia, Southeast European country with names like HR, HRV, 🇭🇷.  
node1: Canadian film director David Cronenberg, known for works like *Dead Ringers*.  
node2: 2007 film *I Know Who Killed Me* directed by Chris Sivertson.  
node3: 1979 film *Murder by Decree* by Bob Clark, starring historical figures.  
node4: 1974 comedy *Young Frankenstein* starring Gene Wilder, directed by Mel Brooks.  
node5: 2002 film *Mr. Deeds* directed by Steven Brill, comedic legal drama.  
node6: Finland (Suomi, 🇫🇮), Northern European country with ""Land of Thousand Lakes"" nickname.  
node7: Olympic sport of fencing, involves blade weapons and precision.  
node8: American film studio Morgan Creek Productions, produces movies and TV.  
node9: English actor Harry Andrews, also known as Harry Fleetwood Andrews.  
node10: Missing entity in knowledge graph.  
node11: 2010 psychological thriller *Shutter Island* directed by Martin Scorsese.  
node12: 1988 Cronenberg film *Dead Ringers* about twin gynecologists.  
node13: British actress Emily Mortimer, known for diverse film roles.  
node14: Horror film genre, includes scary, suspenseful movies like *Alien*.  
node15: American film producer James G. Robinson, works in Hollywood.  
node16: 2009 romantic comedy *The Proposal* starring Sandra Bullock.  
node17: Director Martin Scorsese, noted for films like *Shutter Island*, spelled Skorseze sometimes.  
node18: Missing entity in knowledge graph.  
node19: 2012 horror *The Cabin in the Woods* parodying slasher tropes.  
node20: Pamela Anderson, Canadian-American model and actress from *Baywatch*.  
node21: 1979 sci-fi horror *Alien* by Ridley Scott, influential franchise starter.  
node22: Cinematographer Robert Richardson, collaborates with major directors.  
node23: 2002 French film *8 Women* about murder in a mansion.  
node24: 2003 horror remake *The Texas Chainsaw Massacre*.  
node25: Producer Brad Grey, former Paramount Pictures CEO.  
node26: Actress Sharon Stone, iconic in *Basic Instinct* and *Casino*.  
node27: 2011 film *Wuthering Heights* adaptation directed by Andrea Arnold.  
node28: 1977 drama *Equus* based on Peter Shaffer’s play, stars Peter Firth.  
node29: 2007 post-apocalyptic *I Am Legend* with Will Smith.  
node30: 2000 sci-fi *Battlefield Earth* criticized as a box-office flop.  
node31: Canadian actor Donald Sutherland, in *Cliffhanger* and *Equus*.","node0:Entity in the knowledge graph. Entity name: Croatia, Entity alternatives: 🇭🇷, HR, hr, HRV, Republic of Croatia. Entity description:republic in Southeast Europe
node1:Entity in the knowledge graph. Entity name: David Cronenberg, Entity alternatives: David Cronenburg, David Paul Cronenberg, David P. Cronenberg. Entity description:Canadian film director, screenwriter and actor
node2:Entity in the knowledge graph. Entity name: I Know Who Killed Me, Entity alternatives: . Entity description:2007 film by Chris Sivertson
node3:Entity in the knowledge graph. Entity name: Murder by Decree, Entity alternatives: . Entity description:1979 film by Bob Clark
node4:Entity in the knowledge graph. Entity name: Young Frankenstein, Entity alternatives: . Entity description:1974 film by Mel Brooks, Gene Wilder
node5:Entity in the knowledge graph. Entity name: Mr. Deeds, Entity alternatives: . Entity description:2002 film by Steven Brill
node6:Entity in the knowledge graph. Entity name: Finland, Entity alternatives: Finlandia, Finlande, Republic of Finland, Suomen tasavalta, Finnia, Land of Thousand Lakes, Finnland, Suomi, fi, Republiken Finland, 🇫🇮. Entity description:country in Northern Europe
node7:Entity in the knowledge graph. Entity name: fencing, Entity alternatives: Olympic fencing. Entity description:sport
node8:Entity in the knowledge graph. Entity name: Morgan Creek Productions, Entity alternatives: . Entity description:American film studio
node9:Entity in the knowledge graph. Entity name: Harry Andrews, Entity alternatives: Harry Fleetwood Andrews. Entity description:English film actor
node10:Missing.
node11:Entity in the knowledge graph. Entity name: Shutter Island, Entity alternatives: . Entity description:2010 American film
node12:Entity in the knowledge graph. Entity name: Dead Ringers, Entity alternatives: . Entity description:1988 film by David Cronenberg
node13:Entity in the knowledge graph. Entity name: Emily Mortimer, Entity alternatives: . Entity description:British actress
node14:Entity in the knowledge graph. Entity name: horror film, Entity alternatives: horror movie. Entity description:film genre
node15:Entity in the knowledge graph. Entity name: James G. Robinson, Entity alternatives: . Entity description:American film producer
node16:Entity in the knowledge graph. Entity name: The Proposal, Entity alternatives: Proposal. Entity description:2009 film by Anne Fletcher
node17:Entity in the knowledge graph. Entity name: Martin Scorsese, Entity alternatives: Martin Skorseze. Entity description:American film director, screenwriter, producer and actor
node18:Missing.
node19:Entity in the knowledge graph. Entity name: The Cabin in the Woods, Entity alternatives: '' The Cabin in the Woods '', Cabin in the Woods. Entity description:2012 film by Drew Goddard
node20:Entity in the knowledge graph. Entity name: Pamela Anderson, Entity alternatives: Pamela Denise Anderson. Entity description:Canadian-American model, producer, author, former showgirl
node21:Entity in the knowledge graph. Entity name: Alien, Entity alternatives: . Entity description:1979 American science-fiction horror film by Ridley Scott
node22:Entity in the knowledge graph. Entity name: Robert Richardson, Entity alternatives: . Entity description:American cinematographer
node23:Entity in the knowledge graph. Entity name: 8 Women, Entity alternatives: Huit femmes (film), 8 Femmes, Huit Femmes, Eight Women, 8 femmes, Huit femmes. Entity description:2002 film by François Ozon
node24:Entity in the knowledge graph. Entity name: The Texas Chainsaw Massacre, Entity alternatives: Texas Chainsaw Massacre. Entity description:US 2003 horror film
node25:Entity in the knowledge graph. Entity name: Brad Grey, Entity alternatives: Brad Alan Grey. Entity description:American film producer
node26:Entity in the knowledge graph. Entity name: Sharon Stone, Entity alternatives: Sharon Yvonne Stone. Entity description:actress and fashion model from the United States
node27:Entity in the knowledge graph. Entity name: Wuthering Heights, Entity alternatives: . Entity description:2011 film by Andrea Arnold
node28:Entity in the knowledge graph. Entity name: Equus, Entity alternatives: . Entity description:1977 British-American drama film
node29:Entity in the knowledge graph. Entity name: I Am Legend, Entity alternatives: . Entity description:2007 American film
node30:Entity in the knowledge graph. Entity name: Battlefield Earth, Entity alternatives: . Entity description:2000 film by Roger Christian
node31:Entity in the knowledge graph. Entity name: Donald Sutherland, Entity alternatives: Donald Edward McNichol Sutherland. Entity description:Canadian actor",fb15k237,lc
"Classify the relationship between two entities denoted as source node11 and target node13 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: George Clooney, also George Timothy Clooney, is an American actor, filmmaker, and activist.  
node1: Belgium, or Kingdom of Belgium (🇧🇪), is a federal constitutional monarchy in Western Europe.  
node2: Master’s degree, including MBA, is a postgraduate academic qualification.  
node3: Loretta Young (Gretchen Young) is an American actress.  
node4: Colombia (República de Colombia 🇨🇴) is a South American country.  
node5: Old Dominion University (ODU) is a public research university in Norfolk, Virginia.  
node6: Busta Rhymes (Trevor George Smith Jr.) is an American rapper and hip hop musician.  
node7: Cesar Romero (Cesar Julio Romero Jr.) is an American actor.  
node8: National Board of Review Award for Best Cast is an acting award.  
node9: Doctoral degree (doctorate) is the highest academic/professional qualification.  
node10: Economics studies production, distribution, and consumption of goods/services.  
node11: Robert Gates (Robert Michael Gates) was CIA director, US Secretary of Defense, and university president.  
node12: Bryce Dallas Howard is an American actress.  
node13: Harvard University (Harvard) is a private research institution in Cambridge, Massachusetts.  
node14: *Closer* (2004) is a romantic drama film directed by Mike Nichols.  
node15: Greg Daniels is an American writer, producer, and director.  
node16: Universal Motown Records is a Universal Motown Republic Group subsidiary label.  
node17: CFR Cluj is a Romanian football club.  
node18: Jessalyn Gilsig (Jessalyn Sarah Gilsig) is an actress.  
node19: Thailand (🇹🇭, Siam) is a Southeast Asian constitutional monarchy.  
node20: Master of Business Administration (MBA) is a master’s degree in business administration.  
node21: Japanese yen (JPY, ¥) is Japan’s official currency.  
node22: Missing entity.  
node23: United States of America (USA, 🇺🇸) is a North American federal republic.  
node24: Chairperson (chairman/chairwoman) leads organized groups like boards or committees.  
node25: Central Intelligence Agency (CIA) is the US national intelligence agency.  
node26: *The Help* (2011) is a US film starring Viola Davis.  
node27: Belgrade (Beograd) is Serbia’s capital city.  
node28: Viola Davis (La Viola Davis) is an American actress.  
node29: *Argo* (2012) is an American political thriller film.  
node30: Lake Forest is a city in Lake County, Illinois.  
node31: Entity names: Unknown.

the connection relationship among the nodes mentioned:
 <node0, node22>,<node0, node23>,<node0, node29>,<node1, node23>,<node1, node26>,<node1, node29>,<node2, node10>,<node2, node11>,<node2, node13>,<node3, node7>,<node3, node23>,<node4, node26>,<node4, node29>,<node5, node23>,<node5, node31>,<node6, node16>,<node6, node23>,<node6, node31>,<node7, node23>,<node8, node14>,<node8, node26>,<node9, node10>,<node9, node11>,<node9, node13>,<node10, node13>,<node11, node23>,<node11, node25>,<node12, node23>,<node12, node26>,<node12, node28>,<node13, node15>,<node13, node18>,<node13, node20>,<node13, node23>,<node13, node24>,<node13, node31>,<node14, node22>,<node14, node23>,<node14, node31>,<node15, node23>,<node16, node31>,<node17, node31>,<node19, node23>,<node19, node26>,<node19, node29>,<node21, node31>,<node22, node29>,<node23, node26>,<node23, node28>,<node23, node29>,<node23, node30>,<node26, node28>,<node27, node31>,<node30, node31>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Employment History of a Person; Celebrity Impersonations; Entities Involved in an Event; Domestic Tuition in Currency; Nominal GDP by Currency; Climate of a Travel Destination; Capital of a Country; NCAA Basketball Tournament Seeds; Hints for Gardening; Politicians in a Political Party. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Employment History of a Person,"

node0: George Clooney, also George Timothy Clooney, is an American actor, filmmaker, and activist.  
node1: Belgium, or Kingdom of Belgium (🇧🇪), is a federal constitutional monarchy in Western Europe.  
node2: Master’s degree, including MBA, is a postgraduate academic qualification.  
node3: Loretta Young (Gretchen Young) is an American actress.  
node4: Colombia (República de Colombia 🇨🇴) is a South American country.  
node5: Old Dominion University (ODU) is a public research university in Norfolk, Virginia.  
node6: Busta Rhymes (Trevor George Smith Jr.) is an American rapper and hip hop musician.  
node7: Cesar Romero (Cesar Julio Romero Jr.) is an American actor.  
node8: National Board of Review Award for Best Cast is an acting award.  
node9: Doctoral degree (doctorate) is the highest academic/professional qualification.  
node10: Economics studies production, distribution, and consumption of goods/services.  
node11: Robert Gates (Robert Michael Gates) was CIA director, US Secretary of Defense, and university president.  
node12: Bryce Dallas Howard is an American actress.  
node13: Harvard University (Harvard) is a private research institution in Cambridge, Massachusetts.  
node14: *Closer* (2004) is a romantic drama film directed by Mike Nichols.  
node15: Greg Daniels is an American writer, producer, and director.  
node16: Universal Motown Records is a Universal Motown Republic Group subsidiary label.  
node17: CFR Cluj is a Romanian football club.  
node18: Jessalyn Gilsig (Jessalyn Sarah Gilsig) is an actress.  
node19: Thailand (🇹🇭, Siam) is a Southeast Asian constitutional monarchy.  
node20: Master of Business Administration (MBA) is a master’s degree in business administration.  
node21: Japanese yen (JPY, ¥) is Japan’s official currency.  
node22: Missing entity.  
node23: United States of America (USA, 🇺🇸) is a North American federal republic.  
node24: Chairperson (chairman/chairwoman) leads organized groups like boards or committees.  
node25: Central Intelligence Agency (CIA) is the US national intelligence agency.  
node26: *The Help* (2011) is a US film starring Viola Davis.  
node27: Belgrade (Beograd) is Serbia’s capital city.  
node28: Viola Davis (La Viola Davis) is an American actress.  
node29: *Argo* (2012) is an American political thriller film.  
node30: Lake Forest is a city in Lake County, Illinois.  
node31: Entity names: Unknown.","node0:Entity in the knowledge graph. Entity name: George Clooney, Entity alternatives: George Timothy Clooney. Entity description:American actor, filmmaker, and activist
node1:Entity in the knowledge graph. Entity name: Belgium, Entity alternatives: Kingdom of Belgium, be, 🇧🇪. Entity description:federal constitutional monarchy in Western Europe
node2:Entity in the knowledge graph. Entity name: master's degree, Entity alternatives: masters degree, master degree, master. Entity description:postgraduate academic degree
node3:Entity in the knowledge graph. Entity name: Loretta Young, Entity alternatives: Gretchen Young. Entity description:American actress
node4:Entity in the knowledge graph. Entity name: Colombia, Entity alternatives: Republic of Colombia, Republica de Colombia, República de Colombia, 🇨🇴, United States of Colombia, co. Entity description:country in South America
node5:Entity in the knowledge graph. Entity name: Old Dominion University, Entity alternatives: ODU. Entity description:public, co-educational research university in Norfolk, Virginia, U.S.
node6:Entity in the knowledge graph. Entity name: Busta Rhymes, Entity alternatives: Trevor George Smith, Jr., Trevor Tahiem Smith, Jr.. Entity description:American rapper, hip hop musician
node7:Entity in the knowledge graph. Entity name: Cesar Romero, Entity alternatives: Cesar Julio Romero Jr.. Entity description:American actor
node8:Entity in the knowledge graph. Entity name: National Board of Review Award for Best Cast, Entity alternatives: . Entity description:award
node9:Entity in the knowledge graph. Entity name: doctoral degree, Entity alternatives: doctorate, doctor degree, doctor's degree, doctor. Entity description:academic or professional degree
node10:Entity in the knowledge graph. Entity name: economics, Entity alternatives: . Entity description:social science that analyzes the production, distribution, and consumption of goods and services
node11:Entity in the knowledge graph. Entity name: Robert Gates, Entity alternatives: Robert Michael Gates. Entity description:CIA director, U.S. Secretary of Defense, and university president
node12:Entity in the knowledge graph. Entity name: Bryce Dallas Howard, Entity alternatives: . Entity description:American actress
node13:Entity in the knowledge graph. Entity name: Harvard University, Entity alternatives: Harvard. Entity description:private research university in Cambridge, Massachusetts, United States
node14:Entity in the knowledge graph. Entity name: Closer, Entity alternatives: . Entity description:2004 romantic drama film by Mike Nichols
node15:Entity in the knowledge graph. Entity name: Greg Daniels, Entity alternatives: . Entity description:American writer, producer and director
node16:Entity in the knowledge graph. Entity name: Universal Motown Records, Entity alternatives: . Entity description:record label that operated as a division of Universal Motown Republic Group
node17:Entity in the knowledge graph. Entity name: CFR Cluj, Entity alternatives: . Entity description:association football club in Romania
node18:Entity in the knowledge graph. Entity name: Jessalyn Gilsig, Entity alternatives: Jessalyn Sarah Gilsig. Entity description:actress
node19:Entity in the knowledge graph. Entity name: Thailand, Entity alternatives: 🇹🇭, th, Siam, Kingdom of Thailand, Land of Smiles. Entity description:constitutional monarchy in Southeast Asia
node20:Entity in the knowledge graph. Entity name: Master of Business Administration, Entity alternatives: Master's of Business Administration, M.B.A., MBA, Masters of Business Administration. Entity description:master's degree in business administration (MBA)
node21:Entity in the knowledge graph. Entity name: Japanese yen, Entity alternatives: JPY, yen, Yen, ¥. Entity description:official currency of Japan
node22:Missing.
node23:Entity in the knowledge graph. Entity name: United States of America, Entity alternatives: U.S.A., the United States of America, the States, US, USA, America, the US, 🇺🇸, the United States, United States, U.S.. Entity description:federal republic in North America
node24:Entity in the knowledge graph. Entity name: chairperson, Entity alternatives: chairwoman, chairman, chair. Entity description:highest officer of an organized group such as a board, a committee, or a deliberative assembly
node25:Entity in the knowledge graph. Entity name: Central Intelligence Agency, Entity alternatives: C.I.A., CIA. Entity description:national intelligence agency of the United States
node26:Entity in the knowledge graph. Entity name: The Help, Entity alternatives: Help, '' The Help ''. Entity description:2011 American film
node27:Entity in the knowledge graph. Entity name: Belgrade, Entity alternatives: Capital of Serbia, Београд, City of Belgrade, Belgrade, Serbia, Beograd. Entity description:Republic of Serbia capital
node28:Entity in the knowledge graph. Entity name: Viola Davis, Entity alternatives: La Viola Davis. Entity description:American actress
node29:Entity in the knowledge graph. Entity name: Argo, Entity alternatives: . Entity description:2012 American political thriller film
node30:Entity in the knowledge graph. Entity name: Lake Forest, Entity alternatives: Lake Forest, Illinois. Entity description:city in Lake County, Illinois, United States
node31:entity names: Unknown",fb15k237,lc
"Classify the relationship between two entities denoted as source node21 and target node20 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: US actor, producer, and film director known for diverse roles.  
node1: Combat sport involving punching techniques and strategies.  
node2: Former monarchy in Northern Europe (1523–1814) known for expansion.  
node3: 2002 comedy-drama exploring middle-age identity crises.  
node4: Long-running American crime TV series focusing on forensic investigations in Las Vegas (2000–present).  
node5: 2006 British drama examining post-punk Britain’s social issues by Shane Meadows.  
node6: 2000 drama about family dynamics and personal redemption directed by Kenneth Lonergan.  
node7: Legal drama TV series (1997–2004) focusing on courtroom cases and ethics.  
node8: 1993 western film depicting the O.K. Corral shootout and its aftermath.  
node9: Second-place medal awarded in sports and competitive events.  
node10: 2008 Ridley Scott spy thriller starring Leonardo DiCaprio in Morocco.  
node11: 1981 adventure film about prehistoric humans’ quest for fire.  
node12: American director/producer/screenwriter known for comedy-drama films.  
node13: Actor and country singer known for *Felicity* and indie films, born 1961.  
node14: Golden Globe award for outstanding motion picture screenwriting.  
node15: Actor born 1949, known for roles in *The Practice* and films.  
node16: Southeast Asian archipelago nation with over 7,600 islands.  
node17: Veteran actor noted for Western roles and *The Big Lebowski* voice.  
node18: 2010 Julia Roberts romantic comedy based on Elizabeth Gilbert’s memoir.  
node19: Actor known for roles in *A Serious Man* and *The Night Manager*.  
node20: Genre focusing on serious stories and emotional character arcs.  
node21: 2007 Coen brothers’ Oscar-winning neo-Western thriller.  
node22: Missing entity in the knowledge graph.  
node23: 2011 Martin Scorsese film about a boy in a Paris train station, based on *The Invention of Hugo Cabret*.  
node24: Ethnic Chinese diaspora maintaining cultural ties abroad.  
node25: 1998 historical adventure about Louis XIV’s rival, directed by Wallace.  
node26: 2011 British spy comedy sequel starring Rowan Atkinson as bumbling secret agent.  
node27: 2006 British comedy-drama about schoolboys preparing for exams.  
node28: Film/theater techniques creating visual illusions for imaginary environments.  
node29: French Mediterranean island, Napoleon’s birthplace.  
node30: European republic with overseas territories, cultural and political influence.  
node31: 2011 period drama about a woman disguised as a man in early 20th-century Ireland.

the connection relationship among the nodes mentioned:
 <node0, node25>,<node1, node16>,<node1, node30>,<node2, node30>,<node3, node14>,<node3, node20>,<node4, node15>,<node4, node20>,<node5, node20>,<node5, node30>,<node6, node14>,<node6, node20>,<node7, node20>,<node7, node22>,<node8, node13>,<node8, node17>,<node8, node20>,<node9, node16>,<node9, node30>,<node10, node19>,<node10, node20>,<node10, node28>,<node11, node16>,<node11, node20>,<node11, node30>,<node12, node14>,<node14, node21>,<node16, node23>,<node16, node24>,<node18, node20>,<node18, node28>,<node19, node23>,<node20, node23>,<node20, node25>,<node20, node27>,<node20, node31>,<node23, node28>,<node23, node30>,<node24, node30>,<node25, node28>,<node25, node30>,<node26, node30>,<node29, node30>,<node30, node31>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Participating Countries in the Olympic Games; Leadership Roles in an Organization; Capital of an Administrative Area; Film Crew Roles; Categories Within an Award Category; Olympic Athletes by Sport; Film Genres; Locations of Events; Current Team of a Football Player; Combatants in a Military Conflict. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Film Genres,"

node0: US actor, producer, and film director known for diverse roles.  
node1: Combat sport involving punching techniques and strategies.  
node2: Former monarchy in Northern Europe (1523–1814) known for expansion.  
node3: 2002 comedy-drama exploring middle-age identity crises.  
node4: Long-running American crime TV series focusing on forensic investigations in Las Vegas (2000–present).  
node5: 2006 British drama examining post-punk Britain’s social issues by Shane Meadows.  
node6: 2000 drama about family dynamics and personal redemption directed by Kenneth Lonergan.  
node7: Legal drama TV series (1997–2004) focusing on courtroom cases and ethics.  
node8: 1993 western film depicting the O.K. Corral shootout and its aftermath.  
node9: Second-place medal awarded in sports and competitive events.  
node10: 2008 Ridley Scott spy thriller starring Leonardo DiCaprio in Morocco.  
node11: 1981 adventure film about prehistoric humans’ quest for fire.  
node12: American director/producer/screenwriter known for comedy-drama films.  
node13: Actor and country singer known for *Felicity* and indie films, born 1961.  
node14: Golden Globe award for outstanding motion picture screenwriting.  
node15: Actor born 1949, known for roles in *The Practice* and films.  
node16: Southeast Asian archipelago nation with over 7,600 islands.  
node17: Veteran actor noted for Western roles and *The Big Lebowski* voice.  
node18: 2010 Julia Roberts romantic comedy based on Elizabeth Gilbert’s memoir.  
node19: Actor known for roles in *A Serious Man* and *The Night Manager*.  
node20: Genre focusing on serious stories and emotional character arcs.  
node21: 2007 Coen brothers’ Oscar-winning neo-Western thriller.  
node22: Missing entity in the knowledge graph.  
node23: 2011 Martin Scorsese film about a boy in a Paris train station, based on *The Invention of Hugo Cabret*.  
node24: Ethnic Chinese diaspora maintaining cultural ties abroad.  
node25: 1998 historical adventure about Louis XIV’s rival, directed by Wallace.  
node26: 2011 British spy comedy sequel starring Rowan Atkinson as bumbling secret agent.  
node27: 2006 British comedy-drama about schoolboys preparing for exams.  
node28: Film/theater techniques creating visual illusions for imaginary environments.  
node29: French Mediterranean island, Napoleon’s birthplace.  
node30: European republic with overseas territories, cultural and political influence.  
node31: 2011 period drama about a woman disguised as a man in early 20th-century Ireland.","node0:Entity in the knowledge graph. Entity name: John Malkovich, Entity alternatives: . Entity description:US-american actor, film producer and film director
node1:Entity in the knowledge graph. Entity name: boxing, Entity alternatives: . Entity description:combat sport
node2:Entity in the knowledge graph. Entity name: Swedish Empire, Entity alternatives: . Entity description:former country
node3:Entity in the knowledge graph. Entity name: About Schmidt, Entity alternatives: . Entity description:2002 American comedy-drama film
node4:Entity in the knowledge graph. Entity name: CSI: Crime Scene Investigation, Entity alternatives: CSI: Las Vegas. Entity description:American crime fiction television series (2000-present)
node5:Entity in the knowledge graph. Entity name: This Is England, Entity alternatives: . Entity description:2006 British drama film written and directed by Shane Meadows
node6:Entity in the knowledge graph. Entity name: You Can Count on Me, Entity alternatives: . Entity description:2000 film by Kenneth Lonergan
node7:Entity in the knowledge graph. Entity name: The Practice, Entity alternatives: . Entity description:television series
node8:Entity in the knowledge graph. Entity name: Tombstone, Entity alternatives: . Entity description:1993 film by George P. Cosmatos, Kevin Jarre
node9:Entity in the knowledge graph. Entity name: silver medal, Entity alternatives: . Entity description:Medal awarded in sports and other competitions
node10:Entity in the knowledge graph. Entity name: Body of Lies, Entity alternatives: . Entity description:2008 film directed by Ridley Scott
node11:Entity in the knowledge graph. Entity name: Quest for Fire, Entity alternatives: La Guerre du feu. Entity description:1981 adventure movie
node12:Entity in the knowledge graph. Entity name: James L. Brooks, Entity alternatives: James Lawrence Brooks. Entity description:American director, producer and screenwriter
node13:Entity in the knowledge graph. Entity name: John Corbett, Entity alternatives: John Joseph Corbett. Entity description:born 1961; American actor and country music singer
node14:Entity in the knowledge graph. Entity name: Golden Globe Award for Best Screenplay, Entity alternatives: The Golden Globe Award for Best Screenplay – Motion Picture. Entity description:award
node15:Entity in the knowledge graph. Entity name: Paul Guilfoyle, Entity alternatives: . Entity description:American actor born in 1949
node16:Entity in the knowledge graph. Entity name: Philippines, Entity alternatives: the Philippines, RP, Philippine Islands, ph, PH, Republic of the Philippines, 🇵🇭, PHL. Entity description:republic in Southeast Asia
node17:Entity in the knowledge graph. Entity name: Sam Elliott, Entity alternatives: Samuel Pack ""Sam"" Elliott. Entity description:actor
node18:Entity in the knowledge graph. Entity name: Eat Pray Love, Entity alternatives: Eat, Pray, Love. Entity description:2010 American film
node19:Entity in the knowledge graph. Entity name: Michael Stuhlbarg, Entity alternatives: Michael S. Stuhlbarg. Entity description:American actor
node20:Entity in the knowledge graph. Entity name: drama film, Entity alternatives: drama movie. Entity description:film genre
node21:Entity in the knowledge graph. Entity name: No Country for Old Men, Entity alternatives: . Entity description:2007 film directed by Ethan and Joel Coen
node22:Missing.
node23:Entity in the knowledge graph. Entity name: Hugo, Entity alternatives: . Entity description:2011 historical drama film
node24:Entity in the knowledge graph. Entity name: Overseas Chinese, Entity alternatives: . Entity description:ethnic group
node25:Entity in the knowledge graph. Entity name: The Man in the Iron Mask, Entity alternatives: '' The Man in the Iron Mask '', Man in the Iron Mask. Entity description:1998 film by Randall Wallace
node26:Entity in the knowledge graph. Entity name: Johnny English Reborn, Entity alternatives: Johnny English Returns. Entity description:2011 British spy comedy film
node27:Entity in the knowledge graph. Entity name: The History Boys, Entity alternatives: History Boys. Entity description:2006 film by Nicholas Hytner
node28:Entity in the knowledge graph. Entity name: special effects, Entity alternatives: SFX, SPFX, FX, special effect. Entity description:illusions or tricks to change appearance
node29:Entity in the knowledge graph. Entity name: Corsica, Entity alternatives: . Entity description:territorial collectivity of France
node30:Entity in the knowledge graph. Entity name: France, Entity alternatives: 🇫🇷, fr, FR, La France, French Republic, République française, Republic of France. Entity description:republic with mainland in Europe and numerous oversea territories
node31:Entity in the knowledge graph. Entity name: Albert Nobbs, Entity alternatives: '' Albert Nobbs ''. Entity description:2011 film by Rodrigo García",fb15k237,lc
"Classify the relationship between two entities denoted as source node1 and target node23 using the union of their corresponding subgraph (text attributes and connections) as follows.

node0: Entity: singer-songwriter. Alternatives: singersongwriter, singer/songwriter. Musician who writes, composes, and sings.  
node1: Entity: Bryan Adams. Alternatives: Bryan Guy Adams. Canadian singer-songwriter.  
node2: Entity: Kenny Loggins. Alternatives: none. American musician.  
node3: Entity: Cam Clarke. Alternatives: Cameron Clarke, etc. American voice actor.  
node4: Entity: USA for Africa. Alternatives: none. US supergroup.  
node5: Entity: Moby. Alternatives: UHF, Voodoo Child, etc. Activist, musician, DJ, and photographer.  
node6: Entity: Marilyn Bergman. Alternatives: none. American composer, songwriter, and author.  
node7: Entity: Eddie Vedder. Alternatives: none. Musician, songwriter, Pearl Jam member.  
node8: Entity: Ringo Sheena. Alternatives: Shiina Ringo, etc. Japanese musician.  
node9: Entity: Jermaine Jackson. Alternatives: Jermaine La Jaune Jackson. Singer, Jackson 5 member.  
node10: Entity: Mark Cuban. Alternatives: none. American billionaire entrepreneur.  
node11: Missing.  
node12: Entity: Jason Mraz. Alternatives: none. American singer-songwriter.  
node13: Entity: Katherine Heigl. Alternatives: Katherine Marie Heigl. American actress and film producer.  
node14: Missing.  
node15: Entity: 13th Screen Actors Guild Awards. Alternatives: none. 2007 ceremony for 2006 films.  
node16: Entity: Charlie Daniels. Alternatives: Charles Edward Daniels. American singer and musician.  
node17: Entity: John Conyers. Alternatives: John James Conyers, Jr., etc. Michigan politician.  
node18: Missing.  
node19: Entity: Richard Rodney Bennett. Alternatives: Sir Richard Rodney Bennett, etc. English composer and pianist.  
node20: Entity: Alan Bergman. Alternatives: none. American lyricist.  
node21: Entity: Juanes. Alternatives: none. Colombian musician and singer.  
node22: Entity: J Records. Alternatives: none. American record label.  
node23: Entity: male organism. Alternatives: male creature, ♂, etc. Animal/plant male sex; use Q6581097 for human.  
node24: Entity: T.R. Knight. Alternatives: Theodore Raymond Knight, 007. American actor.  
node25: Missing.  
node26: Entity: 112th US Congress. Alternatives: One Hundred Twelfth... Legislative term.  
node27: Entity: Gene Reynolds. Alternatives: none. Actor, producer, writer, director.  
node28: Entity: Isaiah Washington. Alternatives: Isaiah Washington IV. American-Sierra Leonean actor.  
node29: Entity: Pearl Jam. Alternatives: Mookie Blaylock. American band.  
node30: Entity: Avi Lerner. Alternatives: Millennium Films. American film producer.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node5>,<node0, node8>,<node0, node9>,<node0, node12>,<node0, node16>,<node0, node21>,<node2, node4>,<node2, node20>,<node2, node23>,<node3, node23>,<node4, node9>,<node5, node23>,<node6, node20>,<node7, node22>,<node7, node23>,<node7, node29>,<node9, node23>,<node10, node23>,<node11, node17>,<node11, node25>,<node11, node26>,<node12, node23>,<node13, node15>,<node13, node24>,<node13, node28>,<node14, node21>,<node15, node24>,<node15, node28>,<node16, node23>,<node17, node23>,<node17, node25>,<node17, node26>,<node18, node29>,<node19, node23>,<node20, node23>,<node21, node23>,<node22, node29>,<node23, node24>,<node23, node27>,<node23, node28>,<node23, node30>,<node24, node28>,<node25, node26>.

Consider: semantic and structural information. What is the relationship between two target entities? Choose from the following: Administrative Parent of an Area; Hockey Team Roster Positions; Film Distribution Medium; Executive Producers of a Film; Gender of a Person; Sports in the Olympic Games; Current Football Roster Positions; Geographical Containment; Peers in an Influence Network; Nominations Received by an Award Nominee. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Film Genres)
Brief_reasoning: Your_brief_reasoning",Gender of a Person,"

node0: Entity: singer-songwriter. Alternatives: singersongwriter, singer/songwriter. Musician who writes, composes, and sings.  
node1: Entity: Bryan Adams. Alternatives: Bryan Guy Adams. Canadian singer-songwriter.  
node2: Entity: Kenny Loggins. Alternatives: none. American musician.  
node3: Entity: Cam Clarke. Alternatives: Cameron Clarke, etc. American voice actor.  
node4: Entity: USA for Africa. Alternatives: none. US supergroup.  
node5: Entity: Moby. Alternatives: UHF, Voodoo Child, etc. Activist, musician, DJ, and photographer.  
node6: Entity: Marilyn Bergman. Alternatives: none. American composer, songwriter, and author.  
node7: Entity: Eddie Vedder. Alternatives: none. Musician, songwriter, Pearl Jam member.  
node8: Entity: Ringo Sheena. Alternatives: Shiina Ringo, etc. Japanese musician.  
node9: Entity: Jermaine Jackson. Alternatives: Jermaine La Jaune Jackson. Singer, Jackson 5 member.  
node10: Entity: Mark Cuban. Alternatives: none. American billionaire entrepreneur.  
node11: Missing.  
node12: Entity: Jason Mraz. Alternatives: none. American singer-songwriter.  
node13: Entity: Katherine Heigl. Alternatives: Katherine Marie Heigl. American actress and film producer.  
node14: Missing.  
node15: Entity: 13th Screen Actors Guild Awards. Alternatives: none. 2007 ceremony for 2006 films.  
node16: Entity: Charlie Daniels. Alternatives: Charles Edward Daniels. American singer and musician.  
node17: Entity: John Conyers. Alternatives: John James Conyers, Jr., etc. Michigan politician.  
node18: Missing.  
node19: Entity: Richard Rodney Bennett. Alternatives: Sir Richard Rodney Bennett, etc. English composer and pianist.  
node20: Entity: Alan Bergman. Alternatives: none. American lyricist.  
node21: Entity: Juanes. Alternatives: none. Colombian musician and singer.  
node22: Entity: J Records. Alternatives: none. American record label.  
node23: Entity: male organism. Alternatives: male creature, ♂, etc. Animal/plant male sex; use Q6581097 for human.  
node24: Entity: T.R. Knight. Alternatives: Theodore Raymond Knight, 007. American actor.  
node25: Missing.  
node26: Entity: 112th US Congress. Alternatives: One Hundred Twelfth... Legislative term.  
node27: Entity: Gene Reynolds. Alternatives: none. Actor, producer, writer, director.  
node28: Entity: Isaiah Washington. Alternatives: Isaiah Washington IV. American-Sierra Leonean actor.  
node29: Entity: Pearl Jam. Alternatives: Mookie Blaylock. American band.  
node30: Entity: Avi Lerner. Alternatives: Millennium Films. American film producer.","node0:Entity in the knowledge graph. Entity name: singer-songwriter, Entity alternatives: singersongwriter, singer/songwriter, singer songwriter. Entity description:musician who writes, composes and sings
node1:Entity in the knowledge graph. Entity name: Bryan Adams, Entity alternatives: Bryan Guy Adams. Entity description:Canadian singer-songwriter
node2:Entity in the knowledge graph. Entity name: Kenny Loggins, Entity alternatives: . Entity description:American musician
node3:Entity in the knowledge graph. Entity name: Cam Clarke, Entity alternatives: Cameron Clarke, Cameron Arthur Clarke, Cam Arthur Clarke. Entity description:American voice actor
node4:Entity in the knowledge graph. Entity name: USA for Africa, Entity alternatives: . Entity description:US supergroup
node5:Entity in the knowledge graph. Entity name: Moby, Entity alternatives: UHF, Voodoo Child, Brainstorm, Schaumgummi, Barracuda, Pippy Baliunas, Richard Melville Hall. Entity description:activist, American musician, DJ and photographer
node6:Entity in the knowledge graph. Entity name: Marilyn Bergman, Entity alternatives: . Entity description:American composer, songwriter and author
node7:Entity in the knowledge graph. Entity name: Eddie Vedder, Entity alternatives: . Entity description:musician, songwriter, member of Pearl Jamf
node8:Entity in the knowledge graph. Entity name: Ringo Sheena, Entity alternatives: Shiina Ringo, Ringo Shina, Ringo Shena, Ringo Shiina, Shena Ringo, Sheena Ringo, Yumiko Shiina. Entity description:Japanese musician
node9:Entity in the knowledge graph. Entity name: Jermaine Jackson, Entity alternatives: Jermaine La Jaune Jackson. Entity description:singer and member of The Jackson 5 from the United States
node10:Entity in the knowledge graph. Entity name: Mark Cuban, Entity alternatives: . Entity description:American billionaire entrepreneur
node11:Missing.
node12:Entity in the knowledge graph. Entity name: Jason Mraz, Entity alternatives: . Entity description:American singer-songwriter
node13:Entity in the knowledge graph. Entity name: Katherine Heigl, Entity alternatives: Katherine Marie Heigl. Entity description:American actress and film producer
node14:Missing.
node15:Entity in the knowledge graph. Entity name: 13th Screen Actors Guild Awards, Entity alternatives: . Entity description:ceremony on 28 January 2007 concerning films released in 2006
node16:Entity in the knowledge graph. Entity name: Charlie Daniels, Entity alternatives: Charles Edward Daniels. Entity description:American singer and musician
node17:Entity in the knowledge graph. Entity name: John Conyers, Entity alternatives: John James Conyers, Jr., John Conyers, Jr.. Entity description:American politician from Michigan
node18:Missing.
node19:Entity in the knowledge graph. Entity name: Richard Rodney Bennett, Entity alternatives: Sir Richard Rodney Bennett, Richard Bennett. Entity description:English composer and pianist
node20:Entity in the knowledge graph. Entity name: Alan Bergman, Entity alternatives: . Entity description:American lyricist
node21:Entity in the knowledge graph. Entity name: Juanes, Entity alternatives: Juanes. Entity description:Colombian musician and singer
node22:Entity in the knowledge graph. Entity name: J Records, Entity alternatives: . Entity description:American record label
node23:Entity in the knowledge graph. Entity name: male organism, Entity alternatives: male creature, male, sex — male, ♂, male animal. Entity description:determined sex of an animal or plant. Use Q6581097 for a male human
node24:Entity in the knowledge graph. Entity name: T. R. Knight, Entity alternatives: Theodore Raymond Knight, 007. Entity description:American actor
node25:Missing.
node26:Entity in the knowledge graph. Entity name: 112th United States Congress, Entity alternatives: One Hundred Twelfth United States Congress. Entity description:legislative term
node27:Entity in the knowledge graph. Entity name: Gene Reynolds, Entity alternatives: . Entity description:actor, producer, writer, director
node28:Entity in the knowledge graph. Entity name: Isaiah Washington, Entity alternatives: Isaiah Washington IV. Entity description:American-Sierra Leonean actor
node29:Entity in the knowledge graph. Entity name: Pearl Jam, Entity alternatives: Mookie Blaylock. Entity description:American band
node30:Entity in the knowledge graph. Entity name: Avi Lerner, Entity alternatives: Millennium Films. Entity description:American film producer",fb15k237,lc
"Classify the product represented by node17 using its subgraph data (text attributes and connections) as follows.

node0: Heritage Soaps with Black Sea Mud & Seaweed, triple milled for gentle cleansing, moisture, and marine fragrance using traditional methods.  
node1: Aoqili Seaweed Soap claims fat emulsifying, detoxifying, laxative effects, and skin softening, popular in Asia for subcutaneous fat reduction.  
node2: 3D Shaper body firming cream uses Swiss micro-algae to reduce fat, boost collagen, and tighten skin with clinically approved formula.  
node3: Top Chi silicone cupping set for facial massage, transparent cups with easy suction, safe, and comfortable for cupping therapy.  
node4: Reviva Labs seaweed soap with vegetable base and scrub action, stimulates circulation, removes toxins, used for anti-cellulite routines.  
node5: Grisi seaweed soap pack, natural 3.5 oz bars for skin care, likely focused on exfoliation and marine ingredient benefits.  
node6: Cellulite gel with grapefruit, rosemary, and minerals to improve circulation, reduce toxins, and diminish cellulite dimples.  
node7: Dead Sea anti-cellulite soap with nodules, seaweed, and minerals to massage, stimulate metabolism, and combat fat and cellulite.  
node8: Caffeine & retinol cellulite cream clinically proven to reduce cellulite, firm skin, and improve appearance, featured on Dr. Oz.  
node9: Apollo23 elastic thigh shaper improves circulation, reduces thigh size, comfortable for post-exercise or prolonged standing use.  
node10: Shiseido Body Creator uses aroma and massage to sculpt, reduces waist and cellulite quickly, targets body contours.  
node11: Curel pregnancy moisturizer boosts skin elasticity, alleviates dryness, safe for postpartum and baby use, paraben-free.  
node12: Skin Tight mango-scented lotion with peptides and omegas tightens skin, boosts collagen, and reduces aging signs.  
node13: Lierac Morpho-Slim serum provides immediate ""girdle-effect"" to slim waist and stomach, enhancing skin firmness.  
node14: It Works! Facial Applicator tightens and tones skin in 45 minutes via cream-infused wraps, hydrating and revitalizing.  
node15: Anti-cellulite massage oil with juniper, artemisia, and black pepper improves circulation, reduces fat, and fights inflammation.  
node16: Slim Girl cellulite cream combines caffeine, carnitine, and vitamins in FDA-lab formula to reduce cellulite and firm skin.  
node17: Dermasilk double chin serum targets neck/jaw sagging with collagen boosters to reduce fat deposits and tighten skin.  
node18: Premium stretch mark cream uses peptides and antioxidants to prevent/reduce stretch marks from pregnancy, weight, or growth.  
node19: Fat-Fader lotion with aminophylline and raspberry ketones breaks down fat, tones skin, and enhances muscle definition topically.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node5>,<node1, node4>,<node1, node5>,<node1, node6>,<node1, node7>,<node1, node8>,<node2, node8>,<node2, node11>,<node2, node12>,<node2, node14>,<node3, node15>,<node6, node8>,<node6, node9>,<node6, node10>,<node8, node10>,<node8, node13>,<node8, node15>,<node8, node16>,<node8, node17>,<node8, node18>,<node8, node19>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Beauty,"

node0: Heritage Soaps with Black Sea Mud & Seaweed, triple milled for gentle cleansing, moisture, and marine fragrance using traditional methods.  
node1: Aoqili Seaweed Soap claims fat emulsifying, detoxifying, laxative effects, and skin softening, popular in Asia for subcutaneous fat reduction.  
node2: 3D Shaper body firming cream uses Swiss micro-algae to reduce fat, boost collagen, and tighten skin with clinically approved formula.  
node3: Top Chi silicone cupping set for facial massage, transparent cups with easy suction, safe, and comfortable for cupping therapy.  
node4: Reviva Labs seaweed soap with vegetable base and scrub action, stimulates circulation, removes toxins, used for anti-cellulite routines.  
node5: Grisi seaweed soap pack, natural 3.5 oz bars for skin care, likely focused on exfoliation and marine ingredient benefits.  
node6: Cellulite gel with grapefruit, rosemary, and minerals to improve circulation, reduce toxins, and diminish cellulite dimples.  
node7: Dead Sea anti-cellulite soap with nodules, seaweed, and minerals to massage, stimulate metabolism, and combat fat and cellulite.  
node8: Caffeine & retinol cellulite cream clinically proven to reduce cellulite, firm skin, and improve appearance, featured on Dr. Oz.  
node9: Apollo23 elastic thigh shaper improves circulation, reduces thigh size, comfortable for post-exercise or prolonged standing use.  
node10: Shiseido Body Creator uses aroma and massage to sculpt, reduces waist and cellulite quickly, targets body contours.  
node11: Curel pregnancy moisturizer boosts skin elasticity, alleviates dryness, safe for postpartum and baby use, paraben-free.  
node12: Skin Tight mango-scented lotion with peptides and omegas tightens skin, boosts collagen, and reduces aging signs.  
node13: Lierac Morpho-Slim serum provides immediate ""girdle-effect"" to slim waist and stomach, enhancing skin firmness.  
node14: It Works! Facial Applicator tightens and tones skin in 45 minutes via cream-infused wraps, hydrating and revitalizing.  
node15: Anti-cellulite massage oil with juniper, artemisia, and black pepper improves circulation, reduces fat, and fights inflammation.  
node16: Slim Girl cellulite cream combines caffeine, carnitine, and vitamins in FDA-lab formula to reduce cellulite and firm skin.  
node17: Dermasilk double chin serum targets neck/jaw sagging with collagen boosters to reduce fat deposits and tighten skin.  
node18: Premium stretch mark cream uses peptides and antioxidants to prevent/reduce stretch marks from pregnancy, weight, or growth.  
node19: Fat-Fader lotion with aminophylline and raspberry ketones breaks down fat, tones skin, and enhances muscle definition topically.","node0:Product from Amazon platform with title and content: Title: Heritage Soaps Black Sea Mud &amp; Seaweed Triple Milled Soap. Content: We use a traditional soap making technique to harness the purifying and conditioning properties of sea silt and marine algae in this restorative soap. Then we blend in moisturising glycerine and sunflower oil. So your skin gets gentle cleansing, softening moisture and a crisp marine fragrance.
node1:Product from Amazon platform with title and content: Title: missing. Content: 100% Authentic Aoqili Seaweed Soap Wash away fat? The Chinese say that they have been doing it for years with Aoqili Premium Seaweed Soap. In addition, the Japanese swear by it and purchase at least 28 million bars of the soap each year. Now we have it here in the United States for us to enjoy as well. Aoqili is more than just a soap, it's a very unique natural soap made from a rare, deep seaweed whose extract is reported to have deep penetrating and fat emulsifying properties. Seaweed soaps have been tested through the centuries and provide a gentle skin-softening effect, but the unique qualities that have made the Aoqili Seaweed Soap so popular in the orient are it's defatting properties. It contains a homeopathic blend of trace elements, vitamins, and minerals derived from the sea, which penetrate the skin by osmosis and result in the loss of stored subcutaneous body fat. When used in addition to your weight reduction program, it may shorten the time it takes to reach your goal weight. In the process, you will enjoy a superb skin treatment and a delightful fragrance. There are many qualities of this soap and it all may come to a surprise, but the soap has a natural laxative quality. Washing with it stimulates the bowel and simultaneously detoxifies the body by pulling nitrogenous wastes from the cells. Its herbal ingredients tend to overcome indigestion but the Chinese herbs' absorption into one's digestive tract through the skin. Washing with Aoqili often does away with the need for antacids or other neutralizing agents for combating acidity of the stomach. Moreover, this seaweed soap has been shown to stimulate circulation through the blood vessels and also acts as a disinfectant against a variety of harmful microorganisms, including viruses, bacteria, fungi, yeasts, protozoa, flukes, helminthic worms, and other parasites. Lastly, Aoqili Seaweed Soap makes the skin baby soft and clears up minor impurities such as rashes, bumps, and acne.
node2:Product from Amazon platform with title and content: Title: 3D Shaper, All Over Body Firming, Tightening and Slimming Cream, Clinically Approved. Immediate Skin Tightening and Skin Shaping Effect During Diet and after Pregnancy or Weight Loss. Content: Product Description3D Shaper's unique active formula is clinically approved and safe to use during pregnancy. Based on Swiss bio-technology using micro-algae, Shaper restores your body's youthful appearance by reducing sub-cutaneous lipids, smoothing skin, and firming skin tissues. This amazing cream also promotes hydration, stimulates the formation of Type 1 collagen, and contains powerful anti-oxidants that protect your skin from free radicals and keep it toxin-free.Shaper provides an immediate skin-tightening effect and long-lasting firmness, all the while keeping your skin radiant and rejuvenated.CAF - Clinically Approved FormulaDirections:Apply a thin layer on clean skin and allow for full absorbtion. Use once or twice daily.Does NOT contain:* Formalin* Formaldehyde* Parabens* Phthalates* Petro-chemicals* GMO* Triclosan* Colors or dyesNot tested on animals.Does not contain animal-derived ingredients.Manufactured under GMP and ISO quality control (QC).
node3:Product from Amazon platform with title and content: Title: Top Chi 2 Cup Facial Transparent Silicone Chinese Cupping Therapy Set. Content: This silicone cupping set is made from quality transparent silicone. The transparent silicone is soft and elastic which is easy to squeeze. Just squeeze the cups to an oval shape, apply to the body, and squeeze back to a circle shape for suction. Transparent cups also let you view the treatment area and reddening of the skin. Silicone cups require no hand pumps, fire, and are safe. The soft material is comfortable on the skin for use in retaining cupping and massage moving cupping.
node4:Product from Amazon platform with title and content: Title: Reviva Labs Seaweed Soap, Original Formula, 4.5-Ounces (Pack of 6). Content: All Natural. 100% Vegetable Base with added scrub action. No animal fats. Instead of animal tallow (sodium tallowate) common to most soaps, we feature a pure vegetable base of palm and coconut oils. Our seaweed grain's scrub action, which helps remove hidden impurities, has been a family favorite in shower or bath for many years. In Spain, seaweed soap is even used as part of one's slimming or anti-cellulite routine. It stimulates circulation and helps discharge toxins. It's a soap both men and women will love.
node5:Product from Amazon platform with title and content: Title: 6pk - Seaweed Soap - Jabon de Algas Marinas - Grisi (3.5 Oz. X 6 Units). Content: Jabn Natural de Tocador
node6:Product from Amazon platform with title and content: Title: Cellulite Treatment Gel Cream for Skin Firming and Tightening -SALE! Cellulite Reduction and Removal Cream That Works! Powerful Grapefruit, Rosemary, Dead Sea Minerals &amp; Other Extracts Provide Anti Cellulite Properties to Get Rid of Cellulite Dimples!. Content: The powerhouse of berry extracts in True You's""Skin Firming Cellulite Treatment""reduces the appearance of that unsightly cellulite by promoting and improving blood circulation. It also helps in the removal of toxins from the skin. The vitamins and minerals in grapefruit, rosemary, pumpkin seed, papaya, ginger and other powerful extracts will feed your cells and keep them healthy and strong, which will also show in your skin! The anti-oxidants in True You'sCellulite Treatment Creamwill fight free radicals in the skin, binding to these free radicals, which gives them something to attach to and makes them harmless. Our restorative properties can help tone skin, even out skin color, and safely and gently cleanse skin reducing the appearance of cellulite on your body!We apologize if our cellulite gel is temporarily out of stock, due to the high demand of our product we sell out very quickly, so reserve yours while supplies last!
node7:Product from Amazon platform with title and content: Title: Dead Sea Anti-Cellulite Massage Soap By Jericho Cosmetics - 5.3 oz!. Content: Paloma's Jericho Dead Sea Anti-Cellulite Soap is designed with rows of nodules to massage and help combat cellulite. Contains Dead Sea minerals and dried Red Seaweed grains known to stimulate metabolism and blood circulation by penetrating the pores of the skin to help burn fat and smooth cellulite.
node8:Product from Amazon platform with title and content: Title: CELLULITE CREAM: #1 CAFFEINE &amp; RETINOL Body Firming Cream *** AS SEEN ON DR OZ *** Get Rid of Cellulite -Skin Firming - Cellulite Reduction - Bodishape Cellulite Reduction &amp; Body Firming Cream -With Active Ingredients CAFFEINE &amp; RETINOL * Clinically Proven To Eliminate Cellulite *** MADE IN USA *** 100 % UNCONDITIONAL Money Back Guarantee ***. Content: #1 Bestseller on Amazon - Cellulite Cream that Increases Your Skins Smoothness and Fights Ugly Cellulite CellsPotent Cellulite Reduction Cream with 4 Active Ingredients:-Caffeinethat Contains Theophylline Which Successfully Treats Cellulite-Retinolthat helps stimulate collagen growth & normalising the skin production process-Coenzymethat Promotes the Internal Combustion of Fat-Glaucinewhich is Responsible For Decreasing Fat DepositsYou will no longer be ashamed by the lumpy-bumpy skin, orange peel appearance that appears on your butt and thighs. You now can get rid of all appearances of this unsightly skin problem with Bodishape Cellulite Reduction Cream.- Formulated with Clinically Proven Caffeine and Retinol- Revolutionary Anti-Cellulite Cream Returns the Firmer and Smoother Skin- Perfect for Reducing Your Cellulite caused by Pregnancy or Weight Loss- You'll Love the Refreshing Fragrance100% Unconditional, NO RISK Money Back Guarantee if you are dissatisfied for any reason!!Order Your Jar Today! Click the orange ""Add to cart"" button at the upper right corner of this page
node9:Product from Amazon platform with title and content: Title: Apollo23 - Slimming Thighs Shaper, Elastic Stretch Shaper for Legs &amp; Thighs for Women, Black Color. Content: Features: Say NO to elephant legs now, special use for Thigh Extremely soft flexible fibre, firmly cover they body while breathe freely NOT stuffy Texture soft, comfortable, anti-microbial, deodorant and other effects Relax the muscles, relieve fatigue, help to regulate blood circulation. Use under condition: Air pressure, Exercise, Long standing, Rehabilitation Look after me: Water temperature no higher than 40, Line dry in shade after spinning, No ironing, No bleach, No tumble dry, No dry clean Weight: 0.1674lb
node10:Product from Amazon platform with title and content: Title: Shiseido Body Creator Aromatic Body Sculpting Concentrate Anti-Cellulite Body Care for Unisex, 7.2 Ounce. Content: An ultimate treatment to reshape body line Makes best use of aroma & physical massaging effects Quickly brings an ideal, beautiful body appearance Maximum drop in waist size of 4.5cm in 4 weeks Visible reduction of cellulite in 3 weeks - Shiseido - Body Creator - Body Care
node11:Product from Amazon platform with title and content: Title: ""Curel Life's Stages Pregnancy &amp; Motherhood Nuturing Comfort Moisture Cream 8.5 fl oz (251 ml)"". Content: Curel Life's Stages Pregnancy & Motherhood Nuturing Comfort Moisture Cream 8.5 fl oz (251 ml)Curel Life's Stages Moisturizers help women address the changing needs of their skin. Skin is constantly changing. That's why the Curel Skincare Experts focus on women's skin care needs throughout life.Curel Nuturing Comfort Moisture Cream was developed with OB/GYNs to address dry skin issues during pregnancy. This fast-absorbing cream boosts elasticity to alleviate dry, tight skin, making it soft and comfortable. It is also great for post-partum skin and safe to use on your baby.Paraben & petrolatum free; dermatologist & OB/GYN tested; non-greasy; Mineral oil-free; HypoallergenicDirections: Use dailyas your body moisturizer. For best results, use immediately after shower or bath. Gently massage into skin using a circular motion.
node12:Product from Amazon platform with title and content: Title: Skin Tight Body Firming Lotion Original Mango Scent with Peptides and Omegas. Content: The same collagen stimulating ingredients found in high end face firming creams is now find in high concentrations in our body skin firming lotion. Tighten and firm skin with advanced skin firming ingredients normally found in expensive face creams! An amazing combination of healing butters, omega blend, & green tea help skin to shed dead skin cells and create new healthy cells that will become much more collagen abundant with a longer collagen fiber resulting in younger looking, tighter skin. 8 fl oz
node13:Product from Amazon platform with title and content: Title: Lierac Morpho-Slim Stomach &amp; Waist-2.25 oz.. Content: A genuine innovation in skincare, this formula is specifically designed to help fight the appearance of unwanted curves in the stomach and waist area. The Morpho-Slim Stomach and Waist&nbsp;serum provides targeted action with an immediate &quot;girdle-effect&quot; to redefine and smooth body contours, and resculpt the stomach and waist.&nbsp; The figure is left looking transformed, slimmer, and firmer.
node14:Product from Amazon platform with title and content: Title: It Works! Facial Applicator (4) Pack. Content: The exclusive 45-minute Facial Applicator from It Works! uses a cream-infused cloth wrap to tighten, tone, and firm the skin for the appearance of a more youthful face in just 45 minutes. Skin looks and feels softer, smoother, and revitalized. Continuously hydrates for fresher, more luminous skin and a younger-looking you.These statements have not been evaluated by the Food and Drug Administration.This product is not intended to treat, diagnose, cure or prevent any disease.
node15:Product from Amazon platform with title and content: Title: Anti Cellulite Massage Oil with Juniper, Artemisia Essential Oils and Black Pepper Extract, 250 ml (Recipes Grandma Agafia). Content: Essential oil of juniper helps to regenerate tissue and prevents scarring. Effectively cleans and smooths the skin. The essential oil of wormwood has the property of ""burn"" fat and normalizes the hydro-lipid balance. Improves skin tone. Anti-inflammatory effect. Black pepper has a local irritant effect, which increases blood circulation in the skin. It speeds up metabolism.
node16:Product from Amazon platform with title and content: Title: Slim Girl Cellulite Reduction and Skin Firming Cream - Advanced Anti-Cellulite Formula. Content: Do Cellulite Creams Work?It depends on what is actually inside the creams.We are honest with our customers, and kind to the earth. Slim Girl - Cellulite Reducing Cream is developed by FDA regulated Pharmaceutical Lab, with the highest possible quality cellulite-reducing ingredients.Slim Girl Cream contains: Caffeine, L- Carnetine, Green Tea, Retinol, Vitamin E, Vitamin A, CoQ10, Avacado oil, Grape Seed oil.Slim Girl Anti-Cellulite Cream is known by our clients for high effectiveness, without side effects.Quickly reduces the appearance of cellulite, firms and improves over-all appearance of the skin.If you see a YoungYou logo on a product, it always means the highest quality and effectiveness.It really works, try and see it for yourself. We are confident you will love it and because of that we offer full refund, if you want to return this product for any reason.Shipped the same day. Expedited shipping available
node17:Product from Amazon platform with title and content: Title: Dermasilk Double Chin Firming Serum, 0.5 Fluid Ounce. Content: The neck can be one of the first areas to show signs of aging skin and the most difficult to treat. While sagging skin on our face and neck is caused by the reduction of collagen and elastin production, our neck and jaw line are also faced with an increase in fat deposits under the skin&#x2019;s surface. This adds to the sagging appearance of aging skin. Double Chin Firming Serum is specially formulated to combat sagging skin and fat deposits in the neck and jaw area.
node18:Product from Amazon platform with title and content: Title: Premium Stretch Mark Cream 4.0 Oz/118ml - (Professionally Formulated) w/ Natural Soothing Vitamins, Botanical Extracts, Skin Tightening Properties, and Collagen Building Peptide Agents. Content: Excel skin care's advanced formula is specifically designed to reduce the appearance of stretch marks caused by pregnancy, weight gain, growth spurts, and bodybuilding. Our cream will greatly enhance the elasticity of the skin preventing new stretch mark scarring to occur. Excel uses a wide range of high performance ingredients composed of peptides, antioxidants, and natural extracts which work synergistically to reduce the appearance of deep stretch mark tissue and discoloration associated with the scarring.
node19:Product from Amazon platform with title and content: Title: Fat-Fader Body Toning Lotion w 2.5% Aminophylline &amp; Raspberry Ketones 8 fl oz. Content: FAT-FADER's Parabens FREE Formula is the planet's most intense topical fat loss lotion on the market today. FAT-FADER attacks the fat and cellulite just below the skins surface to aid in the appearance of healthier, tighter and leaner looking skin. This clinically tested formula begins to work in just a few days for results you can SEE and FEEL! Applying FAT-FADER on the glutes, thighs, arms, legs, hips, and most importantly the abdominal area, may help to breakdown fat, keep skin toned and bring out muscle definition. FAT-FADER may also aid in the reduction of cellulite, increase skin elasticity and firmness. FAT-FADER is a light, non-oily, odorless, colorless lotion that is absorbed QUICKLY and will not leave stains on undergarments and clothing.",products,nc
"Classify the product represented by node13 using its subgraph data (text attributes and connections) as follows.

node0: Deluxe vinyl grill cover protecting Spirit 200/300 series, water-resistant, fits up to 50"", 2-year warranty.  
node1: 2-pack polycarbonate pan scrapers with varied designs for safe, non-scratch cleaning on all cookware.  
node2: 15-inch stainless steel tongs with soft rubber grips and manual lock for easy storage and grilling.  
node3: Bagless upright vacuum with tools (incomplete description).  
node4: 9-inch stainless steel spring tongs for professional kitchens, scalloped edges, versatile food handling.  
node5: 12-inch All-Clad tri-ply stainless fry pan with lid, ideal for searing, even heating, and induction use.  
node6: 4-cup OXO fat separator with strainer/stopper to remove fat from gravy; heat-resistant, easy pour.  
node7: Basic Camp Chef pan scraper (no additional details provided).  
node8: 11-inch stainless steel baster with silicone bulb for basting roasted meats, heat-resistant to 450°F.  
node9: 16-inch heavy-duty stainless tongs with patented lock and replaceable springs for commercial use.  
node10: 2 dozen stainless BBQ skewers with oval blades to prevent food spinning during grilling.  
node11: 12-piece T-fal nonstick cookware set with thermo-indicator, including pans, Dutch oven, and tools.  
node12: 9"" & 12"" stainless tongs set with locking handles, ergonomic grip, and hanging loop for storage.  
node13: 9-inch OXO stainless tongs with soft grips, locking mechanism, dishwasher-safe.  
node14: 7-inch stainless spring tongs for kitchen tasks, scalloped edges, easy cleaning.  
node15: 16"" heavy-duty restaurant-quality stainless serving tongs for hygienic, secure food handling.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node1, node4>,<node1, node5>,<node1, node6>,<node1, node7>,<node1, node8>,<node2, node4>,<node2, node9>,<node2, node10>,<node3, node11>,<node4, node9>,<node4, node11>,<node4, node12>,<node4, node13>,<node4, node14>,<node9, node15>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Home & Kitchen,"

node0: Deluxe vinyl grill cover protecting Spirit 200/300 series, water-resistant, fits up to 50"", 2-year warranty.  
node1: 2-pack polycarbonate pan scrapers with varied designs for safe, non-scratch cleaning on all cookware.  
node2: 15-inch stainless steel tongs with soft rubber grips and manual lock for easy storage and grilling.  
node3: Bagless upright vacuum with tools (incomplete description).  
node4: 9-inch stainless steel spring tongs for professional kitchens, scalloped edges, versatile food handling.  
node5: 12-inch All-Clad tri-ply stainless fry pan with lid, ideal for searing, even heating, and induction use.  
node6: 4-cup OXO fat separator with strainer/stopper to remove fat from gravy; heat-resistant, easy pour.  
node7: Basic Camp Chef pan scraper (no additional details provided).  
node8: 11-inch stainless steel baster with silicone bulb for basting roasted meats, heat-resistant to 450°F.  
node9: 16-inch heavy-duty stainless tongs with patented lock and replaceable springs for commercial use.  
node10: 2 dozen stainless BBQ skewers with oval blades to prevent food spinning during grilling.  
node11: 12-piece T-fal nonstick cookware set with thermo-indicator, including pans, Dutch oven, and tools.  
node12: 9"" & 12"" stainless tongs set with locking handles, ergonomic grip, and hanging loop for storage.  
node13: 9-inch OXO stainless tongs with soft grips, locking mechanism, dishwasher-safe.  
node14: 7-inch stainless spring tongs for kitchen tasks, scalloped edges, easy cleaning.  
node15: 16"" heavy-duty restaurant-quality stainless serving tongs for hygienic, secure food handling.","node0:Product from Amazon platform with title and content: Title: Glorious Montana 7569 Premium Cover for Spirit 200/300 Series. Content: Deluxe vinyl grill cover that will protect your grill from elements Heavy-duty material is long-lasting fit grills upto 50 inches Fits Spirit 200/300 series and Genesis Silver A/B grills Water resistant 2 year warranty
node1:Product from Amazon platform with title and content: Title: Lodge SCRAPERPK Durable Polycarbonate Pan Scrapers, Red and Black, 2-Pack. Content: From Lodge, maker of rugged cast-iron cookware, the Durable Polycarbonate Pan Scrapers come in a pack of 2 and make cleaning the stuck on food from cookware a breeze. Moulded in rugged Polycarbonate design safely scrapes without scratching. Each corner is a different design to easily clean any crevice or corner. Ideal for all cookware, with or without non-stick surfaces. Comes in a 2 pack with one red and one black.
node2:Product from Amazon platform with title and content: Title: GrillPro 40259 Stainless Steel Tong. Content: GrillPro's Stainless Steel accessories are a griller's must have tool. This Stainless Steel Tong is 15-Inch long with soft grip rubber inserts on the handles which makes it easy to hold on to. You can grip your food on the grill with ease. When storing these, they have a manual lock, which saves on storage space.
node3:Product from Amazon platform with title and content: Title: Dirt Devil Dynamite Plus Bagless Upright Vacuum with Tools, M084650RED. Content: A PLUS CONTENT STARTS HERE
node4:Product from Amazon platform with title and content: Title: Update International ST-9LR Stainless Steel Spring Tongs with Locking Ring, 9-Inch. Content: This spring tongs with locking ring can be used for any number of tasks in a professional kitchen. Made of 18/0 stainless steel material. A good pair of spring tongs can be used in the back or front of house because they can be used for anything from grabbing items on buffets to flipping meat or grabbing hot produce out of boiling water in the kitchen. These two-piece tongs are easy to clean and feature scalloped gripping edges. Measures 9-inch length.
node5:Product from Amazon platform with title and content: Title: All-Clad 41126 Stainless Steel Tri-Ply Bonded Dishwasher Safe 12-Inch Fry Pan with Lid / Cookware, Silver. Content: Sear, brown and pan fry everything from eggs to meat with the All-Clad Stainless Steel 12-Inch Covered Fry Pan. This pan's flat bottom and flared sides make it easy to toss food or turn it with a spatula. Its three-ply bonded stainless steel offers exceptional heating performance, even in induction cooking. The stick-resistant 18/10 stainless steel interior and long, comfortable handle will make this fry pan a go-to piece in your kitchen. For Searing, Browning and Pan Frying The flat bottom and flared sides of this 12-inch covered fry pan make it easy to toss food or to turn it with a spatula. The pan is ideal for cooking with oils and helps food develop rich flavor, bright color and crisp texture. The pan's cast and riveted stainless steel handle stays cool on the cooktop, so you can cook safely and comfortably. Premium Stainless Steel Construction Classic design, high performance and lifetime durability unite in the Stainless Collection, All-Clad's most popular line of cookware. Products in the collection feature an interior core of aluminum for even heating and a polished 18/10 stainless steel exterior and cooking surface for fine culinary performance. All-Clad stainless steel cookware features an interior starburst finish for excellent stick resistance. The bottom of each pan is engraved with a convenient capacity marking. What's in the Box 12-inch stainless steel fry pan with lid and warranty information.
node6:Product from Amazon platform with title and content: Title: OXO Good Grips 4-Cup Fat Separator. Content: Cut the fat with the OXO Good Grips Fat Separator with its own strainer and stopper. Pour your gravy into the Separator through the strainer and watch the fat rise to the top while lean gravy settles to the bottom. The heat-resistant strainer catches unwanted bits and the stopper prevents fat from entering the spout. Once the gravy has settled, remove the strainer and the stopper and pour out perfect gravy; a shield prevents fat from spilling over the top of the Separator. This heat-resistant Fat Separator has measurement markings for increased convenience and a non-slip handle for a comfortable, firm grip.
node7:Product from Amazon platform with title and content: Title: Camp Chef PAN SCRAPER,. Content: PAN SCRAPER,
node8:Product from Amazon platform with title and content: Title: Norpro 5898 Stainless Steel Baster. Content: The secret to beautiful roasted poultry, served moist and golden brown, is constant basting. This tool creates powerful suction to retrieve succulent juices. For best results, run it under hot water before basting, so the temperature of the baster will be warm. Measures 11-inch/28cm. Holds 1-1/2-ounce. Silicone bulb heat resistant to 450F/230C. Stainless steel with needle and brush. Silicone bulb.
node9:Product from Amazon platform with title and content: Title: TONG HVY/D W/LOCK SS 16&quot;, EA, 13-0509 EDLUND COMPANY, INC TONGS AND CADDIES. Content: * Features patented locking mechanism * Heavy duty replaceable stainless steel springs
node10:Product from Amazon platform with title and content: Title: 2 Dozen - Long Stainless Steel BBQ Skewers, Grill / Barbecue Shish Kebab Kabob Oval Blade skewers. Content: From kabobs to marshmallows...you can skewer your favorite foods with ease on these durable stainless steel skewers. They feature a slightly flattened blade to allow for easy turning (without the food spinning around).
node11:Product from Amazon platform with title and content: Title: T-fal C111SC74 Signature Nonstick Expert Easy Clean Interior Thermo-Spot Heat Indicator Dishwasher Safe PFOA Free Oven Safe Cookware Set, 12-Piece, Black. Content: T-fal Signature Nonstick Expert 12pc set. The set includes: 8-Inch Saute Pan, 11-Inch Saute Pan, 10.25-Inch Griddle, 1-Quart Saucepan, 2-Quart Saucepan, 5-Quart Dutch Oven, 3 nylon tools
node12:Product from Amazon platform with title and content: Title: 9&frac12; and 12-Inch &amp; Stainless Steel Tongs Set, Serving Tong, Wide Scalloped Gripping Edge, Barbecue Tong, BBQ Tong, Joint-Lock. Content: This multi-use stainless steel tong set is the answer for better serving, grilling and turning food while keeping your hand at a comfortable safe distance.This tong is made from durable stainless steel with the plastic-rubber handles for cool-touch handling and comfortable secure thumb grip handling, and also features a locking mechanism for closed safe spacing storage, with a convenient hanging loop.DIMENSIONS: Length - 12 & 9 InchesWidth - 1 InchesLength (prong head) - 3 Inches
node13:Product from Amazon platform with title and content: Title: OXO SoftWorks 9-Inch Locking Tongs. Content: SoftWorks Locking Tongs are sturdy, brushed stainless steel. The Tongs feature soft, comfortable, non-slip grip pads and they lock closed for easy storage. 9-inch length is ideal for cooking and serving. Dishwasher safe.
node14:Product from Amazon platform with title and content: Title: Update International ST-7 Stainless Steel Spring Tongs, 7-Inch. Content: This spring tongs can be used for any number of tasks in a professional kitchen. Made of 18/0 stainless steel material. A good pair of spring tongs can be used in the back or front of house because they can be used for anything from grabbing items on buffets to flipping meat or grabbing hot produce out of boiling water in the kitchen. These two-piece tongs are easy to clean and feature scalloped gripping edges. Measures 7-inch length.
node15:Product from Amazon platform with title and content: Title: 16&quot; Serving Tong Extra Heavy Duty Stainless Steel (1.2 mm) *Restaurant Quality*. Content: Get a grip on any serving situation with these stainless steel serving tongs. Handy in the kitchen, handsome on the table, these tongs are shaped in a rigid form for heavy duty use. Stainless steel body allows for flexibility while in use, and designed for heavy use and is ideal for touch free, safe and sanitary food service. Every chef knows the importance of a pair of sturdy tongs; this is a great tool for any restaurant.",products,nc
"Classify the product represented by node12 using its subgraph data (text attributes and connections) as follows.

node0: Textbook on condensed matter physics praised for breadth and conceptual coverage, recommended for graduate students.  
node1: Prep guide for Physics GRE by authors with physics research backgrounds and musical hobby.  
node2: Graduate text on solid-state physics emphasizing mathematical methods, widely used in academia.  
node3: GRE vocab flashcards from Manhattan Prep, known for expert instructors and rigorous selection.  
node4: Collection of University of Chicago graduate physics problems with solutions.  
node5: Diverse physics problems from Princeton, praised for depth and topic range.  
node6: Foundational statistical physics textbook, noted for engaging content.  
node7: Concise statistical mechanics overview with applications to phase transitions and modern topics.  
node8: Kinetics textbook in English/Russian, part of a theoretical physics series.  
node9: Quantum field theory textbook with missing description.  
node10: Comprehensive quantum mechanics textbook stressing problem-solving and advanced math.  
node11: Lagrangian dynamics problem-solving guide by physics experts.  
node12: Physics problem set with hints/answers, praised for stimulating critical thinking.  
node13: Classical electrodynamics textbook with missing description.  
node14: Advanced QCD textbook covering perturbative/nonperturbative methods, with exercises and updated research.  
node15: Modern QFT textbook exploring Standard Model, gauge theory, and quantum gravity concepts.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node1, node3>,<node1, node4>,<node2, node4>,<node2, node5>,<node2, node6>,<node2, node7>,<node2, node8>,<node4, node5>,<node4, node6>,<node4, node9>,<node4, node11>,<node4, node12>,<node5, node13>,<node6, node10>,<node6, node14>,<node9, node15>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Books,"

node0: Textbook on condensed matter physics praised for breadth and conceptual coverage, recommended for graduate students.  
node1: Prep guide for Physics GRE by authors with physics research backgrounds and musical hobby.  
node2: Graduate text on solid-state physics emphasizing mathematical methods, widely used in academia.  
node3: GRE vocab flashcards from Manhattan Prep, known for expert instructors and rigorous selection.  
node4: Collection of University of Chicago graduate physics problems with solutions.  
node5: Diverse physics problems from Princeton, praised for depth and topic range.  
node6: Foundational statistical physics textbook, noted for engaging content.  
node7: Concise statistical mechanics overview with applications to phase transitions and modern topics.  
node8: Kinetics textbook in English/Russian, part of a theoretical physics series.  
node9: Quantum field theory textbook with missing description.  
node10: Comprehensive quantum mechanics textbook stressing problem-solving and advanced math.  
node11: Lagrangian dynamics problem-solving guide by physics experts.  
node12: Physics problem set with hints/answers, praised for stimulating critical thinking.  
node13: Classical electrodynamics textbook with missing description.  
node14: Advanced QCD textbook covering perturbative/nonperturbative methods, with exercises and updated research.  
node15: Modern QFT textbook exploring Standard Model, gauge theory, and quantum gravity concepts.","node0:Product from Amazon platform with title and content: Title: Condensed Matter Physics (Wiley-Interscience). Content: ""In summary, the main strength of the book is that it conveys the enormous breadth of modern condensed matter physics and gives a basic, often conceptual account of these diverse topics."" (Physics Today, June 2001)""...there is clearly much here that lecturers and readers at the graduate level will find valuable."" (Contemporary Physics, Vol 41/5, 2000)""I can thoroughly recommend it to students, graduates and teachers. I would even say that everyone who is interested more deeply in the exciting world of matter should have this book on their library shelf."" (European Journal of Physics, Vol 21, 2000)""...responds to the need in both the academic and research communities for a modern introductory treatment of this essential subject."" (Zeitschrift Fur Kristollographie, Vol. 218, No. 7, 2003)
node1:Product from Amazon platform with title and content: Title: Conquering the Physics GRE. Content: Yoni Kahn is a PhD student at Massachusetts Institute of Technology in theoretical high-energy particle physics. During his undergraduate studies at Northwestern University, he worked on dark matter phenomenology and spent a summer at Jefferson Lab doing research in nuclear physics. He is currently working on the DarkLight experiment to detect a new force of nature, as well as other experiments related to dark matter detection. In his spare time he is a freelance French hornist in the Boston area. Adam Anderson is a PhD student at Massachusetts Institute of Technology in experimental particle physics, working on direct dark matter detection and neutrino physics. He is currently a member of the Cryogenic Dark Matter Search, doing data analysis and studying how dark-matter-style detectors can be applied to other measurements in particle physics and astrophysics. His undergraduate studies were in physics and mathematics at the University of Chicago.
node2:Product from Amazon platform with title and content: Title: Principles of the Theory of Solids. Content: ' ... this is an admirable book. Indeed, it scarcely needs my commendation: it is already being widely used as a graduate text on both sides of the Atlantic.' Nature' ... this book is admirably suited to anyone wishing to learn about the mathematical methods used in the physics of the solid state, who has adequate preparation ... and the book should serve well as a text for a graduate course.' American Journal of Physics'An outstanding account of the theoretical principles of the physics of perfect crystalline solids.' Choice
node3:Product from Amazon platform with title and content: Title: 500 Advanced Words: GRE Vocabulary Flash Cards. Content: The Manhattan Prep philosophy is simple: We aim to help students achieve their goals by providing the best curriculum and the highest-quality instructors in the industry. Manhattan Prep hires fewer than 1 in 10 qualified applicants for its teaching positions, ensuring every instructor has years of experience and a 99th percentile score. So you can trust our books are developed by the very best.
node4:Product from Amazon platform with title and content: Title: University of Chicago Graduate Problems in Physics with Solutions. Content: David F. Greenbergis professor of sociology at New York University.Valentine L. Telegdi, retired, was the Enrico Fermi Distinguished Service Professor in the Department of Physics at the University of Chicago.Jeremiah A. Croninwas formerly assistant professor of physics at Brown University.
node5:Product from Amazon platform with title and content: Title: Princeton Problems in Physics with Solutions. Content: ""A glance at the problems shows that they have been carefully selected to cover a wide range of different topics. . . . What is most surprising about these problems is the incredible range and depth of subject matter.""--American Journal of Physics
node6:Product from Amazon platform with title and content: Title: Statistical Physics, Third Edition, Part 1: Volume 5 (Course of Theoretical Physics, Volume 5). Content: 'Stimulating reading' New Scientist
node7:Product from Amazon platform with title and content: Title: Statistical Mechanics in a Nutshell (In a Nutshell (Princeton)). Content: ""Unlike typical textbooks . . . [Statistical Mechanics in a Nutshell] presents statistical mechanics as a more general theory with broader applications. . . . A graduate student or researcher who wants to explore the applications of statistical mechanics would be very well served by this book.""--Choice""Peliti'sStatistical Mechanics in a Nutshellis a fantastic reference for those who know the subject, teach it, or need a quick technical reminder, especially on the topic of phase transitions, which are consistently featured in modern-day discussions. . . .Statistical Mechanics in a Nutshellprovides the more general overview, with topics such as the renormalization group method. It includes a good mix of fundamental thermodynamics, phase behaviour, and other key subjects.""--Physics Today
node8:Product from Amazon platform with title and content: Title: Physical Kinetics: Volume 10 (Course of Theoretical Physics S). Content: Text: English, Russian (translation)--This text refers to an alternatePaperbackedition.
node9:Product from Amazon platform with title and content: Title: An Introduction To Quantum Field Theory (Frontiers in Physics). Content: missing
node10:Product from Amazon platform with title and content: Title: Introduction to Quantum Mechanics (2nd Edition). Content: Unlike Newton's mechanics, or Maxwell's electrodynamics, or Einstein's relativity, quantum theory was not created&#151;or even definitively packaged&#151;by one individual, and it retains to this day some of the scars of its exhilarating but traumatic youth. There is no general consensus as to what its fundamental principles are, how it should be taught, or what it really ""means."" Every competent physicist can ""do"" quantum mechanics, but the stories we tell ourselves about what we are doing are as various as the tales of Scheherazade, and almost as implausible. Niels Bohr said, ""If you are not confused by quantum physics then you haven't really understood it""; Richard Feynman remarked, ""I think I can safely say that nobody understands quantum mechanics.""The purpose of this book is to teach you how todoquantum mechanics. Apart from some essential background in Chapter 1, the deeper quasiphilosophical questions are saved for the end. I do not believe one can intelligently discuss what quantum mechanicsmeansuntil one has a firm sense of what quantum mechanicsdoes.But if you absolutely cannot wait, by all means read the Afterword immediately following Chapter 1.Not only is quantum theory conceptually rich, it is also technically difficult, and exact solutions to all but the most artificial textbook examples are few and far between. It is therefore essential to develop special techniques for attacking more realistic problems. Accordingly, this book is divided into two parts; Part I covers the basic theory, and Part II assembles an arsenal of approximation schemes, with illustrative applications. Although it is important to keep the two partslogicallyseparate, it is not necessary to study the material in the order presented here. Some instructors, for example, may wish to treat time-independent perturbation theory immediately after Chapter 2.This book is intended for a one-semester or one-year course at the junior or senior level. A one-semester course will have to concentrate mainly on Part I; a full-year course should have room for supplementary material beyond Part II. The reader must be familiar with the rudiments of linear algebra (as summarized in the Appendix), complex numbers, and calculus up through partial derivatives; some acquaintance with Fourier analysis and the Dirac delta function would help. Elementary classical mechanics is essential, of course, and a little electrodynamics would be useful in places. As always, the more physics and math you know the easier it will be, and the more you will get out of your study. But I would like to emphasize that quantum mechanics is not, in my view, something that flows smoothly and naturally from earlier theories. On the contrary, it represents an abrupt and revolutionary departure from classical ideas, calling forth a wholly new and radically counterintuitive way of thinking about the world. That, indeed, is what makes it such a fascinating subject.At first glance, this book may strike you as forbiddingly mathematical. We encounter Legendre, Hermite, and Laguerre polynomials, spherical harmonics, Bessel, Neumann, and Hankel functions, Airy functions, and even the Riemann zeta function&#151;not to mention Fourier transforms, Hilbert spaces, hermitian operators, Clebsch-Gordan coefficients, and Lagrange multipliers. Is all this baggage really necessary? Perhaps not, but physics is like carpentry: Using the right tool makes the jobeasier,not more difficult, and teaching quantum mechanics without the appropriate mathematical equipment is like asking the student to dig a foundation with a screwdriver. (On the other hand, it can be tedious and diverting if the instructor feels obliged to give elaborate lessons on the proper use of each tool. My own instinct is to hand the students shovels and tell them to start digging. They may develop blisters at first, but I still think this is the most efficient and exciting way to learn.) At any rate, I can assure you that there is no deep mathematics in this book, and if you run into something unfamiliar, and you don't find my explanation adequate, by all meansasksomeone about it, or look it up. There are many good books on mathematical methods&#151;I particularly recommend Mary Boas, Mathematical Methods in the Physical Sciences, 2nd ed., Wiley, New York (1983), or George Arfken and Hans-Jurgen Weber,Mathematical Methods for Physicists,5th ed., Academic Press, Orlando (2000). But whatever you do, don't let the mathematics&#151;which, for us, is only atool&#151;interfere with the physics.Several readers have noted that there are fewer worked examples in this book than is customary, and that some important material is relegated to the problems. This is no accident. I don't believe you can learn quantum mechanics without doing many exercises for yourself. Instructors should of course go over as many problems in class as time allows, but students should be warned that this is not a subject about which anyone has natural intuitions&#151;you're developing a whole new set of muscles here, and there is simply no substitute for calisthenics. Mark Semon suggested that I offer a ""Michelin Guide"" to the problems, with varying numbers of stars to indicate the level of difficulty and importance. This seemed like a good idea (though, like the quality of a restaurant, the significance of a problem is partly a matter of taste); I have adopted the following rating scheme:* an essential problem that every reader should study;** a somewhat more difficult or more peripheral problem;*** an unusually challenging problem, that may take over an hour.(No stars at all means fast food: OK if you're hungry, but not very nourishing.) Most of the one-star problems appear at the end of the relevant section; most of the three-star problems are at the end of the chapter. A solution manual is available (to instructors only) from the publisher.In preparing the second edition I have tried to retain as much as possible the spirit of the first. The only wholesale change is Chapter 3, which was much too long and diverting; it has been completely rewritten, with the background material on finite-dimensional vector spaces (a subject with which most students at this level are already comfortable) relegated to the Appendix. I have added some examples in Chapter 2 (and fixed the awkward definition of raising and lowering operators for the harmonic oscillator). In later chapters I have made as few changes as I could, even preserving the numbering of problems and equations, where possible. The treatment is streamlined in places (a better introduction to angular momentum it! Chapter 4, for instance, a simpler proof of the adiabatic theorem in Chapter 10, and a new section on partial wave phase shifts in Chapter 11). Inevitably, the second edition is a bit longer than the first, which I regret, but I hope it is cleaner and more accessible.I have benefited from the comments and advice of many colleagues, who read the original manuscript, pointed out weaknesses (or errors) in the first edition, suggested improvements in the presentation, and supplied interesting problems. I would like to thank in particular P. K. Aravind (Worcester Polytech), Greg Benesh (Baylor), David Boness (Seattle), Burt Brody (Bard), Ash Carter (Drew), Edward Chang (Massachusetts), Peter Copings (Swarthmore), Richard Crandall (Reed), Jeff Dunham (Middlebury), Greg Elliott (Puget Sound), John Essick (Reed), Gregg Franklin (Carnegie Mellon), Henry Greenside (Duke), Paul Haines (Dartmouth), J. R. Huddle (Navy), Larry Hunter (Amherst), David Kaplan (Washington), Alex Kuzmich (Georgia Tech), Peter Leung (Portland State), Tony Liss (Illinois), Jeffry Mallow (Chicago Loyola), James McTavish (Liverpool), James Nearing (Miami), Johnny Powell (Reed), Krishna Rajagopal (MIT), Brian Raue (Florida International), Robert Reynolds (Reed), Keith Riles (Michigan), Mark Semon (Bates), Herschel Snodgrass (Lewis and Clark), John Taylor (Colorado), Stavros Theodorakis (Cyprus), A. S. Tremsin (Berkeley), Dan Velleman (Amherst), Nicholas Wheeler (Reed), Scott Willenbrock (Illinois), William Wootters (Williams), Sam Wurzel (Brown), and Jens Zorn (Michigan).
node11:Product from Amazon platform with title and content: Title: ""Schaum's Outline of Lagrangian Dynamics"". Content: McGraw-Hill authors represent the leading experts in their fields and are dedicated to improving the lives, careers, and interests of readers worldwide
node12:Product from Amazon platform with title and content: Title: Problems for Physics Students: With Hints and Answers. Content: ' ... there's enough in the physics of the world around us today to stimulate everyone's imagination; and problems like Dr Riley's are excellent ways of exercising it.' Contemporary Physics
node13:Product from Amazon platform with title and content: Title: Classical Electrodynamics (Advanced Book Program). Content: missing
node14:Product from Amazon platform with title and content: Title: Quantum Chromodynamics. Content: From the reviews of the second edition:""This is the second edition of the very successful book on quantum chromodynamics (QCD), which is part of an extensive series of textbooks by Greiner and co-authors. The second edtion is clearly an advance on the first and continues to be a very useful advanced textbook."" (C.A Hurst, Mathematical Reviews, 2003 k)""This book is a thorough introduction to the perturbative and nonperturbative Quantum Chromodynamics (QCD) for advanced level graduate students in theoretical physics and scientists in high energy physics. It contains many worked-out exercises . In conclusion, this book constitutes an excellent theoretical reference book, reflecting very well the present situation and problems in the field ."" (Laurent Favart, Physicalia, Vol. 25 (4), 2003)
node15:Product from Amazon platform with title and content: Title: Quantum Field Theory: A Modern Introduction. Content: ""The book provides an excellent, up-to-date account of quantum field theory and the approach to quantum gravity. It is well written and well organized to be used not only by anyone who intends to do research work in this field but also for anyone at the level of an advanced graduate student or beyond who is interested in broadening his/her perspectives on what might be the elements of a 'final theory' in physics."" --Hans J. Haubold, United Nations Office for Outer Space""Unlike older textbooks that focused on quantum electrodynamics (QED), this text centers on the Standard Model and includes gauge theory. Each chapter concludes with a problem set."" --SciTech Book News""A massive work covering a grand variety of traditional subjects dealt with in most textbooks on this subject, and has done all of us the favor of including, in addition, a good number of current research topics that are normally dealt with only in conference proceedings or specialized texts of their own. This is a lot of book, especially for the relatively modest price."" --International Journal of Quantum Chemistry""Kaku discusses a mind-boggling variety of topics. . . valuable references. . .useful."" --Physics Today""This updated and expanded version of many of the standard QFT texts is refreshingly independent. . .an effective introduction to a breathtakingly wide range of topics, and gives an admirable general ordering and emphasis of life material. . .a fascinating resource for a wealth of information and explanation. What more can one expect between two covers with such a menu?"" --Australian and New Zealand Physicist",products,nc
"Classify the product represented by node10 using its subgraph data (text attributes and connections) as follows.

node0: Bob Marley's music embodies hope and unity, celebrated by Rita Marley as timeless, bridging generations.  
node1: Burning Spear's debut album blends militant reggae with Rasta themes, honoring Marcus Garvey, a reggae classic by Chris Nickson.  
node2: UK reissue of Jamaica-exclusive ""Soul Revolution Part 2"" with bonus tracks ""Kaya"" and ""Duppy Conqueror"" (alt takes), by Universal.  
node3: Limited live The Clash recording from 1982 NYC, remastered with deluxe edition featuring 32-page hardbound book and 16 tracks.  
node4: Jack White's follow-up album ""Lazaretto"" to Blunderbuss, released by Third Man/Columbia, preceded by single ""Lazaretto"".  
node5: Bob Marley's pre-Island recordings (late '60s-'70s) with Lee ""Scratch"" Perry, compiled in 2002 reggae anthology.  
node6: Soul Rebels offers 24-bit DVD-Audio and 5.1 surround sound, compatible with all DVD players, featuring liner notes and photos.  
node7: The Wailers' 1973 reggae classic ""Burnin"" featuring ""I Shot the Sheriff"" and ""Get Up, Stand Up,"" final album with Peter Tosh and Bunny Wailer.  
node8: Bob Marley's early Tuff Gong label tracks (1960s) collected, including ""Lively Up Yourself"" and ""Concrete Jungle.""  
node9: Early Bob Marley & Wailers singles on Wail 'n Soul 'm imprint, featuring ""Stir It Up"" and other Rock Steady classics (23 tracks).  
node10: Deluxe edition of Bob Marley's ""Rastaman Vibration"" with bonus tracks (content details missing).  
node11: Rare Wailers tracks from 1964-66 Studio One sessions, including alternate takes and singles on Dodd's labels, a collector's treasure.  
node12: Posthumous Bob Marley album ""Confrontation"" featuring unreleased tracks and singles from his lifetime recordings.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node3>,<node0, node4>,<node0, node5>,<node0, node6>,<node2, node7>,<node5, node8>,<node5, node9>,<node5, node10>,<node5, node11>,<node5, node12>,<node6, node7>,<node7, node12>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",CDs & Vinyl,"

node0: Bob Marley's music embodies hope and unity, celebrated by Rita Marley as timeless, bridging generations.  
node1: Burning Spear's debut album blends militant reggae with Rasta themes, honoring Marcus Garvey, a reggae classic by Chris Nickson.  
node2: UK reissue of Jamaica-exclusive ""Soul Revolution Part 2"" with bonus tracks ""Kaya"" and ""Duppy Conqueror"" (alt takes), by Universal.  
node3: Limited live The Clash recording from 1982 NYC, remastered with deluxe edition featuring 32-page hardbound book and 16 tracks.  
node4: Jack White's follow-up album ""Lazaretto"" to Blunderbuss, released by Third Man/Columbia, preceded by single ""Lazaretto"".  
node5: Bob Marley's pre-Island recordings (late '60s-'70s) with Lee ""Scratch"" Perry, compiled in 2002 reggae anthology.  
node6: Soul Rebels offers 24-bit DVD-Audio and 5.1 surround sound, compatible with all DVD players, featuring liner notes and photos.  
node7: The Wailers' 1973 reggae classic ""Burnin"" featuring ""I Shot the Sheriff"" and ""Get Up, Stand Up,"" final album with Peter Tosh and Bunny Wailer.  
node8: Bob Marley's early Tuff Gong label tracks (1960s) collected, including ""Lively Up Yourself"" and ""Concrete Jungle.""  
node9: Early Bob Marley & Wailers singles on Wail 'n Soul 'm imprint, featuring ""Stir It Up"" and other Rock Steady classics (23 tracks).  
node10: Deluxe edition of Bob Marley's ""Rastaman Vibration"" with bonus tracks (content details missing).  
node11: Rare Wailers tracks from 1964-66 Studio One sessions, including alternate takes and singles on Dodd's labels, a collector's treasure.  
node12: Posthumous Bob Marley album ""Confrontation"" featuring unreleased tracks and singles from his lifetime recordings.","node0:Product from Amazon platform with title and content: Title: missing. Content: ""Bob's music has always conveyed a message of hope, unity and love. It has brought countless people together as it did that night 30 years ago in Pittsburgh. To hear that music today and to be able to share it with a new generation shows that Bob is as relevant today as he was 30 years ago,"" says Rita Marley.
node1:Product from Amazon platform with title and content: Title: ""Burning Spear: Marcus Garvey/Garvey's Ghost"". Content: This was where it all started for Burning Spear, in those days a vocal trio of Winston Rodney, Delroy Hines, and Rupert Milligton. And what a bomb to drop for a debut! It was heavier, and more militant, than anything that had ever been heard in reggae before, taking elements of the music and combining them in a new way. A concept album of sorts, it helped raise awareness of the black leader while still keeping a strong Rasta vibe to the sound, hypnotic and dread. Time has shown it to be one of the classic albums of reggae, charged and powerful.Chris Nickson
node2:Product from Amazon platform with title and content: Title: Soul Revolution Part 2. Content: UK reissue of what was previously a Jamaica exclusive release, the followup to the 'Soul Rebels' album, includes two bonus tracks, 'Kaya' (Alternate Take) & 'Duppy Conqueror' (Alternate Take). Universal.
node3:Product from Amazon platform with title and content: Title: missing. Content: Limited edition includes a bonus 24 page booklet and is packaged in a digi-book! This previously unreleased live recording captures the band on devastating form on the 13th October 1982 at the New York stadium, and has been fully remastered. This deluxe edition includes a 32 page hardbound book. Tracks, Kosmo Vinyl Introduction; London Calling; Police On My Back; The Guns of Brixton; Tommy Gun; The Magnificent Seven; Armagideon Time; Magnificent 7 (Return); Rock The Casbah; Train In Vain; Career Opportunities; Spanish Bombs; Clampdown; English Civil War; Should I Stay Or Should I Go; I Fought The Law.
node4:Product from Amazon platform with title and content: Title: missing. Content: Jack White presents his new album Lazaretto, on Third Man Records/Columbia. Lazaretto inhabits an exciting place in White's expansive discography as the follow-up to 2012's Gold-certified international #1 Blunderbuss, and will be preceded by first single and title track &#34;Lazaretto,&#34; to be released later this month.
node5:Product from Amazon platform with title and content: Title: Trenchtown Rock-Anthology. Content: Twenty years after his tragic death, Bob Marley remains a revered figure and musical legend. This collections features the best of Marley's pre-Island recordings from the late sixties and early seventies, including his seminal sides for Lee \Scratch"" Perry.Genre:Reggae MusicMedia Format:Compact DiskRating:Release Date:5-MAR-2002""""""
node6:Product from Amazon platform with title and content: Title: Soul Rebels. Content: 24 bit / 96 kHz DVD-Audio and 24 bit / 48 kHz Dolby Digital 5.1 options Stunning 5.1 surround sound Album Liner Notes Artist Photos Plays on ALL DVD players
node7:Product from Amazon platform with title and content: Title: Burnin. Content: In the wake of reggae's breakthrough into rock awareness with the Robin Hood saga,The Harder They Come, the soundtrack that first rooted the music's sultry push beat and seductive patois in the underclass struggles of modern Jamaica erupted forcefully on this 1973 classic--The Wailers' second album targeting beyond their underground to fresh, impressionable rock fans. What was a revelation to rockers was really the work of a seasoned band captured on the eve of internal upheaval: Trenchtown stars since the late '60s, the band's most charismatic member, Bob Marley, loomed as its perceived frontman, a development which hastened the departures of Peter Tosh and Bunny Wailer and madeBurnin'the final statement from that earlier configuration. The original version of &quot;I Shot the Sheriff,&quot; which had spread reggae's outlaw ethos and staccato, propulsive sound on Eric Clapton's hit cover, is more than matched by the anthemic &quot;Get Up, Stand Up,&quot; the call-to-arms of &quot;Burnin' And Lootin',&quot; the Rastafarian pride of &quot;Rasta Man Chant,&quot; as well as strong remakes of &quot;Small Axe&quot; and &quot;Duppy Conqueror.&quot;--Sam Sutherland
node8:Product from Amazon platform with title and content: Title: 127 King Street Kingston. Content: Bob Marley is an icon. Over two decades after his death, his music continues to thrill those who hear it, whether they are new fans or long-time followers. His music speaks to the common man and celebrates life. Whether you prefer the early recordings from the '60s or his 'hit period' in the '70s, there's rarely a dull moment in his catalog. This collection revisits all of Bob and The Wailers releases on the first Tuff Gong label, which was based at 127 King Street, Kingston Jamaica. 23 tracks including 'Lively Up Yourself', 'Trench Town Rock', 'Satisfy My Soul Jah-Jah', 'Concrete Jungle and many others..
node9:Product from Amazon platform with title and content: Title: ""Wail'n Soul'm Singles"". Content: Bob Marley is an icon. Over two decades after his death, his music continues to thrill those who hear it, whether they are new fans or long-time followers. His music speaks to the common man and celebrates life. Whether you prefer the early recordings from the '60s or his 'hit period' in the '70s, there's rarely a dull moment in his catalog. This album is from the JAD catalogue, which draws together the first flush of singles that Bob Marley & The 'Wailing' Wailers released on their Wail 'n Soul 'm imprint. Full of classic tracks like 'Stir It Up', 'Mellow Mood', 'Freedom Time' and 'Bend Down Low', Singles Selecta finds Bob, Peter, Bunny & Rita releasing one Rock Steady gem after another. 23 total tracks. Universal. 2005.
node10:Product from Amazon platform with title and content: Title: Rastaman Vibration [Deluxe Edition w/ Bonus Tracks]. Content: missing
node11:Product from Amazon platform with title and content: Title: missing. Content: This album consists of rare Wailers titles, alternate takes, and original single mixes, all recorded between 1964 and 1966 for late producer Clement Dodd at his Studio One recording studio at 13 Brentford Road in Kingston, Jamaica. The release of these seldom-heard tracks will be a cause for celebration among true Wailers collectors. All titles, takes, and mixes presented here were issued as singles in Jamaica on Dodd-owned labels like Coxsone, Studio One, Supreme, Tabernacle, and Wincox. These are indeed rare; not one has been previously used in Heartbeat's extensive series of albums documenting the Wailers' formative years at Studio One.
node12:Product from Amazon platform with title and content: Title: Confrontation. Content: 1983 posthumous release from the Reggae legend. The songs on this album were compiled from unreleased material and singles recorded during Marley's lifetime.",products,nc
"Classify the product represented by node6 using its subgraph data (text attributes and connections) as follows.

node0: Caroline Linden transitions from math/software to romance writing, winning awards like RITA.  
node1: Melody Thomas’s historical romance passion sparked by Tower of London’s intrigue and teenage fascination.  
node2: Secret identities and espionage drive Nathaniel & Emily’s Regency-era romance in a suspenseful Scandalous Brides entry.  
node3: Daniel Mackenzie pursues Violet amid spiritualism intrigue in a Victorian-era romance blending chemistry and secrets.  
node4: Fantasy romance with demon bargain, emotional depth, and praise for Bradley’s blend of danger and desire.  
node5: Hannah and Asher MacGregor navigate family duty vs. love in a series praised for strong conflict and mixed-race heritage.  
node6: Debut Regency romance praised for wit, moral themes, and fiery chemistry, earning starred reviews and fan acclaim.  
node7: Comedic rom-com of a drugged duke choosing a servant bride in a My Fair Lady-inspired Spindle Cove series.  
node8: Childhood betrothed pair reunite: duke’s wealth vs. actress’s career, set against a theatrical backdrop.  
node9: Three Christmas novellas by award-winning Cheryl Bolen, celebrating Regency-era romance and festive tales.  
node10: Gambler’s widow and war veteran confront past scars in a Regency-era love story of financial stakes and societal judgment.  
node11: Holiday romance with steamy chemistry, praised as heartfelt and sexy, perfect for Christmas escapism.  
node12: Duke accused of murder seeks redemption with ex-lover in a dark, sensual series installment by MacLean.  
node13: Lonely Lords series highlights Burrowes’ masterful flawed characters and emotional depth in this critically acclaimed entry.  
node14: Quirky farm romance with humor and heat, featuring a bold heroine and a charming, edgy love story.  
node15: Jess Michaels authors erotic romance under dual names, runs The Passionate Pen website.  
node16: Daria flees to Scotland, finds wounded hero in this Hadley Green spin-off blending adventure and romance.  
node17: Darcy Burke’s author bio: RWA finalist, British enthusiast, and family-focused writer of happy endings.  
node18: Rushed engagement between Rebecca and reformed rake sparks wit and charm in a Kingsborough Ball series entry.  
node19: Bow Street runner and mysterious woman confront past secrets and passion in Kleypas’ intense historical thriller.  
node20: Holiday romance follows a guardian, widow, and mute child finding love amid Christmas magic without clichés.  
node21: Anne Mallory’s author profile: Golden Heart finalist, Michigan native, and Bay Area-based romance novelist.  
node22: Product content missing.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node3>,<node0, node4>,<node2, node6>,<node2, node7>,<node2, node8>,<node4, node10>,<node5, node6>,<node5, node9>,<node5, node14>,<node5, node15>,<node6, node12>,<node6, node13>,<node6, node16>,<node6, node17>,<node6, node18>,<node8, node19>,<node8, node20>,<node9, node11>,<node9, node22>,<node10, node13>,<node12, node21>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Books,"

node0: Caroline Linden transitions from math/software to romance writing, winning awards like RITA.  
node1: Melody Thomas’s historical romance passion sparked by Tower of London’s intrigue and teenage fascination.  
node2: Secret identities and espionage drive Nathaniel & Emily’s Regency-era romance in a suspenseful Scandalous Brides entry.  
node3: Daniel Mackenzie pursues Violet amid spiritualism intrigue in a Victorian-era romance blending chemistry and secrets.  
node4: Fantasy romance with demon bargain, emotional depth, and praise for Bradley’s blend of danger and desire.  
node5: Hannah and Asher MacGregor navigate family duty vs. love in a series praised for strong conflict and mixed-race heritage.  
node6: Debut Regency romance praised for wit, moral themes, and fiery chemistry, earning starred reviews and fan acclaim.  
node7: Comedic rom-com of a drugged duke choosing a servant bride in a My Fair Lady-inspired Spindle Cove series.  
node8: Childhood betrothed pair reunite: duke’s wealth vs. actress’s career, set against a theatrical backdrop.  
node9: Three Christmas novellas by award-winning Cheryl Bolen, celebrating Regency-era romance and festive tales.  
node10: Gambler’s widow and war veteran confront past scars in a Regency-era love story of financial stakes and societal judgment.  
node11: Holiday romance with steamy chemistry, praised as heartfelt and sexy, perfect for Christmas escapism.  
node12: Duke accused of murder seeks redemption with ex-lover in a dark, sensual series installment by MacLean.  
node13: Lonely Lords series highlights Burrowes’ masterful flawed characters and emotional depth in this critically acclaimed entry.  
node14: Quirky farm romance with humor and heat, featuring a bold heroine and a charming, edgy love story.  
node15: Jess Michaels authors erotic romance under dual names, runs The Passionate Pen website.  
node16: Daria flees to Scotland, finds wounded hero in this Hadley Green spin-off blending adventure and romance.  
node17: Darcy Burke’s author bio: RWA finalist, British enthusiast, and family-focused writer of happy endings.  
node18: Rushed engagement between Rebecca and reformed rake sparks wit and charm in a Kingsborough Ball series entry.  
node19: Bow Street runner and mysterious woman confront past secrets and passion in Kleypas’ intense historical thriller.  
node20: Holiday romance follows a guardian, widow, and mute child finding love amid Christmas magic without clichés.  
node21: Anne Mallory’s author profile: Golden Heart finalist, Michigan native, and Bay Area-based romance novelist.  
node22: Product content missing.","node0:Product from Amazon platform with title and content: Title: I Love the Earl. Content: Caroline Linden was born a reader, not a writer. She earned a math degree from Harvard University and wrote computer software before turning to writing fiction. Ten years, twelve books, two Red Sox championships, and one dog later, she has never been happier with her decision. Her books have won the NEC Reader&#39;s Choice Beanpot Award, the Daphne du Maurier Award, and RWA&#39;s RITA&#174; Award. Since she never won any prizes in math, she takes this as a sign that her decision was also a smart one.
node1:Product from Amazon platform with title and content: Title: Wild and Wicked in Scotland. Content: Melody Thomas is a wordsmith, a creator of dreams, and a passionate believer in happy endings. A product of thirteen schools and twenty-two moves stretching across the United States and Europe, she is a self-proclaimed gypsy. Her fascination with historical romance began when, in her teens, she visited the Tower of London and learned that Henry the Eighth had beheaded two of his wives. This was great fodder for her teenage imagination and the start of a love affair with history, intrigue, and irresistible heroes.
node2:Product from Amazon platform with title and content: Title: The Handbook to Handling His Lordship (Scandalous Brides (Mass Market)). Content: Emily Portsman, who works at the Tantalus Club, is impressed by Nathaniel Stokes, the quiet, bespectacled Earl of Westfall. But Emily is really former governess Rachel Newbury, and Nathaniel is Nate Stokes, one of Wellington&#x2019;s top spies, who has been forced to leave his life as a secret agent and claim his title. Bored by his current lifestyle, Nathaniel amuses himself by finding lost belongings for the town. His latest commission, though, is different: he is to locate Rachel Newbury, who is rumored to have murdered Lord Ebberling&#x2019;s wife. Concealed identities, dark secrets, and false accusations add to the suspense as Nate and Emily begin to fall in love with each other. This is the fourth book in Enoch&#x2019;s exciting Scandalous Brides series, and libraries will want the full run of these Regency-era tales. --Shelley Mosley
node3:Product from Amazon platform with title and content: Title: The Wicked Deeds of Daniel Mackenzie (Mackenzies Series). Content: In the past, ladies have slapped Daniel Mackenzie for kissing them, but this is the first time a woman whacked Daniel on the head with a vase. Then again, Violet Bastien is not exactly a typical English lady. From the moment they first meet, Daniel knows that Violet does not really communicate with ghosts, but Violet mistakes Daniel&#x2019;s interest in her professional &#x201C;devices&#x201D; as a threat to her business. One kiss and one major migraine later, Daniel discovers that Violet has fled London with her mother and their maid. Tracking down Violet now becomes Daniel&#x2019;s number one priority because while the lady might have more than her share of secrets, it is no secret to Daniel that Violet is the only woman in the world for him. The sixth book in RITA Award&#x2013;winning Ashley&#x2019;s Mackenzie series will not disappoint fans with its scintillating blend of captivating characters, incendiary sexual chemistry, and an expertly evoked late-Victorian setting that makes excellent use of the era&#x2019;s fascination with both spiritualism and scientific advances. --John Charles
node4:Product from Amazon platform with title and content: Title: With This Ring (The Wicked Worthingtons). Content: Praise forWhen She Said I Do""Bradley puts her unique touch on Beauty and the Beast when a devil&#8217;s bargain flings an innocent into a demon&#8217;s den. Brimming with her signature depth of emotion, delightful characters, and perfect pacing, this sexy love story tugs on the heartstrings and makes you smile.""&#8212;RT Book Reviews(Top Pick!)And Then Comes Marriage""I am looking forward to reading the rest of the books in this series.&#12288;They will definitely be on my auto-buy list.""&#8212;Night Owl Romance5 Stars!
node5:Product from Amazon platform with title and content: Title: ""The MacGregor's Lady (MacGregor Series)"". Content: As Burrowes continues her MacGregor series (Once Upon a Tartan, 2013), Hannah Cooper&#x2019;s Boston family sends her across the sea to London to make a good match&#x2014;or else. Her tyrannical stepfather has trapped her family under his unpleasant rule. Yet rather than think of escape, Hannah wants only to get her inheritance and return to save her loved ones. Asher MacGregor, the new earl of Balfour, is not interested in debutantes but takes paying his debt seriously in the form of showing the Boston heiress the proper way to do things in London. They soon realize that they are the only match for each other, but they cannot figure out how to take care of their familial responsibilities. As usual, Burrowes brings strong conflict and emotion to a very appealing cast. Her secondary characters are as colorful as the hero and heroine, and readers will enjoy revisiting beloved characters, including the Windhams. And Asher&#x2019;s background and mixed-race heritage bring interesting facets to the time period and to this excellent series. --Amy Alessio
node6:Product from Amazon platform with title and content: Title: When She Was Wicked (A Honeycote Novel). Content: ""Sensual and solid, this debut is a story demanding to be read. The characters are believable and relatable, and Barton smartly blends issues of morality and Regency era social class with passion and excitement.""&#x2014;Publisher's Weekly(Starred Review)""Stunning and heart melting...When She Was Wickedis a beautifully written regency Romance that I fell deeply in love with! Anne Barton has succeeded in writing the perfect debut. This is a must read that you do not want to miss!""&#x2014;harlequinjunkie.com""4 stars! Delightfully smart, fun, fast-paced and just different enough for readers to take note of Barton's charming voice, this novel is filled with wry humor and compassion intrigues readers. The intrepid heroine, arrogant hero, memorable secondary characters and the colorful depiction of the era add to the reading enjoyment""&#x2014;RT Book Reviews""When She Was Wickedis a delightful debut! Anne Barton's cast of characters is charming and witty. Owen is the type of hero that readers fall in love with from the very first introduction, and Anabelle is ingenious and resourcefully cunning--a girl after my own heart.""&#x2014;Tiffany Clare""Break out the bubbly for Anne Barton's delightful debut!""&#x2014;Vicky Dreiling
node7:Product from Amazon platform with title and content: Title: Any Duchess Will Do (Spindle Cove). Content: *Starred Review* Most mothers don&#x2019;t drug their children, but then again, Judith York, the Duchess of Halford, is not like most mothers. If the only way she can get her son Griffin to do his duty and find a wife is by slipping a little something into his fish course, so be it. The funny-tasting fish explains how his mother got him to Spindle Cove (or &#x201C;Spinster Cove,&#x201D; as it is more popularly known), but what to do about the ultimatum his mother delivers once they arrive? Griffin has one day and one day only to select a bride from among the population of eligible ladies, someone whom Judith will then turn into a suitable future Duchess of Halford. Determined to beat his mother at her own game, Griff selects the least likely candidate in the room, overworked and underappreciated serving girl and farmer&#x2019;s daughter Pauline Simms. Dare garnered a well-deserved RITA for last year&#x2019;s installment in her Regency-set Spindle Cove series, and with its fanciful, My Fair Lady-inspired plot, Any Duchess Will Do is an equally beguiling blend of sparkling wit and simmering sensuality that is guaranteed to captivate fans of clever, sexy historical romances. --John Charles
node8:Product from Amazon platform with title and content: Title: ""Somewhere I'll Find You"". Content: Married as children?he was seven, and she was four?Damon, the Marquess of Savage, and Julia Hargate have gone their separate ways. With Julia's dowry, Damon has become rich and powerful; and Julia, who never wanted Damon's title anyway, has transformed herself into Mrs. Jessica Wentworth, the most celebrated actress of Regency London (all men want her, and all women dream of being her). When the couple finally meet as adults and are clobbered by chemistry, Damon has to get used to loving a woman who won't give up her career, and Julia has to figure out how to integrate babies and greasepaint. The theatrical setting distinguishes Kleypas's sensuous formula romance, the first of a two-parter. (The second will be about brilliant actor-manager Logan Scott, ""whose powerful yet vulnerable Hamlet was legendary."")Copyright 1996 Reed Business Information, Inc.
node9:Product from Amazon platform with title and content: Title: Christmas Brides: Three Regency Novellas. Content: Cheryl Bolen is the acclaimed author of more than a dozen Regency-set historical romance novels. Her books have placed in several writing contests, including the Daphne du Maurier, and have been translated into 11 languages. She was named Notable New Author in 1999, and in 2006 she won the Holt Medallion (Honoring Outstanding Literary Talent) for Best Short Historical Novel. In 2012 she won Best Historical in the International Digital Awards for eBooks published the prior year, and one of her 2011 novellas won Best Historical Novella. Her books have become Barnes & Noble and Amazon bestsellers. A former journalist who admits to a fascination with dead Englishwomen, Cheryl is a regular contributor to The Regency Plume, The Regency Reader, and The Quizzing Glass. Many of her articles can found on her website, www.CherylBolen.com, and more recent ones on her blog, www.CherylsRegencyRamblings.wordpress.com. Readers are welcomed at both places. Cheryl holds a dual degree in English and journalism from the University of Texas, and she earned a master's degree from the University of Houston. She and her professor husband are the parents of two sons, one who is an attorney, and the other a journalist. Her favorite things to do are watching the Longhorns, reading letters and diaries of Georgian Englishmen, and traveling to England.
node10:Product from Amazon platform with title and content: Title: The Marriage Wager. Content: A gambler's disgraced widow and an embittered Napoleonic war veteran are scarred by their pasts but willing to bet on the future in this sensitively rendered romance. When Lady Emma Tarrant sees her younger brother lose a fortune at cards, she challenges Colin Wareham, the fifth baron of St. Mawr, to a game of chance that could cancel her brother's debt or end in disaster. With a delicately depicted Regency setting interwoven with a tender love story, this novel provides a passionate portrayal of marriage partners who learn how to love and cherish one another in the face of society's disapproval and family entanglements. Exceptional characters and beautifully crafted historical details ensure a delightful read for Judith McNaught and Mary Balogh fans.Copyright 1996 Reed Business Information, Inc.
node11:Product from Amazon platform with title and content: Title: Kisses, She Wrote: A Christmas Romance. Content: &#8220;Kisses, She Wrote is like finding extra chocolate in your Christmas stocking: delightful and perfect. I finished it with tears in my eyes. Yes, it was that good.&#8221; (Elizabeth Boyle, New York Times best selling author)&#8220;A perfect holiday delight, Kisses, She Wrote delivers a heartfelt and surprisingly sexy happily ever after for two seemingly mismatched characters. Katharine Ashe has eloquently penned yet another must-read romance. If you&#8217;re looking for a short holiday diversion, pick this one up. You won&#8217;t be sorry.&#8221; (Catherine Bybee, New York Times bestselling author)&#8220;One of the most romantic stories I&#8217;ve read this year &#8230; a story that proves why we read romance. A must read! Highly recommended.&#8221; (The Romance Reviews)&#8220;Different, delightful, and deeply romantic. Few novellas strike me as complete and polished as this one is.&#8221; (Heroes & Heartbreakers' Top 5 Christmas Romances of 2013)&#8220;Typical of Ashe, these characters are smoldering, drawn to each other as love and lust lead them on a precarious path to passion.&#8221; (Library Journal (starred review))
node12:Product from Amazon platform with title and content: Title: No Good Duke Goes Unpunished: The Third Rule of Scoundrels (Rules of Scoundrels). Content: *Starred Review* Temple thought he killed her. Twelve years ago, he woke up, very drunk, in Mara Lowe&#x2019;s bedchamber. The sheets were stained with blood, and Mara was nowhere to be seen. Dallying with his father&#x2019;s latest bride-to-be on the night before her wedding is scandalous enough, but the possibility that he may have murdered her as well makes Temple a social outcast. Now the &#x201C;Killer&#x201D; Duke of Lamont, Temple has built a new life for himself as the part-owner and muscle behind London&#x2019;s most notorious gambling hell, the Fallen Angel. When Temple hears footsteps following him home late one night, the last person he expects to see when he turns around is a dead woman. Mara ruined his life, but now she offers Temple the redemption he desperately craves, if he will only meet her demands. In the third stunning installment of her Rule of Scoundrels series, RITA Award&#x2013;winning MacLean richly rewards readers with a dark, intense, and supremely sexy story that will connect emotionally on every level. Brimming with brilliant dialogue, memorable characters, and just the right dash of dry wit, No Good Duke Goes Unpunished is everything a romance should be. --John Charles
node13:Product from Amazon platform with title and content: Title: Andrew: Lord of Despair (The Lonely Lords). Content: ""Burrowes is a master at creating romantic tension ... With each installment Lonely Lords is fast becoming one of my favorite historical series of all time. "" -3 Chicks After Dark""Her writing is crisp, clean and leaves readers wanting more. To me, Burrowes is the queen of romance."" -BookLoons.com""Grace Burrowes' vivid, well-developed, flawed characters, plus her way of weaving their lives together and her exquisite writing style seem to get better with each of her ""Lonely Lords"" novels. Her unique ability to make each book stand alone yet connect to the other books in the series amazes me. ANDREW; Lord of Despair engages the reader's emotions and senses from start to finish-a joy to read."" -Long and Short Reviews""A fantastic historical romance. It was sweet, steamy, thrilling, and full of secrets. I absolutely loved this book. Lovers of romance, this is a book that you have to check out."" -Imagine a World""We are treated to the wonderfully constructed plot and deep characterization that has come to be enjoyed and expected from this accomplished author. "" -LaDeeta Reads""I am hooked! Grace Burrowes is good; she is very, very good."" -Romantic Historical Lovers""Engaging, charming, flawed characters as well as suspenseful and intriguing storylines. Another hit by this author."" -My Book Addiction Reviews""""Lonely Lords book 7 was another quick, entertaining read"" Under the Boardwalk"" -Under the Boardwalk""Another Lonely Lord to Love! "" -First Page to the Last..."" She is so talented at pulling heartstrings and providing believable stories with believable characters. All her leading men know how to protect and love, nurture, break hearts, flirt, and consume their chosen woman with so much desire you wonder how they can possibly deny the forming relationships."" -The Reading Cafe
node14:Product from Amazon platform with title and content: Title: The Most Improper Miss Sophie Valentine. Content: The farm setting and daring heroine make for a unique historical romance... pleasingly edgy.""Fresina shows a decidedly humorous, as well as sensual, side that is sure to enchant readers.. A true charmer of a read. "" -RT Book Reviews""There's plenty of charm, and the secondary characters provide extra entertainment without detracting from the main story. Readers who enjoy straightforward, lighthearted love stories will find a good one here."" -Historical Novels Review""The story takes romance up a notch... If you are prim and proper, I guarantee you will blush..."" -BookLoons.com""A whole host of delightful characters... A sweet love story."" -Sugarbeat's Books""A delightful romance. The characters are interesting and their interactions are fun & heartwarming. "" -BookTrib""Fresina has drawn her protagonists with impeccable skill... Stylish, witty dialog."" -Library Journal""An unusual romance, complete with interesting plot development and strong, quirky characters..."" -Fresh Fiction""A sweet story... "" -Rakhelle.com""An enticing read... a passionate, witty historical romance that will put a smile on your face."" -Romance Junkies""Fresnia did a wonderful job of creating a swoon worthy love story about everyday folks. A Miss and a Mister. Quite simple and perfect. "" -Fall in Love with Books
node15:Product from Amazon platform with title and content: Title: Taboo. Content: Jess Michaels always flips through every romance she buys in search of ""the good stuff,"" so it makes perfect sense that she writes erotic romance where she gets to turn up the heat and let it boil. She also runs the popular website The Passionate Pen and writes historical romance as Jenna Petersen.
node16:Product from Amazon platform with title and content: Title: The Last Debutante (Secrets of Hadley Green). Content: Daria Babcock is rapidly in danger of becoming the spinster of Hadley Green. Not only have all of Daria&#x2019;s friends already found their Mr. Right; most of them are well on the path to motherhood. The only remotely suitable single man in Hadley Green is Lord Horncastle, but as far as Daria is concerned, his perpetual pouting and imbibing negate any husband potential the nobleman may possess. Clearly, if Daria wants a husband, she needs to get out of Hadley Green and back into proper society. So when the opportunity to deliver money to her grandmother in Scotland presents itself, Daria leaps at the chance. The trip to Scotland proves to be quite the adventure, but Daria finds out the excitement is just beginning when she arrives at her grandmother&#x2019;s cottage in the Scottish Highlands and discovers a wounded Jamie Campbell sleeping in the spare bedroom. Spun off from London&#x2019;s latest Hadley Green trilogy, The Last Debutante is another successful merger of witty writing and passionate romance that gracefully delivers everything romance readers could want. --John Charles
node17:Product from Amazon platform with title and content: Title: His Wicked Heart. Content: Darcy Burke wrote her first book at age 11, a happily ever after about a swan addicted to magic and the female swan who loved him, with exceedingly poor illustrations. An RWA Golden Heart&#xAE; Finalist, Darcy loves all things British (except tomatoes for breakfast, or any other time of day, actually) and happy ever afters. A native Oregonian, Darcy lives on the edge of wine country with her devoted husband, their two great kids, and three cats. In her &#x201C;spare&#x201D; time Darcy is a serial volunteer enrolled in a 12-step program where one learns to say &#x201C;no,&#x201D; but she keeps having to start over. She&#x2019;s also a fair-weather runner, and her happy places are Disneyland and Labor Day weekend at the Gorge. Visit Darcy online at http://www.darcy-burke.com, follow her on Twitter at http://twitter.com/darcyburke, or like her Facebook page, http://www.facebook.com/darcyburkefans.
node18:Product from Amazon platform with title and content: Title: The Scandal in Kissing an Heir: At the Kingsborough Ball. Content: Lady Rebecca needs a man, and she needs one fast. If Rebecca doesn&#x2019;t find a suitable man to marry, her horrible, greedy uncle and aunt are going to marry her off to either a sweet but ancient earl or a lecherous old duke. Daniel Neville needs a wife, and he needs one immediately. If Daniel doesn&#x2019;t become engaged to a suitable lady within a month&#x2019;s time, his father is going to cut off his allowance for good. When Rebecca meets Daniel at the Kingsborough Ball, it would seem they are the answer to each other&#x2019;s prayers. Unfortunately, Rebecca has no intention of spending the rest of her life married to an unfaithful rogue, which means Daniel must quickly find a way to convince her he is definitely a &#x201C;reformed&#x201D; rake. Barnes&#x2019; flair for clever banter and her gift for creating charmingly quirky characters prove to be a winning combination in the latest sparkling addition to her At the Kingsborough Ball series. Fans of comic, cleverly crafted Regency historical romances will definitely want to add Barnes to their reading lists. --John Charles
node19:Product from Amazon platform with title and content: Title: Worth Any Price (Bow Street, Book 3). Content: Setting: London, 1839Sensuality: 9Bow Street runner Nick Gentry is a complex man with a dark and tortured history, and beautiful Charlotte Howard is a woman running from her past. Neither Nick or Charlotte are wholly what they seem, for each have secrets too painful to reveal, and each has chosen to hide behind a false identity. Once they&#x92;re drawn into each other&#x92;s worlds, they&#x92;re forced to face difficult truths and are compelled to acknowledge the passion that burns between them. For Charlotte, ""the challenge of taming him, matching his powerful will with her own, was too tempting to resist."" For Nick, ""if he could not have her, this endless feeling of being hungry, unsatisfied, cold, would never leave him."" But will their love be enough to defeat the obsessed nobleman who covets Charlotte and the thirst for danger that tempts Nick, or is their future together doomed by the pain of their past?New York Timesbestselling author Lisa Kleypas has another winner on her hands with this follow-up toLady Sophia&#x92;s Lover. Fans and new readers alike will love the fast-paced plot, compelling characters, high-octane sensuality, and the well-drawn English setting.--Lois Faye Dyer
node20:Product from Amazon platform with title and content: Title: Christmas Eve at Friday Harbor. Content: Kleypas (Love in the Afternoon) finds a little romantic magic in this spritely charmer. Mark Nolan's happy-go-lucky bachelorhood is interrupted by the death of his sister and his subsequent guardianship of her six-year-old daughter, Holly, who is traumatized into muteness and desperately seeking a maternal figure. Enter Maggie Collins, a toy shop owner who lost her own husband to cancer. As the holiday season draws closer, Maggie, Mark, and Holly begin to spend more time together, and Maggie and Mark's attraction becomes too powerful to ignore. Kleypas's holiday offering is sweet, romantic, and genuine, and avoids, thankfully, all the cheesy holiday miracle clich&eacute;s. A solid romance with strong leads, this is a refreshing holiday treat. (Nov.) (c)Copyright &copy; PWxyz, LLC. All rights reserved.--This text refers to an out of print or unavailable edition of this title.
node21:Product from Amazon platform with title and content: Title: Daring the Duke. Content: Anne Mallory is a lifelong romance reader who sold her first novel to Avon Books after becoming a finalist in RWA&#146;s Golden Heart contest. InTotal Surrenderis her eleventh book. A native Michigander, Anne currently lives in the San Francisco Bay Area.
node22:Product from Amazon platform with title and content: Title: A Regency Christmas Carol (Super Regency, Signet). Content: missing",products,nc
"Classify the product represented by node7 using its subgraph data (text attributes and connections) as follows.

node0: Professional desktop printing calculator with heavy-duty printing and two-color functionality.  
node1: Wireless mouse with silver design, part of Logitech's Fantasy Collection featuring colorful patterns.  
node2: Spare part for Plantronics headsets (CS50/Voyager 510), low-profile design with brand logo.  
node3: Ergonomic wireless mouse with 15-month battery life, laser precision, and Logitech Unifying receiver support.  
node4: Solar-powered keyboard for Mac, eliminating battery use with indoor light functionality.  
node5: Ergonomic left-handed mechanical keyboard with Cherry switches for comfortable typing.  
node6: 10-pack 4GB USB drives with aluminum casing, LED indicator, and keychain/lanyard options.  
node7: Keyboard with numeric keypad on left to place mouse closer on right, improving ergonomics.  
node8: Microsoft ergonomic keyboard with missing product details.  
node9: 10-pack 4GB USB drives with lanyards, compatible with various devices for easy data transfer.  
node10: 10ft DisplayPort to DVI cable supporting 1080p, with secure latching connectors for stable connections.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node1, node2>,<node1, node3>,<node1, node4>,<node1, node5>,<node5, node7>,<node5, node8>,<node5, node9>,<node5, node10>,<node6, node9>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Electronics,"

node0: Professional desktop printing calculator with heavy-duty printing and two-color functionality.  
node1: Wireless mouse with silver design, part of Logitech's Fantasy Collection featuring colorful patterns.  
node2: Spare part for Plantronics headsets (CS50/Voyager 510), low-profile design with brand logo.  
node3: Ergonomic wireless mouse with 15-month battery life, laser precision, and Logitech Unifying receiver support.  
node4: Solar-powered keyboard for Mac, eliminating battery use with indoor light functionality.  
node5: Ergonomic left-handed mechanical keyboard with Cherry switches for comfortable typing.  
node6: 10-pack 4GB USB drives with aluminum casing, LED indicator, and keychain/lanyard options.  
node7: Keyboard with numeric keypad on left to place mouse closer on right, improving ergonomics.  
node8: Microsoft ergonomic keyboard with missing product details.  
node9: 10-pack 4GB USB drives with lanyards, compatible with various devices for easy data transfer.  
node10: 10ft DisplayPort to DVI cable supporting 1080p, with secure latching connectors for stable connections.","node0:Product from Amazon platform with title and content: Title: Casio DR-270TM 2-Color Professional Desktop Printing Calculator. Content: Heavy duty printing
node1:Product from Amazon platform with title and content: Title: Logitech Wireless Mouse M310 (Silver). Content: FeaturesLogitech Wireless Mouse M310 (Silver)Create a world that is uniquely yours with dreamy new colors and fanciful patterns, available only fromThe Logitech Fantasy Collection.
node2:Product from Amazon platform with title and content: Title: Plantronics Online Busy Indicator Light (CS50, Voyager 510 compatible) (65116-02). Content: Plantronics 65116-02 spare,oli,low profile,w/plt logo.
node3:Product from Amazon platform with title and content: Title: Logitech Wireless Mouse M505 (Black). Content: Logitech Wireless Mouse M505 lets you be more productiveLogitech Wireless Mouse M505 helps you get more done, more comfortably, in more places. With 15 months of battery life and laser tracking, you've got the power and precision to be more productive.Different setups. Different locations. One tiny Logitech Unifying receiver.The Logitech Unifying receiver is the heart of a new family of products that brings you wireless freedom and convenience without the hassle of multiple receivers. It's easy to pair up to six Unifying compatible devices, all to the same tiny receiver that never needs to leave your laptop. Now it's even more convenient to move around and work at the office, at home or on the road.Create The Combo That Works For You.See other products that work with Logitech Unifying receiver.Key Features15 months of battery lifeThis feature virtually eliminates the hassle of changing batteries. The On/Off switch saves power. A battery-indicator light eliminates surprises.&nbsp; (Battery life may vary based on user and computing conditions.)Track with laser precisionThe laser tracking delivers smooth, responsive, precise cursor control on surfaces that cause problems for optical mice, such as polished or wood-grain tables.&nbsp;Plug it. Forget it. Add to it.This keyboard includes the Logitech Unifying receiver. The tiny wireless receiver stays in your notebook, so there's no need to unplug it when you move around. Plus, you can easily add a compatible mouse or number pad&mdash;without the hassle of multiple USB receivers.Designed to be comfortableThe ergonomically designed shape with soft rubber grip conforms to your hand to be naturally comfortable, yet is small enough to easily take with you.Advanced 2.4 GHz wireless connectivityLogitech Advanced 2.4 GHz wireless connectivity offers you the reliability of a cord, plus fast data transmission and virtually no delays or dropouts.Choose The Right Logitech Wireless Mouse For YouGoodBetterBestV220M505M705Anywhere Mouse MXLX6LX8Performance Mouse MXWhat to look forPortable MiceFull-Sized MiceConnection StrengthThe higher the signal strength, the more reliable your connection will be. Especially important in busy wireless environments like airports.27 MHz2.4 GHz2.4 GHz2.4 GHz27 MHz27 MHz2.4 GHzTracking QualityLook for smooth, precise cursor control. The higher the quality, the easier it is to navigate documents and web pages. The best also work on more surfaces, including glass.Also works on glassAlso works on glassPower ManagementStay more productive and eliminate hassles with longer periods between battery changes or a rechargeable mouse.1 AA battery2 AA batteries2 AA batteries2 AA batteries2 AA batteries2 AA batteriesRechargeableWireless ReceiverThe receiver stays in your computer for cordless mouse control. The smaller the receiver (from standard to nano size), the more convenient it is. The Unifying receiver also lets you add compatible devices like a wireless keyboard.&nbsp;Unifying receiver for up to 6 compatible wireless devicesUnifying receiver for up to 6 compatible wireless devicesUnifying receiver for up to 6 compatible wireless devicesUnifying receiver for up to 6 compatible wireless devicesScrolling PerformanceScroll through long documents and web pages without having to drag the scroll bar. Performance ranges from fast to hyper-fast.Create The Combo That Works For YouLogitech has a range of products that you can connect via a single, tiny receiver you leave plugged in to your notebook. Mix. Match. Unify. Now you can create your perfect laptop workstation, wherever you work.
node4:Product from Amazon platform with title and content: Title: Logitech Wireless Solar Keyboard K750 for Mac - Silver. Content: Powered by light&#x2014;even indoors&#x2014;this keyboard makes battery hassles a thing of the past. Now, made for your Mac.
node5:Product from Amazon platform with title and content: Title: DSI Left-Handed Keyboard, Black (KB-DS-8861XPU-B-V2). Content: ERGOGUYS USB LEFT HANDED KEYBOARD ACCS CHERRY MECHANICAL SWITCH BLACK
node6:Product from Amazon platform with title and content: Title: Centon DSP4GB10PK&nbsp;10 x 4GB Multi-pack Pro USB Flash Drive (Grey). Content: Centon's DataStick Pro is made with a sturdy aluminum casing and is available in multiple colors and a full range of capacities. This affordable drive is ideal for personal use, small business and schools.USB DataStick Pro line is reliable and affordableProduct FeaturesDurable brushed aluminum casingLED indicator lightlanyard/keychain connectorSpecsPart Number : DSP4GB10PKUPC: 731969300855Dimensions: H 4.00 x W 6.75 x D 1.25Weight: 0.300Color: GreyWarranty: LifetimeHow much can I store on my 4GB DataStick Pro USB flash drive?Photos*6 Megapixel14607 Megapixel13008 Megapixel116010 Megapixel88012 Megapixel680Songs (4 minutes)*128 Kbps (Better Than FM)960Video*Standard SP MPEG2 (6 Mbps)82HD Standard AVCHD/H.264 (9Mbps)60Voice Recording*32k Wav (Voice Quality)17536* Number of photos, songs, and minutes will vary depending on formatted capacity,device model, format resolution, type of compression and pre-loaded software.Included Accessories10 x 4GB USB flash drive
node7:Product from Amazon platform with title and content: Title: Evoluent Mouse-Friendly Keyboard (KB1). Content: The general layout of the standard keyboard was designed before the introduction of the mouse. Since number entry was one of the primary functions of the keyboard at that time, having the numeric keypad on the right side made sense. Nowadays, most users use the mouse far more than the numeric keypad, so the keypad now occupies the space where the mouse should be. The Evoluent Mouse-Friendly Keyboard has a more sensible layout with the numeric keypad on the left so your mouse may be much closer on the right.
node8:Product from Amazon platform with title and content: Title: Microsoft Natural Ergonomic Keyboard 4000. Content: missing
node9:Product from Amazon platform with title and content: Title: SanDisk Cruzer Blade 4GB (10 pack) USB 2.0 Flash Drive Jump Drive Thumb Drive SDCZ50-004G-10PK w/ (5) Everything But Stromboli (TM) Lanyard. Content: From the Manufacturer? With USB ports popping up everywhere you look, you need a simple and reliable way to store and share your photos, videos and music on the fly. The SanDisk Cruzer USB Flash Drive is your answer. Because it works with virtually any computer or electronic device with a USB slot, this flash drive lets you leave your laptop at home but still take your vast amounts of content with you to share with family and friends. Whether you need to transport your latest MP3 downloads, vacation videos, or your college thesis, the SanDisk Cruzer USB Flash drive offers portable storage that you can trust. Convenient Storage and Portability With USB ports on computers, to new ports popping up on cars, DVD players, TVs, photo frames, and more, the need for a fast and reliable way to share your digital content on a moment's notice is greater than ever. The SanDisk Cruzer USB Flash drive meets that need. This reliable flash drive fits in the palm of your hand and gives you the storage capacity you need to store and transfer up to 4 GB of data. While the drive is optimized for laptops and devices with USB 2.0 port, it is backwards compatible with older devices that have USB 1.1 ports, so you can be assured of near universal compatibility. View Videos Without Extra Software or Setup With the SanDisk Cruzer USB Flash drive, you can transfer your favorite video from one device to another easily and conveniently, without any additional software or setup. The drive offers drag-and-drop convenience, which means you can simply drag the files from your device onto your SanDisk Cruzer Flash drive, or vice versa, without any steps. Transferring video files from computer to computer, or from your drive to a USB-enabled DVD player, is incredibly simple. Drag your video files from your PC to your USB flash drive and then plug the drive into your DVD player -- or even your USB-enabled TV -- and sit back to enjoy the show.
node10:Product from Amazon platform with title and content: Title: Cable Matters Gold Plated DisplayPort to DVI Cable 10 Feet. Content: Overview* Cable Matters DisplayPort to DVI Adapter Cable offers a cost-effective DisplayPort to DVI connection, letting you connect a DVI computer monitor to a DisplayPort video card/output, saving the expense of upgrading the monitor for compatibility.* Supporting PC resolutions of up to 1920x1200 and HDTV resolutions up to 1080p, this high-quality cable offers crystal clear picture quality.Instructions1 Hook up DisplayPort device to DVI display using Cable Matters DisplayPort to DVI cable.2 Select 'Extension' or 'Duplicate' mode in 'Control Panel' &gt; 'Display' to set up the secondary display.SpecificationsSupports resolutions up to 1920x1200 and 1080pI/O: DisplayPort 1.2 and DVI-D Dual LinkHDCP compliantImportant Notes* This is a passive cable that requires a DP++ port (DisplayPort++), meaning that DVI and HDMI signals can also be passed through the port.* This passive adapter supports up to 2 monitor display configurations using AMD Eyefinity Multi-Display technology. To support more monitor displays, an active adapter is required.* This cable can only pass signal from DisplayPort to DVI port. This isNOTa bi-directional cable.* Latching and screw locking connectors ensure that the cables remain secure, preventing accidental disconnection. Please press the button on the DP end to disconnect the cable.",products,nc
"Classify the product represented by node15 using its subgraph data (text attributes and connections) as follows.

node0: Inktoneram remanufactured Epson 126 ink cartridges, 10-pack (4 black, 2 each of cyan/magenta/yellow). Cost-effective, OEM-equivalent performance.  
node1: GE 65W R30 Soft White floodlight bulbs, 6-pack. Indoor use, medium base, 755 lumens. Reduces glare for track/recessed lighting.  
node2: GE 13W spiral CFL bulbs, 2-pack. Candelabra base, 60W equivalent. 77% energy savings, long life, excellent color rendering.  
node3: GP Spectrum 3-ream (1500 sheets) multipurpose paper. Bright white, suitable for copiers/printers. High-volume performance, consistent quality.  
node4: Inktoneram 20-pack Epson 126 remanufactured cartridges (5 each color). ISO9001 certified, cost-effective for Epson/WorkForce printers.  
node5: Boss 612UA AM/FM receiver. Content unavailable.  
node6: Genuine Epson T124 ink cartridges (1 each color). For specific models (NX125, NX430, etc.). OEM compatibility, promotional pricing.  
node7: Inktoneram 5-pack Epson 125 cartridges (2 black, 1 each color). ISO9001 certified, cost-effective for Stylus/WorkForce printers.  
node8: Bosch 18V cordless drill kit. Content unavailable.  
node9: 13 science fair title cards (e.g., Hypothesis, Data). High-quality cardstock, perforated, for school projects.  
node10: Feit Electric 15W R30 bulb, 4-pack. Replaces 65W incandescent. Energy-efficient, indoor reflector lighting.  
node11: Stanley 6"" jab saw with SharpTooth tech. Durable, slip-resistant handle, cuts drywall/plastic. 50% faster than standard saws.  
node12: Canon PG-210XL/CL-211XL combo pack. Black ink cartridges for specific printers. High-yield, OEM-compatible.  
node13: Kimberly-Clark 600' paper towels. Content unavailable.  
node14: 2-pack HP 950XL black inks. Compatible with HP OfficeJet Pro models. 1yr warranty, free shipping options.  
node15: Business envelopes (4.125x9.5"", 20lb). 50/envelope box. Standard white, for mailing/office use.  
node16: Stanley aluminum quick square layout tool. 0-90° protractor, saw guide. Durable, high-visibility gradations.  
node17: Elmer's 36x48"" tri-fold foam display board. Black, lightweight, self-standing. Ideal for projects/presentations.  
node18: Elmer's 36x48"" corrugated display board. White, tri-fold, 2-ply construction. Durable for science fairs/art shows.

the connection relationship among the nodes mentioned:
 <node0, node3>,<node0, node4>,<node0, node5>,<node0, node6>,<node0, node7>,<node1, node3>,<node1, node10>,<node2, node3>,<node2, node11>,<node3, node7>,<node3, node8>,<node3, node9>,<node3, node12>,<node3, node13>,<node3, node14>,<node3, node15>,<node8, node16>,<node9, node17>,<node9, node18>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Office Products,"

node0: Inktoneram remanufactured Epson 126 ink cartridges, 10-pack (4 black, 2 each of cyan/magenta/yellow). Cost-effective, OEM-equivalent performance.  
node1: GE 65W R30 Soft White floodlight bulbs, 6-pack. Indoor use, medium base, 755 lumens. Reduces glare for track/recessed lighting.  
node2: GE 13W spiral CFL bulbs, 2-pack. Candelabra base, 60W equivalent. 77% energy savings, long life, excellent color rendering.  
node3: GP Spectrum 3-ream (1500 sheets) multipurpose paper. Bright white, suitable for copiers/printers. High-volume performance, consistent quality.  
node4: Inktoneram 20-pack Epson 126 remanufactured cartridges (5 each color). ISO9001 certified, cost-effective for Epson/WorkForce printers.  
node5: Boss 612UA AM/FM receiver. Content unavailable.  
node6: Genuine Epson T124 ink cartridges (1 each color). For specific models (NX125, NX430, etc.). OEM compatibility, promotional pricing.  
node7: Inktoneram 5-pack Epson 125 cartridges (2 black, 1 each color). ISO9001 certified, cost-effective for Stylus/WorkForce printers.  
node8: Bosch 18V cordless drill kit. Content unavailable.  
node9: 13 science fair title cards (e.g., Hypothesis, Data). High-quality cardstock, perforated, for school projects.  
node10: Feit Electric 15W R30 bulb, 4-pack. Replaces 65W incandescent. Energy-efficient, indoor reflector lighting.  
node11: Stanley 6"" jab saw with SharpTooth tech. Durable, slip-resistant handle, cuts drywall/plastic. 50% faster than standard saws.  
node12: Canon PG-210XL/CL-211XL combo pack. Black ink cartridges for specific printers. High-yield, OEM-compatible.  
node13: Kimberly-Clark 600' paper towels. Content unavailable.  
node14: 2-pack HP 950XL black inks. Compatible with HP OfficeJet Pro models. 1yr warranty, free shipping options.  
node15: Business envelopes (4.125x9.5"", 20lb). 50/envelope box. Standard white, for mailing/office use.  
node16: Stanley aluminum quick square layout tool. 0-90° protractor, saw guide. Durable, high-visibility gradations.  
node17: Elmer's 36x48"" tri-fold foam display board. Black, lightweight, self-standing. Ideal for projects/presentations.  
node18: Elmer's 36x48"" corrugated display board. White, tri-fold, 2-ply construction. Durable for science fairs/art shows.","node0:Product from Amazon platform with title and content: Title: Inktoneram Remanufactured Ink Cartridges High Capacity Replacement for 126 (4x Black, 2x Cyan, 2x Magenta, 2x Yellow, 10-Pack). Content: 2 Pack , 2 Black of Total 10 Remanufactured 126 - High Capacity Ink Cartridges 126 T126120 T126220 T126320 T126420 Black Cyan Magenta Yellow Set
node1:Product from Amazon platform with title and content: Title: GE Lighting 24705 65-Watt 470/360-Lumen R30 Commercial Indoor Reflector Floodlight Bulb, Soft White, 6-Pack. Content: GE 65-Watt Soft White Floodlight BR30 Light Bulb. Use original GE's Soft White when you need a light without glare and harsh shadows. Replace ordinary light bulbs with GE Flood and Spotlight in all your track and recessed lighting fixtures. Application: Indoor spot and floodlight with 3.75-Inch wide fixtures. Base: Medium screw (E26). Bulb Type: BR30. Initial Lumens: 755.
node2:Product from Amazon platform with title and content: Title: GE Lighting 75368 Energy Smart 13-Watt Spiral Compact Fluorescent Bulb, Candelabra Base, 2-Pack. Content: GE 75368 Energy Smart 13 Watt Spiral CFL Ceiling Fan Candelabra Base 60-Watt Replacement . GE Compact Fluorescent lamps (CFL) offer many advantages that include cost savings, extra long life, light output, and color rendering. With this CFL you'll get dramatic energy cost savings up to 77 percent vs. incandescent lamps of comparable light output. The extra long life most last 8 to 10 times longer, and some last up to 20 times longer, than standard incandescent lamps. High light output comparable to, and in many cases exceeding incandescent lamps replaced. Excellent color rendering rare earth tri-phosphor provides such high-quality color you won't believe it's fluorescent. Many lamps use amalgam technology which provides stable lumen performance when operated in any position, over a wider, range of ambient temperatures.
node3:Product from Amazon platform with title and content: Title: GP Spectrum Multi-Use Paper, 8.5 x 11 Inches, 3-Ream Pack (1500 Sheets) (998606). Content: Georgia-Pacific Spectrum Standard 92 Multipurpose Paper is designed for copying and printing in a wide variety of imaging devices. This bright white paper is a great all around performer, ideal for everyday communications that include black and white text and graphics. Performs well in copiers, laser and multi-function printers, as well as high-volume printing equipment. For quality, consistency and reliable day-to-day performance, Spectrum Standard 92 Multipurpose Paper is a solid choice.
node4:Product from Amazon platform with title and content: Title: Inktoneram Remanufactured Ink Cartridges High Capacity Replacement for Epson 126 (5xBlack, 5xCyan, 5xMagenta, 5xYellow , 20-Pack). Content: (5 Set of 4 remanufactured 126 ink cartridges T126120 Black, T126220 Cyan, T126320 Magenta, T126420 Yellow) The remanufactured 126 T1261 T1262 T1263 T1264 ink cartridges replace the original 126 cartridges. Our compatible 126 ink cartridges deliver documents with high quality details and clarity. Getting the 126 remanufactured ink cartridges is a cost-effective choice that will provide you with best quality and reliability at great discounted price. Our compatible 126 (ISO9001 certified) ink cartridges are thoroughly tested and inspected to ensure OEM-equivalent yields and performance. The 126 T1261 T1262 T1263 T1264 compatible ink cartridges are designed to work with: Stylus: NX330 NX430, WorkForce: 60 435 520 545 630 633 635 645 840 845 WF-7010 WF-7510 WF-7520
node5:Product from Amazon platform with title and content: Title: Boss 612UA MP3-Compatible Digital Media  AM/FM Receiver. Content: missing
node6:Product from Amazon platform with title and content: Title: Genuine Epson 124 T124 Ink Inkjet Catridege Includes T124120 T124220 T124320 T124420 (1 Black, 1 Yellow, 1 Cyan, 1 Magenta) for Stylus NX125, NX127, NX230, NX130, NX430 WorkForce 325, 320, 323, 435. Content: Genuine Epson T124 Ink Cartridge Black.Compatible with the following models:EpsonNX125, NX127, NX230, NX130, NX430WorkForce 325, WorkForce 320, WorkForce 323, WorkForce 435,HOT DEAL!!!!Buy now and save your money!!!!!
node7:Product from Amazon platform with title and content: Title: Inktoneram Remanufactured Ink Cartridges Replacement for Epson 125 (2xBlack, Cyan, Magenta, Yellow , 5-Pack). Content: (1 Set + 1 Black remanufactured 125 ink cartridges T125120 Black, T125220 Cyan, T125320 Magenta, T125420 Yellow ) The remanufactured 125 T1251 T1252 T1253 T1254 ink cartridges replace the original 125 cartridges. Our compatible 125 ink cartridges deliver documents with high quality details and clarity. Getting the 125 remanufactured ink cartridges is a cost-effective choice that will provide you with best quality and reliability at great discounted price. Our compatible 125 (ISO9001 certified) ink cartridges are thoroughly tested and inspected to ensure OEM-equivalent yields and performance. The 125 T1251 T1252 T1253 T1254 compatible ink cartridges are designed to work with: Stylus: NX125 NX127 NX130 NX230 NX420 NX530 NX625, WorkForce: 320 323 325 520
node8:Product from Amazon platform with title and content: Title: Bosch DDB180-02 18-Volt Lithium-Ion 3/8-Inch Cordless Drill/Driver Kit with 2 Batteries, Charger and Case. Content: missing
node9:Product from Amazon platform with title and content: Title: Flipside Science Fair Titles: Black. Content: This package contains (13) 1-3/8"" x 8-1/2"" titles for school projects, science fairs, home, and at work. Titles are printed on high quality coated cardstock and perforated. Titles include: Introduction, Procedure, Hypothesis, Problem, Data, Materials, Results, Application, Conclusion, Graph, Abstract, Purpose, and Variables. Available with white backgrounds with fonts in a variety of colors (red, green, blue, and black), each sold separately.
node10:Product from Amazon platform with title and content: Title: Feit Electric R30 Reflector 65W Replacement Bulb, Uses 15W - 4-Pack. Content: Feit Electric R30 Reflector 65W Replacement Bulb, Uses 15W - 4-Pack
node11:Product from Amazon platform with title and content: Title: Stanley 20-556 6-Inch FatMax Jab Saw. Content: The Stanley 6-Inch FatMax Jab Saw has a sharpened tip that punches through drywall or other similar materials with ease. Designed for drywall, wood, and plastic work, this versatile saw has a slip-resistant handle that's created for strength and durability, plus precision grip that gives you excellent control.Versatile, durable, and designed to accomplish tasks efficiently.Designed to meet high standards for quality and performance. Seethe full lineof saws.The 20-556 features SharpTooth technology so it cuts on the push and pull strokes, which means that it saws through any material up to 50 percent faster than traditional tooth designs. Its blade is hardened and tempered for long life and reliable service, and slip-resistant handle is designed to be tough -- even as it helps lend real accuracy to any project you're working on. This saw's blade is six inches long, and it's rugged enough to cut through Durorock.About Stanley FatMax SawsThe FatMax family of products has established itself as one of Stanley's most extensive and innovative product families in the company's 161-year history. The FatMax line of hand tools features core tools essential for the pro or expert enthusiast who desire high quality, durable tools. The FatMax Saw features blades that are 15-percent thicker than conventional saws for straighter cuts with less binding. Stanley's unique SharpTooth Saw Technology uses three cutting surfaces to cut 50 percent faster than conventional hand saws, while induction-hardened teeth stay sharp up to five times longer than standard teeth. The back of the saw can be used to mark the 45 and 90-degree angles. And thick, ergonomically designed grips resist slipping and adds comfort during strenuous jobs.
node12:Product from Amazon platform with title and content: Title: Canon PG-210XL /CL-211XL Color Ink Cartridge Combo Pack-Black. Content: Canon PG-210XL /CL-211XL Color Ink Cartridge Combo Pack-Black
node13:Product from Amazon platform with title and content: Title: ""Kimberly-Clark Kleenex 50606 Hard Roll Towel, 600' Length x 8&quot; Width, 1-3/4&quot; Core Diameter, White (Case of 6)"". Content: missing
node14:Product from Amazon platform with title and content: Title: 2 Pack Remanufactured HP 950 XL 950XL Black Ink Cartridges for HP OfficeJet Pro 276dw MFP, OfficeJet Pro 8600 e-All-In-One - N911g, OfficeJet Pro 8600 Plus - N911n, OfficeJet Pro 8600 Premium - N911a OfficeJet Pro 251dw, OfficeJet Pro 8100 ePrinter - N811a &copy; YoYoInk. Content: YoYoInk Compatible Replacement for HP 950XLDetails:- Compatible with the following printers: HP All-in-One Printers OfficeJet Pro 276dw MFP, OfficeJet Pro 8600 e-All-In-One - N911g, OfficeJet Pro 8600 Plus - N911n, OfficeJet Pro 8600 Premium - N911a HP Inkjet Printers OfficeJet Pro 251dw, OfficeJet Pro 8100 ePrinter - N811a- Listing includes : 2 of HP 950XLBK- One Year Warranty- Free Shipping for Orders fulfilled by Amazon if you have Prime- Free Shipping for Orders fulfilled by Merchant- Hassel-free Returns & Refunds
node15:Product from Amazon platform with title and content: Title: Business Envelope, 4 1/8 x 9 1/2, 20 lb, White, 50/Box. Content: Mead Westvaco Plain Business Size Envelopes 75050 Envelopes & Mailers
node16:Product from Amazon platform with title and content: Title: Stanley 46-071 Premium Quick Square Layout Tool. Content: Durable aluminum construction. Black body with yellow graduations provides maximum readability in all light conditions. Multipurpose tool is ideal for use as a 0&#xBA; to 90&#xBA; protractor scale. Works well as a saw guide.
node17:Product from Amazon platform with title and content: Title: ""Elmer's Premium Tri-Fold Foam Display Board, 36 x 48 Inches, Black, Single Board (902091)"". Content: Elmer's offers a full range of adhesives, arts and crafts, educational and licensed products for children as well as a complete offering of craft, hobby, office and home repair products for adults. Give your presentation a professional edge. Lightweight and smooth Elmer's foam display board is tri-fold and stands up by itself. Size is 36 x 48 inches open and 36 x 24 inches closed. Smooth surface is perfect for paints, markers, glue, and other embellishments. Perfect for science fair, school projects, and business presentations. For creative performance you can count on, trust Elmer's. Elmer's products provide the inspiration to create, build and learn.
node18:Product from Amazon platform with title and content: Title: ""Elmer's White Project Display Board"". Content: Corrugated display board is tri-fold and stands up by itself. Color: White. Size: 36"" x 48"". Board Material: Corrugated. Quantity: 1. 2-ply corrugated core. Ideal for project displays and science fairs. Great for art applications, trade shows and more. Easily folds for quick set-up. Heavy-duty feel. Dimensions: 48""W x 36""H open, 24""W x 36""H folded",products,nc
"Classify the product represented by node4 using its subgraph data (text attributes and connections) as follows.

node0: SIM card holder replacement for iPhone 4/4S.  
node1: Replacement SIM tray, eject tool, and adapter for iPhone 4, converts micro SIM to mini.  
node2: 50-piece high-quality screws for iPhone 4G/4S repairs, ensures perfect fit.  
node3: Warns of required skills/techniques for proper iPhone repair; advises caution during disassembly.  
node4: Brand new SIM tray holder for iPhone 4, made of quality materials.  
node5: SIM cutter and 4 adapters convert standard/micro SIMs for iPhone 4/iPad.  
node6: 6-in-1 repair toolkit for iPhone 4/4S screens, includes pry tools and suction opener.  
node7: AT&T prepaid micro SIM pre-cut for iPhone 4/4S compatibility.  
node8: Earpiece speaker replacement for iPhone 4; professional installation recommended.  
node9: 5-point star screws for iPhone 4 repairs.  
node10: iPhone 4S dark blue LCD touchscreen replacement with repair tools, tested.  
node11: Pentalobe screwdriver for iPhone 4 star screws, compatible with 5-point screws.  
node12: SIM tray holder for iPhone 3G/3GS, incompatible with 1st-gen iPhone.  
node13: Original iPhone 4 SIM tray replacement, silver, no installation guide.  
node14: iPhone 4 battery (1420mAh) and tool; no returns on electrical items.  
node15: iPhone 4 touch screen digitizer kit with tools for cracked screens, tested.  
node16: iPhone 4 GSM LCD and touch screen with free tools, brand new.  
node17: Black back housing replacement part for iPhone 4S.  
node18: Scratch-resistant decal stickers for iPhone 4/4S with high-gloss coating.  
node19: Pentalobe screwdriver with suction cup and pry pick for iPhone 4 disassembly.  
node20: Used iPhone 3GS 8GB, AT&T-locked with 3G tech, works globally with SIM.  
node21: SIM cutter converts Micro to Nano SIM, includes adapters and usage warnings.  
node22: Brand new SIM tray holder for first-generation iPhone.  
node23: Full repair kit for iPhone 3GS screen, includes parts and tools.  
node24: Front screen glass lens for iPhone 4, excludes touchscreen/LCD.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node2>,<node0, node3>,<node0, node4>,<node1, node5>,<node1, node7>,<node2, node9>,<node2, node10>,<node3, node4>,<node3, node12>,<node3, node13>,<node4, node6>,<node4, node7>,<node4, node13>,<node4, node14>,<node4, node15>,<node4, node16>,<node4, node17>,<node5, node7>,<node6, node11>,<node6, node18>,<node6, node19>,<node7, node20>,<node7, node21>,<node8, node14>,<node11, node19>,<node12, node22>,<node15, node23>,<node16, node24>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Cell Phones & Accessories,"

node0: SIM card holder replacement for iPhone 4/4S.  
node1: Replacement SIM tray, eject tool, and adapter for iPhone 4, converts micro SIM to mini.  
node2: 50-piece high-quality screws for iPhone 4G/4S repairs, ensures perfect fit.  
node3: Warns of required skills/techniques for proper iPhone repair; advises caution during disassembly.  
node4: Brand new SIM tray holder for iPhone 4, made of quality materials.  
node5: SIM cutter and 4 adapters convert standard/micro SIMs for iPhone 4/iPad.  
node6: 6-in-1 repair toolkit for iPhone 4/4S screens, includes pry tools and suction opener.  
node7: AT&T prepaid micro SIM pre-cut for iPhone 4/4S compatibility.  
node8: Earpiece speaker replacement for iPhone 4; professional installation recommended.  
node9: 5-point star screws for iPhone 4 repairs.  
node10: iPhone 4S dark blue LCD touchscreen replacement with repair tools, tested.  
node11: Pentalobe screwdriver for iPhone 4 star screws, compatible with 5-point screws.  
node12: SIM tray holder for iPhone 3G/3GS, incompatible with 1st-gen iPhone.  
node13: Original iPhone 4 SIM tray replacement, silver, no installation guide.  
node14: iPhone 4 battery (1420mAh) and tool; no returns on electrical items.  
node15: iPhone 4 touch screen digitizer kit with tools for cracked screens, tested.  
node16: iPhone 4 GSM LCD and touch screen with free tools, brand new.  
node17: Black back housing replacement part for iPhone 4S.  
node18: Scratch-resistant decal stickers for iPhone 4/4S with high-gloss coating.  
node19: Pentalobe screwdriver with suction cup and pry pick for iPhone 4 disassembly.  
node20: Used iPhone 3GS 8GB, AT&T-locked with 3G tech, works globally with SIM.  
node21: SIM cutter converts Micro to Nano SIM, includes adapters and usage warnings.  
node22: Brand new SIM tray holder for first-generation iPhone.  
node23: Full repair kit for iPhone 3GS screen, includes parts and tools.  
node24: Front screen glass lens for iPhone 4, excludes touchscreen/LCD.","node0:Product from Amazon platform with title and content: Title: CE Compass Replacement For iPhone 4 4S Sim Card Holder Tray Slot. Content: Replacement For iPhone 4 4S Sim Card Holder Tray Slot.
node1:Product from Amazon platform with title and content: Title: Apple iPhone 4S- GSM, AT&amp;T- Replacement Micro SIM Card Tray Holder Slot, SIM Card Tray Holder Eject Pin Tool, Micro sim card to Mini Sim Card Adaptor- Ramdon Color. Content: Replacement Micro SIM Card Tray Holder Slot + SIM Card Tray Holder Eject Pin Tool + Micro sim card to Mini Sim Card Adaptor Best mate for your iphone 4. convert your micro sim back to normal mini sim and use with your other cell phone. This Micro SIM Card Tray Holder Slot is for you to replace your lost your iphone 4 iPad simcard tray.This new iPhone 4 SIM Card Tray Holder is an ideal replacement to your worn out and/or damaged SIM Card Tray Holder and designed to fit perfectly to your Apple iPhone 4.FEATURES: Brand new, high quality & durable. Perfect fit for Apple iPhone 4 or Apple iPad. Ideal replacement part and guarantee the compatibility.SPECIFICATIONS: Color: SilverType: SIM Card Holder TrayFor the SIM Card Tray Holder Eject Pin ToolOpen tool/eject pin for Apple iPhone 2G/3G/3GS/4. Easy to use. It's designed to open/eject Apple iPhone SIM Tray.Features:Brand new tray ejection key, durable use. This is a non-OEM product Easily Open / Remove / Eject the SIM card tray Lightweight, compact and portable, Easily carry with you key ring Quality check have been done to ensure the greatest product qualitySpecifications:Materials:MetalCompatible With Apple iPhone 4S iPhone 4 (GSM,AT&T;) iPhone 4 (GSM,AT&T;)
node2:Product from Amazon platform with title and content: Title: Apple iPhone 4S (GSM,AT&amp;T) Full Screw Set (About 50PCS). Content: Complete screw set for the iPhone 4G smartphone. A new screw set is handy if you are repairing your iPhone digitizer or replacing your iPhone Battery and misplace a screw or two. Includes a full set of screws for the iPhone 4G.FEATURES:High Quality Replacement Screw Screws Set for iPhone 4G .Durable material, premium craftsmanship, Make your iphone look brand new after replace it.Precision molded cases to perfectly fit your iPhone 4G.Thats very worthy to replace it, not buy new phone, and look like new.Replace your Apple iPhone 4G broken, damaged with new one.Complete With Apple iPhone 4G .All Parts appearing exactly as how the picture shows.It is just a accessories, not an actual mobile phone.SPECIFICATIONS:Weight: 0.05 oz.Quantity: About 50pcs.Material:Iron.Compatible With Apple iPhone 4S iPhone 4 (GSM,AT&T;) iPhone 4 (GSM,AT&T;)
node3:Product from Amazon platform with title and content: Title: missing. Content: Special skill and techniques required for proper installation.Think twice before you disassemble your iPhone!
node4:Product from Amazon platform with title and content: Title: iPhone 4 Micro SIM Tray Holder Microsim Card Adapter. Content: This is 100% Brand New High Quality Apple iPhone 4 Sim Card Tray Holder Slot.Quality material, premium craftsmanship.
node5:Product from Amazon platform with title and content: Title: Micro Sim Card Cutter+4 Sim Adapter for iPhone 4 4G 4th. Content: This SIM card cutter for Apple iPhone 4 / iPad will turn your standard SIM card into a micro SIM card. Avoid the hassle of buying extra micro SIM cards for your iPhone 4 / iPad. Simply insert the SIM card into the cutter and press dow. Includes 4 micro SIM card adapters. Cutter color: Silver. Micro SIM card adapter color: Black. Accessory only, SIM cards and Apple iPhone / iPad is not included. Compatible With Apple: iPhone 4 16GB / 32GB.
node6:Product from Amazon platform with title and content: Title: 6in1 Repair Opening Pry Tools Screwdriver Kit Set for iPhone 4S / 4 / 3G / iPod Touch. Content: Ships in Cbus Wireless Retail Packaging.Comes with Cbus Wireless Logo sticker.Note: A technician or expert is recommanded for the installation, our company is not responsible for any damage caused by installation of this accessoryRepair and replace your iPhone 4S / 4 screen without damaging your phoneUse the included section vacuum opener so you don't leave marks or chipping your phone housingUnscrew 2 screws at the bottom of the iPhone on either side of charging portRemove the screen with the suction toolRemove the additional screws to disassemble the main LCD from the digitizer and glassPackage Includes:2 Hair Screw Drivers-Black (""+""shape head and 5-angel star shape head)2 Plastic Prying Tools-Blue1 Suction Vacuum Opener1 x triangular pry tool
node7:Product from Amazon platform with title and content: Title: AT&amp;T Go-Phone Prepaid Micro SIM Card for iPhone 4 and iPhone 4S. Content: has been cut into a micro sim to fit the iphone 4, 4s, ipad
node8:Product from Amazon platform with title and content: Title: Original Genuine OEM Earpiece Ear Speaker Piece Sound Repair Replace Fix Replacement For Apple iPhone 4 4G 4Th Gen Generation. Content: Installation instruction is not included.Ideal replacment if your earpiece is malfunctioning or giving you low quality sound.Products received by customers would be the same as the pictures show.The installation instruction is NOT included with the purchase.Please ask for professional assistance if necessary.Compatible to:AppleiPhone 4Package includes:1. Earpiece Speaker x14. Free Suction Cup x15. Free Cross Screwdriver x16. Free Housing Tool x1*Components not on the list are not included.SKU#:PH-OTHERPARTS-APP-IPHONE4-CODE#H169
node9:Product from Amazon platform with title and content: Title: Star Shape Screws, 5 Point Screws for Iphone 4. Content: Star Shape Screws, 5 Point Screws for Iphone 4
node10:Product from Amazon platform with title and content: Title: Tengfei Replacement LCD Touch Screen With Tools Kit for iPhone 4S Dark Blue. Content: Replacement LCD Touch Screen Digitizer Glass Assembly for iPhone 4S Dark BlueFeatures:High quality Parts. It is used to repair replace your wrong, damaged, cracked, not recognised touch digitizer. Make your iphone looks new again. Each screen is tested before shipping and 100% working. Come with touch screen digitizer, frame.Note: Due to the complexity of iPhone structures, suggest you that seek the professional for dismantling your phone, otherwise it may be easy broken.Color: Dark Blue Package includes: 1 x Front LCD+ Digitizer Combo + Back Glass + Home Bottom for iphone 4S (as the picture showed)Tools: 2 x Plastic Prying Tools-Green 2 x Screwdriver 2 x Pick 1 x suction cup Compatible With: iphone 4s
node11:Product from Amazon platform with title and content: Title: SODIAL- Star Pentacle Pentalobe Torx Screwdriver Compatible With Apple&reg; iPhone&reg; 4. Content: Screwdriver for iPhone 4PentalobePentacleStarScrewdriveriPhone 4 Screwdriver
node12:Product from Amazon platform with title and content: Title: SIM Card Slot Tray Holder for Apple Iphone 3g 3gs 3g S (1 PCS). Content: SIM Card Black Tray Holder for Apple iPhone 3G (Not Compatible with iPhone 1st Gen) by Eforcity
node13:Product from Amazon platform with title and content: Title: Original Genuine OEM Sim Card Tray Slot Holder For Apple iPhone 4 4G 4Th Gen Generation Repair Replace Fix Replacement. Content: Installation instruction is not included.Ideal protection for replacing your damaged or dirty SIM tray that might affects the data connection.Products received by customers would be the same as the pictures show.Compatible to:AppleiPhone 4Color: SilverPackage includes:1. SIM Tray x1*Components not on the list are not included.SKU#:PH-OTHERPARTS-APP-IPHONE4-SR-CODE#I213
node14:Product from Amazon platform with title and content: Title: Genuine Iphone 4 16G 32G Battery 3.7V 1420mAh and Tool. Content: NO RETURNS,REFUNDS OR EXCHANGES ON ELECTRICAL PRODUCTS ALL ELECTRICAL ITEMS ARE SOLD AS IS
node15:Product from Amazon platform with title and content: Title: Zeetron iPhone 4 GSM replacement Digitizer Glass Screen Assembly Kit (With Zeetron Microfiber Cloth, and 6P Tool Kit). Content: If you have a cracked / broken glass but your LCD still display normal and your touch screen function may or may not working properly then this is the correct replacement part. This item is for replace your broken / damaged / cracked / shattered outside Touch Screen digitizer. It's highly sensitive, with solid construction, and no worry about excessive smudge. With the tools, it's easy for DIY. Good choice for you. Features &#x25A0;High quality replacement touch screen digitizer for iPhone 4 &#x25A0;Each screen is tested before shipping and working &#x25A0;Repair / Replacing old, broken, cracked, damaged faulty touch screen Package Includes 1 x Touch Screen Digitizer Replacement for iPhone 4 GSM Version Black Extra Info Compatibility: Apple iPhone 4 4th Gen Warning: Failure to properly instal this item can result in your phone not working properly.
node16:Product from Amazon platform with title and content: Title: For iPhone 4 Black Original LCD, Touch Screen Digitizer and Free 7 Piece Tools, Safely Packed (GSM/AT&amp;T). Content: 100% brand new iphone 4s original lcd + digitizer(GSM/AT&T; ONLY!), with free 7 piece tools and safety box.
node17:Product from Amazon platform with title and content: Title: missing. Content: 4s Back Housing - Black
node18:Product from Amazon platform with title and content: Title: Duck Blind Design Protective Decal Skin Sticker (High Gloss Coating) for Apple iPhone 4 / 4S 16GB 32GB 64GB. Content: This scratch resistant skin decal sticker helps to protect your Apple iPhone 4 / 4S 16GB 32GB 64GB (AT&T; / Verizon / Sprint) from scratch and dings. Self-adhesive plastic-coated decals cover the front and back surfaces, even metal band around the perimeter of your iPhone 4 / 4S cell phone. Each piece includes cutouts for the cameras, controls, light sensors to offer protection without interfering with the iPhone's operation. Skins are paper-thin so they do not add any bulk. Simply peel and stick! They are easy to apply (no bubbles), durable and easily removable without any residue. Comes with a code to download the matching wallpaper as shown. (Note: Due to differences in monitors, color may vary from photo.)This itemIS NOTa hard case cover or faceplate.These are custom-made decal vinyl sticker, allExpedite or Standard orderswill take 2-3 extra business days to ship out.Premium automotive-grade cast vinyl decal withHigh Gloss Coatingthat rivals the reflection of automotive paint or glass. We also carry Matte Satin Coating as selection.
node19:Product from Amazon platform with title and content: Title: Silverhill Tools Pentalobe Screwdriver Size TS1 for iPhone 4 (2nd generation). Content: Sometimes a fix can be as simple as being able to disassemble your phone. These screwdrivers are made of high quality S2 steel, the best steel Silverhill Tools uses in its tool products. Also included is a suction cup which can be used to pull your screen out of your phone after you remove the screws. A small pry pick is also included. In late 2010, Apple switched the screw style on the iPhone 4 from a standard Phillips screwdriver to a 5 point star screwdriver size TS1. Before selecting this screwdriver for purchase, all customers should look at the bottom of their iPhone 4 and see if it has a ""plus"" or a ""star"" screw.
node20:Product from Amazon platform with title and content: Title: Apple iPhone 3GS Black 8GB AT&amp;T Locked. Content: The Apple iphone 3GS 8GB - is the second generation Apple device designed to work anywhere in the world. Just pop in your sim card and go. This phone uses fast 3G technology and provides lightening data speeds.
node21:Product from Amazon platform with title and content: Title: AGPtek&reg; All in One iPhone 5 5G 5th Nano SIM Card Cutter Cut Any GSM sim into Nano or any Micro Sim into Nano Sim + Adapters to Micro &amp; SIM(Standard). Content: Most card cutter cannot cut Micro SIM. But with the Plastic adapter included in this item, you can cut your old Micro SIM into Nano SIM. Nano SIM is about 15% thicker than SIM. After cutting, you still need to polish it to the proper size. It will cut down part of Plastic chip of SIM, but the effective chip area is still complete. However, take things slowly. You may damage your card if this isn't done properly. Before cutting the card, you need to be clear about the risk.Package Included:1 x Micro SIM cutter1 x Plastic adapter to cut micro1 x Plastic adapter to micro1 x Plastic adapter to SIM
node22:Product from Amazon platform with title and content: Title: Gino SIM Card Slot Tray Holder for Apple iPhone 1st Generation. Content: This is 100% Brand new and Never used.
node23:Product from Amazon platform with title and content: Title: iPhone 3gS Screen Repair Kit - Apple iPhone 3gS Lcd Glass Screen Cover with Touch Screen Digitizer, Frame, Home Flex Button, Ear Speaker and Tool. Content: Full Complete top front glass touch screen panel repair / replacement Kit : including are all parts pre-installed assembly kit including the top glass with digitizer / touch screen function, ear speaker part with flex cable, top plastic home button and bottom home button pad sensor with flex cable, all parts pre-installed on the frame. The frame also has the built-in rubber seal line that go around the screen. Including the tools so you can open up the top front panel, lift up the flex cable connectors, pull off the LCD assembly (not included), then slide the LCD assembly into this top front glass frame assembly and now you are ready to re-connect the flex cable connectors back to the main board, screw everything back and your repair / replacement work is done. Also including to our WirelessFinest link to installation guide step by step with picture. Compatible : Apple iPhone 3g 16gb or 32gb (will NOT compatible with iPhone 3g or first generation iPhone 2g). NOTE : this version is come with the foam pad pre-installed at the digitizer flex cable connector and also protective tapes pre-installed on the sides of the frame to prevent the sides making contact to the case that can degrade signals.
node24:Product from Amazon platform with title and content: Title: Generic Front Screen Glass Lens For iPhone 4 Black. Content: Product Features:100% brand new and high quality front screenReplace your old, broken, cracked, damaged front lensEvery product is checked individually before shippingCompatible with:Apple iPhone 4Package Includes:1 x Glass Lens(Touch Screen and lcdNOTIncluded)",products,nc
"Classify the product represented by node12 using its subgraph data (text attributes and connections) as follows.

nodex: <your summary> format with strict word limits:  
node0: Firefighter romance between injured Steve and Carly amid terrorism, featuring military aviation and suspense.  
node1: Sports romance author Julie Brannagh shares her background, blending NFL passion with small-town life.  
node2: Shannon spies on football star Brody, leading to trust issues and steamy romance amid health secrets.  
node3: Missing content.  
node4: Missing content.  
node5: Emotional romantic comedy by Dakota Cassidy, exploring self-worth and love in a trilogy opener.  
node6: Motorcycle club romance with intense sex and emotional depth in Kristen Ashley's Chaos series.  
node7: Psychic mix-up sparks romance between Jillie and Aidan in a Florida-set summer romance.  
node8: Missing content.  
node9: Heartfelt Christmas romance highlighting family and love in Sarah Morgan's cozy style.  
node10: Billionaire and businesswoman's no-strings affair turns serious amid illness and Brooklyn family drama.  
node11: Missing content.  
node12: Thriller with humor and romance, featuring a fast-paced plot and extended family dynamics.  
node13: Military-shifter team battles a scientist, blending action and explicit romance in an X-Ops opener.  
node14: Erotica author Jaci Burton's unavailable motorcycle romance, set in the Wild Riders series.  
node15: Missing content.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node3>,<node1, node2>,<node1, node5>,<node1, node6>,<node1, node7>,<node2, node4>,<node2, node5>,<node2, node9>,<node2, node10>,<node2, node11>,<node2, node12>,<node2, node13>,<node4, node14>,<node5, node15>,<node7, node15>,<node8, node9>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning",Books,"

nodex: <your summary> format with strict word limits:  
node0: Firefighter romance between injured Steve and Carly amid terrorism, featuring military aviation and suspense.  
node1: Sports romance author Julie Brannagh shares her background, blending NFL passion with small-town life.  
node2: Shannon spies on football star Brody, leading to trust issues and steamy romance amid health secrets.  
node3: Missing content.  
node4: Missing content.  
node5: Emotional romantic comedy by Dakota Cassidy, exploring self-worth and love in a trilogy opener.  
node6: Motorcycle club romance with intense sex and emotional depth in Kristen Ashley's Chaos series.  
node7: Psychic mix-up sparks romance between Jillie and Aidan in a Florida-set summer romance.  
node8: Missing content.  
node9: Heartfelt Christmas romance highlighting family and love in Sarah Morgan's cozy style.  
node10: Billionaire and businesswoman's no-strings affair turns serious amid illness and Brooklyn family drama.  
node11: Missing content.  
node12: Thriller with humor and romance, featuring a fast-paced plot and extended family dynamics.  
node13: Military-shifter team battles a scientist, blending action and explicit romance in an X-Ops opener.  
node14: Erotica author Jaci Burton's unavailable motorcycle romance, set in the Wild Riders series.  
node15: Missing content.","node0:Product from Amazon platform with title and content: Title: Pure Heat (Firehawks). Content: *Starred Review* Injured in a firefighting accident, Steve Mercer, smoke jumper-turned-drone pilot, is new to Oregon&#x2019;s Mount Hood Aviation unit, and he is feeling physically useless and unmanned after months in rehab. Carly Thomas, known in firefighting circles as &#x201C;The Flame Witch&#x201D; for her legendary firefighting ability, is a third-generation firefighter who has lost both her father and her fianc&#xE9; to fires and wants nothing serious to do with another man. Their attraction, however, is instant and hot, though it does take them a while to admit to it, let alone trust it. Beyond the love story, Buchman provides a riveting adventure involving forest aviation firefighting and a band of home-grown terrorists. Mark Henderson and Emily Beale, SOARofficers and helicopter pilots from Buchman&#x2019;s (Take Over at Midnight, 2013) great Night Stalkers series, are now part of the MHA unit, allowing addicted Night Stalkers readers to catch up with them and meet another impressive crew of adrenaline junkies. Strong, competent female characters and compelling technical and regional details are juxtaposed with a tender romance as Buchman launches his new Firehawks series, a natural for all military romance fans. --Mary K. Chelton
node1:Product from Amazon platform with title and content: Title: Catching Cameron: A Love and Football Novel. Content: Julie Brannagh has been writing since she was old enough to hold a pencil. She lives in a small town near Seattle, where she once served as a city council member and owned a yarn shop. She shares her home with a wonderful husband, two uncivilized Maine Coons, and a rambunctious chocolate Lab.When she's not writing, she's reading&#8212;or armchair-quarterbacking her favorite NFL team from the comfort of the family room couch. Julie is a Golden Heart&#174; finalist and the author of contemporary sports romances.
node2:Product from Amazon platform with title and content: Title: Risky Game (An Out of Bounds Novel). Content: Shannon Everett is a hardworking PhD candidate with an internship with the Baltimore Blaze football team. When she is anonymously contacted by an infamous gossip blogger offering a pretty penny for information on football star Brody Janik, she can&#x2019;t refuse the money; it would solve her family&#x2019;s financial problems. But when Shannon finds herself snooping in the Blaze locker room, her conscience prevents her from going through with it&#x2014;but not before overhearing Brody discussing a serious health issue with his trainer. When Brody discovers that Shannon has been spying, he is furious and thinks that she is the gossip blogger. Shannon denies it and offers to help Brody with his condition. With his career at stake, Brody can&#x2019;t refuse. The two can&#x2019;t deny their attraction for one another, but there is one thing holding them both back: trust. Risky Game, the third installment in Solheim&#x2019;s (A Numbers Game, 2014) Out of Bounds series, is a fun novel with a well-developed plot and likable characters. Readers will root for Brody and Shannon through numerous highs and lows and plenty of steamy scenes. --Patricia Smith
node3:Product from Amazon platform with title and content: Title: ""The Expert's Guide to Driving a Man Wild (A Bluebonnet Novel)"". Content: missing
node4:Product from Amazon platform with title and content: Title: Nauti Enchantress (Nauti Girls). Content: missing
node5:Product from Amazon platform with title and content: Title: Something to Talk About (Plum Orchard). Content: ""A startlingly deep heartstring-tugger....The most powerful scenes are the ones where Dixie learns that she is worthy of being loved."" -Publishers Weekly on Talk Dirty to Me, Starred Review""With her signature humor, Cassidy kicks off her new trilogy with a bang....Run to get this book!"" -RT Book Reviews on Talk Dirty to Me, Top Pick!""Dakota Cassidy is a fun, fresh voice in romantic comedy."" -New York Times bestselling author Carly Phillips""Cassidy's upbeat style and wicked sense of humor...will enchant readers."" -Booklist
node6:Product from Amazon platform with title and content: Title: Sweet Dreams (Colorado Mountain). Content: ""Ashley delivers a deeply emotional second installment of the Chaos contemporary romance series (afterOwn the Wind)... Punctuated by blistering-hot sex scenes and fascinating glimpses into the tough world of motorcycle clubs, this romance also delivers true heart and emotion, and a story that will stay with the reader long after the final page is turned.""&#x2014;Publishers Weekly, Starred Review, onFire Inside""I adore Kristen Ashley's books!""&#x2014;Maya Banks,New York Timesbestselling author""Kristen Ashley's books are addicting!""&#x2014;Jill Shalvis,New York Timesbestselling author""[Kristen] Ashley captivates.""&#x2014;Publisher's Weekly""With Brock's raw side contrasted with Tess's innocence,Wild Mandelivers a passionate, opposites-attract romance.""&#x2014;Patricia Smith,Booklist""There is something about them [Ashley's books] that I find crackalicious.""&#x2014;Kati Brown,DearAuthor.com""I felt all of the rushes, the adrenaline surges, the anger spikes... my heart pumping in fury. My eyes tearing up when her my heart (I mean...herheart) would break."" (On Motorcycle Man)&#x2014;Maryse's Book Blog,Maryse.net
node7:Product from Amazon platform with title and content: Title: ""No Sunshine When She's Gone"". Content: While visiting a psychic fair, Jillie Mac sat down in an empty chair because she was tired, unaware that she&#x2019;d accidentally taken the seat of a fortuneteller on break. Aidan Cates doesn&#x2019;t believe anyone can tell him about his past and present, let alone his future, but his girlfriend insists that they get a reading from &#x201C;Aries Martine.&#x201D; Going along with the mistaken identity, Jillie gives a spot-on account of what she&#x2019;d seen the night before&#x2014;Aidan&#x2019;s girlfriend with another man. Aidan ends his relationship with this duplicitous woman only to discover that Aries Martine is a fake, too. Unfortunately, Jillie is in town to begin a big project with Aidan, and now she&#x2019;s not sure he&#x2019;ll ever trust her. Angell&#x2019;s (No Strings Attached, 2013) return to the charming Florida oceanfront town of Barefoot William makes for a delightful summer read. --Shelley Mosley
node8:Product from Amazon platform with title and content: Title: Then Came You (An Animal Magnetism Novel). Content: missing
node9:Product from Amazon platform with title and content: Title: Suddenly Last Summer (Hqn) (English Edition). Content: 'Poignant and heartfelt, this paradoxically warm contemporary will leave readers eager for another visit to Snow Crystal.'PUBLISHERS WEEKLY'Morgan's romantic page-turner will thrill readers.'&#xA0;Top Pick 4.5* RT Book Reviews'If Morgan continues to write believable characters like this that deal with real-life issues and manage to find love, I will be happy to read anything else she writes.'A- Desert Island Keeper Review &#xA0; &#xA0;All About Romance""Sarah Morgan puts the magic in Christmas.""-Now Magazine""Morgan's brilliant talent never ceases to amaze.""-Romantic Times
node10:Product from Amazon platform with title and content: Title: Romeo, Romeo. Content: Debut author Kaye provides a pleasing romantic romp mixing Italian Brooklyn family values, hot sex and plenty of food. Gorgeous millionaire bachelor Nick Romeo and high-powered corporate turnaround expert Rosalie Ronaldi know what they want from each other: no strings, no heartbreak. When Rosalie falls seriously ill, their casual intentions are tested, though secrets and their mutual business interests threaten to derail the budding romance. Nick, at times almost too perfect, demonstrates that his domestic skills extend far outside the bedroom, astonishing decidedly imperfect Rosalie, whose awe will be familiar to every professional woman who's too busy for perfect housekeeping. Kaye's portrayal of modern romance against the background of an old-fashioned, gossipy extended family rings true, and Nick's efforts to wow Rosalie with fabulous home cooking are endlessly entertaining.(Nov.)Copyright &copy; Reed Business Information, a division of Reed Elsevier Inc. All rights reserved.
node11:Product from Amazon platform with title and content: Title: Fighting For You: A Danvers Novel. Content: missing
node12:Product from Amazon platform with title and content: Title: ""Don't Mess with Texas (Hotter in Texas)"". Content: RAVE REVIEWS FORDON'T MESS WITH TEXASAND CHRISTIE CRAIG:""Hold onto your Stetsons . . . A thrillride of hunky heroes, high jinks, and heartwarming romance.""-Lori Wilde,New York Timesbestselling author""Top pick! Four and a half stars...Fast moving, exciting and suspenseful , with the many delightful characters Craig always provides. The secondary romance is a wonderful touch, and much of the humor originates with and is provided by the male characters.""--RT Book ReviewsonDivorced, Desperate, and Deceived""Fast-paced...the action only stops long enough for steamy passion...Craig keeps the sexual tension as high as the suspense.""--Publishers WeeklyonDivorced, Desperate, and Deceived
node13:Product from Amazon platform with title and content: Title: Her Perfect Mate (X-Ops). Content: As Tyler launches the X-Ops series, Special Forces captain Landon Donovan is abruptly assigned to a politically controversial, secret Homeland Security unit that pairs humans with shifters, part-animal counterparts carrying natural genetic mutations. His new and gorgeous partner, Ivy Halliwell, is part cat, has lost two previous partners and is now known as &#x201C;Poison Ivy.&#x201D; Despite this, she and Landon not only work well together but give in to a fierce sexual attraction and fall in love. Before this can complicate their work lives, though, they are sent to catch an evil German scientist who is kidnapping biologists. Ivy is captured during their raid, and Donovan calls on his former special ops team and another shifter in their unit to help rescue her and kill the bad guys. But two of those escape with samples of her blood, paving the way for the next X-Ops installment. This is an action-packed, sensual genre-blend of military and paranormal romance with appeal for readers of both. The explicit sex scenes, while limited in number, show the influence of erotica on both subgenres. --Mary K. Chelton
node14:Product from Amazon platform with title and content: Title: Riding Wild (Wild Riders). Content: Jaci Burton has written over twenty-five books for Ellora's Cave and is a well-known author in the erotic romance community. She lives with her husband, who inspires her stories.--This text refers to an out of print or unavailable edition of this title.
node15:Product from Amazon platform with title and content: Title: ""Perfect Together (Serendipity's Finest)"". Content: missing",products,nc
"Classify the product represented by node2 using its subgraph data (text attributes and connections) as follows.

node0: Classroom decorative accents for walls, labels, and learning games like sorting.  
node1: 37-foot border trim with butterflies/flowers for spring-themed classroom or party decor.  
node2: 4-inch die-cut letters in various colors/fonts for displays or labeling.  
node3: 13-pack scalloped borders (39ft total) for framing bulletin boards/windows.  
node4: 13 science fair titles (e.g., Hypothesis) on cardstock for project boards.  
node5: Disposable lab coats with pockets/snaps for splash/spill protection.  
node6: UV-sensitive beads change color in sunlight; ideal for science experiments or jewelry.  
node7: 400 silver star stickers for rewards, charts, or trading.  
node8: 13 colored leaves borders (39ft) for classroom/decor framing.  
node9: Pre-punched letters/numbers in vibrant colors for displays and learning activities.  
node10: 36 gold/silver/white stars for classroom decor or student rewards.  
node11: Dr. Seuss motivational banner (45in) for classroom walls/bulletin boards.  
node12: Birthday-themed poster chart for classroom/hallway celebrations.  
node13: Dual-tip permanent markers (8 colors) for creative project signage.  
node14: Navy iron-on velour letters (72-pack) for customizing fabric/clothing.  
node15: Leaf-shaped cut-outs for classroom themes, awards, or decorations.  
node16: Giant apple basket bulletin board for seasonal or harvest displays.  
node17: Colorful stickers to reward students and enhance classroom motivation.  
node18: 48 spotted trimmers (4 designs) for bordering bulletin boards.  
node19: Mini star accents (2.8in) for classroom decor or educational games.  
node20: Neon pre-cut poster shapes (e.g., arrows) for creative project backdrops.  
node21: Dr. Seuss phonics panels with teacher guides for language arts lessons.  
node22: Lorax-themed stickers for classroom projects or rewards.  
node23: Durable chef aprons for kitchen use or gifts.  
node24: 36 photo-leaf cut-outs for classroom/decor projects.  
node25: Adjustable tree bulletin board with leaves for seasonal displays.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node0, node5>,<node0, node6>,<node1, node8>,<node2, node3>,<node2, node4>,<node2, node9>,<node2, node10>,<node2, node11>,<node2, node12>,<node2, node13>,<node2, node14>,<node2, node15>,<node2, node16>,<node4, node13>,<node7, node17>,<node8, node12>,<node8, node18>,<node9, node18>,<node9, node19>,<node10, node20>,<node11, node21>,<node11, node22>,<node14, node23>,<node15, node24>,<node15, node25>,<node16, node17>.

Consider: semantic and structural information. Select strictly from:'Baby', 'Camera & Photo', ' Magazine Subscriptions', 'CDs & Vinyl', 'Kindle Store', 'Computers', 'Tools & Home Improvement', 'Software', 'Video Games', 'Books', 'Musical Instruments', 'Movies & TV', 'label 25', 'Kitchen & Dining', 'Toys & Games', 'Baby Products', 'GPS & Navigation', 'Gift Cards', 'Digital Music', 'Grocery & Gourmet Food', 'Home Improvement', 'Furniture & decoration', 'Health & Personal Care', 'All Electronics', 'Electronics', 'All Beauty', '#508510', 'Beauty', 'MP3 Players & Accessories', 'Home & Kitchen', 'Collectibles & Fine Art', 'Purchase Circles', 'Car Electronics', 'Office Products', 'Patio, Lawn & Garden', 'Pet Supplies', 'Clothing, Shoes & Jewelry', 'Arts, Crafts & Sewing', 'Industrial & Scientific', 'Buy a Kindle', 'Amazon Fashion', 'Luxury Beauty', 'Sports & Outdoors', 'Cell Phones & Accessories', 'Office & School Supplies', 'Automotive', 'Appliances'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:Office Products)
Brief_reasoning: Your_brief_reasoning","Arts, Crafts & Sewing","

node0: Classroom decorative accents for walls, labels, and learning games like sorting.  
node1: 37-foot border trim with butterflies/flowers for spring-themed classroom or party decor.  
node2: 4-inch die-cut letters in various colors/fonts for displays or labeling.  
node3: 13-pack scalloped borders (39ft total) for framing bulletin boards/windows.  
node4: 13 science fair titles (e.g., Hypothesis) on cardstock for project boards.  
node5: Disposable lab coats with pockets/snaps for splash/spill protection.  
node6: UV-sensitive beads change color in sunlight; ideal for science experiments or jewelry.  
node7: 400 silver star stickers for rewards, charts, or trading.  
node8: 13 colored leaves borders (39ft) for classroom/decor framing.  
node9: Pre-punched letters/numbers in vibrant colors for displays and learning activities.  
node10: 36 gold/silver/white stars for classroom decor or student rewards.  
node11: Dr. Seuss motivational banner (45in) for classroom walls/bulletin boards.  
node12: Birthday-themed poster chart for classroom/hallway celebrations.  
node13: Dual-tip permanent markers (8 colors) for creative project signage.  
node14: Navy iron-on velour letters (72-pack) for customizing fabric/clothing.  
node15: Leaf-shaped cut-outs for classroom themes, awards, or decorations.  
node16: Giant apple basket bulletin board for seasonal or harvest displays.  
node17: Colorful stickers to reward students and enhance classroom motivation.  
node18: 48 spotted trimmers (4 designs) for bordering bulletin boards.  
node19: Mini star accents (2.8in) for classroom decor or educational games.  
node20: Neon pre-cut poster shapes (e.g., arrows) for creative project backdrops.  
node21: Dr. Seuss phonics panels with teacher guides for language arts lessons.  
node22: Lorax-themed stickers for classroom projects or rewards.  
node23: Durable chef aprons for kitchen use or gifts.  
node24: 36 photo-leaf cut-outs for classroom/decor projects.  
node25: Adjustable tree bulletin board with leaves for seasonal displays.","node0:Product from Amazon platform with title and content: Title: Teacher Created Resources Science Accents (4740). Content: Use this decorative artwork to dress up classroom walls and doors, label bins and desks, or accent bulletin boards. You can use the pieces for learning games like sorting, patterning and graphing
node1:Product from Amazon platform with title and content: Title: Butterflies &amp; Flowers Border Trim Party Accessory (1 count) (12/Pkg). Content: Beistle 50213 Butterflies and Flowers Border Trim. Creates a total of 37 feet of trim. This border trim is flat on one edge and wavy on the other edge. It has a great design of butterflies, flowers and bumblebees. It is very cute for the springtime and is a great item to use for decoration on bulletin boards in schools and offices.
node2:Product from Amazon platform with title and content: Title: 4-Inch Die Cut Letters (Various Colors and Fonts). Content: 4"" Die Cut Letters
node3:Product from Amazon platform with title and content: Title: Carson Dellosa Sassy Sprockets Borders (108085). Content: Perfect to use alone or in layers, these scalloped borders come in a pack of thirteen 3' x 2.25"" strips for a total length of 39 feet! The strips are great for framing your bulletin boards and windows or for complementing charts and class creations.
node4:Product from Amazon platform with title and content: Title: Flipside Science Fair Titles: Black. Content: This package contains (13) 1-3/8"" x 8-1/2"" titles for school projects, science fairs, home, and at work. Titles are printed on high quality coated cardstock and perforated. Titles include: Introduction, Procedure, Hypothesis, Problem, Data, Materials, Results, Application, Conclusion, Graph, Abstract, Purpose, and Variables. Available with white backgrounds with fonts in a variety of colors (red, green, blue, and black), each sold separately.
node5:Product from Amazon platform with title and content: Title: Impressions Paper 7385L Disposable Lab Coats, Spun-Bonded Polypropylene, Large, White, 30/Carton. Content: Disposable non-sterile coats help protect workers from liquid splashes or spills. Soft, lightweight coats feature long sleeves, knitted cuffs, collar, two pockets and four front snaps.
node6:Product from Amazon platform with title and content: Title: Ajax Scientific UV Beads (Pack of 1000). Content: Ajax Scientific UV beads are extremely sensitive to natural light and change color dramatically from white to various colors when exposed to sunlight or even on an overcast day. Containing trace amounts of a photochromic pigment that are sensitive to the ultraviolet component of daylight, the beads have many different uses ranging from scientific testing of (ultraviolet) sun block materials to the creation of 'smart' jewellery. Available as pack of 1000 beads per bag of assorted colors.
node7:Product from Amazon platform with title and content: Title: Silver Stars. Content: Little rewards for big successes! These chart-sized stickers are perfect for Trend's Incentive Pads. Kids love them for trading and collecting, too. 400 stickers.
node8:Product from Amazon platform with title and content: Title: Carson Dellosa Colored Leaves Borders (1227). Content: Perfect to use alone or in layers, these scalloped borders come in a pack of thirteen 3' x 2.25"" strips for a total length of 39 feet! The strips are great for framing your bulletin boards and windows or for complementing charts and class creations.
node9:Product from Amazon platform with title and content: Title: Colorful Patterns 4-Inch Playful Combo Ready Letters. Content: Time-saving, reusable, and easy to use Ready Letters are available in contemporary styles, bright colors, and fun patterns to enhance every kind of display. Use them for bulletin boards, signs, news boards, showcases, student work displays, alphabet learning activities, banners, labels, and more! Pre-punched letters. 149 titles in 11 attractive, easy-to-read fonts. Solids, sparkles, and metallics. Fade-resistant colors coordinate with TREND products. Durable and reusable. Set contains: 59 uppercase letters, 83 lowercase letters, 20 numerals 0-9, 36 punctuation marks, and 18 Spanish accent marks.
node10:Product from Amazon platform with title and content: Title: Eureka Paper Cut-Outs, Gold and Silver and White Stars, Package of 36 (841202). Content: Paper Magic's Eureka division brings you terrific learning tools, classroom and home decor, party favors, and fun games for children. Since 1986, The Paper Magic Group, Inc. has created and distributed a variety of educational and seasonal products. We are proud to offer the best educational and motivational merchandise for home and school, including games and puzzles, bulletin board decorating sets, banners, recognition awards, bookmarks, and success stickers. Paper Magic also offers boxed greeting cards for Christmas, gift tags and seals, vinyl window clings, and home d&#xE9;cor products, Valentine products; classroom-exchange Valentines, stickers, treat sacks, cutouts, and danglers. All Paper Magic divisions maintain large product development and creative teams; investing significantly in consumer and product trend research to bring our customers the latest in design. The divisions share distribution facilities in Pennsylvania; goods are manufactured in Paper Magic's domestic production facilities or produced under the company's direction in factories worldwide.
node11:Product from Amazon platform with title and content: Title: Eureka Dr. Seuss Classroom Banner, Oh The Places, 12 x 45 Inches (849616). Content: Eureka Classroom Banners are designed to decorate walls and bulletin boards, to welcome and encourage students. Available in a wide variety of color, print, and message options. Paper Magic's Eureka division brings you terrific learning tools, classroom and home decor, party favors, and fun games for children. Since 1986, The Paper Magic Group, Inc. has created and distributed a variety of educational and seasonal products. We are proud to offer the best educational and motivational merchandise for home and school, including games and puzzles, bulletin board decorating sets, banners, recognition awards, bookmarks, and success stickers. Paper Magic also offers boxed greeting cards for Christmas, gift tags and seals, vinyl window clings, and home d&#xE9;cor products, Valentine products; classroom-exchange Valentines, stickers, treat sacks, cutouts, and danglers. All Paper Magic divisions maintain large product development and creative teams; investing significantly in consumer and product trend research to bring our customers the latest in design. The divisions share distribution facilities in Pennsylvania; goods are manufactured in Paper Magic's domestic production facilities or produced under the company's direction in factories worldwide.
node12:Product from Amazon platform with title and content: Title: ""Creative Teaching Press Poppin' Patterns Happy Birthday Poster Chart (6423)"". Content: Celebrate birthdays throughout the year! Use to decorate bulletin boards, hallways, doors, and common areas!
node13:Product from Amazon platform with title and content: Title: ""Elmer's Project Popperz Dual-Tip, Thin and Thick Markers in 8 Permanent Colors (E3064)"". Content: Project Popperz are a complete accessory line that aids in project creation. Creating show stopping displays has never been easier! Perfect for kids and adults in need of materials for school and craft projects as well as signage for parties, garage sales, car washes, pep rallies, fundraisers or any other event where you want eye-popping attention! Dual-tip markers are perfect for project creation. Make thick lines by drwaing with the side of the marker and thin lines by drawing with the tip. Includes 4 dual ended markers with 8 permanent colors, red, blue, green, brown, purple, orange and yellow. Permanent on most surfaces and water resistant!
node14:Product from Amazon platform with title and content: Title: Dritz 55190-3 Iron-On Letters, Navy, 1-1/4-Inch, 72-Pack. Content: These iron-on letters are textured, velour appliques and are perfect for team jerseys. Bonds permanently to fabric and paper, not recommended for synthetic fabrics. Use to personalize home decor, purses, t-shirts and other clothing items. Turn garment inside out, machine wash and dry. These 72 iron-on letters includes 4 each - a-b-c-e-g-h-l-m-r-s and 2 each - d-f-i-j-k-n-o-p-q-t-u-v-w-x-y-z. Test to be sure temperature and timing are appropriate for fabric. Directions are, place letters (print side down) in desired position on fabric. Heat dry iron for 5 minutes on cotton setting. Cover with press cloth and press for 15 to 20 seconds on each side. Move iron slowly to avoid scorching. Allow to cool. Check by partially removing paper. Machine washable, press again if necessary. Available in navy color. Measures 1-1/4-inch height.
node15:Product from Amazon platform with title and content: Title: Carson Dellosa Leaves Cut-Outs (120080). Content: Accent your classroom theme, encourage good behavior, create award, and so much more with these colorful cut-outs!
node16:Product from Amazon platform with title and content: Title: Scholastic Giant Apple Basket! Bulletin Board (TF3109). Content: Giant Apple Basket Bulletin Board
node17:Product from Amazon platform with title and content: Title: Awesome Assortment: SuperSpots&reg; &amp; SuperShapes Stickers Variety Pack. Content: Providing students with a visual representation of their achievements and progress is a great way to promote academic development. This variety pack provides you with a large number of unique designs and fun colors. A great way to reward students and liven up the classroom.
node18:Product from Amazon platform with title and content: Title: Trend Enterprises Lotsa Spots Terrific Trimmers - 2 1/4 x 156 in - Set of 48 Includes 4 Designs. Content: 12 panels of each design (4); 2 1/4"" x 156"". 4 Different Designs - Spotted Red, Spotted Blue, Spotted Yellow, Spotted Black. Frame displays and enhance bulletin boards!.
node19:Product from Amazon platform with title and content: Title: Teacher Created Resources Mini Accents, Stars (5125). Content: Use this decorative artwork to dress up classroom walls and doors, label bins and desks, or accent bulletin boards. You can use the pieces for learning games like sorting, patterning and graphing. Each piece measures about 2 5/8 Inches
node20:Product from Amazon platform with title and content: Title: ArtSkills Large Pre Cut Poster Board Shapes, 22&quot; x 28&quot;, 5 Pieces (PA-1363). Content: ArtSkills Large Pre-Cut Poster Shapes are a great way to make a fun poster board. The Pre-Cut shapes are 22"" x 28"" and come with 5 unique shapes - scalloped edge, jagged edge, balloon, arrow and burst. Each shape is a Bright Neon Color on both sides! Use them by themselves or layer them on another sheet of poster board for your sports events, birthday parties, yard sales, school projects, and more!
node21:Product from Amazon platform with title and content: Title: Eureka Dr. Seuss Phonics Bulletin Board Set, 5 Panels 17 x 24&quot; Each. Content: A fun way to introduce students to basic phonics. Includes 5 panels, a teacher's guide and reproducibles. Aligns with MCREL national standards for language arts.
node22:Product from Amazon platform with title and content: Title: Eureka The Lorax Project Stickers. Content: The choices are endless with Eureka stickers. There are hundreds of ways to utilize this versatile format at home or in the classroom.
node23:Product from Amazon platform with title and content: Title: Plain White Chef Bib Aprons | Cheap Cooking Aprons. Content: Working chef wear that works as hard as you do! Comfortable and functional, our aprons, chef hats, and chef coats are well fitting and ready to take on any task in the kitchen or the grill. Create an upscale look regardless of your cooking experience! Chef wear makes a perfect gift for men or women.
node24:Product from Amazon platform with title and content: Title: Eureka 5-Inch Paper Cut-Outs, Photo Leaf, Package of 36 (841222). Content: Paper Magic's Eureka division brings you terrific learning tools, classroom and home decor, party favors, and fun games for children. Since 1986, The Paper Magic Group, Inc. has created and distributed a variety of educational and seasonal products. We are proud to offer the best educational and motivational merchandise for home and school, including games and puzzles, bulletin board decorating sets, banners, recognition awards, bookmarks, and success stickers. Paper Magic also offers boxed greeting cards for Christmas, gift tags and seals, vinyl window clings, and home d&#xE9;cor products, Valentine products; classroom-exchange Valentines, stickers, treat sacks, cutouts, and danglers. All Paper Magic divisions maintain large product development and creative teams; investing significantly in consumer and product trend research to bring our customers the latest in design. The divisions share distribution facilities in Pennsylvania; goods are manufactured in Paper Magic's domestic production facilities or produced under the company's direction in factories worldwide.
node25:Product from Amazon platform with title and content: Title: ""Scholastic Teacher's Friend Classroom Tree! Bulletin Board (TF3084)"". Content: Large, bare tree that measures 47&#x201D; wide and is adjustable from 41&#x201D; to 65&#x201D; tall. The display comes complete with 32 spring green leaves and 32 autumn leaves.",products,nc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Where in the picture is the red napkin, in the top or in the bottom?

node0:Object in an image. Name: flowers; attribute: yellow; (x,y,w,h): (207, 85, 18, 18)
node1:Object in an image. Name: forks; attribute: silver; (x,y,w,h): (200, 305, 45, 13)
node2:Object in an image. Name: napkin; attribute: red; (x,y,w,h): (269, 222, 116, 8)
node3:Object in an image. Name: fork; attribute: sitting; (x,y,w,h): (180, 307, 18, 20)
node4:Object in an image. Name: leaves; attribute: green; (x,y,w,h): (5, 142, 34, 38)
node5:Object in an image. Name: chairs; attribute: black; (x,y,w,h): (306, 85, 25, 23)
node6:Object in an image. Name: bucket; attribute: tin, metal, silver; (x,y,w,h): (30, 251, 68, 74)
node7:Object in an image. Name: wine glasses; attribute: turned; (x,y,w,h): (193, 175, 40, 76)
node8:Object in an image. Name: table; (x,y,w,h): (94, 235, 266, 71)
node9:Object in an image. Name: chairs; attribute: wicker, brown; (x,y,w,h): (295, 245, 198, 88)
node10:Object in an image. Name: tablecloth; attribute: striped; (x,y,w,h): (13, 302, 372, 30)
node11:Object in an image. Name: planter; attribute: metal; (x,y,w,h): (5, 123, 92, 70)
node12:Object in an image. Name: flower; attribute: red; (x,y,w,h): (77, 221, 54, 57)

the connection relationship among the nodes mentioned:
 <node0, node5>,<node0, node6>,<node1, node3>,<node1, node6>,<node1, node9>,<node2, node7>,<node3, node6>,<node3, node9>,<node6, node8>,<node7, node8>,<node8, node9>,<node9, node10>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",bottom,"node0:Object in an image. Name: flowers; attribute: yellow; (x,y,w,h): (207, 85, 18, 18)
node1:Object in an image. Name: forks; attribute: silver; (x,y,w,h): (200, 305, 45, 13)
node2:Object in an image. Name: napkin; attribute: red; (x,y,w,h): (269, 222, 116, 8)
node3:Object in an image. Name: fork; attribute: sitting; (x,y,w,h): (180, 307, 18, 20)
node4:Object in an image. Name: leaves; attribute: green; (x,y,w,h): (5, 142, 34, 38)
node5:Object in an image. Name: chairs; attribute: black; (x,y,w,h): (306, 85, 25, 23)
node6:Object in an image. Name: bucket; attribute: tin, metal, silver; (x,y,w,h): (30, 251, 68, 74)
node7:Object in an image. Name: wine glasses; attribute: turned; (x,y,w,h): (193, 175, 40, 76)
node8:Object in an image. Name: table; (x,y,w,h): (94, 235, 266, 71)
node9:Object in an image. Name: chairs; attribute: wicker, brown; (x,y,w,h): (295, 245, 198, 88)
node10:Object in an image. Name: tablecloth; attribute: striped; (x,y,w,h): (13, 302, 372, 30)
node11:Object in an image. Name: planter; attribute: metal; (x,y,w,h): (5, 123, 92, 70)
node12:Object in an image. Name: flower; attribute: red; (x,y,w,h): (77, 221, 54, 57)","node0:Object in an image. Name: flowers; attribute: yellow; (x,y,w,h): (207, 85, 18, 18)
node1:Object in an image. Name: forks; attribute: silver; (x,y,w,h): (200, 305, 45, 13)
node2:Object in an image. Name: napkin; attribute: red; (x,y,w,h): (269, 222, 116, 8)
node3:Object in an image. Name: fork; attribute: sitting; (x,y,w,h): (180, 307, 18, 20)
node4:Object in an image. Name: leaves; attribute: green; (x,y,w,h): (5, 142, 34, 38)
node5:Object in an image. Name: chairs; attribute: black; (x,y,w,h): (306, 85, 25, 23)
node6:Object in an image. Name: bucket; attribute: tin, metal, silver; (x,y,w,h): (30, 251, 68, 74)
node7:Object in an image. Name: wine glasses; attribute: turned; (x,y,w,h): (193, 175, 40, 76)
node8:Object in an image. Name: table; (x,y,w,h): (94, 235, 266, 71)
node9:Object in an image. Name: chairs; attribute: wicker, brown; (x,y,w,h): (295, 245, 198, 88)
node10:Object in an image. Name: tablecloth; attribute: striped; (x,y,w,h): (13, 302, 372, 30)
node11:Object in an image. Name: planter; attribute: metal; (x,y,w,h): (5, 123, 92, 70)
node12:Object in an image. Name: flower; attribute: red; (x,y,w,h): (77, 221, 54, 57)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Is it an indoors scene?

node0:Object in an image. Name: window; (x,y,w,h): (647, 0, 153, 311)
node1:Object in an image. Name: chair; (x,y,w,h): (226, 341, 171, 240)
node2:Object in an image. Name: wall; attribute: white; (x,y,w,h): (0, 0, 594, 435)
node3:Object in an image. Name: jacket; (x,y,w,h): (490, 307, 128, 185)
node4:Object in an image. Name: man; (x,y,w,h): (524, 232, 151, 241)
node5:Object in an image. Name: blind; (x,y,w,h): (633, 0, 167, 142)
node6:Object in an image. Name: chair; (x,y,w,h): (489, 308, 158, 198)
node7:Object in an image. Name: computer; (x,y,w,h): (582, 254, 71, 77)
node8:Object in an image. Name: cart; attribute: white; (x,y,w,h): (0, 406, 70, 195)
node9:Object in an image. Name: desk; (x,y,w,h): (98, 317, 315, 127)
node10:Object in an image. Name: room; (x,y,w,h): (0, 0, 800, 600)
node11:Object in an image. Name: floor; (x,y,w,h): (0, 417, 800, 183)
node12:Object in an image. Name: television; (x,y,w,h): (0, 292, 39, 140)

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node7>,<node1, node3>,<node1, node6>,<node1, node8>,<node1, node12>,<node2, node4>,<node2, node5>,<node2, node7>,<node3, node6>,<node3, node9>,<node4, node7>,<node4, node9>,<node6, node9>,<node9, node12>,<node12, node8>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",yes,"node0:Object in an image. Name: window; (x,y,w,h): (647, 0, 153, 311)
node1:Object in an image. Name: chair; (x,y,w,h): (226, 341, 171, 240)
node2:Object in an image. Name: wall; attribute: white; (x,y,w,h): (0, 0, 594, 435)
node3:Object in an image. Name: jacket; (x,y,w,h): (490, 307, 128, 185)
node4:Object in an image. Name: man; (x,y,w,h): (524, 232, 151, 241)
node5:Object in an image. Name: blind; (x,y,w,h): (633, 0, 167, 142)
node6:Object in an image. Name: chair; (x,y,w,h): (489, 308, 158, 198)
node7:Object in an image. Name: computer; (x,y,w,h): (582, 254, 71, 77)
node8:Object in an image. Name: cart; attribute: white; (x,y,w,h): (0, 406, 70, 195)
node9:Object in an image. Name: desk; (x,y,w,h): (98, 317, 315, 127)
node10:Object in an image. Name: room; (x,y,w,h): (0, 0, 800, 600)
node11:Object in an image. Name: floor; (x,y,w,h): (0, 417, 800, 183)
node12:Object in an image. Name: television; (x,y,w,h): (0, 292, 39, 140)","node0:Object in an image. Name: window; (x,y,w,h): (647, 0, 153, 311)
node1:Object in an image. Name: chair; (x,y,w,h): (226, 341, 171, 240)
node2:Object in an image. Name: wall; attribute: white; (x,y,w,h): (0, 0, 594, 435)
node3:Object in an image. Name: jacket; (x,y,w,h): (490, 307, 128, 185)
node4:Object in an image. Name: man; (x,y,w,h): (524, 232, 151, 241)
node5:Object in an image. Name: blind; (x,y,w,h): (633, 0, 167, 142)
node6:Object in an image. Name: chair; (x,y,w,h): (489, 308, 158, 198)
node7:Object in an image. Name: computer; (x,y,w,h): (582, 254, 71, 77)
node8:Object in an image. Name: cart; attribute: white; (x,y,w,h): (0, 406, 70, 195)
node9:Object in an image. Name: desk; (x,y,w,h): (98, 317, 315, 127)
node10:Object in an image. Name: room; (x,y,w,h): (0, 0, 800, 600)
node11:Object in an image. Name: floor; (x,y,w,h): (0, 417, 800, 183)
node12:Object in an image. Name: television; (x,y,w,h): (0, 292, 39, 140)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Who is wearing the clothes?

node0:Object in an image. Name: skirt; attribute: purple; (x,y,w,h): (116, 308, 43, 45)
node1:Object in an image. Name: pole; (x,y,w,h): (99, 0, 8, 98)
node2:Object in an image. Name: fence; (x,y,w,h): (0, 43, 333, 353)
node3:Object in an image. Name: racket; (x,y,w,h): (173, 264, 26, 60)
node4:Object in an image. Name: woman; (x,y,w,h): (109, 159, 92, 308)
node5:Object in an image. Name: socks; attribute: black; (x,y,w,h): (126, 442, 20, 9)
node6:Object in an image. Name: shoes; attribute: gray; (x,y,w,h): (110, 443, 38, 18)
node7:Object in an image. Name: ball; (x,y,w,h): (161, 0, 9, 3)
node8:Object in an image. Name: clothes; attribute: blue; (x,y,w,h): (114, 247, 68, 108)
node9:Object in an image. Name: shoes; attribute: white; (x,y,w,h): (139, 444, 35, 25)
node10:Object in an image. Name: hand; (x,y,w,h): (161, 158, 22, 17)

the connection relationship among the nodes mentioned:
 <node1, node7>,<node3, node8>,<node4, node0>,<node4, node3>,<node4, node5>,<node4, node6>,<node4, node8>,<node5, node9>,<node6, node9>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",woman,"node0:Object in an image. Name: skirt; attribute: purple; (x,y,w,h): (116, 308, 43, 45)
node1:Object in an image. Name: pole; (x,y,w,h): (99, 0, 8, 98)
node2:Object in an image. Name: fence; (x,y,w,h): (0, 43, 333, 353)
node3:Object in an image. Name: racket; (x,y,w,h): (173, 264, 26, 60)
node4:Object in an image. Name: woman; (x,y,w,h): (109, 159, 92, 308)
node5:Object in an image. Name: socks; attribute: black; (x,y,w,h): (126, 442, 20, 9)
node6:Object in an image. Name: shoes; attribute: gray; (x,y,w,h): (110, 443, 38, 18)
node7:Object in an image. Name: ball; (x,y,w,h): (161, 0, 9, 3)
node8:Object in an image. Name: clothes; attribute: blue; (x,y,w,h): (114, 247, 68, 108)
node9:Object in an image. Name: shoes; attribute: white; (x,y,w,h): (139, 444, 35, 25)
node10:Object in an image. Name: hand; (x,y,w,h): (161, 158, 22, 17)","node0:Object in an image. Name: skirt; attribute: purple; (x,y,w,h): (116, 308, 43, 45)
node1:Object in an image. Name: pole; (x,y,w,h): (99, 0, 8, 98)
node2:Object in an image. Name: fence; (x,y,w,h): (0, 43, 333, 353)
node3:Object in an image. Name: racket; (x,y,w,h): (173, 264, 26, 60)
node4:Object in an image. Name: woman; (x,y,w,h): (109, 159, 92, 308)
node5:Object in an image. Name: socks; attribute: black; (x,y,w,h): (126, 442, 20, 9)
node6:Object in an image. Name: shoes; attribute: gray; (x,y,w,h): (110, 443, 38, 18)
node7:Object in an image. Name: ball; (x,y,w,h): (161, 0, 9, 3)
node8:Object in an image. Name: clothes; attribute: blue; (x,y,w,h): (114, 247, 68, 108)
node9:Object in an image. Name: shoes; attribute: white; (x,y,w,h): (139, 444, 35, 25)
node10:Object in an image. Name: hand; (x,y,w,h): (161, 158, 22, 17)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What is the device to the right of the keyboard in the bottom part of the photo?

node0:Object in an image. Name: controller; attribute: wireless; (x,y,w,h): (309, 279, 39, 32)
node1:Object in an image. Name: pizza; (x,y,w,h): (127, 3, 195, 122)
node2:Object in an image. Name: keyboard; attribute: black; (x,y,w,h): (368, 166, 102, 134)
node3:Object in an image. Name: wall; attribute: white; (x,y,w,h): (293, 23, 204, 240)
node4:Object in an image. Name: floor; (x,y,w,h): (0, 232, 497, 80)
node5:Object in an image. Name: keyboard; (x,y,w,h): (88, 257, 175, 51)
node6:Object in an image. Name: cell phone; (x,y,w,h): (177, 281, 35, 18)
node7:Object in an image. Name: shelves; attribute: wood, black; (x,y,w,h): (17, 15, 108, 248)
node8:Object in an image. Name: walls; (x,y,w,h): (1, 2, 40, 225)
node9:Object in an image. Name: shelf; (x,y,w,h): (22, 0, 120, 234)
node10:Object in an image. Name: laptop; attribute: black; (x,y,w,h): (87, 181, 160, 129)
node11:Object in an image. Name: remote control; attribute: silver; (x,y,w,h): (247, 283, 54, 27)
node12:Object in an image. Name: platform; (x,y,w,h): (121, 121, 176, 142)
node13:Object in an image. Name: cd; attribute: red; (x,y,w,h): (371, 239, 60, 57)
node14:Object in an image. Name: moon; (x,y,w,h): (137, 37, 77, 67)
node15:Object in an image. Name: screen; (x,y,w,h): (93, 190, 108, 75)
node16:Object in an image. Name: wall; (x,y,w,h): (2, 0, 23, 211)
node17:Object in an image. Name: wall; (x,y,w,h): (6, 6, 487, 294)
node18:Object in an image. Name: wall; (x,y,w,h): (340, 156, 65, 44)
node19:Object in an image. Name: computer mouse; attribute: gray; (x,y,w,h): (250, 281, 81, 28)
node20:Object in an image. Name: dvds; (x,y,w,h): (55, 19, 69, 48)
node21:Object in an image. Name: remote control; (x,y,w,h): (306, 280, 40, 25)
node22:Object in an image. Name: computer mouse; attribute: black; (x,y,w,h): (278, 286, 35, 21)
node23:Object in an image. Name: laptop; (x,y,w,h): (263, 245, 100, 43)
node24:Object in an image. Name: cds; (x,y,w,h): (35, 16, 88, 188)

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node5>,<node0, node6>,<node0, node10>,<node0, node11>,<node0, node22>,<node1, node3>,<node1, node7>,<node1, node8>,<node1, node9>,<node1, node16>,<node1, node20>,<node1, node24>,<node2, node3>,<node2, node5>,<node2, node10>,<node2, node11>,<node2, node12>,<node2, node19>,<node2, node21>,<node2, node22>,<node2, node23>,<node3, node10>,<node3, node12>,<node3, node14>,<node3, node15>,<node5, node11>,<node5, node13>,<node5, node19>,<node5, node21>,<node5, node22>,<node5, node23>,<node6, node10>,<node6, node11>,<node6, node19>,<node6, node21>,<node6, node22>,<node7, node10>,<node7, node12>,<node7, node14>,<node7, node15>,<node7, node16>,<node8, node9>,<node8, node12>,<node8, node14>,<node8, node20>,<node8, node24>,<node9, node12>,<node9, node14>,<node9, node15>,<node9, node16>,<node10, node11>,<node10, node13>,<node10, node19>,<node10, node21>,<node10, node22>,<node10, node23>,<node11, node21>,<node12, node16>,<node12, node18>,<node12, node24>,<node13, node2>,<node13, node21>,<node13, node23>,<node14, node16>,<node14, node20>,<node14, node24>,<node16, node20>,<node16, node24>,<node21, node22>,<node24, node7>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",computer mouse,"node0:Object in an image. Name: controller; attribute: wireless; (x,y,w,h): (309, 279, 39, 32)
node1:Object in an image. Name: pizza; (x,y,w,h): (127, 3, 195, 122)
node2:Object in an image. Name: keyboard; attribute: black; (x,y,w,h): (368, 166, 102, 134)
node3:Object in an image. Name: wall; attribute: white; (x,y,w,h): (293, 23, 204, 240)
node4:Object in an image. Name: floor; (x,y,w,h): (0, 232, 497, 80)
node5:Object in an image. Name: keyboard; (x,y,w,h): (88, 257, 175, 51)
node6:Object in an image. Name: cell phone; (x,y,w,h): (177, 281, 35, 18)
node7:Object in an image. Name: shelves; attribute: wood, black; (x,y,w,h): (17, 15, 108, 248)
node8:Object in an image. Name: walls; (x,y,w,h): (1, 2, 40, 225)
node9:Object in an image. Name: shelf; (x,y,w,h): (22, 0, 120, 234)
node10:Object in an image. Name: laptop; attribute: black; (x,y,w,h): (87, 181, 160, 129)
node11:Object in an image. Name: remote control; attribute: silver; (x,y,w,h): (247, 283, 54, 27)
node12:Object in an image. Name: platform; (x,y,w,h): (121, 121, 176, 142)
node13:Object in an image. Name: cd; attribute: red; (x,y,w,h): (371, 239, 60, 57)
node14:Object in an image. Name: moon; (x,y,w,h): (137, 37, 77, 67)
node15:Object in an image. Name: screen; (x,y,w,h): (93, 190, 108, 75)
node16:Object in an image. Name: wall; (x,y,w,h): (2, 0, 23, 211)
node17:Object in an image. Name: wall; (x,y,w,h): (6, 6, 487, 294)
node18:Object in an image. Name: wall; (x,y,w,h): (340, 156, 65, 44)
node19:Object in an image. Name: computer mouse; attribute: gray; (x,y,w,h): (250, 281, 81, 28)
node20:Object in an image. Name: dvds; (x,y,w,h): (55, 19, 69, 48)
node21:Object in an image. Name: remote control; (x,y,w,h): (306, 280, 40, 25)
node22:Object in an image. Name: computer mouse; attribute: black; (x,y,w,h): (278, 286, 35, 21)
node23:Object in an image. Name: laptop; (x,y,w,h): (263, 245, 100, 43)
node24:Object in an image. Name: cds; (x,y,w,h): (35, 16, 88, 188)","node0:Object in an image. Name: controller; attribute: wireless; (x,y,w,h): (309, 279, 39, 32)
node1:Object in an image. Name: pizza; (x,y,w,h): (127, 3, 195, 122)
node2:Object in an image. Name: keyboard; attribute: black; (x,y,w,h): (368, 166, 102, 134)
node3:Object in an image. Name: wall; attribute: white; (x,y,w,h): (293, 23, 204, 240)
node4:Object in an image. Name: floor; (x,y,w,h): (0, 232, 497, 80)
node5:Object in an image. Name: keyboard; (x,y,w,h): (88, 257, 175, 51)
node6:Object in an image. Name: cell phone; (x,y,w,h): (177, 281, 35, 18)
node7:Object in an image. Name: shelves; attribute: wood, black; (x,y,w,h): (17, 15, 108, 248)
node8:Object in an image. Name: walls; (x,y,w,h): (1, 2, 40, 225)
node9:Object in an image. Name: shelf; (x,y,w,h): (22, 0, 120, 234)
node10:Object in an image. Name: laptop; attribute: black; (x,y,w,h): (87, 181, 160, 129)
node11:Object in an image. Name: remote control; attribute: silver; (x,y,w,h): (247, 283, 54, 27)
node12:Object in an image. Name: platform; (x,y,w,h): (121, 121, 176, 142)
node13:Object in an image. Name: cd; attribute: red; (x,y,w,h): (371, 239, 60, 57)
node14:Object in an image. Name: moon; (x,y,w,h): (137, 37, 77, 67)
node15:Object in an image. Name: screen; (x,y,w,h): (93, 190, 108, 75)
node16:Object in an image. Name: wall; (x,y,w,h): (2, 0, 23, 211)
node17:Object in an image. Name: wall; (x,y,w,h): (6, 6, 487, 294)
node18:Object in an image. Name: wall; (x,y,w,h): (340, 156, 65, 44)
node19:Object in an image. Name: computer mouse; attribute: gray; (x,y,w,h): (250, 281, 81, 28)
node20:Object in an image. Name: dvds; (x,y,w,h): (55, 19, 69, 48)
node21:Object in an image. Name: remote control; (x,y,w,h): (306, 280, 40, 25)
node22:Object in an image. Name: computer mouse; attribute: black; (x,y,w,h): (278, 286, 35, 21)
node23:Object in an image. Name: laptop; (x,y,w,h): (263, 245, 100, 43)
node24:Object in an image. Name: cds; (x,y,w,h): (35, 16, 88, 188)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Is there any bed near the black dresser?

node0:Object in an image. Name: dresser; attribute: black; (x,y,w,h): (356, 155, 53, 85)
node1:Object in an image. Name: headboard; attribute: brown, thin; (x,y,w,h): (99, 81, 165, 67)
node2:Object in an image. Name: tissues; attribute: white; (x,y,w,h): (302, 139, 16, 17)
node3:Object in an image. Name: bed; (x,y,w,h): (27, 80, 312, 190)
node4:Object in an image. Name: flowers; (x,y,w,h): (130, 158, 108, 65)
node5:Object in an image. Name: lamp; attribute: on; (x,y,w,h): (54, 95, 37, 65)
node6:Object in an image. Name: pillows; attribute: red; (x,y,w,h): (99, 103, 157, 51)

the connection relationship among the nodes mentioned:
 <node0, node3>,<node1, node5>,<node2, node6>,<node5, node6>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",yes,"node0:Object in an image. Name: dresser; attribute: black; (x,y,w,h): (356, 155, 53, 85)
node1:Object in an image. Name: headboard; attribute: brown, thin; (x,y,w,h): (99, 81, 165, 67)
node2:Object in an image. Name: tissues; attribute: white; (x,y,w,h): (302, 139, 16, 17)
node3:Object in an image. Name: bed; (x,y,w,h): (27, 80, 312, 190)
node4:Object in an image. Name: flowers; (x,y,w,h): (130, 158, 108, 65)
node5:Object in an image. Name: lamp; attribute: on; (x,y,w,h): (54, 95, 37, 65)
node6:Object in an image. Name: pillows; attribute: red; (x,y,w,h): (99, 103, 157, 51)","node0:Object in an image. Name: dresser; attribute: black; (x,y,w,h): (356, 155, 53, 85)
node1:Object in an image. Name: headboard; attribute: brown, thin; (x,y,w,h): (99, 81, 165, 67)
node2:Object in an image. Name: tissues; attribute: white; (x,y,w,h): (302, 139, 16, 17)
node3:Object in an image. Name: bed; (x,y,w,h): (27, 80, 312, 190)
node4:Object in an image. Name: flowers; (x,y,w,h): (130, 158, 108, 65)
node5:Object in an image. Name: lamp; attribute: on; (x,y,w,h): (54, 95, 37, 65)
node6:Object in an image. Name: pillows; attribute: red; (x,y,w,h): (99, 103, 157, 51)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What is the building in front of?

node0:Object in an image. Name: ground; (x,y,w,h): (0, 397, 338, 103)
node1:Object in an image. Name: counter; attribute: wood; (x,y,w,h): (2, 257, 223, 156)
node2:Object in an image. Name: building; (x,y,w,h): (0, 1, 338, 465)
node3:Object in an image. Name: window; (x,y,w,h): (9, 132, 29, 59)
node4:Object in an image. Name: wall; attribute: broken; (x,y,w,h): (49, 92, 75, 376)
node5:Object in an image. Name: refrigerator; attribute: rusty, old; (x,y,w,h): (155, 221, 113, 173)
node6:Object in an image. Name: door frame; (x,y,w,h): (110, 86, 169, 378)
node7:Object in an image. Name: sign; attribute: white; (x,y,w,h): (48, 187, 73, 70)
node8:Object in an image. Name: wall; attribute: broken; (x,y,w,h): (1, 2, 335, 92)

the connection relationship among the nodes mentioned:
 <node2, node3>,<node3, node4>,<node3, node6>,<node4, node5>,<node4, node6>,<node6, node7>,<node7, node4>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",window,"node0:Object in an image. Name: ground; (x,y,w,h): (0, 397, 338, 103)
node1:Object in an image. Name: counter; attribute: wood; (x,y,w,h): (2, 257, 223, 156)
node2:Object in an image. Name: building; (x,y,w,h): (0, 1, 338, 465)
node3:Object in an image. Name: window; (x,y,w,h): (9, 132, 29, 59)
node4:Object in an image. Name: wall; attribute: broken; (x,y,w,h): (49, 92, 75, 376)
node5:Object in an image. Name: refrigerator; attribute: rusty, old; (x,y,w,h): (155, 221, 113, 173)
node6:Object in an image. Name: door frame; (x,y,w,h): (110, 86, 169, 378)
node7:Object in an image. Name: sign; attribute: white; (x,y,w,h): (48, 187, 73, 70)
node8:Object in an image. Name: wall; attribute: broken; (x,y,w,h): (1, 2, 335, 92)","node0:Object in an image. Name: ground; (x,y,w,h): (0, 397, 338, 103)
node1:Object in an image. Name: counter; attribute: wood; (x,y,w,h): (2, 257, 223, 156)
node2:Object in an image. Name: building; (x,y,w,h): (0, 1, 338, 465)
node3:Object in an image. Name: window; (x,y,w,h): (9, 132, 29, 59)
node4:Object in an image. Name: wall; attribute: broken; (x,y,w,h): (49, 92, 75, 376)
node5:Object in an image. Name: refrigerator; attribute: rusty, old; (x,y,w,h): (155, 221, 113, 173)
node6:Object in an image. Name: door frame; (x,y,w,h): (110, 86, 169, 378)
node7:Object in an image. Name: sign; attribute: white; (x,y,w,h): (48, 187, 73, 70)
node8:Object in an image. Name: wall; attribute: broken; (x,y,w,h): (1, 2, 335, 92)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Is there a pot or a lamp in the photograph?

node0:Object in an image. Name: dispenser; (x,y,w,h): (74, 224, 29, 25)
node1:Object in an image. Name: store; (x,y,w,h): (24, 152, 191, 154)
node2:Object in an image. Name: pot; attribute: orange; (x,y,w,h): (141, 311, 64, 58)
node3:Object in an image. Name: roof; attribute: white; (x,y,w,h): (150, 19, 134, 21)
node4:Object in an image. Name: sign; attribute: white; (x,y,w,h): (139, 73, 83, 28)
node5:Object in an image. Name: cooler; attribute: blue, soda; (x,y,w,h): (272, 122, 98, 208)
node6:Object in an image. Name: soda; (x,y,w,h): (287, 177, 24, 16)
node7:Object in an image. Name: wall; attribute: gray, stone, brick; (x,y,w,h): (430, 84, 68, 183)
node8:Object in an image. Name: bag; attribute: yellow; (x,y,w,h): (8, 301, 61, 49)
node9:Object in an image. Name: building; (x,y,w,h): (5, 1, 495, 329)
node10:Object in an image. Name: bush; (x,y,w,h): (324, 82, 33, 22)
node11:Object in an image. Name: shelves; (x,y,w,h): (0, 101, 242, 34)
node12:Object in an image. Name: tree; (x,y,w,h): (301, 58, 119, 79)
node13:Object in an image. Name: leaves; (x,y,w,h): (426, 359, 15, 8)
node14:Object in an image. Name: ground; (x,y,w,h): (206, 312, 285, 64)
node15:Object in an image. Name: plant; attribute: green; (x,y,w,h): (150, 215, 72, 101)
node16:Object in an image. Name: trash can; attribute: full; (x,y,w,h): (366, 246, 36, 71)
node17:Object in an image. Name: sky; (x,y,w,h): (451, 17, 13, 6)
node18:Object in an image. Name: trunk; (x,y,w,h): (378, 161, 24, 15)
node19:Object in an image. Name: door; (x,y,w,h): (273, 116, 154, 165)

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node15>,<node1, node5>,<node1, node6>,<node1, node19>,<node2, node8>,<node2, node14>,<node4, node9>,<node4, node10>,<node4, node12>,<node5, node7>,<node5, node15>,<node5, node16>,<node5, node18>,<node5, node19>,<node6, node5>,<node6, node7>,<node7, node10>,<node7, node12>,<node7, node18>,<node7, node19>,<node8, node9>,<node10, node19>,<node11, node7>,<node11, node12>,<node11, node19>,<node13, node14>,<node15, node2>,<node15, node19>,<node16, node19>,<node18, node12>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",yes,"node0:Object in an image. Name: dispenser; (x,y,w,h): (74, 224, 29, 25)
node1:Object in an image. Name: store; (x,y,w,h): (24, 152, 191, 154)
node2:Object in an image. Name: pot; attribute: orange; (x,y,w,h): (141, 311, 64, 58)
node3:Object in an image. Name: roof; attribute: white; (x,y,w,h): (150, 19, 134, 21)
node4:Object in an image. Name: sign; attribute: white; (x,y,w,h): (139, 73, 83, 28)
node5:Object in an image. Name: cooler; attribute: blue, soda; (x,y,w,h): (272, 122, 98, 208)
node6:Object in an image. Name: soda; (x,y,w,h): (287, 177, 24, 16)
node7:Object in an image. Name: wall; attribute: gray, stone, brick; (x,y,w,h): (430, 84, 68, 183)
node8:Object in an image. Name: bag; attribute: yellow; (x,y,w,h): (8, 301, 61, 49)
node9:Object in an image. Name: building; (x,y,w,h): (5, 1, 495, 329)
node10:Object in an image. Name: bush; (x,y,w,h): (324, 82, 33, 22)
node11:Object in an image. Name: shelves; (x,y,w,h): (0, 101, 242, 34)
node12:Object in an image. Name: tree; (x,y,w,h): (301, 58, 119, 79)
node13:Object in an image. Name: leaves; (x,y,w,h): (426, 359, 15, 8)
node14:Object in an image. Name: ground; (x,y,w,h): (206, 312, 285, 64)
node15:Object in an image. Name: plant; attribute: green; (x,y,w,h): (150, 215, 72, 101)
node16:Object in an image. Name: trash can; attribute: full; (x,y,w,h): (366, 246, 36, 71)
node17:Object in an image. Name: sky; (x,y,w,h): (451, 17, 13, 6)
node18:Object in an image. Name: trunk; (x,y,w,h): (378, 161, 24, 15)
node19:Object in an image. Name: door; (x,y,w,h): (273, 116, 154, 165)","node0:Object in an image. Name: dispenser; (x,y,w,h): (74, 224, 29, 25)
node1:Object in an image. Name: store; (x,y,w,h): (24, 152, 191, 154)
node2:Object in an image. Name: pot; attribute: orange; (x,y,w,h): (141, 311, 64, 58)
node3:Object in an image. Name: roof; attribute: white; (x,y,w,h): (150, 19, 134, 21)
node4:Object in an image. Name: sign; attribute: white; (x,y,w,h): (139, 73, 83, 28)
node5:Object in an image. Name: cooler; attribute: blue, soda; (x,y,w,h): (272, 122, 98, 208)
node6:Object in an image. Name: soda; (x,y,w,h): (287, 177, 24, 16)
node7:Object in an image. Name: wall; attribute: gray, stone, brick; (x,y,w,h): (430, 84, 68, 183)
node8:Object in an image. Name: bag; attribute: yellow; (x,y,w,h): (8, 301, 61, 49)
node9:Object in an image. Name: building; (x,y,w,h): (5, 1, 495, 329)
node10:Object in an image. Name: bush; (x,y,w,h): (324, 82, 33, 22)
node11:Object in an image. Name: shelves; (x,y,w,h): (0, 101, 242, 34)
node12:Object in an image. Name: tree; (x,y,w,h): (301, 58, 119, 79)
node13:Object in an image. Name: leaves; (x,y,w,h): (426, 359, 15, 8)
node14:Object in an image. Name: ground; (x,y,w,h): (206, 312, 285, 64)
node15:Object in an image. Name: plant; attribute: green; (x,y,w,h): (150, 215, 72, 101)
node16:Object in an image. Name: trash can; attribute: full; (x,y,w,h): (366, 246, 36, 71)
node17:Object in an image. Name: sky; (x,y,w,h): (451, 17, 13, 6)
node18:Object in an image. Name: trunk; (x,y,w,h): (378, 161, 24, 15)
node19:Object in an image. Name: door; (x,y,w,h): (273, 116, 154, 165)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What device is to the right of the monitor?

node0:Object in an image. Name: cake; (x,y,w,h): (238, 356, 54, 17)
node1:Object in an image. Name: drawer; (x,y,w,h): (0, 410, 498, 63)
node2:Object in an image. Name: computer; attribute: open; (x,y,w,h): (0, 146, 297, 249)
node3:Object in an image. Name: wires; (x,y,w,h): (252, 236, 48, 12)
node4:Object in an image. Name: computer monitor; attribute: large, computer; (x,y,w,h): (144, 1, 331, 233)
node5:Object in an image. Name: wires; (x,y,w,h): (435, 239, 63, 13)
node6:Object in an image. Name: monitor; attribute: white; (x,y,w,h): (24, 156, 218, 144)
node7:Object in an image. Name: book; (x,y,w,h): (484, 79, 11, 63)
node8:Object in an image. Name: cords; (x,y,w,h): (449, 224, 47, 57)
node9:Object in an image. Name: camera; (x,y,w,h): (343, 229, 80, 55)
node10:Object in an image. Name: books; (x,y,w,h): (481, 169, 17, 48)
node11:Object in an image. Name: book; (x,y,w,h): (485, 9, 6, 54)
node12:Object in an image. Name: book; (x,y,w,h): (478, 79, 9, 63)
node13:Object in an image. Name: book; (x,y,w,h): (472, 181, 7, 36)
node14:Object in an image. Name: desk; (x,y,w,h): (1, 218, 498, 253)
node15:Object in an image. Name: books; (x,y,w,h): (491, 80, 8, 63)
node16:Object in an image. Name: computer; attribute: on; (x,y,w,h): (159, 0, 316, 298)
node17:Object in an image. Name: cords; (x,y,w,h): (250, 228, 249, 61)
node18:Object in an image. Name: bookcase; attribute: gray; (x,y,w,h): (468, 6, 31, 221)
node19:Object in an image. Name: books; (x,y,w,h): (494, 9, 5, 53)
node20:Object in an image. Name: door; attribute: gray; (x,y,w,h): (3, 0, 159, 160)
node21:Object in an image. Name: box; (x,y,w,h): (292, 234, 178, 123)
node22:Object in an image. Name: book; (x,y,w,h): (477, 177, 9, 42)

the connection relationship among the nodes mentioned:
 <node2, node9>,<node2, node14>,<node2, node16>,<node2, node17>,<node2, node21>,<node3, node6>,<node3, node9>,<node3, node21>,<node4, node7>,<node4, node10>,<node4, node11>,<node4, node12>,<node4, node13>,<node4, node15>,<node4, node18>,<node4, node19>,<node4, node20>,<node4, node22>,<node5, node9>,<node6, node9>,<node6, node16>,<node6, node17>,<node7, node12>,<node7, node16>,<node8, node9>,<node8, node21>,<node10, node13>,<node10, node16>,<node11, node16>,<node11, node19>,<node12, node15>,<node12, node16>,<node13, node16>,<node13, node22>,<node14, node20>,<node15, node16>,<node16, node17>,<node16, node18>,<node16, node19>,<node16, node20>,<node16, node22>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",camera,"node0:Object in an image. Name: cake; (x,y,w,h): (238, 356, 54, 17)
node1:Object in an image. Name: drawer; (x,y,w,h): (0, 410, 498, 63)
node2:Object in an image. Name: computer; attribute: open; (x,y,w,h): (0, 146, 297, 249)
node3:Object in an image. Name: wires; (x,y,w,h): (252, 236, 48, 12)
node4:Object in an image. Name: computer monitor; attribute: large, computer; (x,y,w,h): (144, 1, 331, 233)
node5:Object in an image. Name: wires; (x,y,w,h): (435, 239, 63, 13)
node6:Object in an image. Name: monitor; attribute: white; (x,y,w,h): (24, 156, 218, 144)
node7:Object in an image. Name: book; (x,y,w,h): (484, 79, 11, 63)
node8:Object in an image. Name: cords; (x,y,w,h): (449, 224, 47, 57)
node9:Object in an image. Name: camera; (x,y,w,h): (343, 229, 80, 55)
node10:Object in an image. Name: books; (x,y,w,h): (481, 169, 17, 48)
node11:Object in an image. Name: book; (x,y,w,h): (485, 9, 6, 54)
node12:Object in an image. Name: book; (x,y,w,h): (478, 79, 9, 63)
node13:Object in an image. Name: book; (x,y,w,h): (472, 181, 7, 36)
node14:Object in an image. Name: desk; (x,y,w,h): (1, 218, 498, 253)
node15:Object in an image. Name: books; (x,y,w,h): (491, 80, 8, 63)
node16:Object in an image. Name: computer; attribute: on; (x,y,w,h): (159, 0, 316, 298)
node17:Object in an image. Name: cords; (x,y,w,h): (250, 228, 249, 61)
node18:Object in an image. Name: bookcase; attribute: gray; (x,y,w,h): (468, 6, 31, 221)
node19:Object in an image. Name: books; (x,y,w,h): (494, 9, 5, 53)
node20:Object in an image. Name: door; attribute: gray; (x,y,w,h): (3, 0, 159, 160)
node21:Object in an image. Name: box; (x,y,w,h): (292, 234, 178, 123)
node22:Object in an image. Name: book; (x,y,w,h): (477, 177, 9, 42)","node0:Object in an image. Name: cake; (x,y,w,h): (238, 356, 54, 17)
node1:Object in an image. Name: drawer; (x,y,w,h): (0, 410, 498, 63)
node2:Object in an image. Name: computer; attribute: open; (x,y,w,h): (0, 146, 297, 249)
node3:Object in an image. Name: wires; (x,y,w,h): (252, 236, 48, 12)
node4:Object in an image. Name: computer monitor; attribute: large, computer; (x,y,w,h): (144, 1, 331, 233)
node5:Object in an image. Name: wires; (x,y,w,h): (435, 239, 63, 13)
node6:Object in an image. Name: monitor; attribute: white; (x,y,w,h): (24, 156, 218, 144)
node7:Object in an image. Name: book; (x,y,w,h): (484, 79, 11, 63)
node8:Object in an image. Name: cords; (x,y,w,h): (449, 224, 47, 57)
node9:Object in an image. Name: camera; (x,y,w,h): (343, 229, 80, 55)
node10:Object in an image. Name: books; (x,y,w,h): (481, 169, 17, 48)
node11:Object in an image. Name: book; (x,y,w,h): (485, 9, 6, 54)
node12:Object in an image. Name: book; (x,y,w,h): (478, 79, 9, 63)
node13:Object in an image. Name: book; (x,y,w,h): (472, 181, 7, 36)
node14:Object in an image. Name: desk; (x,y,w,h): (1, 218, 498, 253)
node15:Object in an image. Name: books; (x,y,w,h): (491, 80, 8, 63)
node16:Object in an image. Name: computer; attribute: on; (x,y,w,h): (159, 0, 316, 298)
node17:Object in an image. Name: cords; (x,y,w,h): (250, 228, 249, 61)
node18:Object in an image. Name: bookcase; attribute: gray; (x,y,w,h): (468, 6, 31, 221)
node19:Object in an image. Name: books; (x,y,w,h): (494, 9, 5, 53)
node20:Object in an image. Name: door; attribute: gray; (x,y,w,h): (3, 0, 159, 160)
node21:Object in an image. Name: box; (x,y,w,h): (292, 234, 178, 123)
node22:Object in an image. Name: book; (x,y,w,h): (477, 177, 9, 42)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. Is the book in the bottom part or in the top of the photo?

node0:Object in an image. Name: mirror; attribute: black, framed; (x,y,w,h): (152, 91, 72, 86)
node1:Object in an image. Name: book; (x,y,w,h): (269, 333, 55, 13)
node2:Object in an image. Name: book; (x,y,w,h): (307, 316, 43, 22)
node3:Object in an image. Name: wall; (x,y,w,h): (332, 24, 166, 260)
node4:Object in an image. Name: pillow; (x,y,w,h): (227, 209, 66, 51)
node5:Object in an image. Name: book; (x,y,w,h): (251, 317, 58, 12)
node6:Object in an image. Name: book; (x,y,w,h): (349, 314, 27, 18)
node7:Object in an image. Name: book; (x,y,w,h): (290, 313, 61, 13)
node8:Object in an image. Name: book; (x,y,w,h): (297, 305, 46, 12)
node9:Object in an image. Name: coffee table; (x,y,w,h): (219, 265, 206, 94)
node10:Object in an image. Name: book; (x,y,w,h): (254, 327, 61, 9)
node11:Object in an image. Name: couch; attribute: brown; (x,y,w,h): (69, 202, 253, 81)
node12:Object in an image. Name: television; (x,y,w,h): (475, 189, 25, 82)
node13:Object in an image. Name: flowers; (x,y,w,h): (426, 129, 25, 27)
node14:Object in an image. Name: plant; (x,y,w,h): (419, 129, 32, 43)
node15:Object in an image. Name: wall; (x,y,w,h): (3, 12, 357, 282)
node16:Object in an image. Name: frame; attribute: black; (x,y,w,h): (348, 127, 18, 26)
node17:Object in an image. Name: vase; (x,y,w,h): (455, 145, 25, 41)
node18:Object in an image. Name: pillow; (x,y,w,h): (103, 209, 70, 57)
node19:Object in an image. Name: pillow; (x,y,w,h): (8, 226, 89, 55)
node20:Object in an image. Name: picture; (x,y,w,h): (353, 162, 7, 9)
node21:Object in an image. Name: picture; (x,y,w,h): (354, 135, 7, 9)
node22:Object in an image. Name: post; (x,y,w,h): (374, 221, 82, 94)
node23:Object in an image. Name: lamp; attribute: off; (x,y,w,h): (274, 159, 52, 70)
node24:Object in an image. Name: shelf; (x,y,w,h): (391, 182, 100, 10)
node25:Object in an image. Name: lamp; (x,y,w,h): (0, 64, 46, 191)
node26:Object in an image. Name: vase; (x,y,w,h): (417, 161, 39, 24)
node27:Object in an image. Name: sky; (x,y,w,h): (235, 150, 21, 35)

the connection relationship among the nodes mentioned:
 <node0, node3>,<node0, node16>,<node0, node25>,<node0, node27>,<node2, node5>,<node2, node6>,<node2, node9>,<node2, node10>,<node3, node4>,<node3, node11>,<node3, node15>,<node3, node23>,<node3, node27>,<node4, node11>,<node4, node18>,<node4, node22>,<node5, node6>,<node5, node7>,<node5, node9>,<node6, node7>,<node6, node9>,<node6, node10>,<node7, node9>,<node8, node9>,<node8, node22>,<node9, node10>,<node11, node19>,<node11, node22>,<node11, node25>,<node12, node15>,<node12, node22>,<node13, node15>,<node13, node16>,<node13, node21>,<node13, node24>,<node13, node26>,<node14, node15>,<node14, node16>,<node14, node17>,<node14, node20>,<node14, node21>,<node15, node17>,<node15, node22>,<node15, node24>,<node15, node26>,<node17, node20>,<node17, node26>,<node18, node11>,<node18, node19>,<node18, node25>,<node20, node23>,<node20, node26>,<node20, node27>,<node21, node3>,<node23, node24>,<node23, node26>,<node23, node27>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",bottom,"node0:Object in an image. Name: mirror; attribute: black, framed; (x,y,w,h): (152, 91, 72, 86)
node1:Object in an image. Name: book; (x,y,w,h): (269, 333, 55, 13)
node2:Object in an image. Name: book; (x,y,w,h): (307, 316, 43, 22)
node3:Object in an image. Name: wall; (x,y,w,h): (332, 24, 166, 260)
node4:Object in an image. Name: pillow; (x,y,w,h): (227, 209, 66, 51)
node5:Object in an image. Name: book; (x,y,w,h): (251, 317, 58, 12)
node6:Object in an image. Name: book; (x,y,w,h): (349, 314, 27, 18)
node7:Object in an image. Name: book; (x,y,w,h): (290, 313, 61, 13)
node8:Object in an image. Name: book; (x,y,w,h): (297, 305, 46, 12)
node9:Object in an image. Name: coffee table; (x,y,w,h): (219, 265, 206, 94)
node10:Object in an image. Name: book; (x,y,w,h): (254, 327, 61, 9)
node11:Object in an image. Name: couch; attribute: brown; (x,y,w,h): (69, 202, 253, 81)
node12:Object in an image. Name: television; (x,y,w,h): (475, 189, 25, 82)
node13:Object in an image. Name: flowers; (x,y,w,h): (426, 129, 25, 27)
node14:Object in an image. Name: plant; (x,y,w,h): (419, 129, 32, 43)
node15:Object in an image. Name: wall; (x,y,w,h): (3, 12, 357, 282)
node16:Object in an image. Name: frame; attribute: black; (x,y,w,h): (348, 127, 18, 26)
node17:Object in an image. Name: vase; (x,y,w,h): (455, 145, 25, 41)
node18:Object in an image. Name: pillow; (x,y,w,h): (103, 209, 70, 57)
node19:Object in an image. Name: pillow; (x,y,w,h): (8, 226, 89, 55)
node20:Object in an image. Name: picture; (x,y,w,h): (353, 162, 7, 9)
node21:Object in an image. Name: picture; (x,y,w,h): (354, 135, 7, 9)
node22:Object in an image. Name: post; (x,y,w,h): (374, 221, 82, 94)
node23:Object in an image. Name: lamp; attribute: off; (x,y,w,h): (274, 159, 52, 70)
node24:Object in an image. Name: shelf; (x,y,w,h): (391, 182, 100, 10)
node25:Object in an image. Name: lamp; (x,y,w,h): (0, 64, 46, 191)
node26:Object in an image. Name: vase; (x,y,w,h): (417, 161, 39, 24)
node27:Object in an image. Name: sky; (x,y,w,h): (235, 150, 21, 35)","node0:Object in an image. Name: mirror; attribute: black, framed; (x,y,w,h): (152, 91, 72, 86)
node1:Object in an image. Name: book; (x,y,w,h): (269, 333, 55, 13)
node2:Object in an image. Name: book; (x,y,w,h): (307, 316, 43, 22)
node3:Object in an image. Name: wall; (x,y,w,h): (332, 24, 166, 260)
node4:Object in an image. Name: pillow; (x,y,w,h): (227, 209, 66, 51)
node5:Object in an image. Name: book; (x,y,w,h): (251, 317, 58, 12)
node6:Object in an image. Name: book; (x,y,w,h): (349, 314, 27, 18)
node7:Object in an image. Name: book; (x,y,w,h): (290, 313, 61, 13)
node8:Object in an image. Name: book; (x,y,w,h): (297, 305, 46, 12)
node9:Object in an image. Name: coffee table; (x,y,w,h): (219, 265, 206, 94)
node10:Object in an image. Name: book; (x,y,w,h): (254, 327, 61, 9)
node11:Object in an image. Name: couch; attribute: brown; (x,y,w,h): (69, 202, 253, 81)
node12:Object in an image. Name: television; (x,y,w,h): (475, 189, 25, 82)
node13:Object in an image. Name: flowers; (x,y,w,h): (426, 129, 25, 27)
node14:Object in an image. Name: plant; (x,y,w,h): (419, 129, 32, 43)
node15:Object in an image. Name: wall; (x,y,w,h): (3, 12, 357, 282)
node16:Object in an image. Name: frame; attribute: black; (x,y,w,h): (348, 127, 18, 26)
node17:Object in an image. Name: vase; (x,y,w,h): (455, 145, 25, 41)
node18:Object in an image. Name: pillow; (x,y,w,h): (103, 209, 70, 57)
node19:Object in an image. Name: pillow; (x,y,w,h): (8, 226, 89, 55)
node20:Object in an image. Name: picture; (x,y,w,h): (353, 162, 7, 9)
node21:Object in an image. Name: picture; (x,y,w,h): (354, 135, 7, 9)
node22:Object in an image. Name: post; (x,y,w,h): (374, 221, 82, 94)
node23:Object in an image. Name: lamp; attribute: off; (x,y,w,h): (274, 159, 52, 70)
node24:Object in an image. Name: shelf; (x,y,w,h): (391, 182, 100, 10)
node25:Object in an image. Name: lamp; (x,y,w,h): (0, 64, 46, 191)
node26:Object in an image. Name: vase; (x,y,w,h): (417, 161, 39, 24)
node27:Object in an image. Name: sky; (x,y,w,h): (235, 150, 21, 35)",scene_graph,gc
"This is a scene graph generated from an image. Nodes represent an object in the image and edges represent the relationship between two objects. What kind of furniture is the rug in front of?

node0:Object in an image. Name: table; (x,y,w,h): (102, 335, 375, 260)
node1:Object in an image. Name: pillow; attribute: beige; (x,y,w,h): (704, 251, 94, 194)
node2:Object in an image. Name: rug; (x,y,w,h): (49, 404, 543, 195)
node3:Object in an image. Name: couches; (x,y,w,h): (209, 151, 378, 250)
node4:Object in an image. Name: pillow; attribute: white; (x,y,w,h): (252, 166, 103, 100)
node5:Object in an image. Name: pillow; attribute: white; (x,y,w,h): (658, 207, 130, 120)
node6:Object in an image. Name: pillow; (x,y,w,h): (447, 160, 126, 112)
node7:Object in an image. Name: vase; attribute: gray, tall; (x,y,w,h): (319, 225, 52, 170)
node8:Object in an image. Name: couch; attribute: brown; (x,y,w,h): (586, 209, 212, 390)
node9:Object in an image. Name: display; attribute: large; (x,y,w,h): (169, 0, 350, 233)
node10:Object in an image. Name: lamp; attribute: rectangular; (x,y,w,h): (676, 67, 82, 128)
node11:Object in an image. Name: window; (x,y,w,h): (112, 0, 439, 240)
node12:Object in an image. Name: room; attribute: lit, clean; (x,y,w,h): (0, 0, 799, 599)
node13:Object in an image. Name: book; (x,y,w,h): (198, 430, 177, 92)
node14:Object in an image. Name: plant; attribute: green, artificial; (x,y,w,h): (0, 37, 118, 216)
node15:Object in an image. Name: table; (x,y,w,h): (612, 238, 78, 33)
node16:Object in an image. Name: pillow; attribute: gray; (x,y,w,h): (694, 207, 105, 140)

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node8>,<node1, node3>,<node1, node15>,<node2, node3>,<node2, node8>,<node3, node5>,<node3, node8>,<node3, node11>,<node3, node15>,<node3, node16>,<node4, node6>,<node4, node14>,<node5, node6>,<node5, node15>,<node6, node8>,<node6, node15>,<node6, node16>,<node9, node10>,<node9, node14>,<node10, node11>,<node10, node15>,<node11, node14>,<node13, node0>,<node15, node16>.

Answer the question strictly according to the format. Respond only with the answer and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:poster)
Brief_reasoning: Your_brief_reasoning",couches,"node0:Object in an image. Name: table; (x,y,w,h): (102, 335, 375, 260)
node1:Object in an image. Name: pillow; attribute: beige; (x,y,w,h): (704, 251, 94, 194)
node2:Object in an image. Name: rug; (x,y,w,h): (49, 404, 543, 195)
node3:Object in an image. Name: couches; (x,y,w,h): (209, 151, 378, 250)
node4:Object in an image. Name: pillow; attribute: white; (x,y,w,h): (252, 166, 103, 100)
node5:Object in an image. Name: pillow; attribute: white; (x,y,w,h): (658, 207, 130, 120)
node6:Object in an image. Name: pillow; (x,y,w,h): (447, 160, 126, 112)
node7:Object in an image. Name: vase; attribute: gray, tall; (x,y,w,h): (319, 225, 52, 170)
node8:Object in an image. Name: couch; attribute: brown; (x,y,w,h): (586, 209, 212, 390)
node9:Object in an image. Name: display; attribute: large; (x,y,w,h): (169, 0, 350, 233)
node10:Object in an image. Name: lamp; attribute: rectangular; (x,y,w,h): (676, 67, 82, 128)
node11:Object in an image. Name: window; (x,y,w,h): (112, 0, 439, 240)
node12:Object in an image. Name: room; attribute: lit, clean; (x,y,w,h): (0, 0, 799, 599)
node13:Object in an image. Name: book; (x,y,w,h): (198, 430, 177, 92)
node14:Object in an image. Name: plant; attribute: green, artificial; (x,y,w,h): (0, 37, 118, 216)
node15:Object in an image. Name: table; (x,y,w,h): (612, 238, 78, 33)
node16:Object in an image. Name: pillow; attribute: gray; (x,y,w,h): (694, 207, 105, 140)","node0:Object in an image. Name: table; (x,y,w,h): (102, 335, 375, 260)
node1:Object in an image. Name: pillow; attribute: beige; (x,y,w,h): (704, 251, 94, 194)
node2:Object in an image. Name: rug; (x,y,w,h): (49, 404, 543, 195)
node3:Object in an image. Name: couches; (x,y,w,h): (209, 151, 378, 250)
node4:Object in an image. Name: pillow; attribute: white; (x,y,w,h): (252, 166, 103, 100)
node5:Object in an image. Name: pillow; attribute: white; (x,y,w,h): (658, 207, 130, 120)
node6:Object in an image. Name: pillow; (x,y,w,h): (447, 160, 126, 112)
node7:Object in an image. Name: vase; attribute: gray, tall; (x,y,w,h): (319, 225, 52, 170)
node8:Object in an image. Name: couch; attribute: brown; (x,y,w,h): (586, 209, 212, 390)
node9:Object in an image. Name: display; attribute: large; (x,y,w,h): (169, 0, 350, 233)
node10:Object in an image. Name: lamp; attribute: rectangular; (x,y,w,h): (676, 67, 82, 128)
node11:Object in an image. Name: window; (x,y,w,h): (112, 0, 439, 240)
node12:Object in an image. Name: room; attribute: lit, clean; (x,y,w,h): (0, 0, 799, 599)
node13:Object in an image. Name: book; (x,y,w,h): (198, 430, 177, 92)
node14:Object in an image. Name: plant; attribute: green, artificial; (x,y,w,h): (0, 37, 118, 216)
node15:Object in an image. Name: table; (x,y,w,h): (612, 238, 78, 33)
node16:Object in an image. Name: pillow; attribute: gray; (x,y,w,h): (694, 207, 105, 140)",scene_graph,gc
"Classify the wikipedia page represented by node2 using its subgraph data (text attributes and connections) as follows.

node0: Samsung's Android UI overlay for one-handed use, introduced with Android 9 Pie, featuring gesture navigation and dark mode.  
node1: Open-source self-hosted file sync service, forked from OwnCloud, offering encryption, plugins, and cross-platform sync.  
node2: Database indexes for data subsets based on conditions, reducing size and improving query efficiency in systems like PostgreSQL.  
node3: Linux's journaled filesystem, Ext2 backward-compatible, enhancing reliability with journaling but lacking modern features like extents.  
node4: Catalog of file systems categorized by type, usage, and features, including disk, distributed, and specialized systems.  
node5: Database indexes accelerate data retrieval, supporting functions, clustering, and trade-offs between speed and storage efficiency.  
node6: Linux cluster filesystem for shared storage, using distributed locking and fencing to ensure consistency in SAN environments.
node7: IBM, founded in 1911, is a multinational tech leader known for mainframes, AI like Watson, and numerous patents. It evolved through acquisitions, shifted business strategies, and holds a historic role in computing and research.  
node8: Disk formatting involves low-level preparation, partitioning, and high-level file system creation. It addresses data storage structures, security erasure methods, and tools for managing disk organization and recovery.
node9: Cloud storage service by Dropbox Inc., offering file sync, freemium plans, and faced security critiques; founded 2007 with global impact.  
node10: Web's foundational protocol, HTTP enables data communication via client-server requests, evolving from HTTP/1.1 to HTTP/3, developed by Tim Berners-Lee.  
node11: VMware's clustered file system for virtualization, enabling multi-server VM storage access, scalable with versions tied to ESX releases.  
node12: Sun's high-end UltraSPARC-based workstation (1999–2002), featuring multi-CPU configs, Solaris OS, and enterprise-grade performance.  
node13: Lightweight, serverless RDBMS embedded in C, offering ACID compliance, dynamic typing, and widespread use in apps and browsers.  
node14: Policy-driven access control using user/resource/environment attributes, enabling granular, context-aware security via standards like XACML.
node15: SQLBits is a community-led Microsoft data platform conference in Europe since 2007, offering education via yearly events with recorded sessions freely available.  
node16: F2FS is a flash-friendly file system for Linux, optimized for NAND storage with log-structured design, checkpoints, and used in Android devices since 2012.  
node17: MySQL is an open-source RDBMS owned by Oracle, used in web apps like WordPress, with a dual-license model and forked into MariaDB post-acquisition.  
node18: Amazon DocumentDB is a managed MongoDB-compatible NoSQL service hosted on AWS, available in specific regions with proprietary enhancements.  
node19: PowerHouse is a 4GL language for rapid app dev, tied to databases, declined due to licensing costs and competition, later acquired by IBM.  
node20: PostgreSQL is an open-source RDBMS prioritizing extensibility and SQL standards, developed from Berkeley’s POSTGRES, cross-platform with strong community support.  
node21: A database row (tuple) structurally represents data entries in tables, with columns defining typed attributes ensuring consistency and uniqueness.  
node22: Split-brain in computing describes clustered system failures causing data inconsistencies due to network partitions, resolved via quorum or reconciliation.  
node23: Compares RDBMS systems (e.g., MySQL, Oracle, SQL Server) by maintainers, licenses, features, and technical specs for relational database capabilities.  
node24: Primary keys uniquely identify database rows, distinguishing natural (real-world) and surrogate (artificial) keys for relational integrity and indexing.  
node25: Microsoft’s Database Engine Tuning Advisor optimizes SQL Server performance by recommending indexes and query adjustments.  
node26: Database tables organize data in rows and columns, differing from relational theory by allowing duplicates and physical storage variations.
node27: relational database system with editions for varied workloads, using TDS protocol, supporting data storage, query optimization, and services like Analysis/Reporting Services.  
node28: AWS's scalable object storage service with high durability, storing objects in buckets, offering REST API access, website hosting, logging, and multiple storage classes for varied needs.

the connection relationship among the nodes mentioned:
 <node0, node13>,<node1, node9>,<node1, node13>,<node1, node17>,<node1, node20>,<node1, node28>,<node2, node5>,<node2, node13>,<node2, node17>,<node2, node20>,<node2, node21>,<node2, node23>,<node2, node26>,<node2, node27>,<node3, node4>,<node3, node6>,<node3, node16>,<node4, node6>,<node4, node7>,<node4, node8>,<node4, node11>,<node4, node16>,<node4, node20>,<node4, node28>,<node5, node17>,<node5, node21>,<node5, node23>,<node5, node26>,<node5, node27>,<node6, node16>,<node6, node20>,<node7, node8>,<node7, node19>,<node7, node23>,<node9, node18>,<node9, node28>,<node10, node28>,<node12, node17>,<node13, node17>,<node13, node20>,<node13, node23>,<node13, node26>,<node14, node23>,<node15, node27>,<node17, node20>,<node17, node22>,<node17, node23>,<node17, node27>,<node17, node28>,<node18, node28>,<node19, node27>,<node20, node23>,<node21, node23>,<node21, node24>,<node21, node26>,<node21, node27>,<node23, node26>,<node23, node27>,<node24, node26>,<node25, node27>,<node26, node27>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",databases,"node0: Samsung's Android UI overlay for one-handed use, introduced with Android 9 Pie, featuring gesture navigation and dark mode.  
node1: Open-source self-hosted file sync service, forked from OwnCloud, offering encryption, plugins, and cross-platform sync.  
node2: Database indexes for data subsets based on conditions, reducing size and improving query efficiency in systems like PostgreSQL.  
node3: Linux's journaled filesystem, Ext2 backward-compatible, enhancing reliability with journaling but lacking modern features like extents.  
node4: Catalog of file systems categorized by type, usage, and features, including disk, distributed, and specialized systems.  
node5: Database indexes accelerate data retrieval, supporting functions, clustering, and trade-offs between speed and storage efficiency.  
node6: Linux cluster filesystem for shared storage, using distributed locking and fencing to ensure consistency in SAN environments.
node7: IBM, founded in 1911, is a multinational tech leader known for mainframes, AI like Watson, and numerous patents. It evolved through acquisitions, shifted business strategies, and holds a historic role in computing and research.  
node8: Disk formatting involves low-level preparation, partitioning, and high-level file system creation. It addresses data storage structures, security erasure methods, and tools for managing disk organization and recovery.
node9: Cloud storage service by Dropbox Inc., offering file sync, freemium plans, and faced security critiques; founded 2007 with global impact.  
node10: Web's foundational protocol, HTTP enables data communication via client-server requests, evolving from HTTP/1.1 to HTTP/3, developed by Tim Berners-Lee.  
node11: VMware's clustered file system for virtualization, enabling multi-server VM storage access, scalable with versions tied to ESX releases.  
node12: Sun's high-end UltraSPARC-based workstation (1999–2002), featuring multi-CPU configs, Solaris OS, and enterprise-grade performance.  
node13: Lightweight, serverless RDBMS embedded in C, offering ACID compliance, dynamic typing, and widespread use in apps and browsers.  
node14: Policy-driven access control using user/resource/environment attributes, enabling granular, context-aware security via standards like XACML.
node15: SQLBits is a community-led Microsoft data platform conference in Europe since 2007, offering education via yearly events with recorded sessions freely available.  
node16: F2FS is a flash-friendly file system for Linux, optimized for NAND storage with log-structured design, checkpoints, and used in Android devices since 2012.  
node17: MySQL is an open-source RDBMS owned by Oracle, used in web apps like WordPress, with a dual-license model and forked into MariaDB post-acquisition.  
node18: Amazon DocumentDB is a managed MongoDB-compatible NoSQL service hosted on AWS, available in specific regions with proprietary enhancements.  
node19: PowerHouse is a 4GL language for rapid app dev, tied to databases, declined due to licensing costs and competition, later acquired by IBM.  
node20: PostgreSQL is an open-source RDBMS prioritizing extensibility and SQL standards, developed from Berkeley’s POSTGRES, cross-platform with strong community support.  
node21: A database row (tuple) structurally represents data entries in tables, with columns defining typed attributes ensuring consistency and uniqueness.  
node22: Split-brain in computing describes clustered system failures causing data inconsistencies due to network partitions, resolved via quorum or reconciliation.  
node23: Compares RDBMS systems (e.g., MySQL, Oracle, SQL Server) by maintainers, licenses, features, and technical specs for relational database capabilities.  
node24: Primary keys uniquely identify database rows, distinguishing natural (real-world) and surrogate (artificial) keys for relational integrity and indexing.  
node25: Microsoft’s Database Engine Tuning Advisor optimizes SQL Server performance by recommending indexes and query adjustments.  
node26: Database tables organize data in rows and columns, differing from relational theory by allowing duplicates and physical storage variations.
node27: relational database system with editions for varied workloads, using TDS protocol, supporting data storage, query optimization, and services like Analysis/Reporting Services.  
node28: AWS's scalable object storage service with high durability, storing objects in buckets, offering REST API access, website hosting, logging, and multiple storage classes for varied needs.","node0:Wikipedia entry. Entry name: One_UI. Entry content: one ui one ui software overlay developed samsung electronics android devices succeeding samsung experience touchwiz designed streamlined specific optimizations ease one-handed use smartphones large screens unveiled samsung developer conference 2018 first introduced part samsung firmware updates android 9 pie one ui designed part goal make samsung hardware software work together perfect harmony provide natural experience large-screen smartphones prominent design pattern included applications intentionally place common features user interface elements along bottom screen rather near top makes easier reach user thumb using device one-handed similar reasons apps utilise large headers push main content towards vertical centre screen navigation bar supports use gestures system-wide night mode also added gives ui elements supported applications darkened color scheme android pie upstream overview screen recent apps uses horizontal layout opposed vertical layout previous versions one ui included new android devices released samsung since beginning 2019 including galaxy s10 series galaxy 2019 series galaxy note 10 series one ui released existing samsung devices throughout 2019 part updates android 9 pie beginning galaxy s9 galaxy note 9 january 2019 galaxy s8 note 8 february 2019 galaxy note fan edition march 2019 galaxy s7 april 2019 unofficialy portage galaxy note fan edition portage various mid-range low-end models particularly galaxy galaxy j series models released since 2017 middle year selected galaxy tab models late-2019 samsung launched public beta one ui updates november 2018
node1:Wikipedia entry. Entry name: Nextcloud. Entry content: nextcloud nextcloud suite client-server software creating using file hosting services nextcloud application functionally similar dropbox unlike dropbox nextcloud offer off-premises file storage hosting nextcloud free open-source means anyone allowed install operate private server devices contrast proprietary services like dropbox open architecture allows adding functionality server form applications enables users full control data original owncloud developer frank karlitschek forked owncloud created nextcloud continues actively developed karlitschek members original owncloud team nextcloud files stored conventional directory structures accessible via webdav necessary user files encrypted transit optionally rest nextcloud synchronise local clients running windows windows xp vista 7 8 10 macos 10.6 later various linux distributions nextcloud permits user group administration via openid ldap content shared defining granular read/write permissions users groups alternatively nextcloud users create public urls sharing files logging file-related actions well disallowing access based file access rules also available nextcloud introducing new features monitoring capabilities full-text search kerberos authentication well audio/video conferencing expanded federation smaller user interface improvements since software modular extended plugins implement extra functionality developers offer extensions users installation via manufacturer-operated platform platform communicates nextcloud instances via open protocol app store already contains 200 extensions help extensions many functionalities added including order desktop machines synchronize files nextcloud server desktop clients available pcs running windows macos freebsd linux mobile clients exist ios android devices files data calendars contacts bookmarks also accessed managed uploaded using web browser without additional software updates file system pushed computers mobile devices connected user account nextcloud server written php javascript scripting languages remote access employs sabre/dav open-source webdav server nextcloud designed work several database management systems including sqlite mariadb mysql oracle database postgresql nextcloud 12 new architecture developed name global scale goal scaling hundreds millions users splits users separate nodes introduces components manage interaction september 2016 nextcloud cooperation western digital labs canonical company behind ubuntu released nextcloud box announcement made jane silber ceo canonical frank karlitschek nextcloud box based raspberry pi running ubuntu core snappy intended serve reference device vendors june 2017 western digital shut western digital labs caused production box end alternative hardware available vendors including others announced april 2016 karlitschek core contributors left owncloud inc included owncloud staff according sources near owncloud community fork preceded blog post karlitschek asking questions owns community owns owncloud matters short term money long term responsibility growth official statements reason fork however karlitschek mentioned fork several times talk 2018 fosdem conference emphasizing cultural mismatch open source developers business oriented people used open source community june 2 within 12 hours announcement fork american entity owncloud inc. announced shutting immediate effect stating … main lenders us cancelled credit following american law forced close doors owncloud inc. immediate effect terminate contracts 8 employees. owncloud inc. accused karlitschek poaching developers nextcloud developers arthur schiwon stated decided quit everything owncloud inc. company world evolved imagined owncloud gmbh continued operations secured financing new investors took business owncloud inc nextcloud originally fork owncloud project many differences owncloud offers open-source community edition also offer proprietary enterprise edition additional features support subscriptions — nextcloud instead uses public code base free paid users nextcloud popularity also appears overtaken owncloud least based google trends data maintenance release schedule
node2:Wikipedia entry. Entry name: Partial_index. Entry content: partial index databases partial index also known filtered index index condition applied includes subset rows table allows index remain small even though table may rather large extreme selectivity suppose transaction table entries start status active may pass statuses p pending w worked reaching final status f point longer likely processed postgresql useful partial index might defined index would bother storing millions rows reached final status f would allow queries looking transactions still need work efficiently search via index similarly partial index used index rows column null benefit column usually null index would allow following query read updated tuples necessary condition index criterion stonebraker paper presents number examples indexes similar following sql server type index called filtered index partial indexes supported postgresql since version 7.2 released february 2002 sqlite supports partial indexes since version 3.8.0 mongodb supports partial indexes latest release v3.2 mysql version 8.0 support partial indexes mysql term partial index sometimes used refer prefix indexes truncated prefix value stored index another technique reducing index size
node3:Wikipedia entry. Entry name: Ext3. Entry content: ext3 ext3 third extended filesystem journaled file system commonly used linux kernel used default file system many popular linux distributions stephen tweedie first revealed working extending ext2 journaling linux ext2fs filesystem 1998 paper later february 1999 kernel mailing list posting filesystem merged mainline linux kernel november 2001 2.4.15 onward main advantage ext2 journaling improves reliability eliminates need check file system unclean shutdown successor ext4 performance speed ext3 less attractive competing linux filesystems ext4 jfs reiserfs xfs ext3 significant advantage allows in-place upgrades ext2 without backup restore data benchmarks suggest ext3 also uses less cpu power reiserfs xfs also considered safer linux file systems due relative simplicity wider testing base ext3 adds following features ext2 without features ext3 file system also valid ext2 file system situation allowed well-tested mature file system maintenance utilities maintaining repairing ext2 file systems also used ext3 without major changes ext2 ext3 file systems share standard set utilities e2fsprogs includes fsck tool close relationship also makes conversion two file systems forward ext3 backward ext2 straightforward ext3 lacks modern filesystem features dynamic inode allocation extents situation might sometimes disadvantage recoverability significant advantage file system metadata fixed well-known locations data structures redundancy significant data corruption ext2 ext3 may recoverable tree-based file system may maximum number blocks ext3 2 size block vary affecting maximum number files maximum size file system three levels journaling available linux implementation ext3 three modes internal structure file system assured consistent even crash case data content files directories modified system crashed affected rest intact recovery ext3 aims backward-compatible earlier ext2 many on-disk structures similar ext2 consequently ext3 lacks recent features extents dynamic allocation inodes block sub-allocation directory 31998 subdirectories inode 32,000 links direct subdirectory increases parent folder inode link counter .. reference ext3 like current linux filesystems fsck-ed filesystem mounted writing attempting check filesystem already mounted read/write mode likely detect inconsistencies filesystem metadata filesystem metadata changing fsck applies changes attempt bring inconsistent metadata consistent state attempt fix inconsistencies corrupt filesystem online ext3 defragmentation tool works filesystem level offline ext2 defragmenter codice_1 requires ext3 filesystem converted back ext2 first however codice_1 may destroy data depending feature bits turned filesystem know handle many newer ext3 features userspace defragmentation tools like shake defrag shake works allocating space whole file one operation generally cause allocator find contiguous disk space files used time shake try write next one another defrag works copying file however strategy works file system enough free space true defragmentation tool exist ext3 however linux system administrator guide states modern linux filesystem keep fragmentation minimum keeping blocks file close together even ca n't stored consecutive sectors filesystems like ext3 effectively allocate free block nearest blocks file therefore necessary worry fragmentation linux system ext3 resistant file fragmentation ext3 get fragmented time specific usage patterns like slowly writing large files consequently ext4 successor ext3 online filesystem defragmentation utility e4defrag currently supports extents contiguous file regions ext3 support recovery deleted files ext3 driver actively deletes files wiping file inodes crash safety reasons still several techniques free proprietary software recovery deleted lost files using file system journal analysis however guarantee specific file recovery e3compr unofficial patch ext3 transparent compression direct port e2compr still needs development compiles boots well upstream kernels journaling implemented yet unlike number modern file systems ext3 native support snapshots ability quickly capture state filesystem arbitrary times instead relies less-space-efficient volume-level snapshots provided linux lvm next3 file system modified version ext3 offers snapshots support yet retains compatibility ext3 on-disk format ext3 checksumming writing journal storage device extra cache barrier=1 enabled mount option /etc/fstab hardware out-of-order write caching one runs risk severe filesystem corruption crash storage devices write caches report system data completely written even written volatile cache hard disk writes done out-of-order due modern hard disks caching writes order amortize write speeds likely one write commit block transaction relevant blocks written power failure unrecoverable crash occur blocks get written system rebooted upon reboot file system replay log normal replay winners transactions commit block including invalid transaction happened tagged valid commit block unfinished disk write thus proceed using corrupt journal data file system thus mistakenly overwrite normal data corrupt data replaying journal checksums used blocks fake winner transaction tagged mutual checksum file system could known better replayed corrupt data onto disk journal checksumming added ext4 filesystems going device mapper interface including software raid lvm implementations may support barriers issue warning mount option used also disks properly implement write cache flushing extension necessary barriers work causes similar warning situations barriers supported practical reliable write ordering possible turning disk write cache using mount option turning disk write cache may required even barriers available applications like databases expect call fsync flush pending writes disk barrier implementation n't always clear drive write cache response call also potential issue barrier implementation related error handling events drive failure also known sometimes virtualization technologies properly forward fsync flush commands underlying devices files volumes disk guest operating system similarly hard disks controllers implement cache flushing incorrectly still advertise supported return error used many ways handle fsync write cache handling incorrectly safer assume cache flushing work unless explicitly tested regardless reliable individual components believed ext3 stores dates unix time using four bytes file header 32 bits give enough scope continue processing files beyond january 18 2038 year 2038 problem geek millennium expected cause widespread disruption dealt timely fashion june 28 2006 theodore ts principal developer ext3 announced enhanced version called ext4 october 11 2008 patches mark ext4 stable code merged linux 2.6.28 source code repositories marking end development phase recommending adoption 2008 ts stated although ext4 improved features much faster ext3 major advance uses old technology stop-gap ts believes btrfs better direction offers improvements scalability reliability ease management btrfs also number design ideas reiser3/4
node4:Wikipedia entry. Entry name: List_of_file_systems. Entry content: list file systems following lists identify characterize link thorough information computer file systems many older operating systems support one native file system bear name apart name operating system disk file systems usually block-oriented files block-oriented file system sequences blocks often featuring fully random-access read write modify operations file systems built-in checksumming either mirroring parity extra redundancy one several block devices solid state media flash memory similar disks interfaces different problems low level require special handling wear leveling different error detection correction algorithms typically device solid-state drive handles operations internally therefore regular file system used however certain specialized installations embedded systems industrial applications file system optimized plain flash memory advantageous record-oriented file systems files stored collection records typically associated mainframe minicomputer operating systems programs read write whole records rather bytes arbitrary byte ranges seek record boundary within records sophisticated record-oriented file systems common simple databases file systems shared-disk file systems also called shared-storage file systems san file system clustered file system even cluster file systems primarily used storage area network nodes directly access block storage file system located makes possible nodes fail without affecting access file system nodes shared-disk file systems normally used high-availability cluster together storage hardware raid shared-disk file systems normally scale 64 128 nodes shared-disk file systems may symmetric metadata distributed among nodes asymmetric centralized metadata servers distributed file systems also called network file systems many implementations made location dependent access control lists acls unless otherwise stated distributed fault-tolerant replication data nodes servers servers/clients high availability offline disconnected operation distributed parallel file systems stripe data multiple servers high performance normally used high-performance computing hpc distributed parallel file systems use object storage device osd lustre called ost chunks data together centralized metadata servers distributed file systems also parallel fault tolerant stripe replicate data multiple servers high performance maintain data integrity even server fails data lost file systems used high-performance computing hpc high-availability clusters file systems listed focus high availability scalability high performance unless otherwise stated development may called cooperative storage cloud really file systems allow access file systems operating system standpoint
node5:Wikipedia entry. Entry name: Database_index. Entry content: database index database index data structure improves speed data retrieval operations database table cost additional writes storage space maintain index data structure indexes used quickly locate data without search every row database table every time database table accessed indexes created using one columns database table providing basis rapid random lookups efficient access ordered records index copy selected columns data table searched efficiently also includes low-level disk block address direct link complete row data copied databases extend power indexing letting developers create indexes functions expressions example index could created upper last_name would store upper-case versions codice_1 field index another option sometimes supported use partial indices index entries created records satisfy conditional expression aspect flexibility permit indexing user-defined functions well expressions formed assortment built-in functions database software includes indexing technology enables sub-linear time lookup improve performance linear search inefficient large databases suppose database contains n data items one must retrieved based value one fields simple implementation retrieves examines item according test one matching item stop finds single item multiple matches must test everything means number operations worst case n linear time since databases may contain many objects since lookup common operation often desirable improve performance index data structure improves performance lookup many different used purpose complex design trade-offs involving lookup performance index size index-update performance many index designs exhibit logarithmic log n lookup performance applications possible achieve flat 1 performance indexes used police database constraints unique exclusion primary key foreign key index may declared unique creates implicit constraint underlying table database systems usually implicitly create index set columns declared primary key capable using already-existing index police constraint many database systems require referencing referenced sets columns foreign key constraint indexed thus improving performance inserts updates deletes tables participating constraint database systems support exclusion constraint ensures newly inserted updated record certain predicate holds record used implement unique constraint equality predicate complex constraints like ensuring overlapping time ranges intersecting geometry objects would stored table index supporting fast searching records satisfying predicate required police constraint data present arbitrary order logical ordering specified index data rows may spread throughout table regardless value indexed column expression non-clustered index tree contains index keys sorted order leaf level index containing pointer record page row number data page page-organized engines row offset file-organized engines non-clustered index one non-clustered index database table clustering alters data block certain distinct order match index resulting row data stored order therefore one clustered index created given database table clustered indices greatly increase overall speed retrieval usually data accessed sequentially reverse order clustered index range items selected since physical records sort order disk next row item sequence immediately last one fewer data block reads required primary feature clustered index therefore ordering physical data rows accordance index blocks point databases separate data index blocks separate files others put two completely different data blocks within physical file multiple databases multiple tables joined referred cluster confused clustered index described records tables sharing value cluster key shall stored together nearby data blocks may improve joins tables cluster key since matching records stored together less i/o required locate cluster configuration defines data layout tables parts cluster cluster keyed b-tree index hash table data block table record stored defined value cluster key order index definition defines columns important possible retrieve set row identifiers using first indexed column however possible efficient databases retrieve set row identifiers using second greater indexed column example imagine phone book organized city first last name first name given city easily extract list phone numbers city however phone book would tedious find phone numbers given last name would look within city section entries last name databases others ’ use index phone book example composite index created columns codice_2 search giving exact values three fields search time minimal—but provide values codice_3 codice_4 search uses codice_3 field retrieve matched records sequential lookup checks matching codice_4 improve performance one must ensure index created order search columns indexes useful many applications come limitations consider following sql statement codice_7 process statement without index database software must look last_name column every row table known full table scan index database simply follows b-tree data structure smith entry found much less computationally expensive full table scan consider sql statement codice_8 query would yield email address every customer whose email address ends wikipedia.org even email_address column indexed database must perform full index scan index built assumption words go left right wildcard beginning search-term database software unable use underlying b-tree data structure words where-clause sargable problem solved addition another index created codice_9 sql query like codice_10 puts wild-card right-most part query gro.aidepikiw index reverse email_address satisfy wildcard characters used sides search word wikipedia.org index available field used rather sequential search performed takes n time bitmap index special kind indexing stores bulk data bit arrays bitmaps answers queries performing bitwise logical operations bitmaps commonly used indexes b+ trees efficient values index repeat repeat small number times contrast bitmap index designed cases values variable repeat frequently example sex field customer database usually contains three distinct values male female unknown recorded variables bitmap index significant performance advantage commonly used trees dense index databases file pairs keys pointers every record data file every key file associated particular pointer record sorted data file clustered indices duplicate keys dense index points first record key sparse index databases file pairs keys pointers every block data file every key file associated particular pointer block sorted data file clustered indices duplicate keys sparse index points lowest search key block reverse-key index reverses key value entering index e.g. value 24538 becomes 83542 index reversing key value particularly useful indexing data sequence numbers new key values monotonically increase primary index contains key fields table pointer non-key fields table primary index created automatically table created database create file must specify two things primary index 1 name primary index 2 primary index specification used index field neither ordering fields key fields assurance file organized key field primary key field one index entry every tuple data file dense index contains value indexed attribute pointer block/record indices implemented using variety data structures popular indices include balanced trees b+ trees hashes microsoft sql server leaf node clustered index corresponds actual data simply pointer data resides elsewhere case non-clustered index relation single clustered index many unclustered indices index typically accessed concurrently several transactions processes thus needs concurrency control principle indexes utilize common database concurrency control methods specialized concurrency control methods indexes exist applied conjunction common methods substantial performance gain cases index used quickly locate data record required data read words index used locate data records table return data covering index special case index contains required data field answer required data consider following table fields omitted find name id 13 index id useful record must still read get name however index id name contains required data field eliminates need look record covering indexes specific table queries join/ access across multiple tables may potentially consider covering indexes one tables covering index dramatically speed data retrieval may large due additional keys slow data insertion update reduce index size systems allow including non-key fields index non-key fields part index ordering included leaf level allowing covering index less overall index size standard defines create indexes iso sql standard cover physical aspects indexes one physical parts database conception among others like storage tablespace filegroups rdbms vendors give create index syntax specific options depend software capabilities
node6:Wikipedia entry. Entry name: GFS2. Entry content: gfs2 computing global file system 2 gfs2 shared-disk file system linux computer clusters gfs2 differs distributed file systems afs coda intermezzo glusterfs gfs2 allows nodes direct concurrent access shared block storage addition gfs gfs2 also used local filesystem gfs disconnected operating-mode client server roles nodes gfs cluster function peers using gfs cluster requires hardware allow access shared storage lock manager control access storage lock manager operates separate module thus gfs gfs2 use distributed lock manager dlm cluster configurations nolock lock manager local filesystems older versions gfs also support gulm server-based lock manager implements redundancy via failover gfs gfs2 free software distributed terms gnu general public license development gfs began 1995 originally developed university minnesota professor matthew o'keefe group students originally written sgi irix operating system 1998 ported linux since open source code provided convenient development platform late 1999/early 2000 made way sistina software lived time open-source project 2001 sistina made choice make gfs proprietary product developers forked opengfs last public release gfs enhanced include updates allowing work opendlm opengfs opendlm became defunct since red hat purchased sistina december 2003 released gfs many cluster-infrastructure pieces gpl late june 2004 red hat subsequently financed development geared towards bug-fixing stabilization development gfs2 derives gfs included along distributed lock manager shared gfs linux 2.6.19 red hat enterprise linux 5.2 included gfs2 kernel module evaluation purposes 5.3 update gfs2 became part kernel package gfs forms part fedora red hat enterprise linux 5.3 upwards associated centos linux distributions users purchase commercial support run gfs fully supported top red hat enterprise linux since red hat enterprise linux version 5.3 red hat enterprise linux advanced platform included support gfs additional cost following list summarizes version numbers major features introduced design gfs gfs2 targets san-like environments although possible use single node filesystem full feature-set requires san take form iscsi fibrechannel aoe device presented linux block device shared number nodes example drbd device dlm requires ip based network communicate normally ethernet many possible solutions depending upon choice san may possible combine normal practice involves separate networks dlm storage gfs requires fencing hardware kind requirement cluster infrastructure rather gfs/gfs2 required multi-node clusters usual options include power switches remote access controllers e.g drac ipmi ilo fencing used ensure node cluster believes failed suddenly start working another node recovering journal failed node also optionally restart failed node automatically recovery complete although designers gfs/gfs2 aimed emulate local filesystem closely number differences aware due existing filesystem interfaces allowing passing information relating cluster stem difficulty implementing features efficiently clustered manner example main difference one shared similar cluster filesystems cache control mechanism known glocks pronounced gee-locks gfs/gfs2 effect across whole cluster inode filesystem two glocks associated one called iopen glock keeps track processes inode open inode glock controls cache relating inode glock four states un unlocked sh shared – read lock df deferred – read lock incompatible sh ex exclusive four modes maps directly dlm lock mode ex mode inode allowed cache data metadata might dirty i.e waiting write back filesystem sh mode inode cache data metadata must dirty df mode inode allowed cache metadata must dirty df mode used direct i/o un mode inode must cache metadata order operations change inode data metadata interfere ex lock used means certain operations create/unlink files directory writes file general restricted one node cluster course operations multiple nodes work expected due requirement flush caches frequently efficient single frequently asked question gfs/gfs2 performance performance poor email servers solution break mail spool separate directories try keep far possible node reading writing private set directories gfs gfs2 journaled file systems gfs2 supports similar set journaling modes ext3 data=writeback mode metadata journaled mode supported gfs however possible turn journaling individual data-files zero size journaled files gfs number restrictions placed upon support mmap sendfile system calls also use different on-disk format regular files also inherit-journal attribute set directory causes files sub-directories created within directory journal inherit-journal respectively flag set used instead data=journal mount option ext3 supports gfs/gfs2 gfs2 also supports data=ordered mode similar data=writeback except dirty data synced journal flush completed ensures blocks added inode content synced back disk metadata updated record new size thus prevents uninitialised blocks appearing file node failure conditions default journaling mode data=ordered match ext3 default gfs2 yet support data=journal mode unlike gfs use on-disk format regular journaled files also supports journaled inherit-journal attributes gfs2 also relaxes restrictions file may journaled attribute changed time file open also ext3 performance reasons node gfs gfs2 journal gfs journals disk extents gfs2 journals regular files number nodes may mount filesystem one time limited number available journals gfs2 adds number new features gfs summary features already mentioned boxes right page gfs2 designed upgrading gfs would simple procedure end on-disk structure remained gfs including big-endian byte ordering differences though journaling systems gfs gfs2 compatible upgrading possible means tool gfs2_convert run filesystem off-line update metadata spare blocks gfs journals used create small per_node files required gfs2 update process data remains place gfs2 meta filesystem filesystem right alternate root main filesystem although behaves like normal filesystem contents various system files used gfs2 normally users need ever look gfs2 utilities mount unmount meta filesystem required behind scenes
node7:Wikipedia entry. Entry name: IBM. Entry content: ibm international business machines corporation ibm american multinational information technology company headquartered armonk new york operations 170 countries company began 1911 founded endicott new york computing-tabulating-recording company ctr renamed international business machines 1924 ibm produces sells computer hardware middleware software provides hosting consulting services areas ranging mainframe computers nanotechnology ibm also major research organization holding record u.s. patents generated business 26 consecutive years inventions ibm include automated teller machine atm floppy disk hard disk drive magnetic stripe card relational database sql programming language upc barcode dynamic random-access memory dram ibm mainframe exemplified system/360 dominant computing platform 1960s 1970s ibm continually shifted business operations focusing higher-value profitable markets includes spinning printer manufacturer lexmark 1991 sale personal computer thinkpad/thinkcentre x86-based server businesses lenovo 2005 2014 respectively acquiring companies pwc consulting 2002 spss 2009 weather company 2016 red hat 2019 also 2015 ibm announced would go fabless continuing design semiconductors offloading manufacturing globalfoundries nicknamed big blue ibm one 30 companies included dow jones industrial average one world largest employers 380,000 employees known ibmers least 70 ibmers based outside united states country largest number ibmers india ibm employees awarded five nobel prizes six turing awards ten national medals technology usa five national medals science usa 1880s technologies emerged would ultimately form core international business machines ibm julius e. pitrap patented computing scale 1885 alexander dey invented dial recorder 1888 herman hollerith 1860–1929 patented electric tabulating machine willard bundy invented time clock record worker arrival departure time paper tape 1889 june 16 1911 four companies amalgamated new york state charles ranlett flint forming fifth company computing-tabulating-recording company ctr based endicott new york five companies 1,300 employees offices plants endicott binghamton new york dayton ohio detroit michigan washington d.c. toronto manufactured machinery sale lease ranging commercial scales industrial time recorders meat cheese slicers tabulators punched cards thomas j. watson sr. fired national cash register company john henry patterson called flint 1914 offered position ctr watson joined ctr general manager 11 months later made president court cases relating time ncr resolved learned patterson pioneering business practices watson proceeded put stamp ncr onto ctr companies implemented sales conventions generous sales incentives focus customer service insistence well-groomed dark-suited salesmen evangelical fervor instilling company pride loyalty every worker favorite slogan think became mantra company employees watson first four years revenues reached 9 million company operations expanded europe south america asia australia watson never liked clumsy hyphenated name computing-tabulating-recording company february 14 1924 chose replace expansive title international business machines 1933 subsidiaries merged one company ibm 1937 ibm tabulating equipment enabled organizations process unprecedented amounts data clients including u.s. government first effort maintain employment records 26 million people pursuant social security act tracking persecuted groups hitler third reich largely german subsidiary dehomag 1949 thomas watson sr. created ibm world trade corporation subsidiary ibm focused foreign operations 1952 stepped almost 40 years company helm son thomas watson jr. named president 1956 company demonstrated first practical example artificial intelligence arthur l. samuel ibm poughkeepsie new york laboratory programmed ibm 704 merely play checkers learn experience 1957 fortran scientific programming language developed 1961 ibm developed sabre reservation system american airlines introduced highly successful selectric typewriter 1963 ibm employees computers helped nasa track orbital flights mercury astronauts year later moved corporate headquarters new york city armonk new york latter half 1960s saw ibm continue support space exploration participating 1965 gemini flights 1966 saturn flights 1969 lunar mission april 7 1964 ibm announced first computer system family ibm system/360 spanned complete range commercial scientific applications large small allowing companies first time upgrade models greater computing capability without rewrite applications followed ibm system/370 1970 together 360 370 made ibm mainframe dominant mainframe computer dominant computing platform industry throughout period early 1980s operating systems ran os/vs1 mvs middleware built top cics transaction processing monitor near-monopoly-level hold computer industry became almost synonymous ibm products due marketshare 1974 ibm engineer george j. laurer developed universal product code ibm world bank first introduced financial swaps public 1981 entered swap agreement ibm pc originally designated ibm 5150 introduced 1981 soon became industry standard 1991 ibm spun printer manufacturing new business called lexmark 1993 ibm posted us 8 billion loss – time biggest american corporate history lou gerstner hired ceo rjr nabisco turn company around 2002 ibm acquired pwc consulting 2003 initiated project redefine company values hosting three-day online discussion key business issues 50,000 employees result three values dedication every client success innovation matters—for company world trust personal responsibility relationships 2005 company sold personal computer business chinese technology company lenovo 2009 acquired software company spss inc. later 2009 ibm blue gene supercomputing program awarded national medal technology innovation u.s. president barack obama 2011 ibm gained worldwide attention artificial intelligence program watson exhibited jeopardy game-show champions ken jennings brad rutter company also celebrated 100th anniversary year june 16 2012 ibm announced agreed buy kenexa year later also acquired softlayer technologies web hosting service deal worth around 2 billion 2014 ibm announced would sell x86 server division lenovo 2.1 billion also year ibm began announcing several major partnerships companies including apple inc. twitter facebook tencent cisco underarmour box microsoft vmware csc macy sesame workshop parent company sesame street salesforce.com 2015 ibm announced three major acquisitions merge healthcare 1 billion data storage vendor cleversafe digital assets weather company including weather.com weather channel mobile app also year ibmers created film boy atom first molecule movie tell story 2016 ibm acquired video conferencing service ustream formed new cloud video unit april 2016 posted 14-year low quarterly sales following month groupon sued ibm accusing patent infringement two months ibm accused groupon patent infringement separate lawsuit 2015 ibm bought digital part weather company october 2018 ibm announced intention acquire red hat 34 billion acquisition completed july 9 2019 june 2019 ibm cut 2,000 jobs ibm headquartered armonk new york community north midtown manhattan principal building referred chq glass stone edifice parcel amid 432-acre former apple orchard company purchased mid-1950s two ibm buildings within walking distance chq north castle office previously served ibm headquarters louis v. gerstner jr. center learning formerly known ibm learning center ilc resort hotel training center 182 guest rooms 31 meeting rooms various amenities ibm operates 174 countries mobility centers smaller markets areas major campuses larger ones new york city ibm several offices besides chq including ibm watson headquarters astor place manhattan outside new york major campuses united states include austin texas research triangle park raleigh-durham north carolina rochester minnesota silicon valley california ibm real estate holdings varied globally diverse towers occupied ibm include 1250 rené-lévesque montreal canada tour descartes paris france one atlantic center atlanta georgia usa beijing china ibm occupies pangu plaza city seventh tallest building overlooking beijing national stadium bird nest home 2008 summer olympics ibm india private limited indian subsidiary ibm headquartered bengaluru karnataka facilities bengaluru ahmedabad delhi kolkata mumbai chennai pune gurugram noida bhubaneshwar coimbatore visakhapatnam hyderabad notable buildings include ibm rome software lab rome italy hursley house winchester uk 330 north wabash chicago illinois united states cambridge scientific center cambridge massachusetts united states ibm toronto software lab toronto canada ibm building johannesburg johannesburg south africa ibm building seattle seattle washington united states ibm hakozaki facility tokyo japan ibm yamato facility yamato japan ibm canada head office building ontario canada watson iot headquarters munich germany defunct ibm campuses include ibm somers office complex somers new york company contributions industrial architecture design include works eero saarinen ludwig mies van der rohe i.m pei van der rohe building chicago recognized 1990 honor award national building museum ibm recognized one top 20 best workplaces commuters united states environmental protection agency epa 2005 recognized fortune 500 companies provided employees excellent commuter benefits help reduce traffic air pollution 2004 concerns raised related ibm contribution early days pollution original location endicott new york fiscal year 2017 ibm reported earnings us 5.7 billion annual revenue us 79.1 billion decline 1.0 previous fiscal cycle ibm shares traded 125 per share market capitalization valued us 113.9 billion september 2018 ibm ranked 34 2018 fortune 500 rankings largest united states corporations total revenue ibm large diverse portfolio products services offerings fall categories cloud computing artificial intelligence commerce data analytics internet things iot infrastructure mobile security ibm cloud includes infrastructure service iaas software service saas platform service paas offered public private hybrid cloud delivery models instance ibm bluemix paas enables developers quickly create complex websites pay-as-you-go model ibm softlayer dedicated server managed hosting cloud computing provider 2011 reported hosting 81,000 servers 26,000 customers ibm also provides cloud data encryption services icdes using cryptographic splitting secure customer data ibm also hosts industry-wide cloud computing mobile technologies conference interconnect year hardware designed ibm categories include ibm power microprocessors employed inside many console gaming systems including xbox 360 playstation 3 nintendo wii u. ibm secure blue encryption hardware built microprocessors 2014 company revealed truenorth neuromorphic cmos integrated circuit announced 3 billion investment following five years design neural chip mimics human brain 10 billion neurons 100 trillion synapses uses 1 kilowatt power 2016 company launched all-flash arrays designed small midsized companies includes software data compression provisioning snapshots across various systems outsourcing also represents major service provided ibm 40 data centers worldwide alphaworks ibm source emerging software technologies spss software package used statistical analysis ibm kenexa suite provides employment retention solutions includes brassring applicant tracking system used thousands companies recruiting ibm also owns weather company provides weather forecasting includes weather.com weather underground smarter planet initiative seeks achieve economic growth near-term efficiency sustainable development societal progress targeting opportunities smart grids water management systems solutions traffic congestion greener buildings services provisions include redbooks publicly available online books best practices ibm products developerworks website software developers professionals how-to articles tutorials well software downloads code samples discussion forums podcasts blogs wikis resources developers technical professionals ibm watson technology platform uses natural language processing machine learning reveal insights large amounts unstructured data watson debuted 2011 american game-show jeopardy competed champions ken jennings brad rutter three-game tournament watson since applied business healthcare developers universities example ibm partnered memorial sloan kettering cancer center assist considering treatment options oncology patients melanoma screenings also several companies begun using watson call centers either replacing assisting customer service agents january 2019 ibm introduced first commercial quantum computer ibm q system one ibm also provides infrastructure new york city police department ibm cognos analytics perform data visualizations compstat crime data research part ibm since founding organized efforts trace roots back 1945 watson scientific computing laboratory founded columbia university new york city converting renovated fraternity house manhattan west side ibm first laboratory ibm research constitutes largest industrial research organization world 12 labs 6 continents ibm research headquartered thomas j. watson research center new york facilities include almaden lab california austin lab texas australia lab melbourne brazil lab são paulo rio de janeiro china lab beijing shanghai ireland lab dublin haifa lab israel india lab delhi bangalore tokyo lab zurich lab africa lab nairobi terms investment ibm r expenditure totals several billion dollars year 2012 expenditure approximately us 6.9 billion recent allocations included 1 billion create business unit watson 2014 3 billion create next-gen semiconductor along 4 billion towards growing company strategic imperatives cloud analytics mobile security social 2015 ibm leading proponent open source initiative began supporting linux 1998 company invests billions dollars services software based linux ibm linux technology center includes 300 linux kernel developers ibm also released code different open source licenses platform-independent software framework eclipse worth approximately us 40 million time donation three-sentence international components unicode icu license java-based relational database management system rdbms apache derby ibm open source involvement trouble-free however see sco v. ibm famous inventions developments ibm include automated teller machine atm dynamic random access memory dram electronic keypunch financial swap floppy disk hard disk drive magnetic stripe card relational database risc sabre airline reservation system sql universal product code upc bar code virtual machine additionally 1990 company scientists used scanning tunneling microscope arrange 35 individual xenon atoms spell company acronym marking first structure assembled one atom time major part ibm research generation patents since first patent traffic signaling device ibm one world prolific patent sources 2018 company holds record patents generated business marking 25 consecutive years achievement five ibmers received nobel prize leo esaki thomas j. watson research center yorktown heights n.y. 1973 work semiconductors gerd binnig heinrich rohrer zurich research center 1986 scanning tunneling microscope georg bednorz alex müller also zurich 1987 research superconductivity several ibmers also turing award including first female recipient frances e. allen current research includes collaboration university michigan see computers act academic advisor undergraduate computer science engineering students university partnership combining cloud internet things iot platforms make interoperable provide developers easier tools company also involved research advanced algorithms machine learning decision-making processes end company recently released analysis tool algorithms make decisions scanning biases automated decision-making ibm nicknamed big blue part due blue logo color scheme also partially since ibm de facto dress code white shirts blue suits company logo undergone several changes years current 8-bar logo designed 1972 graphic designer paul rand general replacement 13-bar logo since period photocopiers render large areas well aside logo ibm used helvetica corporate typeface 50 years replaced 2017 custom-designed ibm plex ibm valuable brand result 100 years operations marketing campaigns since 1996 ibm exclusive technology partner masters tournament one four major championships professional golf ibm creating first masters.org 1996 first course cam 1998 first iphone app live streaming 2009 first-ever live 4k ultra high definition feed united states major sporting event 2016 result ibm ceo ginni rometty became third female member master governing body augusta national golf club ibm also major sponsor professional tennis engagements u.s. open wimbledon australian open french open company also sponsored olympic games 1960–2000 national football league 2003–2012 2012 ibm brand valued 75.5 billion ranked interbrand second-best brand worldwide year also ranked top company leaders fortune number two green company u.s. newsweek second-most respected company barron fifth-most admired company fortune 18th-most innovative company fast company number one technology consulting number two outsourcing vault 2015 forbes ranked ibm fifth-most valuable brand january 1969 last day johnson administration united states department justice antitrust division filed suit ibm alleging company engaged monopolistic business practices talks ibm would agree settlement consent decree two sides unable come terms case went trial 1975 legal matter justice department estimated would take 60 days three years millions pages evidence justice department decided drop suit new york times article states ibm never publicly disclosed much spent defending suit estimated tens millions dollars ibm one largest workforces world employees big blue referred ibmers company among first corporations provide group life insurance 1934 survivor benefits 1935 training women 1935 paid vacations 1937 training disabled people 1942 ibm hired first black salesperson 1946 1952 ceo thomas j. watson jr. published company first written equal opportunity policy letter one year u.s. supreme court decision brown vs. board education 11 years civil rights act 1964 human rights campaign rated ibm 100 index gay-friendliness every year since 2003 ibm providing same-sex partners employees health benefits anti-discrimination clause additionally 2005 ibm became first major company world commit formally use genetic information employment decisions 2017 ibm named working mother 100 best companies list 32nd consecutive year ibm several leadership development recognition programs recognize employee potential achievements early-career high potential employees ibm sponsors leadership development programs discipline e.g. general management gmldp human resources hrldp finance fldp year company also selects 500 ibmers ibm corporate service corps csc described corporate equivalent peace corps gives top employees month humanitarian work abroad certain interns ibm also program called extreme blue partners top business technical students develop high-value technology compete present business case company ceo internship end company also various designations exceptional individual contributors senior technical staff member stsm research staff member rsm distinguished engineer de distinguished designer dd prolific inventors also achieve patent plateaus earn designation master inventor company prestigious designation ibm fellow since 1963 company names handful fellows year based technical achievement programs recognize years service quarter century club established 1924 sellers eligible join hundred percent club composed ibm salesmen meet quotas convened atlantic city new jersey year company also selects 1,000 ibmers annually award best ibm award includes all-expenses paid trip awards ceremony exotic location ibm culture evolved significantly century operations early days dark gray suit white shirt sincere tie constituted public uniform ibm employees ibm management transformation 1990s ceo louis v. gerstner jr. relaxed codes normalizing dress behavior ibm employees company culture also given different plays company acronym ibm saying stands 've moved due relocations layoffs others saying stands 'm pursuant prevalent work-from-anywhere norm others saying stands 'm mentored due company open door policy encouragement mentoring levels terms labor relations company traditionally resisted labor union organizing although unions represent ibm workers outside united states japan ibm employees also american football team complete pro stadium cheerleaders televised games competing japanese x-league big blue 2015 ibm started giving employees option choosing either pc mac primary work device resulting ibm becoming world largest mac shop 2016 ibm eliminated forced rankings changed annual performance review system focus frequent feedback coaching skills development many ibmers also achieved notability outside work leaving ibm business former ibm employees include apple inc. ceo tim cook former eds ceo politician ross perot microsoft chairman john w. thompson sap co-founder hasso plattner gartner founder gideon gartner advanced micro devices amd ceo lisa su former citizens financial group ceo ellen alemany former yahoo chairman alfred amoroso former ceo c. michael armstrong former xerox corporation ceos david t. kearns g. richard thoman former fair isaac corporation ceo mark n. greene citrix systems co-founder ed iacobucci asos.com chairman brian mcbride former lenovo ceo steve ward former teradata ceo kenneth simonds government alumna patricia roberts harris served united states secretary housing urban development first african american woman serve united states cabinet samuel k. skinner served u.s. secretary transportation white house chief staff alumni also include u.s senators mack mattingly thom tillis wisconsin governor scott walker former u.s ambassadors vincent obsitnik slovakia arthur k. watson france thomas watson jr. soviet union former u.s representatives todd akin glenn andrews robert garcia katherine harris amo houghton jim ross lightfoot thomas j. manton donald w. riegle jr. ed zschau others nasa astronaut michael j. massimino canadian astronaut governor-general julie payette harvey mudd college president maria klawe western governors university president emeritus robert mendenhall former university kentucky president lee t. todd jr. nfl referee bill carollo former rangers f.c chairman john mcclelland recipient nobel prize literature j. m. coetzee thomas watson jr. also served 11th national president boy scouts america company 14 member board directors responsible overall corporate management includes ceos american express ford motor company boeing dow chemical johnson johnson cemex well president rensselaer polytechnic institute 2011 ibm became first technology company warren buffett holding company berkshire hathaway invested initially bought 64 million shares costing 10.5 billion dollars years increased ibm holdings however reduced 94.5 2.05 million shares end 2017 may 2018 completely ibm
node8:Wikipedia entry. Entry name: Disk_formatting. Entry content: disk formatting disk formatting process preparing data storage device hard disk drive solid-state drive floppy disk usb flash drive initial use cases formatting operation may also create one new file systems first part formatting process performs basic medium preparation often referred low-level formatting partitioning common term second part process making data storage device visible operating system third part process usually termed high-level formatting often refers process generating new file system operating systems parts three processes combined repeated different levels term format understood mean operation new disk medium fully prepared store files general rule formatting disk leaves existing data disk medium might recoverable special tools special tools remove user data single overwrite files free space block contiguous number bytes minimum unit storage read written disk disk driver earliest disk drives fixed block sizes e.g ibm 350 disk storage unit late 1950s block size 100 6 bit characters starting 1301 ibm marketed subsystems featured variable block sizes particular track could blocks different sizes disk subsystems ibm system/360 expanded concept form count key data ckd later extended count key data eckd however use variable block size hdds fell use 1990s one last hdds support variable block size ibm 3390 model 9 announced may 1993 modern hard disk drives serial attached scsi sas serial ata sata drives appear interfaces contiguous set fixed-size blocks many years 512 bytes long beginning 2009 accelerating 2011 major hard disk drive manufacturers began releasing hard disk drive platforms using advanced format 4096 byte logical blocks floppy disks generally used fixed block sizes sizes function host os interaction controller particular type media e.g. 5¼-inch dsdd would different block sizes depending upon host os controller optical discs generally use fixed block sizes formatting disk use operating system applications typically involves three different processes low-level format floppy disks early hard disks performed disk drive controller standard 1.44 mb floppy disk low-level formatting normally writes 18 sectors 512 bytes 160 tracks 80 side floppy disk providing 1,474,560 bytes storage disk physical sectors actually larger 512 bytes addition 512 byte data field include sector identifier field crc bytes cases error correction bytes gaps fields additional bytes normally included quoted figure overall storage capacity disk different low-level formats used media example large records used cut inter-record gap size several freeware shareware free software programs e.g gparted fdformat nformat 2m allowed considerably control formatting allowing formatting high-density 3.5 disks capacity 2 mb techniques used include linux supports variety sector sizes dos windows support large-record-size dmf-formatted floppy format hard disk drives prior 1990s typically separate disk controller defined data encoded media media drive and/or controller possibly procured separate vendors users often able perform low-level formatting separate procurement also potential incompatibility separate components subsystem would reliably store data user instigated low-level formatting llf hard disk drives common minicomputer personal computer systems 1990s ibm mainframe system vendors typically supplied hard disk drives media case removable media hdds low-level format typically involved subdividing track disk one blocks would contain user data associated control information different computers used different block sizes ibm notably used variable block sizes popularity ibm pc caused industry adopt standard 512 user data bytes per block middle 1980s depending upon system low-level formatting generally done operating system utility ibm compatible pcs used bios invoked using ms-dos debug program transfer control routine hidden different addresses different bioses starting late 1980s driven volume ibm compatible pcs hdds became routinely available pre-formatted compatible low-level format time industry moved historical dumb bit serial interfaces modern intelligent bit serial interfaces word serial interfaces wherein low level format performed factory today end-user cases never perform low-level formatting ide ata hard drive fact often possible modern hard drives formatting done servowriter disk assembled drive factory generally impossible perform complete llf modern hard drives since mid-1990s outside factory term low-level format still used could called reinitialization hard drive factory configuration even terms may misunderstood present ambiguity term low-level format seems due inconsistent documentation web sites belief many users process high-level file system format must called low-level format since much low level formatting process today performed factory various drive manufacturers describe reinitialization software llf utilities web sites since users generally way determine difference complete llf reinitialization simply observe running software results hard disk must high-level formatted misinformed user mixed signals various drive manufacturers perpetuated error note whatever possible misuse terms may exist search hard drive manufacturers web sites terms many sites make reinitialization utilities available possibly bootable floppy diskette cd image files overwrite every byte check damaged sectors hard disk reinitialization include identifying sparing possible sectors written read back drive correctly term however used refer portion process every sector drive written usually writing specific value every addressable location disk traditionally physical sectors initialized fill value codice_1 per int 1eh disk parameter table dpt format ibm compatible machines value also used atari portfolio 8-inch cp/m floppies typically came pre-formatted value codice_2 way digital research value also used atari st amstrad formatted floppies amstrad otherwise used codice_3 fill value modern formatters wipe hard disks value codice_4 instead sometimes also called zero-filling whereas value codice_5 used flash disks reduce wear latter value typically also default value used rom disks reformatted advanced formatting tools allow configuring fill value one popular method performing zero-fill operation hard disk writing zero-value bytes drive using unix dd utility /dev/zero stream input file drive specific partition output file command may take many hours complete erase files file systems another method scsi disks may use sg_format command issue low-level scsi format unit command zero-filling drive necessarily secure method erasing sensitive data preparing drive use encrypted filesystem zero-filling voids plausible deniability process partitioning process writing information blocks storage device medium allows access operating system operating systems allow device medium appear multiple devices i.e partitioned multiple devices ms-dos microsoft windows unix-based operating systems bsd linux mac os x normally done partition editor fdisk gnu parted disk utility operating systems support multiple partitions current ibm mainframe oss derived os/360 dos/360 z/os z/vse done init command ickdsf utility oss support single partition per device called volume ickdsf functions include creating volume label writing record 0 every track floppy disks partitioned however depending upon os may require volume information order accessed os partition editors ickdsf today handle low level functions hdds optical disc drives writing timing marks reinitialize modern disk degaussed otherwise lost factory formatting high-level formatting process setting empty file system disk partition logical volume pcs installing boot sector fast operation sometimes referred quick formatting entire logical drive partition may optionally scanned defects may take considerable time case floppy disks high- low-level formatting customarily performed one pass disk formatting software 8-inch floppies typically came low-level formatted filled format filler value codice_2 since 1990s 5.25-inch 3.5-inch floppies shipped pre-formatted factory dos fat12 floppies current ibm mainframe operating systems derived os/360 dos/360 may done part allocating file utility specific file system older access methods fly new data written host protected area sometimes referred hidden protected area area hard drive high level formatted area normally visible operating system os reformatting high-level formatting performed functioning disk drive free medium contents reformatting unique operating system actually done existing data varies os important aspect process frees disk space use data actually erase everything requires overwriting block data medium something done many high-level formatting utilities reformatting often carries implication operating system software reinstalled format complete rather fixing installation suffering malfunction security compromise may necessary simply reformat everything start scratch various colloquialisms exist process wipe reload nuke pave reimage etc format command ms-dos pc dos os/2 microsoft windows disk formatting performed codice_7 command codice_7 program usually asks confirmation beforehand prevent accidental removal data versions dos undocumented codice_9 option used usual confirmation skipped format begins right away wm/formatc macro virus uses command format drive c soon document opened unconditional format also codice_10 parameter performs unconditional format circumstances overwrites entire partition preventing recovery data software note however codice_10 switch works reliably floppy diskettes see image right technically unless codice_12 used floppies always low level formatted addition high-level formatted certain circumstances hard drive partitions however codice_10 switch merely prevents creation codice_14 information partition formatted otherwise leaving partition contents entirely intact still disk marked deleted cases user data remain ripe recovery specialist tools encase disk editors reliance upon codice_10 secure overwriting hard drive partitions therefore inadvisable purpose-built tools dban considered instead overwriting windows vista upwards non-quick format overwrite goes case windows xp os/2 os/2 use codice_16 parameter specifies long format format overwrite entire partition logical drive enhances ability chkdsk recover files high-level formatting disks systems traditionally done using codice_17 command linux potentially systems well codice_17 typically wrapper around filesystem-specific commands name codice_19 fsname name filesystem format disk filesystems supported certain implementations codice_17 manipulation tools example ntfsprogs provides format utility ntfs filesystem unix unix-like operating systems higher-level formatting tools usually purpose making disk formatting easier and/or allowing user partition disk tool examples include gnu parted various gui frontends gparted kde partition manager disk utility application mac os x file deletion operating system data disk fully erased every high-level format instead area disk containing data merely marked available retains old data overwritten disk formatted different file system one previously existed partition data may overwritten would n't file system used however file systems e.g. ntfs fat file indexes mfts ntfs inodes ext2/3 etc may written exact locations partition size increased even fat file systems overwrite data beginning new partition perspective preventing recovery sensitive data recovery tools data must either completely overwritten every sector random data format format program must perform overwriting dos codice_21 command floppy diskettes filling every data sector format filler byte value typically codice_1 however applications tools especially used forensic information technology recover data conventionally erased order avoid recovery sensitive data governmental organization big companies use information destruction methods like gutmann method average users also special applications perform complete data destruction overwriting previous information although applications perform multiple writes assure data erasure single write old data generally needed modern hard disk drives ata secure erase performed disk utilities quickly thoroughly wipe drives degaussing another option however may render drive unusable
node9:Wikipedia entry. Entry name: Dropbox_(service). Entry content: dropbox service dropbox file hosting service operated american company dropbox inc. headquartered san francisco california offers cloud storage file synchronization personal cloud client software dropbox founded 2007 mit students drew houston arash ferdowsi startup company initial funding seed accelerator combinator dropbox praised receiving crunchie award 2010 best internet application macworld 2009 editor choice award software ranked one valuable startups us world valuation us 10 billion described one combinator successful investments date however dropbox also experienced criticism generated controversy issues including security breaches privacy concerns dropbox blocked china since 2014 five star privacy rating electronic frontier foundation dropbox brings files together one central place creating special folder user computer contents folders synchronized dropbox servers computers devices user installed dropbox keeping files up-to-date devices dropbox uses freemium business model users offered free account set storage size paid subscriptions available offer capacity additional features dropbox basic users given two gigabytes free storage space dropbox plus users given two terabytes storage space well additional features including advanced sharing controls remote wipe optional extended version history add-on dropbox offers computer apps microsoft windows apple macos linux computers mobile apps ios android windows phone smartphones tablets march 2013 company acquired mailbox popular email app april 2014 company introduced dropbox carousel photo video gallery app mailbox carousel shut december 2015 key features apps implemented regular dropbox service october 2015 officially announced dropbox paper collaborative document editor reported effort expand operations towards businesses march 2016 dropbox 500 million users dropbox founder drew houston conceived dropbox concept repeatedly forgetting usb flash drive student mit 2009 meet team post dropbox blog wrote existing services time suffered problems internet latency large files bugs made think much began making something personal use realized could benefit others problems houston founded evenflow inc. may 2007 company behind dropbox shortly thereafter secured seed funding combinator dropbox officially launched 2008 techcrunch disrupt annual technology conference owing trademark disputes proxy inc. evenflow dropbox official domain name get dropbox.com october 2009 acquired current domain dropbox.com october 2009 evenflow inc. renamed dropbox inc interview techcrunch founder stories october 2011 houston explained demo video released dropbox early days one viewer arash ferdowsi ferdowsi impressed formed partnership regards competition houston stated easy explain idea actually really hard dropbox seen steady user growth since inception surpassed 1 million registered users milestone april 2009 followed 2 million september 3 million november passed 50 million users october 2011 100 million november 2012 200 million november 2013 400 million june 2015 500 million march 2016 july 2012 dropbox acquired tapengage startup enables advertisers publishers collaborate tablet-optimized advertising following december dropbox acquired two companies audiogalaxy startup allowing users store music files playlists cloud stream device snapjoy company allowed users aggregate archive view digital photos cameras phones popular apps like flickr instagram picasa view online via ios app july 2013 dropbox acquired endorse mobile coupon startup may 2014 dropbox acquired bubbli startup built innovative ways incorporating 3d technology 2d views packaging mobile app january 2015 dropbox acquired cloudon company provided mobile applications document editing creation time dropbox told techcrunch cloudon base herzliya would become first dropbox office israel july dropbox acquired clementine enterprise communication service april 2014 dropbox acquired photo-sharing company loom would shut integrated then-recently announced carousel document-sharing startup hackpad dropbox later announced april 2017 hackpad would shut july 19 notes migrated dropbox paper dropbox computer apps microsoft windows apple macos linux computers mobile apps ios android windows phone smartphones tablets also offers website interface part partnership microsoft dropbox announced universal windows 10 app january 2016 dropbox apps offer automatic photo uploading feature allowing users automatically upload photos videos cameras tablets sd cards smartphones dedicated camera uploads folder dropbox users given 500 megabytes extra space uploading first photo given 3 gigabytes extra space users continue using method photos july 2014 dropbox introduced streaming sync computer apps streaming sync described new supercharged synchronization speed large files improves upload download time 2 times august 2015 dropbox announced availability universal 2nd factor usb security keys providing two-factor authentication logging services dropbox received initial funding seed accelerator combinator dropbox also raised us 1.2 million series funding sequoia capital 2007 along interest amount converted equity part series investment included fresh slug us 6 million bringing total amount us 7.25 million round closed 2008 documents filed 2009 may 2010 report wall street journal said since founder drew houston started reading eric ries lean startup blog year ago company started trickling new features ready instead waiting launch fully featured product helps test customer appetite says dubbing practice minimum viable product techcrunch reported july 2011 dropbox looking raise us 200 us 300 million valuation end 5 billion 10 billion range ... quite step previous funding rounds totalled tiny 7.2 million noted forbes article dropbox revenue track hit 240 million 2011 april 2012 dropbox announced bono edge two members irish rock band u2 individual investors company march 2017 bloomberg reported dropbox secured us 600 million credit line company expected file initial public offering ipo soon year february 2018 dropbox filed ipo listed nasdaq company initial intent raise 500 million dropbox stock rose 42 percent 29.89 first day trading march 23 2018 may 2018 dropbox never profitable reports positive cash flow dropbox uses freemium business model users offered free account set storage size paid subscriptions available offer capacity additional features dropbox basic users given two gigabytes free storage space expanded referrals users recommend service people people start using service user awarded additional 500 megabytes storage space dropbox basic users earn 16 gigabytes referral program dropbox plus subscription named dropbox pro prior march 2017 gives users 2 terabytes storage space well additional features including november 2013 dropbox announced changes dropbox business would enable users connect personal dropbox business dropbox device folders properly labeled personal work come password contacts settings files furthermore dropbox announced shared audit logs remote wipe business administrators account transfers new features business offering january 2017 dropbox introduced smart sync business enterprise customers feature lets windows macos users see files dropbox folder download specific files on-demand similarly dropbox basic dropbox plus users also earn extra space referrals plus users earn 1 gigabyte per referral 32 gigabytes dropbox business dropbox solution corporations adding business-centered functionality teams including collaboration tools advanced security control unlimited file recovery user management granular permissions options unlimited storage large organizations dropbox offers dropbox enterprise highest tier product offerings adding domain management tools assigned dropbox customer support member help expert advisors deployment user training july 2016 dropbox announced new adminx administrator dashboard business customers offering improved control company files users june 2017 adminx dashboard given redesign additional administrator functions log-in durations custom password strength parameters granular subdomain verifications specified teams september 2012 facebook dropbox integrated allow users facebook groups share files using dropbox 2013 samsung pre-loaded dropbox mobile application android devices dropbox provided extra space users owning samsung devices november 2014 dropbox announced partnership microsoft integrate dropbox microsoft office applications ios android office 365 applications web july 10 2018 dropbox announced partnership salesforce aiming improve brand engagement team productivity dropbox software enables users drop file designated folder file automatically uploaded dropbox cloud-based service made available user computers devices also dropbox software installed keeping file up-to-date systems file user dropbox folder changed dropbox uploads pieces file changed whenever possible file folder deleted users recover within 30 days dropbox plus users recovery time extended one year purchasing extended version history add-on dropbox accounts accessed emails replied year automatically deleted dropbox also offers lan sync feature instead receiving information data dropbox servers computers local network exchange files directly potentially significantly improving synchronization speeds originally dropbox servers computer apps written python july 2014 dropbox began migrating performance-critical backend infrastructure go september 2012 dropbox website code base rewritten javascript coffeescript dropbox originally used amazon s3 storage system store user files 2014 2016 gradually moved away amazon use hardware referred magic pocket due dropbox description place keep stuff ’ get lost always access june 2017 company announced major global network expansion aiming increase synchronization speeds cutting costs expansion starting 14 cities across 7 countries 3 continents adds hundreds gigabits internet connectivity transit providers regional global isps hundreds new peering partners exchange traffic directly rather isp dropbox uses ssl transfers synchronization stores data via advanced encryption standard aes -256 encryption functionality dropbox integrated third-party applications application programming interface api dropbox prevents sharing copyrighted data checking hash files shared public folders users blacklist copyrighted material applies files folders shared users publicly files kept individual dropbox folder shared march 2013 dropbox acquired mailbox popular email app mailbox ceo gentry underwood saying rather grow mailbox 've decided join forces dropbox build together deal developers mailbox joined dropbox kept mailbox running stand-alone app mailbox ceo stated still struggling keep demand want use dropbox ceo drew houston said felt could help mailbox reach much different audience much faster acquisition reported cost 100 million december 2015 dropbox announced shut-down mailbox blog post drew houston arash ferdowsi explained 'll ... using 've learned mailbox build new ways communicate collaborate dropbox april 2014 dropbox introduced carousel photo video gallery combines photos dropbox photos phone automatically backs new ones take carousel sorted photos event date december 2015 dropbox announced shut-down carousel blog post drew houston arash ferdowsi explained 'll taking key features carousel back place photos live dropbox app april 2015 dropbox launched dropbox notes collaborative note-taking service beta testing phase prompting speculation dropbox planning bring product compete google docs techcrunch noted dropbox notes appeared new version project composer previous iteration service roots acquisition hackpad april 2014 october 2015 dropbox announced upcoming launch dropbox paper collaborative document editor noted media result development dropbox notes service earlier 2015 dropbox paper entered open beta august 2016 allowing anyone join test product mobile apps android ios also released january 2017 dropbox paper officially launched aimed businesses dropbox paper described one part online document one part collaboration one part task management tool one part content hub rob baesman dropbox head product allows importing editing collaboration number file types google microsoft others users devised number uses mashups technology expand dropbox functionality include sending files dropbox via gmail using dropbox sync instant messaging chat logs bittorrent management password management remote application launching system monitoring free web hosting service dropbox received several awards including crunchie award 2010 best internet application macworld 2009 editor choice award software nominated 2010 webby award 2010 mac design awards ars technica 2011 business insider named dropbox world sixth valuable startup 2017 publication ranked dropbox eighth valuable us startup valuation 10 billion described one combinator successful investments date apple launched cloud storage service later 2011 icloud n't hold back dropbox growth dropbox mobile iphone app release 2010 among top 10 best apps selected alex ahlund former ceo two websites focused mobile apps company android app also selected one top five best apps list compiled 2010 jason hiner zdnet founders drew houston arash ferdowsi named among top 30 30 entrepreneurs inc. 2011 january 2012 dropbox named startup year techcrunch 2016 company ranked 2 forbes cloud 100 list dropbox subject criticism controversy related multiple incidents including june 2011 authentication problem let accounts accessed several hours without passwords july 2011 privacy policy update language suggesting dropbox ownership users data concerns dropbox employee access users information july 2012 email spam recurrence february 2013 leaked government documents june 2013 information dropbox considered inclusion national security agency prism surveillance program july 2014 comment nsa whistleblower edward snowden criticizing dropbox encryption leak 68 million account passwords internet august 2016 january 2017 accidental data restoration incident years-old supposedly deleted files reappeared users accounts dropbox headquarters located san francisco originally market street expansion china basin landing building july 2011 allowing significant space increase number employees grew company needed expansion february 2014 signed lease two buildings brannan street needing substantial amounts space company started shopping remaining available space companies sublease november 2015 dropbox expanded second u.s. office austin texas february 2014 state texas city austin provided 1.7 million performance-based incentives package dropbox exchange locating office austin december 2012 dropbox set office dublin ireland first office outside united states
node10:Wikipedia entry. Entry name: Hypertext_Transfer_Protocol. Entry content: hypertext transfer protocol hypertext transfer protocol http application protocol distributed collaborative hypermedia information systems http foundation data communication world wide web hypertext documents include hyperlinks resources user easily access example mouse click tapping screen web browser development http initiated tim berners-lee cern 1989 development early http requests comments rfcs coordinated effort internet engineering task force ietf world wide web consortium w3c work later moving ietf http/1.1 first documented 1997 specification obsoleted 1999 likewise replaced family rfcs 2014 http/2 efficient expression http semantics wire published 2015 supported major web servers browsers transport layer security tls using application-layer protocol negotiation alpn extension tls 1.2 newer required.. http/3 proposed successor http/2 using udp instead tcp underlying transport protocol like http/2 obsolete previous major versions protocol http functions request–response protocol client–server computing model web browser example may client application running computer hosting website may server client submits http request message server server provides resources html files content performs functions behalf client returns response message client response contains completion status information request may also contain requested content message body web browser example user agent ua types user agent include indexing software used search providers web crawlers voice browsers mobile apps software accesses consumes displays web content http designed permit intermediate network elements improve enable communications clients servers high-traffic websites often benefit web cache servers deliver content behalf upstream servers improve response time web browsers cache previously accessed web resources reuse possible reduce network traffic http proxy servers private network boundaries facilitate communication clients without globally routable address relaying messages external servers http application layer protocol designed within framework internet protocol suite definition presumes underlying reliable transport layer protocol transmission control protocol tcp commonly used however http adapted use unreliable protocols user datagram protocol udp example httpu simple service discovery protocol ssdp http resources identified located network uniform resource locators urls using uniform resource identifiers uri schemes http https example including optional components codice_1 uris encoded hyperlinks html documents form interlinked hypertext documents http/1.1 revision original http http/1.0 http/1.0 separate connection server made every resource request http/1.1 reuse connection multiple times download images scripts stylesheets etc page delivered http/1.1 communications therefore experience less latency establishment tcp connections presents considerable overhead term hypertext coined ted nelson 1965 xanadu project turn inspired vannevar bush 1930s vision microfilm-based information retrieval management memex system described 1945 essay may think tim berners-lee team cern credited inventing original http along html associated technology web server text-based web browser berners-lee first proposed worldwideweb project 1989—now known world wide web first version protocol one method namely get would request page server response server always html page first documented version http http v0.9 1991 dave raggett led http working group http wg 1995 wanted expand protocol extended operations extended negotiation richer meta-information tied security protocol became efficient adding additional methods header fields officially introduced recognized http v1.0 1996 http wg planned publish new standards december 1995 support pre-standard http/1.1 based developing called http-ng rapidly adopted major browser developers early 1996 march year pre-standard http/1.1 supported arena netscape 2.0 netscape navigator gold 2.01 mosaic 2.7 lynx 2.5 internet explorer 2.0 end-user adoption new browsers rapid march 1996 one web hosting company reported 40 browsers use internet http 1.1 compliant web hosting company reported june 1996 65 browsers accessing servers http/1.1 compliant http/1.1 standard defined officially released january 1997 improvements updates http/1.1 standard released june 1999 2007 http working group formed part revise clarify http/1.1 specification june 2014 wg released updated six-part specification obsoleting http/2 published may 2015 http session sequence network request-response transactions http client initiates request establishing transmission control protocol tcp connection particular port server typically port 80 occasionally port 8080 see list tcp udp port numbers http server listening port waits client request message upon receiving request server sends back status line http/1.1 200 ok message body message typically requested resource although error message information may also returned http/0.9 1.0 connection closed single request/response pair http/1.1 keep-alive-mechanism introduced connection could reused one request persistent connections reduce request latency perceptibly client need re-negotiate tcp 3-way-handshake connection first request sent another positive side effect general connection becomes faster time due tcp slow-start-mechanism version 1.1 protocol also made bandwidth optimization improvements http/1.0 example http/1.1 introduced chunked transfer encoding allow content persistent connections streamed rather buffered http pipelining reduces lag time allowing clients send multiple requests waiting response another addition protocol byte serving server transmits portion resource explicitly requested client http stateless protocol stateless protocol require http server retain information status user duration multiple requests however web applications implement states server side sessions using instance http cookies hidden variables within web forms http provides multiple authentication schemes basic access authentication digest access authentication operate via challenge-response mechanism whereby server identifies issues challenge serving requested content http provides general framework access control authentication via extensible set challenge-response authentication schemes used server challenge client request client provide authentication information http authentication specification also provides arbitrary implementation-specific construct dividing resources common given root uri realm value string present combined canonical root uri form protection space component challenge effect allows server define separate authentication scopes one root uri client sends requests server server sends responses request message consists following request line header fields must end cr lf carriage return character followed line feed character empty line must consist cr lf whitespace http/1.1 protocol header fields except host optional request line containing path name accepted servers maintain compatibility http clients http/1.0 specification http defines methods sometimes referred verbs nowhere specification mention verb options head verb indicate desired action performed identified resource resource represents whether pre-existing data data generated dynamically depends implementation server often resource corresponds file output executable residing server http/1.0 specification defined get head post methods http/1.1 specification added five new methods options put delete trace connect specified documents semantics well-known depended client use method server configured support combination methods method unknown intermediate treated unsafe non-idempotent method limit number methods defined allows future methods specified without breaking existing infrastructure example webdav defined 7 new methods specified patch method method names case sensitive contrast http header field names case-insensitive general-purpose http servers required implement least get head methods methods considered optional specification methods example get head options trace convention defined safe means intended information retrieval change state server words side effects beyond relatively harmless effects logging web caching serving banner advertisements incrementing web counter making arbitrary get requests without regard context application state therefore considered safe however mandated standard explicitly acknowledged guaranteed contrast methods post put delete patch intended actions may cause side effects either server external side effects financial transactions transmission email methods therefore usually used conforming web robots web crawlers conform tend make requests without regard context consequences despite prescribed safety get requests practice handling server technically limited way therefore careless deliberate programming cause non-trivial changes server discouraged cause problems web caching search engines automated agents make unintended changes server example website might allow deletion resource url http //example.com/article/1234/delete arbitrarily fetched even using get would simply delete article one example occurring practice short-lived google web accelerator beta prefetched arbitrary urls page user viewing causing records automatically altered deleted en masse beta suspended weeks first release following widespread criticism methods put delete defined idempotent meaning multiple identical requests effect single request methods get head options trace prescribed safe also idempotent http stateless protocol contrast post method necessarily idempotent therefore sending identical post request multiple times may affect state cause side effects financial transactions cases may desirable cases could due accident user realize action result sending another request receive adequate feedback first request successful web browsers may show alert dialog boxes warn users cases reloading page may re-submit post request generally web application handle cases post request submitted note whether method idempotent enforced protocol web server perfectly possible write web application example database insert non-idempotent action triggered get request ignoring recommendation however may result undesirable consequences user agent assumes repeating request safe trace method used part class attacks known cross-site tracing reason common security advice disabled server configuration microsoft iis supports proprietary track method behaves similarly likewise recommended disabled response message consists following status line header fields must end cr lf empty line must consist cr lf whitespace strict requirement cr lf relaxed somewhat within message bodies consistent use system linebreaks cr lf alone http/1.0 since first line http response called status line includes numeric status code 404 textual reason phrase found way user agent handles response depends primarily code secondarily response header fields custom status codes used user agent encounters code recognize use first digit code determine general class response standard reason phrases recommendations replaced local equivalents web developer discretion status code indicated problem user agent might display reason phrase user provide information nature problem standard also allows user agent attempt interpret reason phrase though might unwise since standard explicitly specifies status codes machine-readable reason phrases human-readable http status code primarily divided five groups better explanation request responses client server named popular way establishing encrypted http connection https two methods establishing encrypted http connection also exist secure hypertext transfer protocol using http/1.1 upgrade header specify upgrade tls browser support two however nearly non-existent sample conversation http client http server running www.example.com port 80 client request consisting case request line one header field followed blank line request ends double newline form carriage return followed line feed host field distinguishes various dns names sharing single ip address allowing name-based virtual hosting optional http/1.0 mandatory http/1.1 means /index.html one etag entity tag header field used determine cached version requested resource identical current version resource server content-type specifies internet media type data conveyed http message content-length indicates length bytes http/1.1 webserver publishes ability respond requests certain byte ranges document setting field accept-ranges bytes useful client needs certain portions resource sent server called byte serving connection close sent means web server close tcp connection immediately transfer response header lines optional content-length missing length determined ways chunked transfer encoding uses chunk size 0 mark end content identity encoding without content-length reads content socket closed content-encoding like gzip used compress transmitted data gopher protocol content delivery protocol displaced http early 1990s spdy protocol alternative http developed google superseded new http protocol http/2
node11:Wikipedia entry. Entry name: VMware_VMFS. Entry content: vmware vmfs vmware vmfs virtual machine file system vmware inc. clustered file system used company flagship server virtualization suite vsphere developed store virtual machine disk images including snapshots multiple servers read/write filesystem simultaneously individual virtual machine files locked vmfs volumes logically grown non-destructively increased size spanning multiple vmfs volumes together five plus one vsan versions vmfs corresponding esx/esxi server product releases java open source vmfs driver enables read-only access files folders partitions formatted virtual machine file system vmfs developed maintained fluid operations ag allows features like offloaded backups virtual machines hosted vmware esxi hosts vmfsv3 based fluidops code vmfs-tools evolved add vmfs features supports read vmfs mounts standard linux vfs fuse framework developed christophe fillot mike hommey available source code download glandium.org vmfs-tools page debian vmfs-tools ubuntu vmfs-tools packages
node12:Wikipedia entry. Entry name: Ultra_80. Entry content: ultra 80 sun microsystems ultra 80 computer workstation shipped november 1999 2002 enclosure fairly large high wide deep heavy tower design launch shipped solaris 2.5.1 available variety different configurations one model 1450 two model 2450 four model 4450 64-bit ultrasparc ii cpus 4 gb ram released ultra 80 sun highest performance workstation ultra 80 similar lower-cost sun ultra 60 somewhat larger supports cpus memory although designed workstation rather server may rack mounted using optional kit enterprise 420r server product based ultra 80 motherboard specialized rack-mountable chassis custom power supplies parts appropriate server applications last order date ultra 80 july 2002 last model stopped shipping october 2002 later ultra 45 introduced 2006 supports maximum two cpus rather four ultra 80 ultra 80 shipped solaris 2.5.1 capable running later versions solaris solaris 10 oracle solaris 11 dropped support ultrasparc ii iii iv processors well linux various unix operating systems ultra 80 run microsoft windows directly although internal pci card sunpci ii pro similar sun could fitted allow use windows full specifications found sun web site although sold either one two four cpus use three cpus supported configuration cpus run 450 mhz 16-kb data 16-kb instruction cache chip secondary 4-mb external cache x1195a part number one cpus cpu integrated floating point processor ultra 80 uses 144-pin 5v 60-ns dimm memory modules either 64 256 mb installed sets four identical dimms 16 dimm sockets possible fit 4 gb 16 256 mb modules memory bus 576 bits wide 512 bits used data 64 bits error correction specifications list maximum throughput 1.78-gb/s performance improved 2-way interleaving used giving 512 mb 2 gb maximum performance achieved 4-way interleaving case 16 memory slots would used providing machine 1 gb 4 gb ram half ultra 80 memory must fitted motherboard half memory riser board care needed handling memory riser board connector designed repeated use must tightened using torque wrench supplied ultra 80 detailed service manual ultra 80 takes one two 1 high sca scsi disk drives internally sold 18.2-gb 36.4-gb disks practice use sca disk internal disks must mounted carrier spud-bracket sun part number 540-3024 scsi ids internal disks 0 3 set sca backplane changed optional 1.44 mb 3.5 ms-dos/ibm compatible floppy drive fitted ultra 80 could purchased new optional 12/24 gb native/compressed dds-3 tape drive work dds-4 drive probably larger tape drives optional 644 mb suncd 32x-speed photo cd compatible cd-rom drive optional 10x dvd-rom could specified well 3rd-party rewritable cd-rom drives could also used.. ultra 80 four full-size slots compliant pci specification version 2.1 systems might inoperable pci 2.2 card installed two upa graphics slots running 112 mhz supporting one two elite3d m3 and/or elite3d m6 graphics options popular creator3d framebuffer supported usually always work ultra 80s sold pgx32 framebuffer even though low performance made appropriate use server rather workstation applications although sold ultra 80s later xvr series framebuffers also work expert3d series sun ultra 80 fitted dual channel ultra-3 scsi controller speed 40 mb/s one controller c0 used internal disk cd-rom dvd-rom tape second channel c1 used external 68-pin ultra wide scsi connector rear ultra 80 sun ultra 80 1 gb/s ethernet used optional sun x1141a ethernet card usb officially supported various usb boards pcs known work linux solaris maximum power consumption documented 380w components list specifies sony 670w 12a power supply sun part number 300-1357 ultra 80 well-built workstation use cheap mass-produced commodity pc parts like sun ultra workstations ultra 5 ultra 10 well cooled suffering none overheating problems sun previous quad-processor machine sparcstation 20 support ultra 80 ended october 2007 addition official support knowledgeable people often sun employees regular visitors comp.unix.solaris comp.sys.sun.hardware comp.sys.sun.admin usenet newsgroups sun ultra 80 workstation facts guide gives following data well known specint 95 specfp 95 benchmarks although search web site standard performance evaluation corporation spec show figures spec ceased use benchmark ultra 80 released last results submitted web site 3rd quarter 1998 little year ultra 80 released november 1999 number results less-commonly-used specfp_rate95 specfp_rate_base95 benchmarks found spec web site given
node13:Wikipedia entry. Entry name: SQLite. Entry content: sqlite sqlite relational database management system rdbms contained c library contrast many database management systems sqlite client–server database engine rather embedded end program sqlite acid-compliant implements sql standard generally following postgresql syntax however sqlite uses dynamically weakly typed sql syntax guarantee domain integrity means one example insert string column defined integer sqlite attempt convert data formats appropriate string 123 integer case guarantee conversions store data as-is conversion possible sqlite popular choice embedded database software local/client storage application software web browsers arguably widely deployed database engine used today several widespread browsers operating systems embedded systems mobile phones among others sqlite bindings many programming languages unlike client–server database management systems sqlite engine standalone processes application program communicates instead sqlite library linked thus becomes integral part application program linking may static dynamic application program uses sqlite functionality simple function calls reduce latency database access function calls within single process efficient inter-process communication sqlite stores entire database definitions tables indices data single cross-platform file host machine implements simple design locking entire database file writing sqlite read operations multitasked though writes performed sequentially due server-less design sqlite applications require less configuration client-server databases sqlite called zero-conf require service management startup scripts access control based grant passwords access control handled means file system permissions given database file databases client-server systems use file system permissions give access database files daemon process another implication serverless design several processes may able write database file server-based databases several writers connect daemon able handle locks internally sqlite hand rely file-system locks less knowledge processes accessing database time therefore sqlite preferred choice write-intensive deployments however simple queries little concurrency sqlite performance profits avoiding overhead passing data another process sqlite uses postgresql reference platform would postgresql used make sense sql standard one major deviation exception primary keys sqlite enforce type checking type value dynamic strictly constrained schema although schema trigger conversion storing conversion potentially reversible sqlite strives follow postel rule d. richard hipp designed sqlite spring 2000 working general dynamics contract united states navy hipp designing software used damage-control system aboard guided missile destroyers originally used hp-ux ibm informix database back-end sqlite began tcl extension design goals sqlite allow program operated without installing database management system requiring database administrator hipp based syntax semantics postgresql 6.5 august 2000 version 1.0 sqlite released storage based gdbm gnu database manager sqlite 2.0 replaced gdbm custom b-tree implementation adding transaction capability sqlite 3.0 partially funded america online added internationalization manifest typing major improvements 2011 hipp announced plans add nosql interface managing documents expressed json sqlite databases develop unqlite embeddable document-oriented database sqlite implements sql-92 standard sql lacks features example partially provides triggers write views however provides instead triggers provide functionality provides complex queries still limited alter table function modify delete columns sqlite uses unusual type system sql-compatible dbms instead assigning type column sql database systems types assigned individual values language terms dynamically typed moreover weakly typed ways perl one insert string integer column although sqlite try convert string integer first column preferred type integer adds flexibility columns especially bound dynamically typed scripting language however technique portable sql products common criticism sqlite type system lacks data integrity mechanism provided statically typed columns products sqlite web site describes strict affinity mode feature yet added however implemented constraints like codice_1 tables normally include hidden rowid index column gives faster access database includes integer primary key column sqlite typically optimize treating alias rowid causing contents stored strictly typed 64-bit signed integer changing behavior somewhat like auto-incrementing column future versions sqlite may include command introspect whether column behavior like rowid differentiate columns weakly-typed non-autoincrementing integer primary keys sqlite full unicode function optional several computer processes threads may access database concurrently several read accesses satisfied parallel write access satisfied accesses currently serviced otherwise write access fails error code automatically retried configurable timeout expires concurrent access situation would change dealing temporary tables restriction relaxed version 3.7 write-ahead logging wal turned enabling concurrent reads writes sqlite version 3.7.4 first saw addition fts4 full text search module features enhancements older fts3 module fts4 allows users perform full text searches documents similar search engines search webpages version 3.8.2 added support creating tables without rowid may provide space performance improvements common table expressions support added sqlite version 3.8.3 2015 json1 extension new subtype interfaces sqlite version 3.9 introduced json content managing sqlite code hosted fossil distributed version control system built upon sqlite database standalone command-line program provided sqlite distribution used create database define tables insert change rows run queries manage sqlite database file also serves example writing applications use sqlite library sqlite uses automated regression testing prior release 2 million tests run part release verification starting august 10 2009 release sqlite 3.6.17 sqlite releases 100 branch test coverage one components code coverage tests test harnesses partially public domain partially proprietary sqlite included default large number programming languages provide bindings sqlite including
node14:Wikipedia entry. Entry name: Attribute-based_access_control. Entry content: attribute-based access control attribute-based access control abac also known policy-based access control defines access control paradigm whereby access rights granted users use policies combine attributes together policies use type attributes user attributes resource attributes object environment attributes etc. model supports boolean logic rules contain statements making request resource action example requestor manager allow read/write access sensitive data unlike role-based access control rbac employs pre-defined roles carry specific set privileges associated subjects assigned key difference abac concept policies express complex boolean rule set evaluate many different attributes attribute values set-valued atomic-valued set-valued attributes contain one atomic value examples role project atomic-valued attributes contain one atomic value examples clearance sensitivity attributes compared static values one another thus enabling relation-based access control although concept existed many years abac considered next generation authorization model provides dynamic context-aware risk-intelligent access control resources allowing access control policies include specific attributes many different information systems defined resolve authorization achieve efficient regulatory compliance allowing enterprises flexibility implementations based existing infrastructures attribute-based access control sometimes referred policy-based access control pbac claims-based access control cbac microsoft-specific term key standards implement abac xacml alfa xacml abac seen abac comes recommended architecture follows attributes anything anyone tend fall 4 different categories functions grammatical function policies statements bring together attributes express happen allowed policies abac granting denying policies policies also local global written way override policies examples include abac many policies like cater many different scenarios technologies historically access control models included mandatory access control mac discretionary access control dac recently role-based access control rbac access control models user-centric take account additional parameters resource information relationship user requesting entity resource dynamic information e.g time day user ip abac tries address defining access control based attributes describe requesting entity user targeted object resource desired action view edit delete ... environmental contextual information access control said attribute-based one standard implements attribute- policy-based access control xacml extensible access control markup language xacml defines architecture policy language request response scheme handle attribute management user attribute assignment object attribute assignment environment attribute assignment left traditional iam tools databases directories companies including every branch united states military started using abac basic level abac uses ‘ if/then/and ’ model protect data rather assigning data user take information anywhere please give hacker ability swipe file us department commerce made mandatory practice adoption spreading throughout several governmental military agencies concept abac applied level technology stack enterprise infrastructure example abac used firewall server application database data layer use attributes bring additional context evaluate legitimacy request access inform decision grant deny access important consideration evaluating abac solutions understand potential overhead performance impact user experience expected granular controls higher overhead abac used apply attribute-based fine-grained authorization api methods functions instance banking api may expose approvetransaction transid method abac used secure call abac policy author write following flow would follows one key benefits abac authorization policies attributes defined technology neutral way means policies defined apis databases reused application space common applications benefit abac process flow one described api section applies security databases long specific database vendors oracle vpd ibm fgac microsoft rls means achieve fine-grained abac-like security using abac possible define policies apply across multiple databases called dynamic data masking example would data security typically goes one step database security applies control directly data element often referred data-centric security traditional relational databases abac policies control access data table column field cell sub-cell using logical controls filtering conditions masking based attributes attributes data user session tools based deliver greatest level flexibility dynamically granting/denying access specific data element big data distributed file systems hadoop abac applied data layer control access folder sub-folder file sub-file granular attribute-based access control also applied big data systems like hadoop policies similar used previously applied retrieving data data lakes windows server 2012 microsoft implemented abac approach controlling access files folders achieved dynamic access control lists dacl security descriptor definition language sddl sddl seen abac language uses metadata user claims file folder control access gartner improving-runtime-authorization-maturity
node15:Wikipedia entry. Entry name: SQLBits. Entry content: sqlbits sqlbits largest community-led sql server microsoft data platform conference europe founded 2007 group individuals passionate microsoft sql server azure product suite volunteers include committee members speakers helpers industry sponsors come together provide microsoft sql server education sqlbits held year sessions recorded hosted sqlbits website freely available everyone download one key principles sqlbits community led conference located one specific area uk instead conference reaches sql server community moving event around uk 16 sqlbits conferences date key dates locations listed
node16:Wikipedia entry. Entry name: F2FS. Entry content: f2fs f2fs flash-friendly file system flash file system initially developed samsung electronics linux kernel motive f2fs build file system start takes account characteristics nand flash memory-based storage devices solid-state disks emmc sd cards widely used computer systems ranging mobile devices servers f2fs designed basis log-structured file system approach adapted newer forms storage jaegeuk kim principal f2fs author stated remedies known issues older log-structured file systems snowball effect wandering trees high cleaning overhead addition since nand-based storage device shows different characteristics according internal geometry flash memory management scheme flash translation layer ftl supports various parameters configuring on-disk layout also selecting allocation cleaning algorithms f2fs divides whole volume number segments fixed 2 mb section composed consecutive segments zone consists set sections default section zone sizes set size users easily modify size codice_1 f2fs splits entire volume six areas except superblock area consist multiple segments described order avoid misalignment file system flash storage f2fs aligns start block address cp segment size also aligns main area start block address zone size reserving segments ssa area f2fs uses checkpoint scheme maintain file system integrity mount time f2fs first tries find last valid checkpoint data scanning cp area order reduce scanning time f2fs uses two copies cp one always indicates last valid data called shadow copy mechanism addition cp nat sit also use shadow copy mechanism file system consistency cp points nat sit copies valid key data structure node similar traditional file structures f2fs three types nodes inode direct node indirect node f2fs assigns 4 kb inode block contains 923 data block indices two direct node pointers two indirect node pointers one double indirect node pointer described direct node block contains 1018 data block indices indirect node block contains 1018 node block indices thus one inode block i.e. file covers note node blocks mapped nat means location node translated nat mitigate wandering tree problem f2fs able cut propagation node updates caused leaf data writes directory entry dentry occupies 11 bytes consists following attributes dentry block consists 214 dentry slots file names bitmap used represent whether dentry valid dentry block occupies 4 kb following composition f2fs implements multi-level hash tables directory structure level hash table dedicated number hash buckets shown note 2b means bucket includes 2 data blocks f2fs finds file name directory first hash value file name calculated f2fs scans hash table level 0 find dentry consisting file name inode number found f2fs scans next hash table level 1 way f2fs scans hash tables level incrementally 1 n level f2fs needs scan one bucket determined following equation shows log files complexity case file creation f2fs finds empty consecutive slots cover file name f2fs searches empty slots hash tables whole levels 1 n way lookup operation runtime f2fs manages six active logs inside main area hot/warm/cold node hot/warm/cold data lfs two schemes free space management threaded log copy-and-compaction copy-and-compaction scheme known cleaning well-suited devices showing good sequential write performance since free segments served time writing new data however suffers cleaning overhead high utilization conversely threaded log scheme suffers random writes cleaning process needed f2fs adopts hybrid scheme copy-and-compaction scheme adopted default policy dynamically changed threaded log scheme according file system status order align f2fs underlying flash-based storage f2fs allocates segment unit section f2fs expects section size garbage collection unit size ftl respect mapping granularity ftl f2fs allocates section active logs many different zones possible ftl write active log data one allocation unit according mapping granularity f2fs cleaning demand background on-demand cleaning triggered enough free segments serve vfs calls background cleaner executed kernel thread triggers cleaning job system idle f2fs supports two victim selection policies greedy cost-benefit algorithms greedy algorithm f2fs selects victim segment smallest number valid blocks cost-benefit algorithm f2fs selects victim segment according segment age number valid blocks order address log block thrashing problem present greedy algorithm f2fs uses greedy algorithm on-demand cleaning background cleaner uses cost-benefit algorithm order identify whether data victim segment valid f2fs manages bitmap bit represents validity block bitmap composed bit stream covering whole blocks main area motorola mobility used f2fs moto g/e/x droid phones since 2012 google first used f2fs nexus 9 2014 however google products n't adopt f2fs pixel 3 f2fs updated inline crypto hardware support huawei used f2fs since huawei p9 2016 oneplus used f2fs since oneplus 3t 2016 zte used f2fs since zte axon 10 pro 2019
node17:Wikipedia entry. Entry name: MySQL. Entry content: mysql mysql s-q-l open-source relational database management system rdbms name combination name co-founder michael widenius daughter sql abbreviation structured query language mysql free open-source software terms gnu general public license also available variety proprietary licenses mysql owned sponsored swedish company mysql ab bought sun microsystems oracle corporation 2010 oracle acquired sun widenius forked open-source mysql project create mariadb mysql component lamp web application software stack others acronym linux apache mysql perl/php/python mysql used many database-driven web applications including drupal joomla phpbb wordpress mysql also used many popular websites including facebook flickr mediawiki twitter youtube mysql written c c++ sql parser written yacc uses home-brewed lexical analyzer mysql works many system platforms including aix bsdi freebsd hp-ux ecomstation i5/os irix linux macos microsoft windows netbsd novell netware openbsd opensolaris os/2 warp qnx oracle solaris symbian sunos sco openserver sco unixware sanos tru64 port mysql openvms also exists mysql server software client libraries use dual-licensing distribution offered gpl version 2 proprietary license support obtained official manual free support additionally available different irc channels forums oracle offers paid support via mysql enterprise products differ scope services price additionally number third party organisations exist provide support services including mariadb percona mysql received positive reviews reviewers noticed performs extremely well average case developer interfaces documentation mention feedback real world via web sites like good also tested fast stable true multi-user multi-threaded sql database server mysql created swedish company mysql ab founded david axmark allan larsson michael monty widenius original development mysql widenius axmark began 1994 first version mysql appeared 23 may 1995 initially created personal usage msql based low-level language isam creators considered slow inflexible created new sql interface keeping api msql keeping api consistent msql system many developers able use mysql instead proprietarily licensed msql antecedent additional milestones mysql development included work version 6 stopped sun microsystems acquisition mysql cluster product uses version 7 decision made jump version 8 next major version number 15 june 2001 nusphere sued mysql ab tcx datakonsult ab original authors michael monty widenius david axmark u.s district court boston breach contract tortious interference third party contracts relationships unfair competition 2002 mysql ab sued progress nusphere copyright trademark infringement united states district court nusphere allegedly violated mysql ab copyright linking mysql gpl'ed code nusphere gemini table without compliance license preliminary hearing judge patti saris 27 february 2002 parties entered settlement talks eventually settled hearing fsf commented judge saris made clear sees gnu gpl enforceable binding license october 2005 oracle corporation acquired innobase oy finnish company developed third-party innodb storage engine allows mysql provide functionality transactions foreign keys acquisition oracle press release mentioned contracts make company software available mysql ab would due renewal presumably renegotiation time 2006 mysql users conference april 2006 mysql ab issued press release confirmed mysql ab innobase oy agreed multi-year extension licensing agreement february 2006 oracle corporation acquired sleepycat software makers berkeley db database engine providing basis another mysql storage engine little effect berkeley db widely used dropped due lack use mysql 5.1.12 pre-ga release mysql 5.1 released october 2006 january 2008 sun microsystems bought mysql ab 1 billion april 2009 oracle corporation entered agreement purchase sun microsystems owners mysql copyright trademark sun board directors unanimously approved deal also approved sun shareholders u.s. government 20 august 2009 14 december 2009 oracle pledged continue enhance mysql done previous four years movement oracle acquisition mysql ab save mysql oracle started one mysql ab founders monty widenius petition 50,000+ developers users called upon european commission block approval acquisition time free software opinion leaders including pamela jones groklaw jan wildeboer carlo piana also acted co-counsel merger regulation procedure advocated unconditional approval merger part negotiations european commission oracle committed mysql server continue least 2015 use dual-licensing strategy long used mysql ab proprietary gpl versions available antitrust eu pressuring divest mysql condition approval merger revealed wikileaks us department justice request oracle pressured eu approve merger unconditionally european commission eventually unconditionally approved oracle acquisition mysql ab 21 january 2010 january 2010 oracle acquisition mysql ab monty widenius started gpl-only fork mariadb mariadb based code base mysql server 5.5 aims maintain compatibility oracle-provided versions mysql offered two different editions open source mysql community server proprietary enterprise server mysql enterprise server differentiated series proprietary extensions install server plugins otherwise shares version numbering system built code base major features available mysql 5.6 developers release minor updates mysql server approximately every two months sources obtained mysql website mysql github repository gpl license using storage engines default innodb mysql comply full sql standard implemented functionality including foreign key references check constraints parsed ignored storage engines mysql version 8.0.15 mysql 5.7 triggers limited one per action timing meaning one trigger defined executed insert operation one insert table triggers defined views mysql database inbuilt functions like unix_timestamp return 0 03:14:07 utc 19 january 2038 recently attempt solve problem assigned internal queue mysql built installed manually source code commonly installed binary package unless special customizations required linux distributions package management system download install mysql minimal effort though configuration often required adjust security optimization settings though mysql began low-end alternative powerful proprietary databases gradually evolved support higher-scale needs well still commonly used small medium scale single-server deployments either component lamp-based web application standalone database server much mysql appeal originates relative simplicity ease use enabled ecosystem open source tools phpmyadmin medium range mysql scaled deploying powerful hardware multi-processor server gigabytes memory however limits far performance scale single server 'scaling larger scales multi-server mysql 'scaling deployments required provide improved performance reliability typical high-end configuration include powerful master database handles data write operations replicated multiple slaves handle read operations master server continually pushes binlog events connected slaves event failure slave promoted become new master minimizing downtime improvements performance achieved caching results database queries memory using memcached breaking database smaller chunks called shards spread across number distributed server clusters logical backup tool included community enterprise editions mysql supports backing storage engines mysql enterprise backup hot backup utility included part mysql enterprise subscription oracle offering native innodb hot backup well backup storage engines oracle mysql offers high availability solution mix tools including mysql router mysql shell based group replication open source tools mariadb offers similar offer terms products mysql also run cloud computing platforms microsoft azure amazon ec2 oracle cloud infrastructure common deployment models mysql cloud graphical user interface gui type interface allows users interact electronic devices programs graphical icons visual indicators secondary notation opposed text-based interfaces typed command labels text navigation guis easier learn command-line interfaces clis require commands typed keyboard third-party proprietary free graphical administration applications front ends available integrate mysql enable users work database structure data visually well-known front ends command-line interface means interacting computer program user issues commands program typing successive lines text command lines mysql ships many command line tools main interface client mysql utilities set utilities designed perform common maintenance administrative tasks originally included part mysql workbench utilities stand-alone download available oracle percona toolkit cross-platform toolkit mysql developed perl percona toolkit used prove replication working correctly fix corrupted data automate repetitive tasks speed servers percona toolkit included several linux distributions centos debian packages available fedora ubuntu well percona toolkit originally developed maatkit late 2011 maatkit longer developed mysql shell tool interactive use administration mysql database supports javascript python sql modes used administration access purposes many programming languages language-specific apis include libraries accessing mysql databases include mysql connector/net integration microsoft visual studio languages c vb commonly used jdbc driver java addition odbc interface called mysql connector/odbc allows additional programming languages support odbc interface communicate mysql database asp coldfusion htsql url-based query method also ships mysql adapter allowing direct interaction mysql database web client via structured urls drivers exists languages like python node.js variety mysql forks exist including following
node18:Wikipedia entry. Entry name: Amazon_DocumentDB. Entry content: amazon documentdb amazon documentdb fully managed proprietary nosql database service supports document data structures mongodb workloads amazon documentdb currently available california oregon north virginia ireland regions aws
node19:Wikipedia entry. Entry name: PowerHouse_(programming_language). Entry content: powerhouse programming language powerhouse trademarked name byte-compiled fourth-generation programming language 4gl originally produced quasar corporation later renamed cognos incorporated hewlett-packard hp3000 mini-computer initially composed five components powerhouse introduced 1982 bundled together single product quiz quick/qdesign previously available separately new batch processor qtp 1983 quasar changed name cognos corporation began porting application development tools platforms notably digital equipment corporation vax data general eclipse mv ibm as/400 along unix platforms vendors cognos also began extending product line add-ons powerhouse example architect end-user applications written powerhouse example multiview subsequent development product added support platform-specific relational databases hp allbase/sql dec rdb microsoft sql server well cross-platform relational databases oracle sybase ibm db2 powerhouse language represented considerable achievement compared languages like cobol pascal pl/1 powerhouse substantially cut amount labour required produce useful applications chosen platforms achieved use central data-dictionary compiled file extended attributes data fields natively available dbms frequently used programming idioms order support data dictionary powerhouse tightly coupled underlying database management system and/or file system target platforms case hp3000 image shallow-network dbms ksam indexed file system entire powerhouse language reflected origins described data dictionary need describe attributes applications unless need change fly example change size item make fit within constraints defined item simple quick screens could generated four lines source code screenname name screen programmer assigned program filename file name accessed data dictionary whether items file would fit screen would determined many items size n't fit program would modified eliminate unneeded items change size items size etc file couple items quick easy generate screen data entry deletion simply look data index simple quiz reports almost easy one-file report simple items file would sent screen maybe desired fashion simple since qtp programs usually involved adding deleting modifying data much need simple code programs care exercised potential danger whole file files data could wiped rather easily quick quiz qtp programs could run compiled converted machine language uncompiled source code compiled programs generally ran faster good method modifications source code corrupt object code quick screens used primarily data entry could call quick screens quiz reports qtp applications update data also things done source code order generate compiled code example go command run source code equivalent build command generate compiled code commands could abbreviated first three characters writing source code access could abbreviated acc well define report screen etc quiz reports could routed printer screen ascii text files set report device printer screen disk command given right access commands novice could write simple report programs dangerous though novice could easily destroy data security whether one call interpreters access quiz also access qtp quick like virtual machine languages powerhouse cpu intensive sometimes produced visibly negative impact overall transaction performance necessitating hardware upgrades cognos practice tying license fees hardware performance metrics resulted high licensing costs powerhouse users cognos initially attempted move intel platform 1988 dos-based powerhouse pc product used numerous partners build bespoke applications small medium-sized customers entirely unsuccessful time however cognos eventually produced axiant c.1995 ported powerhouse-like syntax intel-based microsoft windows visual development environment linked sql aware dbms running machines radical changes wrought pc revolution began time powerhouse introduced eventually brought cost host computers extent high-priced software development tools powerhouse became unattractive customers around 1999 powerhouse web released order support development web-aware applications products like business intelligence financial performance management run commodity architectures high-end unix servers form core cognos product line cognos acquired ibm january 30 2008 powerhouse application development tools including powerhouse server axiant 4gl powerhouse web acquired ibm unicom systems division unicom global december 31 2013 unicom continues support worldwide customer base products
node20:Wikipedia entry. Entry name: PostgreSQL. Entry content: postgresql postgresql also known postgres free open-source relational database management system rdbms emphasizing extensibility technical standards compliance designed handle range workloads single machines data warehouses web services many concurrent users default database macos server also available linux freebsd openbsd windows postgresql features transactions atomicity consistency isolation durability acid properties automatically updatable views materialized views triggers foreign keys stored procedures postgresql developed postgresql global development group diverse group many companies individual contributors postgresql developers pronounce postgresql abbreviated postgres ubiquitous support sql standard among relational databases originally named postgres name post ingres refers project origins rdbms originated university california berkeley review postgresql core team announced 2007 product would continue use name postgresql postgresql evolved ingres project university california berkeley 1982 leader ingres team michael stonebraker left berkeley make proprietary version ingres returned berkeley 1985 began post-ingres project address problems contemporary database systems become increasingly clear early 1980s turing award 2014 projects techniques pioneered new project postgres aimed add fewest features needed completely support data types features included ability define types fully describe relationships – something used widely maintained entirely user postgres database understood relationships could retrieve information related tables natural way using rules postgres used many ideas ingres code starting 1986 published papers described basis system prototype version shown 1988 acm sigmod conference team released version 1 small number users june 1989 followed version 2 re-written rules system june 1990 version 3 released 1991 re-wrote rules system added support multiple storage managers improved query engine 1993 number users began overwhelm project requests support features releasing version 4.2 june 30 1994 – primarily cleanup – project ended berkeley released postgres mit license variant enabled developers use code use time postgres used ingres-influenced postquel query language interpreter could interactively used console application named monitor 1994 berkeley graduate students andrew yu jolly chen replaced postquel query language interpreter one sql query language creating postgres95 monitor also replaced psql yu chen announced first version 0.01 beta testers may 5 1995 version 1.0 postgres95 announced september 5 1995 liberal license enabled software freely modifiable july 8 1996 marc fournier hub.org networking services provided first non-university development server open-source development effort participation bruce momjian vadim b. mikheev work began stabilize code inherited berkeley 1996 project renamed postgresql reflect support sql online presence website postgresql.org began october 22 1996 first postgresql release formed version 6.0 january 29 1997 since developers volunteers around world maintained software postgresql global development group project continues make releases available free open-source software postgresql license code comes contributions proprietary vendors support companies open-source programmers postgresql manages concurrency multiversion concurrency control mvcc gives transaction snapshot database allowing changes made without affecting transactions largely eliminates need read locks ensures database maintains acid principles postgresql offers three levels transaction isolation read committed repeatable read serializable postgresql immune dirty reads requesting read uncommitted transaction isolation level provides read committed instead postgresql supports full serializability via serializable snapshot isolation ssi method postgresql includes built-in binary replication based shipping changes write-ahead logs wal replica nodes asynchronously ability run read-only queries replicated nodes allows splitting read traffic among multiple nodes efficiently earlier replication software allowed similar read scaling normally relied adding replication triggers master increasing load postgresql includes built-in synchronous replication ensures write transaction master waits least one replica node written data transaction log unlike database systems durability transaction whether asynchronous synchronous specified per-database per-user per-session even per-transaction useful workloads require guarantees may wanted data slow performance due requirement confirmation transaction reaching synchronous standby standby servers synchronous asynchronous synchronous standby servers specified configuration determines servers candidates synchronous replication first list actively streaming used current synchronous server fails system fails next line synchronous multi-master replication included postgresql core postgres-xc based postgresql provides scalable synchronous multi-master replication licensed license postgresql related project called postgres-xl postgres-r yet another fork bidirectional replication bdr asynchronous multi-master replication system postgresql tools repmgr make managing replication clusters easier several asynchronous trigger-based replication packages available remain useful even introduction expanded core abilities situations binary replication full database cluster inappropriate postgresql includes built-in support regular b-tree hash table indexes four index access methods generalized search trees gist generalized inverted indexes gin space-partitioned gist sp-gist block range indexes brin addition user-defined index methods created although quite involved process indexes postgresql also support following features postgresql schema holds objects except roles tablespaces schemas effectively act like namespaces allowing objects name co-exist database default newly created databases schema called public schemas added public schema n't mandatory setting determines order postgresql checks schemas unqualified objects without prefixed schema default set refers currently connected database user default set database role level session parameter freely changed even multiple times client session affecting session non-existent schemas listed search_path silently skipped objects lookup new objects created whichever valid schema one presently exists appears first search_path.schema outline database wide variety native data types supported including addition users create data types usually made fully indexable via postgresql indexing infrastructures – gist gin sp-gist examples include geographic information system gis data types postgis project postgresql also data type called domain data type optional constraints defined creator domain means data entered column using domain conform whichever constraints defined part domain data type represents range data used called range types discrete ranges e.g integer values 1 10 continuous ranges e.g. time 10:00 11:00 built-in range types available include ranges integers big integers decimal numbers time stamps without time zone dates custom range types created make new types ranges available ip address ranges using inet type base float ranges using float data type base range types support inclusive exclusive range boundaries using characters respectively e.g. represents integers starting including 4 including 9 range types also compatible existing operators used check overlap containment right etc new types almost objects inside database created including tables set inherit characteristics parent table data child tables appear exist parent tables unless data selected parent table using keyword i.e adding column parent table cause column appear child table inheritance used implement table partitioning using either triggers rules direct inserts parent table proper child tables feature fully supported yet – particular table constraints currently inheritable check constraints not-null constraints parent table automatically inherited children types constraints unique primary key foreign key constraints inherited inheritance provides way map features generalization hierarchies depicted entity relationship diagrams erds directly postgresql database postgresql link systems retrieve data via foreign data wrappers fdws take form data source file system another relational database management system rdbms web service means regular database queries use data sources like regular tables even join multiple data-sources together postgresql several interfaces available also widely supported among programming language libraries built-in interfaces include libpq postgresql official c application interface ecpg embedded c system external interfaces include procedural languages allow developers extend database custom subroutines functions often called stored procedures functions used build database triggers functions invoked modification certain data custom data types aggregate functions procedural languages also invoked without defining function using command sql level languages divided two groups procedures written safe languages sandboxed safely created used user procedures written unsafe languages created superusers allow bypassing database security restrictions also access sources external database languages like perl provide safe unsafe versions postgresql built-in support three procedural languages addition postgresql allows procedural languages loaded database extensions three language extensions included postgresql support perl python tcl external projects add support many languages including java javascript pl/v8 r ruby others triggers events triggered action sql data manipulation language dml statements example insert statement might activate trigger checks values statement valid triggers activated either insert update statements triggers fully supported attached tables triggers per-column conditional update triggers target specific columns table triggers told execute set conditions specified trigger clause triggers attached views using instead condition multiple triggers fired alphabetical order addition calling functions written native pl/pgsql triggers also invoke functions written languages like pl/python pl/perl postgresql provides asynchronous messaging system accessed notify listen unlisten commands session issue notify command along user-specified channel optional payload mark particular event occurring sessions able detect events issuing listen command listen particular channel functionality used wide variety purposes letting sessions know table updated separate applications detect particular action performed system prevents need continuous polling applications see anything yet changed reducing unnecessary overhead notifications fully transactional messages sent transaction sent committed eliminates problem messages sent action performed rolled back many connectors postgresql provide support notification system including libpq jdbc npgsql psycopg node.js used external applications rules allow query tree incoming query rewritten query re-write rules attached table/class re-write incoming dml select insert update and/or delete one queries either replace original dml statement execute addition query re-write occurs dml statement parsing query planning postgresql server process-based threaded uses one operating system process per database session multiple sessions automatically spread across available cpus operating system starting postgresql 9.6 many types queries also parallelized across multiple background worker processes taking advantage multiple cpus cores client applications use threads create multiple database connections thread postgresql manages internal security per-role basis role generally regarded user role log group role roles members permissions granted revoked object column level also allow/prevent creation new objects database schema table levels postgresql security label feature extension sql standards allows additional security bundled loadable module supports label-based mandatory access control mac based security-enhanced linux selinux security policy postgresql natively supports broad number external authentication mechanisms including gssapi sspi kerberos peer ident certificate methods also use specified map file lists users matched authentication system allowed connect specific database user methods specified cluster host-based authentication configuration file pg_hba.conf determines connections allowed allows control user connect database connect ip address ip address range domain socket authentication system enforced whether connection must use transport layer security tls postgresql claims high complete conformance sql standard one exception handling unquoted identifiers like table column names postgresql folded – internal – lower case characters whereas standard says unquoted identifiers folded upper case thus equivalent according standard many informal performance studies postgresql done performance improvements aimed improving scalability began heavily version 8.1 simple benchmarks version 8.0 version 8.4 showed latter 10 times faster read-only workloads least 7.5 times faster read write workloads first industry-standard peer-validated benchmark completed june 2007 using sun java system application server proprietary version glassfish 9.0 platform edition ultrasparc t1-based sun fire server postgresql 8.2 result 778.14 specjappserver2004 jops standard compares favourably 874 jops standard oracle 10 itanium-based hp-ux system august 2007 sun submitted improved benchmark score 813.73 specjappserver2004 jops standard system test reduced price price/performance improved 84.98/jops 70.57/jops default configuration postgresql uses small amount dedicated memory performance-critical purposes caching database blocks sorting limitation primarily older operating systems required kernel changes allow allocating large blocks shared memory postgresql.org provides advice basic recommended performance practice wiki april 2012 robert haas enterprisedb demonstrated postgresql 9.2 linear cpu scalability using server 64 cores matloob khushi performed benchmarking postgresql 9.0 mysql 5.6.15 ability process genomic data performance analysis found postgresql extracts overlapping genomic regions eight times faster mysql using two datasets 80,000 forming random human dna regions insertion data uploads postgresql also better although general searching ability databases almost equivalent postgresql available following operating systems linux recent distributions windows windows 2000 sp4 later compilable e.g visual studio recent 2017 version freebsd openbsd netbsd macos os x aix hp-ux solaris unixware officially tested dragonfly bsd bsd/os irix openindiana opensolaris openserver tru64 unix unix-like systems could also work modern support postgresql works following instruction set architectures x86 x86-64 windows operating systems supported windows ia-64 itanium external support hp-ux powerpc powerpc 64 s/390 s/390x sparc sparc 64 armv8-a 64-bit older arm 32-bit including older armv6 raspberry pi mips mipsel pa-risc also known work alpha dropped 9.5 m68k m32r ns32k vax beyond possible build postgresql unsupported cpu disabling spinlocks open source front-ends tools administering postgresql include number companies offer proprietary tools postgresql often consist universal core adapted various specific database products tools mostly share administration features open source tools offer improvements data modeling importing exporting reporting notable organizations products use postgresql primary database include notable vendors offer postgresql software service
node21:Wikipedia entry. Entry name: Row_(database). Entry content: row database context relational database row—also called tuple—represents single implicitly structured data item table simple terms database table thought consisting rows columns row table represents set related data every row table structure example table represents companies row would represent single company columns might represent things like company name company street address whether company publicly held vat number etc.. table represents association employees departments row would associate one employee one department implicit structure row meaning data values row requires row understood providing succession data values one column table row interpreted relvar composed set tuples tuple consisting two items name relevant column value row provides column column expects data value particular type example one column might require unique identifier another might require text representing person name another might require integer representing hourly pay cents
node22:Wikipedia entry. Entry name: Split-brain_(computing). Entry content: split-brain computing split-brain computer term based analogy medical split-brain syndrome indicates data availability inconsistencies originating maintenance two separate data sets overlap scope either servers network design failure condition based servers communicating synchronizing data last case also commonly referred network partition although term split-brain typically refers error state split-brain dns split-horizon dns sometimes used describe deliberate situation internal external dns services corporate network communicating separate dns name spaces administered external computers internal ones requires double administration domain overlap computer names risk fully qualified domain name fqdn may ambiguously occur name spaces referring different computer ip addresses high-availability clusters usually use heartbeat private network connection used monitor health status node cluster example split-brain syndrome may occur private links go simultaneously cluster nodes still running one believing one running data sets cluster may randomly serve clients idiosyncratic data set updates without coordination data sets may lead data corruption data inconsistencies might require operator intervention cleanup davidson et al. surveying several approaches handle problem classify either optimistic pessimistic optimistic approaches simply let partitioned nodes work usual provides greater level availability cost sacrificing correctness problem ended automatic manual reconciliation might required order cluster consistent state one current implementation approach hazelcast automatic reconciliation key-value store pessimistic approaches sacrifice availability exchange consistency network partitioning detected access sub-partitions limited order guarantee consistency typical approach described coulouris et al. use quorum-consensus approach allows sub-partition majority votes remain available remaining sub-partitions fall auto-fencing mode one current implementation approach one used mongodb replica sets another implementation galera replication mariadb mysql modern commercial general-purpose ha clusters typically use combination heartbeat network connections cluster hosts quorum witness storage challenge two-node clusters adding witness device adds cost complexity even implemented cloud without heartbeat fails cluster members determine active clusters without quorum member fails even members normally assign primary secondary statuses hosts least 50 probability 2-node ha cluster totally fail human intervention provided prevent multiple members becoming active independently either directly conflicting corrupting data
node23:Wikipedia entry. Entry name: Comparison_of_relational_database_management_systems. Entry content: comparison relational database management systems following tables compare general technical information number relational database management systems please see individual products articles information unless otherwise specified footnotes comparisons based stable versions without add-ons extensions external programs style= width:16em maintainer first public release date latest stable version latest release date license public issues list style= text-align left 4d 4th dimension style= text-align left adabas style= text-align left adaptive server enterprise style= text-align left advantage database server ads style= text-align left altibase style= text-align left apache derby style= text-align left clustrixdb style= text-align left cubrid style= text-align left datacom style= text-align left db2 style= text-align left empress embedded database style= text-align left exasolution style= text-align left filemaker style= text-align left firebird style= text-align left gpudb style= text-align left hsqldb style= text-align left h2 style= text-align left informix dynamic server style= text-align left ingres style= text-align left interbase style= text-align left linter sql rdbms style= text-align left luciddb style= text-align left mariadb style= text-align left maxdb style= text-align left microsoft access jet style= text-align left microsoft visual foxpro style= text-align left microsoft sql server style= text-align left microsoft sql server compact embedded database style= text-align left mimer sql style= text-align left monetdb style= text-align left msql style= text-align left mysql style= text-align left memsql style= text-align left nexusdb style= text-align left hp nonstop sql style= text-align left nuodb style= text-align left omnis studio style= text-align left openbase sql style= text-align left openedge style= text-align left openlink virtuoso style= text-align left oracle db style= text-align left oracle rdb style= text-align left paradox style= text-align left percona server mysql style= text-align left pervasive psql style= text-align left polyhedra dbms style= text-align left postgresql style= text-align left style= text-align left raima database manager style= text-align left rdm server style= text-align left sap hana style= text-align left soliddb style= text-align left sql anywhere style= text-align left sqlbase style= text-align left sqlite style= text-align left sqream db style= text-align left superbase style= text-align left teradata style= text-align left tibero style= text-align left tidb
node24:Wikipedia entry. Entry name: Primary_key. Entry content: primary key relational model databases primary key specific choice minimal set attributes columns uniquely specify tuple row relation table informally primary key attributes identify record simple cases simply single attribute unique id formally primary key choice candidate key minimal superkey candidate key alternate key primary key may consist real-world observables case called natural key attribute created function key used identification outside database called surrogate key example database people given nationality time location birth could natural key.national identification number another example attribute may used natural key although mainly used today relational database context term primary key pre-dates relational model also used database models relational database terms primary key differ form function key n't primary practice various different motivations may determine choice one key primary another designation primary key may indicate preferred identifier data table primary key used foreign key references tables may indicate technical rather semantic feature table languages software special syntax features used identify primary key e.g primary key constraint sql relational model expressed relational calculus relational algebra distinguish primary keys kinds keys primary keys added sql standard mainly convenience application programmer primary keys defined iso sql standard primary key constraint syntax add constraint existing table defined like primary key also specified directly table creation sql standard primary keys may consist one multiple columns column participating primary key implicitly defined null note rdbms require explicitly marking primary key columns codice_1 primary key consists single column column marked using following syntax circumstances natural key uniquely identifies tuple relation may cumbersome use software development example may involve multiple columns large text fields cases surrogate key used instead primary key situations may one candidate key relation candidate key obviously preferred surrogate key may used primary key avoid giving one candidate key artificial primacy others since primary keys exist primarily convenience programmer surrogate primary keys often used many cases exclusively database application design due popularity surrogate primary keys many developers cases even theoreticians come regard surrogate primary keys inalienable part relational data model largely due migration principles object-oriented programming model relational model creating hybrid object-relational model orm like active record pattern additional restrictions placed primary keys however neither restrictions part relational model sql standard due diligence applied deciding immutability primary key values database application design database systems even imply values primary key columns changed using codice_2 sql statement typically one candidate key chosen primary key candidate keys become alternate keys may unique index assigned order prevent duplicates duplicate entry valid unique column alternate keys may used like primary key single-table select filtering clause typically used join multiple tables
node25:Wikipedia entry. Entry name: Database_engine_tuning_advisor. Entry content: database engine tuning advisor database engine tuning advisor deta computer software tool microsoft sql server enables database tuning improve performance query tuning indexes creating modifying deleting partition indexes configured enabled online offline tuning
node26:Wikipedia entry. Entry name: Table_(database). Entry content: table database table collection related data held table format within database consists columns rows relational databases flat file databases table set data elements values using model vertical columns identifiable name horizontal rows cell unit row column intersect table specified number columns number rows row identified one values appearing particular column subset specific choice columns uniquely identify rows called primary key table another term relation although difference table usually multiset bag rows relation set allow duplicates besides actual data rows tables generally associated metadata constraints table values within particular columns data table physically stored database views also function relational tables data calculated query time external tables informix oracle example also thought views terms relational model databases table considered convenient representation relation two strictly equivalent instance sql table potentially contain duplicate rows whereas true relation contain duplicate rows call tuples similarly representation table implies particular ordering rows columns whereas relation explicitly unordered however database system guarantee ordering rows unless codice_1 clause specified codice_2 statement queries table equally valid representation relation n -dimensional chart n number attributes table columns example relation two attributes three values represented table two columns three rows two-dimensional graph three points table graph representations equivalent ordering rows significant table duplicate rows non-relational systems hierarchical databases distant counterpart table structured file representing rows table row file column row structure implies row repeating information generally child data segments data stored sequence physical records unlike spreadsheet datatype column ordinarily defined schema describing table sql systems sqlite less strict column datatype definitions
node27:Wikipedia entry. Entry name: Microsoft_SQL_Server. Entry content: microsoft sql server microsoft sql server relational database management system developed microsoft database server software product primary function storing retrieving data requested software applications—which may run either computer another computer across network including internet microsoft markets least dozen different editions microsoft sql server aimed different audiences workloads ranging small single-machine applications large internet-facing applications many concurrent users history microsoft sql server begins first microsoft sql server product—sql server 1.0 16-bit server os/2 operating system 1989—and extends current day following versions supported microsoft sql server 2016 onward product supported x64 processors current version microsoft sql server 2017 released october 2 2017 rtm version 14.1709.3807.1 sql server 2019 released community technology preview slated release manufacturing second half 2019 microsoft makes sql server available multiple editions different feature sets targeting different users editions protocol layer implements external interface sql server operations invoked sql server communicated via microsoft-defined format called tabular data stream tds tds application layer protocol used transfer data database server client initially designed developed sybase inc. sybase sql server relational database engine 1984 later microsoft microsoft sql server tds packets encased physical transport dependent protocols including tcp/ip named pipes shared memory consequently access sql server available protocols addition sql server api also exposed web services data storage database collection tables typed columns sql server supports different data types including primitive types integer float decimal char including character strings varchar variable length character strings binary unstructured blobs data text textual data among others rounding floats integers uses either symmetric arithmetic rounding symmetric round fix depending arguments codice_1 gives 3 microsoft sql server also allows user-defined composite types udts defined used also makes server statistics available virtual tables views called dynamic management views dmvs addition tables database also contain objects including views stored procedures indexes constraints along transaction log sql server database contain maximum 2 objects span multiple os-level files maximum file size 2 bytes 1 exabyte data database stored primary data files extension codice_2 secondary data files identified codice_3 extension used allow data single database spread across one file optionally across one file system log files identified codice_4 extension storage space allocated database divided sequentially numbered pages 8 kb size page basic unit i/o sql server operations page marked 96-byte header stores metadata page including page number page type free space page id object owns page type defines data contained page data stored database index allocation map holds information pages allocated tables indexes change map holds information changes made pages since last backup logging contain large data types image text page basic unit i/o operation space actually managed terms extent consists 8 pages database object either span 8 pages extent uniform extent share extent 7 objects mixed extent row database table span one page limited 8 kb size however data exceeds 8 kb row contains varchar varbinary data data columns moved new page possibly sequence pages called allocation unit replaced pointer data physical storage table rows divided series partitions numbered 1 n partition size user defined default rows single partition table split multiple partitions order spread database computer cluster rows partition stored either b-tree heap structure table associated clustered index allow fast retrieval rows rows stored in-order according index values b-tree providing index data leaf node leaves nodes storing index values leaf data reachable respective nodes index non-clustered rows sorted according index keys indexed view storage structure indexed table table without clustered index stored unordered heap structure however table may non-clustered indices allow fast retrieval rows situations heap structure performance advantages clustered structure heaps b-trees span multiple allocation units sql server buffers pages ram minimize disk i/o 8 kb page buffered in-memory set pages currently buffered called buffer cache amount memory available sql server decides many pages cached memory buffer cache managed buffer manager either reading writing page copies buffer cache subsequent reads writes redirected in-memory copy rather on-disc version page updated disc buffer manager in-memory cache referenced time writing pages back disc asynchronous i/o used whereby i/o operation done background thread operations wait i/o operation complete page written along checksum written reading page back checksum computed matched stored version ensure page damaged tampered meantime sql server allows multiple clients use database concurrently needs control concurrent access shared data ensure data integrity—when multiple clients update data clients attempt read data process changed another client sql server provides two modes concurrency control pessimistic concurrency optimistic concurrency pessimistic concurrency control used sql server controls concurrent access using locks locks either shared exclusive exclusive lock grants user exclusive access data—no user access data long lock held shared locks used data read—multiple users read data locked shared lock acquire exclusive lock latter would wait shared locks released locks applied different levels granularity—on entire tables pages even per-row basis tables indexes either entire index index leaves level granularity used defined per-database basis database administrator fine-grained locking system allows users use table index simultaneously requires resources automatically yield higher performance sql server also includes two lightweight mutual exclusion solutions—latches spinlocks—which less robust locks less resource intensive sql server uses dmvs resources usually busy sql server also monitors worker threads acquire locks ensure end deadlocks—in case sql server takes remedial measures many cases kill one threads entangled deadlock roll back transaction started implement locking sql server contains lock manager lock manager maintains in-memory table manages database objects locks along metadata lock access shared object mediated lock manager either grants access resource blocks sql server also provides optimistic concurrency control mechanism similar multiversion concurrency control used databases mechanism allows new version row created whenever row updated opposed overwriting row i.e. row additionally identified id transaction created version row old well new versions row stored maintained though old versions moved database system database identified codice_5 row process updated requests blocked unlike locking executed older version row request update statement result two different versions rows—both stored database identified respective transaction ids main mode retrieving data sql server database querying query expressed using variant sql called t-sql dialect microsoft sql server shares sybase sql server due legacy query declaratively specifies retrieved processed query processor figures sequence steps necessary retrieve requested data sequence actions necessary execute query called query plan might multiple ways process query example query contains join statement select statement executing join tables executing select results would give result selecting table executing join result different execution plans case sql server chooses plan expected yield results shortest possible time called query optimization performed query processor sql server includes cost-based query optimizer tries optimize cost terms resources take execute query given query query optimizer looks database schema database statistics system load time decides sequence access tables referred query sequence execute operations access method used access tables example table associated index whether index used index column unique columns low selectivity might worthwhile use index access data finally decides whether execute query concurrently concurrent execution costly terms total processor time execution actually split different processors might mean execute faster query plan generated query temporarily cached invocations query cached plan used unused plans discarded time sql server also allows stored procedures defined stored procedures parameterized t-sql queries stored server issued client application case general queries stored procedures accept values sent client input parameters send back results output parameters call defined functions stored procedures including stored procedure set number times selectively provided access unlike queries stored procedures associated name used runtime resolve actual queries also code need sent client every time accessed name reduces network traffic somewhat improves performance execution plans stored procedures also cached necessary t-sql transact-sql microsoft proprietary procedural language extension sql server provides repl read-eval-print-loop instructions extend standard sql instruction set data manipulation dml data definition ddl instructions including sql server-specific settings security database statistics management exposes keywords operations performed sql server including creating altering database schemas entering editing data database well monitoring managing server client applications consume data manage server leverage sql server functionality sending t-sql queries statements processed server results errors returned client application exposes read-only tables server statistics read management functionality exposed via system-defined stored procedures invoked t-sql queries perform management operation also possible create linked servers using t-sql linked servers allow single query process operations performed multiple servers sql server native client native client side data access library microsoft sql server version 2005 onwards natively implements support sql server features including tabular data stream implementation support mirrored sql server databases full support data types supported sql server asynchronous operations query notifications encryption support well receiving multiple result sets single database session sql server native client used hood sql server plug-ins data access technologies including ado ole db sql server native client also directly used bypassing generic data access layers november 28 2011 preview release sql server odbc driver linux released microsoft sql server 2005 includes component named sql clr common language runtime via integrates .net framework unlike applications use .net framework sql server hosts .net framework runtime i.e. memory threading resource management requirements .net framework satisfied sqlos rather underlying windows operating system sqlos provides deadlock detection resolution services .net code well sql clr stored procedures triggers written managed .net language including c vb.net managed code also used define udt user defined types persist database managed code compiled cli assemblies verified type safety registered database invoked like procedure however subset base class library available running code sql clr apis relating user interface functionality available writing code sql clr data stored sql server databases accessed using ado.net apis like managed application accesses sql server data however creates new database session different one code executing avoid sql server provides enhancements ado.net provider allows connection redirected session already hosts running code connections called context connections set setting codice_6 parameter codice_7 connection string sql server also provides several enhancements ado.net api including classes work tabular data single row data well classes work internal metadata data stored database also provides access xml features sql server including xquery support enhancements also available t-sql procedures consequence introduction new xml datatype query value nodes functions sql server also includes assortment add-on services essential operation database system provide value added services top core database management system services either run part sql server component out-of-process windows service presents api control interact sql server machine learning services operates within sql server instance allowing people machine learning data analytics without send data across network limited memory computers services come microsoft r python distributions contain commonly used packages data science along proprietary packages e.g revoscalepy revoscaler microsoftml used create machine models scale analysts either configure client machine connect remote sql server push script executions run r python scripts external script inside t-sql query trained machine learning model stored inside database used scoring used inside instance programming environment cross-instance applications service broker communicates tcp/ip allows different components synchronized via exchange messages service broker runs part database engine provides reliable messaging message queuing platform sql server applications sql server replication services used sql server replicate synchronize database objects either entirety subset objects present across replication agents might database servers across network database caches client side lulla follows publisher/subscriber model i.e. changes sent one database server publisher received others subscribers sql server supports three different types replication sql server analysis services adds olap data mining capabilities sql server databases olap engine supports molap rolap holap storage modes data analysis services supports xml analysis standard underlying communication protocol cube data accessed using mdx linq queries data mining specific functionality exposed via dmx query language analysis services includes various algorithms—decision trees clustering algorithm naive bayes algorithm time series analysis sequence clustering algorithm linear logistic regression analysis neural networks—for use data mining sql server reporting services report generation environment data gathered sql server databases administered via web interface reporting services features web services interface support development custom reporting applications reports created rdl files reports designed using recent versions microsoft visual studio visual studio.net 2003 2005 2008 business intelligence development studio installed included report builder created rdl files rendered variety formats including excel pdf csv xml bmp emf gif jpeg png tiff html web archive originally introduced post-release add-on sql server 2000 notification services bundled part microsoft sql server platform first time sql server 2005 sql server notification services mechanism generating data-driven notifications sent notification services subscribers subscriber registers specific event transaction registered database server trigger event occurs notification services use one three methods send message subscriber informing occurrence event methods include smtp soap writing file filesystem notification services discontinued microsoft release sql server 2008 august 2008 longer officially supported component sql server database platform sql server integration services ssis provides etl capabilities sql server data import data integration data warehousing needs integration services includes gui tools build workflows extracting data various sources querying data transforming data—including aggregation de-duplication de-/normalization merging data—and exporting transformed data destination databases files sql server full text search service specialized indexing querying service unstructured text stored sql server databases full text search index created column character based text data allows words searched text columns performed sql codice_8 operator using sql server full text search service efficient full allows inexact matching source string indicated rank value range 0 1000—a higher rank means accurate match also allows linguistic matching inflectional search i.e. linguistic variants word verb different tense also match given word lower rank exact match proximity searches also supported i.e. words searched occur sequence specified query near also considered match t-sql exposes special operators used access fts capabilities full text search engine divided two processes filter daemon process codice_9 search process codice_10 processes interact sql server search process includes indexer creates full text indexes full text query processor indexer scans text columns database also index binary columns use ifilters extract meaningful text binary blob example microsoft word document stored unstructured binary file database ifilters hosted filter daemon process text extracted filter daemon process breaks sequence words hands indexer indexer filters noise words i.e. words like etc. occur frequently useful search remaining words inverted index created associating word columns found sql server includes gatherer component monitors changes tables invokes indexer case updates full text query received sql server query processor handed fts query processor search process fts query processor breaks query constituent words filters noise words uses inbuilt thesaurus find linguistic variants word words queried inverted index rank accurateness computed results returned client via sql server process sqlcmd command line application comes microsoft sql server exposes management features sql server allows sql queries written executed command prompt also act scripting language create run set sql statements script scripts stored codice_11 file used either management databases create database schema deployment database sqlcmd introduced sql server 2005 continues sql server 2012 2014 2016 predecessor earlier versions osql isql functionally equivalent pertains tsql execution many command line parameters identical although sqlcmd adds extra versatility microsoft visual studio includes native support data programming microsoft sql server used write debug code executed sql clr also includes data designer used graphically create view edit database schemas queries created either visually using code ssms 2008 onwards provides intellisense sql queries well sql server management studio gui tool included sql server 2005 later configuring managing administering components within microsoft sql server tool includes script editors graphical tools work objects features server sql server management studio replaces enterprise manager primary management interface microsoft sql server since sql server 2005 version sql server management studio also available sql server express edition known sql server management studio express ssmse central feature sql server management studio object explorer allows user browse select act upon objects within server used visually observe analyze query plans optimize database performance among others sql server management studio also used create new database alter existing database schema adding modifying tables indexes analyze performance includes query windows provide gui based interface write execute queries sql server operations studio preview cross platform query editor available optional download tool allows users write queries export query results commit sql scripts git repositories perform basic server diagnostics sql server operations studio supports windows mac linux systems business intelligence development studio bids ide microsoft used developing data analysis business intelligence solutions utilizing microsoft sql server analysis services reporting services integration services based microsoft visual studio development environment customized sql server services-specific extensions project types including tools controls projects reports using reporting services cubes data mining structures using analysis services sql server 2012 later ide renamed sql server data tools ssdt
node28:Wikipedia entry. Entry name: Amazon_S3. Entry content: amazon s3 amazon s3 amazon simple storage service service offered amazon web services aws provides object storage web service interface amazon s3 uses scalable storage infrastructure amazon.com uses run global e-commerce network amazon s3 employed store type object allows uses like storage internet applications backup recovery disaster recovery data archives data lakes analytics hybrid cloud storage service-level agreement amazon s3 guarantees 99.9 monthly uptime works less 43 minutes downtime per month aws launched amazon s3 united states march 14 2006 europe november 2007 although amazon web services aws publicly provide details s3 technical design amazon s3 manages data object storage architecture aims provide scalability high availability low latency 99.999999999 durability 99.95 99.99 availability though service-level agreement durability basic storage units amazon s3 objects organized buckets object identified unique user-assigned key buckets managed using either console provided amazon s3 programmatically using aws sdk amazon s3 rest application programming interface api objects managed using aws sdk amazon s3 rest api five terabytes size two kilobytes metadata additionally objects downloaded using http get interface bittorrent protocol requests authorized using access control list associated object bucket support versioning disabled default note since buckets typically size entire file system mount systems access control scheme coarse-grained i.e unique access controls associated individual files bucket names keys chosen objects addressable using http urls amazon s3 used replace significant existing static web-hosting infrastructure http client accessible objects amazon aws authentication mechanism allows bucket owner create authenticated url valid specified amount time every item bucket also served bittorrent feed amazon s3 store act seed host torrent bittorrent client retrieve file drastically reduce bandwidth cost download popular objects use bittorrent reduce bandwidth aws provide native bandwidth limiting users access automated cost control lead users free-tier amazon s3 small hobby users amassing dramatic bills aws representatives stated bandwidth limiting feature design table 2006 2010 2011 feature longer development bucket configured save http log information sibling bucket used data mining operations various user mode file system fuse -based file systems unix-like operating systems linux etc used mount s3 bucket file system s3ql semantics amazon s3 file system posix file system file system may behave entirely expected amazon s3 provides option host static html websites index document support error document support support added result user requests dating least 2006 example suppose amazon s3 configured cname records host codice_5 past visitor url would find xml-formatted list objects instead general landing page e.g. index.html accommodate casual visitors however websites hosted s3 may designate default page display another page display event partially invalid url 404 error amazon s3 allows users enable disable logging enabled logs stored amazon s3 buckets analyzed logs contain useful information logs analyzed managed using third-party tools like s3stat cloudlytics qloudstat awstats splunk amazon s3 provides api developers aws console provides tools managing uploading files capable managing large buckets editing files third-party websites like s3edit.com software like cloudberry explorer forklift webdrive capability edit files amazon s3 amazon s3 offers four different storage classes offer different levels durability availability performance requirements broad adoption amazon s3 related tooling given rise competing services based s3 api services use standard programming interface however differentiated underlying technologies supporting business models cloud storage standard like electrical networking standards enables competing service providers design services clients using different parts different ways yet still communicate provide following benefits examples competing amazon s3-compliant storage implementations amazon web services introduced amazons3 2006 amazon s3 reported store 2 trillion objects 10 billion objects october 2007 14 billion objects january 2008 29 billion objects october 2008 52 billion objects march 2009 64 billion objects august 2009 102 billion objects march 2010",wikics,nc
"Classify the wikipedia page represented by node15 using its subgraph data (text attributes and connections) as follows.

node0: web app platform founded by MIT graduates, acquired by Google, offered server-side JS framework and tutorials.  
node1: Certificate Authority issues digital certificates for secure online通信, manages trust via PKI, faces security risks like fraud and breaches.  
node2: Web threats include malware, phishing, cryptojacking; use push/pull methods; require multi-layered protection against evolving cybercrimes.
node3: Mass surveillance involves widespread monitoring by governments/corporations, raising privacy concerns vs. security needs, exemplified by NSA leaks and global practices.  
node4: PLA Unit 61398, a Chinese military hacking group (APT1), alleged in state-sponsored cyberespionage, indicted by the U.S. for targeting global firms and governments.  
node5: Domain-validated certificates (DV) verify domain control via DNS/email, offering basic SSL/TLS security without entity validation, issued quickly with low assurance.  
node6: Dynamic languages (e.g., Python, JavaScript) enable runtime code modification, eval/reflection, and flexible typing, differing from statically compiled languages.  
node7: Security descriptors in Windows manage object permissions via ACLs, ownership, and integrity levels, editable via tools likeicacls for access control.  
node8: Cube attacks cryptanalyze symmetric ciphers by modeling outputs as low-degree polynomials, targeting stream ciphers like Trivium, amid debates over novelty.
node9: Operation AntiSec involved LulzSec and Anonymous hacking governments/corporations, leaking data like Arizona DPS info, targeting censorship and privacy issues via coordinated attacks (2011).  
node10: Lua is a lightweight, embeddable scripting language (1993) known for simplicity, tables, and multi-paradigm support, designed for extending applications.  
node11: BREACH (2013) exploits HTTP compression to decrypt secrets in HTTPS, using a compression oracle; mitigated by disabling compression or using countermeasures.  
node12: Intrusion Detection Systems (IDS) monitor networks/hosts for malicious activity, using signature or anomaly-based methods, to alert admins and block threats.
node13: AMD's 64-bit x86 extension with larger memory, new registers, modes (64-bit, compatibility), used in supercomputers and major OSes.  
node14: 2017 Cloudflare bug leaked private data via memory exposure, affecting millions; similar to Heartbleed, patched after Google's disclosure.  
node15: Sophisticated 2012 malware for cyber espionage, spread via networks/USB, linked to Equation Group, suspected US-Israeli collaboration against Iran.  
node16: Java-compatible dynamic language with closures, runs on JVM, integrates with Java, used in Grails framework, offers scripting and static typing options.  
node17: Practices like firewalls, anti-malware, backups to protect against malware, data loss, and secure network access.  
node18: Python web framework using continuations, inspired by Seaside, for stateful apps with component-based design.  
node19: Microkernel OS for multimedia, minimal design with code in user processes, supports x86/Alpha/ARM.
node20: Rowhammer is a DRAM vulnerability causing bit flips via rapid memory row accesses, enabling security exploits; mitigated by ECC and hardware fixes like TRR.  
node21: Public-key cryptography uses key pairs for secure communication and digital signatures, enabling TLS, PGP, and resisting man-in-the-middle attacks.  
node22: 2012 LinkedIn hack exposed 6.5M+ hashed passwords; poor hashing allowed easy cracking. Later, 100M+ users affected; legal actions followed.  
node23: SetACL is a Windows tool managing file permissions via command-line, enabling access control and security descriptor adjustments under LGPL.  
node24: Computer/network surveillance involves monitoring internet/data traffic using tools like packet sniffers, raising privacy concerns amid laws like CALEA and Stingray use.
node25: Global 2017 ransomware attack targeting Windows systems via EternalBlue exploit, linked to North Korea, affected 200K+ systems, demanded Bitcoin, and caused billions in damages.  
node26: Software secretly collecting user data for ads or theft, often bundled with apps; anti-spyware tools and legal actions combat its spread and privacy violations.  
node27: Database security firm (acquired by McAfee) offering audit, vulnerability assessment, and real-time monitoring to prevent breaches and ensure compliance.  
node28: Malware infecting millions of Windows systems via rootkits, used for Bitcoin mining and click fraud; resistant to takedowns due to P2P command networks.
node29: IBM's real-time OS for mainframe high-volume transactions (e.g., credit cards, airlines) using assembly/C.  
node30: FBI's packet-sniffing tool for monitoring internet traffic, faced privacy concerns, replaced by commercial software post-2005.

the connection relationship among the nodes mentioned:
 <node0, node10>,<node0, node16>,<node1, node5>,<node1, node11>,<node1, node15>,<node1, node21>,<node2, node12>,<node2, node15>,<node2, node17>,<node2, node24>,<node2, node26>,<node3, node24>,<node3, node30>,<node4, node9>,<node4, node14>,<node4, node15>,<node4, node20>,<node4, node22>,<node4, node25>,<node4, node28>,<node5, node11>,<node5, node21>,<node6, node10>,<node6, node16>,<node7, node15>,<node7, node23>,<node8, node21>,<node9, node14>,<node9, node15>,<node9, node20>,<node9, node22>,<node9, node25>,<node9, node28>,<node10, node15>,<node10, node16>,<node10, node18>,<node11, node21>,<node12, node15>,<node12, node17>,<node12, node24>,<node12, node26>,<node12, node27>,<node13, node20>,<node14, node15>,<node14, node20>,<node14, node22>,<node14, node25>,<node14, node28>,<node15, node17>,<node15, node20>,<node15, node21>,<node15, node22>,<node15, node24>,<node15, node25>,<node15, node26>,<node15, node28>,<node16, node18>,<node17, node24>,<node17, node26>,<node19, node20>,<node19, node29>,<node20, node22>,<node20, node25>,<node20, node28>,<node20, node29>,<node22, node25>,<node22, node28>,<node24, node26>,<node24, node30>,<node25, node28>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",computer security,"node0: web app platform founded by MIT graduates, acquired by Google, offered server-side JS framework and tutorials.  
node1: Certificate Authority issues digital certificates for secure online通信, manages trust via PKI, faces security risks like fraud and breaches.  
node2: Web threats include malware, phishing, cryptojacking; use push/pull methods; require multi-layered protection against evolving cybercrimes.
node3: Mass surveillance involves widespread monitoring by governments/corporations, raising privacy concerns vs. security needs, exemplified by NSA leaks and global practices.  
node4: PLA Unit 61398, a Chinese military hacking group (APT1), alleged in state-sponsored cyberespionage, indicted by the U.S. for targeting global firms and governments.  
node5: Domain-validated certificates (DV) verify domain control via DNS/email, offering basic SSL/TLS security without entity validation, issued quickly with low assurance.  
node6: Dynamic languages (e.g., Python, JavaScript) enable runtime code modification, eval/reflection, and flexible typing, differing from statically compiled languages.  
node7: Security descriptors in Windows manage object permissions via ACLs, ownership, and integrity levels, editable via tools likeicacls for access control.  
node8: Cube attacks cryptanalyze symmetric ciphers by modeling outputs as low-degree polynomials, targeting stream ciphers like Trivium, amid debates over novelty.
node9: Operation AntiSec involved LulzSec and Anonymous hacking governments/corporations, leaking data like Arizona DPS info, targeting censorship and privacy issues via coordinated attacks (2011).  
node10: Lua is a lightweight, embeddable scripting language (1993) known for simplicity, tables, and multi-paradigm support, designed for extending applications.  
node11: BREACH (2013) exploits HTTP compression to decrypt secrets in HTTPS, using a compression oracle; mitigated by disabling compression or using countermeasures.  
node12: Intrusion Detection Systems (IDS) monitor networks/hosts for malicious activity, using signature or anomaly-based methods, to alert admins and block threats.
node13: AMD's 64-bit x86 extension with larger memory, new registers, modes (64-bit, compatibility), used in supercomputers and major OSes.  
node14: 2017 Cloudflare bug leaked private data via memory exposure, affecting millions; similar to Heartbleed, patched after Google's disclosure.  
node15: Sophisticated 2012 malware for cyber espionage, spread via networks/USB, linked to Equation Group, suspected US-Israeli collaboration against Iran.  
node16: Java-compatible dynamic language with closures, runs on JVM, integrates with Java, used in Grails framework, offers scripting and static typing options.  
node17: Practices like firewalls, anti-malware, backups to protect against malware, data loss, and secure network access.  
node18: Python web framework using continuations, inspired by Seaside, for stateful apps with component-based design.  
node19: Microkernel OS for multimedia, minimal design with code in user processes, supports x86/Alpha/ARM.
node20: Rowhammer is a DRAM vulnerability causing bit flips via rapid memory row accesses, enabling security exploits; mitigated by ECC and hardware fixes like TRR.  
node21: Public-key cryptography uses key pairs for secure communication and digital signatures, enabling TLS, PGP, and resisting man-in-the-middle attacks.  
node22: 2012 LinkedIn hack exposed 6.5M+ hashed passwords; poor hashing allowed easy cracking. Later, 100M+ users affected; legal actions followed.  
node23: SetACL is a Windows tool managing file permissions via command-line, enabling access control and security descriptor adjustments under LGPL.  
node24: Computer/network surveillance involves monitoring internet/data traffic using tools like packet sniffers, raising privacy concerns amid laws like CALEA and Stingray use.
node25: Global 2017 ransomware attack targeting Windows systems via EternalBlue exploit, linked to North Korea, affected 200K+ systems, demanded Bitcoin, and caused billions in damages.  
node26: Software secretly collecting user data for ads or theft, often bundled with apps; anti-spyware tools and legal actions combat its spread and privacy violations.  
node27: Database security firm (acquired by McAfee) offering audit, vulnerability assessment, and real-time monitoring to prevent breaches and ensure compliance.  
node28: Malware infecting millions of Windows systems via rootkits, used for Bitcoin mining and click fraud; resistant to takedowns due to P2P command networks.
node29: IBM's real-time OS for mainframe high-volume transactions (e.g., credit cards, airlines) using assembly/C.  
node30: FBI's packet-sniffing tool for monitoring internet traffic, faced privacy concerns, replaced by commercial software post-2005.","node0:Wikipedia entry. Entry name: AppJet. Entry content: appjet appjet website let users create web-based applications client web browser client software appjet founded 3 mit graduates 2 engineers google starting appjet launched initial public beta december 12 2007 allowing anyone create web app appjet received funding combinator summer 2007 project closed 1 july 2009 focus attention etherpad product appjet acquired google december 4 2009 undisclosed amount jgate cloud-based service beta free jan 2011 allows appjet applications run august 14 2008 appjet released programming tutorial aimed absolute beginners tutorial used appjet ide provide programming sandbox examples allowing readers experiment sample code one first online tutorials embed ide exposing complete server-side web app framework inline text appjet also refers server-side javascript framework powers appjet applications example recent trend web development run javascript client server allowing developers code entire web apps one language instead using separate language server-side client-side scripting virtual machine powers appjet apps based java virtual machine using rhino javascript implementation scala libraries also used appjet often updated bug-fixes improvements features major update site graphical change implemented july 10 2008 update also added feature comment users apps comments messages apps left url comments.appname.appjet.net another update occurred may 2 2008 update lets apps hosted custom domains
node1:Wikipedia entry. Entry name: Certificate_authority. Entry content: certificate authority cryptography certificate authority certification authority ca entity issues digital certificates digital certificate certifies ownership public key named subject certificate allows others relying parties rely upon signatures assertions made private key corresponds certified public key ca acts trusted third party—trusted subject owner certificate party relying upon certificate format certificates specified x.509 standard one particularly common use certificate authorities sign certificates used https secure browsing protocol world wide web another common use issuing identity cards national governments use electronically signing documents trusted certificates used create secure connections server via internet certificate essential order circumvent malicious party happens route target server acts target scenario commonly referred man-in-the-middle attack client uses ca certificate authenticate ca signature server certificate part authorizations launching secure connection usually client software—for example browsers—include set trusted ca certificates makes sense many users need trust client software malicious compromised client skip security check still fool users believing otherwise clients ca server supervisors call certificate servers bestow users commercial cas charge issue certificates customers anticipate ca certificate contained within majority web browsers safe connections certified servers work efficiently out-of-the-box quantity internet browsers devices applications trust particular certificate authority referred ubiquity mozilla non-profit business issues several commercial ca certificates products mozilla developed policy ca/browser forum developed similar guidelines ca trust single ca certificate may shared among multiple cas resellers root ca certificate may base issue multiple intermediate ca certificates varying validation requirements addition commercial cas non-profits issue digital certificates public without charge notable examples cacert let encrypt large organizations government bodies may pkis public key infrastructure containing cas site using self-signed certificates acts ca browsers clients sorts characteristically allow users add away ca certificates server certificates regularly last relatively short period ca certificates extended repeatedly visited servers less error-prone importing trusting ca issued rather confirm security exemption time server certificate renewed less often trustworthy certificates used encrypting signing messages cas dispense end-user certificates used s/mime however encryption entails receiver public key since authors receivers encrypted messages apparently know one another usefulness trusted third party remains confined signature verification messages sent public mailing lists worldwide certificate authority business fragmented national regional providers dominating home market many uses digital certificates legally binding digital signatures linked local law regulations accreditation schemes certificate authorities however market globally trusted tls/ssl server certificates largely held small number multinational companies market significant barriers entry due technical requirements legally required new providers may choose undergo annual security audits webtrust certificate authorities north america etsi europe included trusted root web browser operating system 180 root certificates trusted mozilla firefox web browser representing approximately eighty organizations 200 root certificates trusted macos android 4.2 jelly bean android currently contains 100 cas updated release november 18 2014 group companies nonprofit organizations including electronic frontier foundation mozilla cisco akamai announced let encrypt nonprofit certificate authority provides free domain validated x.509 certificates well software enable installation maintenance certificates let encrypt operated newly formed internet security research group california nonprofit recognized tax-exempt section 501 c 3 according netcraft may 2015 industry standard monitoring active tls certificates states although global tls ecosystem competitive dominated handful major cas — three certificate authorities symantec comodo godaddy account three-quarters issued tls certificates public-facing web servers top spot held symantec verisign purchased symantec ever since survey began currently accounting third certificates illustrate effect differing methodologies amongst million busiest sites symantec issued 44 valid trusted certificates use — significantly overall market share w3techs survey may 2015 shows w3techs survey november 2017 shows w3techs survey may 2018 shows identrust cross-signer let encrypt intermediates risen popular ssl certificate authority symantec dropped chart due security services acquired digicert commercial cas issue bulk certificates https servers typically use technique called domain validation authenticate recipient certificate techniques used domain validation vary cas general domain validation techniques meant prove certificate applicant controls given domain name information applicant identity many certificate authorities also offer extended validation ev certificates rigorous alternative domain validated certificates extended validation intended verify control domain name additional identity information included certificate browsers display additional identity information green box url bar one limitation ev solution weaknesses domain validation attackers could still obtain domain validated certificate victim domain deploy attack occurred difference observable victim user would absence green bar company name question whether users would likely recognise absence indicative attack progress test using internet explorer 7 2009 showed absence ie7 ev warnings noticed users however microsoft current browser edge shows significantly greater difference ev domain validated certificates domain validated certificates hollow grey lock domain validation suffers certain structural security limitations particular always vulnerable attacks allow adversary observe domain validation probes cas send include attacks dns tcp bgp protocols lack cryptographic protections tls/ssl compromise routers attacks possible either network near ca near victim domain one common domain validation techniques involves sending email containing authentication token link email address likely administratively responsible domain could technical contact email address listed domain whois entry administrative email like admin administrator webmaster hostmaster postmaster domain certificate authorities may accept confirmation using root info support domain theory behind domain validation legitimate owner domain would able read emails sent administrative addresses domain validation implementations sometimes source security vulnerabilities one instance security researchers showed attackers could obtain certificates webmail sites ca willing use email address like ssladmin domain.com domain.com webmail systems reserved ssladmin username prevent attackers registering prior 2011 standard list email addresses could used domain validation clear email administrators addresses needed reserved first version ca/browser forum baseline requirements adopted november 2011 specified list addresses allowed mail hosts reserve addresses administrative use though precautions still universal january 2015 finnish man registered username hostmaster finnish version microsoft live able obtain domain-validated certificate live.fi despite owner domain name ca issues digital certificates contain public key identity owner matching private key made available publicly kept secret end user generated key pair certificate also confirmation validation ca public key contained certificate belongs person organization server entity noted certificate ca obligation schemes verify applicant credentials users relying parties trust information ca certificates cas use variety standards tests essence certificate authority responsible saying yes person say ca certify user trusts ca verify ca signature also assume certain public key indeed belong whoever identified certificate public-key cryptography used encrypt data communicated two parties typically happen user logs site implements http secure protocol example let us suppose user logs bank homepage www.bank.example online banking user opens www.bank.example homepage receive public key along data web-browser displays public key could used encrypt data client server safe procedure use protocol determines temporary shared symmetric encryption key messages key exchange protocol enciphered bank public key way bank server private key read rest communication proceeds using new disposable symmetric key user enters information bank page submits page sends information back bank data user entered page encrypted web browser therefore even someone access encrypted data communicated user www.bank.example eavesdropper read decipher mechanism safe user sure bank see web browser user types www.bank.example communication hijacked fake website pretends bank website sends page information back user browser fake web-page send fake public key user fake site owns matching private key user fill form personal data submit page fake web-page get access user data certificate authority mechanism intended prevent certificate authority ca organization stores public keys owners every party communication trusts organization knows public key user web browser receives public key www.bank.example also receives digital signature key information so-called x.509 certificate browser already possesses public key ca consequently verify signature trust certificate public key since www.bank.example uses public key certification authority certifies fake www.bank.example use public key since fake www.bank.example know corresponding private key create signature needed verify authenticity difficult assure correctness match data entity data presented ca perhaps electronic network credentials person/company/program asking certificate likewise presented commercial cas often use combination authentication techniques including leveraging government bureaus payment infrastructure third parties databases services custom heuristics enterprise systems local forms authentication kerberos used obtain certificate turn used external relying parties notaries required cases personally know party whose signature notarized higher standard reached many cas according american bar association outline online transaction management primary points us federal state statutes enacted regarding digital signatures prevent conflicting overly burdensome local regulation establish electronic writings satisfy traditional requirements associated paper documents us e-sign statute suggested ueta code help ensure despite security measures undertaken correctly verify identities people companies risk single ca issuing bogus certificate imposter also possible register individuals companies similar names may lead confusion minimize hazard certificate transparency initiative proposes auditing certificates public unforgeable log could help prevention phishing large-scale deployments alice may familiar bob certificate authority perhaps different ca server bob certificate may also include ca public key signed different ca presumably recognizable alice process typically leads hierarchy mesh cas ca certificates authority revocation list arl form certificate revocation list crl containing certificates issued certificate authorities contrary crls contain revoked end-entity certificates ca/browser forum publishes baseline requirements list policies technical requirements cas follow requirement inclusion certificate stores firefox safari ca subverted security entire system lost potentially subverting entities trust compromised ca example suppose attacker eve manages get ca issue certificate claims represent alice certificate would publicly state represents alice might include information alice information alice employer name might true increasing certificate credibility eve however would all-important private key associated certificate eve could use certificate send digitally signed email bob tricking bob believing email alice bob might even respond encrypted email believing could read alice eve actually able decrypt using private key notable case ca subversion like occurred 2001 certificate authority verisign issued two certificates person claiming represent microsoft certificates name microsoft corporation could used spoof someone believing updates microsoft software came microsoft actually fraud detected early 2001 microsoft verisign took steps limit impact problem 2011 fraudulent certificates obtained comodo diginotar allegedly iranian hackers evidence fraudulent diginotar certificates used man-in-the-middle attack iran 2012 became known trustwave issued subordinate root certificate used transparent traffic management man-in-the-middle effectively permitted enterprise sniff ssl internal network traffic using subordinate certificate attacker steals certificate authority private keys able forge certificates ca without needed ongoing access ca systems key theft therefore one main risks certificate authorities defend publicly trusted cas almost always store keys hardware security module hsm allows sign certificates key generally prevent extraction key physical software controls cas typically take precaution keeping key long-term root certificates hsm kept offline except needed sign shorter-lived intermediate certificates intermediate certificates stored online hsm day-to-day work signing end-entity certificates keeping revocation information date cas sometimes use key ceremony generating signing keys order ensure keys tampered copied critical weakness way current x.509 scheme implemented ca trusted particular party issue certificates domain choose certificates accepted valid trusting party whether legitimate authorized serious shortcoming given commonly encountered technology employing x.509 trusted third parties https protocol major web browsers distributed end-users pre-configured list trusted cas numbers dozens means one pre-approved trusted cas issue valid certificate domain whatsoever industry response muted given contents browser pre-configured trusted ca list determined independently party distributing causing installed browser application really nothing cas issue driving impetus behind development dns-based authentication named entities dane protocol adopted conjunction domain name system security extensions dnssec dane greatly reduce completely eliminate role trusted third parties domain pki various software available operate certificate authority generally software required sign certificates maintain revocation information operate ocsp crl services examples
node2:Wikipedia entry. Entry name: Web_threat. Entry content: web threat web threat threat uses world wide web facilitate cybercrime web threats use multiple types malware fraud utilize http https protocols may also employ protocols components links email im malware attachments servers access web benefit cybercriminals stealing information subsequent sale help absorb infected pcs botnets web threats pose broad range risks including financial damages identity theft loss confidential information/data theft network resources damaged brand/personal reputation erosion consumer confidence e-commerce online banking type threat related information technology risk i.e risk affecting gained increasing impact society due spread processes web threats divided two primary categories based delivery method – push pull push-based threats use spam phishing fraudulent means lure user malicious often spoofed website collects information and/or injects malware push attacks use phishing dns poisoning pharming means appear originate trusted source precisely-targeted push-based web threats often referred spear phishing reflect focus data gathering attack spear phishing typically targets specific individuals groups financial gain push-based web threats malware authors use social engineering enticing subject lines reference holidays popular personalities sports pornography world events hot topics persuade recipients open email follow links malicious websites open attachments malware accesses web pull-based web threats often referred “ drive-by ” threats experts commonly “ drive-by downloads ” journalists general public since affect website visitor cybercriminals infect legitimate websites unknowingly transmit malware visitors alter search results take users malicious websites upon loading page user ’ browser passively runs malware downloader hidden html frame iframe without user interaction giorgio maone wrote 2008 today ’ malware runs mostly runs windows ’ commonest executable platform tomorrow ’ likely run web reason like web already huge executable platform start thinking way security perspective growth web threats result popularity web – relatively unprotected widely consistently used medium crucial business productivity online banking e-commerce well everyday lives people worldwide appeal web 2.0 applications websites increases vulnerability web web 2.0 applications make use ajax group web development programming tools used creating interactive web applications rich internet applications users benefit greater interactivity dynamic websites also exposed greater security risks inherent browser client processing september 2008 malicious hackers broke several sections businessweek.com redirect visitors malware-hosting websites hundreds pages compromised malicious javascript pointing third-party servers august 2008 popular social networking sites hit worm using social engineering techniques get users install piece malware worm installs comments sites links fake site users follow link told need update flash player installer installs malware rather flash player malware downloads rogue anti-spyware application antispy spider may 2008 websites worldwide compromised malicious javascript initially half million websites worldwide infected sql injection leveraged zlob variant downloaded additional trojan onto users ’ pcs websites china taiwan singapore compromised followed shortly thereafter humanitarian government news sites uk israel asia attack compromised websites led variety redirects download trojan september 2017 visitors tv network showtime website found website included coinhive code automatically began mining monero cryptocurrency without user consent coinhive software throttled use twenty percent visiting computer cpu avoid detection shortly discovery publicized social media coinhive code removed showtime declined comment multiple news articles unknown showtime inserted code website intentionally addition cryptomining code result website compromise coinhive offers code websites requires user consent prior execution less 2 percent coinhive implementations use code german researchers defined cryptojacking websites executing cryptomining visiting users computers without prior consent 1 every five hundred websites hosting cryptomining script cryptojacking persistent web threat conventional approaches failed fully protect consumers businesses web threats viable approach implement multi-layered protection—protection cloud internet gateway across network servers client web threat solution
node3:Wikipedia entry. Entry name: Mass_surveillance. Entry content: mass surveillance mass surveillance intricate surveillance entire substantial fraction population order monitor group citizens surveillance often carried local federal governments governmental organisations organizations like nsa fbi may also carried corporations either behalf governments initiative depending nation laws judicial systems legality permission required engage mass surveillance varies single indicative distinguishing trait totalitarian regimes also often distinguished targeted surveillance mass surveillance often cited necessary fight terrorism prevent crime social unrest protect national security control population conversely mass surveillance equally often criticized violating privacy rights limiting civil political rights freedoms illegal legal constitutional systems another criticism increasing mass surveillance could lead development surveillance state electronic police state civil liberties infringed political dissent undermined cointelpro-like programs state could referred totalitarian state 2013 practice mass surveillance world governments called question edward snowden ‘ 2013 global surveillance disclosure reporting based documents snowden leaked various media outlets triggered debate civil liberties right privacy digital age mass surveillance considered global issue privacy international 2007 survey covering 47 countries indicated increase surveillance decline performance privacy safeguards compared previous year balancing factors eight countries rated 'endemic surveillance societies eight china malaysia russia scored lowest followed jointly singapore united kingdom jointly taiwan thailand united states best ranking given greece judged 'adequate safeguards abuse many countries throughout world already adding thousands surveillance cameras urban suburban even rural areas example september 2007 american civil liberties union aclu stated danger tipping genuine surveillance society completely alien american values potential dark future every move every transaction every communication recorded compiled stored away ready examined used us authorities whenever want 12 march 2013 reporters without borders published special report internet surveillance report included list state enemies internet countries whose governments involved active intrusive surveillance news providers resulting grave violations freedom information human rights five countries placed initial list bahrain china iran syria vietnam bahrain one five countries reporters without borders march 2013 list state enemies internet countries whose governments involved active intrusive surveillance news providers resulting grave violations freedom information human rights level internet filtering surveillance bahrain one highest world royal family represented areas internet management sophisticated tools disposal spying subjects online activities dissidents news providers closely monitored surveillance increasing china one five countries reporters without borders march 2013 list state enemies internet countries whose governments involved active intrusive surveillance news providers resulting grave violations freedom information human rights internet access china owned controlled state communist party many foreign journalists china said take granted telephones tapped email monitored tools put place filter monitor internet collectively known great firewall china besides usual routing regulations allow access ip address particular domain name blocked great firewall makes large-scale use deep packet inspection dpi technology monitor block access based keyword detection great firewall ability dynamically block encrypted connections one country main isps china unicom automatically cuts connection soon used transmit encrypted content monitoring system developed china confined great firewall monitoring also built social networks chat services voip private companies directly responsible chinese authorities surveillance networks ensure banned messages circulated qq application owned firm tencent allows authorities monitor detail exchanges internet users seeking certain keywords expressions author message identified user number qq application effectively giant trojan horse since march 2012 new legislation requires new users micro-blogging sites register using name telephone number skype one world popular internet telephone platforms closely monitored skype services china available local partner tom media group chinese-language version skype known tom-skype slightly different downloadable versions countries report opennet initiative asia says everyday conversations captured servers interception storage conversation may triggered sender recipient name keywords occur conversation 30 january new york times reported target attacks chinese government first breach took place 13 september 2012 newspaper preparing publish article fortune amassed family outgoing prime minister wen jiabao newspaper said purpose attacks identify sources supplied newspaper information corruption among prime minister entourage wall street journal cnn also said targets cyber attacks china february twitter disclosed accounts 250,000 subscribers victims attacks china similar carried new york times mandiant company engaged nyt secure network identified source attacks group hackers called advanced persistent threat 1 unit people liberation army operating 12-story building suburbs shanghai hundreds possibly thousands staff direct support chinese government newest form mass surveillance china social credit system citizens businesses given deducted good behavior points depending choices digital revolution one world biggest mass surveillance operations carried stasi secret police former east germany time state collapsed 1989 stasi built estimated civilian network 300,000 informants approximately one fifty population monitored even minute hints political dissent among citizens many west germans visiting friends family east germany also subject stasi spying well many high-ranking west german politicians persons public eye east german citizens well aware government spying led culture mistrust touchy political issues discussed comfort four walls closest friends family members widely maintaining façade unquestioning followership public right privacy highly developed area law europe data protection directive regulates processing personal data within european union comparison us data protection law comparable instead us regulates data protection sectoral basis since early 2012 european union working general data protection regulation replace data protection directive harmonise data protection privacy law 20 october 2013 committee european parliament backed measure enacted could require american companies seek clearance european officials complying united states warrants seeking private data vote part efforts europe shield citizens online surveillance wake revelations far-reaching spying program u.s. national security agency european union justice rights commissioner viviane reding said question arisen whether large-scale collection processing personal information us surveillance programmes necessary proportionate meet interests national security eu also asking us changes us legislation match legal redress offered europe american citizens europe go courts feel rights infringed europeans without right residence america eu us arrangement implement international safe harbor privacy principles struck european court justice new framework transatlantic data flows called eu-us privacy shield adopted july 2016 april 2014 european court justice declared invalid eu data retention directive court said violates two basic rights respect private life protection personal data legislative body european union passed data retention directive 15 december 2005 requires telecommunication operators retain metadata telephone internet telecommunication services periods less six months two years date communication determined eu member state upon request make data available various governmental bodies access information limited investigation serious crimes warrant required access undertaken seventh framework programme research technological development fp7 science society multidisciplinary mission oriented mass surveillance activities example indect hide funded european commission association industrial partners indect project intelligent information system supporting observation searching detection security citizens urban environment develops intelligent urban environment observation system register exchange operational data automatic detection recognition intelligent processing information abnormal behaviour violence main expected results indect project hide homeland security biometric identification personal detection ethics research project funded european commission within scope seventh rtd framework programme fp7 consortium coordinated emilio mordini explored ethical privacy implications biometrics personal detection technologies focusing continuum personal detection authentication identification mass surveillance 2002 german citizens tipped wiretapping software error led phone number allocated german secret service listed mobile telephone bills indian parliament passed information technology act 2008 debate giving government fiat power tap communications without court order warrant section 69 act states section 69 empowers central government/state government/ authorized agency intercept monitor decrypt information generated transmitted received stored computer resource necessary expedient interest sovereignty integrity india defence india security state friendly relations foreign states public order preventing incitement commission cognizable offence investigation offence india setting national intelligence grid called natgrid would fully set may 2011 individual data ranging land records internet logs air rail pnr phone records gun records driving license property records insurance income tax records would available real time oversight uid unique identification authority india given every indian february 2011 government would able track people real time national population registry citizens established 2011 census fingerprints iris scans would taken along gps records household per initial plan access combined data given 11 agencies including research analysis wing intelligence bureau enforcement directorate national investigation agency central bureau investigation directorate revenue intelligence narcotics control bureau several states within india already installed cctv surveillance systems face matching capabilities using biometrics aadhaar andhra pradesh telangana using information linked aadhaar across different agencies create 360-degree profile person calling integration information hub states planning follow model iran one five countries reporters without borders march 2013 list state enemies internet countries whose governments involved naturally active efforts news providers government runs controls almost country institutions regulating managing legislating telecommunications supreme council cyberspace headed president ahmadinejad established march 2012 determines digital policy construction parallel iranian internet high connection speed fully monitored censored almost complete tools used iranian authorities monitor control internet include data interception tools capable deep packet inspection interception products leading chinese companies zte huawei use products provided huawei mobin net leading national provider mobile broadband used analyze email content track browsing history block access sites products zta sold telecommunication company iran tci offer similar services plus possibility monitoring mobile network european companies source spying data analysis tools products designed ericsson nokia siemens networks later trovicor use companies sold sms interception user location products mobile communication company iran irancell iran two biggest mobile phone companies 2009 used identify iranian citizens post-election uprising 2009 use israeli surveillance devices also detected iran network traffic management surveillance device netenforcer provided israel denmark resold iran similarly us equipment found way iran via chinese company zte july 2018 malaysian police announced creation malaysian internet crime children investigation unit micac equipped real-time mass internet surveillance software developed united states tasked monitoring malaysian internet users focus pornography child pornography system creates data library users includes details ip addresses websites locations duration frequency use files uploaded downloaded struggling drug trafficking criminal groups decades mexico strengthening military mass surveillance approximately half population mexico support democracy form government believe authoritarian system better social matters solved relevance political beliefs may make easier mass surveillance take spread within country necessarily mean end democratic institutions whole—such free elections permanence critical mass media—but means strengthening mechanisms exercising power exclude dialogue transparency social agreement developing intelligence agencies mexico radar means security according 2004 report government netherlands carries clandestine wire-taps intercepts country per capita world dutch military intelligence service mivd operates satellite ground station intercept foreign satellite links also facility eavesdrop foreign high-frequency radio traffic attained nickname ‘ surveillance state ’ north korea government complete control forms telecommunications internet routine sent prison camp communicating outside world government enforces restrictions around types appliances north koreans may home case radio tv sets pick signals nearby south korea china russia attempt mask way government actively spies citizens north korea increasing number citizens smartphones however devices heavily controlled used censor observe everything north koreans phones reuters reported 2015 koryolink north korea official mobile phone network around 3 million subscribers country 24 million obviously order digital data draw citizens must access phones things online sorm sorm-2 laws enable complete monitoring communication electronic traditional eight state agencies without warrant laws seem conflict article 23 constitution russia states 2015 european court human rights ruled legislation violated article 8 european convention human rights zakharov v. russia yarovaya law required storage unconditional access private communication data law enforcement singapore known city sensors singapore surveillance structure spreads widely closed-circuit television public areas even around neighbourhood internet monitoring/ traffic monitoring use surveillance metadata government initiatives singapore sim card registration mandatory even prepaid card singapore government rights access communication data singapore largest telecompany singtel close relations government singapore laws broadly phrased allow government obtain sensitive data text-messages email call logs web surfing history people without need court permission installation mass surveillance cameras singapore effort act deterrence terror attacks also public security loan sharks illegal parking part singapore smart nation initiative build network sensors collect connect data city life including citizen movement singapore government rolled 1000 sensors ranging computer chips surveillance cameras track almost everything singapore air quality public safety 2014 2016 bid increase security singapore police force installed 62,000 police cameras 10,000 housing development board hdb blocks covering lifts multi-storey car parks rising security concerns number cctv cameras public areas monitoring public transport system commercial/ government buildings singapore set increase 2018 singapore government would rolling new advanced surveillance systems starting singapore maritime borders new panoramic electro-optic sensors put place north south coasts monitoring 360-degree view area tethered unmanned aerial vehicle uav also operational used search rescue operations including hostage situations public order incidents according 2017 report privacy international spain may part group 21 european countries withholding information also known data retention 2014 many defense lawyers tried overturn multiple cases used mass storage evidence convict according european agency fundamental rights prior 2009 national defence radio establishment fra limited wireless signals intelligence sigint although left largely unregulated december 2009 new legislation went effect allowing fra monitor cable bound signals passing swedish border communications service providers legally required confidentiality transfer cable communications crossing swedish borders specific interaction points data may accessed court order fra contested since change legislation mainly public perception change would enable mass surveillance fra categorically deny allegation allowed initialize surveillance direct access communication lines sigint authorized special court meet set narrow requirements something minister defence sten tolgfors quoted saying render debate mass surveillance invalid due architecture internet backbones nordic area large portion norwegian finnish traffic also affected swedish wiretapping syria one five countries reporters without borders march 2013 list state enemies internet countries whose governments involved active intrusive surveillance news providers resulting grave violations freedom information human rights syria stepped web censorship cyber-monitoring country civil war intensified least 13 blue coat proxy servers use skype calls intercepted social engineering techniques phishing malware attacks use failed coup attempt june 15 2016 led authoritarian shift uses mass surveillance suppress opposite views digital surveillance part everyday life due box government puts turkish citizens increasingly difficult release academic knowledge beyond turkish government wants released digital physical strong hold knowledge goes regime today surveillance academicians goes along state oppression turkey hard say happen next years turkey become increasingly authoritarian centralization state power along digitalization expands scope state surveillance digitalization centralization state power closely related regime power becomes prominent conjuncture national security terrorism turkey main explanations world topic although clearly happening according report human rights joint platform published february 23 2017 nine months period state emergency number dismissed academicians reached 4,811 increasing 7,619 addition academicians working universities closed failed coup attempt extended surveillance turkey helped control population massive scale state surveillance united kingdom formed part public consciousness since 19th century postal espionage crisis 1844 sparked first panic privacy citizens however 20th century electronic surveillance capabilities grew wartime signal intelligence pioneering code breaking 1946 government communications headquarters gchq formed united kingdom united states signed bilateral ukusa agreement 1948 later broadened include canada australia new zealand well cooperation several third-party nations became cornerstone western intelligence gathering special relationship uk usa growth internet development world wide web series media reports 2013 revealed recent programs techniques involving gchq tempora use capabilities controlled laws made uk parliament particular access content private messages interception communication must authorized warrant signed secretary state addition european union data privacy law applies uk law uk exhibits governance safeguards well use electronic surveillance investigatory powers tribunal judicial oversight body intelligence agencies ruled december 2014 legislative framework united kingdom breach european convention human rights however tribunal stated february 2015 one particular aspect data-sharing arrangement allowed uk intelligence services request data us surveillance programs prism upstream contravention human rights law prior two paragraphs additional information providing details procedures safeguards disclosed public december 2014 december 2014 ruling investigatory powers tribunal found legislative framework united kingdom permit mass surveillance gchq collects analyses data bulk practice mass surveillance report privacy security published intelligence security committee parliament also came view although found past shortcomings oversight said legal framework simplified improve transparency view supported independent reports interception communications commissioner however notable civil liberties groups continue express strong views contrary plan appeal ruling european court human rights others criticised viewpoints turn regulation investigatory powers act 2000 rip ripa significant piece legislation granted regulated powers public bodies carry surveillance investigation 2002 uk government announced plans extend regulation investigatory powers act least 28 government departments would given powers access metadata citizens web e-mail telephone fax records without warrant without subject knowledge protection freedoms act 2012 includes several provisions related controlling restricting collection storage retention use information government databases supported three major political parties uk parliament passed data retention investigatory powers act july 2014 ensure police security services retain existing powers access phone internet records superseded investigatory powers act 2016 comprehensive statute made public number previously secret powers equipment interference bulk retention metadata intelligence agency use bulk personal datasets enables government require internet service providers mobile phone companies maintain records content customers internet connections 12 months addition created new safeguards including requirement judges approve warrants authorised secretary state come force act informed two reports david anderson qc uk independent reviewer terrorism legislation question trust 2015 report bulk powers review 2016 contains detailed appraisal 60 case studies operational case powers often characterised mass surveillance may yet require amendment consequence legal cases brought court justice european union european court human rights many advanced nation-states implemented laws partially protect citizens unwarranted intrusion human rights act 1998 data protection act 1998 united kingdom laws require formal warrant private data may gathered government uk member european union participates programs subject eu policies directives surveillance vast majority video surveillance cameras uk operated government bodies private individuals companies especially monitor interiors shops businesses according 2011 freedom information act requests total number local government operated cctv cameras around 52,000 entirety uk prevalence video surveillance uk often overstated due unreliable estimates requoted example one report 2002 extrapolated small sample estimate number cameras uk 4.2 million 500,000 london reliable estimates put number private local government operated cameras united kingdom around 1.85 million 2011 historically mass surveillance used part wartime censorship control communications could damage war effort aid enemy example world wars every international telegram united states sent companies western union reviewed us military wars surveillance continued programs black chamber following world war project shamrock following world war ii cointelpro projects conducted u.s. federal bureau investigation fbi 1956 1971 targeted various subversive organizations including peaceful anti-war racial equality activists albert einstein martin luther king jr billions dollars per year spent agencies national security agency nsa federal bureau investigation fbi develop purchase implement operate systems carnivore echelon narusinsight intercept analyze immense amount data traverses internet telephone system every day since september 11 2001 terrorist attacks vast domestic intelligence apparatus built collect information using nsa fbi local police state homeland security offices military criminal investigators intelligence apparatus collects analyzes stores information millions american citizens many accused wrongdoing mail isolation control tracking program u.s postal service photographs exterior every piece paper mail processed united states — 160 billion pieces 2012 u.s. postmaster general stated system primarily used mail sorting images available possible use law enforcement agencies created 2001 following anthrax attacks killed five people sweeping expansion 100-year-old program called mail cover targets people suspected crimes fbi developed computer programs magic lantern cipav remotely install computer system order monitor person computer activity nsa gathering information financial records internet surfing habits monitoring e-mails also performed extensive analysis social networks myspace prism special source operation system legally immunized private companies cooperate voluntarily u.s. intelligence collection according register fisa amendments act 2008 specifically authorizes intelligence agencies monitor phone email communications u.s. citizens week without obtaining warrant one parties outside u.s. prism first publicly revealed 6 june 2013 classified documents program leaked washington post guardian american edward snowden communications assistance law enforcement act calea requires u.s. telecommunications internet service providers modify networks allow easy wiretapping telephone voip broadband internet traffic early 2006 usa today reported several major telephone companies providing telephone call records u.s. citizens national security agency nsa storing large database known nsa call database report came heels allegations u.s. government conducting electronic surveillance domestic telephone calls without warrants 2013 existence hemisphere project provides telephone call data federal agencies became publicly known traffic cameras meant help enforce traffic laws intersections may used law enforcement agencies purposes unrelated traffic violations cameras allow identification individuals inside vehicle license plate data collected time stamped cross reference data used police department homeland security funding networks surveillance cameras cities towns part efforts combat terrorism new york city police department infiltrated compiled dossiers protest groups 2004 republican national convention leading 1,800 arrests modern surveillance united states thought wartime effort snowden disclosed depth information national security agency june 2013 constant development improvements internet technology made easier mass surveillance take hold revelations allow critical commentators raise questions scrutinize implementation use abuse networking technologies devices software systems partake “ global surveillant assemblage ” bogard 2006 collier ong 2004 haggerty ericson 2000 murakami wood 2013 nsa collected millions verizon user telephone records 2013-2014 nsa also collected data google facebook program called 'prism journalists snowden published nearly 7,000 top-secret documents since yet information disclosed seems less 1 entire information access every individual private records seems directly contradict fourth amendment vietnam one five countries reporters without borders march 2013 list state enemies internet countries whose governments involved active intrusive surveillance news providers resulting grave violations freedom information human rights country 16 service providers directly indirectly controlled vietnamese communist party industry leader vietnam posts telecommunications group controls 74 per cent market state-owned viettel enterprise vietnamese armed forces fpt telecom private firm accountable party depends market leaders bandwidth service providers major instruments control surveillance bloggers monitored government frequently undergo man-in-the-middle attacks designed intercept data meant sent secure https sites allowing passwords communication intercepted according july 2012 freedom house report 91 percent survey respondents connected internet mobile devices government monitors conversations tracks calls activists reactionaries result digital revolution many aspects life captured stored digital form concern expressed governments may use information conduct mass surveillance populations commercial mass surveillance often makes use copyright laws user agreements obtain typically uninformed 'consent surveillance consumers use software related materials allows gathering information would technically illegal performed government agencies data often shared government agencies thereby practice defeating purpose privacy protections one common forms mass surveillance carried commercial organizations many people willing join supermarket grocery loyalty card programs trading personal information surveillance shopping habits exchange discount groceries although base prices might increased encourage participation program programs like google adsense opensocial increasing pool so-called web gadgets social gadgets google-hosted services many web sites internet effectively feeding user information sites visited users also social connections google facebook also keep information although acquisition limited page views within facebook data valuable authorities advertisers others interested profiling users trends web site marketing performance google facebook others increasingly becoming guarded data reach increases data becomes inclusive making valuable new features like geolocation give even increased admission monitoring capabilities large service providers like google also enabled track one physical movements users using mobile devices especially syncing without user interaction google gmail service increasingly employing features work stand-alone application also might activate web browser even active synchronizing feature mentioned google i/o 2009 developer conference showing upcoming html5 features google others actively defining promoting 2008 world economic forum davos google ceo eric schmidt said arrival truly mobile web offering new generation location-based advertising set unleash 'huge revolution mobile world congress barcelona 16 february 2010 google presented vision new business model mobile operators trying convince mobile operators embrace location-based services advertising google advertising provider would mean every mobile operator using location-based advertising service would revealing location mobile customers google organizations like electronic frontier foundation constantly informing users importance privacy considerations technologies like geolocation computer company microsoft patented 2011 product distribution system camera capture device monitors viewers consume product allowing provider take remedial action actual viewers match distribution license reporters without borders march 2013 special report internet surveillance contained list corporate enemies internet companies sell products liable used governments violate human rights freedom information five companies initial list amesys france blue coat systems u.s. gamma group uk germany hacking team italy trovicor germany list exhaustive likely expanded future surveillance state country government engages pervasive surveillance large numbers citizens visitors widespread surveillance usually justified necessary national security prevent crime acts terrorism may also used stifle criticism opposition government examples early surveillance states include former soviet union former east germany large network informers advanced technology base computing spy-camera technology states today technologies mass surveillance use databases pattern recognition software cross-correlate information obtained wire tapping including speech recognition telecommunications traffic analysis monitoring financial transactions automatic number plate recognition tracking position mobile telephones facial recognition systems like recognize people appearance gait dna profiling etc development smart cities seen increased adoption surveillance technologies governments although primary purpose surveillance cities use information communication technologies improve urban environment implementation technology number cities resulted increased efficiencies urban infrastructure well improved community participation sensors systems monitor smart city infrastructure operations activities aim help run efficiently example city could use less electricity traffic run smoothly fewer delays citizens use city safety hazards dealt faster citizen infractions rules prevented city infrastructure power distribution roads traffic lights example dynamically adjusted respond differing circumstances development smart city technology also led increase potential unwarranted intrusions privacy restrictions upon autonomy widespread incorporation information communication technologies within daily life urban residents results increases surveillance capacity states extent individuals may unaware information accessed access occurs purpose possible conditions could give rise development electronic police state shanghai amsterdam san jose dubai barcelona madrid stockholm new york cities use various techniques smart city technology electronic police state state government aggressively uses electronic technologies record collect store organize analyze search distribute information citizens electronic police states also engage mass government surveillance landline cellular telephone traffic mail email web surfing internet searches radio forms electronic communication well widespread use video surveillance information usually collected secret crucial elements politically based long government afford technology populace permit used electronic police state form continual use electronic mass surveillance result constant low-level fear within population lead self-censorship exerts powerful coercive force upon populace seventeen factors judging development electronic police state suggested electronic police state 2008 national rankings list includes factors apply forms police states use identity documents police enforcement go considerably beyond emphasize use technology gather process information collected concept monitored government collects large audience curious citizens mass surveillance prominently featured wide array books films media advances technology last century led possible social control internet conditions late capitalism many directors writers enthralled potential stories could come mass surveillance perhaps iconic example fictional mass surveillance george orwell 1949 novel nineteen eighty-four depicts dystopian surveillance state works focus mass surveillance
node4:Wikipedia entry. Entry name: PLA_Unit_61398. Entry content: pla unit 61398 pla unit 61398 also known apt 1 comment crew comment panda gif89a byzantine candor pinyin 61398 bùduì military unit cover designator mucd people liberation army advanced persistent threat unit alleged source chinese computer hacking attacks unit stationed pudong shanghai 19 may 2014 us department justice announced federal grand jury returned indictment five 61398 officers charges theft confidential business information intellectual property u.s. commercial firms planting malware computers five huang zhenyu 黄振宇 wen xinyu 文新宇 sun kailiang 孙凯亮 gu chunhui 顾春晖 wang dong 王东 forensic evidence traces base operations 12-story building datong road public mixed-use area pudong shanghai group also known various names including advanced persistent threat 1 apt1 comment group byzantine candor codename given us intelligence agencies since 2002 report computer security firm mandiant stated pla unit 61398 believed operate 2nd bureau people liberation army general staff department gsd third department 总参三部二局 evidence contains entity mandiant calls apt1 part advanced persistent threat attacked broad range corporations government entities around world since least 2006 apt1 described comprising four large networks shanghai two serve pudong new area one 20 apt groups origins china third fourth department responsible electronic warfare believed comprise pla units mainly responsible infiltrating manipulating computer networks group often compromises internal software comment features legitimate web pages infiltrate target computers access sites leading known comment group collective stolen trade secrets confidential information numerous foreign businesses organizations course seven years lockheed martin telvent companies shipping aeronautics arms energy manufacturing engineering electronics financial software sectors dell secureworks says believed group includes group attackers behind operation shady rat extensive computer espionage campaign uncovered 2011 70 organizations five-year period including united nations government agencies united states canada south korea taiwan vietnam targeted attacks documented summer 2011 represent fragment comment group attacks go back least 2002 according incident reports investigators fireeye inc. alone tracked hundreds targets last three years estimates group attacked 1,000 organizations activity malware embedded compromised system malware controllers takes place business hours beijing time zone suggesting group professionally hired rather private hackers inspired patriotic passions 2013 government china consistently denied involved hacking response mandiant corporation report unit 61398 hong lei spokesperson chinese foreign ministry said allegations unprofessional 2013 china changed position openly admitted secretive cyber warfare units military civilian part governmenthowever details activities left speculation show force towards rest global community chinese government openly lists abilities comes digital spying network attack capabilities
node5:Wikipedia entry. Entry name: Domain-validated_certificate. Entry content: domain-validated certificate domain validated certificate dv x.509 digital certificate typically used transport layer security tls domain name applicant validated proving control dns domain sole criterion domain validated certificate proof control whois records dns records file email web hosting account domain typically control domain determined using one following domain validated certificate distinct extended validation certificate requirement issuing certificate particular domain validated certificates assure particular legal entity connected certificate even domain name may imply particular legal entity controls domain web browsers may show lock often grey rather green lock typically used extended validation certificate dns domain name legal entity never displayed domain validated certificates include legal entity subject low assurance requirements allow domain validated certificates issued quickly without requiring human intervention domain validated certificates number unique characteristics
node6:Wikipedia entry. Entry name: Dynamic_programming_language. Entry content: dynamic programming language dynamic programming language computer science class high-level programming languages runtime execute many common programming behaviours static programming languages perform compilation behaviors could include extension program adding new code extending objects definitions modifying type system although similar behaviors emulated nearly language varying degrees difficulty complexity performance costs dynamic languages provide direct tools make use many features first implemented native features lisp programming language dynamic languages also dynamically typed dynamic languages frequently always referred scripting languages although term scripting language narrowest sense refers languages specific given run-time environment dynamic languages offer eval function function takes string parameter containing code language executes code stands expression resulting value returned however erik meijer peter drayton suggests programmers use eval poor man substitute higher-order functions type object system typically modified runtime dynamic language mean generating new objects runtime definition based mixins existing types objects also refer changing inheritance type tree thus altering way existing types behave especially respect invocation methods reflection common many dynamic languages typically involves analysis types metadata generic polymorphic data however also include full evaluation modification program code data features lisp provides analyzing s-expressions limited number dynamic programming languages provide features combine code introspection ability examine classes functions keywords know know eval feature called macros programmers today aware term macro encountered c c++ static feature built small subset language capable string substitutions text program dynamic languages however provide access inner workings compiler full access interpreter virtual machine runtime allowing definition language-like constructs optimize code modify syntax grammar language assembly c c++ early java fortran generally fit category following examples show dynamic features using language common lisp common lisp object system clos example shows function modified runtime computed source code example shows existing instance changed include new slot class changes existing method replaced new version next example class person gets new superclass print method gets redefined assembles several methods effective method effective method gets assembled based class argument runtime available applicable methods popular dynamic programming languages include javascript python ruby php lua perl following generally considered dynamic languages many use term scripting languages
node7:Wikipedia entry. Entry name: Security_descriptor. Entry content: security descriptor security descriptors data structures security information securable windows objects objects identified unique name security descriptors associated named objects including files folders shares registry keys processes threads named pipes services job objects resources security descriptors contain discretionary access control lists dacls contain access control entries aces grant deny access trustees users groups also contain system access control list sacls control auditing object access aces may explicitly applied object inherited parent object order aces acl important access denied aces appearing higher order aces grant access security descriptors also contain object owner mandatory integrity control implemented new type ace security descriptor files folder permissions edited various tools including windows explorer wmi command line tools like cacls xcacls icacls subinacl freeware win32 console fileacl free software utility setacl utilities edit security descriptor user needs write_dac permissions object permission usually delegated default administrators object owner ntfs uses set 14 12 older systems permissions files folders form acl stored security descriptors following table summarizes system permissions individual rows obscured using different names abbreviations various programs see icacls cacls columns well number levels permission mappings like generic access rights columns gr ge gw ga table generic_read generic_execute generic_write generic_all respectively standard access rights special permissions mapped permissions files folders
node8:Wikipedia entry. Entry name: Cube_attack. Entry content: cube attack cube attack method cryptanalysis applicable wide variety symmetric-key algorithms published itai dinur adi shamir september 2008 preprint revised version preprint placed online january 2009 paper also accepted presentation eurocrypt 2009 cipher vulnerable output bit represented sufficiently low degree polynomial gf 2 key input bits particular describes many stream ciphers based lfsrs des aes believed immune attack works summing output bit value possible values subset public input bits chosen resulting sum linear combination secret bits repeated application technique gives set linear relations secret bits solved discover bits authors show cipher resembles random polynomial sufficiently low degree sets public input bits exist high probability discovered precomputation phase black box probing relationship input output various choices public secret input bits making use information construction cipher paper presents practical attack authors implemented tested stream cipher previous known attack would effective state 10,000 bit lfsr secret dense feedback polynomial filtered array 1000 secret 8-bit 1-bit s-boxes whose input based secret taps lfsr state whose output xored together bit lfsr initialized different secret dense quadratic polynomial 10 000 key iv bits lfsr clocked large secret number times without producing outputs first output bit given iv made available attacker short preprocessing phase attacker query output bits variety key iv combinations 2 bit operations required discover key cipher authors also claim attack version trivium reduced 735 initialization rounds complexity 2 conjecture techniques may extend breaking 1100 trivium 1152 initialization rounds maybe even original cipher best attack known trivium attack however embroiled two separate controversies firstly daniel j. bernstein disputes assertion previous attack 10,000-bit lfsr-based stream cipher existed claims attack reduced-round trivium n't give real reason think full trivium attacked claims cube paper failed cite existing paper xuejia lai detailing attack ciphers small-degree polynomials believes cube attack merely reinvention existing technique secondly dinur shamir credit michael vielhaber algebraic iv differential attack aida precursor cube attack dinur stated eurocrypt 2009 cube generalises improves upon aida however vielhaber contends cube attack attack another name however acknowledged parties involved cube use efficient linearity test blr test results new attack needing less time aida although substantial particular change remains dispute way cube aida differ vielhaber claims instance linear polynomials key bits obtained attack unusually sparse yet supplied evidence claims evidence appear forthcoming paper entitled algebraic iv differential attack aida attacking full trivium clear whether alleged sparsity applies ciphers trivium
node9:Wikipedia entry. Entry name: Operation_AntiSec. Entry content: operation antisec operation anti-security also referred operation antisec antisec series hacking attacks performed members hacking group lulzsec group anonymous others inspired announcement operation lulzsec performed earliest attacks operation first serious organised crime agency 20 june 2011 soon group released information taken servers arizona department public safety anonymous would later release information agency two times offshoot group calling lulzsecbrazil launched attacks numerous websites belonging government brazil energy company petrobras lulzsec claimed retire group 18 july reconvened hack websites british newspapers sun times posting fake news story death publication owner rupert murdoch anonymous released first cache operation 27 june 2011 taken anti-cyberterrorism program run united states department homeland security federal emergency management agency continued attacks arizona government also launched attacks governments brazil zimbabwe tunisia recent attacks large corporations nato various united states law enforcement websites anonymous used stolen credit card numbers police officers make unauthorized donations various causes others also committed hacks name operation including hack fox news twitter account post false news story assassination president united states barack obama attacks websites government entities various countries groups involved published sensitive government corporate information well email addresses names social security numbers credit card numbers website users law enforcement launched investigations many attacks committed part operation antisec least seven arrests made connection activities related operation including arrests two purported lulzsec members man provided lulzsec security vulnerability information four alleged members antisec nl group inspired operation lulzsec hacking group formed may 2011 came international prominence hacking websites public broadcasting service sony united states senate initially group claimed hack lulz enjoy chaos follows intrusions however 20 june 2011 group announced teaming hacking collective anonymous series attacks dubbed operation anti-security operation antisec press release accompanying beginning operation called supporters steal publish classified government documents name antisec major banks corporations also mentioned potential targets though lulzsec disbanded group 26 june 2011 members reported continuing operation within anonymous groups involved claim operation aims protest government censorship monitoring internet lulzsec members also mention ending believe corrupt racial profiling copyright laws goal operation war drugs also given reason particular hacks contrast usa today described operation cyberwarfare targeting governments large corporations lulzsec launched first attacks operation serious organised crime agency national law enforcement agency united kingdom handles cybercrime group launched distributed denial-of-service attack agency website 20 june taking offline minutes day knocked website jianhua district qiqihar china offline 23 june group released large cache documents taken servers arizona department public safety release titled chinga la migra roughly translating fuck border patrol including email addresses passwords hundreds documents marked sensitive official use group claimed retaliation passage arizona sb 1070 law saw leading unjust racial profiling arizona complained release officer identities personal information families could put families danger gave exposed security protection response mobilized arizona counter terrorism information center locked remote access department public safety email accounts 25 june 2011 group released described last dump operation release contained large amount information varied sources included information numerous companies including half gigabyte data telecommunications company ip addresses sony viacom disney emi nbc universal portion included information pertaining release 4g lte 90,000 personal phones used ibm development ipad 3 also contained 750,000 usernames password combinations including 200,000 hackforums.net 12,000 nato online bookstore 500,000 online video game battlefield heroes 50,000 various video game forums 29 irish private investigation company priority investigations finally internal manual aol engineers screencapture united states navy website navy.mil vandalized 22 june offshoot group calling lulzsecbrazil took website government brazil brasil.gov.br president brazil presidencia.gov.br also targeted website brazilian energy company petrobras 24 june claimed publish access codes passwords petrobras website along personnel profiles however company denied information stolen group removed claim twitter feed hours later group also published personal information president brazil dilma rousseff mayor são paulo gilberto kassab despite claiming retired 18 july lulzsec hacked website british newspaper sun group redirected newspaper website also-hacked redesign website another newspaper times altering site resemble sun posting fake story claiming rupert murdoch died ingesting fatal dose palladium objected involvement news corporation murdoch-owned company publishes sun times large phone hacking scandal hacked website also contained webcomic depicting lulzsec deciding carrying attack group later redirected sun website twitter feed news international released statement regarding attacks page statement appeared also redirected lulzsec twitter page eventually taken offline group also released names phone numbers reporter sun two others associated newspaper encouraged supporters call group included old email address password former news international executive rebekah brooks news corporation took websites offline precaution later day 27 june 2011 anonymous published information relating cyberterrorism defense initiative security network training initiative national education laboratory program sentinel program operation run united states department homeland security federal emergency management agency hack included information agency distributed 2009 contained resources publicly available hacking software list federal bureau investigation bureau locations details counter-hacking tools form letters law enforcement agencies used obtain user details internet service providers 28 june group released second collection documents stolen arizona department public safety operation anti-security dubbed chinga la migra communique dos fuck border patrol message two data file contained names addresses phone numbers internet passwords social security numbers dozen arizona police officers also contained emails voicemails chat logs least one instance included sexually explicit photographs one officer girlfriends anonymous also claimed documents included officers forwarding racist chain emails evidence k-9 unit officers using percocet fraternal order police member also convicted sex offender anonymous noted motivation stemmed desire make police officers experience taste kind violence terror dish every day basis day group released information obtained various government sources government data anguilla passwords servers belonging government brazil users zimbabwe government websites data municipality mosman council included mosman council dump included mainly publicly available information website well not-publicly-available prototype version website yet launched claimed also access zimbabwean government websites ending gov.zw information control given sql injection anonymous claimed targeted brazil saw data manipulation zimbabwe controversial 2008 zimbabwean presidential election also gained control website belonging government tunisia replaced webpage graphic representing anonymous text reading internet last frontier let corrupt governments spoil anonymous lulzsec people around world stepping name freedom release also included file containing internal mapping viacom servers well passwords data umusic.com website universal music group also released names 2,800 members black eagles paramilitary group 1 july anonymous targeted arizona law enforcement publishing number backdoors could used access arizona police servers pastebin arizona forced pull many websites offline time websites affected included department public safety mariposa chapter fraternal order police also claimed found anti-muslim emails attack 3 july anonymous hacked database democratic party orange county florida published partial membership list handbook precinct committee members hack also considered part group oporlando plan 4 july anonymous released document containing 27 administrative usernames passwords apple inc. system used operate online technical support follow-up surveys encrypted passwords taken sql database anonymous launched dubbed turkish takedown thursday 6 july posted internal data one hundred .tr websites brought replaced content 74 74 sites normal pages replaced antisec logo message denouncing supposed attempts internet censorship turkish government websites affected included children hospital key government agencies day group released database dumps taken 20 universities italy two days later italian police arrested 15 alleged members anonymous ranging age 15 28 group vowed revenge raids 8 july group claimed responsibility hacks irc federal engineering firm contracts federal bureau investigation agencies united states federal government internal database documents personnel email stolen attack group also claimed vandalized firm website forcing take offline group says documents procured found proposal fbi firm produce special identities modernization sim project would help identify might present criminal terrorist risk future fingerprinting contracts united states department justice biometrics contracts military also claimed obtained information allowing log various virtual private networks access panels belonging united states department energy also sent message company employees urging work government rather hack done simple sql injection 11 july anonymous hacked systems belonging defense contractor booz allen hamilton breaking barriers group described security measures place released said 90,000 email accounts encrypted passwords united states central command united states special operations command united states marine corps united states air force united states department homeland security united states department state various private sector contractors calling released military meltdown monday also sarcastically posted invoice charging company security audit services rendered despite anonymous claims 90,000 emails released associated press counted 67,000 unique emails 53,000 military addresses remainder addresses came educational institutions defense contractors department defense said aware incident coordinating agencies response booz allen confirmed intrusion 13 july contradicted anonymous claims saying attack never got past systems meaning information military secure 12 july group attacked web servers agricultural biotechnology company monsanto released information company employees including names addresses email addresses group claimed performed attack protest company lawsuits farmers manufacture organic milk effort stop stating label milk contain artificial bovine growth hormones monsanto confirmed attack claimed ten percent information published came current former employees company said ninety percent email addresses names media contacts employees agricultural companies 21 july anonymous released two pdfs purportedly taken servers belonging nato claimed via twitter obtained around one gigabyte data would release portions course days group claimed data sensitive felt would irresponsible release thus would make portion taken available first two documents released relate outsourcing communication information services cis kosovo funding request project austrian branch anonymous hacked website austrian gebühren info service television license agency run austrian national public service broadcaster 22 july accessed 214,000 records containing personal information stole banking data 96,000 people server counter-terrorism bureau country launched investigation preparing file criminal complaints involved 25 july first posted confidential information claimed came italian centro nazionale anticrimine informatico per la protezione delle infrastrutture critiche translated national anti-crime computer center critical infrastructure protection agency tasked protecting vital computer systems country twitter account anonesc posted less 100 megabytes data claimed taken eight gigabytes data related oil nuclear firms deemed involved critical infrastructure well government agencies including department defence australia 29 july anonymous hacked fbi-contractor mantech international posted pdf résumé sent company proof infiltrated systems anonymous claimed attack would first part promised fuck fbi friday fff campaign part larger operation antisec published 400 megabytes content company later day internal documents generally concern contracts mantech nato nature anonymous claims shows waste taxpayer money files also include dealings united states army list employee emails 31 july anonymous attacked websites 77 different law enforcement websites hosted server much 10 gigabytes data taken including personal information police officers numerous jurisdictions emails also taken well confidential information inmates confidential informants though released yet anonymous said would redact inmate names would release names informants false impression would able ‘ anonymously ’ snitch secrecy release also included demand arrested members anonymous released immediately information released however already publicly available proceeded release social security numbers 100 police officers missouri sheriffs association website following saturday 6 august released cache data websites title shooting sheriffs saturday release included information taken law enforcement websites large amounts personal information included anonymous stating sympathy officers informants may endangered release personal information long using abusing personal information anonymous claimed motive revenge arrests number participants previous operations lulzsec anonymous member topiary also used stolen credit card numbers make donations american civil liberties union electronic frontier foundation chelsea manning support network 16 august anonymous gained access email account richard garcia former assistant director charge fbi field office los angeles senior vice president vanguard defense industries name antisec claimed firm relationships united states military law enforcement organizations made legitimate target part operation also claimed breached company website run wordpress platform though company says website never affected group released 1 gigabyte information three days later taken garcia personal email account mainly related garcia former role infragard retaliation arrests people allegedly participated operation antisec especially topiary anonymous attacked website texas police chiefs association 1 september group defaced website released documents marked law enforcement sensitive official use release also included police officer private email day group brought website united states court appeals ninth circuit justice system characterization anonymous activities cyber-terrorism 21 october announced dump data related law enforcement support occupy wall street occupy movement dump including data taken international association chiefs police boston police patrolmen association sheriff office baldwin county alabama number police websites virtually hosted together also content replaced anti-police rap video dump 600 megabytes information including membership rosters internal documents social security numbers international association chiefs police nearly 1000 names ranks addresses phone numbers social security numbers police officers jefferson county alabama birmingham alabama 1000 names passwords members boston police patrolmen association financial information client list web developer marketing company matrix group business several law enforcement clients antisec claimed least 40 law enforcement related websites included attack november 18 2011 anonymous posted 38,000 email messages gmail account alfredo fred baclagan special agent supervising computer crime investigations california department justice computer technology crime hightech response team site tor pirate bay also added claimed baclagan personal home address phone number group claimed action part attack law enforcement support occupy movement protest prosecution computer criminals general also claimed read text messages listened voicemail used google voice account call text friends family also purchased camera using google wallet release includes forensic experts discussing techniques tracking cybercriminals different companies respond law enforcement requests information 4 september 2012 1 million unique device ids apple products published group associated anonymous group claimed 1 million ids part dataset 12.36 million records taken fbi laptop fbi responded saying aware unauthorized data release according ars technica article published september 10 digital publishing company named bluetoad come forward take responsibility leak million ios unique device identifiers udids previously attributed alleged fbi laptop hack number interviews published monday bluetoad apologized public incident explaining hackers broken company systems order steal file original announcement operation anti-security included call lulzsec spread name antisec physical graffiti days number locations mission beach san diego vandalized pieces graffiti reading phrase 4 july fox news twitter account foxnewspolitics hacked false tweets reporting president united states barack obama shot three times killed sent account script kiddies group close ties anonymous including two hackers former membership group claimed responsibility attack hoax group claimed action name operation anti-security would continue looking expose information corporations assist antisec united states secret service investigating incident threat president group subsequently hacked facebook page pharmaceutical company pfizer claiming moral reasons part antisec posted numerous messages company facebook wall mocking security 4 july someone going name f1esc posted file pirate bay containing 600 megabytes information described national au election data labelled tag antisec reality data concerned 2011 new south wales state election taken government website designed provide election results data publicly available data proved freely accessible information instead hack early july group redhack hacked defaced 1000 websites based turkey claimed mark anniversary sivas massacre part operation anti-security websites belonged agencies government turkey adnan oktar islamic creationist group vowed continue contribution antisec operation 6 july hacker called p0keu released around 2,658 usernames passwords hidden behind hash functions email addresses blog tamilcanadian.com gave reason chose website attack antisec label 14 july leaked part stevens institute technology website database least 31 records database contained plain text files email addresses user names passwords site users p0keu posted user information pastebin p0keu continued hacking labelled releases antisec slogan netherlands splinter group inspired lulzsec formed calling antisec nl group hacked websites online dating service pepper.nl software company nimbuzz four people believed police members later arrested 24 july group called bashcrew hacked website house representatives philippines name antisec names telephone numbers email addresses members filipino congress released via pastebin group claiming may also release blood types private websites members hacker going name thehacker12 self-purported antisec supporter member anonymous released data stolen event management company allianceforbiz.com 24 august 2011 mediafire pastebin release contained spreadsheet usernames email addresses passwords employers information around 20,000 people many united states government employees contractors organization employees compromised small business administration law enforcement agencies various countries arrested searched property alleged participants operation antisec suspects come different groups carried attacks part operation 19 july 2011 london metropolitan police announced arrest possible core lulzsec member t-flow 16-year-old male arrested south london charges violating computer misuse act part operation involving arrest several hackers affiliated anonymous united states united kingdom day fbi arrested 21-year-old lance moore las cruces new mexico accused stealing thousands documents applications lulzsec published part so-called final release operation lulzsec denied membership arrested stating six us 're still 20 july prosecutors netherlands released details arrests four suspects aged 17 18 25 35 located different dutch cities accused part hacking group antisec nl operation participant inspired lulzsec four going online handles ziaolin calimero dutchd3v1l time arrested 19 july computers electronic equipment confiscated evidence prosecutors identified suspects computer security company fox-it helped gain access chat channel thought used group police central e-crime unit arrested 18-year-old man shetland 27 july 2011 suspected lulzsec member topiary also searched house interviewed 17-year-old lincolnshire possibly connected investigation scotland yard later identified man arrested yell shetland resident jake davis charged unauthorized access computer computer misuse act 1990 encouraging assisting criminal activity serious crime act 2007 conspiracy launch denial-of-service attack serious organised crime unit contrary criminal law act 1977 criminal conspiracy also criminal law act 1977 police confiscated dell laptop 100-gigabyte hard drive ran 16 different virtual machines details relating attack sony hundreds thousands email addresses passwords found computer london court released davis bail conditions live curfew parents access internet lawyer gideon cammerman stated client help publicize lulzsec anonymous attacks lacks technical skills anything sympathizer early september 2011 scotland yard made two arrests relating lulzsec police arrested 24-year-old male mexborough south yorkshire 20-year-old male warminster wiltshire two accused conspiring commit offenses computer misuse act 1990 police said arrests related investigations lulzsec member kayla 6 march 2012 two men great britain one united states two ireland charged connection alleged involvement lulzsec fbi revealed supposed lulzsec leader hector xavier monsegur went username sabu aiding law enforcement since pleading guilty twelve counts including conspiracy computer hacking 15 august 2011 part plea deal exchange cooperation federal prosecutors agreed prosecute monsegur computer hacking also prosecute two attempts sell marijuana possession illegal handgun purchasing stolen property charging 15,000 former employer credit card case identity theft directing people buy prescription drugs illegal sources still faces misdemeanor charge impersonating federal agent five suspects charged conspiracy jake davis accused hacker topiary previously arrested ryan ackroyd london accused kayla darren martyn ireland accused pwnsauce donncha ’ cearrbhail ireland accused palladium jeremy hammond chicago accused anarchaos member lulzsec authorities suspect hammond member anonymous charged access device fraud hacking relation supposed involvement december 2011 attack intelligence company stratfor part operation antisec
node10:Wikipedia entry. Entry name: Lua_(programming_language). Entry content: lua programming language lua meaning moon lightweight high-level multi-paradigm programming language designed primarily embedded use applications lua cross-platform since interpreter compiled bytecode written ansi c lua relatively simple c api embed applications lua originally designed 1993 language extending software applications meet increasing demand customization time provided basic facilities procedural programming languages complicated domain-specific features included rather included mechanisms extending language allowing programmers implement features lua intended general embeddable extension language designers lua focused improving speed portability extensibility ease-of-use development lua created 1993 roberto ierusalimschy luiz henrique de figueiredo waldemar celes members computer graphics technology group tecgraf pontifical catholic university rio de janeiro brazil 1977 1992 brazil policy strong trade barriers called market reserve computer hardware software atmosphere tecgraf clients could afford either politically financially buy customized software abroad reasons led tecgraf implement basic tools needed scratch lua predecessors data-description/configuration languages sol simple object language del data-entry language independently developed tecgraf 1992–1993 add flexibility two different projects interactive graphical programs engineering applications petrobras company lack flow-control structures sol del petrobras felt growing need add full programming power evolution lua language authors wrote lua 1.0 designed way object constructors slightly different current light flexible style incorporated data-description syntax sol hence name lua sol also portuguese word sun lua word moon lua syntax control structures mostly borrowed modula codice_1 codice_2 codice_3/codice_4 also taken influence clu multiple assignments multiple returns function calls simpler alternative reference parameters explicit pointers c++ neat idea allowing local variable declared need snobol awk associative arrays article published dr. dobb journal lua creators also state lisp scheme single ubiquitous data-structure mechanism list major influence decision develop table primary data structure lua lua semantics increasingly influenced scheme time especially introduction anonymous functions full lexical scoping several features added new lua versions versions lua prior version 5.0 released license similar bsd license version 5.0 onwards lua licensed mit license permissive free software licences almost identical lua commonly described multi-paradigm language providing small set general features extended fit different problem types lua contain explicit support inheritance allows implemented metatables similarly lua allows programmers implement namespaces classes related features using single table implementation first-class functions allow employment many techniques functional programming full lexical scoping allows fine-grained information hiding enforce principle least privilege general lua strives provide simple flexible meta-features extended needed rather supply feature-set specific one programming paradigm result base language light—the full reference interpreter 247 kb compiled—and easily adaptable broad range applications lua dynamically typed language intended use extension scripting language compact enough fit variety host platforms supports small number atomic data structures boolean values numbers double-precision floating point 64-bit integers default strings typical data structures arrays sets lists records represented using lua single native data structure table essentially heterogeneous associative array lua implements small set advanced features first-class functions garbage collection closures proper tail calls coercion automatic conversion string number values run time coroutines cooperative multitasking dynamic module loading classic hello world program written follows print hello world print 'hello world comment lua starts double-hyphen runs end line similar ada eiffel haskell sql vhdl multi-line strings comments adorned double square brackets factorial function implemented function example function factorial n end lua four types loops codice_2 loop codice_3 loop similar codice_7 loop numeric codice_8 loop generic codice_8 loop -- condition true condition end repeat condition first last delta -- delta may negative allowing loop count end generic codice_8 loop key value pairs _g end would iterate table codice_11 using standard iterator function codice_12 returns codice_13 also nested loop loop inside another loop local grid row ipairs grid end lua treatment functions first-class values shown following example print function behavior modified end future calls codice_14 routed new function lua lexical scoping old print function accessible new modified print lua also supports closures demonstrated function addto x end fourplus addto 4 print fourplus 3 -- prints 7 -- also achieved calling function following way print addto 4 3 -- calling returned function 'addto 4 argument 3 directly new closure variable codice_15 created every time codice_16 called new anonymous function returned always access codice_15 parameter closure managed lua garbage collector like object tables important data structures design built-in composite data type lua foundation user-created types conceptually similar associative arrays php dictionaries python hashes ruby perl table collection key data pairs data referenced key words hashed heterogeneous associative array tables created using codice_18 constructor syntax tables always passed reference see call sharing key index value except codice_13 nan including functions table often used structure record using strings keys use common lua features special syntax accessing fields using table store related functions act namespace tables automatically assigned numerical key enabling used array data type first automatic index 1 rather 0 many programming languages though explicit index 0 allowed numeric key codice_20 distinct string key codice_21 length table codice_22 defined integer index codice_23 codice_24 codice_13 codice_26 codice_13 moreover codice_28 codice_13 codice_23 zero regular array non-nil values 1 given codice_23 length exactly codice_23 index last value array holes nil values non-nil values codice_33 indices directly precedes codice_13 value may consider nil value end array table array objects using hash map emulate array normally slower using actual array however lua tables optimized use arrays help avoid issue extensible semantics key feature lua metatable concept allows lua tables customized powerful ways following example demonstrates infinite table codice_23 codice_36 give codice_23-th fibonacci number using dynamic programming memoization fibs 1 1 -- initial values fibs 1 fibs 2 setmetatable fibs although lua built-in concept classes object-oriented programming achieved using two language features first-class functions tables placing functions related data table object formed inheritance single multiple implemented using metatable mechanism telling object look nonexistent methods fields parent object concept class techniques rather prototypes used similar self javascript new objects created either factory method constructs new objects scratch cloning existing object lua provides syntactic sugar facilitate object orientation declare member functions inside prototype table one use equivalent calling class methods also makes use colon equivalent creating basic vector object vector.__index vector function vector new x z -- constructor end function vector magnitude -- another method end local vec vector new 0 1 0 -- create vector print vec magnitude -- call method output 1 print vec.x -- access member variable output 0 lua programs interpreted directly textual lua file compiled bytecode run lua virtual machine compilation process typically invisible user performed run-time done offline order increase loading performance reduce memory footprint host environment leaving compiler lua bytecode also produced executed within lua using codice_38 function string library codice_39 functions lua version 5.3.4 implemented approximately 24,000 lines c code like cpus unlike virtual machines stack-based lua vm register-based therefore closely resembles actual hardware design register architecture avoids excessive copying values reduces total number instructions per function virtual machine lua 5 one first register-based pure vms wide use perl's parrot android dalvik two well-known register-based vms example bytecode listing factorial function defined shown codice_40 5.1 compiler lua intended embedded applications provides c api purpose api divided two parts lua core lua auxiliary library lua api design eliminates need manual reference management c code unlike python api api like language minimalistic advanced functionality provided auxiliary library consists largely preprocessor macros assist complex table operations lua c api stack based lua provides functions push pop simple c data types integers floats etc stack well functions manipulating tables stack lua stack somewhat different traditional stack stack indexed directly example negative indices indicate offsets top stack example −1 top recently pushed value positive indices indicate offsets bottom oldest value marshalling data c lua functions also done using stack call lua function arguments pushed onto stack codice_41 used call actual function writing c function directly called lua arguments read stack example calling lua function c int main void running example gives c api also provides special tables located various pseudo-indices lua stack codice_42 prior lua 5.2 globals table codice_11 within lua main namespace also registry located codice_44 c programs store lua values later retrieval possible write extension modules using lua api extension modules shared objects used extend functionality interpreter providing native facilities lua scripts lua side module appears namespace table holding functions variables lua scripts may load extension modules using codice_45 like modules written lua growing collection modules known rocks available package management system called luarocks spirit cpan rubygems python eggs prewritten lua bindings exist popular programming languages including scripting languages c++ number template-based approaches automatic binding generators video game development lua widely used scripting language game programmers perhaps due perceived easiness embed fast execution short learning curve 2003 poll conducted gamedev.net showed lua popular scripting language game programming 12 january 2012 lua announced winner front line award 2011 magazine game developer category programming tools large number non-game applications also use lua extensibility luatex implementation tex type-setting language redis key-value database nginx web server scribunto extension lua available scripting language mediawiki software powers wikipedia wikis among uses allowing integration data wikidata articles powering
node11:Wikipedia entry. Entry name: BREACH. Entry content: breach breach backronym browser reconnaissance exfiltration via adaptive compression hypertext security exploit https using http compression breach built based crime security exploit breach announced august 2013 black hat conference security researchers angelo prado neal harris yoel gluck idea discussed community announcement crime attack presented general attack could work effectively large number protocols exploits spdy request compression tls compression demonstrated largely mitigated browsers servers crime exploit http compression mitigated even though authors crime warned vulnerability might even widespread spdy tls compression combined breach instance crime attack http compression—the use gzip deflate data compression algorithms via content-encoding option within http many web browsers servers given compression oracle rest breach attack follows general lines crime exploit performing initial blind brute-force search guess bytes followed divide-and-conquer search expand correct guess arbitrarily large amount content breach exploits compression underlying http protocol therefore turning tls compression makes difference breach still perform chosen-plaintext attack http payload result clients servers either forced disable http compression completely thus reducing performance adopt workarounds try foil breach individual attack scenarios using cross-site request forgery csrf protection another suggested approach disable http compression whenever referrer header indicates cross-site request header present approach allows effective mitigation attack without losing functionality incurring performance penalty affected requests around 2013-2014 ietf draft proposal tls extension length-hiding padding theory could used mitigation attack allows actual length tls payload disguised insertion padding round fixed set lengths randomize external length thereby decreasing likelihood detecting small changes compression ratio basis breach attack however draft since expired without action
node12:Wikipedia entry. Entry name: Intrusion_detection_system. Entry content: intrusion detection system intrusion detection system ids device software application monitors network systems malicious activity policy violations malicious activity violation typically reported either administrator collected centrally using security information event management siem system siem system combines outputs multiple sources uses alarm filtering techniques distinguish malicious activity false alarms ids types range scope single computers large networks common classifications network intrusion detection systems nids host-based intrusion detection systems hids system monitors important operating system files example hids system analyzes incoming network traffic example nids also possible classify ids detection approach well-known variants signature-based detection recognizing bad patterns malware anomaly-based detection detecting deviations model good traffic often relies machine learning another reputation-based detection recognizing potential threat according reputation scores ids products ability respond detected intrusions systems response capabilities typically referred intrusion prevention system intrusion detection systems also serve specific purposes augmenting custom tools using honeypot attract characterize malicious traffic although relate network security ids differs firewall firewall looks outwardly intrusions order stop happening firewalls limit access networks prevent intrusion signal attack inside network ids describes suspected intrusion taken place signals alarm ids also watches attacks originate within system traditionally achieved examining network communications identifying heuristics patterns often known signatures common computer attacks taking action alert operators system terminates connections called intrusion prevention system performs access control like application layer firewall ids classified detection takes place network host detection method employed signature anomaly-based network intrusion detection systems nids placed strategic point points within network monitor traffic devices network performs analysis passing traffic entire subnet matches traffic passed subnets library known attacks attack identified abnormal behavior sensed alert sent administrator example nids would installing subnet firewalls located order see someone trying break firewall ideally one would scan inbound outbound traffic however might create bottleneck would impair overall speed network opnet netsim commonly used tools simulating network intrusion detection systems nid systems also capable comparing signatures similar packets link drop harmful detected packets signature matching records nids classify design nids according system interactivity property two types on-line off-line nids often referred inline tap mode respectively on-line nids deals network real time analyses ethernet packets applies rules decide attack off-line nids deals stored data passes processes decide attack nids also combined technologies increase detection prediction rates artificial neural network based ids capable analyzing huge volumes data smart way due self-organizing structure allows ins ids efficiently recognize intrusion patterns neural networks assist ids predicting attacks learning mistakes inn ids help develop early warning system based two layers first layer accepts single values second layer takes first layers output input cycle repeats allows system automatically recognize new unforeseen patterns network system average 99.9 detection classification rate based research results 24 network attacks divided four categories dos probe remote-to-local user-to-root host intrusion detection systems hids run individual hosts devices network hids monitors inbound outbound packets device alert user administrator suspicious activity detected takes snapshot existing system files matches previous snapshot critical system files modified deleted alert sent administrator investigate example hids usage seen mission critical machines expected change configurations signature-based ids refers detection attacks looking specific patterns byte sequences network traffic known malicious instruction sequences used malware terminology originates anti-virus software refers detected patterns signatures although signature-based ids easily detect known attacks difficult detect new attacks pattern available signature-based ids signatures released vendor products on-time updating ids signature key aspect anomaly-based intrusion detection systems primarily introduced detect unknown attacks part due rapid development malware basic approach use machine learning create model trustworthy activity compare new behavior model since models trained according applications hardware configurations machine learning based method better generalized property comparison traditional signature-based ids although approach enables detection previously unknown attacks may suffer false positives previously unknown legitimate activity may also classified malicious existing idss suffer time-consuming detection process degrades performance idss efficient feature selection algorithm makes classification process used detection reliable new types could called anomaly-based intrusion detection systems viewed gartner user entity behavior analytics ueba evolution user behavior analytics category network traffic analysis nta particular nta deals malicious insiders well targeted external attacks compromised user machine account gartner noted organizations opted nta traditional ids systems may attempt stop intrusion attempt neither required expected monitoring system intrusion detection prevention systems idps primarily focused identifying possible incidents logging information reporting attempts addition organizations use idps purposes identifying problems security policies documenting existing threats deterring individuals violating security policies idps become necessary addition security infrastructure nearly every organization idps typically record information related observed events notify security administrators important observed events produce reports many idps also respond detected threat attempting prevent succeeding use several response techniques involve idps stopping attack changing security environment e.g reconfiguring firewall changing attack content intrusion prevention systems ips also known intrusion detection prevention systems idps network security appliances monitor network system activities malicious activity main functions intrusion prevention systems identify malicious activity log information activity report attempt block stop it.. intrusion prevention systems considered extensions intrusion detection systems monitor network traffic and/or system activities malicious activity main differences unlike intrusion detection systems intrusion prevention systems placed in-line able actively prevent block intrusions detected ips take actions sending alarm dropping detected malicious packets resetting connection blocking traffic offending ip address ips also correct errors defragment packet streams mitigate tcp sequencing issues clean unwanted transport network layer options.. intrusion prevention systems classified four different types majority intrusion prevention systems utilize one three detection methods signature-based statistical anomaly-based stateful protocol analysis number techniques attackers using following considered 'simple measures taken evade ids earliest preliminary ids concept delineated 1980 james anderson national security agency consisted set tools intended help administrators review audit trails user access logs file access logs system event logs examples audit trails fred cohen noted 1987 impossible detect intrusion every case resources needed detect intrusions grow amount usage dorothy e. denning assisted peter g. neumann published model ids 1986 formed basis many systems today model used statistics anomaly detection resulted early ids sri international named intrusion detection expert system ides ran sun workstations could consider user network level data ides dual approach rule-based expert system detect known types intrusions plus statistical anomaly detection component based profiles users host systems target systems author ides intelligent system detecting intruders teresa f. lunt proposed adding artificial neural network third component said three components could report resolver sri followed ides 1993 next-generation intrusion detection expert system nides multics intrusion detection alerting system midas expert system using p-best lisp developed 1988 based work denning neumann haystack also developed year using statistics reduce audit trails 1986 national security agency started ids research transfer program rebecca bace bace later published seminal text subject intrusion detection 2000 wisdom sense w statistics-based anomaly detector developed 1989 los alamos national laboratory w created rules based statistical analysis used rules anomaly detection 1990 time-based inductive machine tim anomaly detection using inductive learning sequential user patterns common lisp vax 3500 computer network security monitor nsm performed masking access matrices anomaly detection sun-3/50 workstation information security officer assistant isoa 1990 prototype considered variety strategies including statistics profile checker expert system computerwatch bell labs used statistics rules audit data reduction intrusion detection 1991 researchers university california davis created prototype distributed intrusion detection system dids also expert system network anomaly detection intrusion reporter nadir also 1991 prototype ids developed los alamos national laboratory integrated computing network icn heavily influenced work denning lunt nadir used statistics-based anomaly detector expert system lawrence berkeley national laboratory announced bro 1998 used rule language packet analysis libpcap data network flight recorder nfr 1999 also used libpcap ape developed packet sniffer also using libpcap november 1998 renamed snort one month later snort since become world largest used ids/ips system 300,000 active users monitor local systems remote capture points using tzsp protocol audit data analysis mining adam ids 2001 used tcpdump build profiles rules classifications 2003 yongguang zhang wenke lee argue importance ids networks mobile nodes 2015 viegas colleagues proposed anomaly-based intrusion detection engine aiming system-on-chip soc applications internet things iot instance proposal applies machine learning anomaly detection providing energy-efficiency decision tree naive-bayes k-nearest neighbors classifiers implementation atom cpu hardware-friendly implementation fpga literature first work implement classifier equivalently software hardware measures energy consumption additionally first time measured energy consumption extracting features used make network packet classification implemented software hardware
node13:Wikipedia entry. Entry name: X86-64. Entry content: x86-64 x86-64 also known x64 x86_64 amd64 intel 64 64-bit version x86 instruction set introduces two new modes operation 64-bit mode compatibility mode along new 4-level paging mode 64-bit mode new paging mode supports vastly larger amounts virtual memory physical memory possible 32-bit predecessors allowing programs store larger amounts data memory x86-64 also expands general-purpose registers 64-bit well extends number 8 limited fixed functionality e.g stack management 16 fully general provides numerous enhancements floating point operations supported via mandatory sse2-like instructions x87/mmx style registers generally used still available even 64-bit mode instead set 32 vector registers 128 bits used store one two double-precision numbers one four single precision numbers various integer formats 64-bit mode instructions modified support 64-bit operands 64-bit addressing mode compatibility mode allows 16- 32-bit user applications run unmodified coexisting 64-bit applications 64-bit operating system supports full x86 16-bit 32-bit instruction sets remain implemented hardware without intervening emulation older executables run little performance penalty newer modified applications take advantage new features processor design achieve performance improvements also processor supporting x86-64 still powers real mode full backward compatibility x86 processors done since 80286 original specification created amd released 2000 implemented amd intel via amd k8 microarchitecture opteron athlon64 processors first implement first significant addition x86 architecture designed company intel intel forced follow suit introduced modified netburst family software-compatible amd specification via technologies introduced x86-64 via isaiah architecture via nano x86-64 architecture distinct intel itanium architecture formerly ia-64 compatible native instruction set level x86 architecture operating systems applications written one run amd64 created alternative radically different ia-64 architecture designed intel hewlett packard originally announced 1999 full specification became available august 2000 amd64 architecture positioned amd beginning evolutionary way add 64-bit computing capabilities existing x86 architecture opposed intel approach creating entirely new 64-bit architecture ia-64 first amd64-based processor opteron released april 2003 amd processors implementing amd64 architecture include opteron athlon 64 athlon 64 x2 athlon 64 fx athlon ii followed x2 x3 x4 indicate number cores xlt models turion 64 turion 64 x2 sempron palermo e6 stepping manila models phenom followed x3 x4 indicate number cores phenom ii followed x2 x3 x4 x6 indicate number cores fx fusion/apu ryzen/epyc primary defining characteristic amd64 availability 64-bit general-purpose processor registers example rax rbx 64-bit integer arithmetic logical operations 64-bit virtual addresses designers took opportunity make improvements well significant changes described although virtual addresses 64 bits wide 64-bit mode current implementations chips known planning stages allow entire virtual address space 2 bytes 16 eb used would approximately four billion times size virtual address space 32-bit machines operating systems applications need large address space foreseeable future implementing wide virtual addresses would simply increase complexity cost address translation real benefit amd therefore decided first implementations architecture least significant 48 bits virtual address would actually used address translation page table lookup addition amd specification requires significant 16 bits virtual address bits 48 63 must copies bit 47 manner akin sign extension requirement met processor raise exception addresses complying rule referred canonical form canonical form addresses run 0 00007fff'ffffffff ffff8000'00000000 ffffffff'ffffffff total 256 tb usable virtual address space still 65,536 times larger virtual 4 gb address space 32-bit machines feature eases later scalability true 64-bit addressing many operating systems including limited windows nt family take higher-addressed half address space named kernel space leave lower-addressed half user space application code user mode stacks heaps data regions canonical address design ensures every amd64 compliant implementation effect two memory halves lower half starts 00000000'00000000 grows upwards virtual address bits become available higher half docked top address space grows downwards also enforcing canonical form addresses checking unused address bits prevents use operating system tagged pointers flags privilege markers etc. use could become problematic architecture extended implement virtual address bits first versions windows x64 even use full 256 tb restricted 8 tb user space 8 tb kernel space windows support entire 48-bit address space windows 8.1 released october 2013 64-bit addressing mode long mode superset physical address extensions pae page sizes may 4 kb 2 bytes 2 mb 2 bytes long mode also supports page sizes 1 gb 2 bytes rather three-level page table system used systems pae mode systems running long mode use four levels page table pae page-directory pointer table extended four entries 512 additional page-map level 4 pml4 table added containing 512 entries 48-bit implementations full mapping hierarchy 4 kb pages whole 48-bit space would take bit 512 gb memory 0.195 256 tb virtual space intel proposed scheme five-level page table implemented would allow intel 64 processors support 57-bit virtual address space operating system also limit virtual address space details applicable given operating system compatibility characteristics section current amd64 processors support physical address space 2 bytes ram 256 tb however known x86-64 motherboards support 256 tb ram operating system may place additional limits amount ram usable supported details point given operating system compatibility characteristics section article architecture two primary modes operation long mode legacy mode long mode architecture intended primary mode operation combination processor native 64-bit mode combined 32-bit 16-bit compatibility mode used 64-bit operating systems 64-bit operating system 64-bit programs run 64-bit mode 32-bit 16-bit protected mode applications need use either real mode virtual 8086 mode order execute time run compatibility mode real-mode programs programs use virtual 8086 mode time run long mode unless modes emulated software however programs may started operating system running long mode processors supporting vt-x amd-v creating virtual processor running desired mode since basic instruction set almost performance penalty executing protected mode x86 code unlike intel ia-64 differences underlying instruction set mean running 32-bit code must done either emulation x86 making process slower dedicated x86 coprocessor however x86-64 platform many x86 applications could benefit 64-bit recompile due additional registers 64-bit code guaranteed sse2-based fpu support compiler use optimization however applications regularly handle integers wider 32 bits cryptographic algorithms need rewrite code handling huge integers order take advantage 64-bit registers legacy mode mode used 32-bit 16-bit protected mode operating systems mode processor acts like older x86 processor 16-bit 32-bit code executed legacy mode allows maximum 32 bit virtual addressing limits virtual address space 4 gb 64-bit programs run legacy mode intel 64 intel implementation x86-64 used implemented various processors made intel historically amd developed produced processors instruction sets patterned intel original designs x86-64 roles reversed intel found position adopting isa amd created extension intel x86 processor line intel project originally codenamed yamhill yamhill river oregon willamette valley several years denying existence intel announced february 2004 idf project indeed underway intel chairman time craig barrett admitted one worst-kept secrets intel name instruction set changed several times name used idf ct presumably clackamas technology another codename oregon river within weeks began referring ia-32e ia-32 extensions march 2004 unveiled official name em64t extended memory 64 technology late 2006 intel began instead using name intel 64 implementation paralleling amd use name amd64 first processor implement intel 64 multi-socket processor xeon code-named nocona june 2004 contrast initial prescott chips february 2004 enable feature intel subsequently began selling intel 64-enabled pentium 4s using e0 revision prescott core sold oem market pentium 4 model f. e0 revision also adds execute disable xd intel name nx bit intel 64 included current xeon code-named irwindale intel official launch intel 64 name em64t time mainstream desktop processors n0 stepping prescott-2m first intel mobile processor implementing intel 64 merom version core 2 processor released july 27 2006 none intel earlier notebook cpus core duo pentium celeron mobile pentium 4 implement intel 64 intel processors implementing intel64 architecture include pentium 4 f-series/5x1 series 506 516 celeron models 3x1 3x6 355 347 352 360 365 later celerons models xeon since nocona models pentium dual-core processors since merom-2m atom 230 330 d410 d425 d510 d525 n450 n455 n470 n475 n550 n570 n2600 n2800 versions pentium pentium extreme edition core 2 core i9 core i7 core i5 core i3 processors xeon phi 7200 series processors via technologies introduced first implementation x86-64 architecture 2008 five years development cpu division centaur technology codenamed isaiah 64-bit architecture unveiled january 24 2008 launched may 29 via nano brand name processor supports number via-specific x86 extensions designed boost efficiency low-power appliances expected isaiah architecture twice fast integer performance four times fast floating-point performance previous-generation via esther equivalent clock speed power consumption also expected par previous-generation via cpus thermal design power ranging 5 w 25 w. completely new design isaiah architecture built support features like x86-64 instruction set x86 virtualization unavailable predecessors via c7 line retaining encryption extensions although nearly identical differences two instruction sets semantics seldom used machine instructions situations mainly used system programming compilers generally produce executables i.e machine code avoid differences least ordinary application programs therefore interest mainly developers compilers operating systems similar must deal individual special system instructions supercomputers tracked top500 appearance 64-bit extensions x86 architecture enabled 64-bit x86 processors amd intel light olive circles red circles diagram provided section respectively replace risc processor architectures previously used systems including pa-risc sparc alpha others well 32-bit x86 green dots purple dots diagram even though intel initially tried unsuccessfully replace x86 new incompatible 64-bit architecture itanium processor main non-x86 cpu architecture still used supercomputing power isa used ibm power microprocessors blue diamond pattern diagram sparc far behind numbers top500 2011 fujitsu sparc64 viiifx based supercomputer without co-processors reached number one since dropped top-10 first arm-based supercomputer appeared list 2018 recent years non-cpu architecture co-processors gpgpu also played big role performance intel xeon phi knights corner coprocessors implement subset x86-64 vector extensions also used along x86-64 processors tianhe-2 supercomputer following operating systems releases support x86-64 architecture long mode preliminary infrastructure work started february 2004 x86-64 port development later stalled development started july 2007 continued google summer code 2008 soc 2009 first official release contain x86-64 support version 2.4 freebsd first added x86-64 support name amd64 experimental architecture 5.1-release june 2003 included standard distribution architecture 5.2-release january 2004 since freebsd designated tier 1 platform 6.0-release version cleaned quirks running x86 executables amd64 drivers work x86 architecture work currently done integrate fully x86 application binary interface abi manner linux 32-bit abi compatibility currently works x86-64 architecture support first committed netbsd source tree june 19 2001 netbsd 2.0 released december 9 2004 netbsd/amd64 fully integrated supported port 32-bit code still supported 64-bit mode netbsd-32 kernel compatibility layer 32-bit syscalls nx bit used provide non-executable stack heap per-page granularity segment granularity used 32-bit x86 openbsd supported amd64 since openbsd 3.5 released may 1 2004 complete in-tree implementation amd64 support achieved prior hardware initial release amd loaned several machines project hackathon year openbsd developers taken platform support nx bit allowed easy implementation w^x feature code amd64 port openbsd also runs intel 64 processors contains cloned use amd64 extensions since intel left page table nx bit early intel 64 processors w^x capability intel cpus later intel 64 processors added nx bit name xd bit symmetric multiprocessing smp works openbsd amd64 port starting release 3.6 november 1 2004 possible enter long mode dos without dos extender user must return real mode order call bios dos interrupts may also possible enter long mode dos extender similar dos/4gw complex since x86-64 lacks virtual 8086 mode dos aware benefits expected unless running dos emulation adequate virtualization driver backend example mass storage interface linux first operating system kernel run x86-64 architecture long mode starting 2.4 version 2001 preceding hardware availability linux also provides backward compatibility running 32-bit executables permits programs recompiled long mode retaining use 32-bit programs several linux distributions currently ship x86-64-native kernels userlands arch linux suse mandriva debian allow users install set 32-bit components libraries installing 64-bit dvd thus allowing existing 32-bit applications run alongside 64-bit os distributions fedora slackware ubuntu available one version compiled 32-bit architecture another compiled 64-bit architecture fedora red hat enterprise linux allow concurrent installation userland components 32 64-bit versions 64-bit system x32 abi application binary interface introduced linux 3.4 allows programs compiled x32 abi run 64-bit mode x86-64 using 32-bit pointers data fields though limits program virtual address space 4 gb also decreases memory footprint program cases allow run faster 64-bit linux allows 128 tb virtual address space individual processes address approximately 64 tb physical memory subject processor system limitations mac os x 10.4.7 higher versions mac os x 10.4 run 64-bit command-line tools using posix math libraries 64-bit intel-based machines versions mac os x 10.4 10.5 run 64-bit powerpc machines libraries frameworks work 64-bit applications mac os x 10.4 kernel kernel extensions 32-bit mac os x 10.5 supports 64-bit gui applications using cocoa quartz opengl x11 64-bit intel-based machines well 64-bit powerpc machines non-gui libraries frameworks also support 64-bit applications platforms kernel kernel extensions 32-bit mac os x 10.6 first version macos supports 64-bit kernel however 64-bit computers run 64-bit kernel 64-bit computers run 64-bit kernel default 64-bit kernel like 32-bit kernel supports 32-bit applications kernels also support 64-bit applications 32-bit applications virtual address space limit 4 gb either kernel os x 10.8 includes 64-bit kernel continues support 32-bit applications 64-bit kernel support 32-bit kernel extensions 32-bit kernel support 64-bit kernel extensions macos uses universal binary format package 32- 64-bit versions application library code single file appropriate version automatically selected load time mac os x 10.6 universal binary format also used kernel kernel extensions support 32-bit 64-bit kernels solaris 10 later releases support x86-64 architecture solaris 10 sparc architecture one operating system image contains 32-bit kernel 64-bit kernel labeled x64/x86 dvd-rom image default behavior boot 64-bit kernel allowing 64-bit existing new 32-bit executables run 32-bit kernel also manually selected case 32-bit executables run codice_24 command used determine system running 64-bit kernel solaris 11 64-bit kernel provided however 64-bit kernel supports 32- 64-bit executables libraries system calls x64 editions microsoft windows client server—windows xp professional x64 edition windows server 2003 x64 edition—were released march 2005 internally actually build 5.2.3790.1830 sp1 share source base operating system binaries even system updates released unified packages much manner windows 2000 professional server editions x86 windows vista also many different editions released january 2007 windows 7 released july 2009 windows server 2008 r2 sold x64 itanium editions later versions windows server offer x64 edition versions windows x64 prior windows 8.1 windows server 2012 r2 offer following windows 8.1 windows server 2012 r2 user mode kernel mode virtual address spaces extended 128 tb versions windows install processors lack codice_17 instruction following additional characteristics apply x64 versions windows playstation 4 xbox one successors incorporate amd x86-64 processors based jaguar microarchitecture firmware games written x86-64 code legacy x86 code involved since amd64 intel 64 substantially similar many software hardware products use one vendor-neutral term indicate compatibility implementations amd original designation processor architecture x86-64 still sometimes used purpose variant x86_64 companies microsoft sun microsystems/oracle corporation use contraction x64 marketing material term ia-64 refers itanium processor confused x86-64 completely different instruction set many operating systems products especially introduced x86-64 support prior intel entry market use term amd64 amd64 refer amd64 intel 64. x86-64/amd64 solely developed amd amd holds patents techniques used amd64 patents must licensed amd order implement amd64 intel entered cross-licensing agreement amd licensing amd patents existing x86 techniques licensing amd patents techniques used x86-64 2009 amd intel settled several lawsuits cross-licensing disagreements extending cross-licensing agreements
node14:Wikipedia entry. Entry name: Cloudbleed. Entry content: cloudbleed cloudbleed security bug discovered february 17 2017 affecting cloudflare reverse proxies caused edge servers run past end buffer return memory contained private information http cookies authentication tokens http post bodies sensitive data result data cloudflare customers leaked went cloudflare customers happened server memory particular moment data cached search engines discovery reported google project zero team tavis ormandy posted issue team issue tracker said informed cloudflare problem february 17 proof-of-concept attack got cloudflare server return private messages major dating sites full messages well-known chat service online password manager data frames adult video sites hotel bookings 're talking full https requests client ip addresses full responses cookies passwords keys data everything effects cloudbleed similar 2014 heartbleed bug allowing unauthorized third parties access data memory programs running web servers including data shielded tls extent cloudbleed also could impacted many users heartbleed since affected security content delivery service used close 2 million websites tavis ormandy first discover vulnerability immediately drew comparison heartbleed saying took every ounce strength call issue 'cloudbleed report thursday february 23 2017 cloudflare wrote post noting bug serious leaked memory could contain private information cached search engines also discovered evidence malicious exploits bug reports existence. br greatest period impact february 13 february 18 around 1 every 3,300,000 http requests cloudflare potentially resulting memory leakage ’ 0.00003 requests .cloudflare acknowledged memory could leaked early september 22 2016 company also stated one private keys used machine-to-machine encryption leaked turned underlying bug caused memory leak present ragel-based parser many years memory leaked way internal nginx buffers used introducing cf-html subtly changed buffering enabled leakage even though problems cf-html john graham-cumming cloudflare cto noted cloudflare clients uber okcupid n't directly informed leaks due security risks involved situation “ backdoor communication outside cloudflare — google search engines ” said graham-cumming also said unfortunately ancient piece software contained latent security problem problem showed process migrating away added team already begun testing software possible issues tavis ormandy initially stated really impressed cloudflare quick response dedicated cleaning unfortunate issue however ormandy pressed cloudflare additional information gave several excuses n't make sense sending draft severely downplays risk customers uber stated impact service limited uber spokesperson added handful session tokens involved since changed passwords exposed okcupid ceo elie seidman said cloudflare alerted us last night bug 've looking impact okcupid members initial investigation revealed minimal exposure determine users impacted promptly notify take action protect fitbit representative stated company investigating issue concerned users change passwords immediately many major news outlets advised consumers sites using cloudflare change passwords even accounts protected 2-factor authentication could risk passwords mobile apps could impacted researchers arbor networks alert suggested us truly safe response large-scale information leak update passwords web sites app-related services use every day ... pretty much inc. magazine cybersecurity columnist joseph steinberg however advised people change passwords stating current risk much smaller price paid increased 'cybersecurity fatigue leading much bigger problems future
node15:Wikipedia entry. Entry name: Flame_(malware). Entry content: flame malware flame also known flamer skywiper skywiper modular computer malware discovered 2012 attacks computers running microsoft windows operating system program used targeted cyber espionage middle eastern countries discovery announced 28 may 2012 maher center iranian national computer emergency response team cert kaspersky lab crysys lab budapest university technology economics last stated report flame certainly sophisticated malware encountered practice arguably complex malware ever found flame spread systems local network lan record audio screenshots keyboard activity network traffic program also records skype conversations turn infected computers bluetooth beacons attempt download contact information nearby bluetooth-enabled devices data along locally stored documents sent one several command control servers scattered around world program awaits instructions servers according estimates kaspersky may 2012 flame initially infected approximately 1,000 machines victims including governmental organizations educational institutions private individuals time 65 infections happened iran israel palestine sudan syria lebanon saudi arabia egypt huge majority targets within iran flame also reported europe north america flame supports kill command wipes traces malware computer initial infections flame stopped operating public exposure kill command sent flame linked equation group kaspersky lab however costin raiu director kaspersky lab global research analysis team believes group cooperates creators flame stuxnet position superiority equation group definitely masters giving others maybe bread crumbs time time giving goodies integrate stuxnet flame flame a.k.a da flame identified may 2012 maher center iranian national cert kaspersky lab crysys lab laboratory cryptography system security budapest university technology economics kaspersky lab asked united nations international telecommunication union investigate reports virus affecting iranian oil ministry computers kaspersky lab investigated discovered md5 hash filename appeared customer machines middle eastern nations discovering pieces researchers dubbed program flame one main modules inside toolkit nowiki /nowiki frog.defaultattacks.a-installflame nowiki /nowiki according kaspersky flame operating wild since least february 2010 crysys lab reported file name main component observed early december 2007 however creation date could determined directly creation dates malware modules falsely set dates early 1994 computer experts consider cause attack april 2012 caused iranian officials disconnect oil terminals internet time iranian students news agency referred malware caused attack wiper name given malware creator however kaspersky lab believes flame may separate infection entirely wiper malware due size complexity program—described twenty times complicated stuxnet—the lab stated full analysis could require long ten years 28 may iran cert announced developed detection program removal tool flame distributing select organizations several weeks flame exposure news media symantec reported 8 june flame command control c c computers sent suicide command infected pcs remove traces flame according estimates kaspersky may 2012 initially flame infected approximately 1,000 machines victims including governmental organizations educational institutions private individuals time countries affected iran israel palestinian territories sudan syria lebanon saudi arabia egypt flame uncharacteristically large program malware 20 megabytes written partly lua scripting language compiled c++ code linked allows attack modules loaded initial infection malware uses five different encryption methods sqlite database store structured information method used inject code various processes stealthy malware modules appear listing modules loaded process malware memory pages protected read write execute permissions make inaccessible user-mode applications internal code similarities malware exploits two security vulnerabilities used previously stuxnet infect systems malware determines antivirus software installed customises behaviour example changing filename extensions uses reduce probability detection software additional indicators compromise include mutex registry activity installation fake audio driver malware uses maintain persistence compromised system flame designed deactivate automatically supports kill function makes eliminate traces files operation system receipt module controllers flame signed fraudulent certificate purportedly microsoft enforced licensing intermediate pca certificate authority malware authors identified microsoft terminal server licensing service certificate inadvertently enabled code signing still used weak md5 hashing algorithm produced counterfeit copy certificate used sign components malware make appear originated microsoft successful collision attack certificate previously demonstrated 2008 flame implemented new variation chosen-prefix collision attack like previously known cyber weapons stuxnet duqu employed targeted manner evade current security software rootkit functionality system infected flame spread systems local network via usb stick record audio screenshots keyboard activity network traffic program also records skype conversations turn infected computers bluetooth beacons attempt download contact information nearby bluetooth enabled devices data along locally stored documents sent one several command control servers scattered around world program awaits instructions servers unlike stuxnet designed sabotage industrial process flame appears written purely espionage appear target particular industry rather complete attack toolkit designed general cyber-espionage purposes using technique known sinkholing kaspersky demonstrated huge majority targets within iran attackers particularly seeking autocad drawings pdfs text files computing experts said program appeared gathering technical diagrams intelligence purposes network 80 servers across asia europe north america used access infected machines remotely 19 june 2012 washington post published article claiming flame jointly developed u.s. national security agency cia israel ’ military least five years prior project said part classified effort code-named olympic games intended collect intelligence preparation cyber-sabotage campaign aimed slowing iranian nuclear efforts according kaspersky chief malware expert geography targets also complexity threat leaves doubt nation-state sponsored research went kaspersky initially said malware bears resemblance stuxnet although may parallel project commissioned attackers analysing code kaspersky later said strong relationship flame stuxnet early version stuxnet contained code propagate via usb drives nearly identical flame module exploits zero-day vulnerability iran cert described malware encryption special pattern see coming israel daily telegraph reported due flame apparent targets—which included iran syria west bank—israel became many commentators prime suspect commentators named china u.s. possible perpetrators richard silverstein commentator critical israeli policies claimed confirmed senior israeli source malware created israeli computer experts jerusalem post wrote israel vice prime minister moshe ya'alon appeared hinted government responsible israeli spokesperson later denied implied unnamed israeli security officials suggested infected machines found israel may imply virus could traced u.s. western nations u.s. officially denied responsibility leaked nsa document mentions dealing iran discovery flame nsa gchq jointly-worked event
node16:Wikipedia entry. Entry name: Apache_Groovy. Entry content: apache groovy apache groovy java-syntax-compatible object-oriented programming language java platform static dynamic language features similar python ruby perl smalltalk used programming language scripting language java platform compiled java virtual machine jvm bytecode interoperates seamlessly java code libraries groovy uses curly-bracket syntax similar java groovy supports closures multiline strings expressions embedded strings much groovy power lies ast transformations triggered annotations groovy 1.0 released january 2 2007 groovy 2.0 july 2012 since version 2 groovy compiled statically offering type inference performance near java groovy 2.4 last major release pivotal software sponsorship ended march 2015 groovy 2.5.8 latest stable version groovy groovy since changed governance structure project management committee apache software foundation james strachan first talked development groovy blog august 2003 march 2004 groovy submitted jcp jsr 241 accepted ballot several versions released 2004 2006 java community process jcp standardization effort began version numbering changed version called 1.0 released january 2 2007 various betas release candidates numbered 1.1 december 7 2007 groovy 1.1 final released immediately renumbered groovy 1.5 reflect many changes made 2007 groovy first prize jax 2007 innovation award 2008 grails groovy web framework second prize jax 2008 innovation award november 2008 springsource acquired groovy grails company g2one august 2009 vmware acquired springsource april 2012 eight years inactivity spec lead changed status jsr 241 dormant strachan left project silently year groovy 1.0 release 2007 oct 2016 strachan stated still love groovy jenkins pipelines groovy java go typescript kotlin july 2 2012 groovy 2.0 released among new features added static compiling static type checking pivotal software joint venture spun-off emc corporation emc vmware april 2013 groovy grails formed part product portfolio pivotal ceased sponsoring groovy grails april 2015 month groovy changed governance structure codehaus repository project management committee pmc apache software foundation via incubator groovy graduated apache incubator became top-level project november 2015 valid java files also valid groovy files although two languages similar groovy code compact need elements java needs makes possible java programmers learn groovy gradually starting familiar java syntax acquiring groovy programming idioms groovy features available java include static dynamic typing keyword codice_1 operator overloading native syntax lists associative arrays maps native support regular expressions polymorphic iteration string interpolation added helper methods safe navigation operator codice_2 check automatically null pointers example codice_3 codice_4 since version 2 groovy also supports modularity able ship needed jars according project needs thus reducing size groovy library type checking static compiling project coin syntax enhancements multicatch blocks ongoing performance enhancements using codice_5 instruction introduced java 7 groovy provides native support various markup languages xml html accomplished via inline document object model dom syntax feature enables definition manipulation many types heterogeneous data assets uniform concise syntax programming methodology unlike java groovy source code file executed uncompiled script contains code outside class definition class main method runnable groovytestcase groovy script fully parsed compiled generated executing similar perl ruby occurs hood compiled version saved artifact process groovybeans groovy version javabeans groovy implicitly generates getters setters following code codice_6 codice_7 implicitly generated last two lines appear access color directly actually calling implicitly generated methods groovy offers simple consistent syntax handling lists maps reminiscent java array syntax groovy offers support prototype extension codice_8 extension modules groovy 2 objective-c-like categories codice_9 codice_8 offers domain-specific language dsl express changes class easily similar ruby open class concept groovy changes code prototyping visible java since attribute/method invocation groovy goes metaclass registry changed code accessed java going metaclass registry groovy also allows overriding methods codice_11 codice_12 among others enabling developer intercept calls object specify action simplified aspect-oriented way following code enables class codice_13 respond codice_14 property grails framework uses metaprogramming extensively enable gorm dynamic finders like codice_15 others groovy syntax permits omitting parentheses dots situations following groovy code written enabling development domain-specific languages dsls look like plain english although groovy mostly object-oriented language also offers functional programming features according groovy documentation closures groovy work similar 'method pointer enabling code written run later point time groovy closures support free variables i.e variables explicitly passed parameter exist declaration context partial application terms 'currying delegation implicit typed untyped parameters working collections determined type closure passed operation collection inferred group expressions written closure block without reference implementation responding object assigned later point using delegation usually called partial application groovy feature allows closures parameters set default parameter arguments creating new closure bound value supplying one argument codice_16 method fix argument one supplying n arguments fix arguments 1 .. n. curry also used reverse direction fixing arguments n n 1 using codice_17 groovy also supports lazy evaluation reduce/fold infinite structures immutability among others javascript object notation json xml processing groovy employs builder pattern making production data structure less verbose example following xml generated via following groovy code also processed streaming way codice_18 change implementation json codice_19 swapped codice_20 parse search functional language groovy codice_21 method serve groovy strings interpolated variables expressions using gstrings gstrings containing variables expressions must declared using double quotes complex expression must enclosed curly brackets prevents parts interpreted belonging surrounding string instead expression expression evaluation deferred employing arrow syntax according groovy documentation groovy compiler compiles groovy scripts classes point process source code end represented memory form concrete syntax tree transformed abstract syntax tree purpose ast transformations let developers hook compilation process able modify ast turned bytecode run jvm ast transformations provides groovy improved compile-time metaprogramming capabilities allowing powerful flexibility language level without runtime performance penalty examples asts groovy among others according groovy documentation traits structural construct language allows composition behaviors runtime implementation interfaces behavior overriding compatibility static type checking/compilation traits seen interfaces carrying default implementations state trait defined using trait keyword used like normal interface using keyword codice_22 traits allow wide range abilities simple composition testing notable examples groovy adoption include many integrated development environments ides text editors support groovy one alternative implementation groovy
node17:Wikipedia entry. Entry name: Defensive_computing. Entry content: defensive computing defensive computing form practice computer users help reduce risk computing problems avoiding dangerous computing practices primary goal method computing able anticipate prepare potentially problematic situations prior occurrence despite adverse conditions computer system mistakes made users achieved adherence variety general guidelines well practice specific computing techniques strategies defensive computing could divided two categories network security backup restoration data users put computers risk accessing internet networks use either allows others gain access user system important information implementing certain strategies defensive users aim reduce risk associated network access firewall collection security measures protects computer harmful inbound outbound traffic internet prevents unauthorized access computer systems security measures integrated form special software runs autonomously either individual computer systems externally built software within routers modems firewall software protect computers sending unauthorized harmful outbound traffic important defensive computing strategy seek implement quality firewall software filters inbound outbound traffic basic strategy defensive computer users install use anti-malware software firewalls may completely protect computer malicious software may able get firewall onto system anti-malware anti-virus anti-phishing email filtering software offer protection harmful software reside within computer amount malicious software available internet steadily increasing important defensive users use anti-malware effective easily updated order combat new strains malicious software developed side anti malware contains serious vulnerabilities malware could use vulnerabilities anti-malware launch malicious code anti-malware works scanning files network connections known signatures signatures never date able scan network connections encryptions ssl/tls need bypassed even broken anti-malware software monitoring emails anti-malware opens attachments analysis bug scanner used starting point malware attackers need send malware mailbox scanned automatically questionable malware scanners even useful ex mozilla developer rober o'callahan writes blog anti malware software disabled except windows defender important aspect defensive computing users skeptical data access via internet malicious software exist multitude different forms many misleading general computer users even anti-malware software defensive users think critically information access reduce chances downloading spreading malicious software strategies include scanning email attachments prior opening manually filtering suspicious emails inboxes users aware persuasive subject lines headings emails address may actually contain malicious software spam mislead users false advertisement resulting identity theft defensive users scan files download prior opening also configure computers show file extensions revealing potentially dangerous files appear harmless skepticism also applied websites visited users emails users led false advertisements also malicious software unknowingly downloaded infect computer visiting certain website despite efforts defensive computer user loss important data occur due malware power outages equipment failure general misuse although loss data completely prevented defensive users take steps minimize amount data lost restore systems previous state defensive strategy unintentional data loss regular backup important files users make multiple copies important data store either computer another device compact disc external hard drive users also upload important files internet provided access internet storage services operating systems give users option performing procedure restores computer predetermined state option available user obtain appropriate restoration software system event system failure serious case data loss user restore lost changed files remove malicious files previously exist
node18:Wikipedia entry. Entry name: Nagare_(web_framework). Entry content: nagare web framework nagare free open-source web framework developing web applications stackless python nagare uses component model inspired seaside like seaside nagare uses continuations provide framework http connectionless request response cycle n't break normal control flow application allows web applications developed much way desktop applications rapid application development however nagare written python rather smalltalk
node19:Wikipedia entry. Entry name: Nemesis_(operating_system). Entry content: nemesis operating system nemesis operating system designed university cambridge university glasgow swedish institute computer science citrix systems nemesis conceived multimedia uses mind microkernel environment application typically implemented number processes servers performing work behalf one client leads enormous difficulty accounting resource usage kernel-based system multimedia applications spend time kernel leading similar problems guiding principle design nemesis structure operating system way majority code could execute application process nemesis therefore extremely small lightweight kernel performed operating system functions shared libraries executed user process isas nemesis supports include x86 intel i486 pentium pentium pro pentium ii alpha arm strongarm sa-110 nemesis also runs evaluation boards 21064 21164
node20:Wikipedia entry. Entry name: Row_hammer. Entry content: row hammer row hammer also written rowhammer unintended undesirable side effect dynamic random-access memory dram memory cells leak charges interact electrically possibly leaking changing contents nearby memory rows addressed original memory access bypass isolation dram memory cells results high cell density modern dram triggered specially crafted memory access patterns rapidly activate memory rows numerous times row hammer effect used privilege escalation computer security exploits network-based attacks also theoretically possible fast network connection attacker victim different hardware-based techniques exist prevent row hammer effect occurring including required support processors types dram memory modules row hammer rarely never affects ddr ddr2 sdram modules affects many ddr3 ddr4 sdram modules dynamic ram dram bit stored data occupies separate memory cell electrically implemented one capacitor one transistor charge state capacitor charged discharged determines whether dram cell stores 1 0 binary value huge numbers dram memory cells packed integrated circuits together additional logic organises cells purposes reading writing refreshing data memory cells blue squares illustration organised matrices addressed rows columns memory address applied matrix broken row address column address processed row column address decoders illustration vertical horizontal green rectangles respectively row address selects row read operation selection also known row activation bits cells row transferred sense amplifiers form row buffer red squares illustration exact bit selected using column address consequently read operations destructive nature design dram requires memory cells rewritten values read transferring cell charges row buffer write operations decode addresses similar way result design entire rows must rewritten value single bit changed result storing data bits using capacitors natural discharge rate dram memory cells lose state time require periodic rewriting memory cells process known refreshing another result design dram memory susceptible random changes stored data known soft memory errors attributed cosmic rays causes different techniques counteract soft memory errors improve reliability dram error-correcting code ecc memory advanced variants lockstep memory commonly used increased densities dram integrated circuits ics led physically smaller memory cells capable storing smaller charges resulting lower operational noise margins increased rates electromagnetic interactions memory cells greater possibility data loss result disturbance errors observed caused cells interfering operation manifesting random changes values bits stored affected memory cells awareness disturbance errors dates back early 1970s intel 1103 first commercially available dram ic since dram manufacturers employed various mitigation techniques counteract disturbance errors improving isolation cells performing production testing however researchers proved 2014 analysis commercially available ddr3 sdram chips manufactured 2012 2013 susceptible disturbance errors using term row hammer name associated side effect led observed bit flips opportunity row hammer effect occur ddr3 memory primarily attributed ddr3 high density memory cells results associated interactions cells rapid dram row activations determined primary cause frequent row activations cause voltage fluctuations associated row selection lines observed induce higher-than-natural discharge rates capacitors belonging nearby adjacent cases memory rows called victim rows affected memory cells refreshed lose much charge disturbance errors occur tests show disturbance error may observed performing around 139,000 subsequent memory row accesses cache flushes one memory cell every 1,700 cells may susceptible tests also show rate disturbance errors substantially affected increased environment temperature depends actual contents dram certain bit patterns result significantly higher disturbance error rates variant called double-sided hammering involves targeted activations two dram rows surrounding victim row illustration provided section variant would activating yellow rows aim inducing bit flips purple row case would victim row tests show approach may result significantly higher rate disturbance errors compared variant activates one victim row neighbouring dram rows different methods exist less successful detection prevention correction mitigation row hammer effect tests show simple ecc solutions providing single-error correction double-error detection sec ded capabilities able correct detect observed disturbance errors include two flipped bits per memory word flipping three bits prevents ecc noticing modification effective solution introduce frequent memory refreshing refresh intervals shorter usual 64 ms technique results higher power consumption increased processing overhead vendors provide firmware updates implement type mitigation one complex prevention measures performs counter-based identification frequently accessed memory rows proactively refreshes neighbouring rows another method issues additional infrequent random refreshes memory rows neighbouring accessed rows regardless access frequency research shows two prevention measures cause negligible performance impacts since release ivy bridge microarchitecture intel xeon processors support so-called pseudo target row refresh ptrr used combination ptrr-compliant ddr3 dual in-line memory modules dimms mitigate row hammer effect automatically refreshing possible victim rows negative impact performance power consumption used dimms ptrr-compliant xeon processors default fall back performing dram refreshes twice usual frequency results slightly higher memory access latency may reduce memory bandwidth 2–4 lpddr4 mobile memory standard published jedec includes optional hardware support so-called target row refresh trr prevents row hammer effect without negatively impacting performance power consumption additionally manufacturers implement trr ddr4 products although part ddr4 memory standard published jedec internally trr identifies possible victim rows counting number row activations comparing predefined chip-specific maximum activate count mac maximum activate window values refreshes rows prevent bit flips mac value maximum total number row activations may encountered particular dram row within time interval equal shorter amount time neighbouring rows identified victim rows trr may also flag row victim row sum row activations two neighbouring rows reaches mac limit within time window due necessity huge numbers rapidly performed dram row activations row hammer exploits issue large numbers uncached memory accesses cause cache misses detected monitoring rate cache misses unusual peaks using hardware performance counters version 5.0 memtest86 memory diagnostic software released december 3 2013 added row hammer test checks whether computer ram susceptible disturbance errors works computer boots uefi without uefi boots older version hammer test memory protection way preventing processes accessing memory assigned one concepts behind modern operating systems using memory protection combination security-related mechanisms protection rings possible achieve privilege separation processes programs computer systems general divided parts limited specific privileges require perform particular task using privilege separation also reduce extent potential damage caused computer security attacks restricting effects specific parts system disturbance errors explained section effectively defeat various layers memory protection short circuiting low hardware level practically creating unique attack vector type allows processes alter contents arbitrary parts main memory directly manipulating underlying memory hardware comparison conventional attack vectors buffer overflows aim circumventing protection mechanisms software level exploiting various programming mistakes achieve alterations otherwise inaccessible main memory contents initial research row hammer effect published june 2014 described nature disturbance errors indicated potential constructing attack provide examples working security exploit subsequent october 2014 research paper imply existence security-related issues arising row hammer effect march 9 2015 google project zero revealed two working privilege escalation exploits based row hammer effect establishing exploitable nature x86-64 architecture one revealed exploits targets google native client nacl mechanism running limited subset x86-64 machine instructions within sandbox exploiting row hammer effect escape sandbox gain ability issue system calls directly nacl vulnerability tracked mitigated modifying nacl allow execution codice_1 cache line flush machine instruction previously believed required constructing effective row hammer attack second exploit revealed project zero runs unprivileged linux process x86-64 architecture exploiting row hammer effect gain unrestricted access physical memory installed computer combining disturbance errors memory spraying exploit capable altering page table entries ptes used virtual memory system mapping virtual addresses physical addresses results exploit gaining unrestricted memory access due nature inability x86-64 architecture make codice_1 privileged machine instruction exploit hardly mitigated computers use hardware built-in row hammer prevention mechanisms testing viability exploits project zero found half 29 tested laptops experienced disturbance errors occurring vulnerable laptops less five minutes running row-hammer-inducing code tested laptops manufactured 2010 2014 used non-ecc ddr3 memory july 2015 group security researchers published paper describes architecture- instruction-set-independent way exploiting row hammer effect instead relying codice_1 instruction perform cache flushes approach achieves uncached memory accesses causing high rate cache eviction using carefully selected memory access patterns although cache replacement policies differ processors approach overcomes architectural differences employing adaptive cache eviction strategy algorithm proof concept approach provided native code implementation pure javascript implementation runs firefox 39 javascript implementation called rowhammer.js uses large typed arrays relies internal allocation using large pages result demonstrates high-level exploit low-level vulnerability october 2016 researchers vusec systems network security group vu amsterdam published drammer android app uses rowhammer methods reliably gain root access several popular models smartphones vulnerability acknowledged cve-2016-6728 patch released google within month mitigate effect however due general nature possible implementations attack effective software patch difficult reliably implement fact june 2018 proposals made academia industry either impractical deploy insufficient stopping attacks mitigate attacks researchers vusec systems proposed lightweight defense prevents dma-based attacks isolating dma buffers guard rows software states vulnerable rowhammer attacks attacker thus needs find right target states order utilise rowhammer errors practice one main challenges identifying target states typically done domain experts mainstream fault tolerance community responded rowhammer attacks systematic methodology used identify validate evaluate rowhammer attack target states exploitability work based well-established fault injection-based experimental methodology generalised attack target states found practical target states previously unknown
node21:Wikipedia entry. Entry name: Public-key_cryptography. Entry content: public-key cryptography public-key cryptography asymmetric cryptography cryptographic system uses pairs keys public keys may disseminated widely private keys known owner generation keys depends cryptographic algorithms based mathematical problems produce one-way functions effective security requires keeping private key private public key openly distributed without compromising security system person encrypt message using receiver public key encrypted message decrypted receiver private key robust authentication also possible sender combine message private key create short digital signature message anyone corresponding public key combine message putative digital signature known public key verify whether signature valid i.e made owner corresponding private key public key algorithms fundamental security ingredients modern cryptosystems applications protocols assuring confidentiality authenticity non-repudiability electronic communications data storage underpin various internet standards transport layer security tls s/mime pgp gpg public key algorithms provide key distribution secrecy e.g. diffie–hellman key exchange provide digital signatures e.g. digital signature algorithm provide e.g. rsa mid-1970s cipher systems using symmetric key algorithms cryptographic key used underlying algorithm sender recipient must keep secret necessity key every system exchanged communicating parties secure way prior use system – secure channel requirement never trivial rapidly becomes unmanageable number participants increases secure channels n't available key exchange sensible cryptographic practice keys frequently changed particular messages meant secure users separate key required possible pair users contrast public key system public keys disseminated widely openly private key needs kept secure owner two best-known uses public key cryptography one important issue confidence/proof particular public key authentic i.e correct belongs person entity claimed tampered replaced malicious third party several possible approaches including public key infrastructure pki one third parties – known certificate authorities – certify ownership key pairs tls relies upon web trust decentralizes authentication using individual endorsements link user public key pgp uses approach well lookup domain name system dns dkim system digitally signing emails also uses approach obvious application public key encryption system encrypting communication provide confidentiality – message sender encrypts using recipient public key decrypted recipient paired private key another application public key cryptography digital signature digital signature schemes used sender authentication non-repudiation system use digital signatures ensure one party successfully dispute authorship document communication applications built foundation include digital cash password-authenticated key agreement time-stamping services non-repudiation protocols etc asymmetric key algorithms nearly always much computationally intensive symmetric ones many cases common exchange key using key-exchange algorithm transmit data using key symmetric key algorithm pgp ssh ssl/tls family schemes use procedure thus called hybrid cryptosystems like security-related systems important identify potential weaknesses public key schemes theory susceptible brute-force key search attack attacks however impractical amount computation needed succeed – termed work factor claude shannon – reach potential attackers many cases work factor increased simply choosing longer key algorithms may much lower work factors making resistance brute-force attack irrelevant special specific algorithms developed aid attacking public key encryption algorithms – rsa elgamal encryption known attacks much faster brute-force approach major weaknesses found several formerly promising asymmetric key algorithms knapsack packing algorithm found insecure development new attack recently attacks based careful measurements exact amount time takes known hardware encrypt plain text used simplify search likely decryption keys side-channel attack great deal active research currently underway discover protect new attack algorithms another potential security vulnerability using asymmetric keys possibility man-in-the-middle attack communication public keys intercepted third party man middle modified provide different public keys instead encrypted messages responses must also intercepted decrypted re-encrypted attacker using correct public keys different communication segments instances avoid suspicion attack may seem difficult implement practice impossible using insecure media e.g. public networks internet wireless forms communications – example malicious staff member internet service provider isp might find quite easy carry one approach prevent attacks involves use public key infrastructure pki set roles policies procedures needed create manage distribute use store revoke digital certificates manage public-key encryption however turn potential weaknesses example certificate authority issuing certificate must trusted properly checked identity key-holder must ensure correctness public key issues certificate must secure computer piracy must made arrangements participants check certificates protected communications begin web browsers instance supplied long list self-signed identity certificates pki providers – used check bona fides certificate authority second step certificates potential communicators attacker could subvert single one certificate authorities issuing certificate bogus public key could mount man-in-the-middle attack easily certificate scheme used alternate scenario rarely discussed attacker penetrated authority servers obtained store certificates keys public private would able spoof masquerade decrypt forge transactions without limit despite theoretical potential problems approach widely used examples include tls predecessor ssl commonly used provide security web browser transactions example securely send credit card details online store aside resistance attack particular key pair security certification hierarchy must considered deploying public key systems certificate authority – usually purpose-built program running server computer – vouches identities assigned specific private keys producing digital certificate public key digital certificates typically valid several years time associated private keys must held securely time private key used certificate creation higher pki server hierarchy compromised accidentally disclosed man-in-the-middle attack possible making subordinate certificate wholly insecure examples well-regarded asymmetric key techniques varied purposes include examples asymmetric key algorithms widely adopted include examples notable – yet insecure – asymmetric key algorithms include examples protocols using asymmetric key algorithms include early history cryptography two parties would rely upon key would exchange means secure non-cryptographic method face-to-face meeting trusted courier key parties kept absolutely secret could used exchange encrypted messages number significant practical difficulties arise approach distributing keys 1874 book principles science william stanley jevons wrote reader say two numbers multiplied together produce number 8616460799 think unlikely anyone ever know described relationship one-way functions cryptography went discuss specifically factorization problem used create trapdoor function july 1996 mathematician solomon w. golomb said jevons anticipated key feature rsa algorithm public key cryptography although certainly invent concept public key cryptography 1970 james h. ellis british cryptographer uk government communications headquarters gchq conceived possibility non-secret encryption called public key cryptography could see way implement 1973 colleague clifford cocks implemented become known rsa encryption algorithm giving practical method non-secret encryption 1974 another gchq mathematician cryptographer malcolm j. williamson developed known diffie–hellman key exchange scheme also passed usa national security agency military focus low computing power power public key cryptography unrealised organisations judged important military use ... share key rapidly electronically major advantage opponent end evolution berners-lee designing open internet architecture cern adaptation adoption arpanet ... public key cryptography realise full potential —ralph benjamin discovery publicly acknowledged 27 years research declassified british government 1997 1976 asymmetric key cryptosystem published whitfield diffie martin hellman influenced ralph merkle work public key distribution disclosed method public key agreement method key exchange uses exponentiation finite field came known diffie–hellman key exchange first published practical method establishing shared secret-key authenticated confidential communications channel without using prior shared secret merkle public key-agreement technique became known merkle puzzles invented 1974 published 1978 1977 generalization cocks scheme independently invented ron rivest adi shamir leonard adleman mit latter authors published work 1978 algorithm came known rsa initials rsa uses exponentiation modulo product two large primes encrypt decrypt performing public key encryption public key digital signature security connected extreme difficulty factoring large integers problem known efficient general technique since 1970s large number variety encryption digital signature key agreement techniques developed field public key cryptography including rabin cryptosystem elgamal encryption dsa elliptic curve cryptography
node22:Wikipedia entry. Entry name: 2012_LinkedIn_hack. Entry content: 2012 linkedin hack social networking website linkedin hacked june 5 2012 passwords nearly 6.5 million user accounts stolen russian cybercriminals owners hacked accounts longer able access accounts website repeatedly encouraged users change passwords incident vicente silveira director linkedin confirmed behalf company website hacked official blog also said holders compromised accounts would find passwords longer valid website stolen passwords hashed i.e checksum stored allowing testing whether given password correct one cracked posted russian password forum later day morning june 6 passwords thousands accounts available online plain text graham cluley internet security firm sophos warned leaked passwords could possession criminals 6 june linkedin said official statement would email members security instructions instructions could reset passwords may 2016 linkedin discovered additional 100 million email addresses hashed passwords claimed additional data 2012 breach response linkedin invalidated passwords users changed passwords since 2012 rep. mary bono mack united states congress commented incident many times going happen congress finally wakes takes action latest incident brings sharp focus need pass data protection legislation senator patrick leahy said reports another major data breach give pause american consumers ever share sensitive personal information online transactions networking ... congress make comprehensive data privacy cybercrime legislation top priority marcus carey security researcher rapid7 said hackers penetrated databases linkedin preceding days expressed concerns may access website even attack michael aronowitz vice president saveology said everyday hundreds sites hacked personal information obtained stealing login information one account easily used access accounts hold personal financial information security experts indicated stolen passwords encrypted way fairly easy decrypt one reasons data breach katie szpyrka long time user linkedin illinois united states filed 5 million lawsuit linkedin complaining company keep promises secure connections databases erin ’ harra spokeswoman working linkedin asked lawsuit said lawyers looking take advantage situation propose bills sopa pipa united states congress amended complaint filed nov. 26 2012 behalf szpyrka another premium linkedin user virginia united states named khalilah gilmore–wright class representatives linkedin users affected breach lawsuit sought injunctive equitable relief well restitution damages plaintiffs members class linkedin apologized immediately data breach asked users immediately change passwords federal bureau investigation assisted linkedin corporation investigating theft 8 june 2012 investigation still early stages company said unable determine whether hackers also able steal email addresses associated compromised user accounts well linkedin said users whose passwords compromised would unable access linkedin accounts using old passwords internet security experts said passwords easy unscramble linkedin failure use salt hashing considered insecure practice allows attackers quickly reverse scrambling process using existing standard rainbow tables pre-made lists matching scrambled unscrambled passwords another issue sparked controversy ios app provided linkedin grabs personal names emails notes mobile calendar without user approval security experts working skycure security said application collects user personal data sends linkedin server linkedin claimed permission feature user-granted information sent securely using secure sockets layer ssl protocol company added never stored shared information third party october 5 2016 russian hacker detained czech police prague united states requested interpol warrant united states grand jury indicted nikulin three unnamed co-conspirators charges aggravated identity theft computer intrusion prosecutors alleged nikulin stole linkedin employee username password using gain access corporation network nikulin also accused hacking dropbox formspring allegedly conspiring sell stolen formspring customer data including usernames e-mail addresses passwords nikulin facing czech hearing determine whether extradited united states russian foreign ministry spokesperson maria zakharova indicated russian authorities trying block extradition nikulin currently held santa rita jail nikulin scheduled undergo psychological evaluation determine whether mentally competent
node23:Wikipedia entry. Entry name: SetACL. Entry content: setacl setacl freeware utility manipulating security descriptors microsoft windows used available gnu lesser general public license lgpl command-line utility activex component changed freeware license version 3.0.0.0 list features taken product web page set 'change permissions directory c \angela user 'brian domain 'dom1 remove write change permission sets desktop replace 'read execute permissions example use autoit found
node24:Wikipedia entry. Entry name: Computer_and_network_surveillance. Entry content: computer network surveillance computer network surveillance monitoring computer activity data stored hard drive data transferred computer networks internet monitoring often carried covertly may completed governments corporations criminal organizations individuals may may legal may may require authorization court independent government agencies computer network surveillance programs widespread today almost internet traffic monitored surveillance allows governments agencies maintain social control recognize monitor threats prevent investigate criminal activity advent programs total information awareness program technologies high-speed surveillance computers biometrics software laws communications assistance law enforcement act governments possess unprecedented ability monitor activities citizens however many civil rights privacy groups reporters without borders electronic frontier foundation american civil liberties union expressed concern increasing surveillance citizens end even already mass surveillance society limited political and/or personal freedoms fear led numerous lawsuits hepting v. hacktivist group anonymous hacked government websites protest considers draconian surveillance vast majority computer surveillance involves monitoring data traffic internet example united states communications assistance law enforcement act mandates phone calls broadband internet traffic emails web traffic instant messaging etc available unimpeded real-time monitoring federal law enforcement agencies packet capture also known packet sniffing monitoring data traffic computer network data sent computers internet networks takes form small chunks called packets routed destination assembled back complete message packet capture appliance intercepts packets may examined analyzed computer technology needed perform traffic analysis sift intercepted data look important/useful information communications assistance law enforcement act u.s. telecommunications providers required install packet capture technology federal law enforcement intelligence agencies able intercept customers broadband internet voice internet protocol voip traffic far much data gathered packet sniffers human investigators manually search thus automated internet surveillance computers sift vast amount intercepted internet traffic filtering reporting investigators bits information interesting example use certain words phrases visiting certain types web sites communicating via email chat certain individual group billions dollars per year spent agencies information awareness office nsa fbi development purchase implementation operation systems intercept analyze data extracting information useful law enforcement intelligence agencies similar systems used iranian secret police identify suppress dissidents technology allegedly installed german siemens ag finnish nokia internet rapid development become primary form communication people potentially subject internet surveillance advantages disadvantages network monitoring instance systems described web 2.0 greatly impacted modern society tim ’ reilly first explained concept web 2.0 stated web 2.0 provides communication platforms user generated self-produced content motivating people communicate friends online however internet surveillance also disadvantage one researcher uppsala university said web 2.0 surveillance directed large user groups help hegemonically produce reproduce surveillance providing user-generated self-produced content characterize web 2.0 surveillance mass self-surveillance surveillance companies monitor people focused work entertainment yet employers also monitor employees order protect company assets control public communications importantly make sure employees actively working productive emotionally affect people cause emotions like jealousy research group states ... set test prediction feelings jealousy lead ‘ creeping ’ partner facebook women particularly likely engage partner monitoring response jealousy study shows women become jealous people online group virtual assistant become social integration lives currently virtual assistant amazon alexa call 911 local services constantly listening command recording parts conversations help improve algorithms law enforcement able called using virtual assistant law enforcement would able access information saved device device connected home internet law enforcement would exact location individual calling law enforcement virtual assistance devices popular many debate lack privacy devices listening every conversation owner even owner talking virtual assistant device still listening conversation hopes owner need assistance well gather data corporate surveillance computer activity common data collected often used marketing purposes sold corporations also regularly shared government agencies used form business intelligence enables corporation better tailor products and/or services desirable customers data also sold corporations use aforementioned purpose used direct marketing purposes targeted advertisements ads targeted user search engine analyzing search history emails use free webmail services kept database one important component prevention establishing business purposes monitoring may include following second component prevention determining ownership technology resources ownership firm networks servers computers files e-mail explicitly stated distinction employee personal electronic devices limited proscribed owned firm instance google search stores identifying information web search ip address search phrase used stored database 18 months google also scans content emails users gmail webmail service order create targeted advertising based people talking personal email correspondences google far largest internet advertising agency—millions sites place google advertising banners links websites order earn money visitors click ads page containing google advertisements adds reads modifies cookies visitor computer cookies track user across sites gather information web surfing habits keeping track sites visit sites information along information email accounts search engine histories stored google use build profile user deliver better-targeted advertising united states government often gains access databases either producing warrant simply asking department homeland security openly stated uses data collected consumer credit direct marketing agencies augmenting profiles individuals monitoring addition monitoring information sent computer network also way examine data stored computer hard drive monitor activities person using computer surveillance program installed computer search contents hard drive suspicious data monitor computer use collect passwords and/or report back activities real-time operator internet connection keylogger example type program normal keylogging programs store data local hard drive programmed automatically transmit data network remote computer web server multiple ways installing software common remote installation using backdoor created computer virus trojan tactic advantage potentially subjecting multiple computers surveillance viruses often spread thousands millions computers leave backdoors accessible network connection enable intruder remotely install software execute commands viruses trojans sometimes developed government agencies cipav magic lantern often however viruses created people spyware installed marketing agencies used gain access security breaches create another method cracking computer gain access network attacker install surveillance software remotely servers computers permanent broadband connections vulnerable type attack another source security cracking employees giving information users using brute force tactics guess password one also physically place surveillance software computer gaining entry place computer stored install compact disc floppy disk thumbdrive method shares disadvantage hardware devices requires physical access computer one well-known worm uses method spreading stuxnet one common form surveillance create maps social networks based data social networking sites well traffic analysis information phone call records nsa call database internet traffic data gathered calea social network maps data mined extract useful information personal interests friendships affiliations wants beliefs thoughts activities many u.s. government agencies defense advanced research projects agency darpa national security agency nsa department homeland security dhs currently investing heavily research involving social network analysis intelligence community believes biggest threat u.s. comes decentralized leaderless geographically dispersed groups types threats easily countered finding important nodes network removing requires detailed map network jason ethier northeastern university study modern social network analysis said following scalable social network analysis program developed information awareness office shown possible monitor computers distance commercially available equipment detecting radiation emitted crt monitor form computer surveillance known tempest involves reading electromagnetic emanations computing devices order extract data distances hundreds meters ibm researchers also found computer keyboards key emits slightly different noise pressed differences individually identifiable conditions possible log key strokes without actually requiring logging software run associated computer 2015 lawmakers california passed law prohibiting investigative personnel state force businesses hand digital communication without warrant calling electronic communications privacy act time california state senator jerry hill introduced bill making law enforcement agencies disclose information usage information stingray phone tracker device law took effect january 2016 require cities operate new guidelines relation law enforcement use device legislators holding public office disagreed technology warrantless tracking city wants use device must heard public hearing cities pulled using stingray santa clara county also shown adi shamir et al. even high frequency noise emitted cpu includes information instructions executed policeware software designed police citizens monitoring discussion interaction citizens within u.s. carnivore first incarnation secretly installed e-mail monitoring software installed internet service providers networks log computer communication including transmitted e-mails magic lantern another application time running targeted computer trojan style performing keystroke logging cipav deployed fbi multi-purpose spyware/trojan clipper chip formerly known myk-78 small hardware chip government install phones designed nineties intended secure private communication data reading voice messages encoded decode clipper chip designed clinton administration “ …protect personal safety national security developing information anarchy fosters criminals terrorists foreign foes. ” government portrays solving secret codes cryptographic age technology created thus raised controversy public clipper chip thought next “ big brother ” tool led failure clipper proposal even though many attempts consumer broadband digital television promotion act cbdtpa bill proposed united states congress cbdtpa known security systems standards certification act sssca draft form killed committee 2002 cbdtpa become law would prohibited technology could used read digital content copyright music video e-books without digital rights management drm prevented access material without permission copyright holder german-speaking countries spyware used made government sometimes called govware countries like switzerland germany legal framework governing use software known examples include swiss minipanzer megapanzer german r2d2 trojan surveillance censorship different surveillance performed without censorship harder engage censorship without form surveillance even surveillance lead directly censorship widespread knowledge belief person computer use internet surveillance lead self-censorship march 2013 reporters without borders issued special report internet surveillance examines use technology monitors online activity intercepts electronic communication order arrest journalists citizen-journalists dissidents report includes list state enemies internet bahrain china iran syria vietnam countries whose governments involved active intrusive surveillance news providers resulting grave violations freedom information human rights computer network surveillance increase countries report also includes second list corporate enemies internet amesys france blue coat systems u.s. gamma uk germany hacking team italy trovicor germany companies sell products liable used governments violate human rights freedom information neither list exhaustive likely expanded future protection sources longer matter journalistic ethics journalists equip digital survival kit exchanging sensitive information online storing computer hard-drive mobile phone individuals associated high-profile rights organizations dissident groups protest groups reform groups urged take extra precautions protect online identities
node25:Wikipedia entry. Entry name: WannaCry_ransomware_attack. Entry content: wannacry ransomware attack wannacry ransomware attack may 2017 worldwide cyberattack wannacry ransomware cryptoworm targeted computers running microsoft windows operating system encrypting data demanding ransom payments bitcoin cryptocurrency propagated eternalblue exploit developed united states national security agency nsa older windows systems eternalblue stolen leaked group called shadow brokers months prior attack microsoft released patches previously close exploit much wannacry spread organizations applied using older windows systems past end-of-life wannacry also took advantage installing backdoors onto infected systems attack stopped within days discovery due emergency patches released microsoft discovery kill switch prevented infected computers spreading wannacry attack estimated affected 200,000 computers across 150 countries total damages ranging hundreds millions billions dollars security experts believed preliminary evaluation worm attack originated north korea agencies working country december 2017 united states united kingdom australia formally asserted north korea behind attack new variant wannacry ransomware forced taiwan semiconductor manufacturing company tsmc temporarily shut several chip-fabrication factories august 2018 virus spread 10,000 machines tsmc advanced facilities wannacry ransomware cryptoworm targeted computers running microsoft windows operating system encrypting data demanding ransom payments bitcoin cryptocurrency worm also known wannacrypt wana decrypt0r 2.0 wanacrypt0r 2.0 wan na decryptor considered network worm also includes transport mechanism automatically spread transport code scans vulnerable systems uses eternalblue exploit gain access doublepulsar tool install execute copy wannacry versions 0 1 2 created using microsoft visual c++ 6.0 eternalblue exploit windows server message block smb protocol released shadow brokers much attention comment around event occasioned fact u.s. national security agency nsa exploit likely stolen already discovered vulnerability used create exploit offensive work rather report microsoft microsoft eventually discovered vulnerability tuesday 14 march 2017 issued security bulletin ms17-010 detailed flaw announced patches released windows versions currently supported time windows vista windows 7 windows 8.1 windows 10 windows server 2008 windows server 2008 r2 windows server 2012 windows server 2016 doublepulsar backdoor tool also released shadow brokers 14 april 2017 starting 21 april 2017 security researchers reported tens thousands computers doublepulsar backdoor installed 25 april reports estimated number infected computers could several hundred thousand numbers increasing every day wannacry code take advantage existing doublepulsar infection installs executed wannacry malware first checks kill switch domain name found ransomware encrypts computer data attempts exploit smb vulnerability spread random computers internet laterally computers network modern ransomware payload displays message informing user files encrypted demands payment around us 300 bitcoin within three days us 600 within seven days three hardcoded bitcoin addresses wallets used receive payments victims wallets transactions balances publicly accessible even though cryptocurrency wallet owners remain unknown several organizations released detailed technical writeups malware including microsoft cisco malwarebytes symantec mcafee attack began friday 12 may 2017 evidence pointing initial infection asia 07:44 utc initial infection likely exposed vulnerable smb port rather email phishing initially assumed within day code reported infected 230,000 computers 150 countries organizations installed microsoft security update april 2017 affected attack still running unsupported versions microsoft windows windows xp windows server 2003 particularly high risk security patches released since april 2014 exception one emergency patch released may 2014 kaspersky lab study reported however less 0.1 percent affected computers running windows xp 98 percent affected computers running windows 7 controlled testing environment cybersecurity firm kryptos logic found unable infect windows xp system wannacry using exploits payload failed load caused operating system crash rather actually execute encrypt files however executed manually wannacry could still operate windows xp experts quickly advised affected users paying ransom due reports people getting data back payment high revenues would encourage campaigns 14 june 2017 attack subsided total 327 payments totaling us 130,634.77 51.62396539 xbt transferred day initial attack may microsoft released out-of-band security updates end life products windows xp windows server 2003 windows 8 patches created february year following tip vulnerability january year organizations advised patch windows plug vulnerability order protect cyber attack head microsoft cyber defense operations center adrienne hall said “ due elevated risk destructive cyber-attacks time made decision take action applying updates provides protection potential attacks characteristics similar wannacrypt alternative name wannacry ” researcher marcus hutchins accidentally discovered kill switch domain hardcoded malware registering domain name dns sinkhole stopped attack spreading worm ransomware encrypted computer files unable connect domain computers infected wannacry website registration unable help already infected systems severely slowed spread initial infection gave time defensive measures deployed worldwide particularly north america asia attacked extent elsewhere 14 may first variant wannacry appeared new second kill-switch registered matt suiche day followed second variant third last kill-switch 15 may registered check point threat intelligence analysts days later new version wannacry detected lacked kill switch altogether 19 may reported hackers trying use mirai botnet variant effect distributed attack wannacry kill-switch domain intention knocking offline 22 may hutchins protected domain switching cached version site capable dealing much higher traffic loads live site separately researchers university college london boston university reported paybreak system could defeat wannacry several families ransomware recovering keys used encrypt user data discovered windows encryption apis used wannacry may completely clear prime numbers used generate payload private keys memory making potentially possible retrieve required key yet overwritten cleared resident memory key kept memory wannacry process killed computer rebooted infected behaviour used french researcher develop tool known wannakey automates process windows xp systems approach iterated upon second tool known wanakiwi tested work windows 7 server 2008 r2 well within four days initial outbreak new infections slowed trickle due responses linguistic analysis ransom notes indicated authors likely fluent chinese proficient english versions notes languages probably human-written rest seemed machine-translated according analysis fbi cyber behavioral analysis center computer created ransomware language files hangul language fonts installed evidenced presence \fcharset129 rich text format tag metadata language files also indicated computers created ransomware set used korea google security researcher initially posted tweet referencing code similarities wannacry previous malware cybersecurity companies kaspersky lab symantec said code similarities previously used lazarus group believed carried cyberattack sony pictures 2014 bangladesh bank heist 2016—and linked north korea could also either simple re-use code another group attempt shift blame—as cyber false flag operation leaked internal nsa memo alleged also linked creation worm north korea brad smith president microsoft said believed north korea originator wannacry attack uk national cyber security centre reached conclusion 18 december 2017 united states government formally announced publicly considers north korea main culprit behind wannacry attack president trump homeland security advisor tom bossert wrote op-ed wall street journal charge saying make allegation lightly based evidence press conference following day bossert said evidence indicates kim jong-un given order launch malware attack bossert said canada new zealand japan agree united states assessment evidence links attack north korea united kingdom foreign commonwealth office says also stands behind united states assertion north korea however denied responsible cyberattack 6 september 2018 us department justice doj announced formal charges park jin-hyok involvement sony pictures hack 2014 doj contended park north korean hacker working part team experts north korean reconnaissance general bureau department justice asserted team also involved wannacry attack among activities ransomware campaign unprecedented scale according europol estimates around 200,000 computers infected across 150 countries according kaspersky lab four affected countries russia ukraine india taiwan one largest agencies struck attack national health service hospitals england scotland 70,000 devices – including computers mri scanners blood-storage refrigerators theatre equipment – may affected 12 may nhs services turn away non-critical emergencies ambulances diverted 2016 thousands computers 42 separate nhs trusts england reported still running windows xp 2018 report members parliament concluded 200 nhs hospitals organizations checked wake wannacry attack still failed cyber security checks nhs hospitals wales northern ireland unaffected attack nissan motor manufacturing uk tyne wear england halted production ransomware infected systems renault also stopped production several sites attempt stop spread ransomware spain telefónica fedex deutsche bahn hit along many countries companies worldwide attack impact said relatively low compared potential attacks type could much worse marcus hutchins discovered kill-switch built creators specifically targeted highly critical infrastructure like nuclear power plants dams railway systems according cyber-risk-modeling firm cyence economic losses cyber attack could reach us 4 billion groups estimating losses hundreds millions following alphabetical list organisations confirmed affected number experts highlighted nsa non-disclosure underlying vulnerability loss control eternalblue attack tool exploited edward snowden said nsa privately disclosed flaw used attack hospitals found lost attack may happened british cybersecurity expert graham cluley also sees culpability part u.s. intelligence services according others could done something ages ago get problem fixed n't also said despite obvious uses tools spy people interest duty protect countries citizens others also commented attack shows practice intelligence agencies stockpile exploits offensive purposes rather disclosing defensive purposes may problematic microsoft president chief legal officer brad smith wrote repeatedly exploits hands governments leaked public domain caused widespread damage equivalent scenario conventional weapons would u.s. military tomahawk missiles stolen russian president vladimir putin placed responsibility attack u.s. intelligence services created eternalblue 17 may 2017 united states bipartisan lawmakers introduced patch act aims exploits reviewed independent board balance need disclose vulnerabilities national security interests increasing transparency accountability maintain public trust process 15 june 2017 united states congress hold hearing attack two subpanels house science committee hear testimonies various individuals working government non-governmental sector us improve protection mechanisms systems similar attacks future cybersecurity researcher working loose collaboration uk national cyber security centre researched malware discovered kill switch later globally dispersed security researchers collaborated online develop open source tools allow decryption without payment circumstances snowden states nsa-enabled ransomware eats internet help comes researchers spy agencies asks case experts also used publicity around attack chance reiterate value importance good regular secure backups good cybersecurity including isolating critical systems using appropriate software latest security patches installed adam segal director digital cyberspace policy program council foreign relations stated patching updating systems broken basically private sector government agencies addition segal said governments apparent inability secure vulnerabilities opens lot questions backdoors access encryption government argues needs private sector security arne schönbohm president germany federal office information security bsi stated current attacks show vulnerable digital society wake-up call companies finally take security seriously effects attack also political implications united kingdom impact national health service quickly became political claims effects exacerbated government underfunding nhs particular nhs ceased paid custom support arrangement continue receiving support unsupported microsoft software used within organization including windows xp home secretary amber rudd refused say whether patient data backed shadow health secretary jon ashworth accused health secretary jeremy hunt refusing act critical note microsoft national cyber security centre ncsc national crime agency received two months previously others argued hardware software vendors often fail account future security flaws selling systems − due technical design market incentives − eventually wo n't able properly receive apply patches nhs denied still using xp claiming 4.7 devices within organization ran windows xp cost attack nhs estimated £92 million disruption services upgrades attack nhs digital refused finance estimated £1 billion meet cyber essentials plus standard information security certification organized uk ncsc saying would constitute value money invested £60 million planned spend £150 million next two years address key cyber security weaknesses suggested future attack magnitude may defined terrorism act parliament adds provision stating malicious use computer matter world located degrades seriously harms healthcare power life support critical infrastructure form terrorism may elicit proportional response possibly could added revision policing crime act 2017 late june hundreds computer users reported sent email someone multiple people claiming developers wannacry email threatened destroy victims data unless sent 0.1 btc bitcoin address hackers
node26:Wikipedia entry. Entry name: Spyware. Entry content: spyware spyware software aims gather information person organization sometimes without knowledge may send information another entity without consumer consent asserts control device without consumer knowledge may send information another entity consumer consent cookies spyware mostly classified four types adware system monitors tracking cookies trojans examples notorious types include digital rights management capabilities phone home keyloggers rootkits web beacons spyware mostly used stealing information storing internet users movements web serving pop-up ads internet users whenever spyware used malicious purposes presence typically hidden user difficult detect spyware keyloggers may installed owner shared corporate public computer intentionally order monitor users term spyware suggests software monitors user computing functions spyware extend beyond simple monitoring spyware collect almost type data including personal information like internet surfing habits user logins bank credit account information spyware also interfere user control computer installing additional software redirecting web browsers spyware change computer settings result slow internet connection speeds un-authorized changes browser settings changes software settings sometimes spyware included along genuine software may come malicious website may added intentional functionality genuine software see paragraph facebook response emergence spyware small industry sprung dealing anti-spyware software running anti-spyware software become widely recognized element computer security practices especially computers running microsoft windows number jurisdictions passed anti-spyware laws usually target software surreptitiously installed control user computer german-speaking countries spyware used made government called govware computer experts common parlance regierungstrojaner literally government trojan govware typically trojan horse software used intercept communications target computer countries like switzerland germany legal framework governing use software us term policeware used similar purposes use term spyware eventually declined practice tracking users pushed ever mainstream major websites data mining companies generally break known laws compel users tracked fraudulent practices per se default settings created users language terms-of-service agreements one documented example cbs/cnet news reported march 7 2011 wall street journal analysis revealing practice facebook websites tracking users browsing activity linked identity far beyond users visits activity within facebook site report stated works go facebook log spend time ... move without logging let say next site go new york times buttons without clicking reported back facebook twitter went also identity within accounts let say moved something like site depression one also tweet button google widget report back went wsj analysis researched brian kennish founder disconnect inc. spyware necessarily spread way virus worm infected systems generally attempt transmit copy software computers instead spyware installs system deceiving user exploiting software vulnerabilities spyware installed without knowledge using deceptive tactics spyware may try deceive users bundling desirable software common tactics using trojan horse spy gadgets look like normal devices turn something else usb keylogger devices actually connected device memory units capable recording stroke made keyboard spyware authors infect system security holes web browser software user navigates web page controlled spyware author page contains code attacks browser forces download installation spyware installation spyware frequently involves internet explorer popularity history security issues made frequent target deep integration windows environment make susceptible attack windows operating system internet explorer also serves point attachment spyware form browser helper objects modify browser behavior spyware rarely operates alone computer affected machine usually multiple infections users frequently notice unwanted behavior degradation system performance spyware infestation create significant unwanted cpu activity disk usage network traffic stability issues applications freezing failure boot system-wide crashes also common spyware interferes networking software commonly causes difficulty connecting internet infections spyware even evident users assume situations performance issues relate faulty hardware windows installation problems another malware infection owners badly infected systems resort contacting technical support experts even buying new computer existing system become slow badly infected systems may require clean reinstallation software order return full functionality moreover types spyware disable software firewalls antivirus software and/or reduce browser security settings opens system opportunistic infections spyware disables even removes competing spyware programs grounds spyware-related annoyances increase likelihood users take action remove programs keyloggers sometimes part malware packages downloaded onto computers without owners knowledge keylogger software freely available internet others commercial private applications keyloggers allow keyboard keystrokes captured also often capable collecting screen captures computer typical windows user administrative privileges mostly convenience program user runs unrestricted access system operating systems windows users able follow principle least privilege use non-administrator accounts alternatively reduce privileges specific vulnerable internet-facing processes internet explorer since windows vista default computer administrator runs everything limited user privileges program requires administrative privileges user account control pop-up prompt user allow deny action improves design used previous versions windows spyware threat evolved number techniques emerged counteract include programs designed remove block spyware well various user practices reduce chance getting spyware system nonetheless spyware remains costly problem large number pieces spyware infected windows computer remedy may involve backing user data fully reinstalling operating system instance spyware completely removed symantec microsoft pc tools many programmers commercial firms released products dedicated remove block spyware programs pc tools spyware doctor lavasoft ad-aware se patrick kolla spybot search destroy rapidly gained popularity tools remove cases intercept spyware programs december 16 2004 microsoft acquired giant antispyware software rebranding windows antispyware beta releasing free download genuine windows xp windows 2003 users 2006 renamed windows defender major anti-virus firms symantec pc tools mcafee sophos also added anti-spyware features existing anti-virus products early anti-virus firms expressed reluctance add anti-spyware functions citing lawsuits brought spyware authors authors web sites programs described products spyware however recent versions major firms home business anti-virus products include anti-spyware functions albeit treated differently viruses symantec anti-virus instance categorizes spyware programs extended threats offers real-time protection threats anti-spyware programs combat spyware two ways programs inspect contents windows registry operating system files installed programs remove files entries match list known spyware real-time protection spyware works identically real-time anti-virus protection software scans disk files download time blocks activity components known represent spyware cases may also intercept attempts install start-up items modify browser settings earlier versions anti-spyware programs focused chiefly detection removal javacool software spywareblaster one first offer real-time protection blocked installation activex-based spyware like anti-virus software many anti-spyware/adware tools require frequently updated database threats new spyware programs released anti-spyware developers discover evaluate adding list known spyware allows software detect remove new spyware result anti-spyware software limited usefulness without regular updates updates may installed automatically manually popular generic spyware removal tool used requires certain degree expertise hijackthis scans certain areas windows os spyware often resides presents list items delete manually items legitimate windows files/registry entries advised less knowledgeable subject post hijackthis log numerous antispyware sites let experts decide delete spyware program blocked manages get installed may resist attempts terminate uninstall programs work pairs anti-spyware scanner user terminates one running process one respawns killed program likewise spyware detect attempts remove registry keys immediately add usually booting infected computer safe mode allows anti-spyware program better chance removing persistent spyware killing process tree may also work detect spyware computer users found several practices useful addition installing anti-spyware programs many users installed web browser internet explorer mozilla firefox google chrome though browser completely safe internet explorer greater risk spyware infection due large user base well vulnerabilities activex three major browsers close equivalent comes security isps—particularly colleges universities—have taken different approach blocking spyware use network firewalls web proxies block access web sites known install spyware march 31 2005 cornell university information technology department released report detailing behavior one particular piece proxy-based spyware marketscore steps university took intercept many educational institutions taken similar steps individual users also install firewalls variety companies monitor flow information going networked computer provide protection spyware malware users install large hosts file prevents user computer connecting known spyware-related web addresses spyware may get installed via certain shareware programs offered download downloading programs reputable sources provide protection source attack individual users use cellphone computer physical electric switch isolated electronic switch disconnects microphone camera without bypass keep disconnected position use limits information spyware collect policy recommended nist guidelines managing security mobile devices 2013 spyware vendors notably 180 solutions written new york times dubbed stealware spyware researcher ben edelman terms affiliate fraud form click fraud stealware diverts payment affiliate marketing revenues legitimate affiliate spyware vendor spyware attacks affiliate networks places spyware operator affiliate tag user activity – replacing tag one spyware operator party gains user choices thwarted legitimate affiliate loses revenue networks reputations injured vendors harmed pay affiliate revenues affiliate party contract affiliate fraud violation terms service affiliate marketing networks result spyware operators 180 solutions terminated affiliate networks including linkshare sharesale mobile devices also vulnerable chargeware manipulates users illegitimate mobile charges one case spyware closely associated identity theft august 2005 researchers security software firm sunbelt software suspected creators common coolwebsearch spyware used transmit chat sessions user names passwords bank information etc however turned actually sophisticated criminal little trojan independent cws case currently investigation fbi federal trade commission estimates 27.3 million americans victims identity theft financial losses identity theft totaled nearly 48 billion businesses financial institutions least 5 billion out-of-pocket expenses individuals copy-protection technologies borrowed spyware 2005 sony bmg music entertainment found using rootkits xcp digital rights management technology like spyware difficult detect uninstall poorly written efforts remove could rendered computers unable function texas attorney general greg abbott filed suit three separate class-action suits filed sony bmg later provided workaround website help users remove beginning april 25 2006 microsoft windows genuine advantage notifications application installed windows pcs critical security update main purpose deliberately uninstallable application ensure copy windows machine lawfully purchased installed also installs software accused phoning home daily basis like spyware removed removewga tool spyware used monitor electronic activities partners intimate relationships least one software package loverspy specifically marketed purpose depending local laws regarding communal/marital property observing partner online activity without consent may illegal author loverspy several users product indicted california 2005 charges wiretapping various computer crimes anti-spyware programs often report web advertisers http cookies small text files track browsing activity spyware always inherently malicious many users object third parties using space personal computers business purposes many anti-spyware programs offer remove common spyware programs illustrate diversity behaviors found attacks note computer viruses researchers give names spyware programs may used creators programs may grouped families based shared program code common behaviors following money apparent financial business connections instance number spyware programs distributed claria collectively known gator likewise programs frequently installed together may described parts spyware package even function separately first recorded use term spyware occurred october 16 1995 usenet post poked fun microsoft business model spyware first denoted software meant espionage purposes however early 2000 founder zone labs gregor freund used term press release zonealarm personal firewall later 2000 parent using zonealarm alerted fact reader rabbit educational software marketed children mattel toy company surreptitiously sending data back mattel since spyware taken present sense according 2005 study aol national cyber-security alliance 61 percent surveyed users computers infected form spyware 92 percent surveyed users spyware reported know presence 91 percent reported given permission installation spyware spyware become one preeminent security threats computer systems running microsoft windows operating systems computers internet explorer ie primary browser particularly vulnerable attacks ie widely used tight integration windows allows spyware access crucial parts operating system internet explorer 6 sp2 released part windows xp service pack 2 browser would automatically display installation window activex component website wanted install combination user ignorance changes assumption internet explorer activex components benign helped spread spyware significantly many spyware components would also make use exploits javascript internet explorer windows install without user knowledge permission windows registry contains multiple sections modification key values allows software executed automatically operating system boots spyware exploit design circumvent attempts removal spyware typically link location registry allows execution running spyware periodically check links removed automatically restored ensures spyware execute operating system booted even registry links removed malicious programmers released large number rogue fake anti-spyware programs widely distributed web banner ads warn users computers infected spyware directing purchase programs actually remove spyware—or else may add spyware proliferation fake spoofed antivirus products bill antispyware troublesome users may receive popups prompting install protect computer fact add spyware software called rogue software recommended users install freeware claiming anti-spyware unless verified legitimate known offenders include fake antivirus products constitute 15 percent malware january 26 2006 microsoft washington state attorney general filed suit secure computer spyware cleaner product unauthorized access computer illegal computer crime laws u.s. computer fraud abuse act u.k. computer misuse act similar laws countries since owners computers infected spyware generally claim never authorized installation prima facie reading would suggest promulgation spyware would count criminal act law enforcement often pursued authors malware particularly viruses however spyware developers prosecuted many operate openly strictly legitimate businesses though faced lawsuits spyware producers argue contrary users claims users fact give consent installations spyware comes bundled shareware applications may described legalese text end-user license agreement eula many users habitually ignore purported contracts spyware companies claria say demonstrate users consented despite ubiquity eulas agreements single click taken consent entire text relatively little caselaw resulted use established common law jurisdictions type agreement binding contract certain circumstances however mean every agreement contract every term one enforceable jurisdictions including u.s. states iowa washington passed laws criminalizing forms spyware laws make illegal anyone owner operator computer install software alters web-browser settings monitors keystrokes disables computer-security software united states lawmakers introduced bill 2005 entitled internet spyware prevention act would imprison creators spyware us federal trade commission sued internet marketing organizations unfairness doctrine make stop infecting consumers pcs spyware one case seismic entertainment productions ftc accused defendants developing program seized control pcs nationwide infected spyware malicious software bombarded barrage pop-up advertising seismic clients exposed pcs security risks caused malfunction seismic offered sell victims antispyware program fix computers stop popups problems seismic caused november 21 2006 settlement entered federal court 1.75 million judgment imposed one case 1.86 million another defendants insolvent second case brought cyberspy software llc ftc charged cyberspy marketed sold remotespy keylogger spyware clients would secretly monitor unsuspecting consumers computers according ftc cyberspy touted remotespy 100 undetectable way spy anyone anywhere ftc obtained temporary order prohibiting defendants selling software disconnecting internet servers collect store provide access information software gathered case still preliminary stages complaint filed electronic privacy information center epic brought remotespy software ftc attention administrative fine first kind europe issued independent authority posts telecommunications opta netherlands applied fines total value euro 1,000,000 infecting 22 million computers spyware concerned called dollarrevenue law articles violated art 4.1 decision universal service providers interests end users fines issued based art 15.4 taken together art 15.10 dutch telecommunications law former new york state attorney general former governor new york eliot spitzer pursued spyware companies fraudulent installation software suit brought 2005 spitzer california firm intermix media inc. ended settling agreeing pay us 7.5 million stop distributing spyware hijacking web advertisements also led litigation june 2002 number large web publishers sued claria replacing advertisements settled court courts yet decide whether advertisers held liable spyware displays ads many cases companies whose advertisements appear spyware pop-ups directly business spyware firm rather contracted advertising agency turn contracts online subcontractor gets paid number impressions appearances advertisement major firms dell computer mercedes-benz sacked advertising agencies run ads spyware litigation gone ways since spyware become common pejorative makers filed libel defamation actions products described 2003 gator known claria filed suit website pc pitstop describing program spyware pc pitstop settled agreeing use word spyware continues describe harm caused gator/claria software result anti-spyware anti-virus companies also used terms potentially unwanted programs greyware denote products 2010 webcamgate case plaintiffs charged two suburban philadelphia high schools secretly spied students surreptitiously remotely activating webcams embedded school-issued laptops students using home therefore infringed privacy rights school loaded student computer lanrev remote activation tracking software included now-discontinued thefttrack thefttrack enabled default software program allowed school district elect activate choose thefttrack surveillance options school wanted enable thefttrack allowed school district employees secretly remotely activate webcam embedded student laptop laptop screen allowed school officials secretly take photos webcam whatever front line sight send photos school server lanrev software disabled webcams uses e.g students unable use photo booth video chat students mistakenly believed webcams work addition webcam surveillance thefttrack allowed school officials take screenshots send school server addition lanrev allowed school officials take snapshots instant messages web browsing music playlists written compositions schools admitted secretly snapping 66,000 webshots screenshots including webcam shots students bedrooms
node27:Wikipedia entry. Entry name: Sentrigo. Entry content: sentrigo sentrigo privately held software company located santa clara california usa acquisition april 2011 mcafee company founded 2006 nathan shuchami slavik markovich address several key challenges database security specifically inability monitor activity privileged users established credentials nefarious means difficulty maintaining dbms current patch level company products expanded include broader suite database security offerings including database audit vulnerability assessment well investors sentrigo included benchmark capital stata ventures juniper networks hedgehog family products providing vulnerability assessment database activity monitoring purposes reducing risks data breach meeting compliance regulations related sensitive data hedgehog allows customers protect databases oracle microsoft sql server sybase without interfering day-to-day operations company primary product introduced 2007 hedgehog enterprise provides core monitoring capability based sensor server model sensor resides database server os monitors memory/cache suspect database transactions sending alerts real-time management console thus unlike network-based host-based intrusion detection systems ids intrusion prevention systems ips hedgehog fully monitor databases running virtual machines even cloud server java-based application communicates sensors centrally monitor hundreds databases based set policies rules system audit alert suspend sessions violate preset conditions announced september 2010 hedgehog dbscanner enterprise vulnerability assessment solution databases includes capabilities automatically finding databases network subjects 3,000 different security checks reports provide details discovered vulnerabilities current patch level weak passwords shared accounts configuration errors insecure database code dbscanner implemented along hedgehog enterprise case shares common management console run standalone module vpatch solution virtual patching databases overcome problem many customers unable apply security patches databases timely manner may due inability schedule downtime production system time lag testing 3rd party support applications top database numerous reasons sentrigo vpatch includes set rules generate alerts known vulnerabilities exploited used terminate attackers database sessions vpatch rules updated frequent basis new security updates issued dbms vendor new vulnerabilities discovered sentrigo research team partners common practice developing applications web applications particular use fat database accounts common schema pooled connections enhance application performance using approach raises problem full end-to-end user tracking database layer database unable see end-user details like username ip address seeing application server ip common schema account hedgehog identifier solves problem providing application server plug-in captures end-user information transparently propagates database tier using standard database apis application changes required identifier supports custom java .net applications well major business applications technical details available blog entry fuzzor fuzzer oracle open source software tool developed sentrigo fuzzor provides database administrators programmers ability test pl/sql code security vulnerabilities tool discovers vulnerabilities attempting exploit code particularly helpful finding sql injection buffer overflow vulnerabilities sentrigo provides tool free charge
node28:Wikipedia entry. Entry name: ZeroAccess_botnet. Entry content: zeroaccess botnet zeroaccess trojan horse computer malware affects microsoft windows operating systems used download malware infected machine botnet remaining hidden using rootkit techniques zeroaccess botnet discovered least around may 2011 zeroaccess rootkit responsible botnet spread estimated present least 9 million systems estimates size botnet vary across sources antivirus vendor sophos estimated botnet size around 1 million active infected machines third quarter 2012 security firm kindsight estimated 2.2 million infected active systems bot spread zeroaccess rootkit variety attack vectors one attack vector form social engineering user persuaded execute malicious code either disguising legitimate file including hidden additional payload executable announces example bypassing copyright protection keygen second attack vector utilizes advertising network order user click advertisement redirects site hosting malicious software third infection vector used affiliate scheme third party persons paid installing rootkit system december 2013 coalition led microsoft moved destroy command control network botnet attack ineffective though c c seized peer-to-peer command control component unaffected meaning botnet could still updated system infected zeroaccess rootkit start one two main botnet operations bitcoin mining click fraud machines involved bitcoin mining generate bitcoins controller estimated worth 2.7 million us dollars per year september 2012 machines used click fraud simulate clicks website advertisements paid pay per click basis estimated profit activity may high 100,000 us dollars per day costing advertisers 900,000 day fraudulent clicks typically zeroaccess infects master boot record mbr infected machine may alternatively infect random driver c \windows\system32\drivers giving total control operating system also disables windows security center firewall windows defender operating system zeroaccess also hooks tcp/ip stack help click fraud software also looks tidserv malware removes finds
node29:Wikipedia entry. Entry name: Transaction_Processing_Facility. Entry content: transaction processing facility transaction processing facility tpf ibm real-time operating system mainframe computers descended ibm system/360 family including zseries system z9 tpf delivers fast high-volume high-throughput transaction processing handling large continuous loads essentially simple transactions across large geographically dispersed networks industrial-strength transaction processing systems notably ibm cics ims tpf specialty extreme volume large numbers concurrent users fast response times example visa credit card transaction processing peak holiday shopping season tpf passenger reservation application pars international version ipars used many airlines one tpf major optional components high performance specialized database facility called tpf database facility tpfdf close cousin tpf transaction monitor alcs developed ibm integrate tpf services common mainframe operating system mvs z/os tpf evolved airlines control program acp free package developed mid-1960s ibm association major north american european airlines 1979 ibm introduced tpf replacement acp — priced software product new name suggests greater scope evolution non-airline related entities tpf traditionally ibm system/370 assembly language environment performance reasons many tpf assembler applications persist however recent versions tpf encourage use c. another programming language called sabretalk born died tpf ibm announced delivery current release tpf dubbed z/tpf v1.1 september 2005 significantly z/tpf adds 64-bit addressing mandates use 64-bit gnu development tools gcc compiler dignus systems/c++ systems/c supported compilers z/tpf dignus compilers offer reduced source code changes moving tpf 4.1 z/tpf current users include sabre reservations visa inc. authorizations american airlines american express authorizations dxc technology shares reservations formerly eds hpes holiday inn central reservations amtrak marriott international travelport galileo apollo worldspan axess japan gds citibank air canada trenitalia reservations delta air lines reservations operations japan airlines tpf capable running multiprocessor systems one cpu within lpar cpus referred instruction streams simply i-streams running lpar one i-stream tpf said running tightly coupled tpf adheres smp concepts concept numa-based distinctions memory addresses exist depth cpu ready list measured incoming transaction received queued i-stream lowest demand thus maintaining continuous load balancing among available processors cases loosely coupled configurations populated multiprocessor cpcs central processing complex i.e physical machine packaged one system cabinet smp takes place within cpc described whereas sharing inter-cpc resources takes place described loosely coupled tpf architecture memory except 4kb-sized prefix area shared among i-streams instances memory-resident data must kept separated i-stream programmer typically allocates storage area number subsections equal number i-streams accesses desired i-stream associated area taking base address allocated area adding product i-stream relative number times size subsection tpf capable supporting multiple mainframes size — single i-stream multiple i-stream connecting operating common database currently 32 ibm mainframes may share tpf database system operation would called 32-way loosely coupled simplest loosely coupled system would two ibm mainframes sharing one dasd direct access storage device case control program would equally loaded core program record dasd could potentially accessed either mainframe order serialize accesses data records loosely coupled system practice known record locking must used means one mainframe processor obtains hold record mechanism must prevent processors obtaining hold communicate requesting processors waiting within tightly coupled system easy manage i-streams via use record hold table however lock obtained offboard tpf processor dasd control unit external process must used historically record locking accomplished dasd control unit via rpq known llf limited locking facility later ellf extended llf ellf replaced multipathing lock facility mplf run clustered loosely coupled z/tpf requires either mplf disk control units alternative locking device called coupling facility records absolutely must managed record locking process processor shared tpf record accesses done using record type ordinal defined record type tpf system 'fred gave 100 records ordinals processor shared scheme record type 'fred ordinal 5 would resolve exactly file address dasd — clearly necessitating use record locking mechanism processor shared records tpf system accessed via exactly file address resolve exactly location processor unique record one defined processor expected loosely coupled complex record type 'fred perhaps 100 ordinals however user 2 processors examines file address record type 'fred ordinal 5 resolves note different physical address used tpf general-purpose operating system gpos tpf specialized role process transaction input messages return output messages 1:1 basis extremely high volume short maximum elapsed time limits tpf built-in graphical user interface functionality tpf never offered direct graphical display facilities implement host would considered unnecessary potentially harmful diversion real-time system resources tpf user interface command-line driven simple text display terminals scroll upwards mouse-driven cursors windows icons tpf prime cras computer room agent set — best thought operator console character messages intended mode communications human users work accomplished via use command line similar unix without x several products available connect prime cras provide graphical interface functions tpf operator tpf operations server graphical interfaces end users desired must provided external systems systems perform analysis character content see screen scrape convert message to/from desired graphical form depending context specialized purpose operating system tpf host compiler/assembler text editor implement concept desktop one might expect find gpos tpf application source code commonly stored external systems likewise built offline starting z/tpf 1.1 linux supported build platform executable programs intended z/tpf operation must observe elf format s390x-ibm-linux using tpf requires knowledge command guide since support online command directory man /help facility users might accustomed commands created shipped ibm system administration tpf called functional messages -- commonly referred z-messages prefixed letter z letters reserved customers may write commands tpf implements debugging distributed client-server mode necessary system headless multi-processing nature pausing entire system order trap single task would highly counter-productive debugger packages developed 3rd party vendors took different approaches break/continue operations required tpf host implementing unique communications protocols used traffic human developer running debugger client server-side debug controller well form function debugger program operations client side two examples 3rd party debugger packages step step trace bedford associates cmstpf tpf/gi ztpfgi tpf software inc.. neither package wholly compatible ibm offering ibm debugging client offering packaged ide called ibm tpf toolkit tpf highly optimized permit messages supported network either switched another location routed application specific set programs permit extremely efficient accesses database records historically data tpf system fit fixed record core block sizes 381 1055 4k bytes due part physical record sizes blocks located dasd much overhead saved freeing part operating system breaking large data entities smaller ones file operations reassembling read operations since ibm hardware i/o via use channels channel programs tpf would generate small efficient channel programs i/o — name speed since early days also placed premium size storage media — memory disk tpf applications evolved powerful things using little resource today much limitations removed fact legacy support smaller-than-4k dasd records still used advances made dasd technology read/write 4k record efficient 1055 byte record advances increased capacity device longer premium placed ability pack data smallest model possible tpf also program segments allocated 381 1055 4k byte-sized records different points history segment consisted single record typically comprehensive application requiring perhaps tens even hundreds segments first forty years tpf history segments never link-edited instead relocatable object code direct output assembler laid memory internally self-referential relocatable symbols resolved entire image written file later loading system created challenging programming environment segments related one another could directly address control transfer implemented enter/back system service acp/tpf earliest days circa 1965 memory space severely limited gave rise distinction file-resident core-resident programs -- frequently used application programs written memory never removed core-residency rest stored file read demand backing memory buffers released post-execution introduction c language tpf version 3.0 first implemented conformant segment conventions including absence linkage editing scheme quickly demonstrated impractical anything simplest c programs tpf 4.1 truly fully linked load modules introduced tpf compiled z/os c/c++ compiler using tpf-specific header files linked iewl resulting z/os-conformant load module manner could considered traditional tpf segment tpf loader extended read z/os-unique load module file format lay file-resident load modules sections memory meanwhile assembly language programs remained confined tpf segment model creating obvious disparity applications written assembler written higher level languages hll z/tpf 1.1 source language types conceptually unified fully link-edited conform elf specification segment concept became obsolete meaning program written source language -- including assembler -- may size furthermore external references became possible separate source code programs segments could directly linked together shared object value point critical legacy applications benefit improved efficiency simple repackaging -- calls made members single shared object module much shorter pathlength run time compared calling system enter/back service members shared object may share writeable data regions directly thanks copy-on-write functionality also introduced z/tpf 1.1 coincidentally reinforces tpf reentrancy requirements concepts file- core- residency also made obsolete due z/tpf design point sought programs resident memory times since z/tpf maintain call stack high-level language programs gave hll programs ability benefit stack-based memory allocation deemed beneficial extend call stack assembly language programs optional basis ease memory pressure ease recursive programming z/tpf executable programs packaged elf shared objects historically step previous core blocks— memory— also 381 1055 4 k bytes size since memory blocks size overhead obtaining memory found systems discarded programmer merely needed decide size block would fit need ask tpf would maintain list blocks use simply hand first block available list physical memory divided sections reserved size 1055 byte block always came section returned overhead needed add address appropriate physical block table list compaction data collection required applications got advanced demands memory increased c became available memory chunks indeterminate large size required gave rise use heap storage memory management routines ease overhead tpf memory broken frames— 4 kb size 1 mb z/tpf application needs certain number bytes number contiguous frames required fill need granted
node30:Wikipedia entry. Entry name: Carnivore_(software). Entry content: carnivore software carnivore later renamed dcs1000 system implemented federal bureau investigation fbi designed monitor email electronic communications used customizable packet sniffer monitor target user internet traffic carnivore implemented october 1997 2005 replaced improved commercial software carnivore grew earlier fbi project called omnivore replaced older surveillance tool migrated us navy fbi director integrity compliance patrick w. kelley still undisclosed name september 1998 fbi data intercept technology unit ditu quantico virginia launched project migrate omnivore sun solaris operating system windows nt platform done facilitate miniaturization system support wider range personal computer pc equipment migration project called phiple troenix resulting system named carnivore carnivore system microsoft windows-based workstation packet-sniffing software removable jaz disk drive computer must physically installed internet service provider isp location sniff traffic lan segment look email messages transit technology highly advanced—it used standard packet sniffer straightforward filtering critical components operation filtering criteria accurately match appropriate subject elaborate content model developed independent technical review carnivore justice department prepared 2000 several groups expressed concern regarding implementation usage possible abuses carnivore july 2000 electronic frontier foundation submitted statement subcommittee constitution committee judiciary united states house representatives detailing dangers system electronic privacy information center also made several releases dealing fbi countered concerns statements highlighting target-able nature carnivore assistant fbi director donald kerr quoted saying carnivore device works much like commercial sniffers network diagnostic tools used isps every day except provides fbi unique ability distinguish communications may lawfully intercepted may example court order provides lawful interception one type communication e.g. e-mail excludes communications e.g. online shopping carnivore tool configured intercept e-mails transmitted either named subject ... specialized network analyzer sniffer runs application program normal personal computer microsoft windows operating system works sniffing proper portions network packets copying storing packets match finely defined filter set programmed conformity court order filter set extremely complex provides fbi ability collect transmissions comply pen register court orders trap trace court orders title iii interception orders etc ... ... important distinguish meant sniffing problem discriminating users messages internet complex one however exactly carnivore search contents every message collect contain certain key words like bomb drugs selects messages based criteria expressly set court order example messages transmitted particular account particular user prolonged negative coverage press fbi changed name system carnivore benign-sounding dcs1000 dcs reported stand digital collection system system functions associated press reported mid-january 2005 fbi essentially abandoned use carnivore 2001 favor commercially available software narusinsight mass surveillance system report 2007 described successor system located inside internet provider network junction point router network switch capable indiscriminately storing data flowing provider network",wikics,nc
"Classify the wikipedia page represented by node4 using its subgraph data (text attributes and connections) as follows.

node0: Robert Tappan Morris created the 1988 Morris Worm, first convicted under the Computer Fraud and Abuse Act; later became a MIT professor and security researcher.  
node1: ISF's Standard of Good Practice guides info security risks, aligns with ISO/IEC 27000-series, addresses cloud computing, and aids compliance with global regulations.  
node2: Software-Defined Perimeter (SDP) secures networks via need-to-know access, hiding infrastructure from unauthorized users to block attacks like DDoS and MITM.  
node3: Alexander Sotirov exposed browser flaws, pioneered heap Feng Shui, and co-created rogue certificates via MD5 collisions; co-founded Trail of Bits.  
node4: Cloud Security Alliance (CSA) promotes cloud security best practices, educates globally, and collaborates with governments/enterprises to standardize secure cloud computing.  
node5: Qualys provides cloud-based security/compliance tools, pioneered SaaS vulnerability management, and expanded via acquisitions, earning industry awards and partnerships.  
node6: Global surveillance involves mass data collection by Five Eyes alliance, exposed by Snowden, targeting communications, privacy, and international networks post-9/11.
node7: Protecting computer systems from threats like phishing, DoS attacks, and breaches through security measures, culture, and incident response strategies.  
node8: Managing sensitive info access,分类如个人、商业机密及政府机密，涉及隐私法（如GDPR）与数据保护协议。  
node9: Overloads targets with ICMP packets, a DoS attack method, also used for network diagnostics.  
node10: Cloud governance firm offering automated security for enterprises, expanding globally with partnerships like AWS and Microsoft.  
node11: Russian cybersecurity firm (founded 1999) known for firewalls and anti-malware tools, acquired by Yandex in 2016.
node12: Defines personal data under GDPR and US standards, highlighting PII, quasi-identifiers, and jurisdictional variations in data protection laws.  
node13: A Sybil attack exploits P2P networks by creating fake identities to gain influence; defenses include validation techniques and proof-of-work.  
node14: John McConnell’s career spans NSA leadership, DNI role under Bush, FISA reforms, and controversies, followed by Booz Allen consultancy.  
node15: MailChannels provides anti-spam tech for ISPs, using Nginx-based tools to block outbound spam and protect email networks.
node16: NSA's data collection from U.S. tech firms since 2007; exposed by Snowden in 2013, causing global privacy concerns and legal debates under FISA authority.
node17: Cybersecurity standards like ISO/IEC 27001, NIST, and CSA guidelines address risk management, certification, and compliance for data protection across industries.  
node18: Aloysius Cheang leads cloud security initiatives, oversees ISO/IEC standards, and contributes to cybersecurity frameworks in Asia and Singapore.  
node19: Valerie Aurora co-founded the Ada Initiative to support women in tech, developed Linux file systems, and advocates against harassment in open-source communities.  
node20: Security-as-a-Service (SecaaS) offers subscription-based cloud security tools, balancing cost and protection but facing risks from internet dependency and breaches.  
node21: Black bag operations involve covert FBI entries without warrants to gather intelligence, historically used but now restricted to national security cases with approvals.  
node22: Vincent Moscaritolo pioneered encryption tech, co-founded Silent Circle, and develops secure cloud systems like ZeroDark.cloud with zero-knowledge encryption.  
node23: Lunacloud provides Portuguese cloud infrastructure services (servers, storage) compatible with AWS/Rackspace, optimized for cost and performance via API-driven platforms.  
node24: Cloud OS is a lightweight browser-based OS designed for quick web access on low-end devices, derived from Ubuntu and Firefox.  
node25: some called him a privacy hero, others labeled him a traitor, influencing surveillance reform discussions.  
node26: Finjan enforces cybersecurity patents through litigation, licenses proactive security tech, and focuses on enterprise web protection via legal and innovation strategies.
node27: Actiance develops security/compliance platforms for unified communications, social media, and enterprise networks since 1997, focusing on financial regulatory needs.  
node28: Cloud-based cybersecurity firm detecting phishing, malware, and online threats; monitors digital presence and provides mobile app security services since 2009.

the connection relationship among the nodes mentioned:
 <node0, node7>,<node1, node4>,<node1, node17>,<node2, node4>,<node2, node7>,<node3, node7>,<node4, node5>,<node4, node10>,<node4, node16>,<node4, node18>,<node4, node20>,<node4, node22>,<node4, node28>,<node5, node26>,<node6, node12>,<node6, node16>,<node7, node8>,<node7, node9>,<node7, node11>,<node7, node13>,<node7, node15>,<node7, node17>,<node7, node19>,<node7, node27>,<node14, node16>,<node16, node21>,<node16, node25>,<node20, node23>,<node20, node24>,<node23, node24>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",distributed computing architecture,"node0: Robert Tappan Morris created the 1988 Morris Worm, first convicted under the Computer Fraud and Abuse Act; later became a MIT professor and security researcher.  
node1: ISF's Standard of Good Practice guides info security risks, aligns with ISO/IEC 27000-series, addresses cloud computing, and aids compliance with global regulations.  
node2: Software-Defined Perimeter (SDP) secures networks via need-to-know access, hiding infrastructure from unauthorized users to block attacks like DDoS and MITM.  
node3: Alexander Sotirov exposed browser flaws, pioneered heap Feng Shui, and co-created rogue certificates via MD5 collisions; co-founded Trail of Bits.  
node4: Cloud Security Alliance (CSA) promotes cloud security best practices, educates globally, and collaborates with governments/enterprises to standardize secure cloud computing.  
node5: Qualys provides cloud-based security/compliance tools, pioneered SaaS vulnerability management, and expanded via acquisitions, earning industry awards and partnerships.  
node6: Global surveillance involves mass data collection by Five Eyes alliance, exposed by Snowden, targeting communications, privacy, and international networks post-9/11.
node7: Protecting computer systems from threats like phishing, DoS attacks, and breaches through security measures, culture, and incident response strategies.  
node8: Managing sensitive info access,分类如个人、商业机密及政府机密，涉及隐私法（如GDPR）与数据保护协议。  
node9: Overloads targets with ICMP packets, a DoS attack method, also used for network diagnostics.  
node10: Cloud governance firm offering automated security for enterprises, expanding globally with partnerships like AWS and Microsoft.  
node11: Russian cybersecurity firm (founded 1999) known for firewalls and anti-malware tools, acquired by Yandex in 2016.
node12: Defines personal data under GDPR and US standards, highlighting PII, quasi-identifiers, and jurisdictional variations in data protection laws.  
node13: A Sybil attack exploits P2P networks by creating fake identities to gain influence; defenses include validation techniques and proof-of-work.  
node14: John McConnell’s career spans NSA leadership, DNI role under Bush, FISA reforms, and controversies, followed by Booz Allen consultancy.  
node15: MailChannels provides anti-spam tech for ISPs, using Nginx-based tools to block outbound spam and protect email networks.
node16: NSA's data collection from U.S. tech firms since 2007; exposed by Snowden in 2013, causing global privacy concerns and legal debates under FISA authority.
node17: Cybersecurity standards like ISO/IEC 27001, NIST, and CSA guidelines address risk management, certification, and compliance for data protection across industries.  
node18: Aloysius Cheang leads cloud security initiatives, oversees ISO/IEC standards, and contributes to cybersecurity frameworks in Asia and Singapore.  
node19: Valerie Aurora co-founded the Ada Initiative to support women in tech, developed Linux file systems, and advocates against harassment in open-source communities.  
node20: Security-as-a-Service (SecaaS) offers subscription-based cloud security tools, balancing cost and protection but facing risks from internet dependency and breaches.  
node21: Black bag operations involve covert FBI entries without warrants to gather intelligence, historically used but now restricted to national security cases with approvals.  
node22: Vincent Moscaritolo pioneered encryption tech, co-founded Silent Circle, and develops secure cloud systems like ZeroDark.cloud with zero-knowledge encryption.  
node23: Lunacloud provides Portuguese cloud infrastructure services (servers, storage) compatible with AWS/Rackspace, optimized for cost and performance via API-driven platforms.  
node24: Cloud OS is a lightweight browser-based OS designed for quick web access on low-end devices, derived from Ubuntu and Firefox.  
node25: some called him a privacy hero, others labeled him a traitor, influencing surveillance reform discussions.  
node26: Finjan enforces cybersecurity patents through litigation, licenses proactive security tech, and focuses on enterprise web protection via legal and innovation strategies.
node27: Actiance develops security/compliance platforms for unified communications, social media, and enterprise networks since 1997, focusing on financial regulatory needs.  
node28: Cloud-based cybersecurity firm detecting phishing, malware, and online threats; monitors digital presence and provides mobile app security services since 2009.","node0:Wikipedia entry. Entry name: Robert_Tappan_Morris. Entry content: robert tappan morris robert tappan morris born november 8 1965 american computer scientist entrepreneur best known creating morris worm 1988 considered first computer worm internet morris prosecuted releasing worm became first person convicted then-new computer fraud abuse act went co-found online store viaweb one first web-based applications later funding firm combinator—both paul graham later joined faculty department electrical engineering computer science massachusetts institute technology received tenure 2006 elected national academy engineering 2019 morris born 1965 parents robert morris anne farlow morris senior morris computer scientist bell labs helped design multics unix later became chief scientist national computer security center division national security agency nsa morris grew millington section long hill township new jersey graduated delbarton school 1983 morris attended harvard university later went graduate school cornell first year designed computer worm disrupted many computers fledgling internet led indicted year later serving conviction term returned harvard complete ph.d. supervision h.t kung completed ph.d. 1999 morris worm developed 1988 graduate student cornell university released worm mit rather cornell worm exploited several vulnerabilities gain entry targeted systems including worm programmed check computer found determine infection already present however morris believed administrators might try defeat worm instructing computer report false positive compensate possibility morris directed worm copy anyway 14 time matter response infection-status interrogation level persistence design flaw created system loads brought attention system administrators also disrupted target computers ensuing trial estimated cost potential loss productivity caused worm efforts remove different systems ranged 200 53,000 1989 morris indicted violating united states code title 18 computer fraud abuse act first person indicted act december 1990 sentenced three years probation 400 hours community service fine 10,050 plus costs supervision appealed motion rejected following march morris stated motive trial demonstrate inadequacies current security measures computer networks exploiting security defects discovered completed sentence 1994 morris principal research interest computer network architectures includes work distributed hash tables chord wireless mesh networks roofnet longtime friend collaborator paul graham addition founding two companies together graham dedicated book ansi common lisp morris named programming language generates online stores web pages rtml honor graham lists morris one personal heroes saying never wrong
node1:Wikipedia entry. Entry name: Standard_of_Good_Practice_for_Information_Security. Entry content: standard good practice information security standard good practice information security published information security forum isf business-focused practical comprehensive guide identifying managing information security risks organizations supply chains recent edition 2018 update 2016 edition upon release 2011 standard significant update standard four years covers information security 'hot topics consumer devices critical infrastructure cybercrime attacks office equipment spreadsheets databases cloud computing 2011 standard aligned requirements information security management system isms set iso/iec 27000-series standards provides wider deeper coverage iso/iec 27002 control topics well cloud computing information leakage consumer devices security governance addition providing tool enable iso 27001 certification 2011 standard provides full coverage cobit v4 topics offers substantial alignment relevant standards legislation pci dss sarbanes oxley act enable compliance standards standard used chief information security officers cisos information security managers business managers managers internal external auditors service providers organizations sizes 2018 standard available free charge members isf non-members able purchase copy standard directly isf standard historically organized six categories aspects computer installations networks address underlying infrastructure critical business applications run end-user environment covers arrangements associated protecting corporate workstation applications endpoint use individuals systems development deals new applications systems created security management addresses high-level direction control standard primarily published simple modular format eliminates redundancy example various sections devoted security audit review consolidated six aspects within standard composed number areas covering specific topic area broken sections contains detailed specifications information security best practice statement unique reference example sm41.2 indicates specification security management aspect area 4 section 1 listed specification 2 within section principles objectives part standard provides high-level version standard bringing together principles provide overview needs performed meet standard objectives outline reason actions necessary section published standard also includes extensive topics matrix index introductory material background information suggestions implementation information see list computing information-security related articles
node2:Wikipedia entry. Entry name: Software_Defined_Perimeter. Entry content: software defined perimeter software defined perimeter sdp also called black cloud approach computer security evolved work done defense information systems agency disa global information grid gig black core network initiative around 2007 connectivity software defined perimeter based need-to-know model device posture identity verified access application infrastructure granted application infrastructure effectively “ black ” dod term meaning infrastructure detected without visible dns information ip addresses inventors systems claim software defined perimeter mitigates common network-based attacks including server scanning denial service sql injection operating system application vulnerability exploits man-in-the-middle cross-site scripting xss cross-site request forgery csrf pass-the-hash pass-the-ticket attacks unauthorized users open source implementation done paid homeland security premise traditional enterprise network architecture create internal network separated outside world fixed perimeter consists series firewall functions block external users coming allows internal users get traditional fixed perimeters help protect internal services external threats via simple techniques blocking visibility accessibility outside perimeter internal applications infrastructure weaknesses traditional fixed perimeter model becoming ever problematic popularity user-managed devices phishing attacks providing untrusted access inside perimeter saas iaas extending perimeter internet software defined perimeters address issues giving application owners ability deploy perimeters retain traditional model value invisibility inaccessibility outsiders deployed anywhere – internet cloud hosting center private corporate network across locations simplest form architecture sdp consists two components sdp hosts sdp controllers 6 sdp hosts either initiate connections accept connections actions managed interactions sdp controllers via control channel see figure 1 thus software defined perimeter control plane separated data plane enable greater scalability addition components redundant higher availability sdp framework following workflow see figure 2 general workflow remains implementations application sdps favor certain implementations others client-to-gateway implementation one servers protected behind accepting sdp host accepting sdp host acts gateway clients protected servers implementation used inside enterprise network mitigate common lateral movement attacks server scanning os application vulnerability exploits password cracking man-in-the-middle pass-the-hash pth others alternatively implemented internet isolate protected servers unauthorized users mitigate attacks denial service sql injection os application vulnerability exploits password cracking man-in-the-middle cross-site scripting xss cross-site request forgery csrf others client-to-server implementation similar features benefits client-to-gateway implementation discussed however case server protected running accepting sdp host software instead gateway sitting front server running software choice client-to-gateway implementation client-to-server implementation typically based number servers protected load balancing methodology elasticity servers similar topological factors 13 server-to-server implementation servers offering representational state transfer rest service simple object access protocol soap service remote procedure call rpc kind application programming interface api internet protected unauthorized hosts network example case server initiating rest call would initiating sdp host server offering rest service would accepting sdp host implementing sdp use case reduce load services mitigate attacks similar ones mitigated client-to-gateway implementation client-to-server-to-client implementation results peer-to-peer relationship two clients used applications ip telephone chat video conferencing cases sdp obfuscates ip addresses connecting clients minor variation user also client-to-gateway-to-client configuration user wishes hide application server well data breaches involve intellectual property financial information hr data sets data available within enterprise network attackers may gain entrance internal network compromising one computers network move laterally get access high value information asset case enterprise deploy sdp inside data center partition network isolate high-value applications unauthorized users network access protected application thus mitigating lateral movement attacks depend useful protecting physical machines software overlay nature sdp also allows integrated private clouds leverage flexibility elasticity environments role sdps used enterprises hide secure public cloud instances isolation unified system includes private public cloud instances and/or cross-cloud clusters software-as-a-service saas vendors use sdp protect services implementation software service would accepting sdp host users desiring connectivity service would initiating hosts allows saas leverage global reach internet without enabling internet global attack surface infrastructure-as-a-service iaas vendors offer sdp-as-a-service protected on-ramp customers allows customers take advantage agility cost savings iaas mitigating wide range potential attacks platform-as-a-service paas vendors differentiate offering including sdp architecture part service gives end users embedded security service mitigates network-based attacks vast amount new devices connected internet back-end applications manage devices and/or extract information devices mission-critical act custodian private sensitive data sdps used hide servers interactions internet provide improved security up-time
node3:Wikipedia entry. Entry name: Alexander_Sotirov. Entry content: alexander sotirov alexander sotirov computer security researcher employed determina vmware 2012 sotirov co-founded new york based trail bits dino dai zovi dan guido currently serves chief scientist well known discovery ani browser vulnerability well so-called heap feng shui technique exploiting heap buffer overflows browsers 2008 presented research black hat showing bypass memory protection safeguards windows vista together team industry security researchers academic cryptographers published research creating rogue certificate authority using collisions md5 cryptographic hash function december 2008 sotirov founder organizer pwnie awards program committee 2008 workshop offensive technologies woot '08 served black hat review board since 2011 ranked 6 violet blue list top 10 sexy geeks 2009
node4:Wikipedia entry. Entry name: Cloud_Security_Alliance. Entry content: cloud security alliance cloud security alliance csa not-for-profit organization mission “ promote use best practices providing security assurance within cloud computing provide education uses cloud computing help secure forms computing. ” csa 80,000 individual members worldwide csa gained significant reputability 2011 american presidential administration selected csa summit venue announcing federal government ’ cloud computing strategy csa formed december 2008 coalition individuals saw need provide objective enterprise user guidance adoption use cloud computing initial work product security guidance critical areas focus cloud computing put together wiki-style dozens volunteers 2014 chairman board csa dave cullinane vp global security privacy catalina marketing st petersburg florida former ciso ebay cullinane said application exposed internet allow people make money probed 2009 cloud security alliance incorporated nevada corporation achieved us federal 501 c 6 non-profit status registered foreign non-profit corporation washington csa works support number global policy makers focus cloud security initiatives including national institute standards technology nist european commission singapore government various data protection authorities march 2012 csa selected partner three europe ’ largest research centers cern embl esa launch helix nebula – science cloud cloud security alliance employs roughly sixty full-time contract staff worldwide several thousand active volunteers participating research working groups chapters time according csa member-driven organization chartered promoting use best practices providing security assurance within cloud computing providing education uses cloud computing help secure forms computing individuals interested cloud computing experience assist making secure receive complimentary individual membership based minimum level participation cloud security alliance network chapters worldwide chapters separate legal entities cloud security alliance operate within guidelines set cloud security alliance united states chapters may elect benefit non-profit tax shield cloud security alliance chapters encouraged hold local meetings participate areas research chapter activities coordinated cloud security alliance worldwide separate legal entities europe asia pacific called cloud security alliance europe scottish company united kingdom cloud security alliance asia pacific ltd singapore legal entity responsible overseeing cloud security alliance-related activities respective regions legal entities operate agreement cloud security alliance give oversight power separate boards directors companies limited guarantee managing directors members executive team cloud security alliance cloud security alliance 25+ active working groups key areas research include cloud standards certification education training guidance tools global reach driving innovation
node5:Wikipedia entry. Entry name: Qualys. Entry content: qualys qualys inc. provides cloud security compliance related services based foster city california founded 1999 qualys first company deliver vulnerability management solutions applications web using software service saas model 2013 gartner group fifth time gave qualys strong positive rating services added cloud-based compliance web application security offerings qualys 10,300 customers 130 countries including majority forbes global 100 company strategic partnerships major managed services providers consulting organizations including bt dell secureworks fujitsu ibm ntt symantec verizon wipro company also founding member cloud security alliance csa qualys founded 1999 company launched qualysguard december 2000 making qualys one first entrants vulnerability management market march 2001 angel investor philippe courtot became ceo company major investment company also serves chairman board qualysguard intranet scanner released 2002 automatically scan corporate lans vulnerabilities search available patch following year qualys released freemap web-based tool scanning mapping identifying possible security holes within networks connected internet 2005 qualys extended qualysguard product line 2008 qualys introduced qualysguard policy compliance extended platform ’ global scanning capabilities collect compliance data across organization map information policies document compliance auditing purposes qualys also released service web application scanning named qualysguard web application scanning 2010 rsa conference usa qualys announced qualysguard malware detection service new service designed scan identify malware web sites also announced qualys secure seal allows websites show visitors passed security scans july 2010 qualys announced qualys browsercheck service checking web browsers plug-ins security vulnerabilities rsa conference 2011 qualys launched new open source web application firewall project ironbee led ivan ristic creator modsecurity director engineering qualys rsa conference 2012 qualys introduced updates qualysguard cloud platform extended capabilities help customers improve security systems applications automate compliance initiatives it-grc provide online protection cyber-attacks reducing operational costs increasing efficiency security programs qualys went public nasdaq symbol qlys september 28 2012 raising net proceeds 87.5 million 2014 rsa conference qualys announced general availability qualyguard web application firewall waf provides protection websites running amazon ec2 on-premises well new continuous monitoring solution free top 4 security controls service 2015 company released 2.0 waf software included virtual patching customizable event responses year qualys also released security compliance solution called cloud agent platform august 2015 company released free asset management service qualys assetview allowed organizations keep inventory computers software february 2016 qualys released threatprotect vulnerability detection service cloud-based platform company received full certification configuration management databases cmdbs app servicenow allowing app integrated servicenow system march 2016 july 2016 announced qualys would integrate microsoft azure security center august 2017 qualys acquired network analysis assets nevis networks undisclosed sum december 2017 qualys announced acquisition netwatcher network security company april 2018 qualys acquired software assets singapore-based 1mobility startup develops security technologies mobile phones june 2018 qualys announced addition asset inventory cloud platform sc magazine awarded qualys security software solutions every year 2004-2014 sc magazine also awarded qualys best security company 2014 2010 inc. magazine ranked qualys within 5000 fastest growing private companies usa based 104 revenue growth 2006 2009 2012 silicon valley/san jose business journal recognized qualys one largest private companies silicon valley – ranking 26th list 51 november 2014 qualys received 2014 security reader choice awards best risk policy compliance solution best application security product best vulnerability 2014 2015 qualys received award best application security product sans institute 2017 frost sullivan recognizes qualys 2017 global vulnerability management market leadership award qualys honored cyber defense magazine 2017 cyber security leader
node6:Wikipedia entry. Entry name: Global_surveillance. Entry content: global surveillance global surveillance refers mass surveillance entire populations across national borders roots traced back middle 20th century ukusa agreement jointly enacted united kingdom united states later expanded canada australia new zealand create present five eyes alliance alliance developed cooperation arrangements several third-party nations eventually resulted establishment global surveillance network code-named echelon 1971 existence however widely acknowledged governments mainstream media global surveillance disclosures edward snowden triggered debate right privacy digital age origins global surveillance traced back late 1940s ukusa agreement collaboratively enacted united kingdom united states eventually culminated creation global surveillance network code-named echelon 1971 aftermath 1970s watergate affair subsequent congressional inquiry led sen. frank church revealed nsa collaboration britain gchq routinely intercepted international communications prominent anti-vietnam war leaders jane fonda dr. benjamin spock decades later multi-year investigation european parliament highlighted nsa role economic espionage report entitled 'development surveillance technology risk abuse economic information 1999 however general public series detailed disclosures internal nsa documents june 2013 first revealed massive extent nsa spying foreign domestic leaked ex-contractor edward snowden even number older global surveillance programs prism xkeyscore tempora referenced 2013 release thousands documents many countries around world including western allies member states nato targeted five eyes strategic alliance australia canada new zealand uk usa—five english-speaking western countries aiming achieve total information awareness mastering internet analytical tools boundless informant confirmed nsa director keith b. alexander 26 september 2013 nsa collects stores phone records american citizens much data kept large storage facilities utah data center us 1.5 billion megaproject referred wall street journal symbol spy agency surveillance prowess 6 june 2013 britain guardian newspaper began publishing series revelations yet unknown american whistleblower revealed several days later ex-cia ex-nsa-contracted systems analyst edward snowden snowden gave cache documents two journalists glenn greenwald laura poitras greenwald later estimated cache contains 15,000 – 20,000 documents large detailed small two subsequent months publications became clear nsa operated complex web spying programs allowed intercept internet telephone conversations billion users dozens countries around world specific revelations made china european union latin america iran pakistan australia new zealand however published documentation reveals many programs indiscriminately collected bulk information directly central servers internet backbones almost invariably carry reroute information distant countries due central server backbone monitoring many programs overlapped interrelated among one another programs often carried assistance us entities united states department justice fbi sanctioned us laws fisa amendments act necessary court orders signed secret foreign intelligence surveillance court nsa programs directly aided national foreign intelligence agencies britain gchq australia dsd well large private telecommunications internet corporations verizon telstra google facebook snowden disclosures nsa surveillance activities continuation news leaks ongoing since early 2000s one year september 11 2001 attacks former u.s. intelligence official william binney publicly critical nsa spying u.s. citizens disclosures followed 16 december 2005 new york times published report headline bush lets u.s. spy callers without courts 2006 evidence nsa domestic surveillance u.s. citizens provided usa today newspaper released report 11 may 2006 regarding nsa massive database phone records collected tens millions u.s. citizens according usa today phone records provided several telecom companies verizon bellsouth 2008 security analyst babak pasdar revealed existence so-called quantico circuit team discovered 2003 brought update carrier security system circuit provided u.s. federal government backdoor network unnamed wireless provider later independently identified verizon snowden made first contact journalist glenn greenwald guardian late 2012 timeline mass surveillance disclosures snowden continued throughout entire year 2013 documents leaked snowden 2013 include court orders memos policy documents related wide range surveillance activities according april 2013 summary documents leaked snowden combat terrorism surveillance programs employed assess foreign policy economic stability countries gather commercial secrets statement addressed national congress brazil early august 2013 journalist glenn greenwald maintained u.s. government used counter-terrorism pretext clandestine surveillance order compete countries business industrial economic fields december 2013 letter brazilian government snowden wrote programs never terrorism 're economic spying social control diplomatic manipulation 're power according white house panel member nsa n't stop terrorist attack however nsa chief said surveillance programs stopped 54 terrorist plots interview der spiegel published 12 august 2013 former nsa director michael hayden admitted nsa steal secrets 're number one hayden also added steal stuff make safe make rich according documents seen news agency reuters secrets subsequently funnelled authorities across nation help launch criminal investigations americans federal agents instructed recreate investigative trail order cover information originated according congressional testimony keith b. alexander director national security agency one purposes data collection store phone records inside place searched assessed times asked senator mark udall goal nsa collect phone records americans alexander replied yes believe nation best interest put phone records lockbox could search nation needs united states nsa collecting phone records 300 million americans international surveillance tool xkeyscore allows government analysts search vast databases containing emails online chats browsing histories millions individuals britain global surveillance program tempora intercepts fibre-optic cables form backbone internet nsa prism surveillance program data already reached final destination would directly harvested servers following u.s. service providers microsoft yahoo google facebook paltalk aol skype youtube apple inc nsa uses analysis phone call e-mail logs american citizens create sophisticated graphs social connections identify associates locations certain times travelling companions personal information according top secret nsa documents leaked snowden single day 2012 nsa collected e-mail address books day nsa collects contacts estimated 500,000 buddy lists live-chat services well inbox displays web-based e-mail accounts taken together data enables nsa draw detailed maps person life based personal professional religious political connections federal agencies united states data gathered surveillance programs routinely shared u.s. federal bureau investigation fbi u.s. central intelligence agency cia addition nsa supplies domestic intercepts drug enforcement administration dea internal revenue service irs law enforcement agencies foreign countries result nsa secret treaties foreign countries data gathered surveillance programs routinely shared countries signatories ukusa agreement foreign countries also help operate several nsa programs xkeyscore see international cooperation special branch nsa called follow money ftm monitors international payments banking credit card transactions later stores collected data nsa financial databank tracfin mobile phone tracking refers act attaining position coordinates mobile phone according washington post nsa tracking locations mobile phones world tapping cables connect mobile networks globally serve u.s. cellphones well foreign ones process nsa collects 5 billion records phone locations daily basis enables nsa analysts map cellphone owners relationships correlating patterns movement time thousands millions phone users cross paths order decode private conversations nsa cracked commonly used cellphone encryption technology a5/1 according classified document leaked snowden agency process encrypted a5/1 even acquired encryption key addition nsa uses various types cellphone infrastructure links carrier networks determine location cellphone user tracked visitor location registers worldwide sales smartphones grew rapidly nsa decided take advantage smartphone boom particularly advantageous smartphone contains variety data sets would interest intelligence agency social contacts user behaviour interests location photos credit card numbers passwords according documents leaked snowden nsa set task forces assigned several smartphone manufacturers operating systems including apple inc. iphone ios operating system well google android mobile operating system similarly britain gchq assigned team study crack blackberry addition smaller nsa programs known scripts perform surveillance 38 different features ios 3 ios 4 operating systems include mapping feature voicemail photos well google earth facebook yahoo messenger contrast prism surveillance program front-door method access nominally approved fisa court muscular surveillance program noted unusually aggressive usage unorthodox hacking methods infiltrate yahoo google data centres around world program operated overseas united kingdom nsa presumes anyone using foreign data link foreigner therefore able collect content metadata previously unknown scale u.s. citizens residents according documents leaked snowden muscular surveillance program jointly operated nsa britain gchq agency see international cooperation five eyes made repeated attempts spy internet users communicating secret via anonymity network tor several clandestine operations involve implantation malicious code computers anonymous tor users visit infected websites cases nsa gchq succeeded blocking access anonymous network diverting tor users insecure channels cases nsa gchq able uncover identity anonymous users royal concierge surveillance program britain gchq agency uses automated monitoring system infiltrate reservation systems least 350 luxury hotels many different parts world related surveillance programs involve wiretapping room telephones fax machines used targeted hotels well monitoring computers hooked hotel network u.s. national security agency nsa u.s. central intelligence agency cia britain government communications headquarters gchq conducting surveillance networks many online games including massively multiplayer online role-playing games mmorpgs world warcraft well virtual worlds second life xbox gaming console according april 2013 summary disclosures nsa defined intelligence priorities scale 1 highest interest 5 lowest interest classified 30 countries 3rd parties cooperates also spies prominent targets included members adherents internet group known anonymous well potential whistleblowers according snowden nsa targeted reporters wrote critically government 9/11 part joint operation central intelligence agency cia nsa deployed secret eavesdropping posts eighty u.s. embassies consulates worldwide headquarters nato also used nsa experts spy european union 2013 documents provided edward snowden revealed following intergovernmental organizations diplomatic missions government ministries subjected surveillance five eyes world war ii brusa agreement signed governments united states united kingdom purpose intelligence sharing later formalized ukusa agreement 1946 secret treaty full text agreement released public 25 june 2010 although treaty later revised include countries denmark germany ireland norway turkey philippines information sharing performed so-called five eyes term referring following english-speaking western democracies respective intelligence agencies left sea-me-we 3 runs across afro-eurasian supercontinent japan northern germany one important submarine cables accessed five eyes singapore former british colony asia-pacific region blue dot plays vital role intercepting internet telecommunications traffic heading australia/japan europe vice versa intelligence-sharing agreement singapore australia allows rest five eyes gain access sea-me-we 3 right tat-14 telecommunications cable linking europe united states identified one assets critical infrastructure key resources usa foreign territory 2013 revealed british officials pressured handful telecommunications internet companies allow british government gain access tat-14 according leaked documents aside five eyes western countries also participated nsa surveillance system sharing information documents nsa lists approved sigint partners partner countries addition five eyes glenn greenwald said nsa often maintains partnerships paying partner develop certain technologies engage surveillance thus direct spying carried partner countries divided two groups second parties third parties second parties comprehensive cooperation nsa third parties focused cooperation however partner nsa automatically exempt country targeted nsa according internal nsa document leaked snowden nsa often target signals 3rd party foreign partners australian signals directorate asd formerly known defence signals directorate dsd shares information australian citizens members ukusa agreement according 2008 five eyes document leaked snowden data australian citizens shared foreign countries include bulk unselected unminimised metadata well medical legal religious information close cooperation members five eyes community asd runs secret surveillance facilities many parts southeast asia without knowledge australian diplomats addition asd cooperates security intelligence division sid republic singapore international operation intercept underwater telecommunications cables across eastern hemisphere pacific ocean march 2017 reported advice five eyes intelligence alliance 500 iraqi syrian refugees refused entry australia last year communications security establishment canada csec offers nsa resources advanced collection processing analysis set covert sites request nsa us-canada signt relationship dates back secret alliance formed world war ii formalized 1949 canusa agreement behalf nsa csec opened secret surveillance facilities 20 countries around world well communications security establishment canada revealed following global surveillance disclosures engaging surveillance wifi hotspots major canadian airports collecting meta-data use engaging surveillance travelers even days departure said airports politiets efterretningstjeneste pet denmark domestic intelligence agency exchanges data nsa regular basis part secret agreement united states one 9-eyes ukusa agreement denmark relationship nsa closer nsa relationship germany sweden spain belgium italy directorate-general external security dgse france maintains close relationship nsa gchq discussions increased cooperation began november 2006 early 2010s extent cooperation joint interception digital data dgse nsa noted increased dramatically 2011 formal memorandum data exchange signed dgse nsa facilitated transfer millions metadata records dgse nsa december 2012 8 january 2013 70 million metadata records handed nsa french intelligence agencies bundesnachrichtendienst bnd germany systematically transfers metadata german intelligence sources nsa december 2012 alone bnd provided nsa 500 million metadata records nsa granted bundesnachrichtendienst access x-keyscore exchange german surveillance programs mira4 veras early 2013 hans-georg maaßen president german domestic security agency bundesamt für verfassungsschutz bfv made several visits headquarters nsa according classified documents german government maaßen agreed transfer data records persons monitored germany bfv via xkeyscore nsa addition bfv works closely eight u.s. government agencies including cia project 6 jointly operated cia bfv bnd massive database containing personal information photos license plate numbers internet search histories telephone metadata developed gain better understanding social relationships presumed jihadists 2012 bfv handed 864 data sets personal information cia nsa seven u.s. intelligence agencies exchange bnd received data u.s. intelligence agencies 1,830 occasions newly acquired data handed bfv stored domestically accessible system known nadis wn israeli sigint national unit isnu routinely receives raw unfiltered data u.s. citizens nsa however secret nsa document leaked snowden revealed u.s. government officials explicitly exempted forms data sharing isnu stated memorandum detailing rules data sharing u.s. citizens isnu obligated according undated memorandum ground rules intelligence sharing nsa isnu laid march 2009 data sharing agreement isnu allowed retain identities u.s. citizens excluding u.s. government officials year 2011 nsa asked japanese government intercept underwater fibre-optic cables carrying phone internet data asia-pacific region however japanese government refused comply reign muammar gaddafi libyan regime forged partnership britain secret service mi6 u.s. central intelligence agency cia obtain information libyan dissidents living united states canada exchange gaddafi allowed western democracies use libya base extraordinary renditions algemene inlichtingen en veiligheidsdienst aivd netherlands receiving storing data internet users gathered u.s. intelligence sources nsa prism surveillance program meeting february 2013 aivd mivd briefed nsa attempts hack internet forums collect data users using technology known computer network exploitation cne norwegian intelligence service nis confirmed data collected agency shared americans kjell grandhagen head norwegian military intelligence told reporters news conference share information partners partners share us ... talking huge amounts traffic data cooperation nsa nis gained access russian targets kola peninsula civilian targets general nis provides information nsa politicians energy armament top secret memo nsa lists following years milestones norway-united states america signt agreement norus agreement nsa perceives nis one reliable partners agencies also cooperate crack encryption systems mutual targets according nsa norway made objections requests defence ministry singapore security intelligence division sid secretly intercepting much fibre optic cable traffic passing asian continent close cooperation australian signals directorate asd/dsd singapore sid able intercept sea-me-we 3 southeast asia-middle east-western europe 3 well sea-me-we 4 telecommunications cables access international telecommunications channels facilitated singapore government-owned operator singtel temasek holdings multibillion-dollar sovereign wealth fund majority stake singtel maintained close relations country intelligence agencies information gathered government singapore transferred government australia part intelligence sharing agreement allows five eyes maintain stranglehold communications across eastern hemisphere close cooperation centro nacional de inteligencia cni nsa intercepted 60.5 million phone calls spain single month försvarets radioanstalt fra sweden codenamed sardines allowed five eyes access underwater cables baltic sea 5 december 2013 sveriges television swedish television revealed fra conducting clandestine surveillance operation targeting internal politics russia operation conducted behalf nsa receives data handed fra according documents leaked snowden fra sweden granted access nsa international surveillance program xkeyscore federal intelligence service ndb switzerland exchanges information nsa regularly basis secret agreement circumvent domestic surveillance restrictions addition nsa granted access swiss surveillance facilities leuk canton valais herrenschwanden canton bern part swiss surveillance program onyx according ndb agency maintains working relationships 100 international organizations however ndb denied form cooperation nsa although nsa direct access switzerland onyx surveillance program director ndb acknowledged possible u.s. intelligence agencies gain access switzerland surveillance system british government allowed nsa store personal data british citizens project minaret anti-vietnam war dissidents united states jointly targeted gchq nsa cia pays us 10 million year gain access international phone records including u.s. citizens nsa foreign affairs directorate interacts foreign intelligence services members five eyes implement global surveillance fbi acts liaison u.s. intelligence agencies silicon valley giants microsoft early 2010s dhs conducted joint surveillance operation fbi crack dissidents occupy wall street protest movement nsa supplies domestic intercepts drug enforcement administration dea internal revenue service irs law enforcement agencies use intercepted data initiate criminal investigations us citizens federal agents instructed recreate investigative trail order cover information originated weeks september 11 attacks u.s. president george w. bush signed patriot act ensure disruption government ability conduct global surveillance patriot act extended u.s. president barack obama may 2011 extend federal government legal authority conduct additional forms surveillance roving wiretaps 70 percent united states intelligence community budget earmarked payment private firms according forbes magazine defense technology company lockheed martin currently usa biggest defense contractor destined nsa powerful commercial partner biggest contractor terms dollar revenue joint operation nsa american telecommunications corporation operates room 641a sbc communications building san francisco spy internet traffic cia pays us 10 million year gain access international phone records including u.s. citizens projects developed booz allen hamilton include strategic innovation group identify terrorists social media behalf government agencies fiscal year 2013 booz allen hamilton derived 99 income government largest portion revenue coming u.s. army 2013 booz allen hamilton hailed bloomberg businessweek world profitable spy organization british telecommunications code-named remedy major supplier telecommunications granted britain intelligence agency gchq unlimited access network undersea cables according documents leaked snowden american multinational corporation microsoft helped nsa circumvent software encryption safeguards also allowed federal government monitor web chats outlook.com portal 2013 microsoft worked fbi allow nsa gain access company cloud storage service skydrive french telecommunications corporation orange s.a. shares customer call data french intelligence agency dgse intercepted data handed gchq rsa security paid us 10 million nsa introduce cryptographic backdoor encryption products strategic forecasting inc. commonly known stratfor global intelligence company offering information governments private clients including dow chemical company lockheed martin northrop grumman raytheon u.s. department homeland security u.s. defense intelligence agency u.s. marine corps british telecommunications company vodafone code-named gerontic granted britain intelligence agency gchq unlimited access network undersea cables according documents leaked snowden in-q-tel receives us 56 million year government support venture capital firm enables cia invest silicon valley palantir technologies data mining corporation close ties fbi nsa cia based palo alto california company developed data collection analytical program known prism 2011 revealed company conducted surveillance glenn greenwald several countries evaded global surveillance constructing secret bunker facilities deep earth surface despite north korea priority target nsa internal documents acknowledged know much kim jong un regime intentions october 2012 iran police chief esmail ahmadi moghaddam alleged google search engine spying tool western intelligence agencies six months later april 2013 country announced plans introduce islamic google earth evade global surveillance libya evaded surveillance building hardened buried bunkers least 40 feet ground level global surveillance disclosure caused tension bilateral relations united states several allies economic partners well relationship european union 12 august 2013 president obama announced creation independent panel outside experts review nsa surveillance programs panel due established director national intelligence james r. clapper consult provide assistance according survey undertaken human rights group pen international disclosures chilling effect american writers fearing risk targeted government surveillance 28 pen american members curbed usage social media 16 self-censored avoiding controversial topics writings
node7:Wikipedia entry. Entry name: Computer_security. Entry content: computer security computer security cybersecurity information technology security security protection computer systems theft damage hardware software electronic data well disruption misdirection services provide field becoming important due increased reliance computer systems internet wireless network standards bluetooth wi-fi due growth smart devices including smartphones televisions various devices constitute internet things due complexity terms politics technology cybersecurity also one major challenges contemporary world vulnerability weakness design implementation operation internal control vulnerabilities discovered documented common vulnerabilities exposures cve database exploitable vulnerability one least one working attack exploit exists vulnerabilities often hunted exploited aid automated tools manually using customized scripts secure computer system important understand attacks made threats typically classified one categories backdoor computer system cryptosystem algorithm secret method bypassing normal authentication security controls may exist number reasons including original design poor configuration may added authorized party allow legitimate access attacker malicious reasons regardless motives existence create vulnerability denial service attacks dos designed make machine network resource unavailable intended users attackers deny service individual victims deliberately entering wrong password enough consecutive times cause victims account locked may overload capabilities machine network block users network attack single ip address blocked adding new firewall rule many forms distributed denial service ddos attacks possible attack comes large number points – defending much difficult attacks originate zombie computers botnet range techniques possible including reflection amplification attacks innocent systems fooled sending traffic victim unauthorized user gaining physical access computer likely able directly copy data may also compromise security making operating system modifications installing software worms keyloggers covert listening devices using wireless mice even system protected standard security measures may able by-passed booting another operating system tool cd-rom bootable media disk encryption trusted platform module designed prevent attacks eavesdropping act surreptitiously listening private conversation typically hosts network instance programs carnivore narusinsight used fbi nsa eavesdrop systems internet service providers even machines operate closed system i.e. contact outside world eavesdropped upon via monitoring faint electromagnetic transmissions generated hardware tempest specification nsa referring attacks surfacing 2017 new class multi-vector polymorphic cyber threats surfaced combined several types attacks changed form avoid cyber security controls spread threats classified fifth generation cyber attacks phishing attempt acquire sensitive information usernames passwords credit card details directly users phishing typically carried email spoofing instant messaging often directs users enter details fake website whose look feel almost identical legitimate one fake website often ask personal information log-in passwords information used gain access individual real account real website preying victim trust phishing classified form social engineering privilege escalation describes situation attacker level restricted access able without authorization elevate privileges access level example standard computer user may able exploit vulnerability system gain access restricted data even become root full unrestricted access system social engineering aims convince user disclose secrets passwords card numbers etc example impersonating bank contractor customer common scam involves fake ceo emails sent accounting finance departments early 2016 fbi reported scam cost us businesses 2bn two years may 2016 milwaukee bucks nba team victim type cyber scam perpetrator impersonating team president peter feigin resulting handover team employees 2015 w-2 tax forms spoofing act masquerading valid entity falsification data ip address username order gain access information resources one otherwise unauthorized obtain several types spoofing including tampering describes malicious modification products so-called evil maid attacks security services planting surveillance capability routers examples employee behavior big impact information security organizations cultural concepts help different segments organization work effectively work effectiveness towards information security within organization ″exploring relationship organizational culture information security culture″ provides following definition information security culture ″isc totality patterns behavior organization contribute protection information kinds.″ andersson reimers 2014 found employees often see part organization information security effort often take actions ignore organizational information security best interests research shows information security culture needs improved continuously ″information security culture analysis change″ authors commented ″it never ending process cycle evaluation change maintenance.″ manage information security culture five steps taken pre-evaluation strategic planning operative planning implementation post-evaluation growth number computer systems increasing reliance upon individuals businesses industries governments means increasing number systems risk computer systems financial regulators financial institutions like u.s. securities exchange commission swift investment banks commercial banks prominent hacking targets cyber criminals interested manipulating markets making illicit gains web sites apps accept store credit card numbers brokerage accounts bank account information also prominent hacking targets potential immediate financial gain transferring money making purchases selling information black market in-store payment systems atms also tampered order gather customer account data pins computers control functions many utilities including coordination telecommunications power grid nuclear power plants valve opening closing water gas networks internet potential attack vector machines connected stuxnet worm demonstrated even equipment controlled computers connected internet vulnerable 2014 computer emergency readiness team division department homeland security investigated 79 hacking incidents energy companies vulnerabilities smart meters many use local radio cellular communications cause problems billing fraud aviation industry reliant series complex systems could attacked simple power outage one airport cause repercussions worldwide much system relies radio transmissions could disrupted controlling aircraft oceans especially dangerous radar surveillance extends 175 225 miles offshore also potential attack within aircraft europe pan-european network service newpens us nextgen program air navigation service providers moving create dedicated networks consequences successful attack range loss confidentiality loss system integrity air traffic control outages loss aircraft even loss life desktop computers laptops commonly targeted gather passwords financial account information construct botnet attack another target smartphones tablet computers smart watches mobile devices quantified self devices like activity trackers sensors cameras microphones gps receivers compasses accelerometers could exploited may collect personal information including sensitive health information wifi bluetooth cell phone networks devices could used attack vectors sensors might remotely activated successful breach increasing number home automation devices nest thermostat also potential targets large corporations common targets many cases aimed financial gain identity theft involves data breaches loss millions clients credit card details home depot staples target corporation recent breach equifax cyberattacks ordered foreign governments governments engage cyberwarfare intent spread propaganda sabotage spy targets many people believe russian government played major role us presidential election 2016 using twitter facebook affect results election medical records targeted use general identify theft health insurance fraud impersonating patients obtain prescription drugs recreational purposes resale although cyber threats continue increase 62 organizations increase security training business 2015 attacks financially motivated however example security firm hbgary federal suffered serious series attacks 2011 hacktivist group anonymous retaliation firm ceo claiming infiltrated group sony pictures attack 2014 motive appears embarrass data leaks cripple company wiping workstations servers vehicles increasingly computerized engine timing cruise control anti-lock brakes seat belt tensioners door locks airbags advanced driver-assistance systems many models additionally connected cars may use wifi bluetooth communicate onboard consumer devices cell phone network self-driving cars expected even complex systems carry security risk issues gained wide attention simple examples risk include malicious compact disc used attack vector car onboard microphones used eavesdropping however access gained car internal controller area network danger much greater – widely publicized 2015 test hackers remotely carjacked vehicle 10 miles away drove ditch manufacturers reacting number ways tesla 2016 pushing security fixes air cars computer systems area autonomous vehicles september 2016 united states department transportation announced initial safety standards called states come uniform policies government military computer systems commonly attacked activists foreign powers local regional government infrastructure traffic light controls police intelligence agency communications personnel records student records financial systems also potential targets largely computerized passports government id cards control access facilities use rfid vulnerable cloning internet things iot network physical objects devices vehicles buildings embedded electronics software sensors network connectivity enables collect exchange data – concerns raised developed without appropriate consideration security challenges involved iot creates opportunities direct integration physical world computer-based systems also provides opportunities misuse particular internet things spreads widely cyber attacks likely become increasingly physical rather simply virtual threat front door lock connected internet locked/unlocked phone criminal could enter home press button stolen hacked phone people could stand lose much credit card numbers world controlled iot-enabled devices thieves also used electronic means circumvent non-internet-connected hotel door locks medical devices either successfully attacked potentially deadly vulnerabilities demonstrated including in-hospital diagnostic equipment implanted devices including pacemakers insulin pumps many reports hospitals hospital organizations getting hacked including ransomware attacks windows xp exploits viruses data breaches sensitive data stored hospital servers 28 december 2016 us food drug administration released recommendations medical device manufacturers maintain security internet-connected devices – structure enforcement distributed generation systems risk cyber attack real according daily energy insider attack could cause loss power large area long period time attack could severe consequences natural disaster district columbia considering creating distributed energy resources der authority within city goal customers insight energy use giving local electric utility pepco chance better estimate energy demand d.c. proposal however would allow third-party vendors create numerous points energy distribution could potentially create opportunities cyber attackers threaten electric grid serious financial damage caused security breaches standard model estimating cost incident data available made public organizations involved several computer security consulting firms produce estimates total worldwide losses attributable virus worm attacks hostile digital acts general 2003 loss estimates firms range 13 billion worms viruses 226 billion forms covert attacks reliability estimates often challenged underlying methodology basically anecdotal security breaches continue cost businesses billions dollars survey revealed 66 security staffs believe senior leadership takes cyber precautions strategic priority however reasonable estimates financial cost security breaches actually help organizations make rational investment decisions according classic gordon-loeb model analyzing optimal investment level information security one conclude amount firm spends protect information generally small fraction expected loss i.e. expected value loss resulting cyber/information security breach physical security motivations breaches computer security vary attackers thrill-seekers vandals activists others criminals looking financial gain state-sponsored attackers common well resourced started amateurs markus hess hacked kgb recounted clifford stoll cuckoo egg additionally recent attacker motivations traced back extremist organizations seeking gain political advantage disrupt social agendas growth internet mobile technologies inexpensive computing devices led rise capabilities also risk environments deemed vital operations critical targeted environments susceptible compromise led series proactive studies migrate risk taking consideration motivations type actors several stark differences exist hacker motivation nation state actors seeking attack based ideological preference standard part threat modelling particular system identify might motivate attack system might motivated breach level detail precautions vary depending system secured home personal computer bank classified military network face different threats even underlying technologies use similar computer security countermeasure action device procedure technique reduces threat vulnerability attack eliminating preventing minimizing harm cause discovering reporting corrective action taken common countermeasures listed following sections security design alternately secure design means software designed ground secure case security considered main feature techniques approach include open security architecture organization defines security architecture design artifacts describe security controls security countermeasures positioned relate overall information technology architecture controls serve purpose maintain system quality attributes confidentiality integrity availability accountability assurance services techopedia defines security architecture unified security design addresses necessities potential risks involved certain scenario environment also specifies apply security controls design process generally reproducible key attributes security architecture state computer security conceptual ideal attained use three processes threat prevention detection response processes based various policies system components include following today computer security comprises mainly preventive measures like firewalls exit procedure firewall defined way filtering network data host network another network internet implemented software running machine hooking network stack case unix-based operating systems linux built operating system kernel provide real-time filtering blocking another implementation so-called physical firewall consists separate machine filtering network traffic firewalls common amongst machines permanently connected internet organizations turning big data platforms apache hadoop extend data accessibility machine learning detect advanced persistent threats however relatively organisations maintain computer systems effective detection systems fewer still organized response mechanisms place result reuters points companies first time report losing electronic theft data physical stealing assets primary obstacle effective eradication cyber crime could traced excessive reliance firewalls automated detection systems yet basic evidence gathering using packet capture appliances puts criminals behind bars vulnerability management cycle identifying remediating mitigating vulnerabilities especially software firmware vulnerability management integral computer security network security vulnerabilities discovered vulnerability scanner analyzes computer system search known vulnerabilities open ports insecure software configuration susceptibility malware beyond vulnerability scanning many organizations contract outside security auditors run regular penetration tests systems identify vulnerabilities sectors contractual requirement formal verification correctness computer systems possible yet common operating systems formally verified include sel4 sysgo pikeos – make small percentage market two factor authentication method mitigating unauthorized access system sensitive information requires something know password pin something card dongle cellphone piece hardware increases security unauthorized person needs gain access social engineering direct computer access physical attacks prevented non-computer means difficult enforce relative sensitivity information training often involved help mitigate risk even highly disciplined environments e.g military organizations social engineering attacks still difficult foresee prevent enoculation derived inoculation theory seeks prevent social engineering fraudulent tricks traps instilling resistance persuasion attempts exposure similar related attempts possible reduce attacker chances keeping systems date security patches updates using security scanner or/and hiring competent people responsible security statement ambiguous even systems developed competent people get penetrated effects data loss/damage reduced careful backing insurance hardware may source insecurity microchip vulnerabilities maliciously introduced manufacturing process hardware-based assisted computer security also offers alternative software-only computer security using devices methods dongles trusted platform modules intrusion-aware cases drive locks disabling usb ports mobile-enabled access may considered secure due physical access sophisticated backdoor access required order compromised covered detail one use term computer security refers technology used implement secure operating systems 1980s united states department defense dod used orange book standards current international standard iso/iec 15408 common criteria defines number progressively stringent evaluation assurance levels many common operating systems meet eal4 standard methodically designed tested reviewed formal verification required highest levels means uncommon example eal6 semiformally verified design tested system integrity-178b used airbus a380 several military jets software engineering secure coding aims guard accidental introduction security vulnerabilities also possible create software designed ground secure systems secure design beyond formal verification aims prove correctness algorithms underlying system important cryptographic protocols example within computer systems two many security models capable enforcing privilege separation access control lists acls capability-based security using acls confine programs proven insecure many situations host computer tricked indirectly allowing restricted file access issue known confused deputy problem also shown promise acls giving access object one person never guaranteed practice problems resolved capabilities mean practical flaws exist acl-based systems designers certain utilities must take responsibility ensure introduce flaws capabilities mostly restricted research operating systems commercial oss still use acls capabilities however also implemented language level leading style programming essentially refinement standard object-oriented design open source project area e language end-user widely recognized weakest link security chain estimated 90 security incidents breaches involve kind human error among commonly recorded forms errors misjudgment poor password management inability recognize misleading urls identify fake websites dangerous email attachments human component cyber risk particularly relevant determining global cyber risk organization facing security awareness training levels provides formal compliance regulatory industry mandates considered essential reducing cyber risk protecting individuals companies great majority cyber threats focus end-user represents profound cultural change many security practitioners traditionally approached cybersecurity exclusively technical perspective moves along lines suggested major security centers develop culture cyber awareness within organization recognizing security aware user provides important line defense cyber attacks responding forcefully attempted security breaches manner one would attempted physical security breaches often difficult variety reasons incident response organized approach addressing managing aftermath computer security incident compromise goal preventing breach thwarting cyberattack incident identified managed time intrusion typically escalates impactful event data breach system failure intended outcome computer security incident response plan limit damage reduce recovery time costs responding compromises quickly mitigate exploited vulnerabilities restore services processes minimize impact losses incident response planning allows organization establish series best practices stop intrusion causes damage typical incident response plans contain set written instructions outline organization response cyberattack without documented plan place organization may successfully detect intrusion compromise stakeholders may understand roles processes procedures escalation slowing organizations response resolution four key components computer security incident response plan illustrative examples different types computer security breaches given 1988 60,000 computers connected internet mainframes minicomputers professional workstations 2 november 1988 many started slow running malicious code demanded processor time spread computers – first internet computer worm software traced back 23-year-old cornell university graduate student robert tappan morris jr. said wanted count many machines connected internet 1994 hundred intrusions made unidentified crackers rome laboratory us air force main command research facility using trojan horses hackers able obtain unrestricted access rome networking systems remove traces activities intruders able obtain classified files air tasking order systems data furthermore able penetrate connected networks national aeronautics space administration goddard space flight center wright-patterson air force base defense contractors private sector organizations posing trusted rome center user early 2007 american apparel home goods company tjx announced victim unauthorized computer systems intrusion hackers accessed system stored data credit card debit card check merchandise return transactions 2010 computer worm known stuxnet reportedly ruined almost one-fifth iran nuclear centrifuges disrupting industrial programmable logic controllers plcs targeted attack generally believed launched israel united states – although neither publicly admitted early 2013 documents provided edward snowden published washington post guardian exposing massive scale nsa global surveillance also indications nsa may inserted backdoor nist standard encryption standard later withdrawn due widespread criticism nsa additionally revealed tapped links google data centres 2013 2014 russian/ukrainian hacking ring known rescator broke target corporation computers 2013 stealing roughly 40 million credit cards home depot computers 2014 stealing 53 56 million credit card numbers warnings delivered corporations ignored physical security breaches using self checkout machines believed played large role malware utilized absolutely unsophisticated uninteresting says jim walter director threat intelligence operations security technology company mcafee – meaning heists could easily stopped existing antivirus software administrators responded warnings size thefts resulted major attention state federal united states authorities investigation ongoing april 2015 office personnel management discovered hacked year earlier data breach resulting theft approximately 21.5 million personnel records handled office office personnel management hack described federal officials among largest breaches government data history united states data targeted breach included personally identifiable information social security numbers names dates places birth addresses fingerprints current former government employees well anyone undergone government background check believed hack perpetrated chinese hackers july 2015 hacker group known impact team successfully breached extramarital relationship website ashley madison created avid life media group claimed taken company data user data well breach impact team dumped emails company ceo prove point threatened dump customer data unless website taken permanently avid life media take site offline group released two compressed files one 9.7gb second 20gb second data dump avid life media ceo noel biderman resigned website remained functioning international legal issues cyber attacks complicated nature global base common rules judge eventually punish cyber crimes cyber criminals security firms agencies locate cybercriminal behind creation particular piece malware form cyber attack often local authorities take action due lack laws prosecute proving attribution cyber crimes cyber attacks also major problem law enforcement agencies computer viruses switch one country another one jurisdiction another – moving around world using fact n't capability globally police operations like internet someone given free plane tickets online criminals world use techniques dynamic dns fast flux bullet proof servers add difficulty investigation enforcement role government make regulations force companies organizations protect systems infrastructure information cyberattacks also protect national infrastructure national power-grid government regulatory role cyberspace complicated cyberspace seen virtual space remain free government intervention seen many today libertarian blockchain bitcoin discussions many government officials experts think government crucial need improved regulation mainly due failure private sector solve efficiently cybersecurity problem r. clarke said panel discussion rsa security conference san francisco believes industry responds threaten regulation industry n't respond threat follow hand executives private sector agree improvements necessary think government intervention would affect ability innovate efficiently daniel r. mccarthy analyzed public-private partnership cybersecurity reflected role cybersecurity broader constitution political order many different teams organisations exist including 14 april 2016 european parliament council european union adopted general data protection regulation gdpr eu 2016/679 gdpr became enforceable beginning 25 may 2018 provides data protection privacy individuals within european union eu european economic area eea gdpr requires business processes handle personal data built data protection design default gdpr also requires certain organizations appoint data protection officer dpo countries computer emergency response team protect network security since 2010 canada cyber security strategy functions counterpart document national strategy action plan critical infrastructure strategy three main pillars securing government systems securing vital private cyber systems helping canadians secure online also cyber incident management framework provide coordinated response event cyber incident canadian cyber incident response centre ccirc responsible mitigating responding threats canada critical infrastructure cyber systems provides support mitigate cyber threats technical support respond recover targeted cyber attacks provides online tools members canada critical infrastructure sectors posts regular cyber security bulletins operates online reporting tool individuals organizations report cyber incident inform general public protect online public safety canada partnered stop.think.connect coalition non-profit private sector government organizations launched cyber security cooperation program also run getcybersafe portal canadian citizens cyber security awareness month october public safety canada aims begin evaluation canada cyber security strategy early 2015 china central leading group internet security informatization established 27 february 2014 leading small group lsg communist party china headed general secretary xi jinping staffed relevant party state decision-makers lsg created overcome incoherent policies overlapping responsibilities characterized china former cyberspace decision-making mechanisms lsg oversees policy-making economic political cultural social military fields relate network security strategy lsg also coordinates major policy initiatives international arena promote norms standards favored chinese government emphasize principle national sovereignty cyberspace berlin starts national cyber defense initiative 16 june 2011 german minister home affairs officially opened new german ncaz national center cyber defense nationales cyber-abwehrzentrum located bonn ncaz closely cooperates bsi federal office information security bundesamt für sicherheit der informationstechnik bka federal police organisation bundeskriminalamt deutschland bnd federal intelligence service bundesnachrichtendienst mad military intelligence service amt für den militärischen abschirmdienst national organisations germany taking care national security aspects according minister primary task new organization founded 23 february 2011 detect prevent attacks national infrastructure mentioned incidents like stuxnet provisions cyber security incorporated rules framed information technology act 2000 national cyber security policy 2013 policy framework ministry electronics information technology meity aims protect public private infrastructure cyber attacks safeguard information personal information web users financial banking information sovereign data cert- nodal agency monitors cyber threats country post national cyber security coordinator also created prime minister office pmo indian companies act 2013 also introduced cyber law cyber security obligations part indian directors provisions cyber security incorporated rules framed information technology act 2000 update 2013 following cyber attacks first half 2013 government news media television station bank websites compromised national government committed training 5,000 new cybersecurity experts 2017 south korean government blamed northern counterpart attacks well incidents occurred 2009 2011 2012 pyongyang denies accusations 1986 computer fraud abuse act key legislation prohibits unauthorized access damage protected computers defined although various measures proposed – none succeeded 2013 executive order improving critical infrastructure cybersecurity signed prompted creation nist cybersecurity framework standardized government testing services general services administration gsa standardized penetration test service pre-vetted support service rapidly address potential vulnerabilities stop adversaries impact us federal state local governments services commonly referred highly adaptive cybersecurity services hacs listed us gsa advantage website see information penetration test standardized government penetration test services department homeland security dedicated division responsible response system risk management program requirements cybersecurity united states called national cyber security division division home us-cert operations national cyber alert system national cybersecurity communications integration center brings together government organizations responsible protecting computer networks networked infrastructure third priority federal bureau investigation fbi protect united states cyber-based attacks high-technology crimes along national white collar crime center nw3c bureau justice assistance bja part multi-agency task force internet crime complaint center also known ic3 addition specific duties fbi participates alongside non-profit organizations infragard criminal division united states department justice operates section called computer crime intellectual property section ccips charge investigating computer crime intellectual property crime specialized search seizure digital evidence computers networks 2017 ccips published framework vulnerability disclosure program online systems help organizations clearly describe authorized vulnerability disclosure discovery conduct thereby substantially reducing likelihood described activities result civil criminal violation law computer fraud abuse act 18 u.s.c § 1030 united states cyber command also known uscybercom tasked defense specified department defense information networks ensures security integrity governance government military infrastructure assets role protection civilian networks u.s. federal communications commission role cybersecurity strengthen protection critical communications infrastructure assist maintaining reliability networks disasters aid swift recovery ensure first responders access effective communications services food drug administration issued guidance medical devices national highway traffic safety administration concerned automotive cybersecurity criticized government accountability office following successful attacks airports claimed attacks airplanes federal aviation administration devoted funding securing systems board planes private manufacturers aircraft communications addressing reporting system concerns also raised future next generation air transportation system computer emergency response team name given expert groups handle computer security incidents us two distinct organization exist although work closely together growing concern cyberspace become next theater warfare mark clayton christian science monitor described article titled new cyber arms race future wars fought soldiers guns planes drop bombs also fought click mouse half world away unleashes carefully weaponized computer programs disrupt destroy critical industries like utilities transportation communications energy attacks could also disable military networks control movement troops path jet fighters command control warships led new terms cyberwarfare cyberterrorism united states cyber command created 2009 many countries similar forces critical voices question whether cybersecurity significant threat made cybersecurity fast-growing field concerned reducing organizations risk hack data breach according research enterprise strategy group 46 organizations say problematic shortage cybersecurity skills 2016 28 2015 commercial government non-governmental organizations employ cybersecurity professionals fastest increases demand cybersecurity workers industries managing increasing volumes consumer data finance health care retail however use term cybersecurity prevalent government job descriptions typical cyber security job titles descriptions include student programs also available people interested beginning career cybersecurity meanwhile flexible effective option information security professionals experience levels keep studying online security training including webcasts wide range certified courses also available united kingdom nationwide set cyber security forums known u.k cyber security forum established supported government cyber security strategy order encourage start-ups innovation address skills gap identified u.k government following terms used regards computer security explained
node8:Wikipedia entry. Entry name: Information_sensitivity. Entry content: information sensitivity information sensitivity control access information knowledge might result loss advantage level security disclosed others loss misuse modification unauthorized access sensitive information adversely affect privacy welfare individual trade secrets business even security international relations nation depending level sensitivity nature information refers information already matter public record knowledge regard government private organizations access release information may requested member public often formal processes laid accessibility government-held public records important part government transparency accountability citizens values democracy public records may furthermore refer information identifiable individuals considered confidential including limited census records criminal records sex offender registry files voter registration includes business information subjected special protection may routinely shared anyone inside outside business confidential information used general sense mean sensitive information whose access subject restriction may refer information individual well pertains business however situations release personal information could negative effect owner example person trying avoid stalker inclined restrict access personal information furthermore person ssn sin credit card numbers financial information may considered private disclosure might lead crimes identity theft fraud types private information including records person health care education employment may protected privacy laws unauthorized disclosure private information make perpetrator liable civil remedies may cases subject criminal penalties even though often used interchangeably personal information sometimes distinguished private information personally identifiable information latter distinct former private information used identify unique individual personal information hand information belonging private life individual used uniquely identify individual range individual ’ favourite colour details domestic life latter common example personal information also regarded sensitive individual sharing details trusted listener would prefer shared anyone else sharing may result unwanted consequences confidential business information refers information whose disclosure may harm business information may include trade secrets sales marketing plans new product plans notes associated patentable inventions customer supplier information financial data classified information generally refers information subject special security classification regulations imposed many national governments disclosure may cause harm national interests security protocol restriction imposed upon information categorized hierarchy classification levels almost every national government worldwide restricted levels containing information may cause greatest danger national security leaked authorized access granted individuals need know basis also passed appropriate level security clearance classified information reclassified different level declassified made available public depending changes situation new intelligence classified information may also denoted method communication access example protectively marked secret eyes protectively marked secret encrypted transfer indicating document must physically read recipient openly discussed example telephone conversation communication sent using encrypted means often mistakenly listed meaning eyes intended recipient anomaly becomes apparent additional tag within windowed area also used data privacy concerns exist various aspects daily life wherever personal data stored collected internet medical records financial records expression political opinions 80 countries world personally identifiable information protected information privacy laws outline limits collection use personally identifiable information public private entities laws usually require entities give clear unambiguous notice individual types data collected reason collection planned uses data consent-based legal frameworks explicit consent individual required well european union data protection directive provides rigorous standard privacy protection legislation across member states although directive legally binding member states expected enact national privacy legislation within three years directive ’ adoption conforms standards since adoption directive demonstrated significant influence privacy legislation non-eu nations requirements privacy laws non-member nations engaging transborder flows private data eu member nations eu passed general data protection regulation gdpr replace directive regulation adopted 27 april 2016 becomes enforceable 25 may 2018 two-year transition period unlike directive require national governments pass enabling legislation thus directly binding applicable proposed new eu data protection regime extends scope eu data protection law foreign companies processing data eu residents provides harmonisation data protection regulations throughout eu thereby making easier non-european companies comply regulations however comes cost strict data protection compliance regime severe penalties 4 worldwide turnover gdpr also brings new set digital rights eu citizens age economic value personal data increasing digital economy canada personal information protection electronic documents act pipeda regulates collection use personal data electronic documents public private organizations pipeda effect federal provincial jurisdictions except provinces existing privacy laws determined “ substantially similar ” even though unified sensitive information framework united states implemented significant amount privacy legislation pertaining different specific aspects data privacy emphasis privacy healthcare financial e-commerce educational industries federal state levels whether regulated self regulated laws require establish ways access sensitive information limited people different roles thus essence requiring establishment sensitive data domain model mechanisms protection domains guideline form pre-defined models safe harbor hipaa based research latanya sweeny established privacy industry metrics additionally many countries enacted legislature regarding data privacy protection still process confidentiality sensitive business information established non-disclosure agreements legally binding contract two parties professional relationship ndas may one-way case employee receiving confidential information employing organization two-way businesses needing share information one another accomplish business goal depending severity consequences violation non-disclosure may result employment loss loss business client contacts criminal charges civil lawsuit hefty sum damages ndas signed employer employee initiation employment non-compete clause may part agreement added protection sensitive business information employee agrees work competitors start competing business within certain time geographical limit unlike personal private information internationally recognized framework protecting trade secrets even agreed-upon definition term “ trade secret ” however many countries political jurisdictions taken initiative account violation commercial confidentiality criminal civil laws example us economic espionage act 1996 federal crime united states misappropriate trade secrets knowledge benefit foreign power injure owner trade secret commonly breach commercial confidentiality falls civil law united kingdom developing countries trade secret laws either non-existent poorly developed offer little substantial protection many countries unauthorized disclosure classified information criminal offence may punishable fines prison sentence even death penalty depending severity violation less severe violations civil sanctions may imposed ranging reprimand revoking security clearance subsequent termination employment whistleblowing intentional disclosure sensitive information third-party intention revealing alleged illegal immoral otherwise harmful actions many examples present former government employees disclosing classified information regarding national government misconduct public media spite criminal consequences await espionage spying involves obtaining sensitive information without permission knowledge holder use spies part national intelligence gathering countries used political strategy nation-states since ancient times unspoken knowledge international politics countries spying one another time even allies computer security information security applied computing network technology significant ever-growing field computer science term computer insecurity hand concept computer systems inherently vulnerable attack therefore evolving arms race exploit existing vulnerabilities security systems must engineer new mechanisms security number security concerns arisen recent years increasing amounts sensitive information every level found primary existence digital form personal level credit card fraud internet fraud forms identity theft become widespread concerns individuals need aware day-to-day basis existence large databases classified information computer networks also changing face domestic international politics cyber-warfare cyber espionage becoming increasing importance national security strategy nations around world estimated 120 nations around world currently actively engaged developing deploying technology purposes philosophies internet cultures open-source governance hacktivism popular hacktivist slogan information wants free reflects cultural shifts perception towards political government secrecy popular controversial wikileaks one many manifestations growing cultural sentiment becoming additional challenge security integrity classified information
node9:Wikipedia entry. Entry name: Ping_flood. Entry content: ping flood ping flood simple denial-of-service attack attacker overwhelms victim icmp echo request ping packets effective using flood option ping sends icmp packets fast possible without waiting replies implementations ping require user privileged order specify flood option successful attacker bandwidth victim instance attacker dsl line victim dial-up modem attacker hopes victim respond icmp echo reply packets thus consuming outgoing bandwidth well incoming bandwidth target system slow enough possible consume enough cpu cycles user notice significant slowdown flood ping also used diagnostic network packet loss throughput issues
node10:Wikipedia entry. Entry name: Turbot_(business). Entry content: turbot business turbot turbot hq inc privately held software company headquartered united states turbot provides automated cloud governance controls enterprise cloud applications infrastructure turbot founded nathan wallace 2014 us corporation based nj 2016 company expanded virtual office across varying us states 2017 turbot announced expansion united kingdom turbot hq limited india turbot hq india private limited 2018 turbot expanded footprint multiple cities india started operations australia turbot hq private limited turbot provides real-time automated configuration control software-defined infrastructure cloud platforms turbot aws advanced technology partner multiple certified competencies security cloud management life sciences etc turbot also microsoft azure partner google cloud platform partner well member cloud native computing foundation linux foundation center internet security turbot varying consulting managed services technology integration partnerships providing varying use cases partners empower services capabilities turbot uses “ sandbox ” approach governance allows internal departments freedom explore adopt new software solutions adhering data protection regulations
node11:Wikipedia entry. Entry name: Agnitum. Entry content: agnitum agnitum ltd founded 1999 st. petersburg russia software company 2000 agnitum hired 2 developers increased number staff people 20 2002 agnitum originally focused anti-trojan pc connections monitoring solutions targeted windows pcs users company known mostly personal firewall internet security products provider outpost firewall pro flagship product company released 2002 together freeware solution updated 2009 agnitum products mostly consumer-oriented taking account licensing agnitum products technologies several national security software publishers january 14 2016 agnitum confirmed official blog company acquired yandex december 2015 february 28 2017 final phase sale yandex agnitum site user forum shut agnitum established software producer 1999 st. petersburg russia two students baltic state technical university distributing software online shareware agnitum sold niche software entering 2002 pc firewalls market agnitum software become rather popular 2002 agnitum began formally implement international distribution strategy putting place agreements partners major european markets well germany italy spain poland 2003 2006 agnitum strengthened european american far east market positions personal firewall engine company became basis company products thus integrated several firms security solutions partnering security vendors provide personal firewall anti-spyware technologies 2003-2006 agnitum announced contracts anti-virus solutions vendors whole re-branded software part vendor suite sophos uk usa lavasoft sweden novell usa virusbuster hungary others 2006 agnitum criticized microsoft onecare firewall agnitum claimed leaks faced simplest attacks programs test firewalls leaks agnitum chief software architect posted less-than-glowing assessment microsoft windows firewall part company entry security software business 2006 agnitum entered strategic alliance virusbuster experienced anti-virus vendor hungary agnitum aimed enter market internet security suite solutions compete anti-virus vendors kaspersky zonelabs etc already integrated personal firewalls personal security solutions mostly personal anti-viruses additional spyware adware spam web content filtering engines 2007-2008 agnitum finally entered market anti-virus solutions anti-virus products began participating international domestic test labs tests virus bulletin vb100 anti-malware.ru anti-virus tests outpost firewall pro tested leaktests killtests independent research portals 2009 2010 agnitum released 2 freeware editions outpost software outpost firewall pro free edition outpost security suite free continue competition well-known zonealarm comodo free pc firewall vendors agnitum first software products anti-trojan tool tauscan pc connections monitoring tool jammer anti-trojan software tauscan occasionally achieved attention media received awards jammer focused detecting blocking attacks hackers prototype outpost personal firewall launched simultaneously “ free ” “ pro ” versions march 2002 march 2007 agnitum released free anti-spam plug-in filtering microsoft outlook outlook express mail supports bat since 2008 may 2007 agnitum released combined internet security suite solution — outpost security suite pro ossp proactive solution basis outpost firewall agnitum anti-spam licensed anti-virus combined agnitum anti-spyware october 2007 agnitum released microsoft vista-compatible outpost 2008 products outpost firewall pro began pass leak-tests kill-tests matousec transparent security firewall challenge project independent project proactive security software testing 2010 agnitum released extension freeware solution outpost security suite free include anti-virus anti-spyware anti-spam free internet security suite moment agnitum security products available following languages english german french spanish russian default also lot localized outpost software versions like italian polish hungarian japanese traditional simplified chinese korean turkish dutch brazilian portuguese agnitum firewall anti-spyware anti-virus engines became almost independent products several security companies licensing agnitum technologies integrate products list companies made publicity licensing novell novell os client security agent sophos corporate edition client agent bullguard internet security solution lavasoft personal firewall client agent cat/quickheal indian anti-virus solutions vendor total security solution
node12:Wikipedia entry. Entry name: Personal_data. Entry content: personal data personal data also known personal information personally identifying information pii sensitive personal information spi information relating identifying person abbreviation pii widely accepted united states phrase abbreviates four common variants based personal personally identifiable identifying equivalent legal purposes effective definitions vary depending jurisdiction purposes term used european data protection regimes centre primarily around general data protection regulation term personal data significantly broader determines scope regulatory regime national institute standards technology special publication 800-122 defines personally identifying information information individual maintained agency including 1 information used distinguish trace individual identity name social security number date place birth mother maiden name biometric records 2 information linked linkable individual medical educational financial employment information example user ip address classed pii classified linked pii however european union ip address internet subscriber may classed personal data concept pii become prevalent information technology internet made easier collect pii leading profitable market collecting reselling pii pii also exploited criminals stalk steal identity person aid planning criminal acts response threats many website privacy policies specifically address gathering pii lawmakers european parliament enacted series legislation general data protection regulation gdpr limit distribution accessibility pii personally identifying information legal concept technical concept utilised jurisdictions versatility power modern re-identification algorithms absence pii data mean remaining data identify individuals attributes may uniquely identifying attribute potentially identifying combination others attributes referred quasi-identifiers pseudo-identifiers data may constitute pii united states highly likely remain personal data european data protection law u.s. government used term personally identifiable 2007 memorandum executive office president office management budget omb usage appears us standards nist guide protecting confidentiality personally identifiable information sp 800-122 omb memorandum defines pii follows term similar pii personal data defined eu directive 95/46/ec purposes directive however eu rules clearer notion data subject potentially identified additional processing attributes—quasi- pseudo-identifiers gdpr personal data defined information relating identified identifiable natural person 'data subject identifiable natural person one identified directly indirectly particular reference identifier name identification number location data online identifier one factors specific physical physiological genetic mental economic cultural social identity natural person another term similar pii personal information defined section california data breach notification law sb1386 concept information combination given sb1386 definition key correctly distinguishing pii defined omb personal information defined sb1386 information name lacks context said sb1386 personal information must said pii defined omb example name john smith meaning current context therefore sb1386 personal information pii social security number ssn without name associated identity context information sb1386 personal information pii example ssn 078-05-1120 pii sb1386 personal information however combination valid name correct ssn sb1386 personal information combination name context may also considered pii example person name list patients hiv clinic however necessary name combined context order pii reason distinction bits information names although may sufficient make identification may later combined information identify persons expose harm according omb always case pii sensitive context may taken account deciding whether certain pii sensitive australia privacy act 1988 deals protection individual privacy using oecd privacy principles 1980s set broad principles-based regulatory model unlike us coverage generally based broad principles specific technologies business practices data items section 6 relevant definition critical detail definition 'personal information also applies individual indirectly identified raises question reasonableness assume theoretically possible identify person information include name address contain clues could pursued find relates much extra effort take make unreasonable information could identified instance information involves ip address relevant isp stores logs could easily inspected sufficient legal justification re-link ip address account holder identity reasonably ascertained linking used expensive slow difficult becomes easier change answer point appears definition significantly broader californian example given thus australian privacy law respects weakly enforced may cover broader category data information us law particular online behavioral advertising businesses based us surreptitiously collecting information people countries form cookies bugs trackers like may find preference avoid implications wanting build psychographic profile particular person using rubric 'we n't collect personal information may find make sense broader definition like australian privacy act european data protection law utilize concept personally identifiable information scope instead determined non-synonymous wider concept personal data examples found eu privacy website twelve information privacy principles privacy act 1993 apply federal act data protection 19 june 1992 force since 1993 set strict protection privacy prohibiting virtually processing personal data expressly authorized data subjects protection subject authority federal data protection information commissioner additionally person may ask writing company managing data files correction deletion personal data company must respond within thirty days privacy act 1974 pub.l 93–579 88 stat 1896 enacted december 31 1974 5 u.s.c § 552a united states federal law establishes code fair information practice governs collection maintenance use dissemination personally identifiable information individuals maintained systems records federal agencies one primary focuses health insurance portability accountability act hipaa protect patient protected health information phi similar pii u.s. senate proposed privacy act 2005 attempted strictly limit display purchase sale pii without person consent similarly proposed anti-phishing act 2005 attempted prevent acquiring pii phishing u.s. lawmakers paid special attention social security number easily used commit identity theft proposed social security number protection act 2005 proposed identity theft prevention act 2005 sought limit distribution individual social security number national institute standards technology physical sciences laboratory non-regulatory agency united states department commerce mission promote innovation industrial competitiveness following data often used express purpose distinguishing individual identity clearly classify personally identifiable information definition used national institute standards technology described detail following less often used distinguish individual identity traits shared many people however potentially pii may combined personal information identify individual person wishes remain anonymous descriptions often employ several 34-year-old white male works target note information still private sense person may wish become publicly known without personally identifiable moreover sometimes multiple pieces information none sufficient uniquely identify individual may uniquely identify person combined one reason multiple pieces evidence usually presented criminal trials shown 1990 87 population united states could uniquely identified gender zip code full date birth hacker internet slang practice finding releasing information called doxing sometimes used deter collaboration law enforcement occasion doxing trigger arrest particularly law enforcement agencies suspect doxed individual may panic disappear forensics particularly identification prosecution criminals personally identifiable information critical establishing evidence criminal procedure criminals may go great trouble avoid leaving pii personal data key component online identity exploited individuals instance data altered used create fake documents hijack mail boxes phone calls harass people like data breach ee limited company another key case referred financial identity theft usually bank account credit card information stolen used sold personal data also used create fake online identity including fake accounts profiles referred identity cloning identity fraud celebrities gather data users easily even individuals concerned especially personal purpose widely known sockpuppet critical information password date birth id documents social insurance number used log different websites see password reuse account verification gather information access content also several agencies ask discretion subject related work safety employees reason united states department defense dod strict policies controlling release personally identifiable information dod personnel many intelligence agencies similar policies sometimes point employees disclose friends work agency similar identity protection concerns exist witness protection programs women shelters victims domestic violence threats second half 20th century digital revolution introduced privacy economics trade personal data value data change time different contexts disclosing data reverse information asymmetry though costs unclear relation companies consumers often imperfect information regarding data collected purposes consequences writing 2015 alessandro acquisti curtis taylor liad wagman identified three waves trade personal data
node13:Wikipedia entry. Entry name: Sybil_attack. Entry content: sybil attack sybil attack attacker subverts reputation system peer-to-peer network creating large number pseudonymous identities uses gain disproportionately large influence named subject book sybil case study woman diagnosed dissociative identity disorder name suggested 2002 brian zill microsoft research term pseudospoofing previously coined l. detweiler cypherpunks mailing list used literature peer-to-peer systems class attacks prior 2002 term gain much influence sybil attack sybil attack computer security attack wherein reputation system subverted forging identities peer-to-peer networks reputation system vulnerability sybil attack depends cheaply identities generated degree reputation system accepts inputs entities chain trust linking trusted entity whether reputation system treats entities identically evidence showed large-scale sybil attacks could carried cheap efficient way extant realistic systems bittorrent mainline dht entity peer-to-peer network piece software access local resources entity advertises peer-to-peer network presenting identity one identity correspond single entity words mapping identities entities many one entities peer-to-peer networks use multiple identities purposes redundancy resource sharing reliability integrity peer-to-peer networks identity used abstraction remote entity aware identities without necessarily knowing correspondence identities local entities default distinct identity usually assumed correspond distinct local entity reality many identities may correspond local entity adversary may present multiple identities peer-to-peer network order appear function multiple distinct nodes adversary may thus able acquire disproportionate level control network affecting voting outcomes context human online communities multiple identities sometimes known sockpuppets notable sybil attack conjunction traffic confirmation attack launched tor anonymity network several months 2014 unknown perpetrators validation techniques used prevent sybil attacks dismiss masquerading hostile entities local entity may accept remote identity based central authority ensures one-to-one correspondence identity entity may even provide reverse lookup identity may validated either directly indirectly direct validation local entity queries central authority validate remote identities indirect validation local entity relies already accepted identities turn vouch validity remote identity question identity-based validation techniques generally provide accountability expense anonymity undesirable tradeoff especially online forums wish permit censorship-free information exchange open discussion sensitive topics validation authority attempt preserve users anonymity refusing perform reverse lookups approach makes validation authority prime target attack alternatively authority use mechanism knowledge user real identity verification unidentified person physical presence particular place time enforce one-to-one correspondence online identities real-world users sybil prevention techniques based connectivity characteristics social graphs also limit extent damage caused given sybil attacker preserving anonymity though techniques prevent sybil attacks entirely may vulnerable widespread small-scale sybil attacks examples prevention techniques sybilguard advogato trust metric also sparsity based metric identify sybil clusters distributed p2p based reputation system alternatively proof work used make sybil attacks expensive i2p implementation kademlia modified mitigate kademlia vulnerabilities sybil attacks
node14:Wikipedia entry. Entry name: John_Michael_McConnell. Entry content: john michael mcconnell john michael mcconnell born july 26 1943 former vice admiral united states navy naval career served director national security agency 1992 1996 civilian career includes serving united states director national intelligence 20 february 2007 27 january 2009 bush administration seven days obama administration currently vice chairman booz allen hamilton mcconnell born grew greenville south carolina mcconnell received commission united states navy 1967 worked intelligence officer j2 chairman joint chiefs staff united states secretary defense operation desert shield/storm dissolution soviet union developed improving information flow among intelligence agencies combat forces gulf war 1992 1996 mcconnell served director national security agency nsa led nsa adapted multi-polar threats brought end cold war leadership nsa routinely provided global intelligence information security services white house cabinet officials united states congress broad array military civilian intelligence customers also served member director central intelligence senior leadership team address major intelligence programmatic substantive issues 1992 1996 1996 mcconnell retired navy vice admiral 29 years service – 26 career intelligence officer addition many nation highest military awards meritorious service holds nation highest award service intelligence community also served chairman intelligence national security alliance mcconnell second person hold position director national intelligence nominated president george w. bush january 5 2007 sworn bolling air force base washington d.c. february 20 2007 mcconnell appointment post initially greeted broad bipartisan support although since attracted criticism advocating bush administration controversial policies nomination dni mcconnell served senior vice president consulting firm booz allen hamilton focusing intelligence national security areas 2005 confirmation dni 2007 also chairman board intelligence national security alliance premier not-for-profit nonpartisan private sector professional organization providing structure interactive forum thought leadership sharing ideas networking within intelligence national security communities whose members include leaders industry government academia tuesday august 14 2007 mcconnell visited texas house intelligence committee chairman silvestre reyes review border security granted wide-ranging interview el paso times newspaper surprised many intelligence community candor sensitive topics recent changes foreign intelligence surveillance act nsa warrantless surveillance controversy end interview mcconnell cautioned reporter chris roberts consider whether enemies u.s. could gain information shared leaving paper decide publish el paso times put entire unexpurgated interview website august 22 executive editor dionicio flores saying n't believe damaged national security endangered people resurgent taliban back charge parts afghanistan mcconnell told cnn february 27 2008 assessment differed one made january 2008 defense secretary robert gates january 24 2009 announced mcconnell would return booz allen senior vice president two months taking office mcconnell created series initiatives designed build foundation increased cooperation reform u.s. intelligence community ic plan dubbed 100 day plan integration collaboration focused efforts enable ic act unified enterprise collaborative manner focused six enterprise integration priorities 100 day plan accomplished launch civilian joint duty program improved security clearance processing times increased diversity intelligence workforce information sharing across community 500 day plan designed sustain momentum expanded set initiatives greater level participation set deepen integration community people processes technologies plan address new performance management framework entail six performance elements agencies must entail 100 day plan meant jump start series initiatives based deliberate planning process specific deadlines measures ensure needed reforms implemented 500 day plan started august 2007 designed accelerate sustain momentum expanded set initiatives broader ic participation contains 10 core initiatives tracked senior leadership intelligence community 33 enabling initiatives initiatives based six focus areas described 100 day plan top initiatives director mcconnell ended office near 400th day 500-day plan mcconnell approached congress early august 2007 need modernize fisa claiming two changes needed initial efforts began april – see factsheet first intelligence community required technology changes since 1978 obtain court orders effectively collect foreign intelligence foreign targets located overseas also argued telecoms sued violating nation wiretapping laws must protected liability—regardless veracity charges shortly thereafter mcconnell took active role capitol hill legislation drafted congress august 3 mcconnell announced strongly oppose house proposal n't strong enough heated debate congress updated fisa passing protect america act 2007 september 10 2007 testimony senate committee homeland security governmental affairs mcconnell asserted recently passed protect america act 2007 eased restrictions fisa helped foil major terror plot germany u.s. intelligence-community officials questioned accuracy mcconnell testimony urged office correct statement issued september 12 2007 critics cited incident example bush administration exaggerated claims contradictory statements surveillance activities counterterrorism officials familiar background mcconnell testimony said believe made inaccurate statements intentionally part strategy administration persuade congress make new eavesdropping law permanent officials said believed mcconnell gave wrong answer overwhelmed information merely mixed facts testimony mcconnell blamed death kidnapped american soldier iraq requirements fisa slowness courts however timeline later released showed delays mostly inside nsa casting doubt mcconnell truthfulness mcconnell speaking congressional panel defense protect america act said russian chinese foreign intelligence services nearly active cold war september 18 2007 testimony house judiciary committee mcconnell addressed nsa warrantless surveillance controversy saying agency conducted telephone surveillance americans without obtaining warrant advance since became director national intelligence february 2007 mcconnell called fisa foundational law important legacy protecting rights americans passed era watergate aftermath church pike investigations stressed changes honor legacy privacy foreign threats july 2008 director mcconnell issued directive icd 205 analysts build relationships outside experts topics concern intelligence community—a recommendation highlighted wmd commission report director mcconnell worked white house overhaul executive order 12333 outlines fundamental guidance intelligence agencies mcconnell believes update necessary incorporate intelligence community ’ new organizations new technologies methods redo expected help sixteen intelligence agencies work together reflect post 9/11 threat environment july 2008 president bush issued executive order 13470 amended 12333 one mcconnell last acts dni signed icd501 discovery dissemination retrieval information within intelligence community dramatically increase access several databases held various agencies community policy establishes rules govern disputes access granted dni final adjudicator resolve disputes organizations also established intelligence information integration program i2p leadership then-cio patrick gorman nsa-cio dr. prescott winter goal i2p create shared infrastructure family shared services means increase information access sharing collaboration throughout us intelligence community mcconnell led effort create integrated planning programming budgeting system fully integrate optimize capabilities intelligence community previously agency budget developed independently aggregated congress issuance icd106 strategic enterprise management ic sem intelligence community budget closely aligned strategic goals objectives requirements performance criteria icd 106 replaced icd 116 2011 early april 2010 admiral mcconnell called expanding powers dni giving tenure creating department intelligence dni oversee fully control settle continued fighting amongst agencies within various departments
node15:Wikipedia entry. Entry name: MailChannels. Entry content: mailchannels mailchannels privately held anti-spam technology company based vancouver british columbia mailchannels specializes software services detect block sending spam phishing abusive email unlike anti-spam technology providers mailchannels positions leader blocking abusive email source installing software services within sending networks services isps web hosting providers combat outgoing spam mailchannels offers customers either cloud-based smtp relay service software installed customer within network mailchannels software derives open-source web proxy software nginx company makes claim software extremely scalable robust mailchannels customers include large web hosting companies internet service providers mailbox providers email service providers endurance international group sendgrid sherweb locaweb company founded 2004 former engineers activestate acquired sophos created one first commercial spam filters company first product smtp proxy provides tar-pitting transparent smtp proxy functionality inbound email filtering 2007 mit spam conference company founder ken simpson awarded best paper award 2007 mailchannels joined maawg closed series round led current former microsoft employees 2010 company launched outbound email filtering software claims capable filtering 30 millions messages per hour transparently network outbound email filtering involves scanning email traffic exits network identifying compromised accounts reducing risk ip addresses blocked receiving networks 2013 company launched outbound spam filtering service 2016 company launched reseller program 2018 company launch inbound spam filtering service
node16:Wikipedia entry. Entry name: PRISM_(surveillance_program). Entry content: prism surveillance program prism code name program united states national security agency nsa collects internet communications various u.s. internet companies program also known sigad prism collects stored internet communications based demands made internet companies google llc section 702 fisa amendments act 2008 turn data match court-approved search terms nsa use prism requests target communications encrypted traveled across internet backbone focus stored data telecommunication filtering systems discarded earlier get data easier handle among things prism began 2007 wake passage protect america act bush administration program operated supervision u.s. foreign intelligence surveillance court fisa court fisc pursuant foreign intelligence surveillance act fisa existence leaked six years later nsa contractor edward snowden warned extent mass data collection far greater public knew included characterized dangerous criminal activities disclosures published guardian washington post june 6 2013 subsequent documents demonstrated financial arrangement nsa special source operations division sso prism partners millions dollars documents indicate prism number one source raw intelligence used nsa analytic reports accounts 91 nsa internet traffic acquired fisa section 702 authority leaked information came light one day revelation fisa court ordering subsidiary telecommunications company verizon communications turn nsa logs tracking customers telephone calls u.s. government officials disputed aspects guardian washington post stories defended program asserting used domestic targets without warrant helped prevent acts terrorism receives independent oversight federal government executive judicial legislative branches june 19 2013 u.s. president barack obama visit germany stated nsa data gathering practices constitute circumscribed narrow system directed us able protect people prism publicly revealed classified documents program leaked journalists washington post guardian edward snowden time nsa contractor visit hong kong leaked documents included 41 powerpoint slides four published news articles documents identified several technology companies participants prism program including microsoft 2007 yahoo 2008 google 2009 facebook 2009 paltalk 2009 youtube 2010 aol 2011 skype 2011 apple 2012 speaker notes briefing document reviewed washington post indicated 98 percent prism production based yahoo google microsoft slide presentation stated much world electronic communications pass u.s. electronic communications data tend follow least expensive route rather physically direct route bulk world internet infrastructure based united states presentation noted facts provide united states intelligence analysts opportunities intercepting communications foreign targets electronic data pass united states snowden subsequent disclosures included statements government agencies united kingdom gchq also undertook mass interception tracking internet communications data described germany nightmarish true allegations nsa engaged dangerous criminal activity hacking civilian infrastructure networks countries universities hospitals private businesses alleged compliance offered limited restrictive effect mass data collection practices including americans since restrictions policy-based technically based change time adding additionally audits cursory incomplete easily fooled fake justifications numerous self-granted exceptions nsa policies encourage staff assume benefit doubt cases uncertainty number slides released edward snowden showing operation processes behind prism program faa referred section 702 fisa amendments act faa federal aviation administration widely known faa initialism french newspaper le monde disclosed new prism slides see page 4 7 8 coming prism/us-984xn overview presentation october 21 2013 british newspaper guardian disclosed new prism slides see pages 3 6 november 2013 one hand compares prism upstream program hand deals collaboration nsa threat operations center fbi wikimedia commons keeps copies leaked powerpoint slides along associated documents prism program special source operations sso division nsa tradition nsa intelligence alliances cooperates many 100 trusted u.s. companies since 1970s prior program terrorist surveillance program implemented wake september 11 attacks george w. bush administration widely criticized challenged illegal include warrants obtained foreign intelligence surveillance court prism authorized foreign intelligence surveillance court prism enabled president bush protect america act 2007 fisa amendments act 2008 immunizes private companies legal action cooperate u.s. government agencies intelligence collection 2012 act renewed congress president obama additional five years december 2017 according register fisa amendments act 2008 specifically authorizes intelligence agencies monitor phone email communications u.s. citizens week without obtaining warrant one parties outside u.s detailed description prism program found report nsa collection efforts section 702 faa released privacy civil liberties oversight board pclob july 2 2014 according report prism used collect internet communications telephone conversations internet communications collected bulk targeted way communications specific selectors like e-mail addresses gathered prism collection based upon keywords names actual collection process done data intercept technology unit ditu fbi behalf nsa sends selectors u.s. internet service providers previously served section 702 directive directive provider legally obliged hand ditu communications selectors provided government ditu sends communications nsa stored various databases depending type data content metadata already collected prism program may searched us non-us person identifiers kinds queries became known back-door searches conducted nsa fbi cia agencies slightly different protocols safeguards protect searches us person identifier internal nsa presentation slides included various media disclosures show nsa could unilaterally access data perform extensive in-depth surveillance live communications stored information examples including email video voice chat videos photos voice-over-ip chats skype file transfers social networking details snowden summarized general reality nsa fbi cia dia etc analyst access query raw sigint signals intelligence databases enter get results anything want according washington post intelligence analysts search prism data using terms intended identify suspicious communications targets analysts suspect least 51 percent confidence u.s. citizens process communication data u.s. citizens also collected unintentionally training materials analysts tell periodically report accidental collection non-foreign u.s. data nothing worry according guardian nsa access chats emails hotmail.com skype microsoft developed surveillance capability deal interception chats prism collection microsoft email services unaffected prism collects data prior encryption also according guardian glenn greenwald even low-level nsa analysts allowed search listen communications americans people without court approval supervision greenwald said low level analysts via systems like prism listen whatever emails want whatever telephone calls browsing histories microsoft word documents done need go court need even get supervisor approval part analyst added nsa databank years collected communications allows analysts search database listen calls read emails everything nsa stored look browsing histories google search terms 've entered also alerts activity people connected email address ip address future greenwald referring context foregoing quotes nsa program x-keyscore shortly publication reports guardian washington post united states director national intelligence james clapper june 7 2013 released statement confirming nearly six years government united states using large internet services companies facebook collect information foreigners outside united states defense national security threats statement read part guardian washington post articles refer collection communications pursuant section 702 foreign intelligence surveillance act contain numerous inaccuracies went say section 702 provision fisa designed facilitate acquisition foreign intelligence information concerning non-u.s. persons located outside united states used intentionally target u.s. citizen u.s. person anyone located within united states clapper concluded statement stating unauthorized disclosure information important entirely legal program reprehensible risks important protections security americans march 12 2013 clapper told united states senate select committee intelligence nsa wittingly collect type data millions hundreds millions americans clapper later admitted statement made march 12 2013 lie words responded thought truthful least untruthful manner saying june 7 2013 u.s. president barack obama referring prism program nsa telephone calls logging program said 've got two programs originally authorized congress repeatedly authorized congress bipartisan majorities approved congress continually briefed conducted whole range safeguards involved federal judges overseeing entire program throughout also said ca n't 100 percent security also 100 percent privacy zero inconvenience know 're going make choices society separate statements senior obama administration officials mentioned name source said congress briefed 13 times programs since 2009 june 8 2013 director national intelligence clapper made additional public statement prism released fact sheet providing information program described internal government computer system used facilitate government statutorily authorized collection foreign intelligence information electronic communication service providers court supervision authorized section 702 foreign intelligence surveillance act fisa 50 u.s.c § 1881a fact sheet stated surveillance activities published guardian washington post lawful conducted authorities widely known discussed fully debated authorized congress fact sheet also stated united states government unilaterally obtain information servers u.s. electronic communication service providers information obtained fisa court approval knowledge provider based upon written directive attorney general director national intelligence said attorney general provides fisa court rulings semi-annual reports prism activities congress provid ing unprecedented degree accountability transparency democratic senators udall wyden serve u.s. senate select committee intelligence subsequently criticized fact sheet inaccurate nsa director general keith alexander acknowledged errors stating fact sheet could precisely described requirements governing collection e-mail internet content us companies fact sheet withdrawn nsa website around june 26 closed-doors senate hearing around june 11 fbi director robert mueller said snowden leaks caused significant harm nation safety senate nsa director alexander defended program alexander defense immediately criticized senators udall wyden said saw evidence nsa programs produced uniquely valuable intelligence joint statement wrote gen alexander testimony yesterday suggested nsa bulk phone records collection program helped thwart 'dozens terrorist attacks plots mentioned appear identified using collection methods june 18 nsa director alexander said open hearing house intelligence committee congress communications surveillance helped prevent 50 potential terrorist attacks worldwide least 10 involving terrorism suspects targets united states 2001 2013 prism web traffic surveillance program contributed 90 percent cases according court records one example alexander gave regarding thwarted attack al qaeda new york stock exchange fact foiled surveillance several senators wrote director national intelligence clapper asking provide examples u.s. intelligence officials speaking condition anonymity told various news outlets june 24 already seeing said evidence suspected terrorists begun changing communication practices order evade detection surveillance tools disclosed snowden contrast swift forceful reactions previous day allegations government conducting surveillance united states citizens telephone records congressional leaders initially little say prism program day leaked information program published several lawmakers declined discuss prism citing top-secret classification others said aware program statements released president director national intelligence lawmakers began comment senator john mccain r-az senator dianne feinstein d-ca chair senate intelligence committee senator rand paul r-ky senator susan collins r-me member senate intelligence committee past member homeland security committee representative jim sensenbrenner r-wi principal sponsor patriot act representative mike rogers r-mi chairman permanent select committee intelligence senator mark udall d-co representative todd rokita r-in representative luis gutierrez d-il senator ron wyden d-or following statements lawmakers parties warned national security officials hearing house judiciary committee must change use sweeping national security agency surveillance programs face losing provisions foreign intelligence surveillance act allowed agency mass collection telephone metadata section 215 expires end 2015 unless realize 've got problem going renewed rep. jim sensenbrenner r-wis. author usa patriot act threatened hearing got changed 've got change operate section 215 otherwise two half years 're going anymore leaks classified documents pointed role special court enabling government secret surveillance programs members court maintained collaborating executive branch new york times however reported july 2013 dozen classified rulings nation surveillance court created secret body law giving national security agency power amass vast collections data americans pursuing terrorism suspects also people possibly involved nuclear proliferation espionage cyberattacks members u.s. congress pressed foreign intelligence surveillance court release declassified versions secret ruling court dismissed requests arguing decisions ca n't declassified contain classified information reggie walton current fisa presiding judge said statement perception court rubber stamp absolutely false rigorous review process applications submitted executive branch spearheaded initially five judicial branch lawyers national security experts judges ensure court authorizations comport applicable statutes authorize accusation rubber stamp rejected walton wrote letter senator patrick j. leahy annual statistics provided congress attorney general ... —frequently cited press reports suggestion court approval rate application 99 —reflect number final applications submitted acted court statistics reflect fact many applications altered prior final submission even withheld final submission entirely often indication judge would approve u.s. military acknowledged blocking access parts guardian website thousands defense personnel across country blocking entire guardian website personnel stationed throughout afghanistan middle east south asia spokesman said military filtering reports content relating government surveillance programs preserve network hygiene prevent classified material appearing unclassified parts computer systems access washington post also published information classified nsa surveillance programs disclosed edward snowden blocked time blocking access guardian reported former head austrian federal office protection constitution counterterrorism gert-rené polli stated knew prism program different name stated surveillance activities occurred austria well polli publicly stated 2009 received requests us intelligence agencies things would violation austrian law polli refused allow australian government said investigate impact prism program use pine gap surveillance facility privacy australian citizens australia former foreign minister bob carr said australians n't concerned prism cybersecurity high government list concerns australian foreign minister julie bishop stated acts edward snowden treachery offered staunch defence nation intelligence co-operation united states brazil president time dilma rousseff responded snowden reports nsa spied phone calls emails cancelling planned october 2013 state visit united states demanding official apology october 20 2013 n't come also rousseff classified spying unacceptable harsh words speech un general assembly september 24 2013 result boeing lost us 4.5 billion contract fighter jets sweden saab group canada national cryptologic agency communications security establishment cse said commenting prism would undermine cse ability carry mandate privacy commissioner jennifer stoddart lamented canada standards comes protecting personal online privacy stating fallen far behind report nations data protection authorities legal power make binding orders levy hefty fines take meaningful action event serious data breaches restricted 'soft approach persuasion encouragement potential publish names transgressors public interest push comes shove stoddart wrote short costly time-consuming court battle power enforce recommendations 20 october 2013 committee european parliament backed measure enacted would require american companies seek clearance european officials complying united states warrants seeking private data legislation consideration two years vote part efforts europe shield citizens online surveillance wake revelations far-reaching spying program u.s. national security agency germany france also ongoing mutual talks keep european email traffic going across american servers october 21 2013 french foreign minister laurent fabius summoned u.s ambassador charles rivkin quai d'orsay paris protest large-scale spying french citizens u.s. national security agency nsa paris prosecutors opened preliminary inquiries nsa program july fabius said ... obviously need go must quickly assure practices n't repeated germany receive raw prism data according reuters report german chancellor angela merkel said internet new us explain nature program matthew schofield mcclatchy washington bureau said roundly mocked statement gert-rené polli former austrian counter-terrorism official said 2013 absurd unnatural german authorities pretend known anything german army using prism support operations afghanistan early 2011 october 2013 reported nsa monitored merkel cell phone united states denied report following allegations merkel called president obama told spying friends never acceptable matter situation israeli newspaper calcalist discussed business insider article possible involvement technologies two secretive israeli companies prism program—verint systems narus finding prism program mexican government started constructing spying program spy citizens according jenaro villamil writer proceso cisen mexico intelligence agency started work ibm hewlett packard develop data gathering software facebook twitter emails social network sites going priority new zealand university otago information science associate professor hank wolfe said unofficially known five eyes alliance new zealand governments including united states australia canada britain dealt internal spying saying n't partners share information edward snowden live streamed google hangout kim dotcom julian assange alleged received intelligence new zealand nsa listening posts new zealand meeting european union leaders held week 21 october 2013 mariano rajoy spain prime minister said spying activities n't proper among partner countries allies 28 october 2013 spanish government summoned american ambassador james costos address allegations u.s. collected data 60 million telephone calls spain separately íñigo méndez de vigo spanish secretary state referred need maintain necessary balance security privacy concerns said recent allegations spying proven true improper unacceptable partners friendly countries united kingdom government communications headquarters gchq also surveillance program tempora access prism program june 2010 wrote 197 reports 2012 alone intelligence security committee uk parliament reviewed reports gchq produced basis intelligence sought us found case warrant interception place accordance legal safeguards contained uk law august 2013 guardian newspaper offices visited agents gchq ordered supervised destruction hard drives containing information acquired snowden original washington post guardian articles reporting prism noted one leaked briefing documents said prism involves collection data directly servers several major internet services providers corporate executives several companies identified leaked documents told guardian knowledge prism program particular also denied making information available government scale alleged news reports statements several companies named leaked documents reported techcrunch washington post follows response technology companies confirmation nsa able directly access companies servers new york times reported sources stated nsa gathering surveillance data companies using technical means response court orders specific sets data washington post suggested possible conflict prism slides company spokesmen result imprecision part nsa author another classified report obtained post arrangement described allowing 'collection managers send content tasking instructions directly equipment installed company-controlled locations rather directly company servers n context 'direct likely mean nsa receiving data sent deliberately tech companies opposed intercepting communications 're transmitted destination companies received order fisa amendments act forbidden law disclosing received order disclosing information order mark rumold staff attorney electronic frontier foundation told abc news may 28 2013 google ordered united states district court judge susan illston comply national security letter issued fbi provide user data without warrant kurt opsahl senior staff attorney electronic frontier foundation interview venturebeat said certainly appreciate google put transparency report appears transparency n't include would n't surprised subject gag order new york times reported june 7 2013 twitter declined make easier government companies compliant according people briefed negotiations companies held discussions national security personnel make data available efficiently securely cases companies made modifications systems support intelligence collection effort dialogues continued recent months general martin dempsey chairman joint chiefs staff met executives including facebook microsoft google intel details discussions provide insight disparity initial descriptions government program including training slide states collection directly servers companies denials providing data response legitimate fisa request approved fisa court legal requirement modifying systems make easier government collect data twitter could legally decline provide enhanced mechanism data transmission twitter companies effectively asked construct locked mailbox provide key government people briefed negotiations said facebook instance built system requesting sharing information google provide lockbox system instead transmits required data hand delivery ssh response publicity surrounding media reports data-sharing several companies requested permission reveal public information nature scope information provided response national security requests june 14 2013 facebook reported u.s. government authorized communication numbers aggregate range press release posted web site company reported six months ending december 31 2012 total number user-data requests facebook received government entities u.s. including local state federal including criminal national security-related requests – 9,000 10,000 company reported requests impacted 18,000 19,000 user accounts tiny fraction one percent 1.1 billion active user accounts day microsoft reported period received 6,000 7,000 criminal national security warrants subpoenas orders affecting 31,000 32,000 consumer accounts u.s. governmental entities including local state federal impacted tiny fraction microsoft global customer base google issued statement criticizing requirement data reported aggregated form stating lumping national security requests criminal request data would step backwards previous detailed practices website transparency report company said would continue seek government permission publish number extent fisa requests cisco systems saw huge drop export sales fears national security agency could using backdoors products september 12 2014 yahoo reported u.s. government threatened imposition 250,000 fines per day yahoo n't hand user data part nsa prism program known companies threatened fined providing data response legitimate fisa requests new york times editorial board charged obama administration lost credibility issue lamented years members congress ignored evidence domestic intelligence-gathering grown beyond control even seem disturbed learn every detail public calling texting habits reside n.s.a database wrote respect fisa-court context prism perversion american justice system judicial secrecy coupled one-sided presentation issues according new york times result court whose reach expanding far beyond original mandate without substantive check james robertson former federal district judge based washington served secret foreign intelligence surveillance act court three years 2002 2005 ruled bush administration landmark hamdan v. rumsfeld case said fisa court independent flawed government side represented effectively deliberations anyone judge tell judge needs hear sides case said james robertson without judges benefit adversarial debate suggested creating advocate security clearance would argue government filings robertson questioned whether secret fisa court provide overall legal approval surveillance programs saying court turned something like administrative agency changes brought foreign intelligence surveillance act 1978 amendments act 2008 expanded us government authority forcing court approve entire surveillance systems surveillance warrants previously handled court approving programmatic surveillance n't think judicial function robertson also said frankly stunned new york times report fisa court rulings created new body law broadening ability nsa use surveillance programs target terrorists suspects cases involving espionage cyberattacks weapons mass destruction former cia analyst valerie plame wilson former u.s. diplomat joseph wilson writing op-ed article published guardian said prism nsa data-mining programs might indeed effective hunting capturing actual terrorists n't enough information society make decision electronic frontier foundation eff international non-profit digital-rights group based u.s. hosting tool american resident write government representatives regarding opposition mass spying obama administration argument nsa surveillance programs prism boundless informant necessary prevent acts terrorism challenged several parties ed pilkington nicholas watt guardian said case najibullah zazi planned bomb new york city subway interviews involved parties u.s. british court documents indicated investigation case actually initiated response conventional surveillance methods old-fashioned tip-offs british intelligence services rather leads produced nsa surveillance michael daly daily beast stated even though tamerlan tsarnaev conducted boston marathon bombing brother dzhokhar tsarnaev visited al qaeda-affiliated inspire magazine website even though russian intelligence officials raised concerns u.s. intelligence officials tamerlan tsarnaev prism prevent carrying boston attacks daly observed problem national security agency gathering risk privacy apparently unable monitor risk safety ron paul former republican member congress prominent libertarian thanked snowden greenwald denounced mass surveillance unhelpful damaging urging instead transparency u.s. government actions called congress derelict giving much power government said elected president would ordered searches probable cause crime committed said prism program operated new york times columnist thomas l. friedman defended limited government surveillance programs intended protect american people terrorist acts yes worry potential government abuse privacy program designed prevent another 9/11—abuse far appear happened worry even another 9/11 ... another 9/11 fear 99 percent americans would tell members congress whatever need privacy damned make sure happen fear 'll reluctantly reluctantly trade government using data mining look suspicious patterns phone numbers called e-mail addresses—and go judge get warrant actually look content guidelines set congress—to prevent day fear give government license look anyone e-mail phone call anywhere anytime political commentator david brooks similarly cautioned government data surveillance programs necessary evil n't mass data sweeps well agencies going want go back old-fashioned eavesdropping lot intrusive conservative commentator charles krauthammer worried less legality prism nsa surveillance tools potential abuse without stringent oversight problem constitutionality ... need toughening congressional oversight judicial review perhaps even independent outside scrutiny plus periodic legislative revision—say reauthorization every couple years—in light efficacy safeguards nature external threat object abolish vital programs fix blog post david simon creator wire compared nsa programs including prism 1980s effort city baltimore add dialed number recorders pay phones know individuals called callers city believed drug traffickers using pay phones pagers municipal judge allowed city place recorders placement dialers formed basis show first season simon argued media attention regarding nsa programs faux scandal simon stated many classes people american society already faced constant government surveillance political activist frequent critic u.s. government policies noam chomsky argued governments capacity governments use whatever technology available combat primary enemy – population cnn/opinion research corporation poll conducted june 11 13 found 66 americans generally supported program however quinnipiac university poll conducted june 28 july 8 found 45 registered voters think surveillance programs gone far 40 saying go far enough compared 25 saying gone far 63 saying far enough 2010 polls shown similar shifts public opinion revelations programs leaked terms economic impact study released august information technology innovation foundation found disclosure prism could cost u.s. economy 21.5 35 billion lost cloud computing business three years sentiment around world general displeasure upon learning extent world communication data mining national leaders spoke nsa spoke national surveillance one national minister scathing comments national security agency data-mining program citing benjamin franklin society monitors controls observes citizens less free question costs hunting terrorists overshadows loss citizen privacy nick xenophon australian independent senator asked bob carr australian minister foreign affairs e-mail addresses australian parliamentarians exempt prism mainway marina and/or nucleon carr replied legal framework protect australians government would comment intelligence matters xenophon argued specific answer question taliban spokesperson zabiullah mujahid said knew past efforts trace system used technical resources foil efforts able stop succeeding far however cnn reported terrorist groups changed communications behaviors response leaks 2013 cloud security alliance surveyed cloud computing stakeholders reactions us prism spying scandal 10 non-us residents indicated cancelled project us-based cloud computing provider wake prism 56 said would less likely use us-based cloud computing service alliance predicted us cloud computing providers might lose much €26 billion 20 share cloud services foreign markets prism spying scandal reactions internet users china mixed viewing loss freedom worldwide seeing state surveillance coming secrecy story broke u.s. president barack obama chinese president xi jinping met california asked nsa hacking china spokeswoman ministry foreign affairs people republic china said china strongly advocates cybersecurity party-owned newspaper liberation daily described surveillance like nineteen eighty-four -style hong kong legislators gary fan claudia mo wrote letter obama stating revelations blanket surveillance global communications world leading democracy damaged image u.s. among freedom-loving peoples around world ai weiwei chinese dissident said even though know governments kinds things shocked information us surveillance operation prism abusively using government powers interfere individuals privacy important moment international society reconsider protect individual rights sophie 't veld dutch member european parliament called prism violation eu laws german federal commissioner data protection freedom information peter schaar condemned program monstrous added white house claims reassure given large number german users google facebook apple microsoft services expect german government ... committed clarification limitation surveillance steffen seibert press secretary chancellor office announced angela merkel put issues agenda talks barack obama pending visit berlin wolfgang schmidt former lieutenant colonel stasi said stasi would seen program dream come true since stasi lacked technology made prism possible schmidt expressed opposition saying height naivete think collected information wo n't used nature secret government organizations way protect people privacy allow government collect information first place many germans organized protests including one checkpoint charlie obama went berlin speak matthew schofield mcclatchy washington bureau said germans dismayed obama role allowing collection much information italian president guarantor protection personal data antonello soro said surveillance dragnet would legal italy would contrary principles legislation would represent serious violation cnil french data protection watchdog intimates google change privacy policies within three months 'll risk fines 150,000 euros spanish agency data protection aepd planning fine google 40k 300k euros fails clear past usage massive data spanish users william hague foreign secretary united kingdom dismissed accusations british security agencies circumventing british law using information gathered british citizens prism saying data obtained us united states involving uk nationals subject proper uk statutory controls safeguards david cameron said britain spy agencies received data collected prism acted within law 'm satisfied intelligence agencies fantastically important job country keep us safe operate within law malcolm rifkind chairman parliament intelligence security committee said british intelligence agencies seeking know content emails people living uk actually get lawful authority uk information commissioner office cautious saying would investigate prism alongside european data agencies real issues extent u.s. law agencies access personal data uk european citizens aspects u.s. law companies compelled provide information u.s. agencies potentially conflict european data protection law including uk data protection act ico raised european counterparts issue considered european commission discussions u.s government tim berners-lee inventor world wide web accused western governments practicing hypocrisy conducted spying internet criticized countries spying internet berners-lee stated internet spying make people feel reluctant access intimate details use internet certain way paraphrased steve robson daily mail said internet protected controlled governments large corporations minister external affairs salman khurshid defended prism program saying scrutiny access actual messages computer analysis patterns calls emails sent actually snooping specifically content anybody message conversation information got scrutiny able use prevent serious terrorist attacks several countries comments contradicted foreign ministry characterization violations privacy unacceptable minister communications information technology kapil sibal asked khurshid comments refused comment directly said know nature data information sought part prism even external ministry idea media felt khurshid defence prism india government rolling central monitoring system cms similar prism program khurshid comments criticized indian media well opposition party cpi stated upa government strongly protested surveillance bugging instead shocking khurshid sought justify shameful remark come time even close allies us like germany france protested snooping countries rajya sabha mp p. rajeev told times india act usa clear violation vienna convention diplomatic relations khurshid trying justify speed government india reject asylum application edward snowden shameful june 8 2013 director national intelligence issued fact sheet stating prism undisclosed collection data mining program rather internal government computer system used facilitate collection foreign intelligence information court supervision authorized section 702 foreign intelligence surveillance act fisa 50 u.s.c § 1881a section 702 provides attorney general director national intelligence may authorize jointly period 1 year effective date authorization targeting persons reasonably believed located outside united states acquire foreign intelligence information order authorize targeting attorney general director national intelligence need obtain order foreign intelligence surveillance court fisa court pursuant section 702 certify intelligence important national security united states may lost timely acquired time permit issuance order requesting order attorney general director national intelligence must certify fisa court significant purpose acquisition obtain foreign intelligence information need specify facilities property targeted receiving fisa court order determining emergency circumstances attorney general director national intelligence direct electronic communication service provider give access information facilities carry targeting keep targeting secret provider option 1 comply directive 2 reject 3 challenge fisa court provider complies directive released liability users providing information reimbursed cost providing provider rejects directive attorney general may request order fisa court enforce provider fails comply fisa court order punished contempt court finally provider petition fisa court reject directive case fisa court denies petition orders provider comply directive provider risks contempt court refuses comply fisa court order provider appeal fisa court denial foreign intelligence surveillance court review appeal court review decision supreme court writ certiorari review seal senate select committee intelligence fisa courts put place oversee intelligence operations period death j. edgar hoover beverly gage slate said created new mechanisms supposed stop kinds abuses men like hoover engineered instead looks come function rubber stamps expansive ambitions intelligence community j. edgar hoover longer rules washington turns n't need anyway laura donohue law professor georgetown university law center center national security law called prism nsa mass surveillance programs unconstitutional woodrow hartzog affiliate stanford law school center internet society commented aclu likely demonstrate legitimate first amendment harms chilling effects fourth amendment harms perhaps violation reasonable expectation privacy ... harm merely know certainty monitored government certainly argument people surveillance act differently experience loss autonomy less likely engage self exploration reflection less willing engage core expressive political activities dissenting speech government criticism interests first fourth amendment seek protect fisa amendments act faa section 702 referenced prism documents detailing electronic interception capture analysis metadata many reports letters concern written members congress suggest section faa particular legally constitutionally problematic targeting u.s. persons insofar collections occur u.s. published documents indicate aclu asserted following regarding faa regardless abuses problem faa fundamental statute unconstitutional senator rand paul introducing new legislation called fourth amendment restoration act 2013 stop nsa agencies united states government violating fourth amendment u.s. constitution using technology big data information systems like prism boundless informant besides information collection program started 2007 two programs sharing name prism parallel programs known collectively sigads gather data metadata sources sigad set defined sources targets types data collected legal authorities software associated sigads name umbrella sit blarney sigad summary set slides alongside cartoon insignia shamrock leprechaun hat describes ongoing collection program leverages ic intelligence community commercial partnerships gain access exploit foreign intelligence obtained global networks sigads like prism collect data isp level others take top-level infrastructure type collection known upstream upstream collection includes programs known blanket terms blarney fairview oakstar stormbrew individual sigads data integrated sigad gathered ways besides upstream service providers instance collected passive sensors around embassies even stolen individual computer network hacking attack sigads involve upstream collection instance data could taken directly service provider either agreement case prism means hacking ways according washington post much less known muscular program directly taps unencrypted data inside google yahoo private clouds collects twice many data points compared prism google yahoo clouds span globe tap done outside united states unlike prism muscular program requires fisa type warrants
node17:Wikipedia entry. Entry name: Cyber_security_standards. Entry content: cyber security standards information storage transit applications services systems connected directly indirectly networks principal objective reduce risks including prevention mitigation cyber-attacks published materials consist collections tools policies security concepts security safeguards guidelines risk management approaches actions training best practices assurance technologies cybersecurity standards existed several decades users providers collaborated many domestic international forums effect necessary capabilities policies practices generally emerging work stanford consortium research information security policy 1990s 2016 us security framework adoption study reported 70 surveyed organizations nist cybersecurity framework popular best practice information technology computer security many note requires significant investment iso/iec 27001 part growing iso/iec 27000 family standards information security management system isms standard last revision published october 2013 international organization standardization iso international electrotechnical commission iec full name iso/iec 27001:2013 – information technology – security techniques – information security management systems – requirements iso/iec 27001 formally specifies management system intended bring information security explicit management control iso/iec 27002 incorporates mainly part 1 bs 7799 good security management practice standard latest versions bs 7799 bs 7799-3 sometimes iso/iec 27002 therefore referred iso 17799 bs 7799 part 1 sometimes refers part 1 part 7 bs 7799 part 1 provides outline good practice guide cybersecurity management whereas bs 7799 part 2 iso/iec 27001 normative therefore provide framework certification iso/iec 27002 high level guide cybersecurity beneficial explanatory guidance management organisation obtain certification iso/iec 27001 standard certification obtained lasts three years depending auditing organisation intermediate audits may carried three years iso/iec 27001 isms replaces bs 7799 part 2 since backward compatible organization working toward bs 7799 part 2 easily transition iso/iec 27001 certification process also transitional audit available make easier organization bs 7799 part 2-certified organization become iso/iec 27001-certified iso/iec 27002 provides best practice recommendations information security management use responsible initiating implementing maintaining information security management systems isms states information security systems required implement iso/iec 27002 control objectives without iso/iec 27001 iso/iec 27002 control objectives ineffective iso/iec 27002 controls objectives incorporated iso 27001 annex a. iso/iec 21827 sse-cmm – iso/iec 21827 international standard based systems security engineering capability maturity model sse-cmm measure maturity iso controls objectives north american electric reliability corporation nerc addresses patching nerc cip 007-6 requirement 2 summarily requires bulk power system bps operators/owners identify source sources utilized provide entiter security related patches cyber assets utilized operation registered entities required check new patches every thirty five calendar days upon identification new patch entities required evaluate applicability patch complete mitigation installation activities within 35 calendar days completion assessment applicability.e bps.y initial attempt create information security standards electrical power industry created nerc 2003 known nerc css cyber security standards subsequent css guidelines nerc evolved enhanced requirements widely recognized modern nerc security standard nerc 1300 modification/update nerc 1200 newest version nerc 1300 called cip-002-3 cip-009-3 cip=critical infrastructure protection standards used secure bulk electric systems although nerc created standards within areas bulk electric system standards also provide network security administration still supporting best-practice industry processes standard develops called “ common criteria ” allows many different software hardware products integrated tested secure way iasme governance uk-based standard information assurance small-to-medium enterprises smes provides criteria certification small-to-medium business cybersecurity readiness also allows small medium business provide potential existing customers clients accredited measurement cybersecurity posture enterprise protection personal/business data iasme governance standard developed enable businesses achieve accreditation similar iso 27001 reduced complexity cost administrative overhead specifically focused sme recognition difficult small cap businesses achieve maintain iso 27001 certifications iasme governance standard include free basic cyber security insurance uk-based sme applicants cost certification progressively graduated based upon employee population sme e.g. 10 fewer 11 25 26 100 101 250 employees certification based upon self-assessment iasme questionnaire third-party professional assessor insurance companies reduce premiums cybersecurity related coverage based upon iasme certification october 2016 federal reserve board office comptroller currency federal deposit insurance corporation jointly issued advance notice proposed rulemaking anpr regarding cyber risk management standards regulated entities anpr aims enhance ability large interconnected financial services entities prevent recover cyber attacks goes beyond existing requirements proposal requires entities total assets 50 billion third party service providers take steps strengthen incident response programs enhance cyber risk governance management practices may 2017 us based federal financial institutions examination council issued cyber security assessment tool tool includes completing inherent risk profile organization covers five areas european telecommunications standards institute etsi established new cyber security committee tc cyber 2014 meet growing demand ev guidance protect internet communications business carries tc cyber working closely relevant stakeholders develop appropriate standards increase privacy security organisations citizens across europe committee looking particular security infrastructures devices services protocols well security tools techniques ensure security offers security advice guidance users manufacturers network infrastructure operators standards freely available on-line principal work item effort production cyber security ecosystem standardization activities 1990s information security forum isf published comprehensive list best practices information security published standard good practice sogp isf continues update sogp every two years latest version published 2018 among programs isf offers member organizations comprehensive benchmarking program based sogp furthermore important charge security management understand adhere nerc cip compliance requirements ansi/isa 62443 series standards technical reports related information define procedures implementing secure industrial automation control systems iacs guidance applies stakeholders implementing managing iacs documents originally referred ansi/isa-99 isa99 standards created international society automation isa publicly released american national standards institute ansi documents 2010 renumbered ansi/isa-62443 series change intended align isa ansi document numbering corresponding international electrotechnical commission iec standards isa99 remains name industrial automation control system security committee isa since 2002 committee developing multi-part series standards technical reports subject iacs security work products submitted isa approval publishing ansi also submitted iec input iec 62443 series international standards following iec standards development process established 2007 international security compliance institute isci created first conformity assessment scheme commonly known certification scheme ansi/isa 62443 standards program certifies commercial off-the-shelf cots automation control systems iot devices addressing securing control systems supply chain isci development processes include maintenance policies ensure isasecure certifications remain alignment iec 62443 standards evolve ansi/isa 62443 standards designed horizontally address technical cybersecurity requirements cross-section industries isasecure working groups included subject matter experts traditional process industries building management system suppliers asset owners isasecure scheme requires products properly tested supplier development process conformance ansi/isa 62443-4-1. exida united states first certification body accredited isasecure scheme american national standards institute ansi followed control systems security center – certification laboratory cssc-cl accredited japan accreditation board jab tüv rheinland accredited deutsche akkreditierungsstelle dakks five additional certification bodies accredited 2019 including tuv sud two cots product certifications available isasecure® brand isasecure-csa component security assurance certifying automation products iec 62443-4-1 iec 62443-4-2 cybersecurity standards isasecure-ssa system security assurance certifying systems iec 62443-3-3 standard third certification sdla secure development lifecycle assurance available isci certifies automation systems development organizations iec 62443-4-1 cybersecurity standard isasecure 62443 conformity assessment scheme iso 17065 program whose labs certification bodies cb independently accredited ansi/anab jab dakks singapore accreditation council global iso 17011 accreditation bodies ab certification labs must also meet iso 17025 lab accreditation requirements ensure consistent application certification requirements recognized tools mutual recognition arrangements mra iaf ilac others accreditation isasecure labs isa 17011 accreditation bodies ensures certificates issued isasecure labs globally recognized iec-62443 cybersecurity standards multi-industry standards listing cybersecurity protection methods techniques documents result iec standards creation process ansi/isa-62443 proposals inputs submitted country committees review done comments regarding changes submitted comments reviewed various iec 62443 committees comments discussed changes made agreed upon many members iec committees persons isa s99 committees date fundamental concepts original ansi/isa 62443 documents utilized iec 62443 certification schemes also established several global certification bodies defined scheme based upon referenced standards procedures describes test methods surveillance audit policy public documentation policies specific aspects program cybersecurity certification programs iec 62443 standards offered globally several recognized cbs including exida sgs-tüv saar tüv nord tüv rheinland tüv sud ul certx automation system market space cybersecurity certifications done exida global infrastructure established ensure consistent evaluation per standards impartial third party organizations called certification bodies cb accredited operate iso/iec 17065 iso/iec 17025 certification bodies accredited perform auditing assessment testing work accreditation body ab often one national ab country abs operate per requirements iso/iec 17011 standard contains requirements competence consistency impartiality accreditation bodies accrediting conformity assessment bodies abs members international accreditation forum iaf work management systems products services personnel accreditation international laboratory accreditation cooperation ilac laboratory accreditation multilateral recognition arrangement mla abs ensure global recognition accredited cbs ...
node18:Wikipedia entry. Entry name: Aloysius_Cheang. Entry content: aloysius cheang aloysius cheang managing director apac cloud security alliance another role standards secretariat overseeing standardization efforts within csa cloud security alliance owning relationships sdos aloysius former member singapore government chief security officer roundtable founder sig^2 2001 also held senior executive positions various consulting companies telco worldwide remit sig^2 rose become de facto security community asia lead formalisation singapore government-backed association information security professionals aisp cheang pro tem chairman 2006–2007 also co-editor iso/iec 27032 guidelines cybersecurity represented singapore iso/iec/jtc 1 sc 27 wg4 previous contribution ss 507 “ business continuity/disaster recovery industry standard ” adopted iso/iec 24762 cheang sits singapore standards committee national infocomm competency framework security sub-committee cheang professional certifications include cisa cissp gcih first microsoft security mvp south asia member microsoft sea mvp hall fame views presented times asia cio asia zdnet computerworld new paper mypaper sin chew daily wen wei po straits times channelnewsasia independent source specialist opinion
node19:Wikipedia entry. Entry name: Valerie_Aurora. Entry content: valerie aurora valerie anita aurora software engineer feminist activist co-founder ada initiative non-profit organization sought increase women participation free culture movement open source technology open source culture aurora also known within linux community advocating new developments filesystems linux including chunkfs union file system birth name val henson changed shortly 2009 choosing middle name computer scientist anita borg 2012 aurora ada initiative co-founder mary gardiner named two influential people computer security sc magazine 2013 o'reilly open source award aurora raised new mexico home-schooled became involved computer programming attended def con 1995 studied computer science mathematics new mexico institute mining technology first became involved file systems worked zfs 2002 sun microsystems later moved ibm worked group theodore ts considered extensions ext2 ext3 linux file systems working intel implemented ext2 dirty bit relative atime along arjan van de ven came idea chunkfs simplifies file system checks dividing file system independent pieces also co-organized first linux file systems workshop order figure spread awareness raise funding file system development 2009 worked red hat file systems developer well part-time science writer linux consultant already activist women open source joined mary gardiner members geek feminism blog develop anti-harassment policies conferences noirin shirley sexually assaulted apachecon 2010 aurora quit job linux kernel developer red hat gardiner founded ada initiative february 2011 organization named ada lovelace worked charles babbage considered world first computer programmer two years later aurora founded double union hackerspace women amelia greenhall liz henry banned 2018 ada initiative shut october 2015 maintaining blog since 2007 aurora written extensively coding experiences women open source included descriptions def con harassment took place 2013 aurora provided comment verge electronic frontier foundation involvement legal defense andrew auernheimer prison hacking previously harassed kathy sierra aurora said another case 're saying 'the cases care ones white men interested ’ less interested protecting women web comment received negatively eff director international freedom expression jillian york another 2013 controversy received commentary aurora donglegate pycon attendee adria richards faced backlash reporting conversation overheard two men sitting near aurora condemned threats sent richards stated anonymous using large numbers computers distorting social pressure asked firing one males appropriate response said n't enough information know two years later aurora praised gender ratio pycon called guido van rossum python community biggest success story women open source interview approved culture website tumblr stated linus torvalds daughter patricia positive role-model
node20:Wikipedia entry. Entry name: Security_as_a_service. Entry content: security service security service secaas business model service provider integrates security services corporate infrastructure subscription basis cost effectively individuals corporations provide total cost ownership considered secaas inspired software service model applied information security type services require on-premises hardware avoiding substantial capital outlays security services often include authentication anti-virus anti-malware/spyware intrusion detection penetration testing security event management among others outsourced security licensing delivery boasting multibillion-dollar market secaas provides users internet security services providing protection online threats attacks ddos constantly searching access points compromise websites demand use cloud computing skyrockets users vulnerable attacks due accessing internet new access points secaas serves buffer persistent online threats cloud security alliance csa organization dedicated defining raising awareness secure cloud computing csa defined following categories secaas tools created series technical implementation guidance documents help businesses implement understand secaas categories include secaas typically offered several forms security service offers number benefits including secaas number deficiencies make insecure many applications individual security service request adds least one across-the-'net round-trip counting installer packages four opportunities hacker intercept conversation secaas makes security handling uniform security breach one request security broken requests broadest attack surface also multiplies rewards incentive hacker value gained effort dramatically increased factors especially tailored resources nation/state-sponsored hacker biggest challenge secaas market maintaining reputation reliability superiority standard non-cloud services secaas whole seemingly become mainstay cloud market cloud-based website security ’ cater businesses specific requirements must properly assessed individual needs business cater end consumers afford keep data loose vulnerable hacker attacks heaviest part secaas educating businesses since data biggest asset businesses cios ctos take care overall security company
node21:Wikipedia entry. Entry name: Black_bag_operation. Entry content: black bag operation black bag operations black bag jobs covert clandestine entries structures obtain information human intelligence operations usually entails breaking entering denied areas tactics techniques procedures associated black bag operations lock picking safe cracking key impressions fingerprinting photography electronic surveillance including audio video surveillance mail manipulation flaps seals forgery host related skills term black bag refers small bag burglars carry tools black bag operations federal bureau investigation fbi agents entered offices targeted individuals organizations photographed information found records practice used fbi 1942 1967 july 1966 fbi director j. edgar hoover ordered practice discontinued use black bag jobs fbi declared unconstitutional united states supreme court 19 june 1972 plamondon case united states v. u.s. district court 407 u.s. 297 fbi still carries numerous black bag entry-and-search missions search covert target investigation informed search took place investigation involves criminal matter judicial warrant required national security cases operation must approved foreign intelligence surveillance court example 1947 american spy elizabeth bentley defected soviet underground started talking fbi fbi broke brooklyn hotel black-bag job verify background – look anything otherwise found nothing ordinary bentley learned dodge intrusions earliest days underground learned determine enemy agents discovered secret documents possession leave apartment careful put black trunk tie thin black thread around would know tampered absence cia used black-bag operations steal cryptography secrets foreign government offices outside united states practice preceding u.s. intelligence organisations dates back least far 1916
node22:Wikipedia entry. Entry name: Vincent_Moscaritolo. Entry content: vincent moscaritolo vincent moscaritolo american computer security expert known work encryption applications mobile devices 2012 2015 distinguished member technical staff silent circle designed original messaging technologies silent circle uses 2015 left silent circle co-found 4th-a technologies llc robbie hanson 4th-a technologies develops technologies restore restore people inalienable right “ secure documents ” designed zerodark.cloud framework simplifies development apps interact cloud performs tasks syncing messaging collaboration uses zero-knowledge encryption ensuring data cloud compromised also produced storm4 secure cloud storage service vincent involved design invention production system software network applications 30 years addition producing cryptographic products concern use encryption technology criminal terrorist actors compelled offer assistance training law enforcement intelligence community cryptographic issues participated specialized venues fbi information technology study group drug enforcement administration office investigative technology infragard cloud security alliance vincent moscaritolo experience includes roles distinguished member technical staff silent circle principal cryptographic engineer pgp corporation senior operating system engineer apple computer principal software specialist digital equipment corporation vincent one co founders silent circle developer secure messaging technology used silent circle blackphone designed silent circle instant messaging protocol scimp inventor progressive encryption used silent text app pgp focused engineering cryptographic products os x platform including cross platform core crypto library secure file deletion virtual disk client network kernel engine redirection module also responsible obtaining maintaining nist fips-140 validation pgp cryptographic core apple notable founding mac-crypto conference key mac developers industry leaders legends met discuss topics ranging cryptosystems digital cash security issues feedback sessions developers able directly discuss requirements apple engineers also involved original cypherpunk group mid 1980s founded startup called datavox produced banktalk one first voice response systems financial marketplace included user-tailorable audio menu system provided general information balance account transactions able communicate bank mainframes existing atm network vincent latest project zerodark.cloud framework moscaritolo published article s4 open-source crypto library verifying authenticity public keys moscaritolo designed silent circle instant messaging protocol scimp uses new progressive encryption technology cryptographic projects include development public key authentication extension file servers authoring ietf draft secure authorization protocol distributed systems development code technotes pgp cryptographic toolkit number presentations tutorials modern cryptosystems security also contributor vanish self destructing data project university washington holds patents related cryptographic techniques designs pass laws could criminals avid outdoorsman vincent usually spends weekends hiking snowshoeing deep woods southern oregon daughter son background variety fields including motorcycle racing number martial arts trauma medicine
node23:Wikipedia entry. Entry name: Lunacloud. Entry content: lunacloud lunacloud cloud computing infrastructure service provider based lisbon lunacloud founded 2011 antónio miguel ferreira charles nasser launched services general public provides cloud computing infrastructure service cloud servers cloud storage cloud jelastic hosting performance cost lunacloud offerings favourably rated techweekeurope techrepublic cloudspectator compared rackspace amazon ec2 lunacloud three base products — cloud servers cloud storage cloud jelastic lunacloud helps design build operate workloads across environments depending individual needs customer cloud servers provides scalable virtual servers using parallels vmware clouds servers deployed using control panel api api also compatible amazon s3 api cloud jelastic acronym java elastic unlimited paas container based iaas within single platform provides high availability applications automatic vertical horizontal scaling via containerization software development clients enterprise businesses devops system admins developers lunacloud headquarters lisbon lunacloud localized storefronts differ selection prices differentiated top-level domain country code
node24:Wikipedia entry. Entry name: Cloud_(operating_system). Entry content: cloud operating system cloud browser-based operating system created good os llc los angeles-based corporation company initially launched linux distribution called gos heavily based ubuntu third incarnation cloud simplified operating system ran web browser providing access variety web-based applications allowed user perform many simple tasks without booting full-scale operating system simplicity cloud could boot seconds operating system designed netbooks mobile internet devices pcs mainly used browse internet cloud user quickly boot main os cloud continues booting main os background combining browser basic operating system allows use cloud computing applications data live run internet instead hard drive cloud installed used together operating systems act standalone operating system used standalone operating system hardware requirements relatively low 2009 cloud officially available built gigabyte m912 touch screen netbook early reviews compared operating system user interface os x noted similarity browser google chrome although actually based modified mozilla firefox browser
node25:Wikipedia entry. Entry name: Commentary_on_Edward_Snowden's_disclosure. Entry content: commentary edward snowden disclosure commentary edward snowden disclosure part reactions global surveillance disclosures made edward snowden june 8 2013 director national intelligence dni james r. clapper denounced reckless disclosures intelligence community measures used keep americans safe condemned leaks done huge grave damage u.s. intelligence capabilities later month u.s. president barack obama dismissive snowden saying 'm going scrambling jets get 29-year-old hacker early august obama said snowden patriot americans would better remained unaware nsa surveillance activities snowden revealed obama also said called thorough review surveillance operations mr. snowden made leaks ... preference think american people preference would lawful orderly examination laws thoughtful fact-based debate would lead us better place august 4 chairman joint chiefs staff martin dempsey said weekly abc interview show week snowden caused us considerable damage intelligence architecture adversaries changing way communicate september dni clapper acknowledged snowden may done public service started needed debate balance privacy security loath give credit happened egregious think clear conversations generated debate actually probably needed happen said unfortunate n't happen time ago good side january 29 2014 dni clapper gave public testimony session senate intelligence committee asked snowden accomplices return purloined nsa documents clapper asked whether word accomplices referred journalists clapper spokesperson shawn turner responded director clapper referring anyone assisting edward snowden threaten national security unauthorized disclosure stolen documents related lawful foreign intelligence collection programs late june 2013 former us president jimmy carter said obviously violated laws america responsible think invasion human rights american privacy gone far ... think secrecy surrounding invasion privacy excessive think bringing public notice probably long term beneficial earlier month former vice president dick cheney suggested snowden might spy working chinese government former u.s. intelligence officials speculated chinese russian intelligence agents might gleaned additional classified material snowden view shared former russian agents snowden however told journalist glenn greenwald july never gave information either government never took anything laptops stewart baker former nsa general counsel early 1990s said july 18 2013 hearing afraid hyped distorted press reports orchestrated edward snowden allies may cause us – nations – construct new restraints intelligence gathering restraints leave us vulnerable another security disaster former cia nsa chief general michael hayden late june 2013 welcomed public debate balance privacy security leaks provoked convinced american people know exactly balance privacy security know comfortable feel september 2013 hayden stressed indisputable legality nsa called snowden troubled young man albeit morally arrogant tremendous degree also said prospects russia suspect end like rest defectors went old soviet union isolated bored lonely depressed -- ended alcoholics speaking university connecticut april 23 2014 former u.s. secretary state hillary clinton insinuated found snowden motives suspicious emerged absconded material puzzled protections whistle-blowers concerned wanted part american debate could said struck as—i honest you—as sort odd would flee china hong kong controlled china would go russia—two countries difficult cyberrelationships put mildly clinton added think turning lot material—intentionally unintentionally—drained gave kinds information big countries networks terrorist groups like hard time thinking somebody champion privacy liberty taken refuge russia putin authority reactions snowden disclosures among members congress initially largely negative speaker house john boehner senators dianne feinstein bill nelson called snowden traitor several senators representatives joined calling snowden arrest prosecution representative thomas massie one members congress question constitutional validity government surveillance programs suggest snowden granted immunity prosecution senators ted cruz rand paul offered tentative support snowden saying reserving judgment snowden information surveillance programs snowden motives known senator paul said think history looks going contrast behavior james clapper national intelligence director edward snowden mr. clapper lied congress defiance law name security mr. snowden told truth name privacy paul later called snowden civil disobedient like martin luther king jr. faced life imprisonment representative john lewis made comparisons snowden gandhi saying leaker appealing higher law senator bill nelson edward snowden amounts act treason similar comments also made rep. peter t. king rep. john boehner sen. dianne feinstein july 25 us senate committee appropriations unanimously adopted amendment senator lindsey graham fiscal year 2014 department state foreign operations related programs appropriations bill would seek sanctions country offers asylum snowden response information release snowden rep. justin amash r-mich. rep. john conyers d-mich. proposed amendment national defense authorization act curtail nsa gathering storage personal records house rejected narrow margin 205–217 amash subsequently told fox news snowden whistle-blower told us need know sunday abc interview show week rep. dutch ruppersberger d-maryland united states house select committee intelligence asked raddatz efforts thwarted trying get information members congress replied ... ince incident occurred snowden 've three different hearings members democratic caucus republican caucus general alexander come deputy chris inglis ask questions people relates information continue 're trying get american public know going ... better educate caucus democratic caucus 're trying declassify much u.s senator john mccain r-az said august 11 edition fox news sunday snowden become hero young americans reminded jason bourne character mccain attributed generation change lack confidence federal government right kind generational change said young americans trust government gordon humphrey conservative republican senator new hampshire 1979–1991 expressed support snowden glenn greenwald revealed humphrey former member senate foreign relations committee contact snowden via email humphrey told snowden provided leaked information would put harms way intelligence agent believe done right thing exposing regard massive violation united states constitution humphrey cited snowden courageous whistle-blower tom mcclintock r-calif came favor amnesty snowden saying think would best american government granted amnesty get back america answer questions without threat prosecution ... good laws sharing secrets broke laws hand broke good reason laws used direct contravention 4th amendment rights americans arizona senator john mccain criticized politicians voted favor patriot act outraged nsa spying phone calls saying passed patriot act passed specific provisions act allowed program take place enacted operation members congress know voting think responsibility lot government glenn greenwald one journalists received documents praised snowden done service revealing surveillance american public john cassidy new yorker called snowden hero said revealing colossal scale us government eavesdropping americans people around world snowden performed great public service outweighs breach trust may committed cnn columnist douglas rushkoff also called snowden leak act heroism amy davidson writing new yorker thankful overdue conversation privacy limits domestic surveillance american political commentators public figures noam chomsky chris hedges michael moore cornel west glenn beck ref name= michael moore/glenn beck /ref matt drudge alex jones andrew napolitano oliver stone michael savage stephen walt praised snowden exposing secret government surveillance commentators critical snowden methods motivations jeffrey toobin example denounced snowden grandiose narcissist deserves prison writing new yorker toobin argued programs exposed illegal therefore snowden whistleblower toobin questioned whether government function employees contractors take upon sabotage programs ’ like editors bloomberg news argued government ought prosecute snowden media focus snowden took attention away issues u.s. government surveillance interpretations patriot act foreign intelligence surveillance act fisa court actions really matters greenwald accused media u.s. focusing edward snowden instead wrongdoing director national intelligence james r. clapper u.s. officials op-ed author alex berenson argued federal government flown representative hong kong ask snowden give testimony front u.s. congress offer fair criminal trial view preventing unintended disclosures classified information countries cybersecurity scholar peter singer divided material disclosed snowden three categories smart useful espionage enemies united states legally questionable activities involved us citizens backdoors fudging policy/law un-strategic stupid actions targeting american allies huge blowback us standing us business postulated differing ways people viewed snowden could explain polarizing singer also spoke double legacy nsa revelations released snowden one hollowed american ability operate effectively ensuring future internet way would hope would huge long-term consequences second hammer-blow american technology companies cloud computing industry example recent estimate 'll lose 36 billion worth business surveys conducted news outlets professional polling organizations found american public opinion divided snowden disclosures polled canada europe supportive snowden respondents u.s june 2013 emnid survey 50 percent germans polled considered snowden hero 35 percent would hide homes october 2013 67 percent canadians polled considered snowden hero 60 percent uk respondents april 2014 uk yougov poll 46 percent british people thought newspapers reporting materials given snowden good society 22 percent thought bad society 31 percent n't know january 1 2014 editorial board new york times praised snowden whistleblower wrote favor granting clemency arguing snowden may broken law done country great service bringing abuses nsa light someone reveals government officials routinely deliberately broken law wrote person face life prison hands government times cast doubt claim made snowden critics damaged national security concluded request president obama discontinue vilification snowden give incentive return home article garnered unusual amount blowback editorial responses multiple media outlets guardian called pardon editorial coincidentally published day saying snowden allowed return home dignity january 4 2014 article peter baker new york times laid polarization opinions throughout u.s. impetus toward clemency gained public reaction snowden revelations yet despite growing backlash government surveillance baker noted calls leniency made little headway white house justice department national security establishment september 2016 editorial board washington post characterized issue whether snowden deserved presidential pardon complicated question president answer editors post credited snowden necessary reforms brought revelations en masse collection telephone data nsa stressed snowden separate leak information agency prism program basically defensible intelligence operations reasons face trial saying snowden hurt credibility avatar freedom accepting asylum russia editors post dismissed calls human-rights organizations clemency snowden noble purposes policy changes resulting leaks urged president pardon snowden despite post responsible publishing leaked material according guardian editorial stunned many american journalists glenn greenwald one journalists snowden initially leaked classified documents characterized post editorial act journalistic treachery cowardice noting post accepted pulitzer prize publishing snowden leaks concerning prism operations mentioned editorial amnesty international met edward snowden moscow mid july 2013 organization said disclosed patently public interest whistleblower actions justified exposed unlawful sweeping surveillance programmes unquestionably interfere individual ’ right privacy states attempt stop person revealing unlawful behaviour flouting international law freedom expression fundamental right widney brown senior director amnesty feared snowden would great risk human rights violations forcibly transferred united states urged country return snowden us michael bochenek director law policy amnesty international deplored us pressure governments block snowden asylum attempts saying unassailable right enshrined international law human rights watch said snowden able raise issue nsa mass surveillance without facing espionage charges would left united states first place human rights watch writes country snowden seeks asylum consider claim fairly protect rights international law recognizes revealing official secrets sometimes justified public interest navi pillay united nations high commissioner human rights said snowden case shown need protect persons disclosing information matters implications human rights well importance ensuring respect right privacy transparency international international association lawyers nuclear arms vereinigung deutscher wissenschaftler awarded snowden german whistleblowerpreis 2013 humanist union awarded fritz bauer prize 2013 daniel ellsberg whistleblower leaker top-secret pentagon papers 1971 stated interview cnn thought snowden done incalculable service country leaks might prevent united states becoming surveillance state said snowden acted sort courage patriotism soldier battle op-ed following morning ellsberg added american history important leak edward snowden release nsa material ... including pentagon papers ray mcgovern retired cia officer turned political activist agreed ellsberg added time today 'm feeling much hopeful democracy feeling time yesterday william binney whistleblower disclosed details nsa mass surveillance activities said snowden performed really great public service begin exposing programs making government sense publicly accountable 're snowden cited conversation reliable source allegations us hacking china binney felt transitioning whistle-blower traitor thomas drake former senior executive nsa whistleblower said feels extraordinary kinship snowden magnificent act civil disobedience exposing inner workings surveillance state public interest truly wikileaks founder julian assange hailed snowden hero exposed one serious events decade – creeping formulation mass surveillance state charges snowden revealed assange released statement asking people step forward stand snowden following president obama assurances changes planned nsa surveillance program assange said written statement obama validated edward snowden role whistle-blower shamai leibowitz leaked details fbi operation said legal threats smear campaign snowden grave mistake government really wanted keep secrets coming would well let man conscience go live life country october 2013 four us whistleblowers activists visited moscow present snowden award truth-telling titled sam adams award integrity intelligence thomas drake one presenters told reporters event us unchained constitution banning real law using secret law secret interpretations law explained snowden escape us ensure chance freedom claiming us made snowden stateless revoking passport russia leading temporary asylum country drake praised russia saying actually recognized international law granted political asylum
node26:Wikipedia entry. Entry name: Finjan. Entry content: finjan finjan holdings finjan publicly traded company nasdaq fnjn centers licensing intellectual property finjan claims patented technology used enterprise web security solutions finjan filed large number lawsuits leading software security companies asserting patents including cisco palo alto networks symantec blue coat systems sophos trend micro eset bitdefender check point qualys rapid7 fortinet others finjan named patent troll original hardware software divisions finjan acquired m86 security 2009 finjan continues hold patents various web security technologies licenses patents trustwave formerly m86 among others finjan commitment innovation security space continues investments culminated recent launch finjan consulting services business cyberisk development mobile applications consumer subsidiary finjan mobile incubation up-and-coming technology startups pioneering new generation security technologies company investment jerusalem venture partners jvp fund vii cyber labs invested alongside companies like cisco technology companies company headquartered east palo alto california finjan founded 1997 shlomo touboul serial entrepreneur founded first company shani computers 1985 sold intel 1994 worked intel starting finjan 1998 touboul decided bring experienced seasoned ceo would able develop grow company quickly left start venture capital fund 2001 company ran financial difficulties touboul asked board directors rejoin company ceo touboul realigned company strategy moving away developing software solutions combined hardware software security appliances additionally company moved channel sales model december 2002 finjan acquired assets alchemedia software developer drm product called clever content several drm patents alchemedia also ties israel founder daniel schreiber israeli though company technically headquartered dallas area 2005 following disagreements board touboul left started new company yoggie security systems october 2007 eric benhamou former ceo chairman 3com appointed chairman finjan also invested company venture capital fund benhamou global ventures november 2009 hardware software divisions finjan sold m86 security global computer security firm based orange california international headquarters london offices worldwide m86 subsequently acquired trustwave still use finjan technology patents licensing agreement finjan appliances sold trustwave secure web gateway june 2013 finjan became publicly traded company capitalized 30m installed new management team began focused program license company landmark intellectual property may 2014 finjan listed nasdaq capital market trading symbol fnjn continue trade today finjan initial shareholders included cisco microsoft bessemer venture partners benchmark capital harbourvest partners israel seed partners november 2008 company secured additional investment 22m brought total capital invested finjan since founding 67 million june 2013 finjan became publicly traded company capitalized 30m installed new management team began focused program license company landmark intellectual property may 2014 finjan listed nasdaq capital market trading symbol fnjn finjan claims invented concept proactive content security behavior-based content analysis technology claim shared others selected technology patents licensed microsoft july 2005 april 2009 finjan intellectual property portfolio included granted pending patents areas behavior-based security digital rights management finjan portfolio includes processes enable networks execute security plans counteract effects polymorphic code designed hide malware
node27:Wikipedia entry. Entry name: Actiance. Entry content: actiance actiance inc formerly known facetime communications american-based multinational corporation develops platforms required enable security management compliance unified communications web 2.0 social media channels headquartered redwood city california actiance supports leading social networks unified communications providers instant messaging platforms including facebook linkedin twitter aol google yahoo skype microsoft ibm cisco established 1997 actiance provided call center crm enablement instant messaging web chat email working closely aol yahoo msn microsoft actiance established industry first cap agreements certified access programs providing enhanced access public im networks 2000 actiance awarded innovative use real-time collaboration microsoft exchange conference 2001 company launched first compliance security solution im networks im auditor aimed specifically financial services sector needed comply government regulations enabled financial services organizations ability leverage power public instant messaging networks aol microsoft yahoo time-sensitive communications ensuring administrative controls place comply government regulations 2003 50 top 100 financial services firms worldwide needed comply securities exchange commission nasd record retention supervisory requirements using im auditor whilst others still questioning whether im place business networks actiance introduced first network appliance control use im enterprise 2004 capable preventing unauthorized im connections stopping peer-to-peer p2p filesharing sites kazaa grokster morpheus real time guardian rtg identified controlled access growing number applications traversed network without department ’ knowledge actiance continued add features rtg including support unified communication platforms microsoft office communications server ibm lotus sametime 2005 response growing threat worms spyware traversing im networks zero day defence system added 2008 actiance added new capabilities rtg ’ successor unified security gateway usg providing managers management security control 140 social networking sites 20,000 individual facebook widgets 400 web real-time applications making usg first secure web gateway combine content monitoring management security web 2.0 applications social networks instant messaging unified communications url filtering malware web antivirus protection 2010 saw another first actiance launched vantage imauditor ’ successor included stringent security compliance controls skype enterprise vantage provides granular security policy controls compliance features real time unified communications uc – providing management widest variety uc real time communications platforms including microsoft office communications server ibm lotus sametime public instant messaging platforms windows live skype web conferencing industry focused networks like reuters bloomberg yellowjacket later year include support microsoft lync server also 2010 actiance launched socialite enable security management compliance solution enterprises using social networks socialite provides granular control applications facebook linkedin twitter allows organisations comply regulatory compliance demanded organizations financial industry regulatory authority finra financial services authority available software-as-a-service deployment saas on-premises installation module usg socialite enable allows organizations control social media features communications users corporate network situated remotely january 2011 facetime communications announced changed name actiance following purchase facetime brand apple june 2011 actiance announced socialite engage new platform allows distributed teams share content engage clients prospects analyze impact content social media sites designed specifically enable investment insurance professionals distribute pre-approved content socialite engage enables organization manage social media secure compliant environment allowing users see glance content impact also leverages third party data sources internal systems data feeds highlights channels effective identifies potential sales leads
node28:Wikipedia entry. Entry name: RiskIQ. Entry content: riskiq riskiq cyber security company based san francisco california provides cloud-based software service saas organizations detect phishing fraud malware online security threats company co-founded 2009 lou manousos chris kiernan david pon received 10 million series funding summit partners february 2013 25 million series b funding battery ventures may 2014 riskiq member cloud security alliance csa isaca riskiq monitors advertising networks malware malvertising spyware also provides mobile app security services may 2018 standard bank deployed riskiq software automate threat analysis brand infringement cybercrime web-based attacks digital presence",wikics,nc
"Classify the wikipedia page represented by node15 using its subgraph data (text attributes and connections) as follows.

node0: Dan Kaminsky discovered DNS cache poisoning, worked on DNSSEC, exposed Sony rootkit, and influenced DNS security fixes amid community debates.  
node1: Wireshark (formerly Ethereal) is an open-source packet analyzer for network troubleshooting, cross-platform with GUI, using pcap for capturing and dissecting traffic.  
node2: Lists and compares packet analyzer software, highlighting features, licenses, and supported OSes for network analysis tools.  
node3: Virtual printers simulate physical printers to convert documents into digital files, used for spooling or file transfer in systems like B5500 MCP and IBM VM/370.  
node4: Catalogs backup software, excluding archivers/version tools; notes inactive projects and focuses on data protection solutions.  
node5: Metasploit Project (Rapid7-owned) provides open-source exploit development, penetration testing tools, and integrates with frameworks like Kali Linux.  
node6: Hydra is a parallel login cracker supporting protocols like SSH, FTP, HTTP, and MySQL for brute-force authentication attacks.  
node7: Explains computer data storage hierarchy (primary/secondary), technologies (RAM, SSD, HDD), volatility, and data encoding/error detection methods.  
node8: SystemBuilder/SB+ is a 4GL development environment for U2 database systems, evolved from Pick OS, now under Rocket Software with GUI and server tools.
node9: C programming language developed by Dennis Ritchie, featuring static typing, low-level memory access, ANSI standardization, and wide system/application use.  
node10: Vulnerability scanner detects system weaknesses via authenticated/unauthenticated scans, custom reports, aiding cybersecurity compliance.  
node11: Zathura is a lightweight Linux document viewer with vi-like keys, supporting PDF/PS/DJVU, syncTeX, customization, and tabbed browsing.  
node12: Windows Server 2003, released 2003, offered business-focused editions with security updates, ending support in 2015, succeeded by Windows Server 2008.  
node13: CINT is a C/C++ interpreter for ROOT, offering shell features and partial C++ support, later replaced by Cling.
node14: Microsoft's 2018 server OS with data-loss upgrade issues, re-released 2018, part of Windows NT family, includes Version 1809 fixes.  
node15: Tenable's proprietary vulnerability scanner, scans tech infrastructures, offers compliance audits, free/paid versions, started open-source in 1998.  
node16: End-to-end encryption for messaging/calls, uses Double Ratchet Algorithm, adopted by WhatsApp and Facebook, developed by Open Whisper Systems.  
node17: IBM PC emulator for retro OS/hardware, supports diverse systems via MAME, unofficial builds extend compatibility, requires modern processors.  
node18: Free Kaspersky-engine antivirus (2007 retired), real-time scanning, replaced by McAfee, faced compatibility issues.  
node19: Identifies services on open ports, aids vulnerability scans, works with tools like Nmap, detects non-standard port services.  
node20: Windows exception handling mechanisms, SEH uses __try/__except, VEH offers higher priority handlers, managed via Win32 APIs.  
node21: From 1985 MS-DOS shell to Windows 10, spans consumer/server OSes, dominant PC market, faced security criticisms, cross-platform adaptations.  
node22: Open-source TCP/IP-based data sampling protocol, used on Linux/Windows, supports async/sync transmission.  
node23: HPC API for parallel apps, enables PGAS model, asynchronous comms, fault tolerance, developed since 2005 for scalable systems.
node24: Overview of operating systems, their types (real-time, embedded), components (kernel, file systems), history, and roles in managing hardware/software resources across devices.  
node25: List of security assessment tools and software/hardware suites used for evaluating and testing system security across different operating environments.  
node26: Microsoft's Windows IoT family, evolved from Windows Embedded, includes subfamilies like IoT Core and Enterprise, targeting embedded/IoT devices with OS variants for diverse hardware.  
node27: Webroot's discontinued security suite (2011) offering antivirus, firewall, and mobile protection; replaced by SecureAnywhere, lacked parental controls.
node28: Security tool SATAN scans networks for vulnerabilities, developed in the 1990s, later replaced by tools like Nmap.  
node29: Ghostscript interprets PostScript/PDF, used for rasterization, conversion, and as a backend. Open-sourced, ported widely, with license changes over time.  
node30: Syntactic sugar enhances code readability without adding functionality; debated for simplifying code vs. complicating specifications. Originated from Landin, includes examples like array syntax.

the connection relationship among the nodes mentioned:
 <node0, node15>,<node1, node2>,<node1, node9>,<node1, node15>,<node1, node21>,<node1, node24>,<node1, node25>,<node2, node21>,<node2, node24>,<node3, node29>,<node4, node9>,<node5, node10>,<node5, node15>,<node5, node21>,<node5, node24>,<node5, node25>,<node6, node9>,<node6, node15>,<node6, node24>,<node7, node9>,<node7, node24>,<node8, node21>,<node9, node11>,<node9, node13>,<node9, node16>,<node9, node17>,<node9, node21>,<node9, node22>,<node9, node24>,<node9, node29>,<node9, node30>,<node10, node15>,<node10, node19>,<node10, node25>,<node11, node24>,<node12, node14>,<node12, node21>,<node12, node24>,<node12, node26>,<node14, node21>,<node14, node24>,<node14, node26>,<node15, node19>,<node15, node21>,<node15, node24>,<node15, node25>,<node15, node28>,<node17, node21>,<node17, node24>,<node18, node21>,<node18, node24>,<node20, node21>,<node20, node24>,<node21, node22>,<node21, node24>,<node21, node26>,<node21, node27>,<node21, node29>,<node23, node24>,<node24, node26>,<node24, node27>,<node24, node28>,<node24, node29>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",computer security,"node0: Dan Kaminsky discovered DNS cache poisoning, worked on DNSSEC, exposed Sony rootkit, and influenced DNS security fixes amid community debates.  
node1: Wireshark (formerly Ethereal) is an open-source packet analyzer for network troubleshooting, cross-platform with GUI, using pcap for capturing and dissecting traffic.  
node2: Lists and compares packet analyzer software, highlighting features, licenses, and supported OSes for network analysis tools.  
node3: Virtual printers simulate physical printers to convert documents into digital files, used for spooling or file transfer in systems like B5500 MCP and IBM VM/370.  
node4: Catalogs backup software, excluding archivers/version tools; notes inactive projects and focuses on data protection solutions.  
node5: Metasploit Project (Rapid7-owned) provides open-source exploit development, penetration testing tools, and integrates with frameworks like Kali Linux.  
node6: Hydra is a parallel login cracker supporting protocols like SSH, FTP, HTTP, and MySQL for brute-force authentication attacks.  
node7: Explains computer data storage hierarchy (primary/secondary), technologies (RAM, SSD, HDD), volatility, and data encoding/error detection methods.  
node8: SystemBuilder/SB+ is a 4GL development environment for U2 database systems, evolved from Pick OS, now under Rocket Software with GUI and server tools.
node9: C programming language developed by Dennis Ritchie, featuring static typing, low-level memory access, ANSI standardization, and wide system/application use.  
node10: Vulnerability scanner detects system weaknesses via authenticated/unauthenticated scans, custom reports, aiding cybersecurity compliance.  
node11: Zathura is a lightweight Linux document viewer with vi-like keys, supporting PDF/PS/DJVU, syncTeX, customization, and tabbed browsing.  
node12: Windows Server 2003, released 2003, offered business-focused editions with security updates, ending support in 2015, succeeded by Windows Server 2008.  
node13: CINT is a C/C++ interpreter for ROOT, offering shell features and partial C++ support, later replaced by Cling.
node14: Microsoft's 2018 server OS with data-loss upgrade issues, re-released 2018, part of Windows NT family, includes Version 1809 fixes.  
node15: Tenable's proprietary vulnerability scanner, scans tech infrastructures, offers compliance audits, free/paid versions, started open-source in 1998.  
node16: End-to-end encryption for messaging/calls, uses Double Ratchet Algorithm, adopted by WhatsApp and Facebook, developed by Open Whisper Systems.  
node17: IBM PC emulator for retro OS/hardware, supports diverse systems via MAME, unofficial builds extend compatibility, requires modern processors.  
node18: Free Kaspersky-engine antivirus (2007 retired), real-time scanning, replaced by McAfee, faced compatibility issues.  
node19: Identifies services on open ports, aids vulnerability scans, works with tools like Nmap, detects non-standard port services.  
node20: Windows exception handling mechanisms, SEH uses __try/__except, VEH offers higher priority handlers, managed via Win32 APIs.  
node21: From 1985 MS-DOS shell to Windows 10, spans consumer/server OSes, dominant PC market, faced security criticisms, cross-platform adaptations.  
node22: Open-source TCP/IP-based data sampling protocol, used on Linux/Windows, supports async/sync transmission.  
node23: HPC API for parallel apps, enables PGAS model, asynchronous comms, fault tolerance, developed since 2005 for scalable systems.
node24: Overview of operating systems, their types (real-time, embedded), components (kernel, file systems), history, and roles in managing hardware/software resources across devices.  
node25: List of security assessment tools and software/hardware suites used for evaluating and testing system security across different operating environments.  
node26: Microsoft's Windows IoT family, evolved from Windows Embedded, includes subfamilies like IoT Core and Enterprise, targeting embedded/IoT devices with OS variants for diverse hardware.  
node27: Webroot's discontinued security suite (2011) offering antivirus, firewall, and mobile protection; replaced by SecureAnywhere, lacked parental controls.
node28: Security tool SATAN scans networks for vulnerabilities, developed in the 1990s, later replaced by tools like Nmap.  
node29: Ghostscript interprets PostScript/PDF, used for rasterization, conversion, and as a backend. Open-sourced, ported widely, with license changes over time.  
node30: Syntactic sugar enhances code readability without adding functionality; debated for simplifying code vs. complicating specifications. Originated from Landin, includes examples like array syntax.","node0:Wikipedia entry. Entry name: Dan_Kaminsky. Entry content: dan kaminsky dan kaminsky american security researcher chief scientist white ops firm specializing detecting malware activity via javascript worked cisco avaya ioactive director penetration testing known among computer security experts work dns cache poisoning showing sony rootkit infected least 568,200 computers talks black hat briefings june 2010 kaminsky released interpolique beta framework addressing injection attacks sql injection cross-site scripting manner comfortable developers june 16 2010 named icann one trusted community representatives dnssec root july 2008 cert coordination center announced kaminsky discovered fundamental flaw domain name system dns protocol flaw could allow attackers easily perform cache poisoning attacks nameservers djbdns powerdns maradns secure64 unbound vulnerable internet-based applications depending dns locate peers wide range attacks became feasible including web site impersonation email interception authentication bypass via forgot password feature many popular websites kaminsky worked dns vendors secret develop patch make exploiting vulnerability difficult releasing july 8 2008 vulnerability fully fixed design flaw dns kaminsky intended publicize details attack 30 days release patch details leaked july 21 2008 information quickly pulled mirrored others kaminsky received substantial amount mainstream press disclosing vulnerability experienced backlash computer security community immediately disclosing attack actual vulnerability related dns 65,536 possible transaction ids number small enough simply guess given enough opportunities dan bernstein author djbdns reported early 1999. djbdns dealt issue using source port randomization udp port used second transaction identifier thus raising possible id count billions popular name server implementations left issue unresolved due concerns performance stability many operating system kernels simply n't designed cycle thousands network sockets second instead implementers assumed dns time live ttl field would limit guesser attempts day kaminsky attack bypassed ttl defense targeting sibling names like 83.example.com instead www.example.com directly name unique entry cache thus ttl name sibling transaction-id guessing spoofed response could include information target well using many sibling names row could induce dns server make many requests provided enough opportunities guess transaction id successfully spoof reply reasonable amount time fix major dns servers implemented source port randomization djbdns powerdns fix widely seen stopgap measure makes attack 65,536 times harder attacker willing send billions packets still corrupt names dnssec proposed way bring cryptographic assurance results provided dns kaminsky spoken favor sony bmg cd copy protection scandal kaminsky used dns cache snooping find whether servers recently contacted domains accessed sony rootkit used technique estimate least 568,200 networks computers rootkit april 2008 kaminsky realized growing practice among isps potentially represented security vulnerability various isps experimented intercepting return messages non-existent domain names replacing advertising content could allow hackers set phishing schemes attacking server responsible advertisements linking non-existent subdomains targeted websites kaminsky demonstrated process setting rickrolls facebook paypal vulnerability used initially depended part earthlink using barefruit provide advertising kaminsky able generalize vulnerability attack verizon attacking ad provider paxfire kaminsky went public working ad networks question eliminate immediate cross-site scripting vulnerability march 27 2009 kaminsky discovered conficker-infected hosts detectable signature scanned remotely signature updates number network scanning applications available including nmap nessus 2009 cooperation meredith l. patterson len sassaman kaminsky discovered numerous flaws ssl protocol include use weak md2 hash function verisign one root certificates errors certificate parsers number web browsers allow attackers successfully request certificates sites n't control july 28 2009 kaminsky along several high-profile security consultants experienced publication personal email server data hackers associated zero 0wned online magazine attack appeared designed coincide kaminsky appearance black hat briefings def con conferences
node1:Wikipedia entry. Entry name: Wireshark. Entry content: wireshark wireshark free open-source packet analyzer used network troubleshooting analysis software communications protocol development education originally named ethereal project renamed wireshark may 2006 due trademark issues wireshark cross-platform using qt widget toolkit current releases implement user interface using pcap capture packets runs linux macos bsd solaris unix-like operating systems microsoft windows also terminal-based non-gui version called tshark wireshark programs distributed tshark free software released terms gnu general public license wireshark similar tcpdump graphical front-end plus integrated sorting filtering options wireshark lets user put network interface controllers promiscuous mode supported network interface controller see traffic visible interface including unicast traffic sent network interface controller mac address however capturing packet analyzer promiscuous mode port network switch traffic switch necessarily sent port capture done capturing promiscuous mode necessarily sufficient see network traffic port mirroring various network taps extend capture point network simple passive taps extremely resistant tampering gnu/linux bsd macos libpcap 1.0.0 later wireshark 1.4 later also put wireless network interface controllers monitor mode remote machine captures packets sends captured packets machine running wireshark using tzsp protocol protocol used omnipeek wireshark dissects packets analyze packets captured remote machine time captured late 1990s gerald combs computer science graduate university missouri–kansas city working small internet service provider commercial protocol analysis products time priced around 1500 run company primary platforms solaris linux gerald began writing ethereal released first version around 1998 ethereal trademark owned network integration services may 2006 combs accepted job cace technologies combs still held copyright ethereal source code rest re-distributable gnu gpl used contents ethereal subversion repository basis wireshark repository however ethereal trademark changed name wireshark 2010 riverbed technology purchased cace took primary sponsor wireshark ethereal development ceased ethereal security advisory recommended switching wireshark wireshark several industry awards years including eweek infoworld pc magazine also top-rated packet sniffer insecure.org network security tools survey sourceforge project month august 2010 combs continues maintain overall code wireshark issue releases new versions software product website lists 600 additional contributing authors wireshark data capturing program understands structure encapsulation different networking protocols parse display fields along meanings specified different networking protocols wireshark uses pcap capture packets capture packets types networks pcap supports wireshark native network trace file format libpcap format supported libpcap winpcap exchange captured network traces applications use format including tcpdump ca netmaster also read captures network analyzers snoop network general sniffer microsoft network monitor capturing raw network traffic interface requires elevated privileges platforms reason older versions ethereal/wireshark tethereal/tshark often ran superuser privileges taking account huge number protocol dissectors called traffic captured pose serious security risk given possibility bug dissector due rather large number vulnerabilities past many allowed remote code execution developers doubts better future development openbsd removed ethereal ports tree prior openbsd 3.6 elevated privileges needed operations example alternative run tcpdump dumpcap utility comes wireshark superuser privileges capture packets file later analyze packets running wireshark restricted privileges emulate near realtime analysis captured file may merged mergecap growing file processed wireshark wireless networks possible use aircrack wireless security tools capture ieee 802.11 frames read resulting dump files wireshark wireshark 0.99.7 wireshark tshark run dumpcap perform traffic capture platforms require special privileges capture traffic need dumpcap run privileges neither wireshark tshark need run special privileges wireshark color packets based rules match particular fields packets help user identify types traffic glance default set rules provided users change existing rules coloring packets add new rules remove rules wireshark also used capture packets network simulation tools ns opnet modeler netsim
node2:Wikipedia entry. Entry name: Comparison_of_packet_analyzers. Entry content: comparison packet analyzers following tables compare general technical information several packet analyzer software utilities also known network analyzers packet sniffers please see individual products articles information basic general information software—creator/company license/price etc utilities run operating systems
node3:Wikipedia entry. Entry name: Virtual_printer. Entry content: virtual printer computing virtual printer simulated device whose user interface api resemble printer driver connected physical computer printer document printed virtual printer instead physically printing paper material underlying software processes images pages way often resulting file produced images transmitted early 1960s b5500 master control program mcp operating system included virtual printers called printer backups form printer backup tapes pbt printer backup disks pbd ibm vm/370 operating system allows users spool virtual printer punch file another user read input provides basic means file transfer typical uses virtual printers include
node4:Wikipedia entry. Entry name: List_of_backup_software. Entry content: list backup software list backup software performs data backups archivers transfer protocols version control systems often used backups software focused backup listed see comparison backup software features systems listed light purple background longer active development
node5:Wikipedia entry. Entry name: Metasploit_Project. Entry content: metasploit project metasploit project computer security project provides information security vulnerabilities aids penetration testing ids signature development owned boston massachusetts-based security company rapid7 best-known sub-project open-source metasploit framework tool developing executing exploit code remote target machine important sub-projects include opcode database shellcode archive related research metasploit project includes anti-forensic evasion tools built metasploit framework metasploit pre-installed kali linux operating system metasploit created h. d. moore 2003 portable network tool using perl 2007 metasploit framework completely rewritten ruby october 21 2009 metasploit project announced acquired rapid7 security company provides unified vulnerability management solutions like comparable commercial products immunity canvas core security technologies core impact metasploit used test vulnerability computer systems break remote systems like many information security tools metasploit used legitimate unauthorized activities since acquisition metasploit framework rapid7 added two open core proprietary editions called metasploit express metasploit pro metasploit emerging position de facto exploit development framework led release software vulnerability advisories often accompanied third party metasploit exploit module highlights exploitability risk remediation particular bug metasploit 3.0 began include fuzzing tools used discover software vulnerabilities rather exploits known bugs avenue seen integration lorcon wireless 802.11 toolset metasploit 3.0 november 2006 metasploit 4.0 released august 2011 basic steps exploiting system using framework include modular approach – allowing combination exploit payload – major advantage framework facilitates tasks attackers exploit writers payload writers metasploit runs unix including linux mac os x windows metasploit framework extended use add-ons multiple languages choose exploit payload information target system needed operating system version installed network services information gleaned port scanning os fingerprinting tools nmap vulnerability scanners nexpose nessus openvas detect target system vulnerabilities metasploit import vulnerability scanner data compare identified vulnerabilities existing exploit modules accurate exploitation several interfaces metasploit available popular maintained rapid7 strategic cyber llc free version contains command line interface third-party import manual exploitation manual brute forcing free version metasploit project also includes zenmap well known ports-scanner compiler ruby language version metasploit written october 2011 rapid7 released metasploit community edition free web-based user interface metasploit metasploit community based commercial functionality paid-for editions reduced set features including network discovery module browsing manual exploitation metasploit community included main installer april 2010 rapid7 released metasploit express open-core commercial edition security teams need verify vulnerabilities offers graphical user interface integrates nmap discovery adds smart bruteforcing well automated evidence collection october 2010 rapid7 added metasploit pro open-core commercial metasploit edition penetration testers metasploit pro adds onto metasploit express features quick start wizards/metamodules building managing social engineering campaigns web application testing advanced pro console dynamic payloads anti-virus evasion integration nexpose ad-hoc vulnerability scans vpn pivoting armitage graphical cyber attack management tool metasploit project visualizes targets recommends exploits free open source network security tool notable contributions red team collaboration allowing shared sessions data communication single metasploit instance cobalt strike collection threat emulation tools provided strategic cyber llc work metasploit framework cobalt strike includes features armitage adds post-exploitation tools addition report generation features metasploit currently 1894 exploits organized following platforms aix android bsd bsdi cisco firefox freebsd hpux irix java javascript linux mainframe multi applicable multiple platforms netbsd netware nodejs openbsd osx php python r ruby solaris unix windows metasploit currently 547 payloads metasploit framework operates open-source project accepts contributions community github.com pull requests submissions reviewed team consisting rapid7 employees senior external contributors majority contributions add new modules exploits scanners list original developers
node6:Wikipedia entry. Entry name: Hydra_(software). Entry content: hydra software hydra parallized network logon cracker hydra supports many common login protocols like forms websites ftp smb pop3 imap mysql vnc ssh many others sample output debian environment
node7:Wikipedia entry. Entry name: Computer_data_storage. Entry content: computer data storage digvijay singh computer data storage often called storage memory technology consisting computer components recording media used retain digital data core function fundamental component computers central processing unit cpu computer manipulates data performing computations practice almost computers use storage hierarchy puts fast expensive small storage options close cpu slower larger cheaper options farther away generally fast volatile technologies lose data power referred memory slower persistent technologies referred storage even first computer designs charles babbage analytical engine percy ludgate analytical machine clearly distinguished processing memory babbage stored numbers rotations gears ludgate stored numbers displacements rods shuttles distinction extended von neumann architecture cpu consists two main parts control unit arithmetic logic unit alu former controls flow data cpu memory latter performs arithmetic logical operations data without significant amount memory computer would merely able perform fixed operations immediately output result would reconfigured change behavior acceptable devices desk calculators digital signal processors specialized devices von neumann machines differ memory store operating instructions data computers versatile need hardware reconfigured new program simply reprogrammed new in-memory instructions also tend simpler design relatively simple processor may keep state successive computations build complex procedural results modern computers von neumann machines modern digital computer represents data using binary numeral system text numbers pictures audio nearly form information converted string bits binary digits value 1 0 common unit storage byte equal 8 bits piece information handled computer device whose storage space large enough accommodate binary representation piece information simply data example complete works shakespeare 1250 pages print stored five megabytes 40 million bits one byte per character data encoded assigning bit pattern character digit multimedia object many standards exist encoding e.g. character encodings like ascii image encodings like jpeg video encodings like mpeg-4 adding bits encoded unit redundancy allows computer detect errors coded data correct based mathematical algorithms errors generally occur low probabilities due random bit value flipping physical bit fatigue loss physical bit storage ability maintain distinguishable value 0 1 due errors inter intra-computer communication random bit flip e.g. due random radiation typically corrected upon detection bit group malfunctioning physical bits always specific defective bit known group definition depends specific storage device typically automatically fenced-out taken use device replaced another functioning equivalent group device corrected bit values restored possible cyclic redundancy check crc method typically used communications storage error detection detected error retried data compression methods allow many cases database represent string bits shorter bit string compress reconstruct original string decompress needed utilizes substantially less storage tens percents many types data cost computation compress decompress needed analysis trade-off storage cost saving costs related computations possible delays data availability done deciding whether keep certain data compressed security reasons certain types data e.g. credit-card information may kept encrypted storage prevent possibility unauthorized information reconstruction chunks storage snapshots generally lower storage hierarchy lesser bandwidth greater access latency cpu traditional division storage primary secondary tertiary off-line storage also guided cost per bit contemporary usage memory usually semiconductor storage read-write random-access memory typically dram dynamic ram forms fast temporary storage storage consists storage devices media directly accessible cpu secondary tertiary storage typically hard disk drives optical disc drives devices slower ram non-volatile retaining contents powered historically memory called core memory main memory real storage internal memory meanwhile non-volatile storage devices referred secondary storage external memory auxiliary/peripheral storage primary storage also known main memory internal memory prime memory often referred simply memory one directly accessible cpu cpu continuously reads instructions stored executes required data actively operated also stored uniform manner historically early computers used delay lines williams tubes rotating magnetic drums primary storage 1954 unreliable methods mostly replaced magnetic core memory core memory remained dominant 1970s advances integrated circuit technology allowed semiconductor memory become economically competitive led modern random-access memory ram small-sized light quite expensive time particular types ram used primary storage also volatile i.e lose information powered shown diagram traditionally two sub-layers primary storage besides main large-capacity ram main memory directly indirectly connected central processing unit via memory bus actually two buses diagram address bus data bus cpu firstly sends number address bus number called memory address indicates desired location data reads writes data memory cells using data bus additionally memory management unit mmu small device cpu ram recalculating actual memory address example provide abstraction virtual memory tasks ram types used primary storage volatile uninitialized start computer containing storage would source read instructions order start computer hence non-volatile primary storage containing small startup program bios used bootstrap computer read larger program non-volatile secondary storage ram start execute non-volatile technology used purpose called rom read-only memory terminology may somewhat confusing rom types also capable random access many types rom literally read updates possible however slow memory must erased large portions re-written embedded systems run programs directly rom similar programs rarely changed standard computers store non-rudimentary programs rom rather use large capacities secondary storage non-volatile well costly recently primary storage secondary storage uses refer historically called respectively secondary storage tertiary storage secondary storage also known external memory auxiliary storage differs primary storage directly accessible cpu computer usually uses input/output channels access secondary storage transfer desired data primary storage secondary storage non-volatile retaining data power shut modern computer systems typically two orders magnitude secondary storage primary storage secondary storage less expensive modern computers hard disk drives hdds solid-state drives ssds usually used secondary storage access time per byte hdds ssds typically measured milliseconds one thousandth seconds access time per byte primary storage measured nanoseconds one billionth seconds thus secondary storage significantly slower primary storage rotating optical storage devices cd dvd drives even longer access times examples secondary storage technologies include usb flash drives floppy disks magnetic tape paper tape punched cards ram disks disk read/write head hdds reaches proper placement data subsequent data track fast access reduce seek time rotational latency data transferred disks large contiguous blocks sequential block access disks orders magnitude faster random access many sophisticated paradigms developed design efficient algorithms based upon sequential block access another way reduce i/o bottleneck use multiple disks parallel order increase bandwidth primary secondary memory secondary storage often formatted according file system format provides abstraction necessary organize data files directories also providing metadata describing owner certain file access time access permissions information computer operating systems use concept virtual memory allowing utilization primary storage capacity physically available system primary memory fills system moves least-used chunks pages swap file page file secondary storage retrieving later needed lot pages moved slower secondary storage system performance degraded tertiary storage tertiary memory level secondary storage typically involves robotic mechanism mount insert dismount removable mass storage media storage device according system demands data often copied secondary storage use primarily used archiving rarely accessed information since much slower secondary storage e.g 5–60 seconds vs. 1–10 milliseconds primarily useful extraordinarily large data stores accessed without human operators typical examples include tape libraries optical jukeboxes computer needs read information tertiary storage first consult catalog database determine tape disc contains information next computer instruct robotic arm fetch medium place drive computer finished reading information robotic arm return medium place library tertiary storage also known nearline storage near online formal distinction online nearline offline storage example always-on spinning hard disk drives online storage spinning drives spin automatically massive arrays idle disks maid nearline storage removable media tape cartridges automatically loaded tape libraries nearline storage tape cartridges must manually loaded offline storage off-line storage computer data storage medium device control processing unit medium recorded usually secondary tertiary storage device physically removed disconnected must inserted connected human operator computer access unlike tertiary storage accessed without human interaction off-line storage used transfer information since detached medium easily physically transported additionally case disaster example fire destroys original data medium remote location probably unaffected enabling disaster recovery off-line storage increases general information security since physically inaccessible computer data confidentiality integrity affected computer-based attack techniques also information stored archival purposes rarely accessed off-line storage less expensive tertiary storage modern personal computers secondary tertiary storage media also used off-line storage optical discs flash memory devices popular much lesser extent removable hard disk drives enterprise uses magnetic tape predominant older examples floppy disks zip disks punched cards storage technologies levels storage hierarchy differentiated evaluating certain core characteristics well measuring characteristics specific particular implementation core characteristics volatility mutability accessibility addressability particular implementation storage technology characteristics worth measuring capacity performance non-volatile memory retains stored information even constantly supplied electric power suitable long-term storage information volatile memory requires constant power maintain stored information fastest memory technologies volatile ones although universal rule since primary storage required fast predominantly uses volatile memory dynamic random-access memory form volatile memory also requires stored information periodically reread rewritten refreshed otherwise would vanish static random-access memory form volatile memory similar dram exception never needs refreshed long power applied loses content power supply lost uninterruptible power supply ups used give computer brief window time move information primary volatile storage non-volatile storage batteries exhausted systems example emc symmetrix integrated batteries maintain volatile storage several minutes utilities hdparm sar used measure io performance linux full disk encryption volume virtual disk encryption andor file/folder encryption readily available storage devices hardware memory encryption available intel architecture supporting total memory encryption tme page granular memory encryption multiple keys mktme sparc m7 generation since october 2015.. commonly used data storage media semiconductor magnetic optical paper still sees limited usage fundamental storage technologies all-flash arrays afas proposed development semiconductor memory uses semiconductor-based integrated circuits store information semiconductor memory chip may contain millions tiny transistors capacitors volatile non-volatile forms semiconductor memory exist modern computers primary storage almost exclusively consists dynamic volatile semiconductor memory dynamic random-access memory since turn century type non-volatile semiconductor memory known flash memory steadily gained share off-line storage home computers non-volatile semiconductor memory also used secondary storage various advanced electronic devices specialized computers designed early 2006 notebook desktop computer manufacturers started using flash-based solid-state drives ssds default configuration options secondary storage either addition instead traditional hdd magnetic storage uses different patterns magnetization magnetically coated surface store information magnetic storage non-volatile information accessed using one read/write heads may contain one recording transducers read/write head covers part surface head medium must moved relative another order access data modern computers magnetic storage take forms early computers magnetic storage also used optical storage typical optical disc stores information deformities surface circular disc reads information illuminating surface laser diode observing reflection optical disc storage non-volatile deformities may permanent read media formed write media reversible recordable read/write media following forms currently common use magneto-optical disc storage optical disc storage magnetic state ferromagnetic surface stores information information read optically written combining magnetic optical methods magneto-optical disc storage non-volatile sequential access slow write fast read storage used tertiary off-line storage 3d optical data storage also proposed light induced magnetization melting magnetic photoconductors also proposed high-speed low-energy consumption magneto-optical storage paper data storage typically form paper tape punched cards long used store information automatic processing particularly general-purpose computers existed information recorded punching holes paper cardboard medium read mechanically later optically determine whether particular location medium solid contained hole technologies allow people make marks paper easily read machine—these widely used tabulating votes grading standardized tests barcodes made possible object sold transported computer readable information securely attached group bits malfunction may resolved error detection correction mechanisms see storage device malfunction requires different solutions following solutions commonly used valid storage devices device mirroring typical raid designed handle single device failure raid group devices however second failure occurs raid group completely repaired first failure data lost probability single failure typically small thus probability two failures raid group time proximity much smaller approximately probability squared i.e. multiplied database tolerate even smaller probability data loss raid group replicated mirrored many cases mirroring done geographically remotely different storage array handle also recovery disasters see disaster recovery secondary tertiary storage may connect computer utilizing computer networks concept pertain primary storage shared multiple processors lesser degree large quantities individual magnetic tapes optical magneto-optical discs may stored robotic tertiary storage devices tape storage field known tape libraries optical storage field optical jukeboxes optical disk libraries per analogy smallest forms either technology containing one drive device referred autoloaders autochangers robotic-access storage devices may number slots holding individual media usually one picking robots traverse slots load media built-in drives arrangement slots picking devices affects performance important characteristics storage possible expansion options adding slots modules drives robots tape libraries may 10 100,000 slots provide terabytes petabytes near-line information optical jukeboxes somewhat smaller solutions 1,000 slots robotic storage used backups high-capacity archives imaging medical video industries hierarchical storage management known archiving strategy automatically migrating long-unused files fast hard disk storage libraries jukeboxes files needed retrieved back disk
node8:Wikipedia entry. Entry name: SystemBuilder/SB+. Entry content: systembuilder/sb+ systembuilder 4gl development runtime environment originally written pick family computer databases/environments part rocket u2 software suite systembuilder environment comprises sb+ server often running rocket u2 database sbclient runs microsoft windows desktop application product run either developer runtime mode development environment enables rapid prototyping development deployment applications includes rudimentary gui application environment system builder started garden shed south africa first cousins neill derek miller 1982 popularity pick database system combined lack good development framework led develop tool build standard menus screens system builder software company incorporated isle man cousins moved sydney australia early 1980s product successful expanding international markets versions began re-develop product ground become sb+ released early 1990 traditionally time pick systems accessed using dumb green-screen terminals rise pc new paradigm presented around end 1991 product enhanced addition specialised terminal emulation client called termulator able tightly integrate server pc allow facilities like downloads direct server lotus 1-2-3 new kid block microsoft excel shortly client program renamed sbclient ability render server 'green-screens client gui screens added clever set driver interpreters bought unidata corporation 1996 following unidata merger vmark software form ardent software 1998 systembuilder product set came ownership informix 2000 following purchase ardent software datastage product subsequently 2001 informix bought ibm u2 systembuilder products eventually found way become part ibm data management portfolio development systembuilder redback products continued sydney 2005 merged u2 development team located denver united states recently 1 october 2009 rocket software announced purchase entire u2 suite includes systembuilder ibm system builder/sb+ server environment based around set key tools utilities leverage provide powerful comprehensive development environment built mainly tools sb+ includes application menuing system screen generator 3gl programming language expression language gui components report writer tool recent iteration system builder sb/xa v6.5.2 released oct 2017 sb/xa includes many major enhancements including new gui system based xaml
node9:Wikipedia entry. Entry name: C_(programming_language). Entry content: c programming language c letter c general-purpose procedural computer programming language supporting structured programming lexical variable scope recursion static type system prevents unintended operations design c provides constructs map efficiently typical machine instructions found lasting use applications previously coded assembly language applications include operating systems well various application software computers ranging supercomputers embedded systems c originally developed bell labs dennis ritchie 1972 1973 make utilities running unix later applied re-implementing kernel unix operating system 1980s c gradually gained popularity nowadays one widely used programming languages c compilers various vendors available majority existing computer architectures operating systems c standardized ansi since 1989 see ansi c subsequently international organization standardization c imperative procedural language designed compiled using relatively straightforward compiler provide low-level access memory provide language constructs map efficiently machine instructions require minimal runtime support despite low-level capabilities language designed encourage cross-platform programming standards-compliant c program written portability mind compiled wide variety computer platforms operating systems changes source code language become available various platforms embedded microcontrollers supercomputers like procedural languages algol tradition c facilities structured programming allows lexical variable scope recursion static type system prevents unintended operations c executable code contained within subroutines also called functions though strictly sense functional programming function parameters always passed value pass-by-reference simulated c explicitly passing pointer values c program source text free-format using semicolon statement terminator curly braces grouping blocks statements c language also exhibits following characteristics c include certain features found languages object orientation garbage collection implemented emulated often use external libraries e.g. glib object system boehm garbage collector many later languages borrowed directly indirectly c including c++ c unix c shell go java javascript limbo lpc objective-c perl php python rust swift verilog systemverilog hardware description languages languages drawn many control structures basic features c. python dramatic exception also express highly similar syntax c tend combine recognizable expression statement syntax c underlying type systems data models semantics radically different origin c closely tied development unix operating system originally implemented assembly language pdp-7 dennis ritchie ken thompson incorporating several ideas colleagues eventually decided port operating system pdp-11 original pdp-11 version unix developed assembly language thompson needed programming language make utilities first tried make fortran compiler soon gave idea made new language b thompson simplified version bcpl however utilities written b b slow b could take advantage pdp-11 features byte addressability 1972 ritchie started improve b resulted creating new language c. c compiler utilities made included version 2 unix version 4 unix released nov. 1973 unix kernel extensively re-implemented c. time c language acquired powerful features codice_12 types unix one first operating system kernels implemented language assembly earlier instances include multics system written pl/i master control program mcp burroughs b5000 written algol 1961 around 1977 ritchie stephen c. johnson made changes language facilitate portability unix operating system johnson portable c compiler served basis several implementations c new platforms 1978 brian kernighan dennis ritchie published first edition c programming language book known c programmers k r served many years informal specification language version c describes commonly referred k r c second edition book covers later ansi c standard described k r introduced several language features even publication 1989 ansi standard many years k r c still considered lowest common denominator c programmers restricted maximum portability desired since many older compilers still use carefully written k r c code legal standard c well early versions c functions return types codice_30 must declared used function definition functions used without prior declaration presumed return type codice_30 example codice_30 type specifiers commented could omitted k r c required later standards since k r function declarations include information function arguments function parameter type checks performed although compilers would issue warning message local function called wrong number arguments multiple calls external function used different numbers types arguments separate tools unix lint utility developed among things could check consistency function use across multiple source files years following publication k r c several features added language supported compilers particular pcc vendors included large number extensions lack agreement standard library together language popularity fact even unix compilers precisely implemented k r specification led necessity standardization late 1970s 1980s versions c implemented wide variety mainframe computers minicomputers microcomputers including ibm pc popularity began increase significantly 1983 american national standards institute ansi formed committee x3j11 establish standard specification c. x3j11 based c standard unix implementation however non-portable portion unix c library handed ieee working group 1003 become basis 1988 posix standard 1989 c standard ratified ansi x3.159-1989 programming language c version language often referred ansi c standard c sometimes c89 1990 ansi c standard formatting changes adopted international organization standardization iso iso/iec 9899:1990 sometimes called c90 therefore terms c89 c90 refer programming language ansi like national standards bodies longer develops c standard independently defers international c standard maintained working group iso/iec jtc1/sc22/wg14 national adoption update international standard typically occurs within year iso publication one aims c standardization process produce superset k r c incorporating many subsequently introduced unofficial features standards committee also included several additional features function prototypes borrowed c++ codice_15 pointers support international character sets locales preprocessor enhancements although syntax parameter declarations augmented include style used c++ k r interface continued permitted compatibility existing source code c89 supported current c compilers c code written today based program written standard c without hardware-dependent assumptions run correctly platform conforming c implementation within resource limits without precautions programs may compile certain platform particular compiler due example use non-standard libraries gui libraries reliance compiler- platform-specific attributes exact size data types byte endianness cases code must compilable either standard-conforming k r c-based compilers codice_38 macro used split code standard k r sections prevent use k r c-based compiler features available standard c. ansi/iso standardization process c language specification remained relatively static several years 1995 normative amendment 1 1990 c standard iso/iec 9899/amd1:1995 known informally c95 published correct details add extensive support international character sets c standard revised late 1990s leading publication iso/iec 9899:1999 1999 commonly referred c99 since amended three times technical corrigenda c99 introduced several new features including inline functions several new data types including codice_39 codice_40 type represent complex numbers variable-length arrays flexible array members improved support ieee 754 floating point support variadic macros macros variable arity support one-line comments beginning codice_41 bcpl c++ many already implemented extensions several c compilers c99 part backward compatible c90 stricter ways particular declaration lacks type specifier longer codice_30 implicitly assumed standard macro codice_43 defined value codice_44 indicate c99 support available gcc solaris studio c compilers support many new features c99 c compiler microsoft visual c++ however implements c89 standard parts c99 required compatibility c++11 2007 work began another revision c standard informally called c1x official publication 2011-12-08 c standards committee adopted guidelines limit adoption new features tested existing implementations c11 standard adds numerous new features c library including type generic macros anonymous structures improved unicode support atomic operations multi-threading bounds-checked functions also makes portions existing c99 library optional improves compatibility c++ standard macro codice_43 defined codice_46 indicate c11 support available published june 2018 c18 current standard c programming language introduces new language features technical corrections clarifications defects c11 standard macro codice_43 defined codice_48 historically embedded c programming requires nonstandard extensions c language order support exotic features fixed-point arithmetic multiple distinct memory banks basic i/o operations 2008 c standards committee published technical report extending c language address issues providing common standard implementations adhere includes number features available normal c fixed-point arithmetic named address spaces basic i/o hardware addressing c formal grammar specified c standard line endings generally significant c however line boundaries significance preprocessing phase comments may appear either delimiters codice_49 codice_50 since c99 following codice_41 end line comments delimited codice_49 codice_50 nest sequences characters interpreted comment delimiters appear inside string character literals c source files contain declarations function definitions function definitions turn contain declarations statements declarations either define new types using keywords codice_12 codice_35 codice_14 assign types perhaps reserve storage new variables usually writing type followed variable name keywords codice_57 codice_30 specify built-in types sections code enclosed braces codice_59 codice_60 sometimes called curly brackets limit scope declarations act single statement control structures imperative language c uses statements specify actions common statement expression statement consisting expression evaluated followed semicolon side effect evaluation functions may called variables may assigned new values modify normal sequential execution statements c provides several control-flow statements identified reserved keywords structured programming supported codice_61 -codice_62 conditional execution codice_63-codice_4 codice_4 codice_2 iterative execution looping codice_2 statement separate initialization testing reinitialization expressions omitted codice_68 codice_69 used leave innermost enclosing loop statement skip reinitialization also non-structured codice_70 statement branches directly designated label within function codice_5 selects codice_72 executed based value integer expression expressions use variety built-in operators may contain function calls order arguments functions operands operators evaluated unspecified evaluations may even interleaved however side effects including storage variables occur next sequence point sequence points include end expression statement entry return function call sequence points also occur evaluation expressions containing certain operators codice_73 codice_10 codice_75 comma operator permits high degree object code optimization compiler requires c programmers take care obtain reliable results needed programming languages kernighan ritchie say introduction c programming language c like language blemishes operators wrong precedence parts syntax could better c standard attempt correct many blemishes impact changes already existing software basic c source character set includes following characters newline indicates end text line need correspond actual single character although convenience c treats one additional multi-byte encoded characters may used string literals entirely portable latest c standard c11 allows multi-national unicode characters embedded portably within c source text using codice_83 codice_84 encoding codice_85 denotes hexadecimal character although feature yet widely implemented basic c execution character set contains characters along representations alert backspace carriage return run-time support extended character sets increased revision c standard c89 32 reserved words also known keywords words used purposes predefined c99 reserved five words c11 reserved seven words recently reserved words begin underscore followed capital letter identifiers form previously reserved c standard use implementations since existing program source code using identifiers would affected c implementations started supporting extensions programming language standard headers define convenient synonyms underscored identifiers language previously included reserved word called codice_130 seldom implemented removed reserved word c supports rich set operators symbols used within expression specify manipulations performed evaluating expression c operators c uses operator codice_136 used mathematics express equality indicate assignment following precedent fortran pl/i unlike algol derivatives c uses operator codice_156 test equality similarity two operators assignment equality may result accidental use one place many cases mistake produce error message although compilers produce warnings example conditional expression codice_176 might mistakenly written codice_177 evaluated true codice_76 zero assignment c operator precedence always intuitive example operator codice_156 binds tightly executed prior operators codice_9 bitwise codice_149 bitwise expressions codice_182 must written codice_183 coder intent hello world example appeared first edition k r become model introductory program programming textbooks regardless programming language program prints hello world standard output usually terminal screen display original version main standard-conforming hello world program int main void first line program contains preprocessing directive indicated codice_184 causes compiler replace line entire text codice_185 standard header contains declarations standard input output functions codice_186 codice_187 angle brackets surrounding codice_185 indicate codice_185 located using search strategy prefers headers provided compiler headers name opposed double quotes typically include local project-specific header files next line indicates function named codice_190 defined codice_190 function serves special purpose c programs run-time environment calls codice_190 function begin program execution type specifier codice_30 indicates value returned invoker case run-time environment result evaluating codice_190 function integer keyword codice_15 parameter list indicates function takes arguments opening curly brace indicates beginning definition codice_190 function next line calls diverts execution function named codice_186 case supplied system library call codice_186 function passed provided single argument address first character string literal codice_199 string literal unnamed array elements type codice_57 set automatically compiler final 0-valued character mark end array codice_186 needs know codice_202 escape sequence c translates newline character output signifies end current line return value codice_186 function type codice_30 silently discarded since used careful program might test return value determine whether codice_186 function succeeded semicolon codice_206 terminates statement closing curly brace indicates end code codice_190 function according c99 specification newer codice_190 function unlike function implicitly return value codice_80 upon reaching codice_60 terminates function formerly explicit codice_211 statement required interpreted run-time system exit code indicating successful execution type system c static weakly typed makes similar type system algol descendants pascal built-in types integers various sizes signed unsigned floating-point numbers enumerated types codice_14 integer type codice_57 often used single-byte characters c99 added boolean datatype also derived types including arrays pointers records codice_12 unions codice_35 c often used low-level systems programming escapes type system may necessary compiler attempts ensure type correctness expressions programmer override checks various ways either using type cast explicitly convert value one type another using pointers unions reinterpret underlying bits data object way find c declaration syntax unintuitive particularly function pointers ritchie idea declare identifiers contexts resembling use declaration reflects use c usual arithmetic conversions allow efficient code generated sometimes produce unexpected results example comparison signed unsigned integers equal width requires conversion signed value unsigned generate unexpected results signed value negative c supports use pointers type reference records address location object function memory pointers dereferenced access data stored address pointed invoke pointed-to function pointers manipulated using assignment pointer arithmetic run-time representation pointer value typically raw memory address perhaps augmented offset-within-word field since pointer type includes type thing pointed expressions including pointers type-checked compile time pointer arithmetic automatically scaled size pointed-to data type pointers used many purposes c. text strings commonly manipulated using pointers arrays characters dynamic memory allocation performed using pointers many data types trees commonly implemented dynamically allocated codice_12 objects linked together using pointers pointers functions useful passing functions arguments higher-order functions qsort bsearch callbacks invoked event handlers null pointer value explicitly points valid location dereferencing null pointer value undefined often resulting segmentation fault null pointer values useful indicating special cases next pointer final node linked list error indication functions returning pointers appropriate contexts source code assigning pointer variable null pointer constant written codice_80 without explicit casting pointer type codice_218 macro defined several standard headers conditional contexts null pointer values evaluate false pointer values evaluate true void pointers codice_219 point objects unspecified type therefore used generic data pointers since size type pointed-to object known void pointers dereferenced pointer arithmetic allowed although easily many contexts implicitly converted object pointer type careless use pointers potentially dangerous typically unchecked pointer variable made point arbitrary location cause undesirable effects although properly used pointers point safe places made point unsafe places using invalid pointer arithmetic objects point may continue used deallocation dangling pointers may used without initialized wild pointers may directly assigned unsafe value using cast union another corrupt pointer general c permissive allowing manipulation conversion pointer types although compilers typically provide options various levels checking programming languages address problems using restrictive reference types array types c traditionally fixed static size specified compile time recent c99 standard also allows form variable-length arrays however also possible allocate block memory arbitrary size run-time using standard library codice_220 function treat array c unification arrays pointers means declared arrays dynamically allocated simulated arrays virtually interchangeable since arrays always accessed effect via pointers array accesses typically checked underlying array size although compilers may provide bounds checking option array bounds violations therefore possible rather common carelessly written code lead various repercussions including illegal memory accesses corruption data buffer overruns run-time exceptions bounds checking desired must done manually c special provision declaring multi-dimensional arrays rather relies recursion within type system declare arrays arrays effectively accomplishes thing index values resulting multi-dimensional array thought increasing row-major order multi-dimensional arrays commonly used numerical algorithms mainly applied linear algebra store matrices structure c array well suited particular task however since arrays passed merely pointers bounds array must known fixed values else explicitly passed subroutine requires dynamically sized arrays arrays accessed using double indexing workaround allocate array additional row vector pointers columns c99 introduced variable-length arrays address issues ordinary c arrays subscript notation codice_221 codice_222 designates pointer syntactic sugar codice_223 taking advantage compiler knowledge pointer type address codice_224 points base address pointed codice_222 incremented codice_27 bytes rather defined base address incremented codice_27 multiplied size element codice_222 points thus codice_221 designates codice_230th element array furthermore expression contexts notable exception operand codice_108 name array automatically converted pointer array first element implies array never copied whole named argument function rather address first element passed therefore although function calls c use pass-by-value semantics arrays effect passed reference size element determined applying operator codice_108 dereferenced element codice_222 codice_234 codice_235 number elements declared array codice_78 determined codice_237 latter applies array names variables declared subscripts codice_238 due semantics c possible determine entire size arrays pointers arrays created dynamic allocation codice_220 code codice_240 codice_241 designates pointer work since compiler assumes size pointer requested since array name arguments codice_108 converted pointers exhibit ambiguity however arrays created dynamic allocation accessed pointers rather true array variables suffer codice_108 issues array pointers thus despite apparent equivalence array pointer variables still distinction made even though name array expression contexts converted pointer first element pointer occupy storage array name l-value address constant unlike pointer variable consequently array points changed impossible assign new address array name array contents may copied however using codice_244 function accessing individual elements one important functions programming language provide facilities managing memory objects stored memory c provides three distinct ways allocate memory objects three approaches appropriate different situations various trade-offs example static memory allocation little allocation overhead automatic allocation may involve slightly overhead dynamic memory allocation potentially great deal overhead allocation deallocation persistent nature static objects useful maintaining state information across function calls automatic allocation easy use stack space typically much limited transient either static memory heap space dynamic memory allocation allows convenient allocation objects whose size known run-time c programs make extensive use three possible automatic static allocation usually simplest storage managed compiler freeing programmer potentially error-prone chore manually allocating releasing storage however many data structures change size runtime since static allocations automatic allocations c99 must fixed size compile-time many situations dynamic allocation necessary prior c99 standard variable-sized arrays common example see article codice_220 example dynamically allocated arrays unlike automatic allocation fail run time uncontrolled consequences dynamic allocation functions return indication form null pointer value required storage allocated static allocation large usually detected linker loader program even begin execution unless otherwise specified static objects contain zero null pointer values upon program startup automatically dynamically allocated objects initialized initial value explicitly specified otherwise initially indeterminate values typically whatever bit pattern happens present storage might even represent valid value type program attempts access uninitialized value results undefined many modern compilers try detect warn problem false positives false negatives occur another issue heap memory allocation synchronized actual usage program order reused much possible example pointer heap memory allocation goes scope value overwritten codice_249 called memory recovered later reuse essentially lost program phenomenon known memory leak conversely possible memory freed continue referenced leading unpredictable results typically symptoms appear portion program far removed actual error making difficult track problem issues ameliorated languages automatic garbage collection c programming language uses libraries primary method extension c library set functions contained within single archive file library typically header file contains prototypes functions contained within library may used program declarations special data types macro symbols used functions order program use library must include library header file library must linked program many cases requires compiler flags e.g. codice_250 shorthand link math library common c library c standard library specified iso ansi c standards comes every c implementation implementations target limited environments embedded systems may provide subset standard library library supports stream input output memory allocation mathematics character strings time values several separate standard headers example codice_185 specify interfaces standard library facilities another common set c library functions used applications specifically targeted unix unix-like systems especially functions provide interface kernel functions detailed various standards posix single unix specification since many programs written c wide variety libraries available libraries often written c c compilers generate efficient object code programmers create interfaces library routines used higher-level languages like java perl python file input output i/o part c language instead handled libraries c standard library associated header files e.g codice_185 file handling generally implemented high-level i/o works streams stream perspective data flow independent devices file concrete device high level i/o done association stream file c standard library buffer memory area queue temporarily used store data sent final destination reduces time spent waiting slower devices example hard drive solid state drive low-level i/o functions part standard c library generally part bare metal programming programming independent operating system embedded programming exceptions implementations include low-level i/o number tools developed help c programmers find fix statements undefined behavior possibly erroneous expressions greater rigor provided compiler tool lint first leading many others automated source code checking auditing beneficial language c many tools exist lint common practice use lint detect questionable code program first written program passes lint compiled using c compiler also many compilers optionally warn syntactically valid constructs likely actually errors misra c proprietary set guidelines avoid questionable code developed embedded systems also compilers libraries operating system level mechanisms performing actions standard part c bounds checking arrays detection buffer overflow serialization dynamic memory tracking automatic garbage collection tools purify valgrind linking libraries containing special versions memory allocation functions help uncover runtime errors memory usage c widely used systems programming implementing operating systems embedded system applications c code written portability used purposes yet needed system-specific code used access specific hardware addresses perform type punning match externally imposed interface requirements low run-time demand system resources c also used website programming using cgi gateway information web application server browser c often chosen interpreted languages speed stability near-universal availability one consequence c wide availability efficiency compilers libraries interpreters programming languages often implemented c. reference implementations python perl php example written c. layer abstraction thin overhead low c enables programmers create efficient implementations algorithms data structures useful computationally intense programs example gnu multiple precision arithmetic library gnu scientific library mathematica matlab completely partially written c. c sometimes used intermediate language implementations languages approach may used portability convenience using c intermediate language additional machine-specific code generators necessary c features line-number preprocessor directives optional superfluous commas end initializer lists support compilation generated code however c shortcomings prompted development c-based languages specifically designed use intermediate languages c -- c also widely used implement end-user applications however applications also written newer higher-level languages c directly indirectly influenced many later languages c go java javascript limbo lpc perl php python unix c shell pervasive influence syntactical languages mentioned combine statement less recognizably expression syntax c type systems data models and/or large-scale program structures differ c sometimes radically several c near-c interpreters exist including ch cint also used scripting object-oriented languages became popular c++ objective-c two different extensions c provided object-oriented capabilities languages originally implemented source-to-source compilers source code translated c compiled c compiler c++ programming language devised bjarne stroustrup approach providing object-oriented functionality c-like syntax c++ adds greater typing strength scoping tools useful object-oriented programming permits generic programming via templates nearly superset c c++ supports c exceptions objective-c originally thin layer top c remains strict superset c permits object-oriented programming using hybrid dynamic/static typing paradigm objective-c derives syntax c smalltalk syntax involves preprocessing expressions function declarations function calls inherited c syntax object-oriented features originally taken smalltalk addition c++ objective-c ch cilk unified parallel c nearly supersets c
node10:Wikipedia entry. Entry name: Vulnerability_scanner. Entry content: vulnerability scanner vulnerability scanner computer program designed assess computers networks applications known weaknesses plain words scanners used discover weaknesses given system utilized identification detection vulnerabilities arising mis-configurations flawed programming within network-based asset firewall router web server application server etc modern vulnerability scanners allow authenticated unauthenticated scans modern scanners typically available saas software service provided internet delivered web application modern vulnerability scanner often ability customize vulnerability reports well installed software open ports certificates host information queried part workflow cis critical security controls effective cyber defense designates continuous vulnerability scanning critical control effective cyber defense
node11:Wikipedia entry. Entry name: Zathura_(document_viewer). Entry content: zathura document viewer zathura free plugin-based document viewer plugins available pdf via poppler mupdf postscript djvu epub written lightweight controlled vi-like keybindings zathura customizability makes well-liked many linux users zathura official packages available arch linux debian fedora gentoo openbsd opensuse source mage gnu/linux ubuntu unofficial macos package provided macports zathura named 2005 film development zathura began 12 august 2009 18 september 2009 version 0.0.1 announced arch linux community zathura official arch linux package since april 2010 year end july imported source mage test grimoire official debian package since least 2011 part debian squeeze zathura automatically reloads documents working compiled documents written latex zathura refresh output whenever compilation takes place zathura option enabling inverse search using synctex zathura adjust document best-fit fit width rotate pages view pages side-by-side fullscreen mode pages also recolored black background white foreground zathura search text copy text primary x selection supports bookmarks open encrypted files behavior appearance zathura customized using configuration file zathura ability execute external shell commands opened tabs using
node12:Wikipedia entry. Entry name: Windows_Server_2003. Entry content: windows server 2003 windows server 2003 server operating system produced microsoft released april 24 2003 successor windows 2000 server predecessor windows server 2008 updated version windows server 2003 r2 released manufacturing december 6 2005 windows server 2003 kernel later adopted development windows vista windows server 2003 follow-up windows 2000 server incorporating compatibility features windows xp unlike windows 2000 server windows server 2003 default installation none server components enabled reduce attack surface new machines windows server 2003 includes compatibility modes allow older applications run greater stability made compatible windows nt 4.0 domain-based networking windows server 2003 brought enhanced active directory compatibility better deployment support ease transition windows nt 4.0 windows server 2003 windows xp professional product went several name changes course development first announced 2000 known codename whistler server named windows 2002 server brief time mid-2001 followed windows .net server windows .net server 2003 microsoft chose focus .net branding .net framework os finally released windows server 2003 windows server 2003 first microsoft windows version thoroughly subjected semi-automated testing bugs software system called prefast developed computer scientist amitabh srivastava microsoft research automated bug checking system first tested windows 2000 thoroughly amitabh srivastava prefast found 12 windows server 2003 bugs remaining 88 found human computer programmers microsoft employs 4,700 programmers work windows 60 software testers whose job find bugs windows source code microsoft co-founder bill gates stated windows server 2003 microsoft rigorously tested software date microsoft later used windows server 2003 kernel development windows vista following features new windows server 2003 ability create rescue disk removed favor automated system recovery asr windows server 2003 comes number editions targeted towards particular size type business general variants windows server 2003 ability share files printers act application server host message queues provide email services authenticate users act x.509 certificate server provide ldap directory services serve streaming media perform server-oriented functions windows server 2003 web meant building hosting web applications web pages xml web services designed used primarily iis web server provides platform developing deploying xml web services applications use asp.net technology domain controller terminal services functionality included web edition however remote desktop administration available 10 concurrent file-sharing connections allowed moment possible install microsoft sql server microsoft exchange software edition without installing service pack 1 despite supporting xml web services asp.net uddi deployed windows server 2003 web .net framework version 2.0 included windows server 2003 web installed separate update windows update windows server 2003 web supports maximum 2 physical processors maximum 2 gb ram edition windows server 2003 require client access license cal used internet facing server front-end internet information services windows server update services using storage back-end another remote server front-end cals may still required microsoft windows server 2003 standard aimed towards small medium-sized businesses standard edition supports file printer sharing offers secure internet connectivity allows centralized desktop application deployment specialized version x64 architecture released april 2005 ia-32 version supports four physical processors 4 gb ram x64 version capable addressing 32 gb ram also supports non-uniform memory access windows server 2003 enterprise aimed towards medium large businesses full-function server operating system supports 8 physical processors provides enterprise-class features eight-node clustering using microsoft cluster server mscs software support 64 gb ram pae enterprise edition also comes specialized versions x64 itanium architectures service pack 2 installed x64 itanium versions capable addressing 1 tb 2 tb ram respectively edition also supports non-uniform memory access numa also provides ability hot-add supported hardware windows server 2003 enterprise also required edition issue custom certificate templates windows server 2003 datacenter designed infrastructures demanding high security reliability windows server 2003 available ia-32 itanium x64 processors supports maximum 32 physical processors ia-32 platform 64 physical processors x64 ia-64 hardware ia-32 versions edition support 64 gb ram service pack 2 installed x64 versions support 1 tb ia-64 versions support 2 tb ram windows server 2003 datacenter also allows limiting processor memory usage per-application basis edition better support storage area networks sans features service uses windows sockets emulate tcp/ip communication native san service providers thereby allowing san accessed tcp/ip channel application communicate tcp/ip use san without modification application datacenter edition like enterprise edition supports 8-node clustering clustering increases availability fault tolerance server installations distributing replicating service among many servers edition supports clustering cluster dedicated storage cluster nodes connected common san windows compute cluster server 2003 ccs released june 2006 designed high-end applications require high performance computing clusters designed deployed numerous computers clustered together achieve supercomputing speeds compute cluster server network comprises least one controlling head node subordinate processing nodes carry work compute cluster server uses microsoft messaging passing interface v2 ms-mpi communicate processing nodes cluster network ties nodes together powerful inter-process communication mechanism complex communications hundreds even thousands processors working parallel application programming interface consists 160 functions job launcher enables users execute jobs executed computing cluster ms mpi designed compatible reference open source mpi2 specification widely used high-performance computing hpc exceptions security considerations ms mpi covers complete set mpi2 functionality implemented mpich2 except planned future features dynamic process spawn publishing windows storage server 2003 part windows server 2003 series specialized server operating system network-attached storage nas launched 2003 storage decisions chicago optimized use file print sharing also storage area network san scenarios available original equipment manufacturers oems unlike windows server 2003 editions provide file printer sharing functionality windows storage server 2003 require cal windows storage server 2003 nas equipment headless means without monitors keyboards mice administered remotely devices plugged existing ip network storage capacity available users windows storage server 2003 use raid arrays provide data redundancy fault-tolerance high performance multiple nas servers clustered appear single device allows responsibility serving clients shared way one server fails servers take often termed failover also improves fault-tolerance windows storage server 2003 also used create storage area network data transferred terms chunks rather files thus providing granularity data transferred provides higher performance database transaction processing applications windows storage server 2003 also allows nas devices connected san windows storage server 2003 r2 follow-up windows storage server 2003 adds file-server performance optimization single instance storage sis index-based search single instance storage sis scans storage volumes duplicate files moves duplicate files common sis store file volume replaced link file substitution reduces amount storage space required much 70 windows storage server 2003 r2 provides index-based full-text search based indexing engine already built windows server updated search engine speeds indexed searches network shares edition also provides filters searching many standard file formats .zip autocad xml mp3 .pdf microsoft office file formats windows storage server 2003 r2 includes built support windows sharepoint services microsoft sharepoint portal server adds storage management snap-in microsoft management console used manage storage volumes centrally including dfs shares servers running windows storage server r2 windows storage server 2003 r2 used iscsi target standard enterprise editions windows storage server 2003 r2 incorporating wintarget iscsi technology microsoft acquired 2006 stringbean software add-on feature available purchase oem partners iscsi feature pack included versions wss configured oems windows storage server 2003 promoted function domain controller however edition licensed run directory services joined existing domain member server windows storage server 2003 r2 available following editions windows unified data storage server version windows storage server 2003 r2 iscsi target support standard available standard enterprise editions windows small business server sbs software suite includes windows server additional technologies aimed providing small business complete technology solution standard edition sbs includes microsoft remote web workplace windows sharepoint services microsoft exchange server fax server active directory basic firewall dhcp server network address translation capabilities premium edition sbs adds microsoft sql server 2000 microsoft isa server 2004 sbs type cal different costs slightly cals editions windows server 2003 however sbs cal encompasses user cals windows server exchange server sql server isa server hence less expensive buying cals individually sbs following design limitations mainly affecting active directory remove limitations instance sbs upgrade regular windows server exchange server sql isa server windows small business server 2003 r2 transition pack windows home server operating system microsoft based windows small business server 2003 sp2 seen directory listings installation dvd windows home server announced january 7 2007 consumer electronics show bill gates intended solution homes multiple connected pcs offer file sharing automated backups remote access windows home server began shipment oems september 15 2007 windows server 2003 embedded systems replaced windows 2000 server embedded systems intended use building firewall vpn caching servers similar appliances versions available server appliance software microsoft internet security acceleration server availability original version ended may 28 2003 availability r2 ended march 5 2006 end support scheduled july 14 2015 r2 original end licence scheduled may 28 2018 r2 original end support date indicates supported service pack dated july 14 2005 end licence date last date oem may distribute systems using version versions continue receive critical security updates end support microsoft announced extended support dates windows server 2003 embedded systems release 2 embedded systems available 32 64 bit versions standard 1-4 cpu enterprise 1-8 cpu march 30 2005 microsoft released service pack 1 windows server 2003 among improvements many updates provided windows xp users service pack 2 features added service pack 1 include full list updates available microsoft knowledge base service pack 2 windows server 2003 released march 13 2007 release date originally scheduled first half 2006 june 13 2006 microsoft made initial test version service pack 2 available microsoft connect users build number 2721 followed build 2805 known beta 2 refresh final build 3790 microsoft described service pack 2 standard service pack release containing previously released security updates hotfixes reliability performance improvements addition service pack 2 contains microsoft management console 3.0 windows deployment services replaces remote installation services support wpa2 improvements ipsec msconfig service pack 2 also adds windows server 2003 scalable networking pack snp allows hardware acceleration processing network packets thereby enabling faster throughput snp previously available out-of-band update windows server 2003 service pack 1 windows server 2003 r2 title complementary offering microsoft consists copy windows server 2003 sp1 one cd host optionally installed new features reminiscent microsoft plus another released manufacturing december 6 2005 ia-32 x64 platforms ia-64 succeeded windows server 2008 new features windows server 2003 r2 include july 13 2010 windows server 2003 mainstream support expired extended support phase began extended support phase microsoft continued provide security updates however free technical support warranty claims design changes longer offered extended support lasted july 14 2015 although windows server 2003 unsupported microsoft released emergency security patch may 2017 os well unsupported versions windows including windows xp windows 8 rtm address vulnerability leveraged wannacry ransomware attack
node13:Wikipedia entry. Entry name: CINT. Entry content: cint cint command line c/c++ interpreter included object oriented data analysis package root although intended use faculties root cint also used standalone addition another program requires interpreter cint interpreted version c/c++ much way beanshell interpreted version java addition language interpreter offers certain bash-like shell features history tab-completion accomplish latter relies heavily reflection support built root user classes follow interfaces may also take advantage features language interpreted cint actually something hybrid c c++ covering 95 ansi c 85 c++ syntax however bit forgiving either language example operator codice_1 replaced codice_2 optional warning addition statements command line need end semi-colon although necessary statements macros cern switched cling c++ interpreter cint distributed standalone author cint latest home page
node14:Wikipedia entry. Entry name: Windows_Server_2019. Entry content: windows server 2019 windows server 2019 latest version server operating system microsoft part windows nt family operating systems windows server 2019 announced march 20 2018 first windows insider preview version released day released general availability october 2 2018 october 6 2018 distribution windows version 1809 build 17763 paused microsoft investigated issue user data deleted in-place upgrade affected systems user profile folder e.g documents music pictures moved another location data left original location windows server 2019 based windows version 1809 codebase removed distribution time re-released november 13 2018 software product life cycle server 2019 reset accordance new release date windows server 2019 version 1903 following new features
node15:Wikipedia entry. Entry name: Nessus_(software). Entry content: nessus software nessus proprietary vulnerability scanner developed tenable inc. nasdaq tenb examples vulnerabilities exposures nessus scan include nessus scans cover wide range technologies including operating systems network devices hypervisors databases web servers critical infrastructure results scan reported various formats plain text xml html latex results also saved knowledge base debugging unix scanning automated use command-line client exist many different commercial free open source tools unix windows manage individual distributed nessus scanners nessus provides additional functionality beyond testing known network vulnerabilities instance use windows credentials examine patch levels computers running windows operating system nessus also support configuration compliance audits scada audits pci compliance nessus project started renaud deraison 1998 provide internet community free remote security scanner october 5 2005 tenable network security company renaud deraison co-founded changed nessus 3 proprietary closed source license nessus 2 engine minority plugins still gpl leading forked open source projects based nessus like openvas porz-wahn today product still exists two formats limited free version full-feature paid subscription option nessus available linux windows mac os x. tenable inc. went public july 26 2018 twenty years nessus ’ creation
node16:Wikipedia entry. Entry name: Signal_Protocol. Entry content: signal protocol signal protocol formerly known textsecure protocol non-federated cryptographic protocol used provide end-to-end encryption voice calls video calls instant messaging conversations protocol developed open whisper systems 2013 first introduced open-source textsecure app later became signal several closed-source applications claim implemented protocol whatsapp said encrypt conversations billion people worldwide facebook messenger also say offer protocol optional secret conversations skype private conversations protocol combines double ratchet algorithm prekeys triple elliptic-curve diffie–hellman 3-dh handshake uses curve25519 aes-256 hmac-sha256 primitives signal protocol development started trevor perrin moxie marlinspike open whisper systems 2013 first version protocol textsecure v1 based off-the-record messaging otr 24 february 2014 open whisper systems introduced textsecure v2 migrated axolotl ratchet design axolotl ratchet based ephemeral key exchange introduced otr combines symmetric-key ratchet modeled silent circle instant messaging protocol scimp brought support asynchronous communication offline messages major new feature well better resilience distorted order messages simpler support conversations multiple participants axolotl ratchet named critically endangered aquatic salamander axolotl extraordinary self-healing capabilities developers refer algorithm self-healing automatically disables attacker accessing cleartext later messages compromised session key third version protocol textsecure v3 made changes cryptographic primitives wire protocol october 2014 researchers ruhr university bochum published analysis textsecure v3 among findings presented unknown key-share attack protocol general found secure march 2016 developers renamed protocol signal protocol also renamed axolotl ratchet double ratchet algorithm better differentiate ratchet full protocol used name axolotl referring full protocol signal protocol based textsecure v3 additional cryptographic changes october 2016 researchers uk university oxford australia queensland university technology canada mcmaster university published formal analysis protocol concluded protocol cryptographically sound protocol provides confidentiality integrity authentication participant consistency destination validation forward secrecy post-compromise security aka future secrecy causality preservation message unlinkability message repudiation participation repudiation asynchronicity provide anonymity preservation requires servers relaying messages storing public key material signal protocol also supports end-to-end encrypted group chats group chat protocol combination pairwise double ratchet multicast encryption addition properties provided one-to-one protocol group chat protocol provides speaker consistency out-of-order resilience dropped message resilience computational equality trust equality subgroup messaging well contractible expandable membership authentication users manually compare public key fingerprints outside channel makes possible users verify identities avoid man-in-the-middle attack implementation also choose employ trust first use mechanism order notify users correspondent key changes signal protocol prevent company retaining information users communicate therefore differences messaging service providers choose handle information signal privacy policy states recipients identifiers kept signal servers long necessary order transmit message june 2016 moxie marlinspike told intercept closest piece information metadata signal server stores last time user connected server precision information reduced day rather hour minute second october 2018 signal messenger announced implemented sealed sender feature signal reduces amount metadata signal servers access concealing sender identifier sender identity conveyed recipient message encrypted key server done automatically sender recipient contacts access signal profile users also enable option receive sealed sender messages non-contacts people access signal profile contemporaneous wiretap user device and/or signal servers may still reveal device ip address accessed signal server send receive messages certain times open whisper systems first introduced protocol textsecure app later merged encrypted voice calling application called redphone textsecure app renamed signal redphone used zrtp encrypt calls march 2017 signal transitioned new webrtc-based calling system also introduced ability make video calls signal new calling system uses signal protocol end-to-end encryption november 2014 open whisper systems announced partnership whatsapp provide end-to-end encryption incorporating signal protocol whatsapp client platform open whisper systems said already incorporated protocol latest whatsapp client android support clients group/media messages key verification would coming soon april 5 2016 whatsapp open whisper systems announced finished adding end-to-end encryption every form communication whatsapp users could verify keys february 2017 whatsapp announced new feature whatsapp status uses signal protocol secure contents september 2015 g data software launched new messaging app called secure chat used signal protocol g data discontinued service may 2018 september 2016 google launched new messaging app called allo featured optional incognito mode used signal protocol end-to-end encryption march 2019 google discontinued allo favor messages app android october 2016 facebook deployed optional mode called secret conversations facebook messenger provides end-to-end encryption using implementation signal protocol january 2018 open whisper systems microsoft announced addition signal protocol support optional skype mode called private conversations signal protocol influence cryptographic protocols may 2016 viber said encryption protocol custom implementation uses concepts signal protocol forsta developers said app uses custom implementation signal protocol double ratchet algorithm introduced part signal protocol also adopted protocols omemo xmpp extension protocol xep introduced conversations messaging app approved xmpp standards foundation xsf december 2016 xep-0384 matrix open communications protocol includes olm library provides optional end-to-end encryption room-by-room basis via double ratchet algorithm implementation developers wire said app uses custom implementation double ratchet algorithm signal messenger maintains following signal protocol libraries github
node17:Wikipedia entry. Entry name: PCem. Entry content: pcem pcem short pc emulator ibm pc emulator windows linux specializes running old operating systems software designed ibm pc compatibles originally developed ibm pc xt emulator later emulates ibm pc compatible computers well unofficial builds pcem also available 86box includes number enhanced features including scsi new boards versions pcem v0.5 v8 removed official webpage due use mame opl2 opl3 emulation code yet licensed gpl-compatible license pcem capable emulating intel processors respective clones including amd idt cyrix intel 8088 pentium tillamook mmx/mobile mmx processors 1997 1999 recompiler added v10.1 mandatory p5 pentium cyrix processors optional i486 processors idt winchip processors yet rather fast processor needed full emulation speed intel core i5 4 gigahertz however current developer pcem main concern recompiler fast enough emulate intel pentium pro/pentium ii processors yet pcem emulates various ibm pc compatible systems/motherboards 1981 1996 includes almost ibm pc models including ibm ps/1 model 2121 ibm ps/2 model 2011 american megatrends bios clones 1989 1994 award bios systems award 286 clone award sis 496/497 award 430vx pci intel premiere/pci intel advanced/ev motherboards however unofficial builds pcem pcem-x pcem-unofficial also supports ibm pc compatible systems/motherboards 1996 2000 supports intel pentium pro/pentium ii processors pcem simulates bios cache relies processor rather system memory pcem emulate different graphic modes includes text mode hercules cga including composite modes 160x100x16 tweaked modes tandy ega vga including mode x tweaks vesa well various video apis directx 3dfx glide pcem also emulate various video cards ati mach64 gx s3 trio32/64/virge series 3dfx voodoo pcem also emulates sound cards adlib sound blaster including game blaster sound blaster pro sound blaster 16 sound blaster awe32 gravis ultrasound innovation ssi-2001 windows sound system ensoniq audiopci 64v/es1371 sound blaster pci 128 voodoo emulation also emulated since pcem v10 pcem v12 added support voodoo 2 various optimizations however shortcomings regarding voodoo emulation lack mip-mapping slightly wobbling triangles lack speed limiting wrong refresh rates almost every resolution except 640x480 60 hz pcem v11 separate recompiler added voodoo emulation making faster emulate voodoo graphics card unofficial build pcem allows use slirp/winpcap networking interface plus emulated ne2000 realtek rtl8029as ethernet cards however starting pcem v13 emulation ne2000 officially added similar virtual pc bochs qemu emulates almost versions microsoft windows windows vista including service pack 2 ms-dos freedos cp/m-86 also supported earlier versions os/2 requires hard drive formatted prior installation os/2 warp 3 warp 4.5 requires unaccelerated video card run operating systems also supported pcem versions linux supports pentium processor bsd derivatives e.g freebsd beos 5 works award sis 497 motherboard
node18:Wikipedia entry. Entry name: AOL_Active_Virus_Shield. Entry content: aol active virus shield aol active virus shield commonly referred avs free antivirus utility made available aol engine based one used kaspersky anti-virus program longer available active virus shield includes numerous features found kaspersky anti-virus software main feature malware scanning uses kaspersky underlying engine detects variety malware viruses spyware even joke programs also offers real-time file e-mail scanning protection latest version active virus shield version 6.0.2.621 supports windows vista active virus shield light compared commercial anti-virus products also consume much memory startup program also benefits kaspersky regular definition updates typically around every two hours enable new viruses effectively detected programs update less regularly addition active virus shield better detection rates free programs avg free avast home edition active virus shield lack features kaspersky 6.0 proactive protection http protection license provided valid one year although email address used initially easily used renew 10 times also support mail scanning using tls ssl users also reported compatibility problems certain applications mcafee personal firewall plus zonealarm logitech products active virus shield longer available download august 1 2007 replaced mcafee virus scan plus special edition aol available free users free aol account even though active virus shield longer available officially latest version program still obtained mirror server hosted help also still offered already using application
node19:Wikipedia entry. Entry name: Service_scan. Entry content: service scan computer networks service scan identifies services running list open ports closely tied port scanning tools e.g nmap nessus support service scan preferable referring port list identify services running non-standard ports common practice service scanners work sending probe data port monitoring response example sending get probe could detect web server exact response give indication server multiple probes sent identify less common services nmap service scan captures information unidentified ports users encouraged submit details included updates almost vulnerability scanners built-in service scan results service scan used determine tests run port
node20:Wikipedia entry. Entry name: Microsoft-specific_exception_handling_mechanisms. Entry content: microsoft-specific exception handling mechanisms microsoft windows os family employs exception handling mechanisms based operating system specifics microsoft structured exception handling native exception handling mechanism windows forerunner technology vectored exception handling veh features codice_1 mechanism present standard c++ exceptions present imperative languages introduced later seh set handled separately thread execution microsoft supports seh programming technique compiler level ms visual c++ compiler features three non-standard keywords codice_2 codice_3 codice_4 — purpose exception handling aspects backed number win32 api functions example codice_5 raise seh exceptions manually thread execution windows link undocumented _exception_registration_record list start thread information block codice_2 statement essentially calls compiler-defined codice_7 function function allocates _exception_registration_record stack pointing codice_8 function codice_9 adds record list head end codice_2 block compiler-defined codice_11 function called reverse operation either compiler-defined routines inline programmer-defined codice_3 codice_4 blocks called within codice_8 programmer-defined blocks present _exception_registration_record created codice_7 extended additional fields used codice_8 case exception user mode code operating system parses thread _exception_registration_record list calls exception handler sequence handler signals handled exception return value list exhausted last one list always codice_17 displays general protection fault error message list traversed giving handlers chance clean resources used finally execution returns kernel mode process either resumed terminated vectored exception handling introduced windows xp vectored exception handling made available windows programmers using languages c++ visual basic veh replace structured exception handling seh rather veh seh coexist veh handlers priority seh handlers compared seh veh works like traditional notification callback scheme
node21:Wikipedia entry. Entry name: Microsoft_Windows. Entry content: microsoft windows microsoft windows group several graphical operating system families developed marketed sold microsoft family caters certain sector computing industry active microsoft windows families include windows nt windows iot may encompass subfamilies e.g windows server windows embedded compact windows ce defunct microsoft windows families include windows 9x windows mobile windows phone microsoft introduced operating environment named windows november 20 1985 graphical operating system shell ms-dos response growing interest graphical user interfaces guis microsoft windows came dominate world personal computer pc market 90 market share overtaking mac os introduced 1984 apple came see windows unfair encroachment innovation gui development implemented products lisa macintosh eventually settled court microsoft favor 1993 pcs windows still popular operating system however 2014 microsoft admitted losing majority overall operating system market android massive growth sales android smartphones 2014 number windows devices sold less 25 android devices sold comparison however may fully relevant two operating systems traditionally target different platforms still numbers server use windows comparable competitors show one third market share similar end user use recent version windows pcs tablets smartphones embedded devices windows 10 recent version server computers windows server version 1903 specialized version windows also runs xbox one video game console microsoft developer windows registered several trademarks denote family windows operating systems target specific sector computing industry 2014 following windows families actively developed following windows families longer developed term windows collectively describes several generations microsoft operating system products products generally categorized follows history windows dates back 1981 microsoft started work program called interface manager announced november 1983 apple lisa macintosh name windows windows 1.0 released november 1985 windows 1.0 compete apple operating system achieved little popularity windows 1.0 complete operating system rather extends ms-dos shell windows 1.0 program known ms-dos executive components included calculator calendar cardfile clipboard viewer clock control panel notepad paint reversi terminal write windows 1.0 allow overlapping windows instead windows tiled modal dialog boxes may appear windows microsoft sold included windows development libraries c development environment included numerous windows samples windows 2.0 released december 1987 popular predecessor features several improvements user interface memory management windows 2.03 changed os tiled windows overlapping windows result change led apple computer filing suit microsoft alleging infringement apple copyrights windows 2.0 also introduced sophisticated keyboard shortcuts could make use expanded memory windows 2.1 released two different versions windows/286 windows/386 windows/386 uses virtual 8086 mode intel 80386 multitask several dos programs paged memory model emulate expanded memory using available extended memory windows/286 spite name runs intel 8086 intel 80286 processors runs real mode make use high memory area addition full windows-packages runtime-only versions shipped early windows software third parties made possible run windows software ms-dos without full windows feature set early versions windows often thought graphical shells mostly ran top ms-dos use file system services however even earliest windows versions already assumed many typical operating system functions notably executable file format providing device drivers timer graphics printer mouse keyboard sound unlike ms-dos windows allowed users execute multiple graphical applications time cooperative multitasking windows implemented elaborate segment-based software virtual memory scheme allows run applications larger available memory code segments resources swapped thrown away memory became scarce data segments moved memory given application relinquished processor control windows 3.0 released 1990 improved design mostly virtual memory loadable virtual device drivers vxds allow windows share arbitrary devices multi-tasked dos applications windows 3.0 applications run protected mode gives access several megabytes memory without obligation participate software virtual memory scheme run inside address space segmented memory provides degree protection windows 3.0 also featured improvements user interface microsoft rewrote critical operations c assembly windows 3.0 first microsoft windows version achieve broad commercial success selling 2 million copies first six months windows 3.1 made generally available march 1 1992 featured facelift august 1993 windows workgroups special version integrated peer-to-peer networking features version number 3.11 released sold along windows 3.1 support windows 3.1 ended december 31 2001 windows 3.2 released 1994 updated version chinese version windows 3.1 update limited language version fixed issues related complex writing system chinese language windows 3.2 generally sold computer manufacturers ten-disk version ms-dos also simplified chinese characters basic output translated utilities next major consumer-oriented release windows windows 95 released august 24 1995 still remaining ms-dos-based windows 95 introduced support native 32-bit applications plug play hardware preemptive multitasking long file names 255 characters provided increased stability predecessors windows 95 also introduced redesigned object oriented user interface replacing previous program manager start menu taskbar windows explorer shell windows 95 major commercial success microsoft ina fried cnet remarked time windows 95 finally ushered market 2001 become fixture computer desktops around world microsoft published four oem service releases osr windows 95 roughly equivalent service pack first osr windows 95 also first version windows bundled microsoft web browser internet explorer mainstream support windows 95 ended december 31 2000 extended support windows 95 ended december 31 2001 windows 95 followed release windows 98 june 25 1998 introduced windows driver model support usb composite devices support acpi hibernation support multi-monitor configurations windows 98 also included integration internet explorer 4 active desktop aspects windows desktop update series enhancements explorer shell also made available windows 95 may 1999 microsoft released windows 98 second edition updated version windows 98 windows 98 se added internet explorer 5.0 windows media player 6.2 amongst upgrades mainstream support windows 98 ended june 30 2002 extended support windows 98 ended july 11 2006 september 14 2000 microsoft released windows millennium edition last dos-based version windows windows incorporated visual interface enhancements windows nt-based counterpart windows 2000 faster boot times previous versions however required removal ability access real mode dos environment removing compatibility older programs expanded multimedia functionality including windows media player 7 windows movie maker windows image acquisition framework retrieving images scanners digital cameras additional system utilities system file protection system restore updated home networking tools however windows faced criticism speed instability along hardware compatibility issues removal real mode dos support pc world considered windows one worst operating systems microsoft ever released 4th worst tech product time november 1988 new development team within microsoft included former digital equipment corporation developers dave cutler mark lucovsky began work revamped version ibm microsoft os/2 operating system known nt os/2 nt os/2 intended secure multi-user operating system posix compatibility modular portable kernel preemptive multitasking support multiple processor architectures however following successful release windows 3.0 nt development team decided rework project use extended 32-bit port windows api known win32 instead os/2 win32 maintained similar structure windows apis allowing existing windows applications easily ported platform also supported capabilities existing nt kernel following approval microsoft staff development continued windows nt first 32-bit version windows however ibm objected changes ultimately continued os/2 development first release resulting operating system windows nt 3.1 named associate windows 3.1 released july 1993 versions desktop workstations servers windows nt 3.5 released september 1994 focusing performance improvements support novell netware followed windows nt 3.51 may 1995 included additional improvements support powerpc architecture windows nt 4.0 released june 1996 introducing redesigned interface windows 95 nt series february 17 2000 microsoft released windows 2000 successor nt 4.0 windows nt name dropped point order put greater focus windows brand next major version windows nt windows xp released october 25 2001 introduction windows xp aimed unify consumer-oriented windows 9x series architecture introduced windows nt change microsoft promised would provide better performance dos-based predecessors windows xp would also introduce redesigned user interface including updated start menu task-oriented windows explorer streamlined multimedia networking features internet explorer 6 integration microsoft .net passport services modes help provide compatibility software designed previous versions windows remote assistance functionality retail windows xp marketed two main editions home edition targeted towards consumers professional edition targeted towards business environments power users included additional security networking features home professional later accompanied media center edition designed home theater pcs emphasis support dvd playback tv tuner cards dvr functionality remote controls tablet pc edition designed mobile devices meeting specifications tablet computer support stylus pen input additional pen-enabled applications mainstream support windows xp ended april 14 2009 extended support ended april 8 2014 windows 2000 microsoft also changed release schedules server operating systems server counterpart windows xp windows server 2003 released april 2003 followed december 2005 windows server 2003 r2 lengthy development process windows vista released november 30 2006 volume licensing january 30 2007 consumers contained number new features redesigned shell user interface significant technical changes particular focus security features available number different editions subject criticism drop performance longer boot time criticism new uac stricter license agreement vista server counterpart windows server 2008 released early 2008 july 22 2009 windows 7 windows server 2008 r2 released rtm release manufacturing former released public 3 months later october 22 2009 unlike predecessor windows vista introduced large number new features windows 7 intended focused incremental upgrade windows line goal compatible applications hardware windows vista already compatible windows 7 multi-touch support redesigned windows shell updated taskbar home networking system called homegroup performance improvements windows 8 successor windows 7 released generally october 26 2012 number significant changes made windows 8 including introduction user interface based around microsoft metro design language optimizations touch-based devices tablets all-in-one pcs changes include start screen uses large tiles convenient touch interactions allow display continually updated information new class apps designed primarily use touch-based devices changes include increased integration cloud services online platforms social networks microsoft onedrive formerly skydrive xbox live services windows store service software distribution new variant known windows rt use devices utilize arm architecture update windows 8 called windows 8.1 released october 17 2013 includes features new live tile sizes deeper onedrive integration many revisions windows 8 windows 8.1 subject criticism removal start menu september 30 2014 microsoft announced windows 10 successor windows 8.1 released july 29 2015 addresses shortcomings user interface first introduced windows 8 changes pc include return start menu virtual desktop system ability run windows store apps within windows desktop rather full-screen mode windows 10 said available update qualified windows 7 sp1 windows 8.1 windows phone 8.1 devices get windows 10 application windows 7 windows 8.1 windows update windows 7 february 2017 microsoft announced migration windows source code repository perforce git migration involved 3.5 million separate files 300 gigabyte repository may 2017 90 percent engineering team uses git 8500 commits 1760 windows builds per day multilingual support built windows since windows 3 language keyboard interface changed region language control panel components supported input languages input method editors automatically installed windows installation windows xp earlier files east asian languages chinese right-to-left scripts arabic may need installed separately also said control panel third-party imes may also installed user feels provided one insufficient needs interface languages operating system free download languages limited certain editions windows language interface packs lips redistributable may downloaded microsoft download center installed edition windows xp later translate windows interface require certain base language language windows originally shipped used languages emerging markets full language packs translates complete operating system available specific editions windows ultimate enterprise editions windows vista 7 editions windows 8 8.1 rt except single language require specific base language commonly used popular languages french chinese languages downloaded download center available optional updates windows update service except windows 8 interface language installed applications affected changes windows interface language availability languages depends application developers windows 8 windows server 2012 introduces new language control panel interface input languages simultaneously changed language packs regardless type downloaded central location pc settings app windows 8.1 windows server 2012 r2 also includes counterpart settings page changing interface language also changes language preinstalled windows store apps mail maps news certain microsoft-developed apps remote desktop limitations language packs however still effect except full language packs installed edition except single language caters emerging markets windows nt included support several different platforms x86-based personal computer became dominant professional world windows nt 4.0 predecessors supported powerpc dec alpha mips r4000 although platforms implement 64-bit computing operating system treated 32-bit however windows 2000 successor windows nt 4.0 dropped support platforms except third generation x86 known ia-32 newer 32-bit mode client line windows nt family still runs ia-32 although windows server line ceased supporting platform release windows server 2008 r2 introduction intel itanium architecture ia-64 microsoft released new versions windows support itanium versions windows xp windows server 2003 released time mainstream x86 counterparts windows xp 64-bit edition released 2005 last windows client operating systems support itanium windows server line continues support platform windows server 2012 windows server 2008 r2 last windows operating system support itanium architecture april 25 2005 microsoft released windows xp professional x64 edition windows server 2003 x64 editions support x86-64 simply x64 eighth generation x86 architecture windows vista first client version windows nt released simultaneously ia-32 x64 editions x64 still supported edition windows 8 known windows rt specifically created computers arm architecture arm still used windows smartphones windows 10 tablets windows rt updated starting windows 10 fall creators update later includes support pcs arm architecture windows ce officially known windows embedded compact edition windows runs minimalistic computers like satellite navigation systems mobile phones windows embedded compact based dedicated kernel dubbed windows ce kernel microsoft licenses windows ce oems device makers oems device makers modify create user interfaces experiences windows ce provides technical foundation windows ce used dreamcast along sega proprietary os console windows ce core windows mobile derived successor windows phone 7 based components windows ce 6.0 r3 windows ce 7.0 windows phone 8 however based nt-kernel windows 8 windows embedded compact confused windows xp embedded windows nt 4.0 embedded modular editions windows based windows nt kernel xbox os unofficial name given version windows runs xbox one specific implementation emphasis virtualization using hyper-v three operating systems running consisting core operating system second implemented games windows-like environment applications microsoft updates xbox one os every month updates downloaded xbox live service xbox subsequently installed using offline recovery images downloaded via pc windows 10-based core replaced windows 8-based one update new system sometimes referred windows 10 xbox one onecore xbox one system also allows backward compatibility xbox 360 xbox 360 system backwards compatible original xbox 2017 microsoft announced would start using git open source version control system created linus torvalds microsoft previously used proprietary version control system called source depot microsoft began integrate git team foundation server 2013 windows continued rely source depot however decision came complexity windows codebase especially well suited decentralized nature linux development git originally created manage git repository contains complete history files proved unworkable windows developers cloning repository takes several hours microsoft working new project called virtual file system git vfsforgit address challenges according net applications tracks use operating systems devices active web windows used operating-system family personal computers july 2017 close 90 usage share including personal computers kinds e.g. desktops laptops mobile devices windows oses accounted 35.24 usage share july 2017 compared android highest 41.24 ios 13.22 macos 4.64 according statcounter tracks use operating systems use devices active web windows used less half market developing countries also developed ones—such united states use windows desktops plurality operating system fallen 46.18 united kingdom ireland numbers easiest monthly numbers find track real use may mirror installed base sales numbers recent years devices consistent server numbers next section terms number devices shipped operating system installed smartphones windows phone third-most-shipped os 2.6 android 82.8 ios 13.9 second quarter 2015 according idc across pcs mobile devices 2014 windows oses second-most-shipped 333 million devices 14 android 1.2 billion 49 ahead ios macos combined 263 million 11 use latest version windows 10 exceeded windows 7 globally since early 2018 developed countries japan australia us windows 10 already popular version since early 2017 usage share windows serversthose running web servers also kinds servers 33.6 consumer versions windows originally designed ease-of-use single-user pc without network connection security features built outset however windows nt successors designed security including network multi-user pcs initially designed internet security mind much since first developed early 1990s internet use less prevalent design issues combined programming errors e.g buffer overflows popularity windows means frequent target computer worm virus writers june 2005 bruce schneier counterpane internet security reported seen 1,000 new viruses worms previous six months 2005 kaspersky lab found around 11,000 malicious programs—viruses trojans back-doors exploits written windows microsoft releases security patches windows update service approximately month usually second tuesday month although critical updates made available shorter intervals necessary versions windows including windows 2000 sp3 windows xp updates automatically downloaded installed user selects result service pack 2 windows xp well service pack 1 windows server 2003 installed users quickly otherwise might windows 9x series offered option profiles multiple users concept access privileges allow concurrent access true multi-user operating systems addition implemented partial memory protection accordingly widely criticised lack security windows nt series operating systems contrast true multi-user implement absolute memory protection however lot advantages true multi-user operating system nullified fact prior windows vista first user account created setup process administrator account also default new accounts though windows xp limited accounts majority home users change account type fewer rights – partially due number programs unnecessarily required administrator rights – home users ran administrator time windows vista changes introducing privilege elevation system called user account control logging standard user logon session created token containing basic privileges assigned way new logon session incapable making changes would affect entire system logging user administrators group two separate tokens assigned first token contains privileges typically awarded administrator second restricted token similar standard user would receive user applications including windows shell started restricted token resulting reduced privilege environment even administrator account application requests higher privileges run administrator clicked uac prompt confirmation consent given including administrator credentials account requesting elevation member administrators group start process using unrestricted token leaked documents published wikileaks codenamed vault 7 dated 2013–2016 detail capabilities cia perform electronic surveillance cyber warfare ability compromise operating systems microsoft windows august 2019 computer experts reported bluekeep security vulnerability potentially affects older unpatched microsoft windows versions via program remote desktop protocol allowing possibility remote code execution may include related flaws collectively named dejablue affecting newer windows versions i.e. windows 7 recent versions well addition experts reported microsoft security vulnerability based legacy code involving microsoft ctf ctfmon ctfmon.exe affects windows versions older windows xp version recent windows 10 versions patch correct flaw currently available windows versions windows nt 3 based file system permission system referred agdlp accounts global local permissions file permissions applied file/folder form 'local group 'global groups members global groups hold groups users depending different windows versions used system varies vendor products linux netware due 'static allocation permission applied directory file folder however using process aglp/agdlp/agudlp allows small number static permissions applied allows easy changes account groups without reapplying file permissions files folders january 6 2005 microsoft released beta version microsoft antispyware based upon previously released giant antispyware february 14 2006 microsoft antispyware became windows defender release beta 2 windows defender freeware program designed protect spyware unwanted software windows xp windows server 2003 users genuine copies microsoft windows freely download program microsoft web site windows defender ships part windows vista 7 windows 8 windows defender microsoft security essentials combined single program named windows defender based microsoft security essentials borrowing features user interface although enabled default turned use another anti-virus solution windows malicious software removal tool optional microsoft safety scanner two free security products offered microsoft windows 10 anniversary update microsoft introduced limited periodic scanning feature allows windows defender scan detect remove threats third-party anti-virus software missed advanced threat protection service introduced enterprise users new service uses cloud service detect take actions advanced network attacks article based report symantec internetnews.com described microsoft windows fewest number patches shortest average patch development time five operating systems monitored last six months 2006 study conducted kevin mitnick marketing communications firm avantgarde 2004 found unprotected unpatched windows xp system service pack 1 lasted four minutes internet compromised unprotected also unpatched windows server 2003 system compromised connected internet 8 hours computer running windows xp service pack 2 compromised aol national cyber security alliance online safety study october 2004 determined 80 windows users infected least one spyware/adware product much documentation available describing increase security microsoft windows products typical suggestions include deploying microsoft windows behind hardware software firewall running anti-virus anti-spyware software installing patches become available windows update owing operating system popularity number applications released aim provide compatibility windows applications either compatibility layer another operating system standalone system run software written windows box include
node22:Wikipedia entry. Entry name: Transport_Sample_Protocol. Entry content: transport sample protocol transport sample protocol tsp open source network protocol sampling data based tcp/ip allows synchronous asynchronous sample delivery implementations linux windows solaris osf1 vxworks c java released gnu lesser general public license lgpl tsp developed use satellite validation benches
node23:Wikipedia entry. Entry name: Global_Address_Space_Programming_Interface. Entry content: global address space programming interface global address space programming interface gpi application programming interface api development scalable asynchronous fault tolerant parallel applications implementation partitioned global address space programming model gpi developed fraunhofer institute industrial mathematics itwm since 2005 initially known fvm fraunhofer virtual machine 2009 name changed global address programming interface gpi 2011 fraunhofer itwm partners fraunhofer scai tud t-systems sfr dlr kit fzj dwd scapos initiated launched gaspi project define novel specification api gaspi based gpi make novel specification reliable scalable universal tool hpc community gpi-2 first open source implementation standard software freely available application developers researchers licenses commercial use available scapos ag gpi completely replaced mpi fraunhofer itwm products research based new gpi-2 modern hardware typically involves hierarchy memory respect bandwidth latency read write accesses within hierarchy non-uniform memory access numa partitions solid state devices ssds graphical processing unit gpu memory many integrated cores mic memory memory segments supposed map variety hardware layers software layer spirit pgas approach gpi segments may globally accessible every thread every gpi process gpi segments also used leverage different memory models within single application even run different applications group subset ranks group members common collective operations collective operation group restricted ranks forming group initial group gaspi_group_all ranks members forming group involves 3 steps creation addition commit operations must performed ranks forming group creation performed using codice_1 operation successful ranks added created group using codice_2 able use created group ranks added must commit group performed using codice_3 collective operation ranks group one-sided asynchronous communication basic communication mechanism provided gpi-2 one-sided communication comes two flavors read write operations single list allocated segments moreover write operations extended notifications enable remote completion events remote rank react one-sided operations non-blocking asynchronous allowing program continue execution along data transfer mechanisms communication gpi-2 following codice_4 possibility use different queues communication requests request submitted one queues queues allow scalability used channels different types requests similar types requests queued get synchronised together independently ones separation concerns gpi-2 provides atomic operations variables manipulated atomically two basic atomic operations codice_5 codice_6 values used global shared variables synchronise processes events failure tolerant parallel programs require non-blocking communication calls gpi-2 provides timeout mechanism potentially blocking procedures timeouts procedures specified milliseconds instance gaspi_block pre-defined timeout value blocks procedure call completion gaspi_test another predefined timeout value blocks procedure shortest time possible i. e. time procedure call processes atomic portion work
node24:Wikipedia entry. Entry name: Operating_system. Entry content: operating system operating system os system software manages computer hardware software resources provides common services computer programs time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources hardware functions input output memory allocation operating system acts intermediary programs computer hardware although application code usually executed directly hardware frequently makes system calls os function interrupted operating systems found many devices contain computer cellular phones video game consoles web servers supercomputers dominant desktop operating system microsoft windows market share around 82.74 macos apple inc. second place 13.23 varieties linux collectively third place 1.57 mobile smartphone tablet combined sector use 2017 70 google android according third quarter 2016 data android smartphones dominant 87.5 percent growth rate 10.3 percent per year followed apple ios 12.1 percent per year decrease market share 5.2 percent operating systems amount 0.3 percent linux distributions dominant server supercomputing sectors specialized classes operating systems embedded real-time systems exist many applications single-tasking system run one program time multi-tasking operating system allows one program running concurrency achieved time-sharing available processor time divided multiple processes processes interrupted repeatedly time slices task-scheduling subsystem operating system multi-tasking may characterized preemptive co-operative types preemptive multitasking operating system slices cpu time dedicates slot programs unix-like operating systems solaris linux—as well non-unix-like amigaos—support preemptive multitasking cooperative multitasking achieved relying process provide time processes defined manner 16-bit versions microsoft windows used cooperative multi-tasking 32-bit versions windows nt win9x used preemptive multi-tasking single-user operating systems facilities distinguish users may allow multiple programs run tandem multi-user operating system extends basic concept multi-tasking facilities identify processes resources disk space belonging multiple users system permits multiple users interact system time time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources multiple users distributed operating system manages group distinct computers makes appear single computer development networked computers could linked communicate gave rise distributed computing distributed computations carried one machine computers group work cooperation form distributed system os distributed cloud computing context templating refers creating single virtual machine image guest operating system saving tool multiple running virtual machines technique used virtualization cloud computing management common large server warehouses embedded operating systems designed used embedded computer systems designed operate small machines like pdas less autonomy able operate limited number resources compact extremely efficient design windows ce minix 3 examples embedded operating systems real-time operating system operating system guarantees process events data specific moment time real-time operating system may single- multi-tasking multitasking uses specialized scheduling algorithms deterministic nature behavior achieved event-driven system switches tasks based priorities external events time-sharing operating systems switch tasks based clock interrupts library operating system one services typical operating system provides networking provided form libraries composed application configuration code construct unikernel specialized single address space machine image deployed cloud embedded environments early computers built perform series single tasks like calculator basic operating system features developed 1950s resident monitor functions could automatically run different programs succession speed processing operating systems exist modern complex forms early 1960s hardware features added enabled use runtime libraries interrupts parallel processing personal computers became popular 1980s operating systems made similar concept used larger computers 1940s earliest electronic digital systems operating systems electronic systems time programmed rows mechanical switches jumper wires plug boards special-purpose systems example generated ballistics tables military controlled printing payroll checks data punched paper cards programmable general purpose computers invented machine languages consisting strings binary digits 0 1 punched paper tape introduced sped programming process stern 1981 early 1950s computer could execute one program time user sole use computer limited period time would arrive scheduled time program data punched paper cards punched tape program would loaded machine machine would set work program completed crashed programs could generally debugged via front panel using toggle switches panel lights said alan turing master early manchester mark 1 machine already deriving primitive conception operating system principles universal turing machine later machines came libraries programs would linked user program assist operations input output generating computer code human-readable symbolic code genesis modern-day operating system however machines still ran single job time cambridge university england job queue one time washing line clothes line tapes hung different colored clothes-pegs indicate job-priority improvement atlas supervisor introduced manchester atlas commissioned 1962 considered many first recognisable modern operating system brinch hansen described significant breakthrough history operating systems 1950s many major features pioneered field operating systems mainframe computers including batch processing input/output interrupt buffering multitasking spooling runtime libraries link-loading programs sorting records files features included included application software option application programmers rather separate operating system used applications 1959 share operating system released integrated utility ibm 704 later 709 7090 mainframes although quickly supplanted ibsys/ibjob 709 7090 7094 1960s ibm os/360 introduced concept single os spanning entire product line crucial success system/360 machines ibm current mainframe operating systems distant descendants original system applications written os/360 still run modern machines os/360 also pioneered concept operating system keeps track system resources used including program data space allocation main memory file space secondary storage file locking update process terminated reason resources re-claimed operating system alternative cp-67 system s/360-67 started whole line ibm operating systems focused concept virtual machines operating systems used ibm s/360 series mainframes included systems developed ibm cos/360 compatibility operating system dos/360 disk operating system tss/360 time sharing system tos/360 tape operating system bos/360 basic operating system acp airline control program well non-ibm systems mts michigan terminal system music multi-user system interactive computing orvyl stanford timesharing system control data corporation developed scope operating system 1960s batch processing cooperation university minnesota kronos later nos operating systems developed 1970s supported simultaneous batch timesharing use like many commercial timesharing systems interface extension dartmouth basic operating systems one pioneering efforts timesharing programming languages late 1970s control data university illinois developed plato operating system used plasma panel displays long-distance time sharing networks plato remarkably innovative time featuring real-time chat multi-user graphical games 1961 burroughs corporation introduced b5000 mcp master control program operating system b5000 stack machine designed exclusively support high-level languages machine language assembler indeed mcp first os written exclusively high-level language espol dialect algol mcp also introduced many ground-breaking innovations first commercial implementation virtual memory development as/400 ibm made approach burroughs license mcp run as/400 hardware proposal declined burroughs management protect existing hardware production mcp still use today unisys clearpath/mcp line computers univac first commercial computer manufacturer produced series exec operating systems like early main-frame systems batch-oriented system managed magnetic drums disks card readers line printers 1970s univac produced real-time basic rtb system support large-scale time sharing also patterned dartmouth bc system general electric mit developed general electric comprehensive operating supervisor gecos introduced concept ringed security privilege levels acquisition honeywell renamed general comprehensive operating system gcos digital equipment corporation developed many operating systems various computer lines including tops-10 tops-20 time sharing systems 36-bit pdp-10 class systems widespread use unix tops-10 particularly popular system universities early arpanet community rt-11 single-user real-time os pdp-11 class minicomputer rsx-11 corresponding multi-user os late 1960s late 1970s several hardware capabilities evolved allowed similar ported software run one system early systems utilized microprogramming implement features systems order permit different underlying computer architectures appear others series fact 360s 360/40 except 360/165 360/168 microprogrammed implementations enormous investment software systems made since 1960s caused original computer manufacturers continue develop compatible operating systems along hardware notable supported mainframe operating systems include first microcomputers capacity need elaborate operating systems developed mainframes minis minimalistic operating systems developed often loaded rom known monitors one notable early disk operating system cp/m supported many early microcomputers closely imitated microsoft ms-dos became widely popular operating system chosen ibm pc ibm version called ibm dos pc dos 1980s apple computer inc. apple inc. abandoned popular apple ii series microcomputers introduce apple macintosh computer innovative graphical user interface gui mac os introduction intel 80386 cpu chip october 1985 32-bit architecture paging capabilities provided personal computers ability run multitasking operating systems like earlier minicomputers mainframes microsoft responded progress hiring dave cutler developed vms operating system digital equipment corporation would lead development windows nt operating system continues serve basis microsoft operating systems line steve jobs co-founder apple inc. started next computer inc. developed nextstep operating system nextstep would later acquired apple inc. used along code freebsd core mac os x macos latest name change gnu project started activist programmer richard stallman goal creating complete free software replacement proprietary unix operating system project highly successful duplicating functionality various parts unix development gnu hurd kernel proved unproductive 1991 finnish computer science student linus torvalds cooperation volunteers collaborating internet released first version linux kernel soon merged gnu user space components system software form complete operating system since combination two major components usually referred simply linux software industry naming convention stallman free software foundation remain opposed preferring name gnu/linux berkeley software distribution known bsd unix derivative distributed university california berkeley starting 1970s freely distributed ported many minicomputers eventually also gained following use pcs mainly freebsd netbsd openbsd unix originally written assembly language ken thompson wrote b mainly based bcpl based experience multics project b replaced c unix rewritten c developed large complex family inter-related operating systems influential every modern operating system see history unix-like family diverse group operating systems several major sub-categories including system v bsd linux name unix trademark open group licenses use operating system shown conform definitions unix-like commonly used refer large set operating systems resemble original unix unix-like systems run wide variety computer architectures used heavily servers business well workstations academic engineering environments free unix variants linux bsd popular areas four operating systems certified open group holder unix trademark unix hp hp-ux ibm aix descendants original system v unix designed run respective vendor hardware contrast sun microsystems solaris run multiple types hardware including x86 sparc servers pcs apple macos replacement apple earlier non-unix mac os hybrid kernel-based bsd variant derived nextstep mach freebsd unix interoperability sought establishing posix standard posix standard applied operating system although originally created various unix variants subgroup unix family berkeley software distribution family includes freebsd netbsd openbsd operating systems commonly found webservers although also function personal computer os internet owes much existence bsd many protocols commonly used computers connect send receive data network widely implemented refined bsd world wide web also first demonstrated number computers running os based bsd called nextstep 1974 university california berkeley installed first unix system time students staff computer science department began adding new programs make things easier text editors berkeley received new vax computers 1978 unix installed school undergraduates modified unix even order take advantage computer hardware possibilities defense advanced research projects agency us department defense took interest decided fund project many schools corporations government organizations took notice started use berkeley version unix instead official one distributed steve jobs upon leaving apple inc. 1985 formed next inc. company manufactured high-end computers running variation bsd called nextstep one computers used tim berners-lee first webserver create world wide web developers like keith bostic encouraged project replace non-free code originated bell labs done however sued two years legal disputes bsd project spawned number free derivatives netbsd freebsd 1993 openbsd netbsd 1995 macos formerly mac os x later os x line open core graphical operating systems developed marketed sold apple inc. latest pre-loaded currently shipping macintosh computers macos successor original classic mac os apple primary operating system since 1984 unlike predecessor macos unix operating system built technology developed next second half 1980s apple purchased company early 1997 operating system first released 1999 mac os x server 1.0 followed march 2001 client version mac os x v10.0 cheetah since six distinct client server editions macos released two merged os x 10.7 lion prior merging macos server edition macos server architecturally identical desktop counterpart usually ran apple line macintosh server hardware macos server included work group management administration software tools provide simplified access key network services including mail transfer agent samba server ldap server domain name server others mac os x v10.7 lion server aspects mac os x server integrated client version product re-branded os x dropping mac name server tools offered application linux kernel originated 1991 project linus torvalds university student finland posted information project newsgroup computer students programmers received support assistance volunteers succeeded creating complete functional kernel linux unix-like developed without unix code unlike bsd variants open license model linux kernel code available study modification resulted use wide range computing machinery supercomputers smart-watches although estimates suggest linux used 1.82 desktop laptop pcs widely adopted use servers embedded systems cell phones linux superseded unix many platforms used supercomputers including top 385 many computers also green500 different order linux runs top 10 linux also commonly used small energy-efficient computers smartphones smartwatches linux kernel used popular distributions red hat debian ubuntu linux mint google android chrome os chromium os microsoft windows family proprietary operating systems designed microsoft corporation primarily targeted intel architecture based computers estimated 88.9 percent total usage share web connected computers latest version windows 10 2011 windows 7 overtook windows xp common version use microsoft windows first released 1985 operating environment running top ms-dos standard operating system shipped intel architecture personal computers time 1995 windows 95 released used ms-dos bootstrap backwards compatibility win9x could run real-mode ms-dos 16-bit windows 3.x drivers windows released 2000 last version win9x family later versions based windows nt kernel current client versions windows run ia-32 x86-64 32-bit arm microprocessors addition itanium still supported older server version windows server 2008 r2 past windows nt supported additional architectures server editions windows widely used recent years microsoft expended significant capital effort promote use windows server operating system however windows usage servers widespread personal computers windows competes linux bsd server market share reactos windows-alternative operating system developed principles windows without using microsoft code many operating systems significant day longer amigaos os/2 ibm microsoft classic mac os non-unix precursor apple macos beos xts-300 risc os morphos haiku baremetal freemint still used niche markets continue developed minority platforms enthusiast communities specialist applications openvms formerly dec still active development hewlett-packard yet operating systems used almost exclusively academia operating systems education research operating system concepts typical example system fulfills roles minix example singularity used purely research another example oberon system designed eth zürich niklaus wirth jürg gutknecht group students former computer systems institute 1980s used mainly research teaching daily work wirth group operating systems failed win significant market share introduced innovations influenced mainstream operating systems least bell labs plan 9 components operating system exist order make different parts computer work together user software needs go operating system order use hardware whether simple mouse keyboard complex internet component aid firmware device drivers kernel provides basic level control computer hardware devices manages memory access programs ram determines programs get access hardware resources sets resets cpu operating states optimal operation times organizes data long-term non-volatile storage file systems media disks tapes flash memory etc operating system provides interface application program computer hardware application program interact hardware obeying rules procedures programmed operating system operating system also set services simplify development execution application programs executing application program involves creation process operating system kernel assigns memory space resources establishes priority process multi-tasking systems loads program binary code memory initiates execution application program interacts user hardware devices interrupts central operating systems provide efficient way operating system interact react environment alternative operating system watch various sources input events polling require action found older systems small stacks 50 60 bytes unusual modern systems large stacks interrupt-based programming directly supported modern cpus interrupts provide computer way automatically saving local register contexts running specific code response events even basic computers support hardware interrupts allow programmer specify code may run event takes place interrupt received computer hardware automatically suspends whatever program currently running saves status runs computer code previously associated interrupt analogous placing bookmark book response phone call modern operating systems interrupts handled operating system kernel interrupts may come either computer hardware running program hardware device triggers interrupt operating system kernel decides deal event generally running processing code amount code run depends priority interrupt example person usually responds smoke detector alarm answering phone processing hardware interrupts task usually delegated software called device driver may part operating system kernel part another program device drivers may relay information running program various means program may also trigger interrupt operating system program wishes access hardware example may interrupt operating system kernel causes control passed back kernel kernel processes request program wishes additional resources wishes shed resources memory triggers interrupt get kernel attention modern microprocessors cpu mpu support multiple modes operation cpus capability offer least two modes user mode supervisor mode general terms supervisor mode operation allows unrestricted access machine resources including mpu instructions user mode operation sets limits instruction use typically disallows direct access machine resources cpus might modes similar user mode well virtual modes order emulate older processor types 16-bit processors 32-bit one 32-bit processors 64-bit one power-on reset system begins supervisor mode operating system kernel loaded started boundary user mode supervisor mode also known kernel mode established supervisor mode used kernel low level tasks need unrestricted access hardware controlling memory accessed communicating devices disk drives video display devices user mode contrast used almost everything else application programs word processors database managers operate within user mode access machine resources turning control kernel process causes switch supervisor mode typically transfer control kernel achieved executing software interrupt instruction motorola 68000 codice_1 instruction software interrupt causes microprocessor switch user mode supervisor mode begin executing code allows kernel take control user mode programs usually access restricted set microprocessor instructions generally execute instructions could potentially cause disruption system operation supervisor mode instruction execution restrictions typically removed allowing kernel unrestricted access machine resources term user mode resource generally refers one cpu registers contain information running program n't allowed alter attempts alter resources generally causes switch supervisor mode operating system deal illegal operation program attempting example forcibly terminating killing program among things multiprogramming operating system kernel must responsible managing system memory currently use programs ensures program interfere memory already use another program since programs time share program must independent access memory cooperative memory management used many early operating systems assumes programs make voluntary use kernel memory manager exceed allocated memory system memory management almost never seen since programs often contain bugs cause exceed allocated memory program fails may cause memory used one programs affected overwritten malicious programs viruses may purposefully alter another program memory may affect operation operating system cooperative memory management takes one misbehaved program crash system memory protection enables kernel limit process access computer memory various methods memory protection exist including memory segmentation paging methods require level hardware support 80286 mmu n't exist computers segmentation paging certain protected mode registers specify cpu memory address allow running program access attempts access addresses trigger interrupt cause cpu re-enter supervisor mode placing kernel charge called segmentation violation seg-v short since difficult assign meaningful result operation usually sign misbehaving program kernel generally resorts terminating offending program reports error windows versions 3.1 level memory protection programs could easily circumvent need use general protection fault would produced indicating segmentation violation occurred however system would often crash anyway use virtual memory addressing paging segmentation means kernel choose memory program may use given time allowing operating system use memory locations multiple tasks program tries access memory n't current range accessible memory nonetheless allocated kernel interrupted way would program exceed allocated memory see section memory management unix kind interrupt referred page fault kernel detects page fault generally adjusts virtual memory range program triggered granting access memory requested gives kernel discretionary power particular application memory stored even whether actually allocated yet modern operating systems memory accessed less frequently temporarily stored disk media make space available use programs called swapping area memory used multiple programs memory area contains swapped exchanged demand virtual memory provides programmer user perception much larger amount ram computer really multitasking refers running multiple independent computer programs computer giving appearance performing tasks time since computers one two things one time generally done via time-sharing means program uses share computer time execute operating system kernel contains scheduling program determines much time process spends executing order execution control passed programs control passed process kernel allows program access cpu memory later control returned kernel mechanism another program may allowed use cpu so-called passing control kernel applications called context switch early model governed allocation time programs called cooperative multitasking model control passed program kernel may execute long wants explicitly returning control kernel means malicious malfunctioning program may prevent programs using cpu hang entire system enters infinite loop modern operating systems extend concepts application preemption device drivers kernel code operating system preemptive control internal run-times well philosophy governing preemptive multitasking ensuring programs given regular time cpu implies programs must limited much time allowed spend cpu without interrupted accomplish modern operating system kernels make use timed interrupt protected mode timer set kernel triggers return supervisor mode specified time elapsed see sections interrupts dual mode operation many single user operating systems cooperative multitasking perfectly adequate home computers generally run small number well tested programs amigaos exception preemptive multitasking first version windows nt first version microsoft windows enforced preemptive multitasking n't reach home user market windows xp since windows nt targeted professionals access data stored disks central feature operating systems computers store data disks using files structured specific ways order allow faster access higher reliability make better use drive available space specific way files stored disk called file system enables files names attributes also allows stored hierarchy directories folders arranged directory tree early operating systems generally supported single type disk drive one kind file system early file systems limited capacity speed kinds file names directory structures could use limitations often reflected limitations operating systems designed making difficult operating system support one file system many simpler operating systems support limited range options accessing storage systems operating systems like unix linux support technology known virtual file system vfs operating system unix supports wide array storage devices regardless design file systems allowing accessed common application programming interface api makes unnecessary programs knowledge device accessing vfs allows operating system provide programs access unlimited number devices infinite variety file systems installed use specific device drivers file system drivers connected storage device hard drive accessed device driver device driver understands specific language drive able translate language standard language used operating system access disk drives unix language block devices kernel appropriate device driver place access contents disk drive raw format may contain one file systems file system driver used translate commands used access specific file system standard set commands operating system use talk file systems programs deal file systems basis filenames directories/folders contained within hierarchical structure create delete open close files well gather various information including access permissions size free space creation modification dates various differences file systems make supporting file systems difficult allowed characters file names case sensitivity presence various kinds file attributes makes implementation single interface every file system daunting task operating systems tend recommend using support natively file systems specifically designed example ntfs windows ext3 reiserfs linux however practice third party drivers usually available give support widely used file systems general-purpose operating systems example ntfs available linux ntfs-3g ext2/3 reiserfs available windows third-party software support file systems highly varied among modern operating systems although several common file systems almost operating systems include support drivers operating systems vary file system support disk formats may installed windows file system usually limited application certain media example cds must use iso 9660 udf windows vista ntfs file system operating system installed possible install linux onto many types file systems unlike operating systems linux unix allow file system used regardless media stored whether hard drive disc cd dvd ... usb flash drive even contained within file located another file system device driver specific type computer software developed allow interaction hardware devices typically constitutes interface communicating device specific computer bus communications subsystem hardware connected providing commands and/or receiving data device end requisite interfaces operating system software applications specialized hardware-dependent computer program also operating system specific enables another program typically operating system applications software package computer program running operating system kernel interact transparently hardware device usually provides requisite interrupt handling necessary necessary asynchronous time-dependent hardware interfacing needs key design goal device drivers abstraction every model hardware even within class device different newer models also released manufacturers provide reliable better performance newer models often controlled differently computers operating systems expected know control every device future solve problem operating systems essentially dictate every type device controlled function device driver translate operating system mandated function calls device specific calls theory new device controlled new manner function correctly suitable driver available new driver ensures device appears operate usual operating system point view versions windows vista versions linux 2.6 driver execution co-operative meaning driver entered infinite loop would freeze system recent revisions operating systems incorporate kernel preemption kernel interrupts driver give tasks separates process receives response device driver gives tasks currently operating systems support variety networking protocols hardware applications using means computers running dissimilar operating systems participate common network sharing resources computing files printers scanners using either wired wireless connections networks essentially allow computer operating system access resources remote computer support functions could resources connected directly local computer includes everything simple communication using networked file systems even sharing another computer graphics sound hardware network services allow resources computer accessed transparently ssh allows networked users direct access computer command line interface client/server networking allows program computer called client connect via network another computer called server servers offer host various services network computers users services usually provided ports numbered access points beyond server ip address port number usually associated maximum one running program responsible handling requests port daemon user program turn access local hardware resources computer passing requests operating system kernel many operating systems support one vendor-specific open networking protocols well example sna ibm systems decnet systems digital equipment corporation microsoft-specific protocols smb windows specific protocols specific tasks may also supported nfs file access protocols like esound esd easily extended network provide sound local applications remote system sound hardware computer secure depends number technologies working properly modern operating system provides access number resources available software running system external devices like networks via kernel operating system must capable distinguishing requests allowed processed others processed systems may simply distinguish privileged non-privileged systems commonly form requester identity user name establish identity may process authentication often username must quoted username may password methods authentication magnetic cards biometric data might used instead cases especially connections network resources may accessed authentication reading files network share also covered concept requester identity authorization particular services resources accessible requester logged system tied either requester user account variously configured groups users requester belongs addition allow disallow model security system high level security also offers auditing options would allow tracking requests access resources reading file internal security security already running program possible possibly harmful requests must carried interrupts operating system kernel programs directly access hardware resources secured external security involves request outside computer login connected console kind network connection external requests often passed device drivers operating system kernel passed onto applications carried directly security operating systems long concern highly sensitive data held computers commercial military nature united states government department defense dod created trusted computer system evaluation criteria tcsec standard sets basic requirements assessing effectiveness security became vital importance operating system makers tcsec used evaluate classify select trusted operating systems considered processing storage retrieval sensitive classified information network services include offerings file sharing print services email web sites file transfer protocols ftp compromised security front line security hardware devices known firewalls intrusion detection/prevention systems operating system level number software firewalls available well intrusion detection/prevention systems modern operating systems include software firewall enabled default software firewall configured allow deny network traffic service application running operating system therefore one install running insecure service telnet ftp threatened security breach firewall would deny traffic trying connect service port alternative strategy sandbox strategy available systems meet popek goldberg virtualization requirements operating system running user programs native code instead either emulates processor provides host p-code based system java internal security especially relevant multi-user systems allows user system private files users tamper read internal security also vital auditing use since program potentially bypass operating system inclusive bypassing auditing every computer operated individual requires user interface user interface usually referred shell essential human interaction supported user interface views directory structure requests services operating system acquire data input hardware devices keyboard mouse credit card reader requests operating system services display prompts status messages output hardware devices video monitor printer two common forms user interface historically command-line interface computer commands typed line-by-line graphical user interface visual environment commonly wimp present modern computer systems support graphical user interfaces gui often include computer systems original implementation classic mac os gui integrated kernel technically graphical user interface operating system service incorporating support one operating system kernel allow gui responsive reducing number context switches required gui perform output functions operating systems modular separating graphics subsystem kernel operating system 1980s unix vms many others operating systems built way linux macos also built way modern releases microsoft windows windows vista implement graphics subsystem mostly user-space however graphics drawing routines versions windows nt 4.0 windows server 2003 exist mostly kernel space windows 9x little distinction interface kernel many computer operating systems allow user install create user interface desire x window system conjunction gnome kde plasma 5 commonly found setup unix unix-like bsd linux solaris systems number windows shell replacements released microsoft windows offer alternatives included windows shell shell separated windows numerous unix-based guis existed time derived x11 competition among various vendors unix hp ibm sun led much fragmentation though effort standardize 1990s cose cde failed various reasons eventually eclipsed widespread adoption gnome k desktop environment prior free software-based toolkits desktop environments motif prevalent toolkit/desktop combination basis upon cde developed graphical user interfaces evolve time example windows modified user interface almost every time new major version windows released mac os gui changed dramatically introduction mac os x 1999 real-time operating system rtos operating system intended applications fixed deadlines real-time computing applications include small embedded systems automobile engine controllers industrial robots spacecraft industrial control large-scale computing systems early example large-scale real-time operating system transaction processing facility developed american airlines ibm sabre airline reservations system embedded systems fixed deadlines use real-time operating system vxworks pikeos ecos qnx montavista linux rtlinux windows ce real-time operating system shares similar apis desktop windows shares none desktop windows codebase symbian os also rtos kernel eka2 starting version 8.0b embedded systems use operating systems palm os bsd linux although operating systems support real-time computing operating system development one complicated activities computing hobbyist may engage hobby operating system may classified one whose code directly derived existing operating system users active developers cases hobby development support homebrew computing device example simple single-board computer powered 6502 microprocessor development may architecture already widespread use operating system development may come entirely new concepts may commence modeling existing operating system either case hobbyist his/her developer may interact small sometimes unstructured group individuals like interests examples hobby operating system include syllable templeos application software generally written use specific operating system sometimes even specific hardware porting application run another os functionality required application may implemented differently os names functions meaning arguments etc requiring application adapted changed otherwise maintained unix first operating system written assembly language making portable systems different native pdp-11 cost supporting operating systems diversity avoided instead writing applications software platforms java qt abstractions already borne cost adaptation specific operating systems system libraries another approach operating system vendors adopt standards example posix os abstraction layers provide commonalities reduce porting costs
node25:Wikipedia entry. Entry name: List_of_security_assessment_tools. Entry content: list security assessment tools list available software hardware tools designed particularly suited various kinds security assessment security testing several operating systems tool suites provide bundles tools useful various types security assessment
node26:Wikipedia entry. Entry name: Windows_IoT. Entry content: windows iot windows iot formerly windows embedded family operating systems microsoft designed use embedded systems microsoft currently three different subfamilies operating systems embedded devices targeting wide market ranging small-footprint real-time devices point sale pos devices like kiosks windows embedded operating systems available original equipment manufacturers oems make available end users preloaded hardware addition volume license customers cases april 2018 microsoft released azure sphere another operating system designed iot applications running linux kernel mid-1998 microsoft worked venturcom company specialized software embedded systems windows nt embedded product windows nt embedded 4.0 got start 1998 small team developers microsoft project known within microsoft impala released 1999 windows nt embedded 4.0—a set tools database approximately 250 components allowed developers put together small windows nt 4.0 run-time images embedded devices tools allowed oems embedded developers create components encapsulating binaries add seamlessly windows nt embedded runtimes containing limited functionality devices minimum run-time images small 9 mb system featuring full win32 api shortly release early 2000 microsoft decided best take architecture make new product leveraging new windows code new windows embedded team formed leadership bruce beachman served product unit manager pum first windows embedded – started recruiting engineers within microsoft team set sights next version decision made stop development windows 2000 embedded start work windows xp embedded product called whistler plans drawn team expanded work started whistler embedded codenamed mantis component count risen 250 10,000—most device-driver components feature set embedded tools enriched include things like basic version control component scripting expandability tools also added make easier start blank slab hardware deploy embedded os quickly easily august 26 2001 beta 2 windows xp embedded released full release planned later year initial team consisted target designer component designer two-parts suite first version windows embedded suite first test team manager bombo sofa lead first xpe test team starting 2000 bruce beachman leadership microsoft shipped first version windows embedded xpe devcon windows hardware conference 2001 2002 bruce beachman left microsoft peter wilson took xpe team pum team merged windows deployment team released xpe sp1 devcon las vegas late 2003 microsoft rebranded windows embedded windows iot starting release embedded versions windows 10 windows 10 iot enterprise based windows 10 enterprise cbb/ltsc/ltsb/sac updated version embedded industry embedded standard plain unlabeled retail/thin client tablet small tablet versions available differing licensing windows 10 iot mobile based windows 10 mobile successor embedded handheld windows 10 iot mobile enterprise adds arm support multiple user profiles advanced lockdown capabilities otherwise identical normal mobile version windows 10 iot core considered successor windows embedded compact although maintains little compatibility optimized smaller lower-cost industry devices also provided free charge use devices like raspberry pi hobbyist use windows 10 iot core pro provides ability defer control updates licensed via distributors otherwise identical normal iot core version windows embedded compact previously known windows embedded ce windows ce version windows embedded small computers embedded systems including consumer electronics devices like set-top boxes video game consoles windows embedded compact modular real-time operating system specialized kernel run 1 mb memory comes platform builder tool used add modules installation image create custom installation depending device used windows embedded compact available arm mips superh x86 processor architectures microsoft made available specialized version windows embedded compact known windows mobile use mobile phones customized image windows embedded compact along specialized modules use mobile phones windows mobile available four variants windows mobile classic pocket pc windows mobile standard smartphones windows mobile professional pda/pocket pc phone edition windows mobile automotive communication/entertainment/information systems used automobiles modified versions windows mobile used portable media centers 2010 windows mobile replaced windows phone 7 also based windows embedded compact compatible previous products windows embedded compact 2013 real-time operating system runs arm x86 sh derivatives architectures included .net framework ui framework various open source drivers services 'modules windows embedded standard brand windows embedded operating systems designed provide enterprises device manufacturers freedom choose capabilities part industry devices intelligent system solutions intended build atms devices healthcare manufacturing industries creating industry-specific devices brand consists windows nt 4.0 embedded windows xp embedded windows embedded standard 2009 wes09 windows embedded standard 7 windows embedded 8 standard provides full win32 api windows embedded standard 2009 includes silverlight .net framework 3.5 internet explorer 7 windows media player 11 rdp 6.1 network access protection microsoft baseline security analyzer support managed windows server update services system center configuration manager windows embedded standard 7 based windows 7 previously codenamed windows embedded 'quebec windows embedded standard 7 includes windows vista windows 7 features aero superfetch readyboost windows firewall windows defender address space layout randomization windows presentation foundation silverlight 2 windows media center among several packages available ia-32 x64 versions released 2010 larger minimum footprint ~300 mb compared 40 mb xpe also requires product activation windows embedded standard 7 released april 27 2010 windows embedded 8 standard released march 20 2013 currently divided two brands fes products binary identical versions oses available retail licensed exclusively use embedded devices available ia-32 well x64 processors windows embedded pro formerly windows embedded enterprise brand consists non server fes products including windows nt workstation windows 2000 professional windows xp professional windows vista business ultimate windows 7 professional ultimate windows 8 pro windows 8.1 pro microsoft renamed windows embedded enterprise windows embedded pro starting windows embedded 8 pro windows embedded server brand consists fes server products including server home server sql server storage server dpm server isa server uag server tmg server unified data storage server etc various years including 2000 2003 2003 r2 2004 2005 2006 2007 2008 2008 r2 2012 2012 r2 etc windows embedded industry brand windows embedded operating systems industry devices point sale systems brand limited windows embedded point service operating system released 2006 based windows xp embedded microsoft also updated version windows embedded point service named windows embedded posready 2009 however windows embedded posready 7 based windows 7 sp1 released 2011 succeeded posready 2009 microsoft since changed name product windows embedded posready windows embedded industry microsoft released windows embedded 8 industry april 2013 followed 8.1 industry october 2013 windows embedded navready also called navigation ready plug-in component windows ce 5.0 useful building portable handheld navigation devices windows embedded automotive formerly microsoft auto windows ce automotive windows automotive windows mobile automotive embedded operating system based windows ce use computer systems automobiles latest release windows embedded automotive 7 announced october 19 2010 january 10 2011 microsoft announced windows embedded handheld 6.5 operating system compatibility windows mobile 6.5 presented enterprise handheld device targeting retailers delivery companies companies rely handheld computing windows embedded handheld retains backward compatibility legacy windows mobile applications windows embedded 8.1 handheld released manufacturing april 23 2014 known simply windows embedded 8 handheld we8h prior release designed next generation windows embedded handheld line-of-business handheld devices built windows phone 8.1 also compatibility five windows embedded 8.1 handheld devices released manufactured bluebird honeywell panasonic listed
node27:Wikipedia entry. Entry name: Webroot_Internet_Security_Essentials. Entry content: webroot internet security essentials webroot internet security essentials antivirus antispyware personal firewall security software back-up utility program additional personal pc security features originally launched october 21 2008 webroot internet security essentials first consumer security suite webroot webroot internet security essentials discontinued october 4 2011 webroot announced release secureanywhere™ line products time existing essentials licenses transitioned webroot secureanywhere essentials october 15 2012 product updated webroot secureanywhere® internet security plus latest version webroot secureanywhere internet security plus includes antivirus antispyware anti-phishing personal firewall password identity protection microsoft windows macos computers well protection android ios mobile devices reviews commented lack parental controls included security suite well difficulty configuring firewall
node28:Wikipedia entry. Entry name: Security_Administrator_Tool_for_Analyzing_Networks. Entry content: security administrator tool analyzing networks security administrator tool analyzing networks satan free software vulnerability scanner analyzing networked computers satan captured attention broad technical audience appearing pc magazine drawing threats united states department justice featured web interface complete forms enter targets tables display results context-sensitive tutorials appeared vulnerability found offended name satan software contained special command called repent rearranged letters program acronym satan santa tool developed dan farmer wietse venema neil gaiman drew artwork satan documentation satan designed help systems administrators automate process testing systems known vulnerabilities exploited via network particularly useful networked systems multiple hosts like security tools useful good malicious purposes – also useful would-be intruders looking systems security holes satan written mostly perl utilized web browser netscape mosaic lynx provide user interface easy use interface drove scanning process presents results summary format well reporting presence vulnerabilities satan also gathered large amounts general network information hosts connected subnets types machines services offered satan fallen popularity height popularity 1990s satan released 1995 development ceased 2006 sectools.org conducted security popularity poll developed list 100 network security analysis tools order popularity based responses 3,243 people results suggest satan replaced nmap nessus lesser degree sara security auditor research assistant saint
node29:Wikipedia entry. Entry name: Ghostscript. Entry content: ghostscript ghostscript suite software based interpreter adobe systems postscript portable document format pdf page description languages main purposes rasterization rendering page description language files display printing document pages conversion postscript pdf files ghostscript used raster image processor rip raster computer printers—for instance input filter line printer daemon—or rip engine behind postscript pdf viewers ghostscript also used file format converter postscript pdf converter codice_1 conversion program comes ghostscript distribution described documentation work-alike nearly functionality user interface adobe acrobat distiller product converter basically thin wrapper around ghostscript codice_2 output device supports pdf/a-1 pdf/a-2 well pdf/x-3 output ghostscript also serve back-end pdf raster image png tiff jpeg etc converter often combined postscript printer driver virtual printer pdf creators takes form language interpreter ghostscript also used general purpose programming environment ghostscript ported many operating systems including unix-like systems classic mac os openvms microsoft windows plan 9 ms-dos freedos os/2 atari tos amigaos ghostscript originally written l. peter deutsch gnu project released gnu general public license 1986 later deutsch formed aladdin enterprises dual-license ghostscript also proprietary license development fork aladdin ghostscript aladdin free public license despite name free software license forbids commercial distribution gnu ghostscript distributed gnu general public license version 8.54 2006 development branches merged dual-licensed releases still provided ghostscript currently owned artifex software maintained artifex software employees worldwide user community according artifex version 9.03 commercial version ghostscript longer freely distributed commercial purposes without purchasing license though gpl variant allows commercial distribution provided code using released gpl artifex point view aggregated software challenged court mupdf february 2013 ghostscript changed license gplv3 gnu agpl version 9.07 raised license compatibility questions example debian ghostscript guis view postscript pdf files screens scroll page forward page backward zoom text print page several sets free fonts supplied ghostscript intended metrically compatible common fonts attached postscript standard include ghostscript fonts developed postscript type 1 format converted truetype format usable current software popularly used within open-source community garamond font additionally improved upon urw core 35 fonts subsequently incorporated gnu freefont tex gyre
node30:Wikipedia entry. Entry name: Syntactic_sugar. Entry content: syntactic sugar computer science syntactic sugar syntax within programming language designed make things easier read express makes language sweeter human use things expressed clearly concisely alternative style may prefer example many programming languages provide special syntax referencing updating array elements abstractly array reference procedure two arguments array subscript vector could expressed codice_1 instead many languages provide syntax codice_2 similarly array element update procedure three arguments example codice_3 many languages provide syntax codice_4 construct language called syntactic sugar removed language without effect language functionality expressive power remain language processors including compilers static analyzers often expand sugared constructs fundamental constructs processing process sometimes called desugaring term syntactic sugar coined peter j. landin 1964 describe surface syntax simple algol-like programming language defined semantically terms applicative expressions lambda calculus centered lexically replacing λ later programming languages clu ml scheme extended term refer syntax within language could defined terms language core essential constructs convenient higher-level features could desugared decomposed subset fact usual mathematical practice building primitives building landin distinction essential language constructs syntactic sugar 1991 matthias felleisen proposed codification expressive power align widely held beliefs literature defined expressive mean without language constructs question program would completely reorganized programmers feel syntax usability features either unimportant outright frivolous notably special syntactic forms make language less uniform specification complex may cause problems programs become large complex view particularly widespread lisp community lisp simple regular syntax surface syntax easily modified example alan perlis quipped epigrams programming reference bracket-delimited languages syntactic sugar causes cancer semi-colons metaphor extended coining term syntactic salt indicates feature designed make harder write bad code specifically syntactic salt hoop programmers must jump prove know going rather express program action example java pascal assigning float value variable declared int without additional syntax explicitly stating intention result compile error c c++ automatically truncate floats assigned int however syntax semantics c hiding inherited class member compiler warning issued unless codice_29 keyword used specify hiding intentional avoid potential bugs owing similarity switch statement syntax c c++ c requires codice_30 non-empty codice_31 label codice_32 unless codice_33 codice_34 codice_35 used even though allow implicit fall-through using codice_33 specifying subsequent label produces c/c++-like fall-through syntactic salt may defeat purpose making code unreadable thus worsen quality – extreme cases essential part code may shorter overhead introduced satisfy language requirements alternative syntactic salt generating compiler warnings high probability code result mistake – practice common modern c/c++ compilers extensions syntactic saccharin syntactic syrup meaning gratuitous syntax make programming easier",wikics,nc
"Classify the wikipedia page represented by node12 using its subgraph data (text attributes and connections) as follows.

node0: HTTP debugging proxy created by Eric Lawrence, uses MITM interception, acquired by Telerik, involved in browser security teams at Microsoft and Google.  
node1: Network time protocol (RFC 868) uses port 37, sends 32-bit time data since 1900, operates via UDP/TCP, superseded by NTP.  
node2: Policies and practices to secure networks, including authentication, firewalls, encryption, and honeypots to prevent unauthorized access and cyberattacks.  
node3: DoS attack using spoofed TCP packets causing system lock, affects Windows, mitigated by firewalls and patches, discovered in 1997.  
node4: Mobile devices with touchscreens, MOSFETs, and Li-ion batteries; dominated by iOS/Android, face security and adoption challenges.  
node5: Cryptography researcher at UC Berkeley, advised voting system security, authored papers/books on computer security.  
node6: Android's acceleration API for heterogeneous hardware, supports GPU/CPUs, evolved with compute tools and Filterscript.  
node7: Compromised devices in botnets used for DDoS, spam, and fraud; includes smartphone botnets like Blue Frog and Symbian worms.  
node8: Italian/UK security firm researching Bluetooth vulnerabilities (BlueBag), featured at Black Hat conferences.  
node9: Cryptanalysis method targeting block ciphers via input-output differences, developed by Biham/Shamir, breaks DES-like algorithms.
node10: app store launched 2009, rebranded 2013, peaked at 120k apps, closed 2019. Supported Blackberry OS, high revenue per app, replaced by Google Play on Android devices.  
node11: Unix super-server managing network services, offers access control, logging, and security. Replaces inetd, uses config files in /etc/xinetd.d, supports TCP/UDP services.  
node12: attackers intercept communications, impersonate endpoints to eavesdrop/alter data. TLS vulnerabilities require mutual authentication; DNSSEC and tamper detection help mitigate.  
node13: 2017 OS with notification grouping, picture-in-picture, battery optimization, and Bluetooth 5. Includes Android Go for low-end devices, API 26, and Project Treble for updates.  
node14: relies on file permissions, sudo, shadow passwords, and access control lists. Manages users/groups, secures root via privilege separation, and uses tools like SELinux/AppArmor.  
node15: network protocol for error messages (e.g., ping/traceroute). Transmits operational data in IP packets; deprecated features like source quench. Used for diagnostics, but risks DoS attacks.  
node16: OS for vehicles, developed with Intel for manufacturers. Controls infotainment and car functions; first in Polestar 2 (2020). Differs from Android Auto by being built-in.
node17: Overview of global cybersecurity standards like NIST, ISO/IEC 27001, and their roles in risk management, certification, and compliance across industries.  
node18: Wi-Fi deauthentication attack disrupts connections via forged frames, often redirecting users to malicious access points for password theft.  
node19: Port Control Protocol (PCP) simplifies NAT/port forwarding, reducing traffic and battery use, succeeding NAT-PMP for carrier-grade networks.  
node20: Pre-shared keys (PSKs) enable symmetric encryption in Wi-Fi (e.g., WPA-PSK), vulnerable if leaked, requiring strong, random secrets.  
node21: Slide attack breaks block ciphers by exploiting cyclic key schedules, using ""slid pairs"" to bypass round dependencies.  
node22: The Art of Exploitation"" explains programming, networking, and cryptanalysis techniques for exploit development and defense.  
node23: Padding oracle attacks exploit CBC-mode padding validation to decrypt/encrypt data without knowing the encryption key.  
node24: Requirements Modeling Framework (RMF) manages reqIF-standard requirements, enabling interoperability in Eclipse-based projects.  
node25: Low Orbit Ion Cannon (LOIC) is an open-source DDoS tool used in Anonymous attacks, legal for testing but illegal for unauthorized use.  
node26: MotoMagx, Motorola's Linux-based OS (2007), failed against Android/Windows Mobile, supporting only GSM/UMTS devices.
node27: Wi-Fi Protected Access protocols (WPA, WPA2, WPA3) developed by Wi-Fi Alliance for wireless security, replacing WEP. Uses TKIP/AES; vulnerable to attacks like Dragonblood. WPA3 enhances security with 192-bit encryption and forward secrecy.  
node28: Network Time Protocol (NTP) synchronizes computer clocks over networks using hierarchical strata. Operates via UDP port 123, achieves millisecond accuracy. Vulnerabilities include security flaws; alternatives like sntp and ntpsec exist.  
node29: Meet-in-the-middle (MitM) attack reduces encryption cracking time via space-time tradeoffs. Targets schemes like Double DES, uses intermediate value storage. Multidimensional variants exploit block ciphers (e.g., GOST) with lower complexity.

the connection relationship among the nodes mentioned:
 <node0, node12>,<node1, node11>,<node1, node15>,<node1, node28>,<node2, node7>,<node2, node8>,<node2, node12>,<node2, node17>,<node2, node19>,<node2, node22>,<node2, node24>,<node2, node25>,<node3, node25>,<node4, node6>,<node4, node7>,<node4, node10>,<node4, node13>,<node4, node16>,<node4, node26>,<node4, node27>,<node5, node21>,<node6, node13>,<node6, node16>,<node7, node12>,<node7, node25>,<node9, node21>,<node9, node29>,<node11, node14>,<node12, node14>,<node12, node18>,<node12, node22>,<node12, node23>,<node12, node27>,<node12, node28>,<node12, node29>,<node13, node16>,<node15, node19>,<node15, node25>,<node15, node28>,<node18, node27>,<node19, node28>,<node20, node27>,<node21, node29>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",computer security,"node0: HTTP debugging proxy created by Eric Lawrence, uses MITM interception, acquired by Telerik, involved in browser security teams at Microsoft and Google.  
node1: Network time protocol (RFC 868) uses port 37, sends 32-bit time data since 1900, operates via UDP/TCP, superseded by NTP.  
node2: Policies and practices to secure networks, including authentication, firewalls, encryption, and honeypots to prevent unauthorized access and cyberattacks.  
node3: DoS attack using spoofed TCP packets causing system lock, affects Windows, mitigated by firewalls and patches, discovered in 1997.  
node4: Mobile devices with touchscreens, MOSFETs, and Li-ion batteries; dominated by iOS/Android, face security and adoption challenges.  
node5: Cryptography researcher at UC Berkeley, advised voting system security, authored papers/books on computer security.  
node6: Android's acceleration API for heterogeneous hardware, supports GPU/CPUs, evolved with compute tools and Filterscript.  
node7: Compromised devices in botnets used for DDoS, spam, and fraud; includes smartphone botnets like Blue Frog and Symbian worms.  
node8: Italian/UK security firm researching Bluetooth vulnerabilities (BlueBag), featured at Black Hat conferences.  
node9: Cryptanalysis method targeting block ciphers via input-output differences, developed by Biham/Shamir, breaks DES-like algorithms.
node10: app store launched 2009, rebranded 2013, peaked at 120k apps, closed 2019. Supported Blackberry OS, high revenue per app, replaced by Google Play on Android devices.  
node11: Unix super-server managing network services, offers access control, logging, and security. Replaces inetd, uses config files in /etc/xinetd.d, supports TCP/UDP services.  
node12: attackers intercept communications, impersonate endpoints to eavesdrop/alter data. TLS vulnerabilities require mutual authentication; DNSSEC and tamper detection help mitigate.  
node13: 2017 OS with notification grouping, picture-in-picture, battery optimization, and Bluetooth 5. Includes Android Go for low-end devices, API 26, and Project Treble for updates.  
node14: relies on file permissions, sudo, shadow passwords, and access control lists. Manages users/groups, secures root via privilege separation, and uses tools like SELinux/AppArmor.  
node15: network protocol for error messages (e.g., ping/traceroute). Transmits operational data in IP packets; deprecated features like source quench. Used for diagnostics, but risks DoS attacks.  
node16: OS for vehicles, developed with Intel for manufacturers. Controls infotainment and car functions; first in Polestar 2 (2020). Differs from Android Auto by being built-in.
node17: Overview of global cybersecurity standards like NIST, ISO/IEC 27001, and their roles in risk management, certification, and compliance across industries.  
node18: Wi-Fi deauthentication attack disrupts connections via forged frames, often redirecting users to malicious access points for password theft.  
node19: Port Control Protocol (PCP) simplifies NAT/port forwarding, reducing traffic and battery use, succeeding NAT-PMP for carrier-grade networks.  
node20: Pre-shared keys (PSKs) enable symmetric encryption in Wi-Fi (e.g., WPA-PSK), vulnerable if leaked, requiring strong, random secrets.  
node21: Slide attack breaks block ciphers by exploiting cyclic key schedules, using ""slid pairs"" to bypass round dependencies.  
node22: The Art of Exploitation"" explains programming, networking, and cryptanalysis techniques for exploit development and defense.  
node23: Padding oracle attacks exploit CBC-mode padding validation to decrypt/encrypt data without knowing the encryption key.  
node24: Requirements Modeling Framework (RMF) manages reqIF-standard requirements, enabling interoperability in Eclipse-based projects.  
node25: Low Orbit Ion Cannon (LOIC) is an open-source DDoS tool used in Anonymous attacks, legal for testing but illegal for unauthorized use.  
node26: MotoMagx, Motorola's Linux-based OS (2007), failed against Android/Windows Mobile, supporting only GSM/UMTS devices.
node27: Wi-Fi Protected Access protocols (WPA, WPA2, WPA3) developed by Wi-Fi Alliance for wireless security, replacing WEP. Uses TKIP/AES; vulnerable to attacks like Dragonblood. WPA3 enhances security with 192-bit encryption and forward secrecy.  
node28: Network Time Protocol (NTP) synchronizes computer clocks over networks using hierarchical strata. Operates via UDP port 123, achieves millisecond accuracy. Vulnerabilities include security flaws; alternatives like sntp and ntpsec exist.  
node29: Meet-in-the-middle (MitM) attack reduces encryption cracking time via space-time tradeoffs. Targets schemes like Double DES, uses intermediate value storage. Multidimensional variants exploit block ciphers (e.g., GOST) with lower complexity.","node0:Wikipedia entry. Entry name: Fiddler_(software). Entry content: fiddler software fiddler http debugging proxy server application originally written eric lawrence formerly program manager internet explorer development team microsoft fiddler captures http https traffic logs user review logging performed implementing man-in-the-middle interception using self-signed certificates 6 october 2003 eric lawrence released first official version fiddler 12 september 2012 fiddler acquired telerik lawrence joined company work fiddler full-time basis 23 december 2015 lawrence left telerik google chrome security team telerik continued develop fiddler june 2018 lawrence returned microsoft principal program manager
node1:Wikipedia entry. Entry name: Time_Protocol. Entry content: time protocol time protocol network protocol internet protocol suite defined 1983 rfc 868 jon postel k. harrenstein purpose provide site-independent machine readable date time time protocol may implemented transmission control protocol tcp user datagram protocol udp host connects server supports time protocol port 37 server sends time 32-bit unsigned integer binary format network byte order representing number seconds since 00:00 midnight 1 january 1900 gmt closes connection operation udp requires sending datagram server port connection setup udp fixed 32-bit data format means timestamp rolls approximately every 136 years first occurrence 7 february 2036 programs use time protocol must carefully designed use context-dependent information distinguish dates 1900 many unix-like operating systems used time protocol monitor synchronize clocks using rdate utility function superseded network time protocol ntp corresponding ntpdate utility ntp sophisticated various ways among resolution finer one second unix-like operating systems time protocol server built inetd xinetd daemon service usually enabled default may enabled adding following lines file /etc/inetd.conf reloading configuration
node2:Wikipedia entry. Entry name: Network_security. Entry content: network security network security consists policies practices adopted prevent monitor unauthorized access misuse modification denial computer network network-accessible resources network security involves authorization access data network controlled network administrator users choose assigned id password authenticating information allows access information programs within authority network security covers variety computer networks public private used everyday jobs conducting transactions communications among businesses government agencies individuals networks private within company others might open public access network security involved organizations enterprises types institutions title explains secures network well protecting overseeing operations done common simple way protecting network resource assigning unique name corresponding password network security starts authentication commonly username password since requires one detail authenticating user name—i.e. password—this sometimes termed one-factor authentication two-factor authentication something user 'has also used e.g. security token 'dongle atm card mobile phone three-factor authentication something user 'is also used e.g. fingerprint retinal scan authenticated firewall enforces access policies services allowed accessed network users though effective prevent unauthorized access component may fail check potentially harmful content computer worms trojans transmitted network anti-virus software intrusion prevention system ips help detect inhibit action malware anomaly-based intrusion detection system may also monitor network like wireshark traffic may logged audit purposes later high-level analysis newer systems combining unsupervised machine learning full network traffic analysis detect active network attackers malicious insiders targeted external attackers compromised user machine account communication two hosts using network may encrypted maintain privacy honeypots essentially decoy network-accessible resources may deployed network surveillance early-warning tools honeypots normally accessed legitimate purposes techniques used attackers attempt compromise decoy resources studied attack keep eye new exploitation techniques analysis may used tighten security actual network protected honeypot honeypot also direct attacker attention away legitimate servers honeypot encourages attackers spend time energy decoy server distracting attention data real server similar honeypot honeynet network set intentional vulnerabilities purpose also invite attacks attacker methods studied information used increase network security honeynet typically contains one honeypots security management networks different kinds situations home small office may require basic security large businesses may require high-maintenance advanced software hardware prevent malicious attacks hacking spamming order minimize susceptibility malicious attacks external threats network corporations often employ tools carry network security verifications networks subject attacks malicious sources attacks two categories passive network intruder intercepts data traveling network active intruder initiates commands disrupt network normal operation conduct reconnaissance lateral movement find gain access assets available via network types attacks include
node3:Wikipedia entry. Entry name: LAND. Entry content: land land local area network denial attack dos denial service attack consists sending special poison spoofed packet computer causing lock security flaw first discovered 1997 someone using alias m3lt resurfaced many years later operating systems windows server 2003 windows xp sp2 attack involves sending spoofed tcp syn packet connection initiation target host ip address open port source destination causes machine reply continuously however distinct tcp syn flood vulnerability land attacks since found services like snmp windows 88/tcp kerberos/global services systems design flaws would allow device accept request wire appearing causing repeated replies list vulnerable operating systems firewalls intercept discard poison packet thus protecting host attack operating systems released updates fixing security hole addition routers configured ingress egress filters block traffic destined destination source address space would include packets source destination ip addresses
node4:Wikipedia entry. Entry name: Smartphone. Entry content: smartphone smartphones class mobile phones multi-purpose mobile computing devices distinguished feature phones stronger hardware capabilities extensive mobile operating systems facilitate wider software internet including web browsing mobile broadband multimedia functionality including music video cameras gaming alongside core phone functions voice calls text messaging smartphones typically include various sensors leveraged software magnetometer proximity sensors barometer gyroscope accelerometer support wireless communications protocols bluetooth wi-fi satellite navigation early smartphones marketed primarily towards enterprise market attempting bridge functionality standalone personal digital assistant pda devices support cellular telephony limited bulky form short battery life immaturity wireless data services issues eventually resolved advances mosfet mos transistor lithium-ion battery mobile network technologies 2000s ntt docomo i-mode platform blackberry nokia symbian platform windows mobile began gain market traction models often featuring qwerty keyboards resistive touchscreen input emphasizing access push email wireless internet since unveiling iphone 2007 majority smartphones featured thin slate-like form factors large capacitive screens support multi-touch gestures rather physical keyboards offer ability users download purchase additional applications centralized store use cloud storage synchronization virtual assistants well mobile payment services improved hardware faster wireless communication due standards lte bolstered growth smartphone industry third quarter 2012 one billion smartphones use worldwide global smartphone sales surpassed sales figures feature phones early 2013 development smartphone enabled advances mosfet metal-oxide-silicon field-effect transistor semiconductor device fabrication mosfet mos transistor invented mohamed atalla dawon kahng bell labs 1959 basic building block computing devices smartphones mosfet scaling mos transistors get smaller decreasing power consumption enabled large-scale integration vlsi technology mos transistor counts integrated circuit chips increasing exponential pace predicted moore law continuous mosfet scaling eventually made possible build portable smart devices smartphones 1990s2000s typical smartphone built billions tiny mosfets 2019 used integrated circuits microprocessors memory chips power devices thin-film transistors tfts mobile displays advances mosfet power electronic technology also enabled development digital wireless mobile networks essential smartphone wide adoption power mosfet ldmos lateral diffused mos rf cmos radio frequency cmos devices led development proliferation digital wireless mobile networks 1990s advances mosfet technology leading increasing bandwidth 2000s essential elements wireless mobile networks built mosfets including mobile tranceivers base station modules routers rf power amplifiers telecommunication circuits rf circuits radio transceivers networks 2g 3g 4g another important enabling factor lithium-ion battery became indispensable energy source smartphones lithium-ion battery invented john goodenough rachid yazami akira yoshino 1980s commercialized sony asahi kasei 1991 advances mosfet technology enabling smaller integrated circuit chips improving wireless mobile networks ibm engineer frank canova realised chip-and-wireless technology becoming small enough use handheld devices first commercially available device could properly referred smartphone began prototype called angler developed canova 1992 ibm demonstrated november year comdex computer industry trade show refined version marketed consumers 1994 bellsouth name simon personal communicator addition placing receiving cellular calls touchscreen-equipped simon could send receive faxes emails included address book calendar appointment scheduler calculator world time clock notepad well visionary mobile applications maps stock reports news ibm simon manufactured mitsubishi electric integrated features wireless personal digital assistant pda cellular radio technologies building ibm simon also featured liquid-crystal display lcd pc card support internal hardware includes nec vadem vg230 system-on-a-chip soc sony hitachi random-access memory ram chips intel hitachi flash memory chips cirrus logic modem chips simon commercially unsuccessful particularly due bulky form factor limited battery life using nicad batteries rather lithium-ion battery used modern smartphones term smart phone smartphone coined year introduction simon appearing print early 1995 describing phonewriter communicator beginning mid-late 1990s many people mobile phones carried separate dedicated pda device running early versions operating systems palm os newton os symbian windows ce/pocket pc operating systems would later evolve early mobile operating systems smartphones era hybrid devices combined existing familiar pda oses basic phone hardware results devices bulkier either dedicated mobile phones pdas allowed limited amount cellular internet access pda mobile phone manufacturers competed reducing size devices bulk smartphones combined high cost expensive data plans plus drawbacks expansion limitations decreased battery life compared separate standalone devices generally limited popularity early adopters business users needed portable connectivity march 1996 hewlett-packard released omnigo 700lx modified hp 200lx palmtop pc nokia 2110 mobile phone piggybacked onto rom-based software support 640×200 resolution cga compatible four-shade gray-scale lcd screen could used place receive calls create receive text messages emails faxes also 100 dos 5.0 compatible allowing run thousands existing software titles including early versions windows august 1996 nokia released nokia 9000 communicator digital cellular pda based nokia 2110 integrated system based pen/geos 3.0 operating system geoworks two components attached hinge became known clamshell design display physical qwerty keyboard pda provided e-mail calendar address book calculator notebook applications text-based web browsing could send receive faxes closed device could used digital cellular telephone june 1999 qualcomm released pdq smartphone cdma digital pcs smartphone integrated palm pda internet connectivity subsequent landmark devices included 1999 japanese wireless provider ntt docomo launched i-mode new mobile internet platform provided data transmission speeds 9.6 kilobits per second access web services available platform online shopping ntt docomo i-mode used chtml language restricted aspects traditional html favor increasing data speed devices limited functionality small screens limited bandwidth allowed phones use slower data speeds available rise i-mode helped ntt docomo accumulate estimated 40 million subscribers end 2001 ranked first market capitalization japan second globally power would later wane face rise 3g new phones advanced wireless network capabilities japanese cell phones increasingly diverged global standards trends offer forms advanced services functionality mobile payments near-field communication nfc 1seg mobile television smartphones still rare outside japan introduction danger hiptop 2002 saw moderate success among u.s. consumers t-mobile sidekick later mid-2000s business users u.s. started adopt devices based microsoft windows mobile blackberry smartphones research motion american users popularized term crackberry 2006 due blackberry addictive nature outside u.s. japan nokia seeing success smartphones based symbian originally developed psion personal organisers popular smartphone os europe middle late 2000s initially nokia symbian smartphones focused business eseries similar windows mobile blackberry devices time 2006 onwards nokia started producing consumer-focused smartphones popularized entertainment-focused nseries 2010 symbian world widely used smartphone operating system 2000s common smartphones physical t9 numeric keypad qwerty keyboard either candybar sliding form factor smartphones resistive touchscreens allowed virtual keyboards handwriting input finger stylus thus also allowing easy entry asian characters 2007 lg prada first mobile phone released large capacitive touchscreen later year apple computer introduced iphone iphone also designed around large capacitive touchscreen added support multi-touch gestures interactions pinching zoom photos web pages phones notable abandoning use stylus keyboard keypad typical smartphones time favor capacitive touchscreen direct finger input input type invention touchscreen smartphone often attributed apple iphone n't first phone touchscreen although made smartphone know today something mainstream due company popularity us lesser extent worldwide made interacting smartphones touchscreen popular following iphone success despite high retail price us 500 smartphone manufacturers started use basic design iphone iphone first smartphone conventional terms ... platform device allows software installed year later followed platforms like palmos symbian windows mobile allowing apps installed apple app store online distribution platform present phone controlled monetized apple became common means smartphone software distribution installation first iphone also faced criticism supporting latest 3g wireless network standards praised hardware software design june 2007 release met heavy demand customers waiting lines outside apple store locations among first purchase screen-focused hardware phones centered around capacitive touchscreen stimulated software focus features web browser designed render full web pages opposed stripped wap services multimedia functionality videos online services maps apps key factor success form factor advantages design around capacitive touchscreen affected development another smartphone os platform android blackberry-like prototype device scrapped favor touchscreen device slide-out physical keyboard google engineers thought time touchscreen could completely replace physical keyboard buttons first android device htc dream released september 2008 although android adoption relatively slow first started gaining widespread popularity 2010 largely due functionality low price early 2012 dominated smartphone market share worldwide continues day android based around modified linux kernel makes linux widely used operating system worldwide also makes android widely used general purpose operating system worldwide apple iphones widespread rich developed countries relatively poor developing countries iphone high end android smartphone considered luxury and/or part social status android iphone devices popularized smartphone form factor based large capacitive touchscreen led decline earlier keyboard- keypad-focused platforms microsoft instance discontinued windows mobile started new touchscreen-oriented os scratch called windows phone nokia abandoned symbian partnered microsoft use windows phone smartphones windows phone became third-most-popular smartphone os replaced windows 10 mobile declined share become largely irrelevant less 0.5 smartphone market palm replaced palm os webos blackberry limited formerly known research motion known phones full qwerty keyboard screen made new platform based qnx blackberry 10 possible control device without press physical buttons mid-2010s almost smartphones touchscreen-only android iphone smartphones dominated market early 2010s larger smartphones screen sizes least 5.5 inches diagonal dubbed phablets began achieve popularity samsung galaxy note series gaining notably wide adoption 2013 huawei launched huawei mate series sports 6.1-inch hd 1280 x 720 ips+ lcd display considered quite large back day 2013 fairphone launched first socially ethical smartphone london design festival address concerns regarding sourcing materials manufacturing followed shiftphone 2015 late 2013 qsalpha commenced production smartphone designed entirely around security encryption identity protection companies began release smartphones incorporating flexible displays create curved form factors samsung galaxy round lg g flex october 2013 motorola mobility announced project ara concept modular smartphone platform would allow users customize upgrade phones add-on modules attached magnetically frame ara retained google following sale motorola mobility lenovo shelved 2016 year lg motorola unveiled smartphones featuring limited form modularity accessories lg g5 allowed accessories installed via removal battery compartment moto z utilizes accessories attached magnetically rear device first smartphone fingerprint reader motorola atrix 4g 2011 september 2013 iphone 5s unveiled first smartphone major u.s. carrier since atrix feature technology 2014 1440p displays began appear high-end smartphones 2015 sony released xperia z5 premium featuring 4k resolution display although images videos could actually rendered resolution software upscaled 1080p microsoft expanding upon concept motorola short-lived webtop unveiled functionality windows 10 operating system phones allows supported devices docked use pc-styled desktop environment major technologies began trend 2016 including focus virtual reality augmented reality experiences catered towards smartphones newly introduced usb-c connector improving lte technologies 2015 global median smartphone ownership 43 statista forecast 2.87 billion people would smartphones 2020 new trends smartphone displays began emerge 2017 lg samsung releasing flagship smartphones utilizing displays taller aspect ratios common ratio designs allow display larger diameter slimmer width 16:9 displays equivalent screen size another trend popularized year displays contained tab-like cut-outs top-centre—colloquially known notch —to contain front-facing camera sometimes sensors typically located along top bezel device designs allow edge-to-edge displays take nearly entire height device little bezel along top design characteristic popularized essential phone featured circular tab camera iphone x used wider tab contain camera facial scanning system 2018 first smartphones featuring fingerprint readers embedded within oled displays announced followed 2019 implementation using ultrasonic sensor samsung galaxy s10 2019 4.7-inches 5.5 inches become industry standard size companies abandoning smaller 4.7-inch displays smartphones foldable displays theorized possible manufacturing costs production processes feasible november 2018 startup company royole unveiled first commercially available foldable smartphone royole flexpai also month samsung presented prototype phone featuring infinity flex display developers conference smaller outer display cover larger tablet-sized display opened samsung stated also develop new polymer material coat display opposed glass early examples foldable phones manufacturers became subject rumors early 2019 samsung officially announced galaxy fold based previously-demonstrated prototype february 2019 originally-scheduled release late-april smartphones central processing units cpus similar computers optimised operate low power environments performance mobile cpu depends clock rate generally given multiples hertz also memory hierarchy challenges performance mobile phone cpus often appropriately given scores derived various standardized tests measure real effective performance commonly used applications one main characteristics smartphones screen depending device design screen fills nearly space device front surface many smartphone displays aspect ratio taller aspect ratios became common 2017 screen sizes measured diagonal inches phones screens larger 5.2 inches often called phablets smartphones screens 4.5 inches size commonly difficult use single hand since thumbs reach entire screen surface may need shifted around hand held one hand manipulated used place hands due design advances modern smartphones large screen sizes edge-to-edge designs compact builds improve ergonomics shift taller aspect ratios resulted phones larger screen sizes whilst maintaining ergonomics associated smaller 16:9 displays liquid-crystal displays common others ips led oled amoled displays displays integrated pressure-sensitive digitizers developed wacom samsung apple force touch system audio quality enhancing features voice lte hd voice appeared often available newer smartphones sound quality remain problem due design phone quality cellular network compression algorithms used long distance calls audio quality improved using voip application wifi cellphones small speakers user use speakerphone feature talk person phone without holding ear small speakers also used listen digital audio files music speech watch videos audio component without holding phone close ear end 2017 smartphone battery life become generally adequate however earlier smartphone battery life poor due weak batteries could handle significant power requirements smartphones computer systems color screens smartphone users purchase additional chargers use outside home work cars buying portable external battery packs external battery packs include generic models connected smartphone cable custom-made models piggyback onto smartphone case 2016 samsung recall millions galaxy note 7 smartphones due explosive battery issue consumer convenience wireless charging stations introduced hotels bars public spaces wide range accessories sold smartphones including cases screen protectors power charging cables wireless power stations usb on-the-go adapters connecting usb drives cases hdmi cable external monitor add-on batteries headphones combined headphone-microphones example allow person privately conduct calls device without holding ear bluetooth-enabled powered speakers enable users listen media smartphones wirelessly cases range relatively inexpensive rubber soft plastic cases provide moderate protection bumps good protection scratches expensive heavy-duty cases combine rubber padding hard outer shell cases book -like form cover user opens use device cover closed protects screen book -like cases additional pockets credit cards thus enabling people use wallets accessories include products sold manufacturer smartphone compatible products made manufacturers mobile operating system mobile os operating system phones tablets smartwatches mobile devices mobile operating systems combine features personal computer operating system features useful mobile handheld use usually including following considered essential modern mobile systems touchscreen cellular bluetooth wi-fi protected access wi-fi global positioning system gps mobile navigation video- single-frame picture cameras speech recognition voice recorder music player near field communication infrared blaster q1 2018 383 million smartphones sold 85.9 percent running android 14.1 percent running ios negligible number smartphones running oses android alone popular popular desktop operating system windows general smartphone use even without tablets exceeds desktop use mobile devices mobile communications abilities e.g. smartphones contain two mobile operating systemsthe main user-facing software platform supplemented second low-level proprietary real-time operating system operates radio hardware research shown low-level systems may contain range security vulnerabilities permitting malicious base stations gain high levels control mobile device mobile app computer program designed run mobile device smartphone term app short-form term software application introduction apple app store iphone ipod touch july 2008 popularized manufacturer-hosted online distribution third-party applications software computer programs focused single platform huge variety apps including video games music products business tools point smartphone application distribution depended third-party sources providing applications multiple platforms getjar handango handmark pocketgear following success app store smartphone manufacturers launched application stores google android market later renamed google play store rim blackberry app world android-related app stores like f-droid february 2014 93 mobile developers targeting smartphones first mobile app development since 1996 smartphone shipments positive growth november 2011 27 photographs created taken camera-equipped smartphones september 2012 study concluded 4 5 smartphone owners use device shop online global smartphone sales surpassed sales figures feature phones early 2013 worldwide shipments smartphones topped 1 billion units 2013 38 2012 725 million comprising 55 share mobile phone market 2013 42 2012 q1 2016 first time shipments dropped 3 percent year year situation caused maturing china market 2011 samsung highest shipment market share worldwide followed apple 2013 samsung 31.3 market share slight increase 30.3 2012 apple 15.3 decrease 18.7 2012 huawei lg lenovo 5 significantly better 2012 figures others 40 previous years figure apple lost market share although shipment volume still increased 12.9 rest significant increases shipment volumes 36–92 q1 2014 samsung 31 share apple 16 q4 2014 apple 20.4 share samsung 19.9 q2 2016 samsung 22.3 share apple 12.9 q1 2017 idc reported samsung first placed 80 million units followed apple 50.8 million huawei 34.6 million oppo 25.5 million vivo 22.7 million samsung mobile business half size apple revenue apple business increased rapidly years 2013 2017 2012 university southern california study found unprotected adolescent sexual activity common among owners smartphones study conducted rensselaer polytechnic institute rpi lighting research center lrc concluded smartphones backlit devices seriously affect sleep cycles persons might become psychologically attached smartphones resulting anxiety separated devices smombie combination smartphone zombie walking person using smartphone paying attention walk possibly risking accident process increasing social phenomenon issue slow-moving smartphone users led temporary creation mobile lane walking chongqing china issue distracted smartphone users led city augsburg germany embed pedestrian traffic lights pavement many countries mobile phones used provide mobile banking services may include ability transfer cash payments secure sms text message kenya m-pesa mobile banking service example allows customers mobile phone operator safaricom hold cash balances recorded sim cards cash deposited withdrawn m-pesa accounts safaricom retail outlets located throughout country transferred electronically person person used pay bills companies branchless banking successful south africa philippines pilot project bali launched 2011 international finance corporation indonesian bank bank mandiri another application mobile banking technology zidisha us-based nonprofit micro-lending platform allows residents developing countries raise small business loans web users worldwide zidisha uses mobile banking loan disbursements repayments transferring funds lenders united states borrowers rural africa mobile phones use internet mobile payments first trialled finland 1998 two coca-cola vending machines espoo enabled work sms payments eventually idea spread 1999 philippines launched country first commercial mobile payments systems mobile operators globe smart mobile phones make mobile payments via direct mobile billing schemes contactless payments phone point sale support near field communication nfc enabling contactless payments nfc-equipped mobile phones requires co-operation manufacturers network operators retail merchants mobile phone use driving—including calling text messaging playing media web browsing gaming using mapping apps operating phone features—is common controversial since widely considered dangerous due known distracted driving distracted operating motor vehicle shown increase risk accidents september 2010 us national highway traffic safety administration nhtsa reported 995 people killed drivers distracted phones march 2011 us insurance company state farm insurance announced results study showed 19 drivers surveyed accessed internet smartphone driving many jurisdictions prohibit use mobile phones driving egypt israel japan portugal singapore handheld hands-free calling mobile phone uses speakerphone banned countries including uk france many us states use calling handheld phones banned hands-free use permitted 2011 study reported 90 college students surveyed text initiate reply read driving scientific literature danger driving sending text message mobile phone texting driving limited simulation study university utah found sixfold increase distraction-related accidents texting due complexity smartphones began grow introduced additional difficulties law enforcement officials attempting distinguish one usage another drivers using devices apparent countries ban handheld hands-free usage rather ban handheld use officials easily tell function phone used simply looking driver lead drivers stopped using device illegally call fact using device legally example using phone incorporated controls car stereo gps satnav 2010 study reviewed incidence phone use cycling effects behavior safety 2013 national survey us reported number drivers reported using phones access internet driving risen nearly one four study conducted university vienna examined approaches reducing inappropriate problematic use mobile phones using phones driving accidents involving driver distracted call phone begun prosecuted negligence similar speeding united kingdom 27 february 2007 motorists caught using handheld phone driving three penalty points added license addition fine £60 increase introduced try stem increase drivers ignoring law japan prohibits use phones driving including use hands-free devices new zealand banned handheld phone use since 1 november 2009 many states united states banned text messaging phones driving illinois became 17th american state enforce law july 2010 30 states banned texting driving kentucky becoming recent addition july 15 public health law research maintains list distracted driving laws united states database laws provides comprehensive view provisions laws restrict use mobile devices driving 50 states district columbia 1992 first law passed december 1 2010 dataset contains information 22 dichotomous continuous categorical variables including example activities regulated e.g. texting versus talking hands-free versus handheld calls web browsing gaming targeted populations exemptions patent war samsung apple started latter claimed original galaxy android phone copied interfaceand possibly hardwareof apple ios iphone 3gs also smartphone patents licensing litigation involving sony mobile google apple inc. samsung microsoft nokia motorola htc huawei zte among others conflict part wider patent wars multinational technology software corporations secure increase market share companies granted patent sue prevent competitors using methods patent covers since 2010s number lawsuits counter-suits trade complaints based patents designs market smartphones devices based smartphone oses android ios increased significantly initial suits countersuits rulings license agreements major events began 2009 smartphone market stated grow rapidly 2012 apps allows sending receiving facsimile fax smartphone including facsimile data composed raster bi-level graphics generated directly digitally document image file formats rise number mobile medical apps market place government regulatory agencies raised concerns safety use applications concerns transformed regulation initiatives worldwide aim safeguarding users untrusted medical advice smartphone malware easily distributed insecure app store often malware hidden pirated versions legitimate apps distributed third-party app stores malware risk also comes known update attack legitimate application later changed include malware component users install notified app updated well one three robberies 2012 united states involved theft mobile phone online petition urged smartphone makers install kill switches devices 2014 apple find iphone google android device manager locate disable wipe data phones lost stolen blackberry protect os version 10.3.2 devices rendered unrecoverable even blackberry operating system recovery tools incorrectly authenticated dissociated account leaked documents published wikileaks codenamed vault 7 dated 2013–2016 detail capabilities united states central intelligence agency cia perform electronic surveillance cyber warfare including ability compromise operating systems smartphones including ios android guidelines mobile device security issued nist many organizations conducting private in-person meeting least one site recommends user switch smartphone disconnect battery using smartphones late night disturb sleep due blue light brightly lit screen affects melatonin levels sleep cycles effort alleviate issues several apps change color temperature screen warmer hue based time day reduce amount blue light generated developed android ios 9.3 integrated similar system-level functionality known night shift amazon released feature known blue shade fire os bellini 5.0 later also theorized users addicted use phones especially go bed result ego depletion many people also use phones alarm clocks also lead loss sleep pocket cameras difficulty producing bokeh images nowadays smartphones dual-lens cameras produce bokeh effect easily even rearrange level bokeh shooting iphone 7 plus debuted dual-lens camera back smartphone advanced smartphones may come 'quad cameras two dual-lens cameras honor 9 lite smartphone back front smartphone 13mp main lens 2mp lens capturing depth information evercoss u50a max smartphone 4 cameras costs less 100 huawei p20 pro smartphone triple lenses back smartphone launched bokeh camera smartphone optical zoom first lens 40mp rgb second lens 20mp monochrome third lens 8mp rgb telephoto 3x zoom enhanced 5x combination optical zoom megapixel lens 40mp rgb produce undeteriorated optical+digital zoom digital zoom without loss quality
node5:Wikipedia entry. Entry name: David_A._Wagner. Entry content: david a. wagner david a. wagner born 1974 professor computer science university california berkeley well-known researcher cryptography computer security member election assistance commission technical guidelines development committee tasked assisting eac drafting voluntary voting system guidelines also member accurate project wagner received a.b mathematics princeton university 1995 m.s computer science berkeley 1999 ph.d. computer science berkeley 2000 published two books 90 peer-reviewed scientific papers notable achievements include
node6:Wikipedia entry. Entry name: RenderScript. Entry content: renderscript renderscript component android operating system mobile devices offers api acceleration takes advantage heterogeneous hardware allows developers increase performance applications cost writing complex lower-level code provides developer three primary tools simple 3d rendering api compute api similar cuda c99-derived language renderscript added android 3.0 honeycomb android 4.1 renderscipt experimental 3d rendering api deprecated exists solely compute api android 4.2 added new capabilities script intrinsics blend blur well scriptgroups allow chain together related renderscript scripts execute one call recently google added filterscript subset renderscript allows developers write image processing operations filterscript using standard renderscript runtime api within stricter constraints ensure wider compatibility improved optimization across multi-core cpus gpus dsps filterscript less precise terms numeric datatype precision cross device compatible subset renderscript – mistaken renderscript replacement technology renderscript designed always run various android platforms regardless hardware type performance tuning done runtime renderscript portability depends upon device-specific drivers basic cpu-only driver provided every device exist specific chipset-provided renderscript drivers enable gpu usage e.g qualcomm specific drivers provided codice_1 android library renderscript designed tune tasks runtime efficiently split run concurrently underlying hardware android 4.2 renderscript expanded run gpu addition cpu supported systems
node7:Wikipedia entry. Entry name: Zombie_(computing). Entry content: zombie computing computing zombie computer connected internet compromised hacker computer virus trojan horse program used perform malicious tasks one sort another remote direction botnets zombie computers often used spread e-mail spam launch denial-of-service attacks dos attacks owners zombie computers unaware system used way owner tends unaware computers metaphorically compared fictional zombies coordinated ddos attack multiple botnet machines also resembles zombie horde attack depicted fictional zombie films zombie computers used extensively send e-mail spam 2005 estimated 50–80 spam worldwide sent zombie computers allows spammers avoid detection presumably reduces bandwidth costs since owners zombies pay bandwidth spam also greatly furthers spread trojan horses trojans self-replicating rely movement e-mails spam grow whereas worms spread means similar reasons zombies also used commit click fraud sites displaying pay-per-click advertising others host phishing money mule recruiting websites zombies used conduct distributed denial-of-service ddos attacks term refers orchestrated flooding target websites large numbers computers large number internet users making simultaneous requests website server intended result crashing prevention legitimate users accessing site variant type flooding known distributed degradation-of-service committed pulsing zombies distributed degradation-of-service moderated periodical flooding websites done intent slowing rather crashing victim site effectiveness tactic springs fact intense flooding quickly detected remedied pulsing zombie attacks resulting slow-down website access go unnoticed months even years notable incidents distributed denial- degradation-of-service attacks past include attack upon spews service 2003 one blue frog service 2006 2000 several prominent web sites yahoo ebay etc clogged standstill distributed denial service attack mounted ‘ mafiaboy ’ canadian teenager attack grc.com discussed length perpetrator 13-year-old probably sardis mississippi identified gibson research web site steve gibson disassembled 'bot zombie used attack traced distributor account research describes operation 'bot'-controlling irc channel beginning july 2009 similar botnet capabilities also emerged growing smartphone market examples include july 2009 wild release sexy space text message worm world first botnet capable sms worm targeted symbian operating system nokia smartphones later month researcher charlie miller revealed proof concept text message worm iphone black hat briefings also july united arab emirates consumers targeted etisalat blackberry spyware program 2010s security community divided real world potential mobile botnets august 2009 interview new york times cyber security consultant michael gregg summarized issue way point smart phones desktops '80s
node8:Wikipedia entry. Entry name: Secure_Network. Entry content: secure network secure network small research consulting company focusing information security based milano italy london united kingdom besides notability italy received international exposure research project bluetooth security co-sponsored f-secure codenamed bluebag also selected black hat briefings conference 2006 las vegas 2009 also organized seacure.it first international technical security conference ever held italy
node9:Wikipedia entry. Entry name: Differential_cryptanalysis. Entry content: differential cryptanalysis differential cryptanalysis general form cryptanalysis applicable primarily block ciphers also stream ciphers cryptographic hash functions broadest sense study differences information input affect resultant difference output case block cipher refers set techniques tracing differences network transformation discovering cipher exhibits non-random behavior exploiting properties recover secret key cryptography key discovery differential cryptanalysis generally attributed eli biham adi shamir late 1980s published number attacks various block ciphers hash functions including theoretical weakness data encryption standard des noted biham shamir des surprisingly resistant differential cryptanalysis small modifications algorithm would make much susceptible 1994 member original ibm des team coppersmith published paper stating differential cryptanalysis known ibm early 1974 defending differential cryptanalysis design goal according author steven levy ibm discovered differential cryptanalysis nsa apparently well aware technique ibm kept secrets coppersmith explains discussions nsa decided disclosure design considerations would reveal technique differential cryptanalysis powerful technique could used many ciphers turn would weaken competitive advantage united states enjoyed countries field cryptography within ibm differential cryptanalysis known t-attack tickle attack des designed resistance differential cryptanalysis mind contemporary ciphers proved vulnerable early target attack feal block cipher original proposed version four rounds feal-4 broken using eight chosen plaintexts even 31-round version feal susceptible attack contrast scheme successfully cryptanalyze des effort order 2 chosen plaintexts differential cryptanalysis usually chosen plaintext attack meaning attacker must able obtain ciphertexts set plaintexts choosing however extensions would allow known plaintext even ciphertext-only attack basic method uses pairs plaintext related constant difference difference defined several ways exclusive xor operation usual attacker computes differences corresponding ciphertexts hoping detect statistical patterns distribution resulting pair differences called differential statistical properties depend upon nature s-boxes used encryption attacker analyses differentials δ δ δ x ⊕ δ ⊕ x ⊕ denotes exclusive s-box basic attack one particular ciphertext difference expected especially frequent way cipher distinguished random sophisticated variations allow key recovered faster exhaustive search basic form key recovery differential cryptanalysis attacker requests ciphertexts large number plaintext pairs assumes differential holds least r − 1 rounds r total number rounds attacker deduces round keys final round possible assuming difference blocks final round fixed round keys short achieved simply exhaustively decrypting ciphertext pairs one round possible round key one round key deemed potential round key considerably often key assumed correct round key particular cipher input difference must carefully selected attack successful analysis algorithm internals undertaken standard method trace path highly probable differences various stages encryption termed differential characteristic since differential cryptanalysis became public knowledge become basic concern cipher designers new designs expected accompanied evidence algorithm resistant attack many including advanced encryption standard proven secure attack attack relies primarily fact given input/output difference pattern occurs certain values inputs usually attack applied essence non-linear components solid component usually fact look-up tables s-boxes observing desired output difference two chosen known plaintext inputs suggests possible key values example differential 1 1 implying difference least significant bit lsb input leads output difference lsb occurs probability 4/256 possible non-linear function aes cipher instance 4 values 2 pairs inputs differential possible suppose non-linear function key xor'ed evaluation values allow differential 2,3 4,5 attacker sends values 6 7 observes correct output difference means key either 6 ⊕ k 2 6 ⊕ k 4 meaning key k either 2 4 essence n-bit non-linear function one would ideally seek close 2 possible achieve differential uniformity happens differential attack requires much work determine key simply brute forcing key aes non-linear function maximum differential probability 4/256 entries however either 0 2 meaning theory one could determine key half much work brute force however high branch aes prevents high probability trails existing multiple rounds fact aes cipher would immune differential linear attacks much weaker non-linear function incredibly high branch active s-box count 25 4r means 8 rounds attack involves fewer 50 non-linear transforms meaning probability success exceed pr attack ≤ pr best attack s-box example current s-box aes emits fixed differential probability higher 4/256 2 far lower required threshold 2 128-bit block cipher would allowed room efficient s-box even 16-uniform probability attack would still 2 exist bijections even sized inputs/outputs 2-uniformity exist odd fields gf 2 using either cubing inversion exponents used well instance x x odd binary field immune differential linear cryptanalysis part misty designs use 7- 9-bit functions 16-bit non-linear function functions gain immunity differential linear attacks lose algebraic attacks possible describe solve via sat solver part aes instance affine mapping inversion
node10:Wikipedia entry. Entry name: BlackBerry_World. Entry content: blackberry world blackberry world previously blackberry app world application distribution service application blackberry limited majority blackberry devices service provides blackberry users environment browse download update third-party applications service went live april 1 2009 three major app stores different operating systems largest revenue per app 9,166.67 compared 6,480.00 1,200.00 apple app store google play respectively 21 january 2013 blackberry announced rebranded blackberry app world simpler blackberry world part release blackberry 10 operating system blackberry devices since 2015 release blackberry priv longer use blackberry 10 operating system android instead uses google play store blackberry world set shut 2019 2003 rim launched mobile data service enable customers access java-based third-party enterprise applications using secure real-time push-based blackberry infrastructure later october 21 2008 rim announced blackberry developer conference company would open application store devices also announced store scheduled open march 2009 would work conjunction paypal services january 19 2009 rim began accepting submissions applications developers march 4 2009 rim officially named store blackberry app world previously called blackberry application storefront also confirmed service would initially available desktops web-based catalog would accessible non-blackberry devices april 1 2009 ctia trade show rim announced app world gone live blackberry sponsored wireless symposium announced average one million apps downloaded day august 19 2010 blackberry app world 2.0 released new version introduced blackberry id single sign account system used blackberry client blackberry app world desktop storefront addition blackberry id blackberry app world 2.0 also introduced direct credit card billing carrier billing wireless subscribers december 3 2010 research motion announced daily downloads two million apps per day february 2 2011 blackberry app world 2.1 released version introduced in-app purchases digital goods allowing add-ons purchased within applications january 21 2013 blackberry rebranded blackberry app world blackberry world june 18 2014 blackberry announced official relationship amazon includes access amazon appstore blackberry 10.3 december 5 2017 blackberry announced closure blackberry world december 31 2019 april 1 2018 blackberry removed paid apps blackberry world beginning 2011 16,000 apps available blackberry app world year later app store passed 60,000 apps january 2012 month later 70,000 apps february 2012 blackberry jam september 2012 rim announced app world 105,000 apps may 2013 blackberry live conference blackberry announced 120,000 apps blackberry 10 available download blackberry world application verification done blackberry world apps content quality agreed launch 85 percent verification done denpasar bali rim announced store would initially available united states united kingdom canada march 2013 blackberry world available 170 markets supports 23 currencies 33 languages 6 million applications downloaded daily aggregate 4 billion downloads to-date accepts payment markets using combination paypal credit card carrier billing list countries blackberry world available applications free paid 0.99 599.99 usd u.s registration app submission fees charged developers currently 0 service available english french italian german spanish brazilian portuguese store available following blackberry devices updated blackberry os version 4.5.0 higher users initially allowed archive apps microsd emmc storage certain blackberry smartphone models archive function later removed release app world 3.0 2010 rim announced several new tools make easier applications developers build simulate deploy monetize feature-rich applications blackberry platform including blackberry enterprise application development platform next generation blackberry web application platform blackberry webworks platform blackberry playbook™ tablet blackberry smartphones blackberry payment service blackberry push service blackberry advertising service location service maps services analytics service scoreloop bbm social platform software developer kits et al blackberry embraced open standards included variety open source libraries box including lua openal cocos2d-x box2d open source repository accessed github.com/blackberry open ecosystem helps developers target multiple platforms partnerships appcelerator apache cordova dojo jquery mobile marmalade nme qt sencha touch blackberry changed whole direction development tools mainly embracing c++/cascades native road develop mobile apps blackberry 10 platform html5 considered almost-native second path development april 2014 blackberry announced stop support adobe air release blackberry 10.3.1 released later 2014 time release blackberry 10.3.1 possible upload new adobe air-based apps blackberry world
node11:Wikipedia entry. Entry name: Xinetd. Entry content: xinetd computer networking xinetd extended internet service daemon open-source super-server daemon runs many unix-like systems manages internet-based connectivity offers secure alternative older inetd internet daemon modern linux distributions deprecated xinetd listens incoming requests network launches appropriate service request requests made using port numbers identifiers xinetd usually launches another daemon handle request used start services privileged non-privileged port numbers xinetd features access control mechanisms tcp wrapper acls extensive logging capabilities ability make services available based time place limits number servers system start deployable defense mechanisms protect port scanners among things implementations mac os x daemon starts maintains various internet-related services including ftp telnet extended form inetd offers enhanced security replaced inetd mac os x v10.3 subsequently launchd replaced mac os x v10.4 however apple retained inetd compatibility purposes configuration xinetd resides default configuration file /etc/xinetd.conf configuration services supports reside configuration files stored /etc/xinetd.d directory configuration service usually includes switch control whether xinetd enable disable service example configuration file rfc 868 time server lines character beginning comments without effect service two service versions first one based transmission control protocol tcp second one based user datagram protocol udp type planned usage service determines necessary core protocol simple way udp handle huge data transmissions lacks abilities rearrange packages specified order guarantee integrity faster tcp tcp functions slower two column versions inside braces first type option second applied variable disable option switch run service cases default state yes activate service change three types services type internal service provided xinetd rpc based remote procedure call commonly listed /etc/rpc file unlisted service neither /etc/services /etc/rpc files id unique identifier service socket_type determines way data transmission service three types stream dgram raw last one useful want establish service based non-standard protocol user option possible choose user owner running service highly recommended choose non-root user security reasons wait yes xinetd receive request service connection number connections limited one provides good protection want establish one connection per time many options available xinetd linux distributions full list possible options description accessible man xinetd.conf command apply new configuration sighup signal must sent xinetd process make re-read configuration files achieved following command codice_1 pid actual process identifier number xinetd obtained command codice_2
node12:Wikipedia entry. Entry name: Man-in-the-middle_attack. Entry content: man-in-the-middle attack cryptography computer security man-in-the-middle attack mitm attack attacker secretly relays possibly alters communications two parties believe directly communicating one example mitm attack active eavesdropping attacker makes independent connections victims relays messages make believe talking directly private connection fact entire conversation controlled attacker attacker must able intercept relevant messages passing two victims inject new ones straightforward many circumstances example attacker within reception range unencrypted wireless access point wi-fi could insert man-in-the-middle aims circumvent mutual authentication mitm attack succeed attacker impersonates endpoint sufficiently well satisfy expectations cryptographic protocols include form endpoint authentication specifically prevent mitm attacks example tls authenticate one parties using mutually trusted certificate authority suppose alice wishes communicate bob meanwhile mallory wishes intercept conversation eavesdrop optionally deliver false message bob first alice asks bob public key bob sends public key alice mallory able intercept mitm attack begin mallory sends alice forged message appears originate bob instead includes mallory public key alice believing public key bob encrypts message mallory key sends enciphered message back bob mallory intercepts deciphers message using private key possibly alters wants re-enciphers using public key intercepted bob originally tried send alice bob receives newly enciphered message believes came alice example shows need alice bob way ensure truly using public keys rather public key attacker otherwise attacks generally possible principle message sent using public-key technology variety techniques help defend mitm attacks mitm attacks prevented detected two means authentication tamper detection authentication provides degree certainty given message come legitimate source tamper detection merely shows evidence message may altered cryptographic systems secure mitm attacks provide method authentication messages require exchange information public keys addition message secure channel protocols often using key-agreement protocols developed different security requirements secure channel though attempted remove requirement secure channel public key infrastructure transport layer security may harden transmission control protocol mitm attacks structures clients servers exchange certificates issued verified trusted third party called certificate authority ca original key authenticate ca subject mitm attack certificates issued ca may used authenticate messages sent owner certificate use mutual authentication server client validate communication covers ends mitm attack though default behavior connections authenticate server attestments verbal communications shared value zrtp recorded attestments audio/visual recordings public key hash used ward mitm attacks visual media much difficult time-consuming imitate simple data packet communication however methods require human loop order successfully initiate transaction corporate environment successful authentication indicated browser green padlock always imply secure connection remote server corporate security policies might contemplate addition custom certificates workstations web browsers order able inspect encrypted traffic consequence green padlock indicate client successfully authenticated remote server corporate server/proxy used ssl/tls inspection http public key pinning hpkp sometimes called certificate pinning helps prevent mitm attack certificate authority compromised server provide list pinned public key hashes first transaction subsequent transactions require one keys list must used server order authenticate transaction dnssec extends dns protocol use signatures authenticate dns records preventing simple mitm attacks directing client malicious ip address latency examination potentially detect attack certain situations long calculations lead tens seconds like hash functions detect potential attacks parties check discrepancies response times example say two parties normally take certain amount time perform particular transaction one transaction however take abnormal length time reach party could indicative third party interference inserting additional latency transaction quantum cryptography theory provides tamper-evidence transactions no-cloning theorem protocols based quantum cryptography typically authenticate part classical communication unconditionally secure authentication scheme e.g wegman-carter authentication captured network traffic suspected attack analyzed order determine whether attack determine source attack important evidence analyze performing network forensics suspected attack includes notable non-cryptographic mitm attack perpetrated belkin wireless network router 2003 periodically would take http connection routed would fail pass traffic destination instead responded intended server reply sent place web page user requested advertisement another belkin product outcry technically literate users 'feature removed later versions router firmware 2011 security breach dutch certificate authority diginotar resulted fraudulent issuing certificates subsequently fraudulent certificates used perform mitm attacks 2013 nokia xpress browser revealed decrypting https traffic nokia proxy servers giving company clear text access customers encrypted browser traffic nokia responded saying content stored permanently company organizational technical measures prevent access private information 2017 equifax withdrew mobile phone apps following concern mitm vulnerabilities notable real-life implementations include following
node13:Wikipedia entry. Entry name: Android_Oreo. Entry content: android oreo android oreo codenamed android development eighth major release 15th version android mobile operating system first released alpha quality developer preview march 2017 released public august 21 2017 contains number major features including notification grouping picture-in-picture support video performance improvements battery usage optimization support autofillers bluetooth 5 system-level integration voip apps wide color gamuts wi-fi aware android oreo also introduces two major platform features android go – software distribution operating system low-end devices – support implementing hardware abstraction layer 28.3 android devices run oreo 12.9 8.0 15.4 8.1 making oreo major release commonly used version android android oreo internally codenamed oatmeal cookie march 21 2017 google released first developer preview android available nexus 5x nexus 6p nexus player pixel c pixel smartphones second considered beta quality released may 17 2017 third developer preview released june 8 2017 offered finalized version api dp3 finalized release api api level 26 changed camera ui reverted wi-fi cellular connectivity levels status bar back wi-fi left added themed notifications added battery animation settings battery new icon darker background clock app teardrop icon shape apps july 24 2017 fourth developer preview released included final system behaviors latest bug fixes optimizations android officially released august 21 2017 name oreo lawn statue unveiled promotional event across chelsea market new york city—a building formerly housed nabisco factory oreo cookies first produced factory images made available compatible pixel nexus devices later day sony xperia xz1 sony xperia xz1 compact first devices available oreo pre-installed android 8.1 released december 2017 pixel nexus devices features minor bug fixes user interface changes notifications snoozed batched topic-based groups known channels 'major ongoing feature orders alerts priority pinning important application top slot android oreo contains integrated support picture-in-picture modes supported youtube app youtube premium subscribers settings app features new design white theme deeper categorization different settings ringtone alarm notification sound settings contain option adding custom sounds list android 8.1 update supports display battery percentages connected bluetooth devices makes notification shade slightly translucent dims on-screen navigation keys order reduce possibility burn-in android oreo adds support neighborhood aware networking nan wi-fi based wi-fi aware bluetooth 5 wide color gamuts apps api autofillers multiprocess google browsing support webviews api allow system-level integration voip apps launching activities remote displays android runtime art features performance improvements android oreo contains additional limits apps background activities order improve battery life apps specify adaptive icons differently-shaped containers specified themes circles squares squircles android oreo supports new emoji included unicode 10 standard new emoji font also introduced notably redesigns face figures use traditional circular shape opposed blob design introduced kitkat underlying architecture android revised low-level vendor-specific code supporting device hardware separated android os framework using hardware abstraction layer known vendor interface vendor interfaces must made forward compatible future versions android new architecture called project treble allows quicker development deployment android updates devices vendors would need make necessary modifications bundled software devices shipping oreo must support vendor interface feature optional devices updated oreo earlier version seamless updates system introduced android 7.0 also modified download update files directly system partition rather requiring downloaded user partition first reduces storage space requirements system updates android oreo introduces new automatic repair system known rescue party operating system detects core system components persistently crashing startup automatically perform series escalating repair steps automatic repair steps exhausted device reboot recovery mode offer perform factory reset android 8.1 update also introduces neural network api designed provide apps hardware acceleration on-device machine learning operations api designed use machine learning platforms tensorflow lite specialized co-processors pixel visual core featured google pixel 2 smartphones dormant 8.1 installed also provides cpu fallback mode tailored distribution low-end devices known android go unveiled oreo intended devices 1 gb ram less mode platform optimizations designed reduce mobile data usage including enabling data saver mode default special suite google mobile services designed less resource- bandwidth-intensive google play store also highlight lightweight apps suited devices operating system interface also modified quick settings panel providing greater prominence information regarding battery mobile data limit available storage recent apps menu using modified layout limited four apps order reduce ram consumption api allowing mobile carriers implement data tracking top-ups within android settings menu google play services also modularized reduce memory footprint android go made available oems android 8.1 android oreo re-brands automatic scanning google play store sideloaded apps google play protect gives feature well find device formerly android device manager higher prominence security menu settings app opposed single system-wide setting enabling installation apps sources outside google play store function implemented permission granted individual apps i.e clients third-party app repositories amazon appstore f-droid verified boot includes rollback protection feature enforces restriction rolling back device previous version android aimed preventing potential thief bypassing security measures installing previous version operating system n't place
node14:Wikipedia entry. Entry name: Unix_security. Entry content: unix security unix security refers means securing unix unix-like operating system secure environment achieved design concepts operating systems also vigilant user administrative practices core security feature systems file system permissions files typical unix filesystem permissions set enabling different access file permissions file commonly set using chmod command seen ls command example unix permissions permit different users access file different user groups different permissions file advanced unix filesystems include access control list concept allows permissions granted multiple users groups access control list may used grant permission additional individual users groups example example chacl command linux operating system user sue granted write permission /pvr directory users unix style operating systems often belong managed groups specific access permissions enables users grouped level access system many unix implementations add additional layer security requiring user member wheel user privileges group order access codice_1 command unix unix-like systems account group enables user exact complete control system often known root account access account gained unwanted user results complete breach system root account however necessary administrative purposes security reasons root account seldom used day day purposes sudo program commonly used usage root account closely monitored root access visualised familiar superman stories using following analogy unix many tools improve security used properly users administrators selecting strong password guarding properly probably important things user improve unix security unix systems essential information users stored file codice_2this file keeps track users registered system main definitions passwords correctly hash password also stored place entries codice_2 occupy exactly one line following form example would since users must read access codice_2 file many common tasks codice_5 use codice_2 map uids login names example anyone could also read password hashes users solve problem file codice_7 created store password hashes root read access password shadowing 2nd field password hash replaced x tells system retrieve corresponding user password via codice_7 file codice_7 file often contains values first two fields remaining fields codice_7 file include fields may used improve unix security enforcing password security policy administrators delete old accounts promptly operating systems like software may contain bugs need fixing may enhanced addition new features patching operating system secure manner requires software come trustworthy source altered since packaged common methods verifying operating system patches altered include use cryptographic hash md5 based checksum use read-only media security standpoint specific packaging method rpm package manager format originally red hat linux important use features ensure integrity patch source distributions include ability examine code suspicious content drawback absent accompanying cryptographic hash value user must able perform security analysis code linux distributions use rpm package manager format providing base functionality software updates make use md5 gpg ensure content integrity hash values packaged rpm file verified package installed linux distributions use debian .deb package format providing base functionality software updates make use gpg signatures ensure content integrity signature computed package constructed verified later package installed regardless vendor distribution software distributions provide mechanism verifying software legitimate modified since originally packaged unnecessary system software installed configured system software longer required removed completely possible commands inetd xinetd act super-servers variety network protocols rlogin telnet ftp turning unnecessary services approach usually called proactive security operating systems secure default amongst others free bsd flavours freebsd netbsd openbsd proactively secure example output netstat netbsd 3.0 workstation clearly outlines technique following example bsd system shows machine ssh service listening public network interface computer sendmail listening loopback interface access service may restricted using firewall file system security within unix unix-like systems based 9 permission bits set user group id bits sticky bit total 12 bits permissions apply almost equally filesystem objects files directories devices 9 permission bits divided three groups three bits first group describes permissions file owner second group describes permissions group associated file owner directory containing file third group describes permissions associated process user id file group three bits contains bit indicating read write execute access granted case directories execute access interpreted permission perform filename lookup within directory set user id set group id bits commonly abbreviated set-uid set-gid respectively used change identity process executes file either bits set file set-uid permission bit set cause process executes file temporarily switch effective user id file owner file set-gid permission bit set cause process executes file temporarily switch effective group id file group process may alternate effective user group id inherited file real user group id inherited user logged system provides mechanism process may limit access rights possesses code regions require access rights form security technique known privilege separation improves program security limiting unintended undesirable actions processes directory set-gid permission bit set cause newly created file initial file group value equal file group directory provides mechanism whereby subsystem system mail subsystem create files common file group value set-gid processes within subsystem able read write file sticky bit formally known save text swap bit derives name original purpose originally sticky bit caused process initial memory image stored contiguous image disk drive used store real memory pages use improved performance commonly executed commands making initial memory image readily available modern unix systems longer perform function bit set name preserved nonetheless case files sticky-bit may used system indicate style file locking performed case directories sticky bit prevents process one super-user privileges one effective user id file owner deleting file within directory sticky bit commonly used publicly writable directories various temporary working space directories system root squash reduction access rights remote superuser root using identity authentication local user remote user primarily feature nfs may available systems well problem arises remote file system shared multiple users users belong one multiple groups unix every file folder normally separate permissions read write execute owner normally creator file group owner belongs world users allows restriction read write access authorized users general nfs server must also protected firewall superuser rights ordinary user able change file ownership set arbitrary permissions access protected content even users need root access individual workstations may authorized similar actions shared file system root squash reduces rights remote root making one longer superuser unix like systems root squash option turned /etc/exports file server side implementing root squash authorized superuser performs restricted actions logging nfs server directly mounting exported nfs folder selinux set kernel extensions control access precisely strictly defining files folders network ports resources accessed confined process system mostly used restrict processes database server rather human users also limit processes run root distributions use comparable alternatives like apparmor unix-like operating systems immune microsoft windows viruses binaries created run windows generally wo n't run platforms however many unix like installations provide file storage services microsoft windows clients use samba software may unintentionally become repository viruses stored users common unix servers act mail transfer agents consequently email virus scanning often installed clamav virus scanner available source code form may used scan unix file systems viruses infect operating systems viruses worms target unix-like operating systems fact first computer worm—the morris worm—targeted unix systems network firewall protects systems networks network threats exist opposite side firewall firewalls block access strictly internal services unwanted users cases filter network traffic content iptables current user interface interacting linux kernel netfilter functionality replaced ipchains unix like operating systems may provide native functionality open source firewall products exist detailed information iptables contained elsewhere brief discussion contained order describe iptables may used configure linux firewall netfilter provides state-full packet filter configured according network interface protocol source and/or destination address source and/or destination port state packet network packet traverses several chains time received network interface time accepted host forwarded another host common chains input output forward input chain traversed packets received network interface regardless whether accepted host forwarded another host output chain traversed packets transmitted network interface forward chain traversed packets routed host one network interface another case multi-homed system system one physical network interface built-in chains default policy defines action taken packet reaches end chain packet traversal ends rule matches packet action accept drop reject return simplest iptables firewall consists rules desired service followed rule indicates packets reach rule dropped system permitted example incoming email traffic would rule accepted connections smtp port dropped others rule would required indicated established connections also permitted outgoing connections would receive responses systems following example shows simple packet filter input chain described example addition explicit drop action ensures packets discarded default policy input chain accidentally changed accept less need output chain default policy output chain safely set accept instances may desirable firewall limit certain outgoing connections certain set approved systems known egress filtering may used prevent viruses within firewall escaping systems example may policy network limit outgoing email connections single authorized email servers way combating e-mail spam could achieved following example need include rules example default policy output chain accept note also rule assumes host acting firewall sending email email server good assumption typically firewall system contains minimal amount system code needed act firewall restrictive output chain would contain permissive accept entries services may accessed outside firewall restrictive drop policy chain secure network communication packet sniffing attacks
node15:Wikipedia entry. Entry name: Internet_Control_Message_Protocol. Entry content: internet control message protocol internet control message protocol icmp supporting protocol internet protocol suite used network devices including routers send error messages operational information indicating example requested service available host router could reached icmp differs transport protocols tcp udp typically used exchange data systems regularly employed end-user network applications exception diagnostic tools like ping traceroute icmp ipv4 defined rfc 792 icmp part internet protocol suite defined rfc 792 icmp messages typically used diagnostic control purposes generated response errors ip operations specified rfc 1122 icmp errors directed source ip address originating packet example every device intermediate router forwarding ip datagram first decrements time live ttl field ip header one resulting ttl 0 packet discarded icmp time exceeded transit message sent datagram source address many commonly used network utilities based icmp messages traceroute command implemented transmitting ip datagrams specially set ip ttl header fields looking icmp time exceeded transit destination unreachable messages generated response related ping utility implemented using icmp echo request echo reply messages icmp uses basic support ip higher level protocol however icmp actually integral part ip although icmp messages contained within standard ip packets icmp messages usually processed special case distinguished normal ip processing many cases necessary inspect contents icmp message deliver appropriate error message application responsible transmission ip packet prompted sending icmp message icmp network layer protocol tcp udp port number associated icmp packets numbers associated transport layer icmp packet encapsulated ipv4 packet packet consists header data sections icmp header starts ipv4 header identified ip protocol number 1 icmp packets 8-byte header variable-sized data section first 4 bytes header fixed format last 4 bytes depend type/code icmp packet icmp error messages contain data section includes copy entire ipv4 header plus least first eight bytes data ipv4 packet caused error message maximum length icmp error messages 576 bytes data used host match message appropriate process higher level protocol uses port numbers assumed first eight bytes original datagram data variable size icmp packet data section exploited ping death large fragmented ping packets used denial-of-service attacks icmp data also used create covert channels communication channels known icmp tunnels control messages identified value type field code field gives additional context information message control messages deprecated since protocol first introduced source quench requests sender decrease rate messages sent router host message may generated router host sufficient buffer space process request may occur router host buffer approaching limit data sent high speed host several hosts time particular router network although router buffering capabilities buffering limited within specified range router queue data capacity limited buffering space thus queue gets filled incoming data discarded queue longer full acknowledgement mechanism present network layer client know whether data reached destination successfully hence remedial measures taken network layer avoid kind situations measures referred source quench source quench mechanism router sees incoming data rate much faster outgoing data rate sends icmp message clients informing slow data transfer speeds wait certain amount time attempting send data client receives message automatically slow outgoing data rate wait sufficient amount time enables router empty queue thus source quench icmp message acts flow control network layer since research suggested icmp source quench ineffective unfair antidote congestion routers creation source quench messages deprecated 1995 rfc 1812 furthermore forwarding kind reaction flow control actions source quench messages deprecated 2012 rfc 6633 redirect requests data packets sent alternative route icmp redirect mechanism routers convey routing information hosts message informs host update routing information send packets alternative route host tries send data router r1 r1 sends data another router r2 direct path host r2 available host r2 ethernet segment r1 send redirect message inform host best route destination via r2 host send packets destination directly r2 router still send original datagram intended destination however datagram contains routing information message sent even better route available rfc 1122 states redirects sent gateways sent internet hosts time exceeded generated gateway inform source discarded datagram due time live field reaching zero time exceeded message may also sent host fails reassemble fragmented datagram within time limit time exceeded messages used traceroute utility identify gateways path two hosts timestamp used time synchronization originating timestamp set time milliseconds since midnight sender last touched packet receive transmit timestamps used timestamp reply replies timestamp message consists originating timestamp sent sender timestamp well receive timestamp indicating timestamp received transmit timestamp indicating timestamp reply sent address mask request normally sent host router order obtain appropriate subnet mask recipients reply message address mask reply message icmp address mask request may used part reconnaissance attack gather information target network therefore icmp address mask reply disabled default cisco ios address mask reply used reply address mask request message appropriate subnet mask destination unreachable generated host inbound gateway inform client destination unreachable reason reasons message may include physical connection host exist distance infinite indicated protocol port active data must fragmented 'do n't fragment flag unreachable tcp ports notably respond tcp rst rather destination unreachable type 3 might expected destination unreachable never reported ip multicast transmissions
node16:Wikipedia entry. Entry name: Android_Automotive. Entry content: android automotive android automotive variation google android operating system tailored use vehicle dashboards introduced march 2017 platform developed google intel together car manufacturers volvo audi project aims provide operating system codebase vehicle manufacturers develop version operating system besides infotainment tasks messaging navigation music playback operating system aims handle vehicle-specific functions controlling air conditioning contrarily android auto android automotive full operating system running vehicle device relying external device operate operating system first announced google march 2017 february 2018 polestar volvo ’ brand electric performance cars announced polestar 2 first car built-in android automotive expected release 2020 april 2019 google opened apis developers start developing applications android automotive
node17:Wikipedia entry. Entry name: Cyber_security_standards. Entry content: cyber security standards information storage transit applications services systems connected directly indirectly networks principal objective reduce risks including prevention mitigation cyber-attacks published materials consist collections tools policies security concepts security safeguards guidelines risk management approaches actions training best practices assurance technologies cybersecurity standards existed several decades users providers collaborated many domestic international forums effect necessary capabilities policies practices generally emerging work stanford consortium research information security policy 1990s 2016 us security framework adoption study reported 70 surveyed organizations nist cybersecurity framework popular best practice information technology computer security many note requires significant investment iso/iec 27001 part growing iso/iec 27000 family standards information security management system isms standard last revision published october 2013 international organization standardization iso international electrotechnical commission iec full name iso/iec 27001:2013 – information technology – security techniques – information security management systems – requirements iso/iec 27001 formally specifies management system intended bring information security explicit management control iso/iec 27002 incorporates mainly part 1 bs 7799 good security management practice standard latest versions bs 7799 bs 7799-3 sometimes iso/iec 27002 therefore referred iso 17799 bs 7799 part 1 sometimes refers part 1 part 7 bs 7799 part 1 provides outline good practice guide cybersecurity management whereas bs 7799 part 2 iso/iec 27001 normative therefore provide framework certification iso/iec 27002 high level guide cybersecurity beneficial explanatory guidance management organisation obtain certification iso/iec 27001 standard certification obtained lasts three years depending auditing organisation intermediate audits may carried three years iso/iec 27001 isms replaces bs 7799 part 2 since backward compatible organization working toward bs 7799 part 2 easily transition iso/iec 27001 certification process also transitional audit available make easier organization bs 7799 part 2-certified organization become iso/iec 27001-certified iso/iec 27002 provides best practice recommendations information security management use responsible initiating implementing maintaining information security management systems isms states information security systems required implement iso/iec 27002 control objectives without iso/iec 27001 iso/iec 27002 control objectives ineffective iso/iec 27002 controls objectives incorporated iso 27001 annex a. iso/iec 21827 sse-cmm – iso/iec 21827 international standard based systems security engineering capability maturity model sse-cmm measure maturity iso controls objectives north american electric reliability corporation nerc addresses patching nerc cip 007-6 requirement 2 summarily requires bulk power system bps operators/owners identify source sources utilized provide entiter security related patches cyber assets utilized operation registered entities required check new patches every thirty five calendar days upon identification new patch entities required evaluate applicability patch complete mitigation installation activities within 35 calendar days completion assessment applicability.e bps.y initial attempt create information security standards electrical power industry created nerc 2003 known nerc css cyber security standards subsequent css guidelines nerc evolved enhanced requirements widely recognized modern nerc security standard nerc 1300 modification/update nerc 1200 newest version nerc 1300 called cip-002-3 cip-009-3 cip=critical infrastructure protection standards used secure bulk electric systems although nerc created standards within areas bulk electric system standards also provide network security administration still supporting best-practice industry processes standard develops called “ common criteria ” allows many different software hardware products integrated tested secure way iasme governance uk-based standard information assurance small-to-medium enterprises smes provides criteria certification small-to-medium business cybersecurity readiness also allows small medium business provide potential existing customers clients accredited measurement cybersecurity posture enterprise protection personal/business data iasme governance standard developed enable businesses achieve accreditation similar iso 27001 reduced complexity cost administrative overhead specifically focused sme recognition difficult small cap businesses achieve maintain iso 27001 certifications iasme governance standard include free basic cyber security insurance uk-based sme applicants cost certification progressively graduated based upon employee population sme e.g. 10 fewer 11 25 26 100 101 250 employees certification based upon self-assessment iasme questionnaire third-party professional assessor insurance companies reduce premiums cybersecurity related coverage based upon iasme certification october 2016 federal reserve board office comptroller currency federal deposit insurance corporation jointly issued advance notice proposed rulemaking anpr regarding cyber risk management standards regulated entities anpr aims enhance ability large interconnected financial services entities prevent recover cyber attacks goes beyond existing requirements proposal requires entities total assets 50 billion third party service providers take steps strengthen incident response programs enhance cyber risk governance management practices may 2017 us based federal financial institutions examination council issued cyber security assessment tool tool includes completing inherent risk profile organization covers five areas european telecommunications standards institute etsi established new cyber security committee tc cyber 2014 meet growing demand ev guidance protect internet communications business carries tc cyber working closely relevant stakeholders develop appropriate standards increase privacy security organisations citizens across europe committee looking particular security infrastructures devices services protocols well security tools techniques ensure security offers security advice guidance users manufacturers network infrastructure operators standards freely available on-line principal work item effort production cyber security ecosystem standardization activities 1990s information security forum isf published comprehensive list best practices information security published standard good practice sogp isf continues update sogp every two years latest version published 2018 among programs isf offers member organizations comprehensive benchmarking program based sogp furthermore important charge security management understand adhere nerc cip compliance requirements ansi/isa 62443 series standards technical reports related information define procedures implementing secure industrial automation control systems iacs guidance applies stakeholders implementing managing iacs documents originally referred ansi/isa-99 isa99 standards created international society automation isa publicly released american national standards institute ansi documents 2010 renumbered ansi/isa-62443 series change intended align isa ansi document numbering corresponding international electrotechnical commission iec standards isa99 remains name industrial automation control system security committee isa since 2002 committee developing multi-part series standards technical reports subject iacs security work products submitted isa approval publishing ansi also submitted iec input iec 62443 series international standards following iec standards development process established 2007 international security compliance institute isci created first conformity assessment scheme commonly known certification scheme ansi/isa 62443 standards program certifies commercial off-the-shelf cots automation control systems iot devices addressing securing control systems supply chain isci development processes include maintenance policies ensure isasecure certifications remain alignment iec 62443 standards evolve ansi/isa 62443 standards designed horizontally address technical cybersecurity requirements cross-section industries isasecure working groups included subject matter experts traditional process industries building management system suppliers asset owners isasecure scheme requires products properly tested supplier development process conformance ansi/isa 62443-4-1. exida united states first certification body accredited isasecure scheme american national standards institute ansi followed control systems security center – certification laboratory cssc-cl accredited japan accreditation board jab tüv rheinland accredited deutsche akkreditierungsstelle dakks five additional certification bodies accredited 2019 including tuv sud two cots product certifications available isasecure® brand isasecure-csa component security assurance certifying automation products iec 62443-4-1 iec 62443-4-2 cybersecurity standards isasecure-ssa system security assurance certifying systems iec 62443-3-3 standard third certification sdla secure development lifecycle assurance available isci certifies automation systems development organizations iec 62443-4-1 cybersecurity standard isasecure 62443 conformity assessment scheme iso 17065 program whose labs certification bodies cb independently accredited ansi/anab jab dakks singapore accreditation council global iso 17011 accreditation bodies ab certification labs must also meet iso 17025 lab accreditation requirements ensure consistent application certification requirements recognized tools mutual recognition arrangements mra iaf ilac others accreditation isasecure labs isa 17011 accreditation bodies ensures certificates issued isasecure labs globally recognized iec-62443 cybersecurity standards multi-industry standards listing cybersecurity protection methods techniques documents result iec standards creation process ansi/isa-62443 proposals inputs submitted country committees review done comments regarding changes submitted comments reviewed various iec 62443 committees comments discussed changes made agreed upon many members iec committees persons isa s99 committees date fundamental concepts original ansi/isa 62443 documents utilized iec 62443 certification schemes also established several global certification bodies defined scheme based upon referenced standards procedures describes test methods surveillance audit policy public documentation policies specific aspects program cybersecurity certification programs iec 62443 standards offered globally several recognized cbs including exida sgs-tüv saar tüv nord tüv rheinland tüv sud ul certx automation system market space cybersecurity certifications done exida global infrastructure established ensure consistent evaluation per standards impartial third party organizations called certification bodies cb accredited operate iso/iec 17065 iso/iec 17025 certification bodies accredited perform auditing assessment testing work accreditation body ab often one national ab country abs operate per requirements iso/iec 17011 standard contains requirements competence consistency impartiality accreditation bodies accrediting conformity assessment bodies abs members international accreditation forum iaf work management systems products services personnel accreditation international laboratory accreditation cooperation ilac laboratory accreditation multilateral recognition arrangement mla abs ensure global recognition accredited cbs ...
node18:Wikipedia entry. Entry name: Wi-Fi_deauthentication_attack. Entry content: wi-fi deauthentication attack wi-fi deauthentication attack type denial-of-service attack targets communication user wi-fi wireless access point unlike radio jammers deauthentication acts unique way ieee 802.11 wi-fi protocol contains provision deauthentication frame sending frame access point station called sanctioned technique inform rogue station disconnected network attacker send deauthentication frame time wireless access point spoofed address victim protocol require encryption frame even session established wired equivalent privacy wep data privacy attacker needs know victim mac address available clear wireless network sniffing one main purposes deauthentication used hacking community force clients connect evil twin access point used capture network packets transferred client rap attacker conducts deauthentication attack target client disconnecting current network thus allowing client automatically connect evil twin access point order mount brute-force dictionary based wpa password cracking attack wifi user wpa wpa2 enabled hacker must first sniff wpa 4-way handshake user elicited provide sequence first forcing offline deauthentication attack similar phishing style attack without password cracking wifiphisher starts deauthentication attack disconnect user legitimate base station mounts man-in-the-middle attack collect passwords supplied unwitting user federal communications commission fined hotels companies launching deauthentication attacks guests purpose drive personal hotspots force pay on-site wi-fi services aircrack-ng suite mdk3 void11 scapy zulu software mount wifi deauthentication attack aireplay-ng aircrack-ng suite tool run deauthentication attack executing one-line command pineapple rogue access point issue deauth attack wifijammer also automatically scan jam networks within range esp8266 used perform detect deauth attacks using wi-pwn android nexmon supports broadcom wlan chip deauth attacks
node19:Wikipedia entry. Entry name: Port_Control_Protocol. Entry content: port control protocol port control protocol pcp computer networking protocol allows hosts ipv4 ipv6 networks control incoming ipv4 ipv6 packets translated forwarded upstream router performs network address translation nat packet filtering allowing hosts create explicit port forwarding rules handling network traffic easily configured make hosts placed behind nats firewalls reachable rest internet also act network servers requirement many applications additionally explicit port forwarding rules available pcp allow hosts reduce amount generated traffic eliminating workarounds form outgoing nat keepalive messages required maintaining connections servers various nat traversal techniques tcp hole punching time less generated traffic reduces power consumption directly improving battery runtime mobile devices pcp standardized 2013 successor nat port mapping protocol nat-pmp shares similar protocol concepts packet formats environments universal plug play internet gateway device upnp igd used local network interworking function upnp igd pcp required embedded igd upnp igd-pcp iwf specified rfc6970 dhcp ipv4 ipv6 options configure hosts port control protocol pcp server ip addresses specified rfc7291 procedure follow selecting server among list pcp server discussed rfc7488 environments nat64 deployed pcp allows learn ipv6 prefix es used pcp-controlled nat64 device build ipv4-converted ipv6 addresses nat64 rfc7225 many applications network equipment deployments require network locations reachable outside local networks following originally envisioned model ip end-to-end connectivity across internet operate network servers accept connections remote clients example equipment ip camera includes network server provides remote surveillance ip networks usually network equipment deployments place devices behind routers firewalls perform nat enable sharing ipv4 address example packet filtering improved network security protection ending breaking end-to-end connectivity rendering equipment applications inaccessible rest internet making deployed equipment accessible extending server role beyond local network requires either manual configuration port forwarding network gateway usually cpe application-level workarounds initiate connections deployed equipment additional intermediate servers used merging firewall punching connections connections actual clients approaches downsides manual cpe configuration usually either inconvenient possible using additional intermediate servers increases complexity cost example online computer game acts client requires communication game server exchanging gameplay data order make possible game server provide data clients clients must made accessible server usually clients initiate connections game server open communication channels however open connections become idle subsequently closed network gateways leading necessity maintaining using form keepalive messages keepalive messages small messages sent client server create traffic communication channel therefore prevent gateway servers closing thus keeping connection alive requires constant exchange empty messages client server increases network chatter wastes network bandwidth cpu cycles decreases autonomy battery-powered devices additionally network applications example ftp require dynamic opening multiple connections involves application-level gateways algs additionally increases complexity pcp allows equipment applications create explicit mappings external ip address protocol port internal ip address protocol port explicit mappings place inbound communication reach hosts behind nat firewall either expands server roles beyond boundaries local networks makes use various services simplified less resource-consuming created mappings permanent extent known lifetime extended similar way dynamic host configuration protocol dhcp implements leases time pcp allows applications create additional mappings dynamically required reduces eliminates need alg-enabled nat devices firewalls created explicit mappings known lifetime commonly several hours need application-level keepalive messages exchanged hosts servers purpose preserving mapping result network usage power consumption reduced application-level keepalive logic longer needs implemented client server sides pcp mapping response provides application associated externally visible parameters ip address protocol port announced clients application-specific ways incoming connections established additionally pcp inform applications external ip address changed mapping already established various types nat handled pcp providing support nat64 nat66 nat44 inclusion pcp ipv4 ipv6 firewall devices also supported pcp designed used large-scale aggregation points example part carrier-grade nats inside less expensive consumer-grade devices long-term ip camera temperature sensor acting server example short-term mappings playing online computer game example supported pcp supports transport layer protocols use 16-bit port numbers example tcp udp stream control transmission protocol sctp datagram congestion control protocol dccp protocols use port numbers example resource reservation protocol rsvp encapsulating security payload esp icmp icmpv6 supported ipv4 firewall ipv6 firewall nptv6 ipv6 prefix translation functions supported one client per external ip address case nat pcp specification define mechanism dealing multi-homed networks multiple network gateways default routes nonetheless possible implement pcp networks using coordination mechanism conntrackd however different networks external ip address es given pcp mapping use one protocol requires one specific external ip address provided client network become unavailable pcp mapping would updated use external ip address network pcp standardized 2013 successor nat port mapping protocol nat-pmp sharing similar protocol concepts packet formats one design differences nat-pmp pretty much limited deployment consumer-grade devices pcp designed also support carrier-grade equipment since 2005 nat-pmp implemented various apple products nat-pmp relates internet gateway device protocol igdp standardized 2001 part universal plug play upnp specification igdp complex tailored toward manual configuration nat-pmp designed simplicity use within software applications excluding attackers capable altering network packets exchanged explicit pcp mapping created packets contain negotiation required establishing explicit mapping exchanged hosts pcp-enabled nat devices firewalls pcp considered secure long created explicit mappings exceed domain implicit mappings words implicit mappings created result way nat devices firewalls handling regular outbound client connections meaning pcp safe long new mapping possibilities introduced explicit mapping mechanism security standpoint important pcp feature mapping request option used option signifies ip address specified additionally part mapping request used internal address created explicit mapping rather following default behavior using source ip address actual mapping request packet purpose mapping requests end pcp-enabled nat device firewall granting explicit mapping privileges higher allowed implicit mappings due unknown rules imposed elsewhere specified ip address allowing way attacker steal traffic conduct denial-of-service dos attack additionally explicit pcp security mechanisms available extensions pcp protocol providing authentication access control mechanisms using authenticated integrity-protected in-band signalling channel relies extensible authentication protocol eap perform authentication devices involved pcp negotiation session pcp-enabled nat devices firewalls may still accept unauthenticated mapping requests time previously described explicit mapping constraints still apply internally pcp works exchanging control messages hosts pcp-enabled nat devices firewalls referred servers using user datagram protocol udp underlying protocol communication consists port mapping requests created hosts result responses submitted processed servers following udp nature unreliability means udp datagrams lost duplicated reordered submitting request guarantee response kind thus host requests also referred hints addition direct responses servers also generate gratuitous notifications example unicast notifications inform hosts changes external ip address exchanged messages contain means determining either transaction belong stage session represent simplified design based messages self-describing complete additional context required message successfully processed servers may decide silently ignore host requests case unable process moment cases hosts need retransmit request also hosts may safely decide silently ignore unwanted mapping responses purpose creating pcp requests ip address server either manually configured host found part host dhcp lease set host configured default gateway host request messages sent source udp port client server udp port 5351 listens unsolicited multicast server notifications server restart announcements sent server udp port 5351 udp port 5350 hosts listen maximum udp payload length pcp messages 1100 octets pcp message consists request response header containing opcode determines associated operation relevant opcode-specific information ports mapped zero options option described result codes returned part server responses result code associated lifetime tells hosts certain operations may retried repeated example result lifetimes specify long failure condition expected persist long created mapping last
node20:Wikipedia entry. Entry name: Pre-shared_key. Entry content: pre-shared key cryptography pre-shared key psk shared secret previously shared two parties using secure channel needs used build key shared secret key derivation function typically used systems almost always use symmetric key cryptographic algorithms term psk used wi-fi encryption wired equivalent privacy wep wi-fi protected access wpa method called wpa-psk wpa2-psk also extensible authentication protocol eap known eap-psk cases wireless access points ap clients share key characteristics secret key determined system uses system designs require keys particular format password passphrase hexadecimal string secret used systems involved cryptographic processes used secure traffic systems crypto systems rely one keys confidentiality one particular attack always possible keys brute force key space search attack sufficiently long randomly chosen key resist practical brute force attack though principle attacker sufficient computational power see password strength password cracking discussion unavoidably however pre-shared keys held parties communication compromised one end without knowledge anyone several tools available help one choose strong passwords though network connection inherently unsafe one general know anyone may eavesdropping interaction choosing keys used cryptographic algorithms somewhat different pattern whatsoever avoided pattern may provide attacker lower effort attack brute force search implies random key choice force attackers spend much effort possible difficult principle practice well general rule software except cryptographically secure pseudorandom number generator csprng avoided
node21:Wikipedia entry. Entry name: Slide_attack. Entry content: slide attack slide attack form cryptanalysis designed deal prevailing idea even weak ciphers become strong increasing number rounds ward differential attack slide attack works way make number rounds cipher irrelevant rather looking data-randomizing aspects block cipher slide attack works analyzing key schedule exploiting weaknesses break cipher common one keys repeating cyclic manner attack first described david wagner alex biryukov bruce schneier first suggested term slide attack used 1999 paper describing attack requirements slide attack work cipher broken multiple rounds identical f function probably means cyclic key schedule f function must vulnerable known-plaintext attack slide attack closely related related-key attack idea slide attack roots paper published edna grossman bryant tuckerman ibm technical report 1977 grossman tuckerman demonstrated attack weak block cipher named new data seal nds attack relied fact cipher identical subkeys round cipher cyclic key schedule cycle one key makes early version slide attack summary report including description nds block cipher attack given cipher systems beker piper 1982 first introduce notation section assume cipher takes n bit blocks key-schedule using formula_1 keys length slide attack works breaking cipher identical permutation functions f f function may consist one round cipher defined key-schedule example cipher uses alternating key schedule switches formula_2 formula_3 round f function would consist two rounds formula_4 appear least f next step collect formula_5 plaintext-ciphertext pairs depending characteristics cipher fewer may suffice birthday paradox formula_5 needed pairs denoted formula_7 used find slid pair denoted formula_8 slid pair property formula_9 formula_10 slid pair identified cipher broken vulnerability known-plaintext attacks key easily extracted pairing slid pair thought happens message one application function f ’ slid ’ one encryption round attack gets name process finding slid pair somewhat different cipher follows basic scheme one uses fact relatively easy extract key one iteration f choose pair plaintext-ciphertext pairs formula_8 check see keys corresponding formula_9 formula_10 keys match slid pair otherwise move next pair formula_5 plaintext-ciphertext pairs one slid pair expected along small number false-positives depending structure cipher false positives eliminated using keys different message-ciphertext pair see encryption correct probability wrong key correctly encipher two messages low good cipher sometimes structure cipher greatly reduces number plaintext-ciphertext pairs needed thus also large amount work clearest examples feistel cipher using cyclic key schedule reason given formula_15 search formula_16 reduces possible paired messages formula_17 formula_5 since half message fixed formula_19 plaintext-ciphertext pairs needed order find slid pair
node22:Wikipedia entry. Entry name: Hacking:_The_Art_of_Exploitation. Entry content: hacking art exploitation hacking art exploitation book jon smibbs erickson computer security network security published starch press 2003 second edition 2008 examples book developed compiled tested gentoo linux jon erickson computer security expert background computer science 2011 worked vulnerability researcher computer security specialist california bootable cd included book provides linux-based programming debugging environment users content exploiting moves programming networking cryptography book use notable measure real-world examples discussions rarely bring specific worms exploits computer programming portion hacking takes half book section goes development design construction testing exploit code thus involves basic assembly programming demonstrated attacks range simple buffer overflows stack complex techniques involving overwriting global offset table erickson discusses countermeasures non-executable stack evade return-to-libc attacks dive deeper matters without known guaranteed exploits address space layout randomization book also cover openwall grsecurity pax projects kernel exploits networking segment hacking explains basics osi model basic networking concepts including packet sniffing connection hijacking denial service port scanning cryptology section hacking covers basic information theory addition symmetric asymmetric encryption winds cracking wep utilizing fluhrer mantin shamir attack besides basics including man-in-the-middle attacks dictionary attacks use john ripper hacking discusses quantum key distribution lov grover quantum search algorithm peter shor quantum factoring algorithm breaking rsa encryption using large quantum computer introduction book states hacking done within confines law productive reasons programming chapter book different types programs described shown via examples chapter covers control structures basic aspects programming live cd provides environment reader follow along examples book programming exploitation taking computer code set rules changing computer want finding ways holes system change important part exploitation chapter covers exploit techniques memory corruption buffer overflows format strings especially using perl bash shellcode osi model communication among computers networking osi model used osi model model provides standards computers use communicate seven layers osi model physical layer data-link layer network layer transport layer session layer presentation layer application layer packet computer sends another computer must go layer osi model sockets standard way communicate network use computer operating systems socket socket used programmer create way send receive data using layers osi two types sockets stream socket datagram socket stream sockets use transmission control protocol tcp datagram socket uses user datagram protocol udp peeling back layers 'peeling back layers describes osi layers actually work osi model described great detail images book make easy understand network sniffing switched unswitched networks exist networking switched network uses devices called switches analyze tell packets travelling network endpoint unswitched network free flow packets without stopped analyzed sniffing refers using program allows see packets network going denial service denial service attack attempt make computer resource unavailable intended users means denial service attack sends large quantity communication requests intended resource order overflow resource becomes unusable certain period time types attacks usually directed routers firewalls order shut gain access computers network router susceptible types attacks firewall usually handle attack unaffected distributed denial service attack communication requests come multiple computers greatly increasing number requests regular denial service attack types dos attacks include ping death teardrop ping flooding amplification attacks tcp/ip hijacking tcp/ip hijacking another way uses spoofed packets take connection victim host machine technique mainly used collect passwords host machine uses password connected type attack takes place victim attacker must network another form tcp/ip hijacking rst hijacking involves injecting fake reset packet port scanning port scanning simply way figure ports accepting listening connections hacker would use program lets know ports open scanning ports network trying open many type scans syn idle fin x-mas null scans reach hack someone part finding vulnerabilities typecasting network using debugger go lines code used network protocols efficient way accomplish shellcode used exploitation code like hacker code wants run gains control program usually hacker find exploit programs code able insert code shellcode found exploit assembly vs. c assembly differs c assembly low-level programming language processed communicate directly processor using c high-level programming language code must compiled sent kernel making system call making call processor words almost like taking system calling kernel picture using assembly path shellcode part shellcode inject program shellcode taken many examples code book ways accomplish task self-spawning shellcode spawning shellcode code enabled exploit found shellcode able run vulnerability found program best way accomplish shown book making sure code small port-binding shellcode type shellcode attaches network port bound port listen tcp connection finds tcp connection lot programming involved shown vividly book connect-back shellcode type shellcode mainly used getting around firewalls firewalls going block port-binding shellcode working set allow known services active ports connect-back shellcode initiates connection back hacker ip address coming firewall instead going code book depicts connect-back use shellcode ways accomplish part book defenses intrusion prevention systems stop known hacking exploits countermeasures detect administrator network aware exploit may occurring using certain tools like reading logs packet sniffing network ways catch exploits occur system daemons system daemon server program unix system receives accepts incoming connections daemon program runs background detaches controlling terminal certain way point book code shown run daemon program signals also used unix-based environment make operating system calls signal type terminal immediately send interrupt message complete task whatever signal typed uses signals displayed coding examples book tools trade hacker certain set tools needs help exploiting exploit script tool uses already written exploit code find holes system program using exploit scripts easy even non-hacker use code already written couple exams exploit tools shown book use log files stated earlier log files way check events happening computer network hacker ability change log file says help noticed code directions change log files book overlooking obvious another sign program hacked longer work correctly time programs work correctly hacker modified accomplish another task skilled hacker however modify program still works correctly wants program exploited ways tell happened finding program exploited tedious process since usually starts taking parts program looking individually putting exploited program back together see exploited shown book advanced camouflage hacker exploiting program ip address written log file camouflaging log files ip address detected shown book ip address hidden called spoofing ip address whole infrastructure use intrusion detection systems intrusion prevention systems greatly helps avoid risk exploited even firewalls routers log files show evidence hacking making sure outbound tcp connections processed one way limit found ways shown book use tcp connections easier go undetected payload smuggling using shellcode exploit programs caught intrusion detection systems usually intrusion detection system catch programs already written noticeable shell code exploit programs caught real hackers using ways hide shellcode harder detect couple examples hide shellcode found book buffer restrictions sometimes restrictions put buffers vulnerabilities exploited ways book depicts get around buffer restrictions hardening countermeasures exploits found book around long time took hackers figured take advantage vulnerabilities described book memory corruption change control use shellcode three easiest steps exploitation nonexecutable stack applications use stack type executing one defense make stack non-executable buffer overflows used exploitation program defense effective stopping use shellcode application however way get around use non-executable stack shown described book randomized stack space randomized stack type countermeasure used hacker unable tell shellcode implemented randomizes memory layout within stack also way get around countermeasure examples book cryptology use communicating secretly use ciphers cryptanalysis process cracking deciphering secret communications chapter offers information theory cryptology including work claude shannon concepts including unconditional security one-time pads quantum key distribution computational security using key encrypt decrypt messages symmetric encryption asymmetric encryption involves using different keys public private chapter gives examples kinds encryption use cipher encryption algorithm combining use symmetric cipher asymmetric cipher called hybrid cipher ways attack ciphers get around encryption methods shown described book chapter also shows methods figure encrypted passwords including brute-force attacks hash look-ups also offers methods get around wireless 802.11b wi-fi wired equivalent privacy wep encryption
node23:Wikipedia entry. Entry name: Padding_oracle_attack. Entry content: padding oracle attack cryptography padding oracle attack attack uses padding validation cryptographic message decrypt ciphertext cryptography variable-length plaintext messages often padded expanded compatible underlying cryptographic primitive attack relies padding oracle freely responds queries whether message correctly padded padding oracle attacks mostly associated cbc mode decryption used within block ciphers padding modes asymmetric algorithms oaep may also vulnerable padding oracle attacks symmetric cryptography padding oracle attack applied cbc mode operation oracle usually server leaks data whether padding encrypted message correct data allow attackers decrypt sometimes encrypt messages oracle using oracle key without knowing encryption key standard implementation cbc decryption block ciphers decrypt ciphertext blocks validate padding remove pkcs7 padding return message plaintext server returns invalid padding error instead generic decryption failed error attacker use server padding oracle decrypt sometimes encrypt messages mathematical formula cbc decryption depicted cbc decryption xors plaintext block previous ciphertext block result single-byte modification block formula_3 make corresponding change single byte formula_4 suppose attacker two ciphertext blocks formula_5 wants decrypt second block get plaintext formula_4 attacker changes last byte formula_3 creating formula_8 sends formula_9 server server returns whether padding last decrypted block formula_10 correct equal 0x01 padding correct attacker knows last byte formula_11 formula_12 therefore formula_13 padding incorrect attacker change last byte formula_8 next possible value attacker need make 256 attempts one guess every possible byte find last byte formula_4 decrypted block contains padding information bytes used padding additional attempt need made resolve ambiguity determining last byte formula_4 attacker use technique obtain second-to-last byte formula_4 attacker sets last byte formula_4 formula_19 setting last byte formula_3 formula_21 attacker uses approach described time modifying second-to-last byte padding correct 0x02 0x02 block consists 128 bits aes example 16 bytes attacker obtain plaintext formula_4 255⋅16 4080 attempts significantly faster formula_23 attempts required bruteforce 128-bit key original attack published 2002 serge vaudenay concrete instantiations attack later realised ssl ipsec also applied several web frameworks including javaserver faces ruby rails asp.net well software steam gaming client 2012 shown effective hardened security devices earlier attacks fixed tls implementors following public announcement new variant lucky thirteen attack published 2013 used timing side-channel re-open vulnerability even implementations previously fixed early 2014 attack longer considered threat real-life operation though still workable theory see signal-to-noise ratio certain class machines active area development attacks upon cryptographic protocols used secure internet traffic downgrade attack logjam export rsa/freak attacks trick clients using less-secure cryptographic operations provided compatibility legacy clients secure ones available attack called poodle late 2014 combines downgrade attack ssl 3.0 padding oracle attack older insecure protocol enable compromise transmitted data may 2016 revealed cve-2016-2107 fix lucky thirteen openssl introduced another padding oracle
node24:Wikipedia entry. Entry name: Requirements_Modeling_Framework. Entry content: requirements modeling framework requirements modeling framework rmf open-source software framework working requirements based reqif standard rmf consists core allowing reading writing manipulating reqif data user interface allowing inspect edit request data rmf first currently open-source reference implementation reqif standards noteworthy fact rmf already deployed prostep reqif implementor forum order ensure interoperability commercial implementation since 2011 reports german international press rmf rmf development name pror since 2009 scope deploy research project collaborative efforts quickly developed research project verde resulting significant acceleration development point data model based rif predecessor reqif june 2011 proposal created transform code eclipse foundation project proposal adopted november 2011 part migration eclipse foundation conversion rif current version reqif 1.0.1 spring 2012 deploy verde opted research projects nevertheless rmf keeps evolving within framework research project advance formal mind free extensions pror name pror essentials developed currently neither version 0.14 0.13 integrated latest version eclipse neither pror rmf version 0.10.0 remains reasons unknown version 0.13 release folder version 0.14 latest folder integrated eclipse version mars.2 release 4.5.2 rmf core allows storing writing validating manipulating reqif files manipulation data implemented programmatically using emf pror additionally enables interactive creation inspecting editing reqif models requirements presented configurable tables links requirements created via drag drop context menus pror designed integration eclipse-based tools extension point available makes possible integrate available renderers editors react drag drop events outside part deploy advance integration event-b models developed topcased -project suggested integrated rmf integrations proposed implemented prototype
node25:Wikipedia entry. Entry name: Low_Orbit_Ion_Cannon. Entry content: low orbit ion cannon low orbit ion cannon loic open-source network stress testing denial-of-service attack application written c loic initially developed praetox technologies later released public domain hosted several open source platforms loic performs dos attack used multiple individuals ddos attack target site flooding server tcp udp packets intention disrupting service particular host people used loic join voluntary botnets software inspired creation independent javascript version called js loic well loic-derived web version called low orbit web cannon enable dos web browser security experts quoted bbc indicated well-written firewall rules filter traffic ddos attacks loic thus preventing attacks fully effective least one instance filtering udp icmp traffic blocked loic attack internet service providers provide less bandwidth customers order provide guaranteed service levels customers firewall rules sort likely effective implemented point upstream application server internet uplink words easy cause isp drop traffic destined customer sending greater amount traffic allowed customer link filtration occurs customer side traffic traverses link stop service provider dropping excess traffic destined customer loic attacks easily identified system logs attack tracked ip addresses used loic used anonymous group spawned /b/ board 4chan project chanology attack websites church scientology successfully attack recording industry association america website october 2010 used anonymous operation payback december 2010 attack websites companies organizations opposed wikileaks retaliation shutdown file sharing service megaupload arrest four workers members anonymous launched ddos attack upon websites universal music group company responsible lawsuit megaupload united states department justice united states copyright office federal bureau investigation mpaa warner music group riaa well hadopi afternoon january 19 2012 loic general attack hoped retaliate anonymous members believed harmed digital freedoms loic application named ion cannon fictional weapon many sci-fi works video games particular namesake command conquer series downloading using loic personal servers means stress-testing perfectly legal least united states using program perform ddos attack someone else could considered felony computer fraud abuse act 1986 cfaa charge could land someone 20 years imprisonment fine
node26:Wikipedia entry. Entry name: MotoMagx. Entry content: motomagx motomagx linux kernel-based mobile operating system developed launched 2007 motorola run mid-to-high-end mobile phones system based montavista mobilinux originally intended 60 upcoming devices soon dropped favor android windows mobile operating systems motomagx compatible motorola gsm/umts devices shown due lack implementation compatible qualcomm cdma2000 devices result motorola often sold multiple device variants radically different firmware example motorola razr2 t-mobile shipped motomagx whereas razr2 verizon wireless shipped motorola p2k firmware created significant confusion customers user experience varied widely two identical devices simply based carrier phones based os
node27:Wikipedia entry. Entry name: Wi-Fi_Protected_Access. Entry content: wi-fi protected access wi-fi protected access wpa wi-fi protected access ii wpa2 wi-fi protected access 3 wpa3 three security protocols security certification programs developed wi-fi alliance secure wireless computer networks alliance defined response serious weaknesses researchers found previous system wired equivalent privacy wep wpa sometimes referred draft ieee 802.11i standard became available 2003 wi-fi alliance intended intermediate measure anticipation availability secure complex wpa2 became available 2004 common shorthand full ieee 802.11i ieee 802.11i-2004 standard january 2018 wi-fi alliance announced release wpa3 several security improvements wpa2 wi-fi alliance intended wpa intermediate measure take place wep pending availability full ieee 802.11i standard wpa could implemented firmware upgrades wireless network interface cards designed wep began shipping far back 1999 however since changes required wireless access points aps extensive needed network cards pre-2003 aps could upgraded support wpa wpa protocol implements much ieee 802.11i standard specifically temporal key integrity protocol tkip adopted wpa wep used 64-bit 128-bit encryption key must manually entered wireless access points devices change tkip employs per-packet key meaning dynamically generates new 128-bit key packet thus prevents types attacks compromised wep wpa also includes message integrity check designed prevent attacker altering resending data packets replaces cyclic redundancy check crc used wep standard crc main flaw provide sufficiently strong data integrity guarantee packets handled well tested message authentication codes existed solve problems required much computation used old network cards wpa uses message integrity check algorithm called tkip verify integrity packets tkip much stronger crc strong algorithm used wpa2 researchers since discovered flaw wpa relied older weaknesses wep limitations message integrity code hash function named michael retrieve keystream short packets use re-injection spoofing wpa2 replaced wpa wpa2 requires testing certification wi-fi alliance implements mandatory elements ieee 802.11i particular includes mandatory support ccmp aes-based encryption mode certification began september 2004 march 13 2006 wpa2 certification mandatory new devices bear wi-fi trademark january 2018 wi-fi alliance announced wpa3 replacement wpa2 new standard uses 128-bit encryption wpa3-personal mode 192-bit wpa3-enterprise forward secrecy wpa3 standard also replaces pre-shared key exchange simultaneous authentication equals defined ieee 802.11-2016 resulting secure initial key exchange personal mode wi-fi alliance also claims wpa3 mitigate security issues posed weak passwords simplify process setting devices display interface wpa designed specifically work wireless hardware produced prior introduction wpa protocol provides inadequate security wep devices support wpa applying firmware upgrades available legacy devices wi-fi devices certified since 2006 support wpa wpa2 security protocols wpa2 may work older network cards different wpa versions protection mechanisms distinguished based target end-user according method authentication key distribution encryption protocol used originally eap-tls extensible authentication protocol transport layer security certified wi-fi alliance april 2010 wi-fi alliance announced inclusion additional eap types wpa- wpa2- enterprise certification programs ensure wpa-enterprise certified products interoperate one another 802.1x clients servers developed specific firms may support eap types certification attempt popular eap types interoperate failure one major issues preventing rollout 802.1x heterogeneous networks commercial 802.1x servers include microsoft internet authentication service juniper networks steelbelted radius well aradial radius server freeradius open source 802.1x server pre-shared key wpa wpa2 remain vulnerable password cracking attacks users rely weak password passphrase wpa passphrase hashes seeded ssid name length rainbow tables exist top 1,000 network ssids multitude common passwords requiring quick lookup speed cracking wpa-psk brute forcing simple passwords attempted using aircrack suite starting four-way authentication handshake exchanged association periodic re-authentication wpa3 replaces cryptographic protocols susceptible off-line analysis protocols require interaction infrastructure guessed password supposedly placing temporal limits number guesses however design flaws wpa3 enables attackers plausibly launch brute-force attacks see dragonblood attack wpa wpa2 n't provide forward secrecy meaning adverse person discovers pre-shared key potentially decrypt packets encrypted using psk transmitted future even past could passively silently collected attacker also means attacker silently capture decrypt others packets wpa-protected access point provided free charge public place password usually shared anyone place words wpa protects attackers n't access password safer use transport layer security tls similar top transfer sensitive data however starting wpa3 issue addressed mathy vanhoef frank piessens significantly improved upon wpa-tkip attacks erik tews martin beck demonstrated inject arbitrary amount packets packet containing 112 bytes payload demonstrated implementing port scanner executed client using wpa-tkip additionally showed decrypt arbitrary packets sent client mentioned used hijack tcp connection allowing attacker inject malicious javascript victim visits website contrast beck-tews attack could decrypt short packets mostly known content arp messages allowed injection 3 7 packets 28 bytes beck-tews attack also requires quality service defined 802.11e enabled vanhoef-piessens attack neither attack leads recovery shared session key client access point authors say using short rekeying interval prevent attacks strongly recommend switching tkip aes-based ccmp halvorsen others show modify beck-tews attack allow injection 3 7 packets size 596 bytes downside attack requires substantially time execute approximately 18 minutes 25 seconds work vanhoef piessens showed wpa used encrypt broadcast packets original attack also executed important extension substantially networks use wpa protect broadcast packets protect unicast packets execution time attack average around 7 minutes compared 14 minutes original vanhoef-piessens beck-tews attack vulnerabilities tkip significant wpa-tkip held extremely safe combination indeed wpa-tkip still configuration option upon wide variety wireless routing devices provided many hardware vendors survey 2013 showed 71 still allow usage tkip 19 exclusively support tkip serious security flaw revealed december 2011 stefan viehböck affects wireless routers wi-fi protected setup wps feature regardless encryption method use recent models feature enable default many consumer wi-fi device manufacturers taken steps eliminate potential weak passphrase choices promoting alternative methods automatically generating distributing strong keys users add new wireless adapter appliance network methods include pushing buttons devices entering 8-digit pin wi-fi alliance standardized methods wi-fi protected setup however pin feature widely implemented introduced major new security flaw flaw allows remote attacker recover wps pin router wpa/wpa2 password hours users urged turn wps feature although may possible router models also pin written label wi-fi routers wps changed compromised wpa3 introduces new alternative configuration devices lack sufficient user interface capabilities allowing nearby devices serve adequate ui network provisioning purposes thus mitigating need wps several weaknesses found ms-chapv2 severely reduce complexity brute-force attacks making feasible modern hardware 2012 complexity breaking ms-chapv2 reduced breaking single des key work moxie marlinspike marsh ray moxie advised enterprises depending mutual authentication properties ms-chapv2 connection wpa2 radius servers immediately start migrating something else tunneled eap methods using ttls peap encrypt mschapv2 exchange widely deployed protect exploitation vulnerability however prevalent wpa2 client implementations early 2000s prone misconfiguration end users cases e.g android lacked user-accessible way properly configure validation aaa server certificate cns extended relevance original weakness mschapv2 within mitm attack scenarios stricter wpa2 compliance tests announce alongside wpa3 certified client software required conform certain behaviors surrounding aaa certificate validation hole196 vulnerability wpa2 protocol abuses shared group temporal key gtk used conduct man-in-the-middle denial-of-service attacks however assumes attacker already authenticated access point thus possession gtk 2016 shown wpa wpa2 standards contain insecure expository random number generator rng researchers showed vendors implement proposed rng attacker able predict group key gtk supposed randomly generated access point ap additionally showed possession gtk enables attacker inject traffic network allowed attacker decrypt internet traffic transmitted wireless network demonstrated attack asus rt-ac51u router uses mediatek out-of-tree drivers generate gtk showed gtk recovered within two minutes less similarly demonstrated keys generated broadcom access daemons running vxworks 5 later recovered four minutes less affects example certain versions linksys wrt54g certain apple airport extreme models vendors defend attack using secure rng hostapd running linux kernels vulnerable attack thus routers running typical openwrt lede installations exhibit issue october 2017 details krack key reinstallation attack attack wpa2 published krack attack believed affect variants wpa wpa2 however security implications vary implementations depending upon individual developers interpreted poorly specified part standard software patches resolve vulnerability available devices april 2019 serious design flaws wpa3 found allow attackers perform downgrade attacks side-channel attacks enabling brute-forcing passphrase well launching denial-of-service attacks wi-fi base stations
node28:Wikipedia entry. Entry name: Network_Time_Protocol. Entry content: network time protocol network time protocol ntp networking protocol clock synchronization computer systems packet-switched variable-latency data networks operation since 1985 ntp one oldest internet protocols current use ntp designed david l. mills university delaware ntp intended synchronize participating computers within milliseconds coordinated universal time utc uses intersection algorithm modified version marzullo algorithm select accurate time servers designed mitigate effects variable network latency ntp usually maintain time within tens milliseconds public internet achieve better one millisecond accuracy local area networks ideal conditions asymmetric routes network congestion cause errors 100 ms protocol usually described terms client-server model easily used peer-to-peer relationships peers consider potential time source implementations send receive timestamps using user datagram protocol udp port number 123 also use broadcasting multicasting clients passively listen time updates initial round-trip calibrating exchange ntp supplies warning impending leap second adjustment information local time zones daylight saving time transmitted current protocol version 4 ntpv4 proposed standard documented backward compatible version 3 specified /small 1979 network time synchronization technology used possibly first public demonstration internet services running trans-atlantic satellite network national computer conference new york technology later described 1981 internet engineering note ien 173 public protocol developed documented technology first deployed local area network part hello routing protocol implemented fuzzball router experimental operating system used network prototyping ran many years related network tools available include daytime time protocols recording time events well icmp timestamp ip timestamp option complete synchronization systems although lacking ntp data analysis clock disciplining algorithms include unix daemon timed uses election algorithm appoint server clients digital time synchronization service dtss uses hierarchy servers similar ntp stratum model 1985 ntp version 0 ntpv0 implemented fuzzball unix ntp packet header round-trip delay offset calculations persisted ntpv4 documented despite relatively slow computers networks available time accuracy better 100 milliseconds usually obtained atlantic spanning links accuracy tens milliseconds ethernet networks 1988 much complete specification ntpv1 protocol associated algorithms published drew experimental results clock filter algorithm documented first version describe client-server peer-to-peer modes 1991 ntpv1 architecture protocol algorithms brought attention wider engineering community publication article david l. mills ieee transactions communications 1989 published defining ntpv2 means state machine pseudocode describe operation introduced management protocol cryptographic authentication scheme survived ntpv4 bulk algorithms era also largely survived ntpv4 1992 defined ntpv3 rfc included analysis sources error reference clock final client enabled calculation metric helps choose best server several candidates appear disagree broadcast mode introduced subsequent years new features added algorithm improvements made became apparent new protocol version required 2010 published containing proposed specification ntpv4 protocol significantly moved since 2014 updated rfc yet published following retirement mills university delaware reference implementation currently maintained open source project led harlan stenn ntp uses hierarchical semi-layered system time sources level hierarchy termed stratum assigned number starting zero reference clock top server synchronized stratum n server runs stratum n 1 number represents distance reference clock used prevent cyclical dependencies hierarchy stratum always indication quality reliability common find stratum 3 time sources higher quality stratum 2 time sources brief description strata 0 1 2 3 provided upper limit stratum 15 stratum 16 used indicate device unsynchronized ntp algorithms computer interact construct bellman-ford shortest-path spanning tree minimize accumulated round-trip delay stratum 1 servers clients addition stratum protocol able identify synchronization source server terms reference identifier refid 64-bit timestamps used ntp consist 32-bit part seconds 32-bit part fractional second giving time scale rolls every 2 seconds 136 years theoretical resolution 2 seconds 233 picoseconds ntp uses epoch january 1 1900 therefore first rollover occurs february 7 2036 ntpv4 introduces 128-bit date format 64 bits second 64 bits fractional-second most-significant 32-bits format era number resolves rollover ambiguity cases according mills 64-bit value fraction enough resolve amount time takes photon pass electron speed light 64-bit second value enough provide unambiguous time representation universe goes dim typical ntp client regularly polls one ntp servers client must compute time offset round-trip delay time offset θ difference absolute time two clocks defined round-trip delay δ values θ δ passed filters subjected statistical analysis outliers discarded estimate time offset derived best three remaining candidates clock frequency adjusted reduce offset gradually creating feedback loop accurate synchronization achieved incoming outgoing routes client server symmetrical nominal delay routes common nominal delay systematic bias exists half difference forward backward travel times ntp reference implementation along protocol continuously developed 20 years backwards compatibility maintained new features added contains several sensitive algorithms especially discipline clock misbehave synchronized servers use different algorithms software ported almost every computing platform including personal computers runs daemon called ntpd unix service windows reference clocks supported offsets filtered analysed way remote servers although usually polled frequently implementation audited 2017 finding numerous potential security issues simple network time protocol sntp less complex implementation ntp using protocol without requiring storage state extended periods time used embedded systems applications full ntp capability required microsoft windows versions since windows 2000 include windows time service w32time ability synchronize computer clock ntp server w32time originally implemented purpose kerberos version 5 authentication protocol required time within 5 minutes correct value prevent replay attacks version windows 2000 windows xp implements sntp violates several aspects ntp version 3 standard beginning windows server 2003 windows vista compliant implementation ntp included microsoft states w32time reliably maintain time synchronization one second accuracy higher accuracy desired microsoft recommends using newer version windows different ntp implementation windows 10 windows server 2016 support 1 ms time accuracy certain operating conditions 2004 henning brauer presented openntpd ntp implementation focus security encompassing privilege separated design whilst aimed closely simpler generic needs openbsd users also includes protocol security improvements whilst still compatible existing ntp servers originally designed openbsd portable version available made available package linux package repositories new ntp client ntimed started poul-henning kamp 2014 new implementation sponsored linux foundation replacement reference implementation determined easier write new implementation scratch fix existing issues large existing code base june 2015 official release done yet ntimed synchronize clocks reliably ntimed works debian freebsd remains ported windows macos ntpsec fork reference implementation systematically security-hardened fork point june 2015 response rash compromises 2014 first production release shipped october 2017 removal unsafe features removal support obsolete hardware removal support obsolete unix variants ntpsec able pare away 75 original codebase making remainder auditable 2017 audit code showed eight security issues including two present original reference implementation ntpsec suffer eight issues remained reference implementation chrony comes default red hat distributions available ubuntu repositories chrony aimed ordinary computers unstable go sleep mode intermittent connection internet chrony also designed virtual machines much unstable environment characterized low resource consumption cost supports ptp well ntp two main components chronyd daemon executed computer starts chronyc command line interface user configuration evaluated safe incidents advantage versatility code written scratch avoid complexity code chrony written gnu general public license version 2 created richard curnow 1997 others along time currently maintained miroslav lichvar development supported red hat software day leap second event ntpd receives notification either configuration file attached reference clock remote server requirement time must appear monotonically increasing leap second inserted sequence 23:59:59 23:59:60 00:00:00 although clock actually halted event processes query system time cause increase tiny amount preserving order events negative leap second ever become necessary would deleted sequence 23:59:58 00:00:00 skipping 23:59:59 alternative implementation called leap smearing consists introducing leap second incrementally period 24 hours noon noon utc time implementation used google internally public ntp servers amazon aws security problems identified reference implementation ntp codebase ones appeared 2009 cause significant concern protocol undergoing revision review entire history january 2011 security revisions ntp specification reports cert current codebase reference implementation undergoing security audits several sources several years known high-risk vulnerabilities current released software several security concerns arose late 2014 previously researchers became aware ntp servers susceptible man-in-the-middle attacks unless packets cryptographically signed authentication computational overhead involved make impractical busy servers particularly denial service attacks ntp message spoofing used move clocks client computers allow number attacks based bypassing cryptographic key expiration services affected fake ntp messages identified tls dnssec various caching schemes dns cache bgp bitcoin number persistent login schemes 2017 security audit three ntp implementations conducted behalf linux foundation core infrastructure initiative suggested ntp ntpsec problematic chrony security standpoint ntp used distributed denial service ddos attacks small query sent ntp server return address spoofed target address similar dns amplification attack server responds much larger reply allows attacker substantially increase amount data sent target avoid participating attack servers configured ignore external queries upgraded version 4.2.7p26 later stack-based buffer overflow exploit discovered patch available december 19 2014 includes ntp version 4 releases version 4.2.8 apple concerned enough used auto-update capability first time though recent versions macos case version 10.6.8 manual fixes server version normal client users turn automatic time updating system preferences date time implementation errors basic missing return statement routine lead unlimited access systems running versions ntp root daemon systems use root daemon bsd subject flaw
node29:Wikipedia entry. Entry name: Meet-in-the-middle_attack. Entry content: meet-in-the-middle attack meet-in-the-middle attack mitm generic space–time tradeoff cryptographic attack encryption schemes rely performing multiple encryption operations sequence mitm attack primary reason double des used triple des key 168-bit bruteforced attacker 2 space 2 operations trying improve security block cipher tempting idea encrypt data several times using multiple keys one might think doubles even n -tuples security multiple-encryption scheme depending number times data encrypted exhaustive search possible combination keys simple brute-force would take 2 attempts data encrypted k -bit keys n times mitm generic attack weakens security benefits using multiple encryptions storing intermediate values encryptions decryptions using improve time required brute force decryption keys makes meet-in-the-middle attack mitm generic space–time tradeoff cryptographic attack mitm attack attempts find keys using range ciphertext domain plaintext composition several functions block ciphers forward mapping first functions backward mapping inverse image last functions quite literally meeting middle composed function example although double des encrypts data two different 56-bit keys double des broken 2 encryption decryption operations multidimensional mitm md-mitm uses combination several simultaneous mitm attacks like described meeting happens multiple positions composed function diffie hellman first proposed meet-in-the-middle attack hypothetical expansion block cipher 1977 attack used space–time tradeoff break double-encryption scheme twice time needed break single-encryption scheme 2011 bo zhu guang gong investigated multidimensional meet-in-the-middle attack presented new attacks block ciphers gost ktantan hummingbird-2 assume someone wants attack encryption scheme following characteristics given plaintext p ciphertext c enc encryption function dec decryption function defined enc inverse mapping k k two keys naive approach brute-forcing encryption scheme decrypt ciphertext every possible k decrypt intermediate outputs every possible k total 2 2 2 operations meet-in-the-middle attack uses efficient approach decrypting c k one obtains following equivalence attacker compute enc p values k dec c possible values k total 2 2 2 k k size operations result enc p operations matches result dec c operations pair k k possibly correct key potentially-correct key called candidate key attacker determine candidate key correct testing second test-set plaintext ciphertext mitm attack one reasons data encryption standard des replaced triple des double des attacker use mitm attack bruteforce double des 2 operations 2 space making small improvement des triple des uses triple length 168-bit key also vulnerable meet-in-the-middle attack 2 space 2 operations considered secure due size keyspace compute following match found keep k k candidate key-pair table test pairs new pair confirm validity key-pair work new pair mitm new pair keysize k attack uses 2encryptions decryptions 2 memory case look-up table built set forward computations contrast naive attack needs 2 encryptions 1 space 1d-mitm efficient sophisticated attack developed multidimensional meet-in-the-middle attack also abbreviated md-mitm preferred data encrypted using 2 encryptions different keys instead meeting middle one place sequence md-mitm attack attempts reach several specific intermediate states using forward backward computations several positions cipher assume attack mounted block cipher encryption decryption defined plaintext p encrypted multiple times using repetition block cipher md-mitm used cryptanalysis among many gost block cipher shown 3d-mitm significantly reduced time complexity attack compute following possible guess intermediate state formula_18 compute following whether matches formula_38 case use found combination sub-keys formula_39 another pair plaintext/ciphertext verify correctness key note nested element algorithm guess every possible value done guess previous make element exponential complexity overall time complexity md-mitm attack time complexity attack without brute force formula_40⋅formula_41⋅formula_42 regarding memory complexity easy see formula_43 much smaller first built table candidate values formula_44 increases candidate values contained formula_45 must satisfy conditions thereby fewer candidates pass end destination formula_38 upper bound memory complexity md-mitm denotes length whole key combined data complexity depends probability wrong key may pass obtain false positive formula_48 intermediate state first mitm phase size intermediate state block size often considering also many keys left testing first mitm-phase formula_49 therefore first mitm phase formula_50 |⋅| denotes length main memory consumption restricted construction sets b much smaller others data complexity see subsection complexity md-mitm",wikics,nc
"Classify the wikipedia page represented by node12 using its subgraph data (text attributes and connections) as follows.

node0: Linux is an open-source Unix-like OS based on the Linux kernel, widely used across servers, supercomputers, and embedded systems, with debates over its GNU/Linux naming.  
node1: Flatpak is a Linux package manager enabling sandboxed app deployment, isolating apps with controlled permissions via repositories like Flathub.  
node2: Garbage collection automates memory management by reclaiming unused objects, common in languages like Java, but risks performance pauses.  
node3: Line discipline is a Unix terminal subsystem layer managing I/O policies, handling special characters and data transformations between drivers and user interfaces.
node4: Android development uses Kotlin/Java/C++ with SDK tools like Android Studio; involves cross-platform support, OS version compatibility, and faces security/fragmentation challenges.  
node5: JavaScript is a high-level scripting language conforming to ECMAScript standards, enabling dynamic web content, server-side use via Node.js, and addressing security concerns like XSS/CSRF.
node6: Windows-based handheld PC console with gaming controls, crowdfunded, runs x86 apps, features Intel Atom CPU, aimed at PC game emulation and portability.  
node7: Unix networking framework for modular device drivers, enabling full-duplex I/O, used in System V for terminals and protocols, now marked obsolescent.  
node8: Open-source browser using Gecko, known for speed and add-ons; evolved from Mozilla Suite, challenged IE dominance, later focused on Quantum performance upgrades.  
node9: Open-source CFML server rivaling ColdFusion, Java-based, emphasized performance, forked into Lucee, supports multiple web contexts and security features.
node10: Ruby implementation on Java VM, supports Ruby versions 1.8/1.9/2.2, integrates with Java, developed by Charles Nutter/Thomas Enebo, backed by Sun/Red Hat.  
node11: Python's default package manager, installs packages from PyPI, supports dependency files, included in Python 2.7.9+ and 3.4+.  
node12: FLOSSK promotes FOSS, organizes conferences, supports Linux, education, and mapping via OpenStreetMap.  
node13: Forked OpenBSD, focuses on security/European localization, supports x86/Sparc, aims to run BSD userland on Linux kernels.  
node14: COM interface enabling late-binding, uses DISPIDs for method/property calls, supports cross-platform scripting.  
node15: Mandriva/Mageia's package manager, handles dependencies, includes GUI rpmdrake, maintained for Linux derivatives.  
node16: Cross-platform package manager using functional deployment, ensures reproducible builds via cryptographic hashes.  
node17: Java ORM tool mapping objects to databases, uses HQL/annotations, JPA-compliant, simplifies persistence.  
node18: Software to build Puppy Linux variants, runs within Puppy, requires internet, uses CD-remaster for customization.
node19: PHP is a free, server-side scripting language for web development, created in 1994. It evolved through versions, faced Unicode challenges, and powers millions of websites.  
node20: Red Hat (acquired by IBM in 2019) provides open-source enterprise software like RHEL, focuses on cloud/virtualization, and contributes to Linux kernel development.  
node21: MacPorts (formerly DarwinPorts) simplifies macOS package management via command-line, supporting prebuilt binaries or source compilation, hosted on GitHub since 2016.  
node22: Gnash is an open-source Flash player alternative, supporting SWF files up to v8, cross-platform compatible, but struggles with codecs and developer shortages.
node23: Created Java and Solaris, pioneered Unix workstations, acquired by Oracle in 2009 after hardware declines and open-source contributions.  
node24: Domain-specific language for managing relational databases, standardized by ANSI/ISO, supports DDL/DML, developed by IBM, used for data query/definition despite vendor variations.  
node25: Python implementation for Java platforms, runs on JVM, compatible with Python 2.7, uses Java classes, released under Apache License.  
node26: Arch Linux variant optimized for Acer Aspire One, offers OpenBox/GNOME/KDE editions, includes apps like Firefox, GIMP, and OpenOffice.  
node27: Sun’s last pizza-box workstation (1990s), used Supersparc CPUs, supported multi-CPU/SBUS, ran Solaris/Linux, discontinued with UltraSPARC shift.  
node28: Python library for optimizing mathematical expressions, compiles to CPU/GPU, developed by MILA, discontinued post-1.0 (2017) due to competition.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node4>,<node0, node6>,<node0, node7>,<node0, node8>,<node0, node9>,<node0, node11>,<node0, node12>,<node0, node13>,<node0, node15>,<node0, node16>,<node0, node18>,<node0, node19>,<node0, node20>,<node0, node21>,<node0, node22>,<node0, node23>,<node0, node28>,<node1, node11>,<node1, node15>,<node1, node16>,<node1, node21>,<node2, node5>,<node2, node9>,<node2, node16>,<node2, node19>,<node3, node7>,<node4, node5>,<node4, node10>,<node4, node17>,<node4, node22>,<node4, node23>,<node4, node25>,<node5, node8>,<node5, node11>,<node5, node12>,<node5, node14>,<node5, node16>,<node5, node19>,<node5, node21>,<node5, node22>,<node5, node23>,<node5, node24>,<node8, node12>,<node8, node22>,<node8, node26>,<node9, node17>,<node9, node19>,<node10, node17>,<node10, node20>,<node10, node23>,<node10, node25>,<node11, node15>,<node11, node16>,<node11, node19>,<node11, node20>,<node11, node21>,<node12, node19>,<node12, node20>,<node12, node22>,<node12, node23>,<node12, node24>,<node13, node27>,<node15, node16>,<node15, node21>,<node16, node19>,<node16, node21>,<node17, node20>,<node17, node23>,<node17, node24>,<node17, node25>,<node19, node20>,<node19, node21>,<node19, node22>,<node19, node23>,<node20, node24>,<node23, node25>,<node23, node27>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",operating systems,"node0: Linux is an open-source Unix-like OS based on the Linux kernel, widely used across servers, supercomputers, and embedded systems, with debates over its GNU/Linux naming.  
node1: Flatpak is a Linux package manager enabling sandboxed app deployment, isolating apps with controlled permissions via repositories like Flathub.  
node2: Garbage collection automates memory management by reclaiming unused objects, common in languages like Java, but risks performance pauses.  
node3: Line discipline is a Unix terminal subsystem layer managing I/O policies, handling special characters and data transformations between drivers and user interfaces.
node4: Android development uses Kotlin/Java/C++ with SDK tools like Android Studio; involves cross-platform support, OS version compatibility, and faces security/fragmentation challenges.  
node5: JavaScript is a high-level scripting language conforming to ECMAScript standards, enabling dynamic web content, server-side use via Node.js, and addressing security concerns like XSS/CSRF.
node6: Windows-based handheld PC console with gaming controls, crowdfunded, runs x86 apps, features Intel Atom CPU, aimed at PC game emulation and portability.  
node7: Unix networking framework for modular device drivers, enabling full-duplex I/O, used in System V for terminals and protocols, now marked obsolescent.  
node8: Open-source browser using Gecko, known for speed and add-ons; evolved from Mozilla Suite, challenged IE dominance, later focused on Quantum performance upgrades.  
node9: Open-source CFML server rivaling ColdFusion, Java-based, emphasized performance, forked into Lucee, supports multiple web contexts and security features.
node10: Ruby implementation on Java VM, supports Ruby versions 1.8/1.9/2.2, integrates with Java, developed by Charles Nutter/Thomas Enebo, backed by Sun/Red Hat.  
node11: Python's default package manager, installs packages from PyPI, supports dependency files, included in Python 2.7.9+ and 3.4+.  
node12: FLOSSK promotes FOSS, organizes conferences, supports Linux, education, and mapping via OpenStreetMap.  
node13: Forked OpenBSD, focuses on security/European localization, supports x86/Sparc, aims to run BSD userland on Linux kernels.  
node14: COM interface enabling late-binding, uses DISPIDs for method/property calls, supports cross-platform scripting.  
node15: Mandriva/Mageia's package manager, handles dependencies, includes GUI rpmdrake, maintained for Linux derivatives.  
node16: Cross-platform package manager using functional deployment, ensures reproducible builds via cryptographic hashes.  
node17: Java ORM tool mapping objects to databases, uses HQL/annotations, JPA-compliant, simplifies persistence.  
node18: Software to build Puppy Linux variants, runs within Puppy, requires internet, uses CD-remaster for customization.
node19: PHP is a free, server-side scripting language for web development, created in 1994. It evolved through versions, faced Unicode challenges, and powers millions of websites.  
node20: Red Hat (acquired by IBM in 2019) provides open-source enterprise software like RHEL, focuses on cloud/virtualization, and contributes to Linux kernel development.  
node21: MacPorts (formerly DarwinPorts) simplifies macOS package management via command-line, supporting prebuilt binaries or source compilation, hosted on GitHub since 2016.  
node22: Gnash is an open-source Flash player alternative, supporting SWF files up to v8, cross-platform compatible, but struggles with codecs and developer shortages.
node23: Created Java and Solaris, pioneered Unix workstations, acquired by Oracle in 2009 after hardware declines and open-source contributions.  
node24: Domain-specific language for managing relational databases, standardized by ANSI/ISO, supports DDL/DML, developed by IBM, used for data query/definition despite vendor variations.  
node25: Python implementation for Java platforms, runs on JVM, compatible with Python 2.7, uses Java classes, released under Apache License.  
node26: Arch Linux variant optimized for Acer Aspire One, offers OpenBox/GNOME/KDE editions, includes apps like Firefox, GIMP, and OpenOffice.  
node27: Sun’s last pizza-box workstation (1990s), used Supersparc CPUs, supported multi-CPU/SBUS, ran Solaris/Linux, discontinued with UltraSPARC shift.  
node28: Python library for optimizing mathematical expressions, compiles to CPU/GPU, developed by MILA, discontinued post-1.0 (2017) due to competition.","node0:Wikipedia entry. Entry name: Linux. Entry content: linux linux family open source unix-like operating systems based linux kernel operating system kernel first released september 17 1991 linus torvalds linux typically packaged linux distribution distributions include linux kernel supporting system software libraries many provided gnu project many linux distributions use word linux name free software foundation uses name gnu/linux emphasize importance gnu software causing controversy popular linux distributions include debian fedora ubuntu commercial distributions include red hat enterprise linux suse linux enterprise server desktop linux distributions include windowing system x11 wayland desktop environment gnome kde plasma 5 distributions intended servers may omit graphics altogether include solution stack lamp linux freely redistributable anyone may create distribution purpose linux originally developed personal computers based intel x86 architecture since ported platforms operating system linux leading operating system servers big iron systems mainframe computers os used top500 supercomputers since november 2017 gradually eliminated competitors used around 2.3 percent desktop computers chromebook runs linux kernel-based chrome os dominates us k–12 education market represents nearly 20 percent sub- 300 notebook sales us linux also runs embedded systems i.e devices whose operating system typically built firmware highly tailored system includes routers automation controls televisions digital video recorders video game consoles smartwatches many smartphones tablet computers run android linux derivatives dominance android smartphones linux largest installed base general-purpose operating systems linux one prominent examples free open-source software collaboration source code may used modified distributed—commercially non-commercially—by anyone terms respective licenses gnu general public license unix operating system conceived implemented 1969 bell laboratories united states ken thompson dennis ritchie douglas mcilroy joe ossanna first released 1971 unix written entirely assembly language common practice time later key pioneering approach 1973 rewritten c programming language dennis ritchie exception hardware i/o routines availability high-level language implementation unix made porting different computer platforms easier due earlier antitrust case forbidding entering computer business required license operating system source code anyone asked result unix grew quickly became widely adopted academic institutions businesses 1984 divested bell labs freed legal obligation requiring free licensing bell labs began selling unix proprietary product users legally allowed modify unix gnu project started 1983 richard stallman goal creating complete unix-compatible software system composed entirely free software work began 1984 later 1985 stallman started free software foundation wrote gnu general public license gnu gpl 1989 early 1990s many programs required operating system libraries compilers text editors unix shell windowing system completed although low-level elements device drivers daemons kernel called gnu/hurd stalled incomplete linus torvalds stated gnu kernel available time 1991 would decided write although released 1992 due legal complications development 386bsd netbsd openbsd freebsd descended predated linux torvalds also stated 386bsd available time probably would created linux minix created andrew s. tanenbaum computer science professor released 1987 minimal unix-like operating system targeted students others wanted learn operating system principles although complete source code minix freely available licensing terms prevented free software licensing changed april 2000 1991 attending university helsinki torvalds became curious operating systems frustrated licensing minix time limited educational use began work operating system kernel eventually became linux kernel torvalds began development linux kernel minix applications written minix also used linux later linux matured linux kernel development took place linux systems gnu applications also replaced minix components advantageous use freely available code gnu project fledgling operating system code licensed gnu gpl reused computer programs long also released compatible license torvalds initiated switch original license prohibited commercial redistribution gnu gpl developers worked integrate gnu components linux kernel making fully functional free operating system linus torvalds wanted call invention freax portmanteau free freak x allusion unix start work system project makefiles included name freax half year torvalds already considered name linux initially dismissed egotistical order facilitate development files uploaded ftp server codice_1 funet september 1991 ari lemmke torvalds coworker helsinki university technology hut one volunteer administrators ftp server time think freax good name named project linux server without consulting torvalds later however torvalds consented linux demonstrate word linux pronounced torvalds included audio guide kernel source code another variant pronunciation adoption linux production environments rather used hobbyists started take first mid-1990s supercomputing community organizations nasa started replace increasingly expensive machines clusters inexpensive commodity computers running linux commercial use began dell ibm followed hewlett-packard started offering linux support escape microsoft monopoly desktop operating system market today linux systems used throughout computing embedded systems virtually supercomputers secured place server installations popular lamp application stack use linux distributions home enterprise desktops growing linux distributions also become popular netbook market many devices shipping customized linux distributions installed google releasing chrome os designed netbooks linux greatest success consumer market perhaps mobile device market android one dominant operating systems smartphones popular tablets recently wearables linux gaming also rise valve showing support linux rolling gaming oriented linux distribution linux distributions also gained popularity various local national governments federal government brazil greg kroah-hartman lead maintainer linux kernel guides development stallman heads free software foundation turn supports gnu components finally individuals corporations develop third-party non-gnu components third-party components comprise vast body work may include kernel modules user applications libraries linux vendors communities combine distribute kernel gnu components non-gnu components additional package management software form linux distributions linux-based system modular unix-like operating system deriving much basic design principles established unix 1970s 1980s system uses monolithic kernel linux kernel handles process control networking access peripherals file systems device drivers either integrated directly kernel added modules loaded system running gnu userland key part systems based linux kernel android notable exception project implementation c library functions wrapper system calls linux kernel necessary kernel-userspace interface toolchain broad collection programming tools vital linux development including compilers used build linux kernel coreutils implement many basic unix tools project also develops popular cli shell graphical user interface gui used linux systems built top implementation x window system recently linux community seeks advance wayland new display server protocol place x11 many open-source software projects contribute linux systems installed components linux system include following user interface also known shell either command-line interface cli graphical user interface gui controls attached associated hardware common embedded systems desktop systems default user interface usually graphical although cli commonly available terminal emulator windows separate virtual console cli shells text-based user interfaces use text input output dominant shell used linux bourne-again shell bash originally developed gnu project low-level linux components including various parts userland use cli exclusively cli particularly suited automation repetitive delayed tasks provides simple inter-process communication desktop systems popular user interfaces gui shells packaged together extensive desktop environments kde plasma gnome mate cinnamon unity lxde pantheon xfce though variety additional user interfaces exist popular user interfaces based x window system often simply called x provides network transparency permits graphical application running one system displayed another user may interact application however certain extensions x window system capable working network several x display servers exist reference implementation x.org server popular several types window managers exist x11 including tiling dynamic stacking compositing window managers provide means control placement appearance individual application windows interact x window system simpler x window managers dwm ratpoison i3wm herbstluftwm provide minimalist functionality elaborate window managers fvwm enlightenment window maker provide features built-in taskbar themes still lightweight compared desktop environments desktop environments include window managers part standard installations mutter gnome kwin kde xfwm xfce although users may choose use different window manager preferred wayland display server protocol intended replacement x11 protocol received wider adoption unlike x11 wayland need external window manager compositing manager therefore wayland compositor takes role display server window manager compositing manager weston reference implementation wayland gnome mutter kde kwin ported wayland standalone display servers enlightenment already successfully ported since version 19 linux currently two modern kernel-userspace apis handling video input devices v4l2 api video streams radio dvb api digital tv reception due complexity diversity different devices due large amount formats standards handled apis infrastructure needs evolve better fit devices also good userspace device library key success userspace applications able work formats supported devices primary difference linux many popular contemporary operating systems linux kernel components free open-source software linux operating system although far widely used free open-source software licenses based principle copyleft kind reciprocity work derived copyleft piece software must also copyleft common free software license gnu general public license gpl form copyleft used linux kernel many components gnu project linux-based distributions intended developers interoperability operating systems established computing standards linux systems adhere posix sus lsb iso ansi standards possible although date one linux distribution posix.1 certified linux-ft. free software projects although developed collaboration often produced independently fact software licenses explicitly permit redistribution however provides basis larger scale projects collect software produced stand-alone projects make available form linux distribution many linux distributions manage remote collection system software application software packages available download installation network connection allows users adapt operating system specific needs distributions maintained individuals loose-knit teams volunteer organizations commercial entities distribution responsible default configuration installed linux kernel general system security generally integration different software packages coherent whole distributions typically use package manager apt yum zypper pacman portage install remove update system software one central location distribution largely driven developer user communities vendors develop fund distributions volunteer basis debian well-known example others maintain community version commercial distributions red hat fedora suse opensuse many cities regions local associations known linux user groups lugs seek promote preferred distribution extension free software hold meetings provide free demonstrations training technical support operating system installation new users many internet communities also provide support linux users developers distributions free software open-source projects irc chatrooms newsgroups online forums another means support notable examples linuxquestions.org various distribution specific support community forums ones ubuntu fedora gentoo linux distributions host mailing lists commonly specific topic usage development given list several technology websites linux focus print magazines linux often bundle cover disks carry software even complete linux distributions although linux distributions generally available without charge several large corporations sell support contribute development components system free software analysis linux kernel showed 75 percent code december 2008 january 2010 developed programmers working corporations leaving 18 percent volunteers 7 unclassified major corporations provide contributions include dell ibm hp oracle sun microsystems part oracle nokia number corporations notably red hat canonical suse built significant business around linux distributions free software licenses various software packages distribution built linux kernel based explicitly accommodate encourage commercialization relationship linux distribution whole individual vendors may seen symbiotic one common business model commercial suppliers charging support especially business users number companies also offer specialized business version distribution adds proprietary support packages tools administer higher numbers installations simplify administrative tasks another business model give away software order sell hardware used norm computer industry operating systems cp/m apple dos versions mac os prior 7.6 freely copyable modifiable computer hardware standardized throughout 1980s became difficult hardware manufacturers profit tactic os would run manufacturer computer shared architecture linux distributions support dozens programming languages original development tools used building linux applications operating system programs found within gnu toolchain includes gnu compiler collection gcc gnu build system amongst others gcc provides compilers ada c c++ go fortran many programming languages cross-platform reference implementation supports linux example php perl ruby python java go rust haskell first released 2003 llvm project provides alternative cross-platform open-source compiler many languages proprietary compilers linux include intel c++ compiler sun studio ibm xl c/c++ compiler basic form visual basic supported forms gambas freebasic xbasic terms terminal programming quickbasic turbo basic programming form qb64 common feature unix-like systems linux includes traditional specific-purpose programming languages targeted scripting text processing system configuration management general linux distributions support shell scripts awk sed make many programs also embedded programming language support configuring programming example regular expressions supported programs like grep locate traditional unix mta sendmail contains turing complete scripting system advanced text editor gnu emacs built around general purpose lisp interpreter distributions also include support php perl ruby python dynamic languages common linux also supports c via mono vala scheme guile scheme acts extension language targeting gnu system utilities seeking make conventionally small static compiled c programs unix design rapidly dynamically extensible via elegant functional high-level scripting system many gnu programs compiled optional guile bindings end number java virtual machines development kits run linux including original sun microsystems jvm hotspot ibm j2se well many open-source projects like kaffe jikesrvm gnome kde popular desktop environments provide framework developing applications projects based gtk+ qt widget toolkits respectively also used independently larger framework support wide variety languages number integrated development environments available including anjuta codelite eclipse geany activestate komodo kdevelop lazarus monodevelop netbeans qt creator long-established editors vim nano emacs remain popular linux kernel widely ported operating system kernel available devices ranging mobile phones supercomputers runs highly diverse range computer architectures including hand-held arm-based ipaq ibm mainframes system z9 system z10 specialized distributions kernel forks exist less mainstream architectures example elks kernel fork run intel 8086 intel 80286 16-bit microprocessors µclinux kernel fork may run systems without memory management unit kernel also runs architectures ever intended use manufacturer-created operating system macintosh computers powerpc intel processors pdas video game consoles portable music players mobile phones several industry associations hardware conferences devoted maintaining improving support diverse hardware linux freedomhec time support different hardware improved linux resulting off-the-shelf purchase good chance compatible besides linux distributions designed general-purpose use desktops servers distributions may specialized different purposes including computer architecture support embedded systems stability security localization specific region language targeting specific user groups support real-time applications commitment given desktop environment furthermore distributions deliberately include free software four hundred linux distributions actively developed dozen distributions popular general-purpose use popularity linux standard desktop computers laptops increasing years modern distributions include graphical user environment two popular environments kde plasma desktop xfce single official linux desktop exists rather desktop environments linux distributions select components pool free open-source software construct gui implementing less strict design guide gnome example human interface guidelines design guide gives human–machine interface important role graphical design also considering people disabilities even focusing security collaborative nature free software development allows distributed teams perform language localization linux distributions use locales localizing proprietary systems would cost-effective example sinhalese language version knoppix distribution became available significantly microsoft translated windows xp sinhalese case lanka linux user group played major part developing localized system combining knowledge university professors linguists local developers performance linux desktop controversial topic example 2007 con kolivas accused linux community favoring performance servers quit linux kernel development frustration lack focus desktop gave tell interview topic since significant amount development focused improving desktop experience projects upstart systemd aim faster boot time wayland mir projects aim replacing x11 enhancing desktop performance security appearance many popular applications available wide variety operating systems example mozilla firefox openoffice.org/libreoffice blender downloadable versions major operating systems furthermore applications initially developed linux pidgin gimp ported operating systems including windows macos due popularity addition growing number proprietary desktop applications also supported linux autodesk maya foundry nuke high-end field animation visual effects see list proprietary software linux details also several companies ported companies games linux linux also supported platform popular steam desura digital-distribution services many types applications available microsoft windows macos also run linux commonly either free software application exist functions application found another operating system application version works linux skype video games like dota 2 team fortress 2 furthermore wine project provides windows compatibility layer run unmodified windows applications linux sponsored commercial interests including codeweavers produces commercial version software since 2009 google also provided funding wine project crossover proprietary solution based open-source wine project supports running windows versions microsoft office intuit applications quicken quickbooks adobe photoshop versions cs2 many popular games world warcraft cases linux port software areas desktop publishing professional audio equivalent software available linux also possible run applications written android versions linux using anbox besides externally visible components x window managers non-obvious quite central role played programs hosted freedesktop.org d-bus pulseaudio major desktop environments gnome kde include offering graphical front-ends written using corresponding toolkit gtk+ qt display server another component longest time communicating x11 display server protocol clients prominent software talking x11 includes x.org server xlib frustration cumbersome x11 core protocol especially numerous extensions led creation new display server protocol wayland installing updating removing software linux typically done use package managers synaptic package manager packagekit yum extender major linux distributions extensive repositories often containing tens thousands packages software run linux available official repositories alternatively users install packages unofficial repositories download pre-compiled packages directly websites compile source code methods come different degrees difficulty compiling source code general considered challenging process new linux users hardly needed modern distributions method specific linux linux distributions also become popular netbook market many devices asus eee pc acer aspire one shipping customized linux distributions installed 2009 google announced chrome os minimal linux-based operating system using chrome browser main user interface chrome os run non-web applications except bundled file manager media player certain level support android applications added later versions netbooks shipped operating system termed chromebooks started appearing market june 2011 linux distributions long used server operating systems risen prominence area netcraft reported september 2006 eight ten two unknown os reliable internet hosting companies ran linux distributions web servers linux top position june 2008 linux distributions represented five top ten freebsd three ten microsoft two ten since february 2010 linux distributions represented six top ten freebsd three ten microsoft one ten linux top position linux distributions cornerstone lamp server-software combination linux apache mariadb/mysql perl/php/python achieved popularity among developers one common platforms website hosting linux distributions become increasingly popular mainframes partly due pricing open-source model december 2009 computer giant ibm reported would predominantly market sell mainframe-based enterprise linux server linuxcon north america 2015 ibm announced linuxone series mainframes specifically designed run linux open-source software linux distributions also dominant operating systems supercomputers november 2017 supercomputers 500 list run variant linux several operating systems smart devices smartphones tablet computers smart tvs in-vehicle infotainment ivi systems based linux major platforms systems include android firefox os mer tizen android become dominant mobile operating system smartphones running 79.3 units sold worldwide second quarter 2013 android also popular operating system tablets android smart tvs in-vehicle infotainment systems also appeared market cellphones pdas running linux open-source platforms became common 2007 examples include nokia n810 openmoko neo1973 motorola rokr e8 continuing trend palm later acquired hp produced new linux-derived operating system webos built line palm pre smartphones nokia maemo one earliest mobile operating systems based debian later merged intel moblin another linux-based operating system form meego project later terminated favor tizen operating system targeted mobile devices well ivi tizen project within linux foundation several samsung products already running tizen samsung gear 2 significant example samsung z smartphones use tizen instead android result meego termination mer project forked meego codebase create basis mobile-oriented operating systems july 2012 jolla announced sailfish os mobile operating system built upon mer technology mozilla firefox os consists linux kernel hardware abstraction layer web-standards-based runtime environment user interface integrated web browser canonical released ubuntu touch aiming bring convergence user experience mobile operating system desktop counterpart ubuntu operating system also provides full ubuntu desktop connected external monitor due low cost ease customization linux often used embedded systems non-mobile telecommunications equipment sector majority customer-premises equipment cpe hardware runs linux-based operating system openwrt community driven example upon many oem firmware releases based example popular tivo digital video recorder also uses customized linux several network firewalls routers makers cisco/linksys korg oasys korg kronos yamaha motif xs/motif xf music workstations yamaha s90xs/s70xs yamaha mox6/mox8 synthesizers yamaha motif-rack xs tone generator module roland rd-700gx digital piano also run linux linux also used stage lighting control systems wholehogiii console past games available linux recent years games released support linux especially indie games exception aaa title games android popular mobile platform uses linux kernel gained much developer interest one main platforms mobile game development along ios operating system apple iphone ipad devices february 14 2013 valve released linux version steam popular game distribution platform pc many steam games ported linux december 13 2013 valve released steamos gaming oriented os based debian beta testing plans ship steam machines gaming entertainment platform valve also developed vogl opengl debugger intended aid video game development well porting source game engine desktop linux result valve effort several prominent games dota 2 team fortress 2 portal portal 2 left 4 dead 2 natively available desktop linux july 31 2013 nvidia released shield attempt use android specialized gaming platform linux users play windows games wine crossover linux 22 august 2018 valve released fork wine called proton aimed gaming features improvements vanilla wine vulkan-based directx 11 12 implementations steam integration better full screen game controller support improved performance multi-threaded games due flexibility customizability free open-source nature linux becomes possible highly tune linux specific purpose two main methods creating specialized linux distribution building scratch general-purpose distribution base distributions often used purpose include debian fedora ubuntu based debian arch linux gentoo slackware contrast linux distributions built scratch general-purpose bases instead focus jeos philosophy including necessary components avoiding resource overhead caused components considered redundant distribution use cases home theater pc htpc pc mainly used entertainment system especially home theater system normally connected television often additional audio system openelec linux distribution incorporates media center software kodi os tuned specifically htpc built ground adhering jeos principle os lightweight suitable confined usage range htpc also special editions linux distributions include mythtv media center software mythbuntu special edition ubuntu kali linux debian-based linux distribution designed digital forensics penetration testing comes preinstalled several software applications penetration testing identifying security exploits ubuntu derivative backbox provides pre-installed security network analysis tools ethical hacking arch-based blackarch includes 2100 tools pentesting security researching many linux distributions created privacy secrecy network anonymity information security mind including tails tin hat linux tinfoil hat linux lightweight portable security distribution based arch linux developed united states department defense tor-ramdisk minimal distribution created solely host network anonymity software tor linux live cd sessions long used tool recovering data broken computer system repairing system building upon idea several linux distributions tailored purpose emerged use gparted partition editor additional data recovery system repair software spacex uses multiple redundant fault-tolerant design falcon 9 rocket merlin engine controlled three voting computers two physical processors per computer constantly check operation linux inherently fault-tolerant operating system function whole system including hardware flight computer software makes purpose flexibility commercial off-the-shelf parts system-wide radiation-tolerant design used instead radiation hardened parts spacex conducted 76 launches falcon 9 since 2010 one successfully delivered primary payloads intended orbit plans use transport astronauts international space station addition windows used operating system non-mission critical systemslaptops used board space station examplebut replaced linux first linux-powered humanoid robot also undergoing in-flight testing jet propulsion laboratory used linux number years help projects relating construction unmanned space flight deep space exploration nasa uses linux robotics mars rover ubuntu linux save data satellites linux distributions created provide hands-on experience coding source code students devices raspberry pi addition producing practical device intention show students things work hood ubuntu derivatives edubuntu linux schools project well debian derivative skolelinux provide education-oriented software packages also include tools administering building school computer labs computer-based classrooms linux terminal server project ltsp instant webkiosk webconverger browser-based linux distributions often used web kiosks digital signage thinstation minimalist distribution designed thin clients rocks cluster distribution tailored high-performance computing clusters general-purpose linux distributions target specific audience users specific language geographical area examples include ubuntu kylin chinese language users blankon targeted indonesians profession-specific distributions include ubuntu studio media creation dnalinux bioinformatics also muslim-oriented distribution name sabily consequently also provides islamic tools certain organizations use slightly specialized linux distributions internally including gendbuntu used french national gendarmerie goobuntu used internally google astra linux developed specifically russian army many quantitative studies free/open-source software focus topics including market share reliability numerous studies specifically examining linux linux market growing rapidly revenue servers desktops packaged software running linux expected exceed 35.7 billion 2008 analysts proponents attribute relative success linux security reliability low cost freedom vendor lock-in linux kernel licensed gnu general public license gpl version 2 gpl requires anyone distributes software based source code license must make originating source code modifications available recipient terms key components typical linux distribution also mainly licensed gpl may use licenses many libraries use gnu lesser general public license lgpl permissive variant gpl x.org implementation x window system uses mit license torvalds states linux kernel move version 2 gpl version 3 specifically dislikes provisions new license prohibit use software digital rights management would also impractical obtain permission copyright holders number thousands 2001 study red hat linux 7.1 found distribution contained 30 million source lines code using constructive cost model study estimated distribution required eight thousand person-years development time according study software developed conventional proprietary means would cost us dollars develop united states source code 71 written c programming language many languages used including c++ lisp assembly language perl python fortran various shell scripting languages slightly half lines code licensed gpl linux kernel 2.4 million lines code 8 total later study analysis performed debian version 4.0 etch released 2007 distribution contained close 283 million source lines code study estimated would required seventy three thousand man-years cost us dollars develop conventional means united states name linux trademark registered linus torvalds initially nobody registered august 15 1994 william r. della croce jr. filed trademark linux demanded royalties linux distributors 1996 torvalds affected organizations sued trademark assigned torvalds 1997 case settled licensing trademark since handled linux mark institute lmi torvalds stated trademarked name prevent someone else using lmi originally charged nominal sublicensing fee use linux name part trademarks later changed favor offering free perpetual worldwide sublicense free software foundation fsf prefers gnu/linux name referring operating system whole considers linux distributions variants gnu operating system initiated 1983 richard stallman president fsf explicitly take issue name android android os also operating system based linux kernel gnu part minority public figures software projects stallman fsf notably debian sponsored fsf 1996 also use gnu/linux referring operating system whole media common usage however refers family operating systems simply linux many large linux distributions example suse linux red hat enterprise linux contrast linux distributions containing free software use gnu/linux simply gnu trisquel gnu/linux parabola gnu/linux-libre blag linux gnu gnewsense 8 13 modern linux distribution made gnu components range depending whether gnome considered part gnu determined counting lines source code making ubuntu natty release meanwhile 6 taken linux kernel increased 9 including direct dependencies
node1:Wikipedia entry. Entry name: Flatpak. Entry content: flatpak flatpak formerly xdg-app software utility software deployment package management linux advertised offering sandbox environment users run application software isolation rest system applications using flatpak need permissions access bluetooth sound pulseaudio network files etc. permissions defined maintainer flatpak controlled added removed users system flatpak developed part freedesktop.org project formerly known x desktop group xdg originally called xdg-app flathub repository remote source flatpak terminology located become de facto standard getting applications packaged flatpak packages added flathub administrators developers programs though admins stated preference developer-submitted apps although flathub de facto source applications packaged flatpak flatpak work independently flathub possible host remote access remotes totally independent flathub
node2:Wikipedia entry. Entry name: Garbage_collection_(computer_science). Entry content: garbage collection computer science computer science garbage collection gc form automatic memory management garbage collector collector attempts reclaim garbage memory occupied objects longer use program garbage collection invented john mccarthy around 1959 simplify manual memory management lisp garbage collection essentially opposite manual memory management requires programmer specify objects deallocate return memory system however many systems use combination approaches including techniques stack allocation region inference like memory management techniques garbage collection may take significant proportion total processing time program result significant influence performance good implementations enough memory depending application garbage collection faster manual memory management opposite also true often case past sub-optimal gc algorithms resources memory network sockets database handles user interaction windows file device descriptors typically handled garbage collection methods used manage resources particularly destructors may suffice manage memory well leaving need gc gc systems allow resources associated region memory collected causes resource reclaimed called finalization finalization may introduce complications limiting usability intolerable latency disuse reclaim especially limited resources lack control thread performs work reclaiming basic principles garbage collection find data objects program accessed future reclaim resources used objects many programming languages require garbage collection either part language specification example java c go scripting languages effectively practical implementation example formal languages like lambda calculus said garbage collected languages languages designed use manual memory management garbage-collected implementations available example c c++ languages like ada modula-3 c++/cli allow garbage collection manual memory management co-exist application using separate heaps collected manually managed objects others like garbage-collected allow user manually delete objects also entirely disable garbage collection speed required integrating garbage collection language compiler runtime system enables much wider choice methods post-hoc gc systems exist automatic reference counting arc including require recompilation post-hoc gc sometimes distinguished litter collection garbage collector almost always closely integrated memory allocator garbage collection frees programmer manually dealing memory deallocation result certain categories bugs eliminated substantially reduced bugs addressed garbage collection security implications typically garbage collection certain disadvantages including consuming additional resources performance impacts possible stalls program execution incompatibility manual resource management garbage collection consumes computing resources deciding memory free even though programmer may already known information penalty convenience annotating object lifetime manually source code overhead lead decreased uneven performance peer-reviewed paper came conclusion gc needs five times memory compensate overhead perform fast explicit memory management interaction memory hierarchy effects make overhead intolerable circumstances hard predict detect routine testing impact performance also given apple reason adopting garbage collection ios despite desired feature moment garbage actually collected unpredictable resulting stalls pauses shift/free memory scattered throughout session unpredictable stalls unacceptable real-time environments transaction processing interactive programs incremental concurrent real-time garbage collectors address problems varying trade-offs modern gc implementations try minimize blocking stop-the-world stalls much work possible background i.e separate thread example marking unreachable garbage instances application process continues run spite advancements example .net clr paradigm still difficult maintain large heaps millions objects resident objects get promoted older generations without incurring noticeable delays sometimes seconds need explicit manual resource management release/close non-gced resources object oriented language becomes transitive composition non-deterministic gc system resource resource-like object requires manual resource management release/close object used part another object composed object also become resource-like object requires manual resource management release/close tracing garbage collection common type garbage collection much garbage collection often refers tracing garbage collection rather methods reference counting overall strategy consists determining objects garbage collected tracing objects reachable chain references certain root objects considering rest garbage collecting however large number algorithms used implementation widely varying complexity performance characteristics reference counting garbage collection object count number references garbage identified reference count zero object reference count incremented reference created decremented reference destroyed count reaches zero object memory reclaimed manual memory management unlike tracing garbage collection reference counting guarantees objects destroyed soon last reference destroyed usually accesses memory either cpu caches objects freed directly pointed thus tends significant negative side effects cpu cache virtual memory operation number disadvantages reference counting generally solved mitigated sophisticated algorithms escape analysis compile-time technique convert heap allocations stack allocations thereby reducing amount garbage collection done analysis determines whether object allocated inside function accessible outside function-local allocation found accessible another function thread allocation said “ escape ” done stack otherwise object may allocated directly stack released function returns bypassing heap associated memory management costs generally speaking higher-level programming languages likely garbage collection standard feature languages built garbage collection added library boehm garbage collector c c++ functional programming languages ml haskell apl garbage collection built lisp especially notable first functional programming language first language introduce garbage collection dynamic languages ruby julia perl 5 php version 5.3 use reference counting javascript ecmascript also tend use gc object-oriented programming languages smalltalk java usually provide integrated garbage collection notable exceptions c++ delphi destructors historically languages intended beginners basic logo often used garbage collection heap-allocated variable-length data types strings lists burden programmers manual memory management early microcomputers limited memory slow processors basic garbage collection could often cause apparently random inexplicable pauses midst program operation basic interpreters applesoft basic apple ii family repeatedly scanned string descriptors string highest address order compact toward high memory resulting n performance could introduce minutes-long pauses execution string-intensive programs replacement garbage collector applesoft basic published call-a.p.p.l.e january 1981 pages 40–45 randy wigginton identified group strings every pass heap cut collection time dramatically basic.system released prodos 1983 provided windowing garbage collector basic reduced collections fraction second objective-c traditionally garbage collection release os x 10.5 2007 apple introduced garbage collection objective-c 2.0 using in-house developed runtime collector however 2012 release os x 10.8 garbage collection deprecated favor llvm automatic reference counter arc introduced os x 10.7 furthermore since may 2015 apple even forbids usage garbage collection new os x applications app store ios garbage collection never introduced due problems application responsivity performance instead ios uses arc garbage collection rarely used embedded real-time systems perceived need tight control use limited resources however garbage collectors compatible limited environments developed microsoft .net micro framework .net nanoframework java platform micro edition embedded software platforms like larger cousins include garbage collection among popular garbage collectors jdk could named commonly people compare garbage collectors terms ram consumption optimization receive different results compile-time garbage collection form static analysis allowing memory reused reclaimed based invariants known compilation form garbage collection studied mercury programming language saw greater usage introduction llvm automatic reference counter arc apple ecosystem ios os x 2011 incremental concurrent real-time garbage collectors developed baker algorithm lieberman algorithm baker algorithm allocation done either half single region memory becomes half full garbage collection performed moves live objects half remaining objects implicitly deallocated running program 'mutator check object references correct half move across background task finding objects generational garbage collection schemes based empirical observation objects die young generational garbage collection two allocation regions generations kept kept separate based object age new objects created young generation regularly collected generation full objects still referenced older regions copied next oldest generation occasionally full scan performed high-level language computer architectures include hardware support real-time garbage collection implementations real-time garbage collectors use tracing real-time garbage collectors meet hard real-time constraints used real-time operating system
node3:Wikipedia entry. Entry name: Line_discipline. Entry content: line discipline line discipline ldisc layer terminal subsystem unix-like systems terminal subsystem consists three layers upper layer provide character device interface lower hardware driver communicate hardware pseudo terminal middle line discipline implement behavior common terminal devices line discipline glues low level device driver code high level generic interface routines read 2 write 2 ioctl 2 responsible implementing semantics associated device policy separated device driver serial hardware driver used devices require different data handling example standard line discipline processes data receives hardware driver applications writing device according requirements terminal unix-like system input handles special characters interrupt character typically control-c erase kill characters typically backspace delete control-u respectively output replaces lf characters cr/lf sequence serial port could also used dial-up internet connection using serial modem ppp case ppp line discipline would used would accumulate input data serial line ppp input packets delivering networking stack rather character device would transmit packets delivered networking stack serial line unix-like systems use streams implement line disciplines
node4:Wikipedia entry. Entry name: Android_software_development. Entry content: android software development android software development process new applications created devices running android operating system google states android apps written using kotlin java c++ languages using android software development kit sdk using languages also possible non-jvm languages go javascript c c++ assembly need help jvm language code may supplied tools likely restricted api support programming languages tools allow cross-platform app support i.e android ios third party tools development environments language support also continued evolve expand since initial sdk released 2008 addition major business entities like walmart amazon bank america eyeing engage sell mobiles mobile application development witnessing transformation android software development kit sdk includes comprehensive set development tools include debugger libraries handset emulator based qemu documentation sample code tutorials currently supported development platforms include computers running linux modern desktop linux distribution mac os x 10.5.8 later windows 7 later sdk available android software development possible using specialized android applications around end 2014 officially-supported integrated development environment ide eclipse using android development tools adt plugin though intellij idea ide editions fully supports android development box netbeans ide also supports android development via plugin 2015 android studio made google powered intellij official ide however developers free use others google made clear adt officially deprecated since end 2015 focus android studio official android ide additionally developers may use text editor edit java xml files use command line tools java development kit apache ant required create build debug android applications well control attached android devices e.g. triggering reboot installing software package remotely enhancements android sdk go hand-in-hand overall android platform development sdk also supports older versions android platform case developers wish target applications older devices development tools downloadable components one downloaded latest version platform older platforms tools also downloaded compatibility testing android applications packaged .apk format stored codice_1 folder android os folder accessible root user security reasons apk package contains .dex files compiled byte code files called dalvik executables resource files etc android sdk platform tools separately downloadable subset full sdk consisting command-line tools codice_2 codice_3 android debug bridge adb tool run commands connected android device codice_4 daemon runs device codice_2 client starts background server multiplex commands sent devices addition command-line interface numerous graphical user interfaces exist control adb format issuing commands typically example android applications saved command codice_6 file whose name codice_7 default security issue reported march 2011 adb targeted vector attempt install rootkit connected phones using resource exhaustion attack fastboot protocol tool name included android sdk package used primarily modify flash filesystem via usb connection host computer requires device started boot loader secondary program loader mode basic hardware initialization performed enabling protocol device accept specific set commands sent via usb using command line commonly used fastboot commands include code written c/c++ compiled arm x86 native code 64-bit variants using android native development kit ndk ndk uses clang compiler compile c/c++ gcc included ndk r17 removed r18 2018 native libraries called java code running android runtime using codice_8 part standard android java classes command-line tools compiled ndk installed using adb android uses bionic c library llvm libc++ c++ standard library ndk also includes variety apis zlib compression opengl es vulkan graphics opensl es audio various android-specific apis things like logging access cameras accelerating neural networks ndk includes support cmake codice_9 based gnu make android studio supports running either gradle third-party tools allow integrating ndk eclipse visual studio cpu profiling ndk also includes simpleperf similar linux perf tool better support android specifically mixed java/c++ stacks android 3.1 platform also backported android 2.3.4 introduces android open accessory support allows external usb hardware android usb accessory interact android-powered device special accessory mode android-powered device accessory mode connected accessory acts usb host powers bus enumerates devices android-powered device acts usb device android usb accessories specifically designed attach android-powered devices adhere simple protocol android accessory protocol allows detect android-powered devices support accessory mode development tools intended help android device interact external electronics include ioio android open accessory development kit microbridge triggertrap etc android :build perl cpan module enables callers build android apk file using basic command line tools aapt dx javac jarsigner zipalign without rely either apache ant gradle reduced dependency set simplifies continuous release systems rely fully automated remote app generation testing july 12 2010 google announced availability app inventor android web-based visual development environment novice programmers based mit open blocks java library providing access android devices gps accelerometer orientation data phone functions text messaging speech-to-text conversion contact data persistent storage web services initially including amazon twitter could done android ’ architecture open said project director mit hal abelson development year block-editing tool taught non-majors computer science harvard mit wellesley trinity college hartford university san francisco professor david wolber developed introductory computer science course tutorial book non-computer science students based app inventor android second half 2011 google released source code terminated web service provided funding creation mit center mobile learning led app inventor creator hal abelson fellow mit professors eric klopfer mitchel resnick latest version created result google–mit collaboration released february 2012 first version created solely mit launched march 2012 upgraded app inventor 2 december 2013 2014 app inventor maintained mit basic4android commercial product similar simple inspired microsoft visual basic 6 microsoft visual studio makes android programming much simpler regular visual basic programmers find coding java difficult basic4android active coreliu enables non-technical users write immersive educational apps run natively android devices app authors use file held github repository describe images text used app speech generated text via amazon web services polly coreliu packages photos generated speech android apk file author distribute freely using creative commons license corona sdk software development kit sdk created walter luh founder corona labs inc.. corona sdk allows software programmers build mobile applications iphone ipad android devices corona lets developers build graphic applications using integrated lua language layered top c++/opengl sdk uses subscription-based purchase model without requiring per-application royalties imposes branding requirements delphi also used creating android application object pascal language latest release delphi 10 seattle developed embarcadero user interfaces developed using cross-platform gui framework firemonkey additionally non-visual components interaction various sensors like camera gyroscope gps bluetooth etc available services access certain keyboard events available platform-independent manner well done using interfaces compiler based llvm architecture debugging ide possible generated apps based ndk contrast xamarin runtime compiled application rapid application development tool developing native android applications using javascript tool used directly mobile device via browser based ide connected device via wifi makes use google chrome v8 javascript engine since version 1.4 go programming language writing applications android supported go version 1.7 help codice_10 tool i.e codice_11 compiling android apk ios apps supported go codebase strictly speaking java/jvm code always needed run android gomobile tool provides minimal jvm code needed objective-c code needed case ios go support restricted go types used currently restricted set android apis e.g openal opengl es 2 bindings provided could used make 2d/3d games one provided examples android ios graphics applications hypernext android creator hac software development system aimed beginner programmers help create android apps without knowing java android sdk based hypercard treated software stack cards one card visible one time well suited mobile phone applications one window visible time hypernext android creator main programming language simply called hypernext loosely based hypercard hypertalk language hypernext interpreted english-like language many features allow creation android applications supports growing subset android sdk including versions gui control types automatically runs background service apps continue run process information background kivy open source python library developing multitouch application software natural user interface nui wide selection devices kivy provides possibility maintaining single application numerous operating systems code run everywhere kivy custom-built deployment tool deploying mobile applications called bulldozer available linux bulldozer currently alpha software far less cumbersome older kivy deployment methods applications programmed kivy submitted android mobile application distribution platform lazarus ide may used develop android applications using object pascal pascal dialects based free pascal compiler starting version 2.7.1 processing environment also uses java language supported android mode since version 1.5 integration device camera sensors possible using ketai library qt android enables qt 5 applications run devices android v2.3.3 api level 10 later qt cross-platform application framework target platforms android linux ios sailfish os windows qt application development done standard c++ qml requiring android ndk sdk qt creator integrated development environment provided qt framework multi-platform application development rubymotion toolchain write native mobile apps ruby version 3.0 rubymotion supports android rubymotion android apps call entire set java android apis ruby use 3rd-party java libraries statically compiled machine code sdl library offers also development possibility beside java allowing development c simple porting existing sdl native c applications injection small java shim jni usage native sdl code possible allowing android ports like e.g jagged alliance 2 video game microsoft shipped 2015 free stand-alone emulator android dubbed visual studio emulator android emulator supports installation google play drag-and-drop interface work conjunction visual studio supports cross-platform development letting c++ developers create projects templates android native-activity applications create high-performance shared libraries include solutions features include platform-specific intellisense breakpoints device deployment emulation c shared codebase developers use xamarin write native ios android windows apps native user interfaces share code across multiple platforms square built lot android based libraries used android applications third party packages popular ones retrofit http calls dagger dependency injection picasso image caching android developer challenge competition find innovative application android google offered prizes totaling 10 million us dollars distributed adc adc ii adc accepted submissions january 2 april 14 2008 50 promising entries announced may 12 2008 received 25,000 award development ended early september announcement ten teams received 275,000 ten teams received 100,000 adc ii announced may 27 2009 first round adc ii closed october 6 2009 first-round winners adc ii comprising top 200 applications announced november 5 2009 voting second round also opened day ended november 25 google announced top winners adc ii november 30 sweetdreams doodle wavesecure nominated overall winners challenge community open-source enthusiasts build share android-based distributions i.e firmware number customizations additional features flac lossless audio support ability store downloaded applications microsd card usually involves rooting device rooting allows users root access operating system enabling full control phone rooting several disadvantages well including increased risk hacking high chances bricking losing warranty increased virus attack risks etc also possible install custom firmware although device boot loader must also unlocked custom firmware allows users older phones use applications available newer releases firmware packages updated frequently incorporate elements android functionality n't yet officially released within carrier-sanctioned firmware tend fewer limitations cyanogenmod omfgb examples firmware september 24 2009 google issued cease desist letter modder cyanogen citing issues re-distribution google closed-source applications within custom firmware even though android os open source phones come packaged closed-source google applications functionality google play gps navigation google asserted applications provided approved distribution channels licensed distributors cyanogen complied google license continued distribute mod without proprietary software provided method backup licensed google applications mod install process restore process complete obstacles development include fact android use established java standards java se prevents compatibility java applications written platforms written android platform android reuses java language syntax semantics provide full class libraries apis bundled java se however multiple tools market companies myriad group upontek provide java android conversion services android provides gui classes provide java awt swing javafx support full java beans api android created open handset alliance led google early feedback developing applications android platform mixed issues cited include bugs lack documentation inadequate qa infrastructure public issue-tracking system google announced issue tracker january 18 2008 december 2007 mergelab mobile startup founder adam macbeth stated functionality poorly documented n't work ... clearly ready prime time despite android-targeted applications began appear week platform announced first publicly available application snake game preview release android sdk released november 12 2007 july 15 2008 android developer challenge team accidentally sent email entrants android developer challenge announcing new release sdk available private download area email intended winners first round android developer challenge revelation google supplying new sdk releases developers others keeping arrangement private led widely reported frustration within android developer community time august 18 2008 android 0.9 sdk beta released release provided updated extended api improved development tools updated design home screen detailed instructions upgrading available already working earlier release september 23 2008 android 1.0 sdk release 1 released according release notes included mainly bug fixes although smaller features added also included several api changes 0.9 version multiple versions released since developed december 5 2008 google announced first android dev phone sim-unlocked hardware-unlocked device designed advanced developers modified version htc dream phone developers use regular consumer devices test use applications developers may choose dedicated unlocked no-contract device one million applications developed android 25 billion downloads june 2011 research indicated 67 mobile developers used platform time publication android smartphone shipments forecast exceed 1.2 billion units 2018 85 market share
node5:Wikipedia entry. Entry name: JavaScript. Entry content: javascript javascript often abbreviated js high-level interpreted scripting language conforms ecmascript specification javascript curly-bracket syntax dynamic typing prototype-based object-orientation first-class functions alongside html css javascript one core technologies world wide web javascript enables interactive web pages essential part web applications vast majority websites use major web browsers dedicated javascript engine execute multi-paradigm language javascript supports event-driven functional imperative including object-oriented prototype-based programming styles apis working text arrays dates regular expressions dom language include i/o networking storage graphics facilities relies upon host environment embedded provide features initially implemented client-side web browsers javascript engines embedded many types host software including server-side web servers databases non-web programs word processors pdf software runtime environments make javascript available writing mobile desktop applications including desktop widgets terms vanilla javascript vanilla js refer javascript extended frameworks additional libraries scripts written vanilla js plain javascript code although similarities javascript java including language name syntax respective standard libraries two languages distinct differ greatly design javascript influenced programming languages self scheme json serialization format used store data structures files transmit across networks based javascript 1993 national center supercomputing applications ncsa unit university illinois urbana-champaign released ncsa mosaic first popular graphical web browser played important part expanding growth nascent world wide web beyond nextstep niche worldwideweb formed three years earlier 1994 company called mosaic communications founded mountain view california employed many original ncsa mosaic authors create mosaic netscape however intentionally shared code ncsa mosaic internal codename company browser mozilla portmanteau mosaic godzilla first version web browser mosaic netscape 0.9 released late 1994 within four months already taken three-quarters browser market became main web browser 1990s avoid trademark ownership problems ncsa browser subsequently renamed netscape navigator year company took name netscape communications netscape communications realized web needed become dynamic marc andreessen founder company believed html needed glue language easy use web designers part-time programmers assemble components images plugins code could written directly web page markup 1995 netscape communications recruited brendan eich goal embedding scheme programming language netscape navigator could get started netscape communications collaborated sun microsystems include sun static programming language java netscape navigator compete microsoft user adoption web technologies platforms netscape communications decided scripting language wanted create would complement java similar syntax excluded adopting languages perl python tcl scheme defend idea javascript competing proposals company needed prototype eich wrote one 10 days may 1995 although developed name mocha language officially called livescript first shipped beta releases netscape navigator 2.0 september 1995 renamed javascript deployed netscape navigator 2.0 beta 3 december final choice name caused confusion giving impression language spin-off java programming language choice characterized marketing ploy netscape give javascript cachet hot new web programming language common misconception javascript influenced earlier web page scripting language developed nombas named cmm confused later c -- created 1997 brendan eich however never heard cmm created livescript nombas pitch embedded web page scripting netscape though web page scripting new concept shown violawww web browser nombas later switched offering javascript instead cmm scriptease product part tc39 group standardized ecmascript december 1995 soon releasing javascript browsers netscape introduced implementation language server-side scripting netscape enterprise server since 1996 iis web-server supported microsoft implementation server-side javascript—jscript—in asp .net pages since mid-2000s additional server-side javascript implementations introduced node.js 2009 microsoft script technologies including vbscript jscript released 1996 jscript reverse-engineered implementation netscape javascript part internet explorer 3 jscript also available server-side scripting internet information server internet explorer 3 also included microsoft first support css various extensions html case implementation noticeably different found netscape navigator time differences made difficult designers programmers make single website work well browsers leading use best viewed netscape best viewed internet explorer logos characterized early years browser wars javascript began acquire reputation one roadblocks cross-platform standards-driven web developers took difficult task trying make sites work major browsers many could afford time release internet explorer 4 microsoft introduced concept dynamic html differences language implementations different proprietary document object models remained obstacles widespread take-up javascript web november 1996 netscape submitted javascript ecma international carve standard specification browser vendors could implement based work done netscape led official release language specification ecmascript published first edition ecma-262 standard june 1997 javascript well known implementations actionscript jscript well-known implementations ecmascript release ecmascript 2 june 1998 continued standards process cycle conforming modifications iso/iec 16262 international standard ecmascript 3 released december 1999 modern-day baseline javascript original ecmascript 4 work led waldemar horwat netscape google started 2000 microsoft initially participated implemented proposals jscript .net language time clear microsoft intention cooperating implementing proper javascript internet explorer even though competing proposal partial diverged point implementation .net server side 2003 original ecmascript 4 work mothballed next major event 2005 two major happenings javascript history first brendan eich mozilla rejoined ecma international not-for-profit member work started ecmascript xml e4x ecma-357 standard came ex-microsoft employees bea systems originally acquired crossgain led working jointly macromedia later acquired adobe systems implementing e4x actionscript 3 actionscript 3 fork original ecmascript 4 along macromedia work restarted ecmascript 4 goal standardizing actionscript 3 end adobe systems released actionscript virtual machine 2 code named tamarin open source project tamarin actionscript 3 different web javascript converge realized parties 2007 2008 alas still turmoil various players douglas crockford—then yahoo —joined forces microsoft 2007 oppose ecmascript 4 led ecmascript 3.1 effort development ecmascript 4 never completed work influenced subsequent versions happening open source developer communities set work revolutionize could done javascript community effort sparked 2005 jesse james garrett released white paper coined term ajax described set technologies javascript backbone used create web applications data loaded background avoiding need full page reloads leading dynamic applications resulted renaissance period javascript usage spearheaded open source libraries communities formed around libraries prototype jquery dojo toolkit mootools others released july 2008 disparate parties either side came together oslo led eventual agreement early 2009 rename ecmascript 3.1 ecmascript 5 drive language forward using agenda known harmony ecmascript 5 finally released december 2009 june 2011 ecmascript 5.1 released fully align third edition iso/iec 16262 international standard ecmascript 2015 released june 2015 ecmascript 2016 released june 2016 current version ecmascript 2017 released june 2017 javascript become one popular programming languages web however many professional programmers initially denigrated language due perceived target audience web authors amateurs advent ajax returned javascript spotlight brought professional programming attention result proliferation comprehensive frameworks libraries improved javascript programming practices increased usage javascript outside web browsers seen proliferation server-side javascript platforms january 2009 commonjs project founded goal specifying common standard library mainly javascript development outside browser rise single-page applications javascript-heavy sites increasingly used compile target source-to-source compilers dynamic languages static languages javascript trademark oracle corporation united states used license technology invented implemented netscape communications current entities mozilla foundation following features common conforming ecmascript implementations unless explicitly specified otherwise popular modern web browsers support javascript built-in interpreters javascript supports much structured programming syntax c e.g. codice_1 statements codice_2 loops codice_3 statements codice_4 loops etc. one partial exception scoping javascript originally function scoping codice_5 ecmascript 2015 added keywords codice_6 codice_7 block scoping meaning javascript function block scoping like c javascript makes distinction expressions statements one syntactic difference c automatic semicolon insertion allows semicolons would normally terminate statements omitted javascript almost entirely object-based javascript object associative array augmented prototype see string key provides name object property two syntactical ways specify name dot notation codice_9 bracket notation codice_10 property may added rebound deleted run-time properties object property belongs object prototype inheritance chain enumerated using codice_11 loop javascript small number built-in objects including codice_12 codice_13 function first-class function considered object function may properties methods codice_23 codice_24 nested function function defined within another function created time outer function invoked addition nested function forms lexical closure lexical scope outer function including constant local variable argument value becomes part internal state inner function object even execution outer function concludes javascript also supports anonymous functions javascript supports implicit explicit delegation javascript officially managed mozilla foundation new language features added periodically however javascript engines support new features variables javascript defined using either codice_5 codice_6 codice_7 keywords var x // declares variable x assigns special value undefined confused undefined value var 2 // declares variable assigns value 2 var z hello world // declares variable z assigns string containing hello world note comments example preceded two forward slashes built-in input/output functionality javascript run-time environment provides ecmascript specification edition 5.1 mentions indeed provisions specification input external data output computed results however runtime environments codice_38 object used print output minimalist hello world program javascript console.log hello world simple recursive function function factorial n factorial 3 // returns 6 anonymous function lambda function counter var closure counter closure // returns 1 closure // returns 2 closure // returns 3 example shows javascript function closures capture non-local variables reference arrow functions first introduced 6th edition ecmascript 2015 shorten syntax writing functions javascript arrow functions anonymous nature variable needed refer order invoke creation example arrow function // arrow functions let us omit function keyword long_example // points anonymous function value const long_example input1 input2 // arrow functions also let us automatically return expression right // arrow input 5 omitting braces return keyword const short_example input input 5 long_example 2 3 // prints hello world returns 5. short_example 2 // returns 7 javascript objects created way functions known function object object example function ball r var myball new ball 5 // creates new instance ball object radius 5 myball.show // instance ball object show function performed variadic function demonstration codice_30 special variable function sum sum 1 2 // returns 3 sum 1 2 3 // returns 6 immediately-invoked function expressions often used create modules ecmascript 2015 built-in module construct language modules allow gathering properties methods namespace making private var counter function // module counter.get // shows 0 counter.set 6 counter.increment // shows 7 counter.increment // shows 8 exporting importing modules javascript export example /* mymodule.js */ // function remains private exported let sum b // export variables export var name 'alice export let age 23 // export named functions export function add num1 num2 // export class export class multiplication import example // import one property import add './mymodule.js console.log add 1 2 // 3 // import multiple properties import name age './mymodule.js console.log name age // alice 23 // import properties module import './module.js' console.log name age // alice 23 console.log add 1,2 // 3 sample code displays various javascript features /* finds lowest common multiple lcm two numbers */ function lcmcalculator x // constructor function // prototype object instances created constructor // constructor prototype property lcmcalculator.prototype // object literal // define generic output function implementation works web browsers function output x // note array map foreach defined javascript 1.6 // used demonstrate javascript inherent functional nature .map function pair // array literal mapping function function printresult obj following output displayed browser window lcmcalculator 28 b 56 gcd 28 lcm 56 lcmcalculator 21 b 56 gcd 7 lcm 168 lcmcalculator 25 b 55 gcd 5 lcm 275 lcmcalculator 22 b 58 gcd 2 lcm 638 94.5 10 million popular web pages used javascript common use javascript add client-side behavior html pages also known dynamic html dhtml scripts embedded included html pages interact document object model dom page simple examples usage javascript code run locally user browser rather remote server increasing application overall responsiveness user actions javascript code also detect user actions html alone individual keystrokes applications gmail take advantage much user-interface logic written javascript javascript dispatches requests information content e-mail message server wider trend ajax programming similarly exploits strength javascript engine also known javascript interpreter javascript implementation interpreter interprets javascript source code executes script accordingly first javascript engine created brendan eich netscape netscape navigator web browser engine code-named spidermonkey implemented c. since updated javascript 1.5 conform ecmascript 3 rhino engine created primarily norris boyd formerly netscape google javascript implementation java rhino like spidermonkey ecmascript 3 compliant web browser common host environment javascript however web browser execute javascript code example text-based browsers javascript engines users browsers may disable scripts preference extension web browser typically creates host objects represent dom javascript web server another common host environment javascript web server would typically expose host objects representing http request response objects javascript program could interrogate manipulate dynamically generate web pages javascript language popular browsers share support inadvertently become target language frameworks languages increasing speed javascript engines made language feasible compilation target despite performance limitations inherent dynamic nature minimal example standards-conforming web page containing javascript using html 5 syntax dom doctype html html /html javascript runs widely varying environments important part testing debugging test verify javascript works across multiple browsers dom interfaces officially defined w3c standardization effort separate javascript implementation dom interfaces differ web browsers javascript authors deal differences writing standards-compliant code executed correctly browsers failing write code behaves differently absence certain browser features authors may also find practical detect browser running two browsers may implement feature differing behavior libraries toolkits take browser differences account also useful programmers furthermore scripts may work users example user may support users web authors try create pages degrade gracefully user agents browsers support page javascript particular page remain usable albeit without extra features javascript would added sites use html codice_40 tag contains alt content js disabled alternative approach many find preferable first author content using basic technologies work browsers enhance content users javascript enabled javascript dom provide potential malicious authors deliver scripts run client computer via web browser authors minimize risk using two restrictions first scripts run sandbox perform web-related actions general-purpose programming tasks like creating files second scripts constrained same-origin policy scripts one web site access information usernames passwords cookies sent another site javascript-related security bugs breaches either origin policy sandbox subsets general javascript—adsafe secure ecmascript ses —that provide greater levels security especially code created third parties advertisements caja another project safe embedding isolation third-party javascript html content security policy main intended method ensuring trusted code executed web page common javascript-related security problem cross-site scripting xss violation same-origin policy xss vulnerabilities occur attacker able cause target web site online banking website include malicious script webpage presented victim script example access banking application privileges victim potentially disclosing secret information transferring money without victim authorization solution xss vulnerabilities use html escaping whenever displaying untrusted data browsers include partial protection reflected xss attacks attacker provides url including malicious script however even users browsers vulnerable xss attacks malicious code stored database correct design web applications server side fully prevent xss xss vulnerabilities also occur implementation mistakes browser authors another cross-site vulnerability cross-site request forgery csrf csrf code attacker site tricks victim browser taking actions user intend target site like transferring money bank target sites rely solely cookies request authentication requests originating code attacker site carry valid login credentials initiating user general solution csrf require authentication value hidden form field cookies authenticate request might lasting effects checking http referrer header also help javascript hijacking type csrf attack codice_29 tag attacker site exploits page victim site returns private information json javascript possible solutions include developers client-server applications must recognize untrusted clients may control attackers application author assume javascript code run intended secret embedded code could extracted determined adversary implications package management systems npm bower popular javascript developers systems allow developer easily manage program dependencies upon developer program libraries developers trust maintainers libraries keep secure date always case vulnerability emerged blind trust relied-upon libraries new releases cause bugs vulnerabilities appear programs rely upon libraries inversely library go unpatched known vulnerabilities wild study done looking sample 133k websites researchers found 37 websites included library at-least one known vulnerability median lag oldest library version used website newest available version library 1,177 days alexa development libraries still active use ceased years ago another possibility maintainer library may remove library entirely occurred march 2016 azer koçulu removed repository npm caused tens thousands programs websites depending upon libraries break javascript provides interface wide range browser capabilities may flaws buffer overflows flaws allow attackers write scripts would run code wish user system code means limited another javascript application example buffer overrun exploit allow attacker gain access operating system api superuser privileges flaws affected major browsers including firefox internet explorer safari plugins video players adobe flash wide range activex controls enabled default microsoft internet explorer may also flaws exploitable via javascript flaws exploited past windows vista microsoft attempted contain risks bugs buffer overflows running internet explorer process limited privileges google chrome similarly confines page renderers sandbox web browsers capable running javascript outside sandbox privileges necessary example create delete files privileges intended granted code web incorrectly granting privileges javascript web played role vulnerabilities internet explorer firefox windows xp service pack 2 microsoft demoted jscript privileges internet explorer microsoft windows allows javascript source files computer hard drive launched general-purpose non-sandboxed programs see windows script host makes javascript like vbscript theoretically viable vector trojan horse although javascript trojan horses uncommon practice 2015 javascript-based proof-of-concept implementation rowhammer attack described paper security researchers 2017 javascript-based attack via browser demonstrated could bypass aslr called aslr⊕cache anc addition web browsers servers javascript interpreters embedded number tools applications provides object model provides access host environment core javascript language remains mostly application within javascript access debugger becomes invaluable developing large non-trivial programs implementation differences various browsers particularly within dom useful access debugger browsers web application targets script debuggers integrated within many mainstream browsers internet explorer firefox safari google chrome opera node.js addition native internet explorer developer tools three debuggers available internet explorer microsoft visual studio features three closely followed microsoft script editor component microsoft office finally free microsoft script debugger free microsoft visual web developer express provides limited version javascript debugging functionality microsoft visual studio comparison internet explorer firefox comprehensive set developer tools includes debugger well old versions firefox without tools used firefox addon called firebug older venkman debugger webkit web inspector includes javascript debugger used safari modified version called blink devtools used google chrome node.js node inspector interactive debugger integrates blink devtools opera includes set tools called dragonfly addition native computer software online javascript integrated development environment ides debugging aids written javascript built run web example program jslint developed douglas crockford written extensively language jslint scans javascript code conformance set standards guidelines many libraries javascript three.js provide links demonstration code edited users demonstration codes also used pedagogical tool institutions khan academy allow students experience writing code environment see output programs without needing setup beyond web browser javascript increased usage web development warrants considerations performance frontend code inherited many responsibilities previously handled backend mobile devices particular may encounter problems rendering poorly optimized frontend code library benchmarks benchmark.js benchmarking library supports high-resolution timers returns statistically significant results another tool jsben.ch online javascript benchmarking tool code snippets tested javascript initially developed 1996 use netscape navigator web browser year microsoft released implementation internet explorer implementation called jscript due trademark issues 1997 first standardized version language released name ecmascript first edition ecma-262 standard explicit versioning opt-in language features mozilla-specific removed later firefox versions least firefox 59 firefox 4 last version referred explicit javascript version 1.8.5 new editions ecma-262 standard javascript language features often mentioned initial definition ecma-262 editions following table explicitly versioned javascript versions based information multiple sources javascript widely supported client-side language run within web browser become intermediate language languages also called transpilers target included newly created languages ports existing languages include javascript unusual limitations – explicit integer type double-precision binary floating point – languages compile javascript take care use integer-converting shift bitwise logical operators may slightly different behavior environments common misconception javascript similar closely related java true c-like syntax c language immediate common ancestor language also typically sandboxed used inside browser javascript designed java syntax standard library mind particular java keywords reserved original javascript javascript standard library follows java naming conventions javascript objects based classes java 1.0 similarities end java javascript first appeared 1995 java developed james gosling sun microsystems javascript brendan eich netscape communications differences two languages prominent similarities java static typing javascript typing dynamic java loaded compiled bytecode javascript loaded human-readable source code java objects class-based javascript prototype-based finally java support functional programming java 8 javascript done beginning influenced scheme starting 2017 web browsers began supporting webassembly technology standardized w3c webassembly standard specifies binary format produced compiler toolchain llvm execute browser near native speed webassembly allows programming languages c c++ c java used well javascript author client-side code world wide web
node6:Wikipedia entry. Entry name: GPD_Win. Entry content: gpd win gpd win windows-based handheld computer equipped keyboard gaming controls x86-based device runs full version windows 10 home device envisioned primarily video game console emulation pc gaming mind capable running x86 windows-based application run within confines device technical specifications first announced october 2015 crowd funded via indiegogo two crowdfunding sites japan china released october 2016 gamepad digital gpd technology company based shenzhen china among products created several handheld video game consoles run android arm architecture instance gpd xd gpd win meant way play pc games pc-based video game console emulators hypervisors vmware virtualbox clients handheld device appeal win intended x86 windows handheld pc console offers far pc emulator gaming support architectures operating systems widely used mobile devices linux android arm hardware proprietary systems gpd widely touts ability device indiegogo page video demonstrations gamepad digital first pitched idea gpd win community october 2015 concept market research planning november december physical design hardware specifications determined march 2016 initial prototypes finished debugged shipped select sources gpd started accepting pre-orders june 2016 several online retailers including indiegogo page pre-order backers offered device discounted price 330 estimated final retail price 499 settling price 330 release initial stated goal 100,000 april 2016 project well exceeded said goal 535 616,000 raised july 2016 august 2016 small batch shipment industry personnel shipped september pre-order promotional pricing ceased gpd started shipping final product october 2016 pre-order backers receiving devices first gpd win runs windows 10 home gpd stated per april 2014 microsoft decision windows free devices screens smaller 9 inches however devices shipped backers windows 10 product key input initial boot setup device unlike windows smartphones win able run x86 windows application also run pc laptops desktops april 2017 several patches available linux kernel allow mostly complete functionality win full desktop gnu/linux like ubuntu.. also ways get android work gpd win guide install make dual-boot https //www.black-seraph.com gpd win full qwerty keyboard includes 67 standard keys 10 expanded function keys gaming controller stylized similar openpandora dragonbox pyra style keyboard controller layout one d-pad two analog sticks four face buttons four shoulder buttons two shoulder gpd win initially intended use intel atom x5-z8500 cherry trail cpu however gpd eventually upgraded intended cpu likely due availability concerns instead win came intel atom x7-z8750 64-bit quad-core cpu base clock speed around 1.60 ghz turbo boost 2.56 ghz graphics processor intel hd graphics integrated gpu base clock speed 200 mhz turbo boost 600 mhz gpd win uses 4gb lpddr3-1600 ram 64gb rom emmc 4.51 single microsd slot officially support maximum 128gb storage however unofficially support microsd card 256gb gpd win 15.5×9.7cm size 5.5-inch 1280×720 720p h-ips multi-directional touch screen 16:9 ratio reinforced gorilla glass 3 audio system consists built-in speaker using realtek alc5645 driver microphone jack supports popular audio video image formats including mp3 mp4 3gp wmv/wma flac avi mov jpg png bmp gpd win 6700mah polymer lithium-ion battery usb c charging interface 5 v/2.5 stated ability play 80 continuous hours music 6–8 hours online video online gaming bluetooth 4.0 802.11 b/g/n/ac 5 ghz 2.4 ghz wifi capable gamepad digital continued support gpd win past release taking user feedback account driver hardware updates january 10 2017 gpd revised gpd win hardware providing fix intel graphics driver stability issues fixing ac charging/boot bug described reviews section improved cooling well improving tactile feedback d-pad buttons keyboard includes software update improves buttons responsiveness makes changes built-in mouse functionality gamepad digital began shipping gpd win backers october 2016 jc torres slashgear gave win 7/10 stating solid technical specs per expected needs ambitious windows 10-based handheld console industry dominated linux-based handhelds well rounded features however also noted inconsistent build quality among models mediocre sound quality loud low ultimately calls exceptional device brad linder liliputing gave quick review noting unit sent review overheating issues benchmarking speaker placement typically caused user cover fingers however noted solid device price niche capable playing surprising amount pc games video game console emulators windows store steam given tablet-pc specs however meant high-end gaming strongly resource-intensive emulation linus sebastian made video review gpd win linustechtips youtube page complimented gaming multitasking capabilities impressed hardware specs hardware design features overall include i/o ports features instance common macbook lament system flaws among shoulder buttons felt cheaply assembled 5.5 720p screen friendly scaling device bug must plugged ac adapter pressing power button order boot otherwise simply loads charging screen must plugged back system boot starts issue since fixed subsequent releases official verdict deciding whether worth price user win made excited prospect umpcs capable near future hardware progresses compared apple first iphone stating revolutionary great concept flaws execution ambitious practical set much better future gamepad digital announced gpd win 2 early 2017 win 2 significant upgrade able run aaa spec games well better video game console emulation intel core m3 cpu intel hd 615 graphics 8gb lpddr3 ram 128gb m.2 solid-state drive well i/o ports gpd win external hardware changes including moving analog knobs outward d-input dropped additional shoulder button shoulder six total price crowdfunding backers 649 tentative retail price 899 indiegogo campaign launched january 15 2018 final release date may 2018 indiegogo campaign saw rapid success far surpassing stated goal within days
node7:Wikipedia entry. Entry name: STREAMS. Entry content: streams computer networking streams native framework unix system v implementing character device drivers network protocols inter-process communication framework stream chain coroutines pass messages program device driver pair programs streams originated version 8 research unix streams capitalized streams design modular architecture implementing full-duplex i/o kernel device drivers frequent uses developing terminal i/o line discipline networking subsystems system v release 4 entire terminal interface reimplemented using streams important concept streams ability push drivers custom code modules modify functionality network interface device together form stack several drivers chained together order streams based streams i/o subsystem introduced eighth edition research unix v8 dennis ritchie used terminal i/o subsystem internet protocol suite version yet called streams capitals fit new functionality existing device i/o system calls open close read write ioctl application limited terminal i/o protocols providing pipe-like i/o semantics i/o system ported system v release 3 robert israel gil mcgrath dave olander her-daw che maury bach part wider framework intended support variety transport protocols including tcp iso class 4 transport sna lu 6.2 npack protocol used rfs first released network support utilities nsu package unix system v release 3 port added putmsg getmsg poll system calls nearly equivalent purpose send recv select calls berkeley sockets putmsg getmsg system calls originally called send recv renamed avoid namespace conflict system v release 4 streams extended used terminal i/o framework pipes providing useful new functionality like bidirectional pipes file descriptor passing port unicos also produced eric s. raymond quotes ritchie saying complexity system v streams compared v8 streams streams means something different shouted concurrent system v release 3 port developed protocol-independent streams message passing guidelines link network transport layers osi model layers 2-4 due typically close implementation coupling network transport protocols given protocol stack typical practice implementing layers 5-7 outside kernel link transport layer streams service interfaces later standardized x/open conjunction transport message passing model transport layer interface later adopted x/open transport interface defined provide transport protocol-independent api application development also library supporting session presentation application layers defined later standardized open group streams required conformance single unix specification versions 1 unix 95 2 unix 98 result refusal bsd linux developers provide streams marked optional posix compliance austin group version 3 unix 03 posix.1-2008 tc1 ieee std 1003.1 2013 edition designated streams 'marked obsolescent meaning said functionality may removed future version specification however specific definition 'obsolescent used also says strictly conforming posix applications 'shall use obsolescent features version 7 unix command connected terminal keyboard screen keyboard printer mechanism called line discipline would buffer single line input i.e. wait user press return key sending input program processing allowed simple error correction streams replaced set processing modules organized linear chain allowed bidirectional communication neighboring modules programs could push new module onto one end chain change behavior terminal character device ritchie gives example chain terminal module chained datakit network module achieve remote login network aside characters bytes going program device vice versa streams could carry control messages hangup drop connection ioctl messages streams could also used inter-process communication connecting two processes pseudoterminals possibility mpx window system blit graphics terminal could display multiple terminal emulator windows window process communicated window system pseudoterminal line discipline driver installed sending typed characters receiving text graphics display control signals designated user wish switch windows close actual streams modules live kernel space unix installed pushed removed popped ioctl system call example install aforementioned line discipline file descriptor codice_1 referring terminal device one would write c perform input/output stream one either uses codice_2 codice_3 system calls regular file descriptors set streams-specific functions send control messages ritchie admitted regretting implement streams kernel rather processes felt compelled reasons efficiency later plan 9 implementation implement modules user-level processes streams mostly used system v unix world however implementations exist linux include streams functionality without third-party add-ons caldera pushed streams included linux ca 1998 support netware linux rejected outright linux kernel developers technical grounds mainly performance compatibility layers linux operating systems convert streams operations sockets early possible implementation used caldera lis company called gcom later figured legal battles caldera successor sco group linux sco claiming linux streams infringed believed copyrights system v
node8:Wikipedia entry. Entry name: Firefox. Entry content: firefox mozilla firefox simply firefox free open-source web browser developed mozilla foundation subsidiary mozilla corporation firefox officially available windows 7 newer macos linux unofficial ports available various unix unix-like operating systems including freebsd openbsd netbsd illumos solaris unix sibling firefox android also available firefox uses gecko layout engine render web pages implements current anticipated web standards 2017 firefox began incorporating new technology code name quantum promote parallelism intuitive user interface additional version firefox ios released november 12 2015 due platform restrictions uses webkit layout engine instead gecko ios web browsers firefox created 2002 codename phoenix mozilla community members desired standalone browser rather mozilla application suite bundle beta phase firefox proved popular testers praised speed security add-ons compared microsoft then-dominant internet explorer 6 firefox released november 9 2004 challenged internet explorer dominance 60 million downloads within nine months firefox spiritual successor netscape navigator mozilla community created netscape 1998 acquisition aol firefox usage grew peak 32.21 end 2009 version 3.5 overtaking internet explorer 7 although versions internet explorer whole usage declined competition google chrome firefox 9.53 usage share desktop browser according statcounter making second-most popular browser google chrome 71.03 usage share across platforms lower 4.48 third-most popular overall according mozilla december 2014 half billion firefox users around world project began experimental branch mozilla project dave hyatt joe hewitt blake ross believed commercial requirements netscape sponsorship developer-driven feature creep compromised utility mozilla browser combat saw mozilla suite software bloat created stand-alone browser intended replace mozilla suite april 3 2003 mozilla organization announced planned change focus mozilla suite firefox thunderbird community-driven seamonkey formed eventually replaced mozilla application suite 2005 firefox project undergone several name changes nascent browser originally named phoenix mythical bird rose triumphantly ashes dead predecessor case ashes netscape navigator sidelined microsoft internet explorer first browser war phoenix renamed due trademark claim phoenix technologies replacement name firebird provoked intense response firebird database software project mozilla foundation reassured browser would always bear name mozilla firebird avoid confusion pressure mozilla firebird became mozilla firefox february 9 2004 name firefox said derived nickname red panda became mascot newly named project firefox project went many versions version 1.0 released november 9 2004 abbreviation firefox mozilla prefers fx fx though often abbreviated ff 2016 mozilla announced project known quantum sought improve firefox gecko engine components improve firefox performance modernize architecture transition browser multi-process model improvements came wake decreasing market share google chrome well concerns performance lapsing comparison despite improvements changes required existing add-ons firefox made incompatible newer versions favor new extension system designed similar chrome recent browsers firefox 57 released november 2017 first version contain enhancements quantum thus named firefox quantum mozilla executive stated quantum biggest update browser since version 1.0 may 3 2019 expiration intermediate signing certificate caused firefox automatically disable browser extensions add-ons mozilla began roll-out fix shortly thereafter using mozilla studies component features include tabbed browsing spell checking incremental search live bookmarking smart bookmarks download manager private browsing location-aware browsing also known geolocation based google service integrated search system uses google default markets additionally firefox provides environment web developers use built-in tools error console dom inspector extensions firebug recently integration feature pocket firefox hello implementation webrtc added october 2014 allows users firefox compatible systems video call extra feature screen file sharing sending link firefox hello scheduled removed september 2016 functions added add-ons created third-party developers add-ons primarily coded using html javascript api known webextensions designed similar google chrome microsoft edge extension systems firefox previously supported add-ons using xul xpcom apis allowed directly access manipulate much browser internal functionality compatible multi-process architecture xul add-ons deemed legacy add-ons longer supported firefox 57 newer firefox themes added users create download third parties change appearance browser firefox add-on website also gives users ability add applications games ad-blockers screenshot apps many apps firefox implements many web standards including html4 almost full html5 xml xhtml mathml svg 2 partial css extensions ecmascript javascript dom xslt xpath apng animated png images alpha transparency firefox also implements standards proposals created whatwg client-side storage canvas element standards implemented gecko layout engine spidermonkey javascript engine firefox passed acid2 standards-compliance test since version 3.0 mozilla originally stated intend firefox pass acid3 test fully believed svg fonts part test become outdated irrelevant due woff agreed upon standard major browser makers svg font tests removed acid3 test september 2011 firefox 4 greater scored 100/100 firefox also implements safe browsing proprietary protocol google used exchange data related phishing malware protection since version 38 windows vista newer firefox supports playback video content protected html5 encrypted media extensions eme security privacy reasons eme implemented within wrapper open source code allows execution proprietary drm module adobe systems—adobe primetime content decryption module cdm cdm runs within sandbox environment limit access system provide randomized device id prevent services uniquely identifying device tracking purposes drm module downloaded enabled disabled manner plug-ins since version 47 google widevine cdm windows mac os x streaming services like amazon video switch silverlight encrypted html5 video also supported mozilla justified partnership adobe google stating important step mozilla roadmap remove npapi plugin support upon introduction eme support builds firefox windows also introduced exclude support eme free software foundation cory doctorow condemned mozilla decision support eme html5 web standards test firefox 68 scores 513 582 points firefox allowed sandbox security model manage privileges accorded javascript code feature since deprecated limits scripts accessing data websites based same-origin policy also provides support smart cards web applications authentication purposes uses tls protect communications web servers using strong cryptography using https protocol freely available https everywhere add-on enforces https even regular http url entered firefox supports http/2 mozilla foundation offers bug bounty us 3,000 us 7,500 cash reward researchers discover severe security holes firefox official guidelines handling security vulnerabilities discourage early disclosure vulnerabilities give potential attackers advantage creating exploits firefox generally fewer publicly known security vulnerabilities internet explorer see comparison web browsers improved security often cited reason switch internet explorer firefox washington post reported exploit code known critical security vulnerabilities internet explorer available 284 days 2006 comparison exploit code known critical security vulnerabilities firefox available nine days mozilla issued patch remedy problem 2006 symantec study showed although firefox surpassed browsers number vendor-confirmed vulnerabilities year september vulnerabilities patched far quickly found browsers firefox vulnerabilities fixed average one day exploit code made available compared nine days internet explorer symantec later clarified statement saying firefox still fewer security vulnerabilities internet explorer counted security researchers 2010 study national institute standards technology nist based data compiled national vulnerability database nvd firefox listed fifth-most vulnerable desktop software internet explorer eighth google chrome first infoworld cited security experts saying firefox becomes popular vulnerabilities found claim mitchell baker president mozilla foundation denied idea market share alone make vulnerabilities relational said october 2009 microsoft security engineers acknowledged firefox vulnerable security issue found 'windows presentation foundation browser plug-in since february year .net framework 3.5 sp1 windows update silently installed vulnerable plug-in firefox vulnerability since patched microsoft firefox 3.6 known unpatched security vulnerabilities according secunia internet explorer 8 five unpatched security vulnerabilities worst rated less critical secunia mozilla claims patched vulnerabilities mozilla products publicly listed january 28 2013 mozilla recognized trusted internet company privacy 2012 study performed ponemon institute result survey 100,000 consumers united states february 2013 plans announced firefox 22 disable third-party cookies default however introduction feature delayed mozilla developers could collect analyze data effect blocking third-party cookies mozilla also collaborated stanford university cookie clearinghouse project develop blacklist whitelist sites used filter version 23 released august 2013 followed lead competitors blocking iframe stylesheet script resources served non-https servers embedded https pages default additionally javascript could also longer disabled firefox preferences javascript automatically re-enabled users upgraded 23 higher disabled change made due use across majority websites potential repercussions non-experienced users unaware impact along availability extensions noscript disable javascript controlled fashion following release added ability disable javascript developer tools testing purposes january 2015 torrentfreak reported using firefox connected internet using vpn serious security issue due browser support webrtc beginning firefox 44 extensions must signed mozilla used release beta versions firefox firefox 43 blocked unsigned extensions allowed enforcement extension signing disabled extensions must submitted mozilla add-ons subject code analysis order signed although extensions listed service order signed may 2 2019 mozilla announced would strengthening signature enforcement methods included retroactive disabling old extensions deemed insecure firefox update may 3 led bug reports extensions disabled found result overlooked certificate policy change set go effect june 10 firefox versions prior 7.0 information bar appears browser first start asking users whether would like send performance statistics telemetry mozilla enabled default development versions firefox release versions according mozilla privacy policy statistics stored aggregate format personally identifiable information transmitted user ip address november 2018 firefox began using sandbox isolate web tabs rest system lack feature previously earned negative comparisons google chrome microsoft edge since version 60 firefox includes option use dns https doh causes dns lookup requests sent encrypted https protocol use feature user must set certain preferences beginning network.trr trusted recursive resolver network.trr.mode 0 doh disabled 1 activates doh addition unencrypted dns 2 causes doh used unencrypted dns use doh value must 3 setting network.trr.uri url https //mozilla.cloudflare-dns.com/dns-query special cloudflare servers activated mozilla privacy agreement server host restricts collection information incoming dns requests may 21 2019 firefox updated include ability block scripts used computer cpu mine cryptocurrency without user permission firefox version 67.0 update also allowed users block known fingerprinting scripts track activity across web however resist fingerprinting july 2 2019 mozilla introduced mechanism allow firefox automatically trust os-installed certificates prevent tls errors firefox widely localized web browser first official release november 2004 available 24 different languages 28 locales including british english american english european spanish argentine spanish chinese traditional chinese characters simplified chinese characters currently supported versions 68.0.2 68.0.2esr 60.8.0esr available 89 locales 79 languages desktop version firefox available supported microsoft windows macos linux firefox android available android formerly firefox mobile also ran firefox os firefox source code may compiled various operating systems however officially distributed binaries provided following firefox 1.0 released windows 9x well windows nt 4.0 later users reported 1.x builds operable installable windows nt 3.51 september 2013 metro-style version firefox optimized touchscreen use introduced aurora release channel however project since cancelled mozilla citing lack user adoption beta versions version 43.0 included first x64 builds made windows 7 server 2008 r2 version 49.0 dropped support processors without sse2 instruction set windows april 2017 users firefox 52.0.2 windows xp windows vista windows server 2003 windows server 2008 automatic updates enabled migrated firefox 52 esr support projected end operating systems last release june 2018 first official release firefox version 1.0 supported macos called mac os x powerpc architecture mac os x builds ia-32 architecture became available via universal binary debuted firefox 1.5.0.2 2006 starting version 4.0 firefox released x64 architecture macos migrated since inception firefox linux supported 32-bit memory architecture ia-32 instruction set 64-bit builds introduced 4.0 release 46.0 release replaced gtk+ 2.18 3.4 system requirement linux systems running x.org starting 53.0 32-bit builds require sse2 instruction set firefox android codenamed fennec web browser smaller non-pc devices mobile phones pdas originally first released nokia maemo operating system specifically nokia n900 january 28 2010 march 29 2011 besides maemo version 4 added android release mobile version browser version number bumped 2 4 synchronizing future desktop releases firefox rendering engines used browsers version 7 last release maemo n900 user interface completely redesigned optimized small screens controls hidden away web content shown screen uses touchscreen interaction methods includes awesome bar tabbed browsing add-on support password manager location-aware browsing ability synchronize user computer firefox browser using firefox sync april 2013 then-mozilla ceo gary kovacs said firefox would come ios long apple required use webkit layout engine one reason given mozilla prior ios 8 apple supplied third-party browsers inferior version javascript engine hobbled performance making impossible match safari javascript performance ios platform apple later opened nitro javascript engine third-party browsers 2015 mozilla announced moving forward firefox ios preview release made available new zealand september year november 2016 firefox released new ios app titled firefox focus private web browser firefox also ported freebsd netbsd openbsd openindiana os/2 skyos beos/haiku unofficial rebranded version called timberwolf available amigaos 4 unofficial continuation mac os x powerpc release continues tenfourfox firefox port openbsd maintained landry breuil since 2010 firefox regularly built current branch operating system latest versions packaged release remain frozen next release 2017 landry began hosting packages newer firefox versions openbsd releases 6.0 onwards making available installations without ports system solaris port firefox including opensolaris maintained oracle solaris desktop beijing team march 2017 team disbanded also unofficial port firefox 3.6.x ibm aix v1.7.x unixware besides official releases mozilla provides development builds firefox distribution channels named order least stable beta developer edition former aurora renamed november 10 2014 nightly starting firefox 54 developer edition based beta build firefox esr version firefox organizations groups need extended support mass deployments esr release based regular version released time supported approximately one year unlike regular rapid releases esrs updated new features performance enhancements every six weeks rather updated high-risk-reduction high-impact security fixes major stability fixes point releases end esr cycle firefox source code free software released mozilla public license mpl version 2.0 license permits anyone view modify redistribute source code result several publicly released applications built netscape flock miro gnu icecat iceweasel songbird pale moon comodo icedragon past firefox licensed solely mpl version 1.1 free software foundation criticized weak copyleft license permitted limited ways proprietary derivative works additionally code licensed mpl 1.1 could legally linked code gpl address concerns mozilla re-licensed firefox tri-license scheme mpl 1.1 gpl 2.0 lgpl 2.1 since re-licensing developers free choose license received code suit intended use gpl lgpl linking derivative works one licenses chosen mpl use including possibility proprietary derivative works chose mpl however january 3 2012 mozilla released gpl-compatible mpl 2.0 release firefox 13 june 5 2012 mozilla used replace tri-licensing scheme crash reporting service initially closed-source switched version 3 program called talkback open-source breakpad socorro server name mozilla firefox registered trademark along official firefox logo may used certain terms conditions anyone may redistribute official binaries unmodified form use firefox name branding distribution restrictions placed distributions modify underlying source code name firefox derives nickname red panda mozilla placed firefox logo files open-source licenses trademark guidelines allow displaying altered similar logos contexts trademark law applies controversy mozilla foundation intentions stopping certain open source distributions using firefox trademark open source browsers enable greater choice innovation market rather aiming mass-market domination mozilla foundation chairperson mitchell baker explained interview 2007 distributions could freely use firefox trademark modify source-code mozilla foundation concern users getting consistent experience used firefox allow distributions code without using official branding firefox build system contains branding switch switch often used alphas auroras future firefox versions allows code compiled without official logo name allow derivative work unencumbered restrictions firefox trademark produced unbranded build trademarked logo name replaced freely distributable generic globe logo name release series modified version derived distributing modified versions firefox firefox name required explicit approval mozilla changes made underlying code required use official branding example permissible use name firefox without also using official logo debian project decided stop using official firefox logo 2006 mozilla copyright restrictions time incompatible debian guidelines told representative mozilla foundation acceptable asked either comply published trademark guidelines cease using firefox name distribution ultimately debian switched branding modified version firefox iceweasel 2016 switched back firefox along mozilla software gnu icecat another derived version firefox distributed gnu project maintains separate branding early firebird phoenix releases firefox considered reasonable visual designs fell short compared many professional software packages october 2003 professional interface designer steven garrity wrote article covering everything considered wrong mozilla visual identity shortly afterwards mozilla foundation invited garrity head new visual identity team release firefox 0.8 february 2004 saw introduction new branding efforts included new icon designs silverorange group web developers long-standing relationship mozilla final renderings jon hicks worked camino logo later revised updated fixing several flaws found enlarged animal shown logo stylized fox although firefox usually common name red panda panda according hicks n't really conjure right imagery widely known firefox icon trademark used designate official mozilla build firefox software builds official distribution partners reason software distributors distribute modified versions firefox use icon june 2019 firefox announced rebranding introduced new logo new logo meant encompass larger family products firefox adopted rapidly 100 million downloads first year availability followed series aggressive marketing campaigns starting 2004 series events blake ross asa dotzler called marketing weeks firefox continued heavily market releasing marketing portal dubbed spread firefox sfx september 12 2004 debuted along firefox preview release creating centralized space discussion various marketing techniques release manifesto stated mozilla project global community people believe openness innovation opportunity key continued health internet two-page ad edition december 16 new york times placed mozilla foundation coordination spread firefox featured names thousands people worldwide contributed mozilla foundation fundraising campaign support launch firefox 1.0 web browser sfx portal enhanced get firefox button program giving users referrer points incentive site lists top 250 referrers time time sfx team sfx members launch marketing events organized spread firefox website part spread firefox campaign attempt break world download record release firefox 3 resulted official certified guinness world record eight million downloads february 2011 mozilla announced would retiring spread firefox sfx three months later may 2011 mozilla officially closed spread firefox mozilla wrote currently plans create new iteration website spread firefox later date celebration third anniversary founding mozilla foundation world firefox day campaign established july 15 2006 ran september 15 2006 participants registered friend website nomination names displayed firefox friends wall digital wall displayed headquarters mozilla foundation firefox community also engaged promotion web browser 2006 firefox contributors oregon state university made crop circle firefox logo oat field near amity oregon near intersection lafayette highway walnut hill road firefox reached 500 million downloads february 21 2008 firefox community celebrated visiting freerice earn 500 million grains rice initiatives included live chat service mozilla launched 2007 allowed users seek technical support volunteers service later retired promote launch firefox quantum november 2017 mozilla partnered reggie watts produce series tv ads social media content december 2005 internet week ran article many readers reported high memory usage firefox 1.5 mozilla developers said higher memory use firefox 1.5 least partially due new fast backwards-and-forwards fastback feature known causes memory problems malfunctioning extensions google toolbar older versions adblock plug-ins older versions adobe acrobat reader pc magazine 2006 compared memory usage firefox 2 opera 9 internet explorer 7 found firefox used approximately much memory two browsers softpedia noted firefox 1.5 took longer start browsers confirmed speed tests ie 6 launched swiftly firefox 1.5 windows xp since many components built os loaded system startup workaround issue preloader application created loaded components firefox startup similar internet explorer windows vista feature called superfetch performs similar task preloading firefox used often enough tests performed pc world zimbra 2006 indicated firefox 2 used less memory internet explorer 7 firefox 3 used less memory internet explorer 7 opera 9.50 beta safari 3.1 beta firefox 2 tests performed mozilla cybernet browser world mid-2009 betanews benchmarked firefox 3.5 declared performed nearly ten times better xp microsoft internet explorer 7 january 2010 lifehacker compared performance firefox 3.5 firefox 3.6 google chrome 4 stable dev versions safari 4 opera 10.1 stable 10.5 pre-alpha versions lifehacker timed long browsers took start reach page right boot-up running least already timed long browsers took load nine tabs tested javascript speeds using mozilla dromaeo online suite implements apple sunspider google v8 tests measured memory usage using windows 7 process manager concluded firefox 3.5 3.6 fifth- sixth-fastest browsers respectively startup 3.5 third- 3.6 sixth-fastest load nine tabs 3.5 sixth- 3.6 fifth-fastest javascript tests also concluded firefox 3.6 efficient memory usage followed firefox 3.5 february 2012 tom hardware performance tested chrome 17 firefox 10 internet explorer 9 opera 11.61 safari 5.1.2 windows 7 tom hardware summarized tests four categories performance efficiency reliability conformance performance category tested html5 java javascript dom css 3 flash silverlight webgl webgl 2 current version 51 java silverlight stop working version 52 —they also tested start time page load time performance tests showed firefox either acceptable strong categories winning three categories html5 html5 hardware acceleration java finishing weak css performance efficiency tests tom hardware tested memory usage management category determined firefox acceptable performing light memory usage strong performing heavy memory usage reliability category firefox performed strong amount proper page loads final category conformance determined firefox strong conformance javascript html5 conclusion tom hardware determined firefox best browser windows 7 os narrowly beat google chrome june 2013 tom hardware performance tested firefox 22 chrome 27 opera 12 internet explorer 10 found firefox slightly edged browsers performance index examined wait times javascript execution speed html5/css3 rendering hardware acceleration performance firefox also scored highest non-performance index measured memory efficiency reliability security standards conformance finishing substantially ahead chrome runner-up tom hardware concluded declaring firefox sound winner performance benchmarks january 2014 benchmark testing memory usage firefox 29 google chrome 34 internet explorer 11 indicated firefox used least memory substantial number tabs open benchmark testing early 2015 high-end windows machine comparing microsoft edge internet explorer firefox chrome opera firefox achieved highest score three seven tests four different javascript performance tests gave conflicting results firefox bested others peacekeeper benchmark behind microsoft products tested sunspider measured mozilla kraken came second place chrome google octane challenge took third behind chrome opera firefox took lead webxprt runs several typical html5 javascript tasks firefox chrome opera achieved highest possible score oort online test measuring webgl rendering speed webgl 2 current terms html5 compatibility testing firefox ranked middle group similar set benchmark tests 2016 showed firefox javascript performance kraken newer jetstream tests trailing slightly behind tested browsers except internet explorer performed relatively poorly octane firefox came ahead ie safari slightly behind rest including vivaldi microsoft edge edge took overall first place jetstream octane benchmarks adoption firefox 57 mozilla quantum project entering production browsers november 2017 firefox tested faster chrome independent javascript tests demonstrated use less memory many browser tabs opened techradar rated fastest web browser may 2019 report downloads continued increasing rate since firefox 1.0 released november 9 2004 firefox already downloaded one billion times number include downloads using software updates third-party websites represent user count one download may installed many machines one person may download software multiple times software may obtained third-party july 2010 ibm asked employees 400,000 use firefox default browser firefox second-most used web browser november 2011 google chrome surpassed according mozilla firefox 450 million users firefox second-most widely used desktop browser position makes fourth-most popular approximately 11.78 worldwide usage share web browsers across platforms according firefox public data report mozilla active monthly count desktop clients decreased around 310 million 2017 260 million 2019
node9:Wikipedia entry. Entry name: Railo. Entry content: railo railo server commonly referred railo open source software implements general-purpose cfml server-side scripting language often used create dynamic websites web applications intranet systems cfml dynamic language supporting multiple programming paradigms runs java virtual machine jvm railo created swiss company railo technologies gmbh intended high performance alternative adobe coldfusion 2008 railo switched open source community-driven model became jboss project railo open source project led railo technologies development work funded consulting support contracts anyone may contribute code consideration railo named alien dog star trek enterprise dog actually named rhylo written phonetically german railo thus railo pronounced either rhy-lo rai-lo acceptable railo major releases codename notable loyal dogs history railo began 2002 student project compile cfml code php choice made due ubiquity php however found give desired performance stability decision made switch java platform instead project successful enough decided continue develop full product several alpha beta releases made official 1.0 release april 2006 railo continued developed relatively unknown many cfml developers june 2008 scotch rocks conference edinburgh railo technologies used day 2 keynote announce partnership jboss switch open source may 2012 cf objective conference foundation railo company ltd announced private limited company comprising swiss company railo technologies gmbh conjunction five companies operated cfml industry 29 january 2015 lucee project fork railo 4.2 codebase announced original developer railo stated would working railo developers confirmed also focusing solely lucee although official statement made railo company community consensus development railo project unlikely 19 july 2016 railo company dissolved railo runs jvm servlet work servlet container e.g apache tomcat eclipse jetty application server e.g jboss glassfish possible connect web server e.g apache iis nginx cherokee front using connectors mod jk mod proxy equivalent required railo railo installer linux macos windows bundles apache tomcat also pre-configured railo express download using jetty v4.0 onwards railo command line version enabling cfml used general-purpose language outside servlet environment railo since v3.1 licensed lgpl v2.1 source code available github primary aim railo provide functionality coldfusion using less resources giving better performance railo technologies team continue treat slowness bug core development philosophy many performance tests shown railo perform faster cfml engines addition railo attempts resolve many inconsistencies found traditional cfml either forced changes behaviour configurable options railo administrator railo technologies team always open feedback active cfml community events keen remind people railo community project railo technologies also creates strong technology partnerships cfml software companies including blue river interactive group developers mura cms contens software gmbh developers contens cms intergral gmbh developers fusionreactor fusiondebug help ensure software works well railo addition railo technologies offer formal partner programs solutions development hosting training railo application server currently averages 7,000 downloads growing per month railo used number companies notably including cfml built-in functionality preventing code injection via codice_10 tag functions codice_11 codice_12 codice_13 also third-party cfml implementations owasp enterprise security api antisamy project one key architecture decisions railo follow jee servlet model support multiple independent web contexts single server key security factor prevents unrelated applications interfering may happen shared coldfusion server single web context railo implements cfml language see cfml syntax section examples well cfscript cfml tag-based syntax visually different languages though aside similar dynamic languages following exceptions whilst railo implements cfml generally compatible adobe coldfusion acf original cfml engine notable differences two
node10:Wikipedia entry. Entry name: JRuby. Entry content: jruby jruby implementation ruby programming language atop java virtual machine written largely java free software released three-way epl/gpl/lgpl license jruby tightly integrated java allow embedding interpreter java application full two-way access java ruby code similar jython python language jruby lead developers charles oliver nutter thomas enebo many current past contributors including ola bini nick sieger september 2006 sun microsystems hired enebo nutter work jruby full-time june 2007 thoughtworks hired ola bini work ruby jruby july 2009 jruby developers left sun continue jruby development engine yard may 2012 nutter enebo left engine yard work jruby red hat jruby originally created jan arne petersen 2001 time several years following code direct port ruby 1.6 c code release ruby 1.8.6 effort began update jruby 1.8.6 features semantics since 2001 several contributors assisted project leading current core team around six members jruby 1.1 added just-in-time compilation ahead-of-time compilation modes jruby already faster cases then-current ruby 1.8.7 reference implementation jruby packages available platforms fedora 9 among first include standard package jruby 1.1.1 july 2009 core jruby developers sun microsystems charles oliver nutter thomas enebo nick sieger joined engine yard continue jruby development may 2012 nutter enebo left engine yard work jruby red hat jruby supported compatibility ruby mri versions 1.6 1.9.3 jruby 1.0 supported ruby 1.8.6 jruby 1.4.0 updating compatibility ruby 1.8.7 jruby 1.6.0 added simultaneous support ruby 1.9.2 jruby 1.7.0 making ruby 1.9.3 default execution mode ruby 1.8.7 compatibility available via command-line flag jruby 9.0.0.0 added support ruby 2.2 jruby able run ruby rails web framework since version 0.9 may 2006 ability execute rubygems webrick since hiring two lead developers sun rails compatibility speed improved greatly jruby version 1.0 successfully passed nearly rails test cases since developers begun use jruby rails applications production environments february 27 2008 sun microsystems university tokyo announced joint-research project implement virtual machine capable executing one ruby jruby application one interpreter jsr 292 supporting dynamically typed languages javatm platform proposes sun open source project multi language virtual machine aims prototype jsr first working prototype developed patch openjdk announced made available end august 2008 jruby team implemented dynamic invocation codebase dynamic invocation initially shipped 1.1.5 release primitive form version 1.7.0 enabled default java 8 builds table presents releases present significant steps jruby history aside versions mainly fixed bugs improved performance performance improvements also shown table every release usually brought improvements since early 2006 current jruby core team endeavored move jruby beyond simple c port support better performance aid eventual compilation java bytecode support end team set ambitious goal able run ruby rails unmodified using jruby process achieving goal jruby test suite expanded extent team gained confidence correctness jruby result toward end 2006 beginning 2007 began commit much complicated redesigns refactorings jruby core subsystems jruby designed work mixed-mode virtual machine ruby code either interpreted directly just-in-time compiled runtime java bytecode ahead-of-time compiled java bytecode execution october 2007 interpreted mode supported ruby constructs full aot/jit compiler available since version 1.1 compiler design allows interpreted compiled code run side-by-side well decompilation reoptimize outputting generated bytecode java class files jruby built-in support rails rspec rake rubygems embeds ffi subsystem allow use c libraries bundled gems also allows launching interactive ruby shell irb ruby mri netbeans ruby pack available netbeans 6 allows ide development ruby jruby well ruby rails two implementations ruby longer included netbeans 7.0 later jruby similar standard ruby interpreter except written java jruby features concepts including object-oriented programming dynamic-typing ruby key difference jruby tightly integrated java called directly java programs java significant footing development web applications one powerful feature jruby ability invoke classes java platform one must first load jruby java support calling require 'java following example creates java jframe jlabel jruby also allows user call java code using ruby-like underscore method naming refer javabean properties attributes jruby easily called java using either jsr 223 scripting java 6 apache bean scripting framework according benchmarks jruby faster alternatives since implementations vary much code loaded execution different methods measuring speed lead biased interpretations performance advantages time takes java virtual machine load often excluded execution times calculating benchmarks jruby significant architectural advantage able leverage jvm threads without constrained global interpreter lock similarly rubinius therefore achieving full parallelism within process ruby mri achieve despite leveraging os threads real mongrel web server application tested 2007 jruby performance better ruby mri 1.8 java virtual machine instantiated 2007 benchmark ruby implementations jruby faster ruby mri 1.8 tests yarv outperformed april 2014 computer language benchmarks game jruby 1.7.4 typically performance ruby mri 2.1.0 uses memory
node11:Wikipedia entry. Entry name: Pip_(package_manager). Entry content: pip package manager pip de facto standard package-management system used install manage software packages written python many packages found default source packages dependencies — python package index pypi distributions python come pip preinstalled python 2.7.9 later python2 series python 3.4 later include pip pip3 python 3 default pip recursive acronym pip installs packages one major advantage pip ease command-line interface makes installing python software packages easy issuing command users also easily remove package importantly pip feature manage full lists packages corresponding version numbers possible requirements file permits efficient re-creation entire group packages separate environment e.g another computer virtual environment achieved properly formatted file following command codice_1 name file install package specific version python codice_2 replaced 2 3 3.4 etc
node12:Wikipedia entry. Entry name: Open_source_in_Kosovo. Entry content: open source kosovo first project open source kosovo adjustment open office packet december 2003 28 july 2004 albanian team users linux ggsl one first public organizations purpose getting information field open source conference called software freedom day software freedom day known first initiative foss kosovo level conference purpose conference promote free open software issues discussed linux free software open sources general another issue discussed conference operative system linux benefits kde gnome last issues discussed conference ati-kos made surveys five municipal assemblies kosovo may 2005 according survey 98.6 wanted software box mother tongue albanian another survey majority participants believed software box like open office would help increasing productivity different fields interface albanian free libre open source software kosova flossk floss kosova non-governmental organization established march 2009 promotes free open-source software initiative undertaken james michael dupont association volunteers kosovo first results organization seen august year faculty electrical computer engineering held first conference organization conference became tradition held every year conference resulted biggest conference region called “ software freedom kosova 2009 ” promoted free open-source software growth knowledge maps active members members around kosovo abroad february 2009 first person started teaching lessons operative system linux kosovo james micheal dupont courses held idi mainly concerned basic elements using linux benefits systems june year students continued teach lessons linux open street map one projects contributes mostly open source kosovo many members open street map community worked project companies like 'logisticplus companies well beginnings seen map made brod town brod town endangered environmental damages mountains sharri project introduced joachim bergerhoff told flossk un-habitat project flossk helped development project map created community included cities towns brod gjilan gjakovë ferizaj prizren pejë prishtinë interesting project also project shkodra 2010 community helped survivors flooding find streets project 'kumevotu.info project youngsters flossk less two weeks duty project help people find place vote project held 12 december 2010 dedicated especially elections year 2010 project based open street map user gives personal data interesting map find place vote project useful even youngsters participated creating olpc one attractive projects open source kosovo dedicated children olpc project dedicated poor places basic thing laptop used children learn system linux laptop based version fedora basic applications also equipped wifi people could browse internet learn new things project supported since first steps flossk different conferences project welcomed kosovo albanian community open source kosovo active field wikipedia wikimedia community dealing mainly promoting open knowledge wikipedia translating albanian made easier community informed everything initiative made flossk resulted 31,458 articles albanian language 2013 conference held called 'wikiacademykosovo direct way adding articles wikipedia project 'fedora one open source projects also active kosovo promoted distributed two ambassadors kosovo ardian haxha gent thaqi flossk association ambassadors fedras kosovo always organizes parties announce new versions mozilla firefox community active kosovo one projects flossk also promoting mozilla project ambassadors kosovo altin ukshini gent thaqi heroid shehu active promoting mozilla project kosovo also projects platform drupal flossk association unicef lab managed organize training project 6 may dave hall member free software counselor administrator systems australia participants trained knowledge drupal ways using developing cms 29 30 august 2009 first annual conference “ software freedom kosova 2009 ” held premises faculty engineering organized free libre open source software kosova flossk university pristina conference presented public figures world free open source software presented kosovo also james michael dupont – co-founder flossk conference promoted free open-source software also aim exchange experiences speakers audiences 40 topics lectures various fields ranging issues related wikipedia free encyclopedia linux intellectual property licenses building communities programming languages php python given features mentioned conference freely called one extensive southeast europe “ software freedom kosova 2010 ” held second time 25-26 september capital city kosovo prishtina sfk10 organized floss kosovo faculty electrical engineering computer fiek university pristina conference time last time focused 24 lectures kosovo region world main lecturers also guests honor conference renowned hacker fk10 prepared thanks job almost year organizing committee also topics also offered conference held premises faculty electrical computer engineering time spending tradition continued almost middle november exactly 12th 2011 organized next conference “ software freedom kosova 2011 ” one largest activities field 300 participants conference one successful held till local regional speakers full intensive day much topics touched world free software one held day focused topic “ business open source ” introductory remarks made public curious topics presented first half day second part day presentations finally long-awaited final presentation held omer keser google executive spoke google mobile applications detailing number users mobile devices numbers territories world development mobile phone use across different states conference focused aim meeting point network individuals companies sponsoring also initiating projects benefit people kosovo establishing one european centers floss soon possible result commercial benefits country aim could achieve kosovo businesses public introduce low cost alternatives rather expensive proprietary software promote respect legal licenses introduce public best methods localization software knowledge kind activity present lecturers business world use floss commercial development projects also present examples companies region using floss competitive leg outsourcing european market moreover presenting free code build helps entry level professionals companies build skills work leader towards value added projects open source software conference related developments knowledge culture mapping held prishtina kosovo largest conference kind region conference organized free libre open source kosova flossk kosovo association information oommunication technology ipko foundation faculty electrical engineering university pristina conference focused web technologies standards-based vendor html5 javascript like especially important consider recent developments global scene related touch-optimized applications mobile web fact software development kosovo centers web technologies conference held 8-9 september faculty electrical computer engineering prishtina software freedom kosova 2013 nonprofit conference 5th time edition organized flossk new details released regarding agenda speakers presented 7 september 2013 first day conference topics discussed include mobile open web hacker spaces data protection freelancing code sharing scaling cloud one first time changed traditional location organizing faculty education university pristina 170 participants many speakers welcome note done arianit dobroshi altin ukshini ardian haxha thankful anyone presented speakers donators lecture presented alex lakatos java script developer mozilla representative based cluj-napoca redon skikuli mozilla representative one co-founders design everview tirana arianit dobroshi one main member since beginning flossk arbnor hasani currently involved innovations lab kosovo design center ana risteska contributor gnome project burim shala wordpress theme developer two next days conference held place focused practical things participants like tuning postagre sql bert desmet awesome html5/css3 vleran dushi wordpress template development burim shala wmkit arduino workshop redon sikuli november 2004 klina municipality started project change computer network linux openoffice.org first part project charged firefox openoffice.org second part charged linux 3rd 6 november year 70 municipality computer network english language openoffice.org firefox albanian proliferation open source software products benefits many companies government kosovo costs significantly lower security higher undp foss club also trained municipal employees survey conducted end training 100 employees stated prefer software albanian language project translation openoffice.org albanian language started year undp foss team consisted members bulgaria kosovo 4 june 2010 richard stallman activist programmer free software visited kosovo lectured topic free digital society national library kosovo lecture freedom digital society threats welcomed large number participants lecture richard stallman mentioned many countries digital freedom directly violated denmark australia countries many webpages closed unclear reasons emphasized presence free software freedom educational institutions really necessary countries want advance societies use free software want dependent software pay also emphasized today meeting minister education kosovo offered help implementation free software schools kosovo help country develop free independent weak working project powerful give others also opportunity get knowledge freedom software richard stallman end richard stallman answered many questions put forth participants room 22-24 february faculty education near university pristina held first academy called wikiacademykosovo idea conference promote kosovo digital world emphasize good things new qualitative articles pictures wikimedia propaganda present kosovo threat idea kosovo country academy revealed articles cultural heritage social issue geography institutions economy tourism also starting point improve actual image kosovo number mentors wikipedia present event advised writers writings result writings became qualitative winners academy writings academy supported ministry internal affairs republic kosovo great britain ambassy royal ambassy norway british council ipko foundation kosovar organization flossk
node13:Wikipedia entry. Entry name: MirOS_BSD. Entry content: miros bsd miros bsd originally called mirbsd discontinued free open source operating system started fork openbsd 3.1 august 2002 intended maintain security openbsd better support european localisation since also incorporated code free bsd descendants including netbsd microbsd freebsd code miros bsd also incorporated ekkobsd ekkobsd ceased exist artwork code developers ended working miros bsd unlike three major bsd distributions miros bsd supports x86 sparc architectures one project goals able port miros userland run linux kernel hence deprecation mirbsd name favour miros web page os project active 2019 last update os years ago e.g font released miros bsd originated openbsd-current-mirabilos openbsd patchkit soon grew differences opinion openbsd project leader theo de raadt thorsten glaser despite forking miros bsd synchronised ongoing development openbsd thus inheriting good security history well netbsd bsd flavours one goal provide faster integration cycle new features software openbsd according developers controversial decisions often made differently openbsd instance wo n't support smp miros also tolerant software inclusion policy end result hopefully refined bsd experience another goal miros bsd create modular base bsd system similar debian miros linux linux kernel bsd userland discussed developers sometime 2004 materialised important differences openbsd aside cooperating bsds submitting patches upstream software authors synergy effects freewrt active cooperation grml inclusion technical areas projects debian also fed mirsoftware mirports derivative openbsd ports tree developed benny siegert mirports use package tools openbsd written perl continues maintain previous c-based tools new features in-place package upgrades installing mirports instance non-root user unlike openbsd ports mirports tied specific os versions even stable releases using newest version recommended mirlibtool modified version gnu libtool 1.5 installed mirports build shared libraries portable way multiple platforms supported box following miros bsd policy faster software availability user many ports removed political reasons openbsd e.g djb software flash plugin kept mirports continue used mirports intended place unofficial rejected openbsd ports
node14:Wikipedia entry. Entry name: IDispatch. Entry content: idispatch idispatch interface exposes ole automation protocol extending iunknown one standard interfaces exposed com objects com distinguishes three interface types custom vtable-based iunknown interfaces dispatch idispatch interfaces supporting introspection dual interfaces supporting types automation idispatch interface allows client application find properties methods supported object run-time i.e implements concept rtti also provides information necessary invoke properties methods client applications need aware object members compiled allows com activex objects called scripting programs platforms asp server javascript internet explorer calling conventions known time iis ie built contrast simple object library compiled linked program e.g dll call needs know function name parameters compile time script writer ask com object method property already knows documentation client execute function invoke provided idispatch interface form late-binding sort capability also supported dynamic data exchange dde never became popular due low-level dispatch interfaces flexible suffer additional introspection invocation overhead compared custom interfaces therefore often good idea support interface types dual interfaces way clients supporting vtable-based invocation use custom interface instead dispatch counterpart property method implemented object supports idispatch interface called dispatch id often abbreviated dispid dispid primary means identifying property method must supplied invoke function property method invoked along array variants containing parameters getidsofnames function used get appropriate dispid property method name string format idispatch derives iunknown extends four additional methods idispatch interface id defined guid value 00020400-0000-0000-c000-000000000046
node15:Wikipedia entry. Entry name: Urpmi. Entry content: urpmi urpmi package management tool installing removing updating querying software packages local remote networked media wraps around rpm package manager rpm package manager user suffer often-encountered dependency hell works official sources mandriva unofficial sources penguin liberation front graphical front-end rpmdrake made 2 parts addition now-defunct mandriva linux also used urpmi developed experiment pascal rigaux pixel address rpm install limitations maintained françois pons different mandriva employees currently 2010-2013 maintained thierry vignaud maintainer rpmdrake one co-maintainers drakx installer tools mandriva continued job mageia version used mandriva future products based mageia per øyvind karlsen maintains fork urpmi rosa linux backporting fixes improvements thierry vignaud work version used mandriva business server based mageia
node16:Wikipedia entry. Entry name: Nix_package_manager. Entry content: nix package manager nix cross-platform package management system utilizes purely functional deployment model software installed unique directories generated cryptographic hashes dependencies software included within hash solving problem dependency hell novel approach package management promises generate reliable reproducible portable packages nix packages defined lazy functional programming language specifically designed package management dependencies tracked directly language special values called derivations installed nix lazily nix keeps track references automatically installed packages garbage collected package depends cost greater storage requirements upgrades nix guaranteed atomic efficiently rolled back also enables multiple users safely install software system without administrator privileges nix full support linux safely installed side-by-side existing package manager macos also officially supported nixos linux distribution using nix consistently every piece software system including linux kernel
node17:Wikipedia entry. Entry name: Hibernate_(framework). Entry content: hibernate framework hibernate orm hibernate short object-relational mapping tool java programming language provides framework mapping object-oriented domain model relational database hibernate handles object-relational impedance mismatch problems replacing direct persistent database accesses high-level object handling functions hibernate free software distributed gnu lesser general public license 2.1 hibernate primary feature mapping java classes database tables mapping java data types sql data types hibernate also provides data query retrieval facilities generates sql calls relieves developer manual handling object conversion result set mapping java classes database tables implemented configuration xml file using java annotations using xml file hibernate generate skeleton source code persistence classes auxiliary annotations used hibernate use xml file java annotations maintain database schema provided facilities arrange one-to-many many-to-many relationships classes addition managing associations objects hibernate also manage reflexive associations wherein object one-to-many relationship instances class type hibernate supports mapping custom value types makes following scenarios possible definition objects object-oriented application follow oop principles objects back-end follow database normalization principles resulting different representation requirements problem called object-relational impedance mismatch mapping way resolving object-relational impedance mismatch problem mapping informs orm tool java class object store database table hibernate provides sql inspired language called hibernate query language hql writing sql-like queries hibernate data objects criteria queries provided object-oriented alternative hql criteria query used modify objects provide restriction objects hql hibernate query language object-oriented version sql generates database independent queries need write database-specific queries without capability changing database would require individual sql queries changed well leading maintenance issues hibernate provides transparent persistence plain old java objects pojos strict requirement persistent class no-argument constructor though necessarily proper behavior applications also requires special attention methods object classes hibernate recommends providing identifier attribute planned mandatory requirement future release collections data objects typically stored java collection classes implementations interfaces java generics introduced java 5 also supported hibernate configured lazy load associated collections lazy loading default hibernate 3 related objects configured cascade operations one object example parent class object configured cascade operations child class objects hibernate used standalone java applications java ee applications using servlets ejb session beans jbi service components also included feature programming languages example adobe integrated hibernate version 9 coldfusion runs j2ee app servers abstraction layer new functions syntax added cfml hibernate jargon entity stand-alone object hibernate persistent mechanism manipulated independently objects contrast component subordinate entity manipulated respect entity example album object may represent entity tracks object associated album objects would represent component album entity assumed tracks saved retrieved database album object unlike j2ee hibernate switch databases hibernate started 2001 gavin king colleagues cirrus technologies alternative using ejb2-style entity beans original goal offer better persistence capabilities offered ejb2 simplifying complexities supplementing certain missing features early 2003 hibernate development team began hibernate2 releases offered many significant improvements first release jboss inc. part red hat later hired lead hibernate developers order development 2005 hibernate version 3.0 released key features included new interceptor/callback architecture user defined filters jdk 5.0 annotations java metadata feature hibernate 3 version 3.5.0 certified implementation java persistence api 2.0 specification via wrapper core module provides conformity jsr 317 standard dec 2011 hibernate core 4.0.0 final released includes new features multi-tenancy support introduction serviceregistry major change hibernate builds manages services better session opening sessionfactory improved integration via org.hibernate.integrator.spi.integrator auto discovery internationalization support message codes logging distinction api spi implementation classes december 2012 hibernate orm 4.1.9 final released mar 2013 hibernate orm 4.2 final released december 2013 hibernate orm 4.3.0 final released features java persistence api 2.1 september 2015 hibernate orm 5.0.2 final released improved bootstrapping hibernate-java8 hibernate-spatial karaf support november 2018 hibernate orm 5.1.17 final released final release 5.1 series october 2018 hibernate orm 5.3 final released featured java persistence api 2.2 inheritance caching december 2018 hibernate orm 5.4.0 final released hibernate api provided java package org.hibernate org.hibernate.session interface represents hibernate session i.e. main point manipulation performed database entities latter activities include among things managing persistence state transient persisted detached objects fetching persisted ones database management transaction demarcation session intended last long logical transaction database due latter feature session implementations expected thread safe used multiple clients hibernate software includes following components
node18:Wikipedia entry. Entry name: Woof_(software). Entry content: woof software woof software application used build puppy linux distribution another linux distribution application must run inside puppy linux internet connection required order download linux distro binary packages cd-remaster program available puppy linux used build variants puppy linux distribution process used woof build puppy linux distribution another linux distribution linux distributions woof use foundation puppy linux distribution
node19:Wikipedia entry. Entry name: PHP. Entry content: php php hypertext preprocessor simply php general-purpose programming language originally designed web development originally created rasmus lerdorf 1994 php reference implementation produced php group php originally stood personal home page stands recursive initialism php hypertext preprocessor php code may executed command line interface cli embedded html code used combination various web template systems web content management systems web frameworks php code usually processed php interpreter implemented module web server common gateway interface cgi executable web server outputs results interpreted executed php code may type data generated html code binary image data php used many programming tasks outside web context standalone graphical applications robotic drone control standard php interpreter powered zend engine free software released php license php widely ported deployed web servers almost every operating system platform free charge php language evolved without written formal specification standard 2014 original implementation acting de facto standard implementations aimed follow since 2014 work gone create formal php specification majority sites web using php still version 5.6 older versions prior 7.1 longer officially supported php development team security support provided longer third parties debian php development began 1994 rasmus lerdorf wrote several common gateway interface cgi programs c used maintain personal homepage extended work web forms communicate databases called implementation personal home page/forms interpreter php/fi php/fi could used build simple dynamic web applications accelerate bug reporting improve code lerdorf initially announced release php/fi personal home page tools php tools version 1.0 usenet discussion group comp.infosystems.www.authoring.cgi june 8 1995 release already basic functionality php today included perl-like variables form handling ability embed html syntax resembled perl simpler limited less consistent early php intended new programming language grew organically lerdorf noting retrospect n't know stop never intent write programming language ... absolutely idea write programming language kept adding next logical step way development team began form months work beta testing officially released php/fi 2 november 1997 fact php originally designed instead developed organically led inconsistent naming functions inconsistent ordering parameters cases function names chosen match lower-level libraries php wrapping early versions php length function names used internally hash function names chosen improve distribution hash values zeev suraski andi gutmans rewrote parser 1997 formed base php 3 changing language name recursive acronym php hypertext preprocessor afterwards public testing php 3 began official launch came june 1998 suraski gutmans started new rewrite php core producing zend engine 1999 also founded zend technologies ramat gan israel may 22 2000 php 4 powered zend engine 1.0 released august 2008 branch reached version 4.4.9 php 4 longer development security updates released july 14 2004 php 5 released powered new zend engine ii php 5 included new features improved support object-oriented programming php data objects pdo extension defines lightweight consistent interface accessing databases numerous performance enhancements 2008 php 5 became stable version development late static binding missing php added version 5.3 many high-profile open-source projects ceased support php 4 new code february 5 2008 gophp5 initiative provided consortium php developers promoting transition php 4 php 5 time php interpreters became available existing 32-bit 64-bit operating systems either building php source code using pre-built binaries php versions 5.3 5.4 available microsoft windows binary distributions 32-bit ia-32 builds requiring windows 32-bit compatibility mode using internet information services iis 64-bit windows platform php version 5.5 made 64-bit x86-64 builds available microsoft windows official security support php 5.6 ended 31 december 2018 debian 8.0 jessie extend support june 2020 php received mixed reviews due lacking native unicode support core language level 2005 project headed andrei zmievski initiated bring native unicode support throughout php embedding international components unicode icu library representing text strings utf-16 internally since would cause major changes internals language user code planned release version 6.0 language along major features development however shortage developers understood necessary changes performance problems arising conversion utf-16 rarely used web context led delays project result php 5.3 release created 2009 many non-unicode features back-ported php 6 notably namespaces march 2010 project current form officially abandoned php 5.4 release prepared containing remaining non-unicode features php 6 traits closure re-binding initial hopes new plan would formed unicode integration none adopted 2014 2015 new major php version developed numbered php 7 numbering version involved debate php 6 unicode experiment never released several articles book titles referenced php 6 name might caused confusion new release reuse name vote name php 7 chosen foundation php 7 php branch originally dubbed php next generation phpng authored dmitry stogov xinchen hui nikita popov aimed optimize php performance refactoring zend engine retaining near-complete language compatibility wordpress-based benchmarks served main benchmark suite phpng project showed almost 100 increase performance changes phpng also expected make easier improve performance future compact data structures changes seen better suited successful migration just-in-time jit compiler significant changes reworked zend engine called zend engine 3 succeeding zend engine 2 used php 5 major internal changes phpng must receive new major version number php rather minor php 5 release according php release process major versions php allowed break backward-compatibility code therefore php 7 presented opportunity improvements beyond phpng require backward-compatibility breaks particular involved following changes php 7 also included new language features notably introduces return type declarations functions complement existing parameter type declarations support scalar types integer float string boolean parameter return type declarations beginning june 28 2011 php development team implemented timeline release new versions php system least one release occur every month per year minor release occur may include new features every minor release least supported two years security bug fixes followed least one year security fixes total three-year release process every minor release new features unless small self-contained introduced minor release three-year release process mascot php project elephpant blue elephant php logo side designed vincent pontier 1998 php letters forming shape elephant viewed sideways angle elephpant sometimes differently colored plush toy form many variations mascot made years elephpants based original design vincent pontier considered official community highly collectible extremely rare different variations listed field guide elephpants following hello world program written php code embedded html document doctype html title php hello world program /title php echo p hello world /p however requirement exists php code embedded html simplest version hello world may written like closing tag omitted preferred files containing pure php code well requirement php file contain php code interpreter output data outside php tags unchanged simple text file containing codice_13 give output php interpreter executes php code within delimiters anything outside delimiters processed php although non-php text still subject control structures described php code common delimiters php open close php sections shortened form also exists short delimiter makes script files less portable since support disabled local php configuration therefore discouraged recommendation echo short tag prior php 5.4.0 short syntax echo works codice_14 configuration setting enabled php 5.4.0 later always available purpose delimiters separate php code non-php content javascript code html markup first form delimiters php xhtml xml documents creates correctly formed xml processing instructions means resulting mixture php code markup server-side file well-formed xml variables prefixed dollar symbol type need specified advance php 5 introduced type hinting allows functions force parameters objects specific class arrays interfaces callback functions however php 7.0 type hints could used scalar types integer string unlike function class names variable names case sensitive double-quoted heredoc strings provide ability interpolate variable value string php treats newlines whitespace manner free-form language statements terminated semicolon php three types comment syntax /* */ marks block inline comments // used one-line comments codice_15 statement one several facilities php provides output text terms keywords language syntax php similar c style syntax conditions loops function returns similar syntax languages c c++ c java perl php stores integers platform-dependent range either 64-bit 32-bit 128-bit signed integer equivalent c-language long type unsigned integers converted signed values certain situations behavior different programming languages integer variables assigned using decimal positive negative octal hexadecimal binary notations floating point numbers also stored platform-specific range specified using floating point notation two forms scientific notation php native boolean type similar native boolean types java c++ using boolean type conversion rules non-zero values interpreted true zero false perl c++ null data type represents variable value codice_16 allowed value data type old versions interpreter allowed multiple copies value exist variables resource type represent references resources external sources typically created functions particular extension processed functions extension examples include file image database resources arrays contain elements type php handle including resources objects even arrays order preserved lists values hashes keys values two intermingled php also supports strings used single quotes double quotes nowdoc heredoc syntax standard php library spl attempts solve standard problems implements efficient data access interfaces classes php defines large array functions core language many also available various extensions functions well documented online php documentation however built-in library wide variety naming conventions associated inconsistencies described history custom functions may defined developer function myage int birthyear string echo currently myage 1995 old 2019 output sample program currently 24 years old lieu function pointers functions php referenced string containing name manner normal php functions used example callbacks within function tables user-defined functions may created time without prototyped functions may defined inside code blocks permitting run-time decision whether function defined codice_17 function determines whether function given name already defined function calls must use parentheses exception zero-argument class constructor functions called php operator codice_18 case parentheses optional php 5.3 support anonymous functions closures exist php codice_19 exists since php 4.0.1 merely thin wrapper around codice_20 allows normal php functions created program execution php 5.3 added syntax define anonymous function closure capture variables surrounding scope function getadder x adder getadder 8 echo adder 2 // prints 10 example codice_21 function creates closure using passed argument keyword codice_22 imports variable lexical context takes additional argument returns created closure caller function first-class object meaning stored variable passed parameter functions etc unusually dynamically typed language php supports type declarations function parameters enforced runtime supported classes interfaces since php 5.0 arrays since php 5.1 callables since php 5.4 scalar integer float string boolean types since php 7.0 php 7.0 also type declarations function return types expressed placing type name list parameters preceded colon example codice_23 function earlier example could annotated types like php 7 function getadder int x closure adder getadder 8 echo adder 2 // prints 10 echo adder null // throws exception incorrect type passed adder getadder // would also throw exception default scalar type declarations follow weak typing principles example parameter type codice_24 php would allow integers also convertible numeric strings floats booleans passed function would convert however php 7 strict typing mode used disallows conversions function calls returns within file basic object-oriented programming functionality added php 3 improved php 4 allowed php gain abstraction making creative tasks easier programmers using language object handling completely rewritten php 5 expanding feature set enhancing performance previous versions php objects handled like value types drawback method code make heavy use php reference variables wanted modify object passed rather creating copy new approach objects referenced handle value php 5 introduced private protected member variables methods along abstract classes final classes abstract methods final methods also introduced standard way declaring constructors destructors similar object-oriented languages c++ standard exception handling model furthermore php 5 added interfaces allowed multiple interfaces implemented special interfaces allow objects interact runtime system objects implementing arrayaccess used array syntax objects implementing iterator iteratoraggregate used codice_6 language construct virtual table feature engine static variables bound name instead reference compile time developer creates copy object using reserved word codice_26 zend engine check whether codice_27 method defined call default codice_27 copy object properties codice_27 method defined responsible setting necessary properties created object convenience engine supply function imports properties source object programmer start by-value replica source object override properties need changed following basic example object-oriented programming php php abstract class user class student extends user class teacher extends user students teachers echo students \n foreach students student echo teachers \n foreach teachers teacher // output program // students // hello name alice learn computer science // hello name bob learn computer science // hello name charlie learn business studies // teachers // hello name dan teach computer science information security // hello name erin teach computer science 3d graphics programming // hello name frankie teach online marketing business studies e-commerce visibility php properties methods defined using keywords codice_30 codice_31 codice_32 default public var used codice_33 synonym codice_30 items declared codice_30 accessed everywhere codice_32 limits access inherited classes class defines item codice_31 limits visibility class defines item objects type access private protected members even though instance original complete widely used php implementation powered zend engine known simply php disambiguate implementations sometimes unofficially called zend php zend engine compiles php source code on-the-fly internal format execute thus works interpreter also reference implementation php php formal specification semantics zend php define semantics php due complex nuanced semantics php defined zend works difficult competing implementations offer complete compatibility php single-request-per-script-execution model fact zend engine interpreter leads inefficiency result various products developed help improve php performance order speed execution time compile php source code every time web page accessed php scripts also deployed php engine internal format using opcode cache works caching compiled form php script opcodes shared memory avoid overhead parsing compiling code every time script runs opcode cache zend opcache built php since version 5.5 another example widely used opcode cache alternative php cache apc available pecl extension zend php still popular implementation several implementations developed compilers support jit compilation hence offer performance benefits zend php expense lacking full php compatibility alternative implementations include following php free software released php license stipulates restriction use php makes php license incompatible general public license gpl zend license incompatible due advertising clause similar original bsd license php includes various free open-source libraries source distribution uses resulting php binary builds php fundamentally internet-aware system built-in modules accessing file transfer protocol ftp servers many database servers including postgresql mysql microsoft sql server sqlite embedded database ldap servers others numerous functions familiar c programmers stdio family available standard php builds php allows developers write extensions c add functionality php language php extensions compiled statically php loaded dynamically runtime numerous extensions written add support windows api process management unix-like operating systems multibyte strings unicode curl several popular compression formats php features made available extensions include integration irc dynamic generation images adobe flash content php data objects pdo abstraction layer used accessing databases even speech synthesis language core functions dealing strings arrays also implemented extensions php extension community library pecl project repository extensions php language projects zephir provide ability php extensions created high-level language compiled native php extensions approach instead writing php extensions directly c simplifies development extensions reduces time required programming testing php group consisted ten people thies c. arntzen stig bakken shane caraveo andi gutmans rasmus lerdorf sam ruby sascha schumann zeev suraski jim winstead andrei zmievski zend technologies provides php certification based php 5.5 exam programmers become certified php developers two primary ways adding support php web server – native web server module cgi executable php direct module interface called server application programming interface sapi supported many web servers including apache http server microsoft iis netscape defunct iplanet web servers omnihttpd support internet server application programming interface isapi microsoft web server module interface php module support web server always used common gateway interface cgi fastcgi processor case web server configured use php cgi executable process requests php files php-fpm fastcgi process manager alternative fastcgi implementation php bundled official php distribution since version 5.3.3 compared older fastcgi implementation contains additional features mostly useful heavily loaded web servers using php command-line scripting php command-line interface cli executable needed php supports cli server application programming interface sapi php 4.3.0 main focus sapi developing shell applications using php quite differences cli sapi sapis although share many behaviors php direct module interface called sapi different web servers case php 5 apache 2.0 windows provided form dll file called module among functions provides interface php web server implemented form server understands form known sapi different kinds sapis various web server extensions example addition listed sapis php language include common gateway interface cgi command-line interface cli php also used writing desktop graphical user interface gui applications using php-gtk extension php-gtk included official php distribution extension used php versions 5.1.0 newer common way installing php-gtk compiling source code php installed used cloud environments software development kits sdks provided using cloud-specific features example numerous configuration options supported affecting core php features extensions configuration file codice_40 searched different locations depending way php used configuration file split various sections configuration options also set within web server configuration php general-purpose scripting language especially suited server-side web development case php generally runs web server php code requested file executed php runtime usually create dynamic web page content dynamic images used websites elsewhere also used command-line scripting client-side graphical user interface gui applications php deployed web servers many operating systems platforms used many relational database management systems rdbms web hosting providers support php use clients available free charge php group provides complete source code users build customize extend use originally designed create dynamic web pages php focuses mainly server-side scripting similar server-side scripting languages provide dynamic content web server client microsoft asp.net sun microsystems javaserver pages codice_41 php also attracted development many software frameworks provide building blocks design structure promote rapid application development rad include prado cakephp symfony codeigniter laravel yii framework phalcon zend framework offering features similar web frameworks lamp architecture become popular web industry way deploying web applications php commonly used p bundle alongside linux apache mysql although p may also refer python perl mix three similar packages wamp mamp also available windows macos first letter standing respective operating system although php apache provided part macos base install users packages seek simpler installation mechanism easily kept date 20 million internet domains web services hosted servers php installed codice_42 recorded popular apache http server module php used server-side programming language 79.1 websites 83.5 previously language could determined web content management systems written php include mediawiki joomla ez publish ez platform silverstripe wordpress drupal moodle websites written php back-end and/or user-facing portion include facebook digg tumblr dailymotion slack specific advanced usage scenarios php offers well defined documented way writing custom extensions c c++ besides extending language form additional libraries extensions providing way improving execution speed critical room improvements using true compiled language php also offers well defined ways embedding software projects way php easily used internal scripting language another project also providing tight interfacing project specific internal data structures php received mixed reviews due lacking support multithreading core language level though using threads made possible pthreads pecl extension php used 240 million websites 39 sampled installed 2.1 million web servers command line interface php-cli two activex windows script host scripting engines php produced php 5 used web last updated security updates january 2019 php 5.6.40 2017 3 vulnerabilities listed national vulnerability database linked php historically 30 vulnerabilities listed since 1996 database linked php technical security flaws language core libraries frequent 22 2009 1 total although php applies 20 programs listed recognizing programmers make mistakes languages include taint checking automatically detect lack input validation induces many issues feature developed php inclusion release rejected several times past advanced protection patches suhosin hardening-patch especially designed web hosting environments historically old versions php configuration parameters default values runtime settings made php applications prone security issues among codice_43 codice_44 configuration directives best known latter made url parameters become php variables opening path serious security vulnerabilities allowing attacker set value uninitialized global variable interfere execution php script support magic quotes register globals settings deprecated php 5.3.0 removed php 5.4.0 another example potential runtime-settings vulnerability comes failing disable php execution example using codice_45 configuration directive directory uploaded files stored enabling result execution malicious code embedded within uploaded files best practice either locate image directory outside document root available web server serve via intermediary script disable php execution directory stores uploaded files also enabling dynamic loading php extensions via codice_46 configuration directive shared web hosting environment lead security issues implied type conversions result different values treated equal sometimes programmer intent lead security issues example result comparison codice_47 first compared value treated scientific notation value zero errors like resulted authentication vulnerabilities simple machines forum typo3 phpbb md5 password hashes compared recommended way use hash_equals timing attack safety codice_48 identity operator codice_49 results codice_50 2013 analysis 170,000 website defacements published zone-h frequently 53 used technique exploitation file inclusion vulnerability mostly related insecure usage php functions codice_51 codice_52 codice_53
node20:Wikipedia entry. Entry name: Red_Hat. Entry content: red hat red hat inc. american multinational software company providing open-source software products enterprise community founded 1993 red hat corporate headquarters raleigh north carolina offices worldwide became subsidiary ibm july 9 2019 red hat become associated large extent enterprise operating system red hat enterprise linux acquisition open-source enterprise middleware vendor jboss red hat also offers red hat virtualization rhv enterprise virtualization product red hat provides storage operating system platforms middleware applications management products support training consulting services red hat creates maintains contributes many free software projects acquired several proprietary software product codebases corporate mergers acquisitions released software open-source licenses red hat second largest corporate contributor linux kernel version 4.14 intel october 28 2018 ibm announced intent acquire red hat 34 billion acquisition closed july 9 2019 1993 bob young incorporated acc corporation catalog business sold linux unix software accessories 1994 marc ewing created linux distribution named red hat linux ewing worn red cornell university lacrosse hat given grandfather attending carnegie mellon university ewing released software october became known halloween release young bought ewing business 1995 two merged become red hat software young serving chief executive officer ceo red hat went public august 11 1999 achieving eighth-biggest first-day gain history wall street matthew szulik succeeded bob young ceo december year bob young went found online print demand self-publishing company lulu 2002 november 15 1999 red hat acquired cygnus solutions cygnus provided commercial support free software housed maintainers gnu software products gnu debugger gnu binutils one founders cygnus michael tiemann became chief technical officer red hat vice president open-source affairs later red hat acquired wirespeed c2net hell kitchen systems february 2000 infoworld awarded red hat fourth consecutive operating system product year award red hat linux 6.1 red hat acquired planning technologies inc 2001 aol iplanet directory certificate-server software 2004 red hat moved headquarters durham north carolina state university centennial campus raleigh north carolina february 2002 following month red hat introduced red hat linux advanced server later renamed red hat enterprise linux rhel dell ibm hp oracle corporation announced support platform december 2005 cio insight magazine conducted annual vendor value survey red hat ranked 1 value second year row red hat stock became part nasdaq-100 december 19 2005 red hat acquired open-source middleware provider jboss june 5 2006 jboss became division red hat september 18 2006 red hat released red hat application stack integrated jboss technology certified well-known software vendors december 12 2006 red hat stock moved trading nasdaq rhat new york stock exchange rht 2007 red hat acquired metamatrix made agreement exadel distribute software march 15 2007 red hat released red hat enterprise linux 5 june acquired mobicents march 13 2008 red hat acquired amentra provider systems integration services service-oriented architecture business process management systems development enterprise data services july 27 2009 red hat replaced cit group standard poor 500 stock index diversified index 500 leading companies u.s. economy reported major milestone linux december 15 2009 reported red hat pay settle class action lawsuit related restatement financial results july 2004 suit pending u.s. district court eastern district north carolina red hat reached proposed settlement agreement recorded one-time charge quarter ended nov. 30 january 10 2011 red hat announced would expand headquarters two phases adding 540 employees raleigh operation investing state north carolina offering incentives second phase involves expansion new technologies software virtualization technology cloud offerings august 25 2011 red hat announced would move 600 employees n.c. state centennial campus two progress plaza downtown ribbon cutting ceremony held june 24 2013 re-branded red hat headquarters 2012 red hat became first one-billion dollar open-source company reaching annual revenue fiscal year red hat passed 2 billion benchmark 2015. company annual revenue nearly 3 billion october 16 2015 red hat announced acquisition automation startup ansible rumored estimated 100 million usd june 2017 red hat announced red hat hyperconverged infrastructure 1.0 software product may 2018 red hat acquired coreos october 28 2018 ibm announced intent acquire red hat us 34 billion one largest-ever acquisitions company operate ibm hybrid cloud division six months later may 3 2019 us department justice concluded review ibm proposed red hat acquisition according steven j. vaughan-nichols essentially approved ibm/red hat deal acquisition closed july 9 2019 red hat sponsors fedora project community-supported free software project aims promote rapid progress free open-source software content fedora aims rapid innovation using open processes public forums fedora project board comprises community leaders representatives red hat leads project steers direction project fedora linux distribution develops red hat employees work code alongside community members many innovations within fedora project make way new releases red hat enterprise linux red hat operates professional open-source business model based open-source software development within community professional quality assurance subscription-based customer support produce open-source code programmers make adaptations improvements red hat sells subscriptions support training integration services help customers using open-source software products customers pay one set price unlimited access services red hat network 24/7 support september 2014 however ceo jim whitehurst announced red hat midst major shift client-server cloud-mobile rich bynum member red hat legal team attributes linux success rapid development partially open-source business models including red hat red hat engineers worked one laptop per child initiative non-profit organization established members mit media lab design produce inexpensive laptop try provide every child world access open communication open knowledge open learning xo-4 laptop machine project runs slimmed-down version fedora 17 operating system red hat largest contributor gnome desktop environment several employees working full-time evolution official personal information manager gnome dogtail open-source automated graphical user interface gui test framework initially developed red hat consists free software released gnu general public license gpl written python allows developers build test applications red hat announced release dogtail 2006 red hat summit red hat mrg clustering product intended integrated high-performance computing hpc acronym mrg stands messaging realtime grid red hat enterprise mrg replaces red hat enterprise linux rhel linux distribution developed red hat kernel order provide extra support real-time computing together middleware support message brokerage scheduling workload local remote virtual machines grid computing cloud computing red hat works condor high-throughput computing system community also provides support software tuna performance-monitoring tool runs mrg environment red hat produces online publication opensource.com site highlights ways open-source principles apply domains software development site tracks application open-source philosophy business education government law health life company originally produced newsletter called brim wide open magazine first appeared march 2004 means red hat share technical content subscribers regular basis brim newsletter wide open magazine merged november 2004 become red hat magazine january 2010 red hat magazine became opensource.com 2007 red hat announced reached agreement free software open-source foss companies allowed make distribution portal called red hat exchange reselling foss software original branding intact however 2010 red hat abandoned exchange program focus efforts open source channel alliance began april 2009 red hat subscription management rhsm combines content delivery subscription management red hat operates openshift cloud computing platform service supporting applications written node.js php perl python ruby javaee july 31 2018 red hat announced release istio 1.0 microservices management program used tandem kubernetes platform software purports provide traffic management service identity security policy enforcement telemetry services order streamline kubernetes use various fedora-based operating systems red hat brian redbeard harring described istio aiming control plane similar kubernetes control plane configuring series proxy servers get injected application components red hat markets version openstack helps manage data center manner cloud computing red hat cloudforms provides management virtual machines instances containers based vmware vsphere red hat virtualization microsoft hyper-v openstack amazon ec2 google cloud platform microsoft azure red hat openshift cloudforms based manageiq project red hat open sourced code manageiq acquisition manageiq 2012 red hat contributes several software developers work libreoffice free open-source office suite red hat employees working full-time free open-source software projects red hat products two full-time employees working free software radeon david airlie jerome glisse one full-time employee working free software nouveau graphic drivers another project aerogear open-source project brings security development expertise cross-platform enterprise mobile development red hat also organises open source day events multiple partners show open-source technologies subscribers access red hat major products acquisitions red hat programmers produced software programming-tools utilities supplement standard unix linux software red hat products found way specifically red hat operating environments via open-source channels wider community utilities include red hat website lists organization major involvements free open-source software projects community projects aegis red hat include 2000 red hat created subsidiary red hat india deliver red hat software support services indian customers colin tenwick vice president general manager red hat emea said red hat india opened response rapid adoption red hat linux subcontinent demand open-source solutions indian markets rising red hat wants play major role region red hat india worked local companies enable adoption open-source technology government education 2006 red hat india distribution network 70 channel partners spanning 27 cities across india red hat india channel partners included markcraft solutions ashtech infotech pvt ltd efensys technologies embee software allied digital services softcell technologies distributors include integra micro systems ingram micro red hat first major acquisition involved delix computer gmbh-linux div linux-based operating-system division delix computer german computer company july 30 1999 red hat acquired cygnus solutions company provided commercial support free software january 11 2000 – company largest acquisition michael tiemann co-founder cygnus served chief technical officer red hat acquisition red hat made acquisitions 2000 five cygnus solutions bluecurve wirespeed communications hell kitchen systems c2net june 5 2006 red hat acquired open-source middleware provider jboss integrated division red hat december 14 1998 red hat made first divestment intel netscape acquired undisclosed minority stakes company next year march 9 1999 compaq ibm dell novell acquired undisclosed minority stakes red hat
node21:Wikipedia entry. Entry name: MacPorts. Entry content: macports macports formerly called darwinports package management system simplifies installation software macos darwin operating systems open-source software project simplify installation open source software similar aim function fink bsd ports collections darwinports started 2002 part opendarwin project involvement number apple inc. employees including landon fuller kevin van vechten jordan hubbard macports allows installation number packages entering command sudo port install packagename terminal download compile necessary install requested software also installing required dependencies automatically installed packages updated command sudo port upgrade outdated official gui application called pallet also available version 1.0 released april 28 2005 december 2005 project reached milestone surpassing 3000 ports time package installation involved source code downloaded compiled end user machine version 2.0 released 2011 introduced support prebuilt binary archives default ports installed using prebuilt binary archive available built source otherwise macports 21,600 ports macports hosted mac os forge open source hosting service created maintained apple inc. third-party projects supported apple apple closed mac os forge 2016 project moved github best-effort support sourced community macports supports universal binaries powerpc intel-based versions mac os x migrating powerpc installation macports version intel mac requires reinstalling installed ports
node22:Wikipedia entry. Entry name: Gnash_(software). Entry content: gnash software gnash media player playing swf files gnash available standalone player desktop computers embedded devices well plugin several browsers part gnu project free open-source alternative adobe flash player developed gameswf project gnash first announced late 2005 software developer john gilmore project maintainer rob savoye main developer web site gnash located free software foundation gnu savannah project support server gnash supports swf v7 features swf v8 v9 however swf v10 supported writing free software flash player priority gnu project time prior launch gnash gnu project asked people assist gplflash project majority previous gplflash developers moved gnash project existing gplflash codebase refocused towards supporting embedded systems primary distribution terms gnash gnu gpl however since gnash started using codebase gameswf project public domain code developed gnash project might useful gameswf placed public domain adobe provides outdated version 11.2 official player linux ia-32 amd64 developer preview release binary-only form gnash however compiled executed many architectures including x86 arm mips powerpc also supports bsd-based operating systems early port risc os never macromedia/adobe flash support beyond flash 3 exist well early port beos flash support terminated version 4 development port amigaos 4.1 also recently begun port haiku operating system also exists gnash requires one agg cairo opengl rendering contrast gnu projects typically written c gnash written c++ programming language gameswf heritage gnash play swf files version 7 80 actionscript 2.0 goal gnash developers compatible possible proprietary player including behavior bad actionscript code however gnash offers special features available adobe player possibility extend actionscript classes via shared libraries sample extensions include mysql support file system access security reasons extension mechanism must compiled-in explicitly enabled via configuration files gnash supports playback flv videos allows playing flv files youtube myspace showmedo similar websites older files sound – newer files without playing sound flv support requires ffmpeg gstreamer installed system free-software programs mplayer vlc media player players windows based ffdshow directshow codecs play back flv format file specially downloaded piped version 0.8.8 released 22 august 2010 rob savoye announced gnash work youtube videos version 0.8.8 gpu support pushed ahead proprietary adobe flash player linux flash 10.2 came hardware acceleration built gnash still suffers high cpu usage flashblock plugin installed user turning flash support case-by-case needed basis youtube video controls full screen mode functioning although version 0.8.8 bug cause youtube display invalid parameters many popular flash games work gnash 0.8.8 cygnal gnash project flash media server-compatible audio video server handles negotiating copyright metadata exchange well streaming content need handle many thousands simultaneous network connection support running large gnu/linux clusters support handling multiple streams differing content well multicast stream single data source due patent issues surrounding mp3 fact flv on2 closed formats one main goals project support free codes free protocols primary way things optional support mp3 flv on2 vp6 vp7 playing existing flash content flv vp6 vp7 codecs included ffmpeg users use ffmpeg plugin gstreamer 0.10 use proprietary codecs gnash successfully run microsoft windows darwin os x irix solaris beos os/2 haiku gnash also run following 64-bit systems powerpc itanium ultrasparc amd64 gnash ported windows plugin works best firefox 1.0.4 newer work mozilla-based browser however newer browsers plugin may become unstable inoperative newer gnash binaries windows include plugin currently newer working gnash plugin windows project financially supported commercial company lulu.com july 2010 march 2012 lead developer reported donations barely enough pay hosting project web one problem project difficulty finding developers current developers never installed adobe flash player fear anyone ever installed adobe flash player time accepted agreement modify reverse engineer flash player therefore gnash project 6 active developers november 2010 generic clauses however may national anticompetition laws used normal software license agreements may 2 2012 court justice european union ruled case c-406/10 sas institute inc v world programming ltd functionality computer program covered copyright european union contractual provisions null void forbid observing studying testing computer program order reproduce behavior second program holds long source code object code copied
node23:Wikipedia entry. Entry name: Sun_Microsystems. Entry content: sun microsystems sun microsystems inc. american company sold computers computer components software information technology services created java programming language solaris operating system zfs network file system nfs sparc sun contributed significantly evolution several key computing technologies among unix risc processors thin client computing virtualized computing sun founded february 24 1982 height sun headquarters santa clara california part silicon valley former west campus agnews developmental center april 20 2009 announced oracle corporation would acquire sun 7.4 billion deal completed january 27 2010 sun products included computer servers workstations built risc-based sparc processor architecture well x86-based amd opteron intel xeon processors sun also developed storage systems suite software products including solaris operating system developer tools web infrastructure software identity management applications technologies included java platform nfs general sun proponent open systems particularly unix also major contributor open-source software evidenced 1 billion purchase 2008 mysql open-source relational database management system various times sun manufacturing facilities several locations worldwide including newark california hillsboro oregon linlithgow scotland however time company acquired oracle outsourced manufacturing responsibilities initial design became sun first unix workstation sun-1 conceived andy bechtolsheim graduate student stanford university palo alto california bechtolsheim originally designed sun workstation stanford university network communications project personal cad workstation designed around motorola 68000 processor advanced memory management unit mmu support unix operating system virtual memory support built first ones spare parts obtained stanford department computer science silicon valley supply houses february 24 1982 scott mcnealy andy bechtolsheim vinod khosla stanford graduate students founded sun microsystems bill joy berkeley primary developer berkeley software distribution bsd joined soon counted one original founders sun name derived initials stanford university network sun profitable first quarter july 1982 1983 sun known producing 68k-based systems high-quality graphics computers dec vax run 4.2bsd licensed computer design manufacturers typically used build multibus-based systems running unix unisoft sun initial public offering 1986 stock symbol sunw sun workstations later sun worldwide symbol changed 2007 java sun stated brand awareness associated java platform better represented company current strategy sun logo features four interleaved copies word sun form rotationally symmetric ambigram designed professor vaughan pratt also stanford initial version logo orange sides oriented horizontally vertically subsequently rotated stand one corner re-colored purple later blue dot-com bubble sun began making much money shares rose dramatically also began spending much hiring workers building genuine demand much web start-up companies anticipating business would never happen 2000 bubble burst sales sun important hardware division went free-fall customers closed shop auctioned high-end servers several quarters steep losses led executive departures rounds layoffs cost cutting december 2001 stock fell 1998 pre-bubble level 100 kept falling faster many tech companies year later dipped 10 tenth even 1990 bounced back 20 mid-2004 sun closed newark california factory consolidated manufacturing hillsboro oregon 2006 rest newark campus put market 2004 sun canceled two major processor projects emphasized high instruction-level parallelism operating frequency instead company chose concentrate processors optimized multi-threading multiprocessing ultrasparc t1 processor codenamed niagara company also announced collaboration fujitsu use japanese company processor chips mid-range high-end sun servers servers announced april 17 2007 m-series part sparc enterprise series february 2005 sun announced sun grid grid computing deployment offered utility computing services priced us 1 per cpu/hour processing per gb/month storage offering built upon existing 3,000-cpu server farm used internal r 10 years sun marketed able achieve 97 utilization august 2005 first commercial use grid announced financial risk simulations later launched first software service product january 2005 sun reported net profit 19 million fiscal 2005 second quarter first time three years followed net loss 9 million gaap basis third quarter 2005 reported april 14 2005 january 2007 sun reported net gaap profit 126 million revenue 3.337 billion fiscal second quarter shortly following news announced kohlberg kravis roberts kkr would invest 700 million company sun engineering groups bangalore beijing dublin grenoble hamburg prague st. petersburg tel aviv tokyo trondheim 2007–2008 sun posted revenue 13.8 billion 2 billion cash first-quarter 2008 losses 1.68 billion revenue fell 7 12.99 billion sun stock lost 80 value november 2007 november 2008 reducing company market value 3 billion falling sales large corporate clients sun announced plans lay 5,000 6,000 workers 15–18 work force expected save 700 million 800 million year result moves also taking 600 million charges may 11 2009 following shareholders held 100,000 common shares sun 9.50 per share offered oracle received amounts indicated acquisition closed first decade sun history company positioned products technical workstations competing successfully low-cost vendor workstation wars 1980s shifted hardware product line emphasize servers storage high-level telecom control systems operational support systems service predominantly used sun equipment sun originally used motorola 68000 family central processing units sun-1 sun-3 computer series sun-1 employed 68000 cpu sun-2 series 68010 sun-3 series based 68020 later sun-3x using 68030 1987 company began using sparc risc processor architecture design computer systems starting sun-4 line sparc initially 32-bit architecture sparc v7 introduction sparc v9 architecture 1995 added 64-bit extensions sun developed several generations sparc-based computer systems including sparcstation ultra sun blade series workstations sparcserver netra enterprise sun fire line servers early 1990s company began extend product line include large-scale symmetric multiprocessing servers starting four-processor sparcserver 600mp followed 8-processor sparcserver 1000 20-processor sparccenter 2000 based work done conjunction xerox parc 1995 company introduced sun ultra series machines equipped first 64-bit implementation sparc processors ultrasparc late 1990s transformation product line favor large 64-bit smp systems accelerated acquisition cray business systems division silicon graphics 32-bit 64-processor cray superserver 6400 related sparccenter led 64-bit sun enterprise 10000 high-end server otherwise known starfire september 2004 sun made available systems ultrasparc iv first multi-core sparc processor followed ultrasparc iv+ september 2005 revisions higher clock speeds 2007 cpus used powerful enterprise class high-end cc-numa servers developed sun sun fire e25k november 2005 sun launched ultrasparc t1 notable ability concurrently run 32 threads execution 8 processor cores intent drive efficient use cpu resources particular importance data centers increasing need reduce power air conditioning demands much comes heat generated cpus t1 followed 2007 ultrasparc t2 extended number threads per core 4 8 sun open sourced design specifications t1 t2 processors via opensparc project 2006 sun ventured blade server high density rack-mounted systems market sun blade distinct sun blade workstation april 2007 sun released sparc enterprise server products jointly designed sun fujitsu based fujitsu sparc64 vi later processors m-class sparc enterprise systems include high-end reliability availability features later t-series servers also badged sparc enterprise rather sun fire april 2008 sun released servers ultrasparc t2 plus smp capable version ultrasparc t2 available 2 4 processor configurations first coolthreads cpu multi-processor capability made possible build standard rack-mounted servers could simultaneously process massive 256 cpu threads hardware sun sparc enterprise t5440 considered record industry since 2010 development sun machines based sparc architecture including new sparc t-series servers sparc t3 t4 chips done part oracle corporation hardware division late 1980s sun also marketed intel 80386-based machine sun386i designed hybrid system running sunos time supporting dos applications remained market brief time follow-up 486i upgrade announced prototype units ever manufactured sun brief first foray x86 systems ended early 1990s decided concentrate sparc retire last motorola systems 386i products move dubbed mcnealy wood behind one arrowhead even sun kept hand x86 world release solaris pc compatibles began shipping 1993 1997 sun acquired diba inc. followed later acquisition cobalt networks 2000 aim building network appliances single function computers meant consumers sun also marketed network computer term popularized eventually trademarked oracle javastation diskless system designed run java applications although none business initiatives particularly successful cobalt purchase gave sun toehold return x86 hardware market 2002 sun introduced first general purpose x86 system lx50 based part previous cobalt system expertise also sun first system announced support linux well solaris 2003 sun announced strategic alliance amd produce x86/x64 servers based amd opteron processor followed shortly sun acquisition kealia startup founded original sun founder andy bechtolsheim focusing high-performance amd-based servers following year sun launched opteron-based sun fire v20z v40z servers java workstation w1100z w2100z workstations september 12 2005 sun unveiled new range opteron-based servers sun fire x2100 x4100 x4200 servers designed scratch team led bechtolsheim address heat power consumption issues commonly faced data centers july 2006 sun fire x4500 x4600 systems introduced extending line x64 systems support solaris also linux microsoft windows january 22 2007 sun announced broad strategic alliance intel intel endorsed solaris mainstream operating system mission critical unix xeon processor-based systems contributed engineering resources opensolaris sun began using intel xeon processor x64 server line starting sun blade x6250 server module introduced june 2007 may 5 2008 amd announced operating system research center osrc expanded focus include optimization sun opensolaris xvm virtualization products amd based processors although sun initially known hardware company software history began founding 1982 co-founder bill joy one leading unix developers time contributed vi editor c shell significant work developing tcp/ip bsd unix os sun later developed software java programming language acquired software staroffice virtualbox mysql sun used community-based open-source licensing major technologies support products open source technologies gnome-based desktop software called java desktop system originally code-named madhatter distributed solaris operating system one point linux sun supported java enterprise system middleware stack linux released source code solaris open-source common development distribution license via opensolaris community sun positioning includes commitment indemnify users software intellectual property disputes concerning software offers support services variety pricing bases including per-employee per-socket 2006 report prepared eu unu-merit stated sun largest corporate contributor open source movements world according report sun open source contributions exceed combined total next five largest commercial contributors sun best known unix systems reputation system stability consistent design philosophy sun first workstation shipped unisoft v7 unix later 1982 sun began providing sunos customized 4.1bsd unix operating system workstations late 1980s tapped sun help develop next release branded unix 1988 announced would purchase 20 stake sun unix system v release 4 svr4 jointly developed sun sun used svr4 foundation solaris 2.x became successor sunos 4.1.x later retrospectively named solaris 1.x mid-1990s ensuing unix wars largely subsided sold unix interests relationship two companies significantly reduced 1992 sun also sold interactive unix operating system acquired bought interactive systems corporation eastman kodak company popular unix variant pc platform major competitor market leader sco unix sun focus interactive unix diminished favor solaris sparc x86 systems dropped product 2001 sun dropped solaris 2.x version numbering scheme solaris 2.6 release 1997 following version branded solaris 7 first 64-bit release intended new ultrasparc cpus based sparc v9 architecture within next four years successors solaris 8 solaris 9 released 2000 2002 respectively following several years difficult competition loss server market share competitors linux-based systems sun began include linux part strategy 2002 sun supported red hat enterprise linux suse linux enterprise server x64 systems companies canonical ltd. wind river systems montavista also supported versions linux sun sparc-based systems 2004 cultivated reputation one microsoft vocal antagonists sun entered joint relationship resolving various legal entanglements two companies receiving us 1.95 billion settlement payments sun supported microsoft windows x64 systems announced collaborative agreements microsoft including plans support virtualization environments 2005 company released solaris 10 new version included large number enhancements operating system well novel features previously unseen industry solaris 10 update releases continued next 8 years last release sun microsystems solaris 10 10/09 following updates released oracle new license agreement final release solaris 10 1/13 previously sun offered separate variant solaris called trusted solaris included augmented security features multilevel security least privilege access model solaris 10 included many capabilities trusted solaris time initial release solaris 10 11/06 included solaris trusted extensions give remaining capabilities needed make functional successor trusted solaris releasing solaris 10 source code opened cddl free software license developed open contributing opensolaris community sxce used svr4 .pkg packaging supported opensolaris releases used ips following acquisition sun oracle opensolaris continued develop open illumos illumos distributions oracle corporation continued develop opensolaris next solaris release changing back license proprietary released oracle solaris 11 november 2011 java platform developed sun james gosling early 1990s objective allowing programs function regardless device used sparking slogan write run anywhere wora objective entirely achieved prompting riposte write debug everywhere java regarded largely hardware- operating system-independent java initially promoted platform client-side applets running inside web browsers early examples java applications hotjava web browser hotjava views suite however since java successful server side internet platform consists three major parts java programming language java virtual machine jvm several java application programming interfaces apis design java platform controlled vendor user community java community process jcp java object-oriented programming language since introduction late 1995 became one world popular programming languages java programs compiled byte code executed jvm regardless environment java apis provide extensive set library routines apis evolved standard edition java se provides basic infrastructure gui functionality enterprise edition java ee aimed large software companies implementing enterprise-class application servers micro edition java used build software devices limited resources mobile devices november 13 2006 sun announced would licensing java implementation gnu general public license released java compiler jvm time february 2009 sun entered battle microsoft adobe systems promoted rival platforms build software applications internet javafx development platform music video applications builds java programming language 1999 sun acquired german software company star division office suite staroffice sun later released openoffice.org gnu lgpl sissl sun industry standards source license openoffice.org supported microsoft office file formats though perfectly available many platforms primarily linux microsoft windows mac os x solaris used open source community principal differences staroffice openoffice.org staroffice supported sun available either single-user retail box kit per-user blocks licensing enterprise included wider range fonts document templates commercial quality spellchecker staroffice also contained commercially licensed functions add-ons openoffice.org either replaced open-source free variants present packages native support opendocument format 2007 sun announced sun xvm virtualization datacenter automation product suite commodity hardware sun also acquired virtualbox 2008 earlier virtualization technologies sun like dynamic system domains dynamic reconfiguration specifically designed high-end sparc servers logical domains supports ultrasparc t1/t2/t2 plus server platforms sun marketed sun ops center provisioning software datacenter automation client side sun offered virtual desktop solutions desktop environments applications could hosted datacenter users accessing environments wide range client devices including microsoft windows pcs sun ray virtual display clients apple macintoshes pdas combination supported devices variety networks supported lan wan public internet virtual desktop products included sun ray server software sun secure global desktop sun virtual desktop infrastructure sun acquired mysql ab developer mysql database 2008 us 1 billion ceo jonathan schwartz mentioned blog optimizing performance mysql one priorities acquisition february 2008 sun began publish results mysql performance optimization work sun contributed postgresql project java platform sun contributed supported java db sun offered software products software development infrastructure services many developed house others came acquisitions including tarantella waveset technologies seebeyond vaau sun acquired many netscape non-browser software products part deal involving netscape merger aol software products initially offered iplanet brand sun-netscape alliance ended re-branded sun one sun open network environment sun java system sun middleware product branded java enterprise system jes marketed web application serving communication calendaring directory identity management service-oriented architecture sun open esb software suites available free charge systems running solaris red hat enterprise linux hp-ux windows support available optionally sun developed data center management software products included solaris cluster high availability software grid management package called sun grid engine firewall software sunscreen network equipment providers telecommunications customers sun developed sun netra high-availability suite sun produced compilers development tools sun studio brand building developing solaris linux applications sun entered software service saas market zembly social cloud-based computing platform project kenai open-source project hosting service sun sold storage systems complement system offerings also made several storage-related acquisitions june 2 2005 sun announced would purchase storage technology corporation storagetek us 4.1 billion cash 37.00 per share deal completed august 2005 2006 sun introduced sun storagetek 5800 system first application-aware programmable storage solution 2008 sun contributed source code storagetek 5800 system bsd license sun announced sun open storage platform 2008 built open source technologies late 2008 sun announced sun storage 7000 unified storage systems codenamed amber road transparent placement data systems solid-state drives ssd conventional hard drives managed zfs take advantage speed ssds economy conventional hard disks storage products included sun fire x4500 storage server sam-qfs filesystem storage management software sun marketed sun constellation system high-performance computing hpc even introduction sun constellation system 2007 sun products use many top500 systems supercomputing centers sun hpc clustertools product set message passing interface mpi libraries tools running parallel jobs solaris hpc clusters beginning version 7.0 sun switched implementation mpi open mpi donated engineering resources open mpi project sun participant openmp language committee sun studio compilers tools implemented openmp specification shared memory parallelization 2006 sun built tsubame supercomputer june 2008 fastest supercomputer asia sun built ranger texas advanced computing center tacc 2007 ranger peak performance 500 tflops 6th powerful supercomputer top500 list november 2008 sun announced opensolaris distribution integrated sun hpc products others notable sun employees included john gilmore whitfield diffie radia perlman marc tremblay sun early advocate unix-based networked computing promoting tcp/ip especially nfs reflected company motto network computer coined john gage james gosling led team developed java programming language jon bosak led creation xml specification w3c sun staff published articles company blog site staff encouraged use site blog aspect work personal life restrictions placed staff commercially confidential material jonathan i. schwartz one first ceos large companies regularly blog postings frequently quoted analyzed press 2005 sun microsystems one first fortune 500 companies instituted formal social media program sun sold oracle corporation 2009 5.6b sun staff asked share anecdotes experiences sun web site containing videos stories photographs 27 years sun made available september 2 2009 october sun announced second round thousands employees laid blamed partially delays approval merger transaction completed early 2010 january 2011 oracle agreed pay 46 million settle charges submitted false claims us federal government agencies paid kickbacks systems integrators february 2011 sun former menlo park california campus sold announced would become headquarters facebook sprawling facility built around enclosed courtyard nicknamed sun quentin september 1 2011 sun india legally became part oracle delayed due legal issues indian court
node24:Wikipedia entry. Entry name: SQL. Entry content: sql sql s-q-l sequel structured query language domain-specific language used programming designed managing data held relational database management system rdbms stream processing relational data stream management system rdsms particularly useful handling structured data relations different entities/variables data sql offers two main advantages older read/write apis like isam vsam first introduced concept accessing many records one single command second eliminates need specify reach record e.g without index originally based upon relational algebra tuple relational calculus sql consists many types statements may informally classed sublanguages commonly data query language dql data definition language ddl data control language dcl data manipulation language dml scope sql includes data query data manipulation insert update delete data definition schema creation modification data access control although sql often described great extent declarative language 4gl also includes procedural elements sql one first commercial languages edgar f. codd relational model model described influential 1970 paper relational model data large shared data banks despite entirely adhering relational model described codd became widely used database language sql became standard american national standards institute ansi 1986 international organization standardization iso 1987 since standard revised include larger set features despite existence standards sql code completely portable among different database systems without adjustments sql initially developed ibm donald d. chamberlin raymond f. boyce learning relational model ted codd early 1970s version initially called sequel structured english query language designed manipulate retrieve data stored ibm original quasi-relational database management system system r group ibm san jose research laboratory developed 1970s chamberlin boyce first attempt relational database language square difficult use due subscript notation moving san jose research laboratory 1973 began work sequel acronym sequel later changed sql sequel trademark uk-based hawker siddeley dynamics engineering limited company testing sql customer test sites determine usefulness practicality system ibm began developing commercial products based system r prototype including system/38 sql/ds db2 commercially available 1979 1981 1983 respectively late 1970s relational software inc. oracle corporation saw potential concepts described codd chamberlin boyce developed sql-based rdbms aspirations selling u.s. navy central intelligence agency u.s. government agencies june 1979 relational software inc. introduced first commercially available implementation sql oracle v2 version2 vax computers 1986 ansi iso standard groups officially adopted standard database language sql language definition new versions standard published 1989 1992 1996 1999 2003 2006 2008 2011 recently 2016 sql deviates several ways theoretical foundation relational model tuple calculus model table set tuples sql tables query results lists rows row may occur multiple times order rows employed queries e.g limit clause critics argue sql replaced language strictly returns original foundation example see third manifesto however known proof exists uniqueness added sql least variation sql words quite possible sql fixed least improved regard industry may switch completely different query language obtain uniqueness debate remains open /math sql language subdivided several language elements including sql designed specific purpose query data contained relational database sql set-based declarative programming language imperative programming language like c basic however extensions standard sql add procedural programming language functionality control-of-flow constructs include addition standard sql/psm extensions proprietary sql extensions procedural object-oriented programmability available many sql platforms via dbms integration languages sql standard defines sql/jrt extensions sql routines types java programming language support java code sql databases sql server 2005 uses sqlclr sql server common language runtime host managed .net assemblies database prior versions sql server restricted unmanaged extended stored procedures primarily written c. postgresql lets users write functions wide variety languages—including perl python tcl javascript pl/v8 c. sql implementations incompatible vendors necessarily completely follow standards particular date time syntax string concatenation codice_1s comparison case sensitivity vary vendor vendor particular exceptions postgresql mimer sql strive standards compliance though postgresql adhere standard folding unquoted names done folding unquoted names lower case postgresql incompatible sql standard says unquoted names folded upper case thus codice_2 equivalent codice_3 codice_4 according standard popular implementations sql commonly omit support basic features standard sql codice_5 codice_6 data types obvious examples incidentally popular commercial proprietary sql dbmss oracle whose codice_5 behaves codice_8 lacks codice_6 type ms sql server 2008 version result sql code rarely ported database systems without modifications several reasons lack portability database systems sql adopted standard american national standards institute ansi 1986 sql-86 international organization standardization iso 1987 maintained iso/iec jtc 1 information technology subcommittee sc 32 data management interchange standard commonly denoted pattern iso/iec 9075-n yyyy part n title shortcut iso/iec 9075 iso/iec 9075 complemented iso/iec 13249 sql multimedia application packages sql/mm defines sql based interfaces packages widely spread applications like video audio spatial data 1996 national institute standards technology nist data management standards program certified sql dbms compliance sql standard vendors self-certify compliance products original standard declared official pronunciation sql initialism ess cue el regardless many english-speaking database professionals including donald chamberlin use acronym-like pronunciation sequel mirroring language pre-release development name sequel sql standard gone number revisions interested parties may purchase sql standards documents iso iec ansi draft sql:2008 freely available zip archive sql standard divided ten parts iso/iec 9075 complemented iso/iec 13249 sql multimedia application packages closely related separate standard developed committee defines interfaces packages based sql aim unified access typical database applications like text pictures data mining spatial data iso/iec 9075 also accompanied series technical reports published iso/iec tr 19075 8 parts technical reports explain justification usage features sql giving examples appropriate technical reports non-normative discrepancy 9075 text 9075 holds currently available 19075 technical reports distinction made alternatives sql language alternatives relational model proposed relational alternatives sql language see navigational database nosql alternatives relational model distributed relational database architecture drda designed work group within ibm period 1988 1994 drda enables network connected relational databases cooperate fulfill sql requests interactive user program issue sql statements local rdb receive tables data status indicators reply remote rdbs sql statements also compiled stored remote rdbs packages invoked package name important efficient operation application programs issue complex high-frequency queries especially important tables accessed located remote systems messages protocols structural components drda defined distributed data management architecture chamberlin 2012 paper discusses four historical criticisms sql early specifications support major features primary keys result sets could named sub-queries defined added 1992 sql controversial null three-value logic predicates evaluated nulls return logical value unknown rather true false features outer-join depend nulls null equivalent space null represents data row another popular criticism allows duplicate rows making integration languages python whose data types might make difficult accurately represent data difficult terms parsing absence modularity avoided declaring unique constraint one fields identifies uniquely row table constraint could also become primary key table similar sense object-relational impedance mismatch mismatch declarative sql language procedural languages sql typically embedded iso/iec information technology task force publishes publicly available standards including sql technical corrigenda corrections technical reports discussion documents published sql -- part 1 framework sql/framework formal sql standards available iso ansi fee informative use opposed strict standards compliance late drafts often suffice
node25:Wikipedia entry. Entry name: Jython. Entry content: jython jython implementation python programming language designed run java platform implementation formerly known jpython 1999 jython programs import use java class except standard modules jython programs use java classes instead python modules jython includes almost modules standard python programming language distribution lacking modules implemented originally c. example user interface jython could written swing awt swt jython compiles java bytecode intermediate language either demand statically jython initially created late 1997 replace c java performance-intensive code accessed python programs moving sourceforge october 2000 python software foundation awarded grant january 2005 jython 2.5 released june 2009 recent release jython 2.7.1 released 1 july 2017 compatible python 2.7 although jython implements python language specification differences incompatibilities cpython reference implementation python version 2.2 jython including standard library released python software foundation license v2 older versions covered jython 2.0 2.1 license jpython 1.1.x software license command line interpreter available apache software license
node26:Wikipedia entry. Entry name: ArchOne. Entry content: archone archone arch linux based operating system optimized acer aspire one netbooks usable pcs similar hardware archone preconfigured support hardware acer aspire one drivers network sound graphics special keys webcam active make hardware ready use immediately upon first boot archone uses rolling-release model upgrades archone three versions different desktop manager openbox edition gnome edition kde edition. application software including firefox google chrome skype keepassx hsoconnect gparted gimp openoffice.org vlc mplayer
node27:Wikipedia entry. Entry name: SPARCstation_20. Entry content: sparcstation 20 sparcstation 20 a.k.a ss20 codename kodiak discontinued sun microsystems workstation based supersparc hypersparc cpu last model sparcstation family sun pizza box computers superseded ultrasparc design 1995 sparcstation 20 dual 50 mhz mbus ports allow use faster cpus sparcstation 10 two dual-cpu modules updated firmware sparcstation 20 supports maximum 4 cpus fastest cpu produced sparcstation 20 200 mhz ross hypersparc prom sparcstation 20 determines cpu compatibility version 2.25r last prom release sparcstation 20 sparcstation 20 8 200-pin dsimm slots supports maximum 512 mb memory 64 mb modules memory modules sparcstation 20 compatible sparcstation 10 sun ultra 1 computers sun4m sun4u families physically incompatible simm slots found pc computers 2 8 simm slots wider others used non-memory peripherals like caching nvsimm video vsimm cards sparcstation 20 two internal sca bays external scsi connector two bays cd-rom floppy drives earlier revisions sparcstation20 case contain cd-rom floppy bays slightly shorter standard 3.5 bay regular devices intended pc compatible computers usually fit later revisions sparcstation20 sparcstation5 narrower slot floppy drive more-standard cd-rom fit scsi host controller integrated motherboard sparcstation 20 support ide devices limitation releases openboot prom sparcstation 20 prevents booting point disk past 2 gigabyte mark sparcstation 20 one integrated amd lance 10baset ethernet interface additional ethernet interfaces added sbus card sparcstation 20 built 13w3 video socket driven optional sx cg14 framebuffer built onto vsimm vsimm available 4mb 8mb capacity capable 1280x1024 8mb 1152x900 4mb 24-bit color two vsimms installed auxiliary video board must also installed provide second 13w3 video socket alternatively sbus cards used including zx leo turbo gx cg6 others sparcstation 20 integrated sound 4 standard 3.5 mm audio jacks headphones microphone line line sparcstation 20 uses battery-backed nvram module hold data system host id serial number mac address battery chip dies nvram module must replaced modified use external battery nvram must reprogrammed mac address host id optionally m48t08-100pc1 used sunos 4.1.3_u1b onwards solaris 2.3 9 linux debian gentoo suse 7.0 7.3 probably others miros bsd netbsd openbsd run sparcstation 20 certain cpu modules sun supersparc nextstep 3.3 openstep 4.x also run
node28:Wikipedia entry. Entry name: Theano_(software). Entry content: theano software theano python library optimizing compiler manipulating evaluating mathematical expressions especially matrix-valued ones theano computations expressed using numpy-esque syntax compiled run efficiently either cpu gpu architectures theano open source project primarily developed montreal institute learning algorithms mila université de montréal 28 september 2017 pascal lamblin posted message yoshua bengio head mila major development would cease 1.0 release due competing offerings strong industrial players theano 1.0.0 released 15 november 2017 following code original theano example defines computational graph 2 scalars b type double operation addition creates python function f actual computation import theano theano import tensor tensor.dscalar b tensor.dscalar c b f theano.function b c assert 4.0 == f 1.5 2.5",wikics,nc
"Classify the wikipedia page represented by node9 using its subgraph data (text attributes and connections) as follows.

node0: Word-sense disambiguation identifies word meanings in context using methods like machine learning, facing challenges in accuracy and sense inventory consistency.  
node1: Chris Valasek is an automotive security researcher known for exposing car hacking vulnerabilities, collaborating with Charlie Miller, and working at Cruise Automation (GM).  
node2: The Georgetown-IBM experiment (1954) demonstrated early machine translation, translating Russian sentences to English using limited rules and vocabulary on an IBM mainframe.  
node3: The Copy command duplicates files across directories in OSes, supporting text/binary modes, device interactions, and cross-platform availability.  
node4: Computational linguistics blends linguistics and computer science to model language for tasks like translation, speech recognition, and NLP, driven by interdisciplinary research.
node5: multinational tech giant IBM, founded 1911, pioneers in computing, patents, and innovations like mainframes; shifted businesses via acquisitions (e.g., Red Hat) and cloud focus.  
node6: semantic role labeling in NLP assigns sentence elements' roles (agent, recipient) using PropBank and Framenet, developed by Gildea and Jurafsky.  
node7: Translatewiki.net enables collaborative MediaWiki translations via web tools, supporting 60+ projects and 11,000 volunteers with machine-assisted features.  
node8: PC-based IBM mainframe emulators (e.g., XT/370, P/390) offer cost-effective mainframe alternatives, evolving from 1980s PCs to modern z/Architecture cards.  
node9: Hindi-Punjabi MT system uses lexicon lookup and preprocessing for direct translation, developed at Punjabi University, available online.  
node10: IBM WebSphere App Server for z/OS optimizes Java apps on mainframes, offering z-specific functions and request-level configurations in versions 7-9.
node11: SemEval evaluates computational semantic analysis systems, evolving from Senseval to include tasks like word sense disambiguation, semantic roles, and coreference resolution, now annual with diverse tracks.  
node12: MVS is IBM's mainframe OS supporting virtual storage, multiprocessing, and fault tolerance, evolving into z/OS, while facing IP disputes with competitors like Fujitsu and Hitachi.
node13: Machine translation history, methods (rule-based, statistical, neural), challenges (idioms, named entities), and milestones from 1950s to modern AI.  
node14: TDE encrypts database files at the file level for compliance (PCI DSS) by Microsoft, IBM, Oracle; uses encryption hierarchies and Hardware Security Modules for security.  
node15: Embedded SQL integrates SQL with host languages (C, Cobol) via preprocessors, enabling database queries in programs like Pro*C and supported in systems like DB2 and Sybase.  
node16: Reverso offers online translation tools, dictionaries, and language learning apps; acquired Fleex, faced criticism over antisemitic translations in 2018.  
node17: Automatic acquisition of sense-tagged corpora uses web data for word sense disambiguation, bypassing manual annotations through unsupervised learning and mining.  
node18: List of relational database management systems, including various commercial and open-source options.  
node19: ALPAC (1966) criticized early machine translation research, leading to reduced U.S. funding and emphasizing need for foundational linguistic studies.
node20: computational linguistics subfield developing methodologies for translating spoken language to text, using HMMs, neural networks, and deep learning, with applications in voice interfaces.  
node21: Oracle's clustering option for high availability and scalability, using Oracle Clusterware and cache fusion to coordinate multiple database instances accessing a shared database.  
node22: IBM's hardware register used with general-purpose registers to manage address spaces in MVS/ESA systems for data access control.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node0, node6>,<node0, node9>,<node0, node11>,<node0, node13>,<node0, node17>,<node0, node20>,<node1, node5>,<node2, node4>,<node2, node5>,<node2, node13>,<node2, node19>,<node3, node5>,<node4, node13>,<node4, node19>,<node4, node20>,<node5, node8>,<node5, node10>,<node5, node12>,<node5, node13>,<node5, node14>,<node5, node15>,<node5, node18>,<node5, node19>,<node5, node20>,<node5, node21>,<node5, node22>,<node6, node11>,<node7, node13>,<node9, node13>,<node11, node13>,<node11, node17>,<node13, node16>,<node13, node19>,<node13, node20>,<node19, node20>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",computational linguistics,"node0: Word-sense disambiguation identifies word meanings in context using methods like machine learning, facing challenges in accuracy and sense inventory consistency.  
node1: Chris Valasek is an automotive security researcher known for exposing car hacking vulnerabilities, collaborating with Charlie Miller, and working at Cruise Automation (GM).  
node2: The Georgetown-IBM experiment (1954) demonstrated early machine translation, translating Russian sentences to English using limited rules and vocabulary on an IBM mainframe.  
node3: The Copy command duplicates files across directories in OSes, supporting text/binary modes, device interactions, and cross-platform availability.  
node4: Computational linguistics blends linguistics and computer science to model language for tasks like translation, speech recognition, and NLP, driven by interdisciplinary research.
node5: multinational tech giant IBM, founded 1911, pioneers in computing, patents, and innovations like mainframes; shifted businesses via acquisitions (e.g., Red Hat) and cloud focus.  
node6: semantic role labeling in NLP assigns sentence elements' roles (agent, recipient) using PropBank and Framenet, developed by Gildea and Jurafsky.  
node7: Translatewiki.net enables collaborative MediaWiki translations via web tools, supporting 60+ projects and 11,000 volunteers with machine-assisted features.  
node8: PC-based IBM mainframe emulators (e.g., XT/370, P/390) offer cost-effective mainframe alternatives, evolving from 1980s PCs to modern z/Architecture cards.  
node9: Hindi-Punjabi MT system uses lexicon lookup and preprocessing for direct translation, developed at Punjabi University, available online.  
node10: IBM WebSphere App Server for z/OS optimizes Java apps on mainframes, offering z-specific functions and request-level configurations in versions 7-9.
node11: SemEval evaluates computational semantic analysis systems, evolving from Senseval to include tasks like word sense disambiguation, semantic roles, and coreference resolution, now annual with diverse tracks.  
node12: MVS is IBM's mainframe OS supporting virtual storage, multiprocessing, and fault tolerance, evolving into z/OS, while facing IP disputes with competitors like Fujitsu and Hitachi.
node13: Machine translation history, methods (rule-based, statistical, neural), challenges (idioms, named entities), and milestones from 1950s to modern AI.  
node14: TDE encrypts database files at the file level for compliance (PCI DSS) by Microsoft, IBM, Oracle; uses encryption hierarchies and Hardware Security Modules for security.  
node15: Embedded SQL integrates SQL with host languages (C, Cobol) via preprocessors, enabling database queries in programs like Pro*C and supported in systems like DB2 and Sybase.  
node16: Reverso offers online translation tools, dictionaries, and language learning apps; acquired Fleex, faced criticism over antisemitic translations in 2018.  
node17: Automatic acquisition of sense-tagged corpora uses web data for word sense disambiguation, bypassing manual annotations through unsupervised learning and mining.  
node18: List of relational database management systems, including various commercial and open-source options.  
node19: ALPAC (1966) criticized early machine translation research, leading to reduced U.S. funding and emphasizing need for foundational linguistic studies.
node20: computational linguistics subfield developing methodologies for translating spoken language to text, using HMMs, neural networks, and deep learning, with applications in voice interfaces.  
node21: Oracle's clustering option for high availability and scalability, using Oracle Clusterware and cache fusion to coordinate multiple database instances accessing a shared database.  
node22: IBM's hardware register used with general-purpose registers to manage address spaces in MVS/ESA systems for data access control.","node0:Wikipedia entry. Entry name: Word-sense_disambiguation. Entry content: word-sense disambiguation computational linguistics word-sense disambiguation wsd open problem concerned identifying sense word used sentence solution problem impacts computer-related writing discourse improving relevance search engines anaphora resolution coherence inference human brain quite proficient word-sense disambiguation natural language formed way requires much reflection neurologic reality words human language developed way reflects also helped shape innate ability provided brain neural networks computer science information technology enables long-term challenge develop ability computers natural language processing machine learning rich variety techniques researched dictionary-based methods use knowledge encoded lexical resources supervised machine learning methods classifier trained distinct word corpus manually sense-annotated examples completely unsupervised methods cluster occurrences words thereby inducing word senses among supervised learning approaches successful algorithms date accuracy current algorithms difficult state without host caveats english accuracy coarse-grained homograph level routinely 90 methods particular homographs achieving 96 finer-grained sense distinctions top accuracies 59.1 69.0 reported evaluation exercises semeval-2007 senseval-2 baseline accuracy simplest possible algorithm always choosing frequent sense 51.4 57 respectively disambiguation requires two strict inputs dictionary specify senses disambiguated corpus language data disambiguated methods training corpus language examples also required wsd task two variants lexical sample words task former comprises disambiguating occurrences small sample target words previously selected latter words piece running text need disambiguated latter deemed realistic form evaluation corpus expensive produce human annotators read definitions word sequence every time need make tagging judgement rather block instances target word give hint works consider three examples distinct senses exist written word bass sentences people understand english first sentence using word bass fish former sense second sentence word bass instrument used latter sense developing algorithms replicate human ability often difficult task exemplified implicit equivocation bass sound bass instrument wsd first formulated distinct computational task early days machine translation 1940s making one oldest problems computational linguistics warren weaver famous 1949 memorandum translation first introduced problem computational context early researchers understood significance difficulty wsd well fact bar-hillel 1960 used example argue wsd could solved electronic computer need general model world knowledge 1970s wsd subtask semantic interpretation systems developed within field artificial intelligence starting wilks preference semantics however since wsd systems time largely rule-based hand-coded prone knowledge acquisition bottleneck 1980s large-scale lexical resources oxford advanced learner dictionary current english oald became available hand-coding replaced knowledge automatically extracted resources disambiguation still knowledge-based dictionary-based 1990s statistical revolution swept computational linguistics wsd became paradigm problem apply supervised machine learning techniques 2000s saw supervised techniques reach plateau accuracy attention shifted coarser-grained senses domain adaptation semi-supervised unsupervised corpus-based systems combinations different methods return knowledge-based systems via graph-based methods still supervised systems continue perform best one problem word sense disambiguation deciding senses cases like word bass least senses obviously different cases however different senses closely related one meaning metaphorical metonymic extension another cases division words senses becomes much difficult different dictionaries thesauruses provide different divisions words senses one solution researchers used choose particular dictionary use set senses generally however research results using broad distinctions senses much better using narrow ones however given lack full-fledged coarse-grained sense inventory researchers continue work fine-grained wsd research field wsd performed using wordnet reference sense inventory english wordnet computational lexicon encodes concepts synonym sets e.g concept car encoded car auto automobile machine motorcar resources used disambiguation purposes include roget thesaurus wikipedia recently babelnet multilingual encyclopedic dictionary used multilingual wsd real test part-of-speech tagging sense tagging closely related potentially making constraints question whether tasks kept together decoupled still unanimously resolved recently scientists incline test things separately e.g senseval/semeval competitions parts speech provided input text disambiguate instructive compare word sense disambiguation problem problem part-of-speech tagging involve disambiguating tagging words senses parts speech however algorithms used one tend work well mainly part speech word primarily determined immediately adjacent one three words whereas sense word may determined words away success rate part-of-speech tagging algorithms present much higher wsd state-of-the art around 95 accuracy better compared less 75 accuracy word sense disambiguation supervised learning figures typical english may different languages another problem inter-judge variance wsd systems normally tested results task compared human however relatively easy assign parts speech text training people tag senses far difficult users memorize possible parts speech word take often impossible individuals memorize senses word take moreover humans agree task hand – give list senses sentences humans always agree word belongs sense human performance serves standard upper bound computer performance human performance however much better coarse-grained fine-grained distinctions research coarse-grained distinctions put test recent wsd evaluation exercises ai researchers like douglas lenat argue one parse meanings words without form common sense ontology linguistic issue called pragmatics example comparing two sentences properly identify senses words one must know common sense facts moreover sometimes common sense needed disambiguate words like pronouns case anaphoras cataphoras text task-independent sense inventory coherent concept task requires division word meaning senses relevant task example ambiguity 'mouse animal device relevant english-french machine translation relevant information retrieval opposite true 'river requires choice french fleuve 'flows sea rivière 'flows river also completely different algorithms might required different applications machine translation problem takes form target word selection senses words target language often correspond significant meaning distinctions source language bank could translate french banque —that 'financial bank rive —that 'edge river information retrieval sense inventory necessarily required enough know word used sense query retrieved document sense unimportant finally notion word sense slippery controversial people agree distinctions coarse-grained homograph level e.g. pen writing instrument enclosure go one level fine-grained polysemy disagreements arise example senseval-2 used fine-grained sense distinctions human annotators agreed 85 word occurrences word meaning principle infinitely variable context sensitive divide easily distinct discrete sub-meanings lexicographers frequently discover corpora loose overlapping word meanings standard conventional meanings extended modulated exploited bewildering variety ways art lexicography generalize corpus definitions evoke explain full range meaning word making seem like words well-behaved semantically however clear meaning distinctions applicable computational applications decisions lexicographers usually driven considerations 2009 task – named lexical substitution – proposed possible solution sense discreteness problem task consists providing substitute word context preserves meaning original word potentially substitutes chosen full lexicon target language thus overcoming discreteness natural language processing two main approaches wsd – deep approaches shallow approaches deep approaches presume access comprehensive body world knowledge knowledge go fishing type fish low frequency sounds songs low frequency sounds parts types fish used determine sense word bass used approaches successful practice mainly body knowledge exist computer-readable format outside limited domains however knowledge exist deep approaches would much accurate shallow approaches also long tradition computational linguistics trying approaches terms coded knowledge cases hard say clearly whether knowledge involved linguistic world knowledge first attempt margaret masterman colleagues cambridge language research unit england 1950s attempt used data punched-card version roget thesaurus numbered heads indicator topics looked repetitions text using set intersection algorithm successful strong relationships later work especially yarowsky machine learning optimisation thesaurus method 1990s shallow approaches n't try understand text consider surrounding words using information bass words sea fishing nearby probably fish sense bass words music song nearby probably music sense rules automatically derived computer using training corpus words tagged word senses approach theoretically powerful deep approaches gives superior results practice due computer limited world knowledge however confused sentences like dogs bark tree contains word bark near tree dogs four conventional approaches wsd almost approaches normally work defining window n content words around word disambiguated corpus statistically analyzing n surrounding words two shallow approaches used train disambiguate naïve bayes classifiers decision trees recent research kernel-based methods support vector machines shown superior performance supervised learning graph-based approaches also gained much attention research community currently achieve performance close state art lesk algorithm seminal dictionary-based method based hypothesis words used together text related relation observed definitions words senses two words disambiguated finding pair dictionary senses greatest word overlap dictionary definitions example disambiguating words pine cone definitions appropriate senses include words evergreen tree least one dictionary similar approach searches shortest path two words second word iteratively searched among definitions every semantic variant first word among definitions every semantic variant word previous definitions finally first word disambiguated selecting semantic variant minimizes distance first second word alternative use definitions consider general word-sense relatedness compute semantic similarity pair word senses based given lexical knowledge base wordnet graph-based methods reminiscent spreading activation research early days ai research applied success complex graph-based approaches shown perform almost well supervised methods even outperforming specific domains recently reported simple graph connectivity measures degree perform state-of-the-art wsd presence sufficiently rich lexical knowledge base also automatically transferring knowledge form semantic relations wikipedia wordnet shown boost simple knowledge-based methods enabling rival best supervised systems even outperform domain-specific setting use selectional preferences selectional restrictions also useful example knowing one typically cooks food one disambiguate word bass cooking basses i.e. musical instrument supervised methods based assumption context provide enough evidence disambiguate words hence common sense reasoning deemed unnecessary probably every machine learning algorithm going applied wsd including associated techniques feature selection parameter optimization ensemble learning support vector machines memory-based learning shown successful approaches date probably cope high-dimensionality feature space however supervised methods subject new knowledge acquisition bottleneck since rely substantial amounts manually sense-tagged corpora training laborious expensive create lack training data many word sense disambiguation algorithms use semi-supervised learning allows labeled unlabeled data yarowsky algorithm early example algorithm uses ‘ one sense per collocation ’ ‘ one sense per discourse ’ properties human languages word sense disambiguation observation words tend exhibit one sense given discourse given collocation bootstrapping approach starts small amount seed data word either manually tagged training examples small number surefire decision rules e.g. 'play context 'bass almost always indicates musical instrument seeds used train initial classifier using supervised method classifier used untagged portion corpus extract larger training set confident classifications included process repeats new classifier trained successively larger training corpus whole corpus consumed given maximum number iterations reached semi-supervised techniques use large quantities untagged corpora provide co-occurrence information supplements tagged corpora techniques potential help adaptation supervised models different domains also ambiguous word one language often translated different words second language depending sense word word-aligned bilingual corpora used infer cross-lingual sense distinctions kind semi-supervised system unsupervised learning greatest challenge wsd researchers underlying assumption similar senses occur similar contexts thus senses induced text clustering word occurrences using measure similarity context task referred word sense induction discrimination new occurrences word classified closest induced clusters/senses performance lower methods described comparisons difficult since senses induced must mapped known dictionary word senses mapping set dictionary senses desired cluster-based evaluations including measures entropy purity performed alternatively word sense induction methods tested compared within application instance shown word sense induction improves web search result clustering increasing quality result clusters degree diversification result lists hoped unsupervised learning overcome knowledge acquisition bottleneck dependent manual effort approaches may vary differently methods knowledge acquisition bottleneck perhaps major impediment solving wsd problem unsupervised methods rely knowledge word senses sparsely formulated dictionaries lexical databases supervised methods depend crucially existence manually annotated examples every word sense requisite far met handful words testing purposes done senseval exercises one promising trends wsd research using largest corpus ever accessible world wide web acquire lexical information automatically wsd traditionally understood intermediate language engineering technology could improve applications information retrieval ir case however reverse also true web search engines implement simple robust ir techniques successfully mine web information use wsd historic lack training data provoked appearance new algorithms techniques described automatic acquisition sense-tagged corpora knowledge fundamental component wsd knowledge sources provide data essential associate senses words vary corpora texts either unlabeled annotated word senses machine-readable dictionaries thesauri glossaries ontologies etc classified follows structured unstructured comparing evaluating different wsd systems extremely difficult different test sets sense inventories knowledge resources adopted organization specific evaluation campaigns systems assessed in-house often small-scale data sets order test one algorithm developers spend time annotate word occurrences comparing methods even corpus eligible different sense inventories order define common evaluation datasets procedures public evaluation campaigns organized senseval renamed semeval international word sense disambiguation competition held every three years since 1998 senseval-1 1998 senseval-2 2001 senseval-3 2004 successor semeval 2007 objective competition organize different lectures preparing hand-annotating corpus testing systems perform comparative evaluation wsd systems several kinds tasks including all-words lexical sample wsd different languages recently new tasks semantic role labeling gloss wsd lexical substitution etc systems submitted evaluation competitions usually integrate different techniques often combine supervised knowledge-based methods especially avoiding bad performance lack training examples recent years wsd evaluation task choices grown criterion evaluating wsd changed drastically depending variant wsd evaluation task enumerates variety wsd tasks technology evolves word sense disambiguation wsd tasks grows different flavors towards various research directions languages
node1:Wikipedia entry. Entry name: Chris_Valasek. Entry content: chris valasek chris valasek computer security researcher cruise automation self-driving car startup owned gm best known work automotive security research prior current employment worked ioactive coverity accuvant ibm valasek holds bachelors computer science university pittsburgh currently lives pittsburgh pennsylvania valasek publicly demonstrated many security vulnerabilities particular focus microsoft windows heap exploitation 2009 presentation practical windows xp/2003 heap exploitation blackhat presented novel approach gaining elevated access windows environment later research 2010 paper understanding low fragmentation heap allocation exploitation demonstrated ways circumvent vendor mitigations approaches outlined prior work since 2013 gained global notoriety research charlie miller automotive security research demonstrating number attack vectors ecus automotive control networks together miller produced survey remote attack surfaces then-current model year automobiles important first step establishing state art automotive security safety research https //www.usatoday.com/story/tech/talkingtech/2017/07/31/gms-self-driving-car-unit-cruise-hires-famous-car-hackers/525651001/
node2:Wikipedia entry. Entry name: Georgetown–IBM_experiment. Entry content: georgetown–ibm experiment georgetown–ibm experiment influential demonstration machine translation performed january 7 1954 developed jointly georgetown university ibm experiment involved completely automatic translation sixty russian sentences english conceived performed primarily order attract governmental public interest funding showing possibilities machine translation means fully featured system six grammar rules 250 lexical items vocabulary stems endings complete dictionary never fully shown extended one garvin article apart general topics system specialised domain organic chemistry translation carried using ibm 701 mainframe computer launched april 1953 sentences punched onto cards georgetown-ibm experiment best-known result mit conference june 1952 active researchers machine translation field invited conference duncan harkin us department defense suggested department would finance new machine translation project jerome weisner supported idea offered finance research laboratory electronics mit leon dostert invited project previous experience automatic correction translations back 'mechanical translation interpretation system strong impact nuremberg war crimes tribunal linguistics part demonstration carried part linguist paul garvin also good knowledge russian 60 romanized russian statements wide range political legal mathematical scientific topics entered machine computer operator knew russian resulting english translations appeared printer sentences translated carefully selected many operations demonstration fitted specific words sentences addition relational sentence analysis could recognize sentence structure approach mostly 'lexicographical based dictionary specific word connection specific rules steps well publicized journalists perceived success experiment encourage governments invest computational linguistics authors claimed within three five years machine translation could well solved problem however real progress much slower alpac report 1966 found ten years long research failed fulfill expectations funding reduced dramatically demonstration given widespread coverage foreign press small fraction journalists drew attention previous machine translation attempts
node3:Wikipedia entry. Entry name: Copy_(command). Entry content: copy command computing codice_1 command various operating systems command copies computer files one directory another generally command copies files one location another used make copies existing files also used combine concatenate multiple files target files destination defaults current working directory multiple source files indicated destination must directory error result command copy text mode binary mode text mode codice_1 stop reaches eof character binary mode files concatenated entirety ignoring eof characters files may copied devices example codice_3 outputs file screen console devices may copied destination file example codice_4 takes text typed console puts file stopping eof ctrl+z typed command available dec rt-11 rsx-11 os/8 intel isis-ii irmx 86 dec tops-10 tops-20 openvms metacomco tripos microware os-9 dos dr flexos ibm/toshiba 4690 os hp mpe/ix ibm os/2 microsoft windows reactos symbos dexos ms-dos available versions 1 later also available open-source ms-dos emulator dosbox dr dos 6.0 also includes implementation command equivalent unix command codice_5 cp/m command codice_6 advanced copy command called codice_7 command analogous stratus openvos codice_8 command copy letter.txt destination files may copied device files e.g codice_9 sends file printer lpt1 codice_10 would output stdout like codice_11 command note codice_12 concatenate files output codice_13 like codice_14 command also copy files different disk drives two command-line switches modify behaviour concatenating files
node4:Wikipedia entry. Entry name: Computational_linguistics. Entry content: computational linguistics computational linguistics interdisciplinary field concerned statistical rule-based modeling natural language computational perspective well study appropriate computational approaches linguistic questions traditionally computational linguistics performed computer scientists specialized application computers processing natural language today computational linguists often work members interdisciplinary teams include regular linguists experts target language computer scientists general computational linguistics draws upon involvement linguists computer scientists experts artificial intelligence mathematicians logicians philosophers cognitive scientists cognitive psychologists psycholinguists anthropologists neuroscientists among others computational linguistics theoretical applied components theoretical computational linguistics focuses issues theoretical linguistics cognitive science applied computational linguistics focuses practical outcome modeling human language use association computational linguistics defines computational linguistics computational linguistics often grouped within field artificial intelligence actually present development artificial intelligence computational linguistics originated efforts united states 1950s use computers automatically translate texts foreign languages particularly russian scientific journals english since computers make arithmetic calculations much faster accurately humans thought short matter time could also begin process language computational quantitative methods also used historically attempted reconstruction earlier forms modern languages subgrouping modern languages language families earlier methods lexicostatistics glottochronology proven premature inaccurate however recent interdisciplinary studies borrow concepts biological studies especially gene mapping proved produce sophisticated analytical tools trustworthy results machine translation also known mechanical translation failed yield accurate translations right away automated processing human languages recognized far complex originally assumed computational linguistics born name new field study devoted developing algorithms software intelligently processing language data term computational linguistics first coined david hays founding member association computational linguistics international committee computational linguistics artificial intelligence came existence 1960s field computational linguistics became sub-division artificial intelligence dealing human-level comprehension production natural languages order translate one language another observed one understand grammar languages including morphology grammar word forms syntax grammar sentence structure order understand syntax one also understand semantics lexicon 'vocabulary even something pragmatics language use thus started effort translate languages evolved entire discipline devoted understanding represent process natural languages using computers nowadays research within scope computational linguistics done computational linguistics departments computational linguistics laboratories computer science departments linguistics departments research field computational linguistics aims create working speech text processing systems others aim create system allowing human-machine interaction programs meant human-machine communication called conversational agents computational linguistics performed experts variety fields wide assortment departments research fields broach diverse range topics following sections discuss literature available across entire field broken four main area discourse developmental linguistics structural linguistics linguistic production linguistic comprehension language cognitive skill develops throughout life individual developmental process examined using number techniques computational approach one human language development provide constraints make harder apply computational method understanding instance language acquisition human children largely exposed positive evidence means linguistic development individual evidence correct form provided evidence correct insufficient information simple hypothesis testing procedure information complex language provides certain boundaries computational approach modeling language development acquisition individual attempts made model developmental process language acquisition children computational angle leading statistical grammars connectionist models work realm also proposed method explain evolution language history using models shown languages learned combination simple input presented incrementally child develops better memory longer attention span simultaneously posed reason long developmental period human children conclusions drawn strength artificial neural network project created ability infants develop language also modeled using robots order test linguistic theories enabled learn children might model created based affordance model mappings actions perceptions effects created linked spoken words crucially robots able acquire functioning word-to-meaning mappings without needing grammatical structure vastly simplifying learning process shedding light information furthers current understanding linguistic development important note information could empirically tested using computational approach understanding linguistic development individual within lifetime continually improved using neural networks learning robotic systems also important keep mind languages change develop time computational approaches understanding phenomenon unearthed interesting information using price equation pólya urn dynamics researchers created system predicts future linguistic evolution also gives insight evolutionary history modern-day languages modeling effort achieved computational linguistics would otherwise impossible clear understanding linguistic development humans well throughout evolutionary time fantastically improved advances computational linguistics ability model modify systems affords science ethical method testing hypotheses would otherwise intractable order create better computational models language understanding language structure crucial end english language meticulously studied using computational approaches better understand language works structural level one important pieces able study linguistic structure availability large linguistic corpora samples grants computational linguists raw data necessary run models gain better understanding underlying structures present vast amount data contained single language one cited english linguistic corpora penn treebank derived widely-different sources ibm computer manuals transcribed telephone conversations corpus contains 4.5 million words american english corpus primarily annotated using part-of-speech tagging syntactic bracketing yielded substantial empirical observations related language structure theoretical approaches structure languages also developed works allow computational linguistics framework within work hypotheses understanding language myriad ways one original theoretical theses internalization grammar structure language proposed two types models models rules patterns learned increase strength frequency encounter work also created question computational linguists answer infant learn specific non-normal grammar chomsky normal form without learning overgeneralized version getting stuck theoretical efforts like set direction research go early lifetime field study crucial growth field structural information languages allows discovery implementation similarity recognition pairs text utterances instance recently proven based structural information present patterns human discourse conceptual recurrence plots used model visualize trends data create reliable measures similarity natural textual utterances technique strong tool probing structure human discourse without computational approach question vastly complex information present discourse data would remained inaccessible scientists information regarding structural data language available english well languages japanese using computational methods japanese sentence corpora analyzed pattern log-normality found relation sentence length though exact cause lognormality remains unknown precisely sort intriguing information computational linguistics designed uncover information could lead important discoveries regarding underlying structure japanese could number effects understanding japanese language computational linguistics allows exciting additions scientific knowledge base happen quickly little room doubt recent days structural data languages available several languages world english language computational linguistics work progress sindhi language structure grammar domain sindhi language different languages world computational linguistics models english language suitable sindhi language viewing computational linguistics work sindhi language started properly developing methods algorithms linguistics tools https //sindhinlp.com/ machine learning models deep learning models since 2016. focus solve linguistics problems sindhi language work could lead important discoveries regarding underlying structure sindhi could number effects understanding sindhi language computational linguistics allows exciting additions scientific knowledge base happen quickly little room doubt without computational approach structure linguistic data much information available would still hidden vastness data within single language computational linguistics allows scientists parse huge amounts data reliably efficiently creating possibility discoveries unlike seen approaches production language equally complex information provides necessary skills fluent producer must say comprehension half problem communication half system produces language computational linguistics made interesting discoveries area famous paper published 1950 alan turing proposed possibility machines might one day ability think thought experiment might define concept thought machines proposed imitation test human subject two text-only conversations one fellow human another machine attempting respond like human turing proposes subject tell difference human machine may concluded machine capable thought today test known turing test remains influential idea area artificial intelligence projects still trying solve problem first started computational linguistics field first place however methods become refined clever consequently results generated computational linguists become enlightening effort improve computer translation several models compared including hidden markov models smoothing techniques specific refinements apply verb translation model found produce natural translations german french words refined alignment model first-order dependence fertility model 16 also provide efficient training algorithms models presented give scientists ability improve results type work specific computational linguistics applications could vastly improve understanding language produced comprehended computers work also done making computers produce language naturalistic manner using linguistic input humans algorithms constructed able modify system style production based factor linguistic input human abstract factors like politeness five main dimensions personality work takes computational approach via parameter estimation models categorize vast array linguistic styles see across individuals simplify computer work way making human-computer interaction much natural many earliest simplest models human-computer interaction eliza example involve text-based input user generate response computer method words typed user trigger computer recognize specific patterns reply accordingly process known keyword spotting recent technologies placed emphasis speech-based interactive systems systems siri ios operating system operate similar pattern-recognizing technique text-based systems former user input conducted speech recognition branch linguistics involves processing user speech sound waves interpreting acoustics language patterns order computer recognize input much focus modern computational linguistics comprehension proliferation internet abundance easily accessible written human language ability create program capable understanding human language would many broad exciting possibilities including improved search engines automated customer service online education early work comprehension included applying bayesian statistics task optical character recognition illustrated bledsoe browing 1959 large dictionary possible letters generated learning example letters probability one learned examples matched new input combined make final decision attempts applying bayesian statistics language analysis included work mosteller wallace 1963 analysis words used federalist papers used attempt determine authorship concluding madison likely authored majority papers 1971 terry winograd developed early natural language processing engine capable interpreting naturally written commands within simple rule governed environment primary language parsing program project called shrdlu capable carrying somewhat natural conversation user giving commands within scope toy environment designed task environment consisted different shaped colored blocks shrdlu capable interpreting commands find block taller one holding put box asking questions n't understand pyramid mean response user input impressive kind natural language processing proven much difficult outside limited scope toy environment similarly project developed nasa called lunar designed provide answers naturally written questions geological analysis lunar rocks returned apollo missions kinds problems referred question answering initial attempts understanding spoken language based work done 1960s 1970s signal modeling unknown signal analyzed look patterns make predictions based history initial somewhat successful approach applying kind signal modeling language achieved use hidden markov models detailed rabiner 1989 approach attempts determine probabilities arbitrary number models could used generating speech well modeling probabilities various words generated possible models similar approaches employed early speech recognition attempts starting late 70s ibm using word/part-of-speech pair probabilities recently kinds statistical approaches applied difficult tasks topic identification using bayesian parameter estimation infer topic probabilities text documents modern computational linguistics often combination studies computer science programming math particularly statistics language structures natural language processing combined fields often lead development systems recognize speech perform task based speech examples include speech recognition software apple siri feature spellcheck tools speech synthesis programs often used demonstrate pronunciation help disabled machine translation programs websites google translate computational linguistics especially helpful situations involving social media internet example filters chatrooms website searches require computational linguistics chat operators often use filters identify certain words phrases deem inappropriate users submit another example using filters websites schools use filters websites certain keywords blocked children view also many programs parents use parental controls put content filters place computational linguists also develop programs group organize content social media mining example twitter programs group tweets subject keywords computational linguistics also used document retrieval clustering online search documents websites retrieved based frequency unique labels related typed search engine instance search red large four-wheeled vehicle intention finding pictures red truck search engine still find information desired matching words four-wheeled car computational linguistics divided major areas depending upon medium language processed whether spoken textual upon task performed whether analyzing language recognition synthesizing language generation speech recognition speech synthesis deal spoken language understood created using computers parsing generation sub-divisions computational linguistics dealing respectively taking language apart putting together machine translation remains sub-division computational linguistics dealing computers translate languages possibility automatic language translation however yet realized remains notoriously hard branch computational linguistics areas research studied computational linguistics include subject computational linguistics recurring impact popular culture
node5:Wikipedia entry. Entry name: IBM. Entry content: ibm international business machines corporation ibm american multinational information technology company headquartered armonk new york operations 170 countries company began 1911 founded endicott new york computing-tabulating-recording company ctr renamed international business machines 1924 ibm produces sells computer hardware middleware software provides hosting consulting services areas ranging mainframe computers nanotechnology ibm also major research organization holding record u.s. patents generated business 26 consecutive years inventions ibm include automated teller machine atm floppy disk hard disk drive magnetic stripe card relational database sql programming language upc barcode dynamic random-access memory dram ibm mainframe exemplified system/360 dominant computing platform 1960s 1970s ibm continually shifted business operations focusing higher-value profitable markets includes spinning printer manufacturer lexmark 1991 sale personal computer thinkpad/thinkcentre x86-based server businesses lenovo 2005 2014 respectively acquiring companies pwc consulting 2002 spss 2009 weather company 2016 red hat 2019 also 2015 ibm announced would go fabless continuing design semiconductors offloading manufacturing globalfoundries nicknamed big blue ibm one 30 companies included dow jones industrial average one world largest employers 380,000 employees known ibmers least 70 ibmers based outside united states country largest number ibmers india ibm employees awarded five nobel prizes six turing awards ten national medals technology usa five national medals science usa 1880s technologies emerged would ultimately form core international business machines ibm julius e. pitrap patented computing scale 1885 alexander dey invented dial recorder 1888 herman hollerith 1860–1929 patented electric tabulating machine willard bundy invented time clock record worker arrival departure time paper tape 1889 june 16 1911 four companies amalgamated new york state charles ranlett flint forming fifth company computing-tabulating-recording company ctr based endicott new york five companies 1,300 employees offices plants endicott binghamton new york dayton ohio detroit michigan washington d.c. toronto manufactured machinery sale lease ranging commercial scales industrial time recorders meat cheese slicers tabulators punched cards thomas j. watson sr. fired national cash register company john henry patterson called flint 1914 offered position ctr watson joined ctr general manager 11 months later made president court cases relating time ncr resolved learned patterson pioneering business practices watson proceeded put stamp ncr onto ctr companies implemented sales conventions generous sales incentives focus customer service insistence well-groomed dark-suited salesmen evangelical fervor instilling company pride loyalty every worker favorite slogan think became mantra company employees watson first four years revenues reached 9 million company operations expanded europe south america asia australia watson never liked clumsy hyphenated name computing-tabulating-recording company february 14 1924 chose replace expansive title international business machines 1933 subsidiaries merged one company ibm 1937 ibm tabulating equipment enabled organizations process unprecedented amounts data clients including u.s. government first effort maintain employment records 26 million people pursuant social security act tracking persecuted groups hitler third reich largely german subsidiary dehomag 1949 thomas watson sr. created ibm world trade corporation subsidiary ibm focused foreign operations 1952 stepped almost 40 years company helm son thomas watson jr. named president 1956 company demonstrated first practical example artificial intelligence arthur l. samuel ibm poughkeepsie new york laboratory programmed ibm 704 merely play checkers learn experience 1957 fortran scientific programming language developed 1961 ibm developed sabre reservation system american airlines introduced highly successful selectric typewriter 1963 ibm employees computers helped nasa track orbital flights mercury astronauts year later moved corporate headquarters new york city armonk new york latter half 1960s saw ibm continue support space exploration participating 1965 gemini flights 1966 saturn flights 1969 lunar mission april 7 1964 ibm announced first computer system family ibm system/360 spanned complete range commercial scientific applications large small allowing companies first time upgrade models greater computing capability without rewrite applications followed ibm system/370 1970 together 360 370 made ibm mainframe dominant mainframe computer dominant computing platform industry throughout period early 1980s operating systems ran os/vs1 mvs middleware built top cics transaction processing monitor near-monopoly-level hold computer industry became almost synonymous ibm products due marketshare 1974 ibm engineer george j. laurer developed universal product code ibm world bank first introduced financial swaps public 1981 entered swap agreement ibm pc originally designated ibm 5150 introduced 1981 soon became industry standard 1991 ibm spun printer manufacturing new business called lexmark 1993 ibm posted us 8 billion loss – time biggest american corporate history lou gerstner hired ceo rjr nabisco turn company around 2002 ibm acquired pwc consulting 2003 initiated project redefine company values hosting three-day online discussion key business issues 50,000 employees result three values dedication every client success innovation matters—for company world trust personal responsibility relationships 2005 company sold personal computer business chinese technology company lenovo 2009 acquired software company spss inc. later 2009 ibm blue gene supercomputing program awarded national medal technology innovation u.s. president barack obama 2011 ibm gained worldwide attention artificial intelligence program watson exhibited jeopardy game-show champions ken jennings brad rutter company also celebrated 100th anniversary year june 16 2012 ibm announced agreed buy kenexa year later also acquired softlayer technologies web hosting service deal worth around 2 billion 2014 ibm announced would sell x86 server division lenovo 2.1 billion also year ibm began announcing several major partnerships companies including apple inc. twitter facebook tencent cisco underarmour box microsoft vmware csc macy sesame workshop parent company sesame street salesforce.com 2015 ibm announced three major acquisitions merge healthcare 1 billion data storage vendor cleversafe digital assets weather company including weather.com weather channel mobile app also year ibmers created film boy atom first molecule movie tell story 2016 ibm acquired video conferencing service ustream formed new cloud video unit april 2016 posted 14-year low quarterly sales following month groupon sued ibm accusing patent infringement two months ibm accused groupon patent infringement separate lawsuit 2015 ibm bought digital part weather company october 2018 ibm announced intention acquire red hat 34 billion acquisition completed july 9 2019 june 2019 ibm cut 2,000 jobs ibm headquartered armonk new york community north midtown manhattan principal building referred chq glass stone edifice parcel amid 432-acre former apple orchard company purchased mid-1950s two ibm buildings within walking distance chq north castle office previously served ibm headquarters louis v. gerstner jr. center learning formerly known ibm learning center ilc resort hotel training center 182 guest rooms 31 meeting rooms various amenities ibm operates 174 countries mobility centers smaller markets areas major campuses larger ones new york city ibm several offices besides chq including ibm watson headquarters astor place manhattan outside new york major campuses united states include austin texas research triangle park raleigh-durham north carolina rochester minnesota silicon valley california ibm real estate holdings varied globally diverse towers occupied ibm include 1250 rené-lévesque montreal canada tour descartes paris france one atlantic center atlanta georgia usa beijing china ibm occupies pangu plaza city seventh tallest building overlooking beijing national stadium bird nest home 2008 summer olympics ibm india private limited indian subsidiary ibm headquartered bengaluru karnataka facilities bengaluru ahmedabad delhi kolkata mumbai chennai pune gurugram noida bhubaneshwar coimbatore visakhapatnam hyderabad notable buildings include ibm rome software lab rome italy hursley house winchester uk 330 north wabash chicago illinois united states cambridge scientific center cambridge massachusetts united states ibm toronto software lab toronto canada ibm building johannesburg johannesburg south africa ibm building seattle seattle washington united states ibm hakozaki facility tokyo japan ibm yamato facility yamato japan ibm canada head office building ontario canada watson iot headquarters munich germany defunct ibm campuses include ibm somers office complex somers new york company contributions industrial architecture design include works eero saarinen ludwig mies van der rohe i.m pei van der rohe building chicago recognized 1990 honor award national building museum ibm recognized one top 20 best workplaces commuters united states environmental protection agency epa 2005 recognized fortune 500 companies provided employees excellent commuter benefits help reduce traffic air pollution 2004 concerns raised related ibm contribution early days pollution original location endicott new york fiscal year 2017 ibm reported earnings us 5.7 billion annual revenue us 79.1 billion decline 1.0 previous fiscal cycle ibm shares traded 125 per share market capitalization valued us 113.9 billion september 2018 ibm ranked 34 2018 fortune 500 rankings largest united states corporations total revenue ibm large diverse portfolio products services offerings fall categories cloud computing artificial intelligence commerce data analytics internet things iot infrastructure mobile security ibm cloud includes infrastructure service iaas software service saas platform service paas offered public private hybrid cloud delivery models instance ibm bluemix paas enables developers quickly create complex websites pay-as-you-go model ibm softlayer dedicated server managed hosting cloud computing provider 2011 reported hosting 81,000 servers 26,000 customers ibm also provides cloud data encryption services icdes using cryptographic splitting secure customer data ibm also hosts industry-wide cloud computing mobile technologies conference interconnect year hardware designed ibm categories include ibm power microprocessors employed inside many console gaming systems including xbox 360 playstation 3 nintendo wii u. ibm secure blue encryption hardware built microprocessors 2014 company revealed truenorth neuromorphic cmos integrated circuit announced 3 billion investment following five years design neural chip mimics human brain 10 billion neurons 100 trillion synapses uses 1 kilowatt power 2016 company launched all-flash arrays designed small midsized companies includes software data compression provisioning snapshots across various systems outsourcing also represents major service provided ibm 40 data centers worldwide alphaworks ibm source emerging software technologies spss software package used statistical analysis ibm kenexa suite provides employment retention solutions includes brassring applicant tracking system used thousands companies recruiting ibm also owns weather company provides weather forecasting includes weather.com weather underground smarter planet initiative seeks achieve economic growth near-term efficiency sustainable development societal progress targeting opportunities smart grids water management systems solutions traffic congestion greener buildings services provisions include redbooks publicly available online books best practices ibm products developerworks website software developers professionals how-to articles tutorials well software downloads code samples discussion forums podcasts blogs wikis resources developers technical professionals ibm watson technology platform uses natural language processing machine learning reveal insights large amounts unstructured data watson debuted 2011 american game-show jeopardy competed champions ken jennings brad rutter three-game tournament watson since applied business healthcare developers universities example ibm partnered memorial sloan kettering cancer center assist considering treatment options oncology patients melanoma screenings also several companies begun using watson call centers either replacing assisting customer service agents january 2019 ibm introduced first commercial quantum computer ibm q system one ibm also provides infrastructure new york city police department ibm cognos analytics perform data visualizations compstat crime data research part ibm since founding organized efforts trace roots back 1945 watson scientific computing laboratory founded columbia university new york city converting renovated fraternity house manhattan west side ibm first laboratory ibm research constitutes largest industrial research organization world 12 labs 6 continents ibm research headquartered thomas j. watson research center new york facilities include almaden lab california austin lab texas australia lab melbourne brazil lab são paulo rio de janeiro china lab beijing shanghai ireland lab dublin haifa lab israel india lab delhi bangalore tokyo lab zurich lab africa lab nairobi terms investment ibm r expenditure totals several billion dollars year 2012 expenditure approximately us 6.9 billion recent allocations included 1 billion create business unit watson 2014 3 billion create next-gen semiconductor along 4 billion towards growing company strategic imperatives cloud analytics mobile security social 2015 ibm leading proponent open source initiative began supporting linux 1998 company invests billions dollars services software based linux ibm linux technology center includes 300 linux kernel developers ibm also released code different open source licenses platform-independent software framework eclipse worth approximately us 40 million time donation three-sentence international components unicode icu license java-based relational database management system rdbms apache derby ibm open source involvement trouble-free however see sco v. ibm famous inventions developments ibm include automated teller machine atm dynamic random access memory dram electronic keypunch financial swap floppy disk hard disk drive magnetic stripe card relational database risc sabre airline reservation system sql universal product code upc bar code virtual machine additionally 1990 company scientists used scanning tunneling microscope arrange 35 individual xenon atoms spell company acronym marking first structure assembled one atom time major part ibm research generation patents since first patent traffic signaling device ibm one world prolific patent sources 2018 company holds record patents generated business marking 25 consecutive years achievement five ibmers received nobel prize leo esaki thomas j. watson research center yorktown heights n.y. 1973 work semiconductors gerd binnig heinrich rohrer zurich research center 1986 scanning tunneling microscope georg bednorz alex müller also zurich 1987 research superconductivity several ibmers also turing award including first female recipient frances e. allen current research includes collaboration university michigan see computers act academic advisor undergraduate computer science engineering students university partnership combining cloud internet things iot platforms make interoperable provide developers easier tools company also involved research advanced algorithms machine learning decision-making processes end company recently released analysis tool algorithms make decisions scanning biases automated decision-making ibm nicknamed big blue part due blue logo color scheme also partially since ibm de facto dress code white shirts blue suits company logo undergone several changes years current 8-bar logo designed 1972 graphic designer paul rand general replacement 13-bar logo since period photocopiers render large areas well aside logo ibm used helvetica corporate typeface 50 years replaced 2017 custom-designed ibm plex ibm valuable brand result 100 years operations marketing campaigns since 1996 ibm exclusive technology partner masters tournament one four major championships professional golf ibm creating first masters.org 1996 first course cam 1998 first iphone app live streaming 2009 first-ever live 4k ultra high definition feed united states major sporting event 2016 result ibm ceo ginni rometty became third female member master governing body augusta national golf club ibm also major sponsor professional tennis engagements u.s. open wimbledon australian open french open company also sponsored olympic games 1960–2000 national football league 2003–2012 2012 ibm brand valued 75.5 billion ranked interbrand second-best brand worldwide year also ranked top company leaders fortune number two green company u.s. newsweek second-most respected company barron fifth-most admired company fortune 18th-most innovative company fast company number one technology consulting number two outsourcing vault 2015 forbes ranked ibm fifth-most valuable brand january 1969 last day johnson administration united states department justice antitrust division filed suit ibm alleging company engaged monopolistic business practices talks ibm would agree settlement consent decree two sides unable come terms case went trial 1975 legal matter justice department estimated would take 60 days three years millions pages evidence justice department decided drop suit new york times article states ibm never publicly disclosed much spent defending suit estimated tens millions dollars ibm one largest workforces world employees big blue referred ibmers company among first corporations provide group life insurance 1934 survivor benefits 1935 training women 1935 paid vacations 1937 training disabled people 1942 ibm hired first black salesperson 1946 1952 ceo thomas j. watson jr. published company first written equal opportunity policy letter one year u.s. supreme court decision brown vs. board education 11 years civil rights act 1964 human rights campaign rated ibm 100 index gay-friendliness every year since 2003 ibm providing same-sex partners employees health benefits anti-discrimination clause additionally 2005 ibm became first major company world commit formally use genetic information employment decisions 2017 ibm named working mother 100 best companies list 32nd consecutive year ibm several leadership development recognition programs recognize employee potential achievements early-career high potential employees ibm sponsors leadership development programs discipline e.g. general management gmldp human resources hrldp finance fldp year company also selects 500 ibmers ibm corporate service corps csc described corporate equivalent peace corps gives top employees month humanitarian work abroad certain interns ibm also program called extreme blue partners top business technical students develop high-value technology compete present business case company ceo internship end company also various designations exceptional individual contributors senior technical staff member stsm research staff member rsm distinguished engineer de distinguished designer dd prolific inventors also achieve patent plateaus earn designation master inventor company prestigious designation ibm fellow since 1963 company names handful fellows year based technical achievement programs recognize years service quarter century club established 1924 sellers eligible join hundred percent club composed ibm salesmen meet quotas convened atlantic city new jersey year company also selects 1,000 ibmers annually award best ibm award includes all-expenses paid trip awards ceremony exotic location ibm culture evolved significantly century operations early days dark gray suit white shirt sincere tie constituted public uniform ibm employees ibm management transformation 1990s ceo louis v. gerstner jr. relaxed codes normalizing dress behavior ibm employees company culture also given different plays company acronym ibm saying stands 've moved due relocations layoffs others saying stands 'm pursuant prevalent work-from-anywhere norm others saying stands 'm mentored due company open door policy encouragement mentoring levels terms labor relations company traditionally resisted labor union organizing although unions represent ibm workers outside united states japan ibm employees also american football team complete pro stadium cheerleaders televised games competing japanese x-league big blue 2015 ibm started giving employees option choosing either pc mac primary work device resulting ibm becoming world largest mac shop 2016 ibm eliminated forced rankings changed annual performance review system focus frequent feedback coaching skills development many ibmers also achieved notability outside work leaving ibm business former ibm employees include apple inc. ceo tim cook former eds ceo politician ross perot microsoft chairman john w. thompson sap co-founder hasso plattner gartner founder gideon gartner advanced micro devices amd ceo lisa su former citizens financial group ceo ellen alemany former yahoo chairman alfred amoroso former ceo c. michael armstrong former xerox corporation ceos david t. kearns g. richard thoman former fair isaac corporation ceo mark n. greene citrix systems co-founder ed iacobucci asos.com chairman brian mcbride former lenovo ceo steve ward former teradata ceo kenneth simonds government alumna patricia roberts harris served united states secretary housing urban development first african american woman serve united states cabinet samuel k. skinner served u.s. secretary transportation white house chief staff alumni also include u.s senators mack mattingly thom tillis wisconsin governor scott walker former u.s ambassadors vincent obsitnik slovakia arthur k. watson france thomas watson jr. soviet union former u.s representatives todd akin glenn andrews robert garcia katherine harris amo houghton jim ross lightfoot thomas j. manton donald w. riegle jr. ed zschau others nasa astronaut michael j. massimino canadian astronaut governor-general julie payette harvey mudd college president maria klawe western governors university president emeritus robert mendenhall former university kentucky president lee t. todd jr. nfl referee bill carollo former rangers f.c chairman john mcclelland recipient nobel prize literature j. m. coetzee thomas watson jr. also served 11th national president boy scouts america company 14 member board directors responsible overall corporate management includes ceos american express ford motor company boeing dow chemical johnson johnson cemex well president rensselaer polytechnic institute 2011 ibm became first technology company warren buffett holding company berkshire hathaway invested initially bought 64 million shares costing 10.5 billion dollars years increased ibm holdings however reduced 94.5 2.05 million shares end 2017 may 2018 completely ibm
node6:Wikipedia entry. Entry name: Semantic_role_labeling. Entry content: semantic role labeling natural language processing semantic role labeling also called shallow semantic parsing process assigns labels words phrases sentence indicate semantic role sentence agent goal result consists detection semantic arguments associated predicate verb sentence classification specific roles example given sentence like mary sold book john task would recognize verb sell representing predicate mary representing seller agent book representing goods theme john representing recipient important step towards making sense meaning sentence semantic analysis sort lower-level abstraction syntax tree i.e categories thus groups fewer clauses category instance book belongs would need two labels possessed possessor whereas book sold john would need two labels goal theme receiver recipient even though two clauses would similar far subject object functions concerned framenet project produced first major computational lexicon systematically described many predicates corresponding roles daniel gildea university california berkeley international computer science institute daniel jurafsky currently teaching stanford university previously working university colorado uc berkeley developed first automatic semantic role labeling system based framenet propbank corpus added manually created semantic role annotations penn treebank corpus wall street journal texts many automatic semantic role labeling systems used propbank training dataset learn annotate new sentences automatically
node7:Wikipedia entry. Entry name: Translatewiki.net. Entry content: translatewiki.net translatewiki.net web-based translation platform powered translate extension mediawiki makes mediawiki powerful tool translating kinds text 11,000 translators 5,800,00 pages 60 projects including mediawiki openstreetmap mifos encyclopedia life mantisbt main characteristic translatewiki.net engine translate extension wiki contribution made easy web user low barrier entry quality pursued letting translators focus 're best — translation — freeing burdens translations immediately available translator smoothly synchronised revision control system translatable wiki pages without translator intervention best case mediawiki wikimedia foundation projects new localisations sometimes called continuous translation continuous localization translation editor provides various features machine-assisted translation translatewiki.net also semantic mediawiki part semantic web translatewiki.net made available niklas laxström localisation platform languages mediawiki around june 2006 named betawiki besides translation developed characteristics integrated development environment mediawiki nukawiki 2005 focus improvement internationalisation features end 2007 siebrand mazeland joined management website moved current domain april 2008 already supported 100 languages mediawiki 200 extensions making one translated software projects ever well freecol since independent volunteer project recognised major player global success mediawiki wikimedia projects powered like wikipedia 280 languages 2009 improved google summer code project niklas laxström 2011 proofreading features introduced 2012 translation memory engine expanded wikimedia projects using translate 2013 translate platform underwent major revamp translate user experience project tux including changes navigation editor look feel translation area filters search color style natively supported formats follow added customisation
node8:Wikipedia entry. Entry name: PC-based_IBM-compatible_mainframes. Entry content: pc-based ibm-compatible mainframes since rise personal computer 1980s ibm vendors created pc-based ibm-compatible mainframes compatible larger ibm mainframe computers period time pc-based mainframe-compatible systems lower price require much electricity floor space however sacrificed performance dependable mainframe-class hardware products popular mainframe developers education training settings small companies non-critical processing certain disaster relief roles field insurance adjustment systems hurricane relief mid-1990s mainframes large machines often occupied entire rooms rooms often air conditioned special power arrangements accommodate three-phase electric power required machines modern mainframes physically comparatively small require little special building arrangements ibm demonstrated use mainframe instruction set first desktop computer—the ibm 5100 released 1975 product used microcode execute many system/370 processor instructions could run slightly modified version ibm apl mainframe program interpreter 1980 rumors spread new ibm personal computer perhaps miniaturized version ibm system/370 1981 ibm personal computer appeared based system 370 architecture however ibm use new pc platform create exotic combinations additional hardware could execute s/370 instructions locally october 1983 ibm announced ibm personal computer xt/370 essentially three-in-one product could run pc dos locally could also act 3270 terminal finally—its important distinguishing feature relative ibm 3270 pc—was could execute s/370 instructions locally xt/370 ibm personal computer xt system unit 5160 three custom 8-bit cards processor card 370pc-p contained two modified motorola 68000 chips could emulate s/370 fixed-point instructions non-floating-point instructions intel 8087 coprocessor modified emulate s/370 floating point instructions second card 370pc-m connected first unique card back connector contained 512 kib memory third card pc3277-em 3270 terminal emulator required download system software host mainframe xt/370 computer booted dos ran vm/pc control program card memory space added additional system memory first 256 kib motherboard memory could used move data 512 kib expansion card expansion memory dual ported provided additional 384 kib xt machine bringing total ram xt side 640 kib memory arbitrator could bank switch second 128 kib bank card banks allowing xt intel 8088 processor address ram 370pc-m card besides 416 kb usable ram s/370 applications xt/370 also supported 4 mb virtual memory using hard drive paging device ibm claimed xt/370 reached 0.1 mips data fit ram 1984 list price xt/370 typical configuration approximately 12,000 compared favorably ibm mainframes /mips basis example ibm 4341 delivered 1.2 mips 500,000 theoretically reduced demand customers mainframes offloading load onto smaller computer customers purchased xt/370s likely increased overall load mainframes increasing ibm mainframe sales similarly mainframe version vm/cms vm/pc also created illusion virtual disks pc version maintained pc-dos files either floppy hard disk example cms virtual disk belonging user fred device address 101 stored dos file fred.101 cms import export commands allowed extraction files virtual drives well ascii/ebcdic conversion xt/370 came xt-style 83-key keyboard 10 function keys newer revisions xt/370 dropped pc3277-em favor ibm 3278/79 boards xt/370 among xt systems could use second hard drive mounted 5161 expansion chassis byte 1984 called xt/370 qualified success magazine praised ibm fitting 370 features xt hoped technical improvements might result even better computer 1984 ibm introduced ibm personal computer at/370 similar cards xt/370 updated software supporting larger hard disks dma transfers 3277 card at/370 processor card system almost 60 faster xt/370 at/370 used different 16-bit interface co-processing cards xt called pc/370-p2 pc/370-m2 latter card still 512 kb memory 480 kb usable programs s/370 mode 32 kb reserved microcode storage terminal emulation function at/370 came 3278/79 emulation adapter late-series xt/370 at/370 motherboard equipped 512 kb ram at/370 also ran vm/pc pc dos 3.0 instead 2.10 xt version used vm/pc version 2 launched november 1985 improved performance 50 allowed add-on memory addition disk used page cache vm november 1985 computerworld article noted machine slow selling april 1988 ibm introduced system/370 workstation shipping customers since august 1987 officially called ibm 7437 vm/sp technical workstation later also known personal system/370 freestanding tower connected mca card installed ps/2 model 60 70 80 7437 tower contained processor 16main memory ps/2 provided i/o disk storage 7437 ran ibm vm/sp operating system one ibm representative described 7437 like 9370 single terminal intended existing s/370 users november 1988 list price 18,100 minimum 25-unit order one intended roles provide single-user s/370-compatible computer could run computer-aided design engineering applications originated ibm mainframes cadam catia graphics support provided ibm 5080 graphics system floor-standing tower 5080 connected 7437 ps/2 via cable mca adapter later ibm introduced personal/370 aka p/370 single slot 32-bit mca card added ps/2 rs/6000 computer run system/370 oss like music/sp vm vse parallel os/2 ps/2 aix rs/6000 supporting multiple concurrent users complete implementation s/370 processor including fpu co-processor 16 mb memory management standard i/o channels provided via host os/hardware additional 370 channel card added provide mainframe-specific i/o 3270 local control units 3400/3480 tape drives 7171 protocol converters although single-card product p/370 ran three times faster 7437 attaining 3.5 mips par low-end ibm 4381 subsequent book author claims 4.1 mips p/370 personal/370 available early november 1989 although special bid basis 1995 ibm introduced card enhanced s/390 microprocessor complex supported ibm esa/390 architecture pc-based system ibm pc-related products evolved support well employing card ibm part number 8640-pb0 ibm pc server 330 1998 ibm pc server 500 models important goal design s/390 processor card complete compatibility existing mainframe operating systems software processor implements esa/390 xa instructions prevents need instruction translation three generations card r/390 designation used expansion card used ibm rs/6000 server original r/390 featured 67 77 mhz power2 processor 32 512 mb ram depending configuration mca p/390 expansion card installed mca rs/6000 system pci p/390 card installed number early pci rs/6000s configurations referred r/390 r/390 servers need run aix version 4 host operating system p/390 designation used expansion card used ibm pc server less expensive r/390 original p/390 server housed ibm pc server 500 featured 90 mhz intel pentium processor running os/2 model revised mid-1996 rebranded pc server 520 featured 133 mhz intel pentium processor models came standard 32 mb ram expandable 256 mb pc server 500 featured eight mca expansion slots pc server 520 added two pci expansion slots removed two mca slots s/390 integrated server aka s/390 mainframe housed comparably small case hxwxd 82 x 52 x 111 cm became available november 1998 intended customers require i/o bandwidth performance s/390 multiprise 3000 size 256 mb ecc memory single cmos main processor performance 8 mips used s/390 cpu used integrated server fact p/390 e-card pentium ii used iosp i/o service processor supports four escon four parallel channels standard pci isa slots present maximum 255 gb internal harddisks supported 16x 18gb hds 2x hds redundancy supported oss os/390 mvs/esa vm/esa vse/esa fujitsu offers two pc-compatible systems make lower end fujitsu s/390-based bs2000 mainframe product line sq100 slower configuration using dual-core 2.93ghz intel xeon e7220 processors capable 200rpf performance sq200 introduced recently uses six-core 2.66ghz xeon x7542 processors performance 700rpf intel 64-based bs2000 mainframes run linux windows separate partitions fujitsu also continues make custom s/390-native processors mainframe hardware high end bs2000 line since late 1990s pc processors become fast enough perform mainframe emulation without need coprocessor card currently several personal computer emulators available support system/390 z/architecture
node9:Wikipedia entry. Entry name: Hindi-to-Punjabi_Machine_Translation_System. Entry content: hindi-to-punjabi machine translation system hindi punjabi machine translation system developed punjabi university patiala gurpreet singh lehal dr. vishal goyal aimed translate hindi text punjabi text based direct approach includes preprocessing text normalization replacing collocations replacing proper nouns translation engine identifying surnames identifying titles lexicon lookup word-sense disambiguation inflection analysis transliteration post processing module system available online
node10:Wikipedia entry. Entry name: WebSphere_Application_Server_for_z/OS. Entry content: websphere application server z/os ibm websphere application server z/os one platform implementations ibm websphere application server family latest version version 9.0 open standard interfaces supported common across platforms provided version release levels aligned however functional implementation open standard specification line differs platforms allows specific attributes platform exploited without jeopardizing common programming interface specification level websphere application server z/os v7 product code directly exploit following attributes platform version 7.0 websphere application server z/os provides five functions informally known zdiff functions represent specific exploitation z/os platform functions websphere application server z/os v8 introduced ability configure application server behavior request level rather server level function built upon existing wlm classification file used assign wlm transaction classes identified requests v8 provided additional xml tags assign server behavior requests identified xml following xml tags apply different behavior may v8 apply identified individual requests websphere application server version 8.5 announced april 24 2012 component v8.5 liberty profile runtime model composable web container server runtime dynamic update capabilities liberty profile z/os several extensions designed take advantage specific z/os platform functions extensions br
node11:Wikipedia entry. Entry name: SemEval. Entry content: semeval semeval semantic evaluation ongoing series evaluations computational semantic analysis systems evolved senseval word sense evaluation series evaluations intended explore nature meaning language meaning intuitive humans transferring intuitions computational analysis proved elusive series evaluations providing mechanism characterize precise terms exactly necessary compute meaning evaluations provide emergent mechanism identify problems solutions computations meaning exercises evolved articulate dimensions involved use language began apparently simple attempts identify word senses computationally evolved investigate interrelationships among elements sentence e.g. semantic role labeling relations sentences e.g. coreference nature saying semantic relations sentiment analysis purpose semeval senseval exercises evaluate semantic analysis systems semantic analysis refers formal analysis meaning computational refer approaches principle support effective implementation first three evaluations senseval-1 senseval-3 focused word sense disambiguation time growing number languages offered tasks number participating teams beginning fourth workshop semeval-2007 semeval-1 nature tasks evolved include semantic analysis tasks outside word sense disambiguation triggered conception *sem conference semeval community decided hold evaluation workshops yearly association *sem conference also decision every evaluation task run every year e.g none wsd tasks included semeval-2012 workshop earliest days assessing quality word sense disambiguation wsd algorithms primarily matter intrinsic evaluation “ almost attempts made evaluate embedded wsd components ” recently extrinsic evaluations begun provide evidence value wsd end-user applications 1990 discussions sense disambiguation task focused mainly illustrative examples rather comprehensive evaluation early 1990s saw beginnings systematic rigorous intrinsic evaluations including formal experimentation small sets ambiguous words april 1997 martha palmer marc light organized workshop entitled tagging lexical semantics conjunction conference applied natural language processing time clear recognition manually annotated corpora revolutionized areas nlp part-of-speech tagging parsing corpus-driven approaches potential revolutionize automatic semantic analysis well kilgarriff recalled “ high degree consensus field needed evaluation ” several practical proposals resnik yarowsky kicked discussion led creation senseval evaluation exercises semeval-2010 many participants feel 3-year cycle long wait many shared tasks conference natural language learning conll recognizing textual entailments rte run annually reason semeval coordinators gave opportunity task organizers choose 2-year 3-year cycle semeval community favored 3-year cycle br although votes within semeval community favored 3-year cycle organizers coordinators settled split semeval task 2 evaluation workshops triggered introduction new *sem conference semeval organizers thought would appropriate associate event *sem conference collocate semeval workshop *sem conference organizers got positive responses task coordinators/organizers participants association yearly *sem 8 tasks willing switch 2012 thus born semeval-2012 semeval-2013 current plan switch yearly semeval schedule associate *sem conference every task needs run every year framework semeval/senseval evaluation workshops emulates message understanding conferences mucs evaluation workshops ran arpa advanced research projects agency renamed defense advanced research projects agency darpa stages semeval/senseval evaluation workshops senseval-1 senseval-2 focused evaluation wsd systems major languages available corpus computerized dictionary senseval-3 looked beyond lexemes started evaluate systems looked wider areas semantics semantic roles technically known theta roles formal semantics logic form transformation commonly semantics phrases clauses sentences represented first-order logic forms senseval-3 explored performances semantics analysis machine translation types different computational semantic systems grew beyond coverage wsd senseval evolved semeval aspects computational semantic systems evaluated semeval exercises provide mechanism examining issues semantic analysis texts topics interest fall short logical rigor found formal computational semantics attempting identify characterize kinds issues relevant human understanding language primary goal replicate human processing means computer systems tasks shown developed individuals groups deal identifiable issues take concrete form first major area semantic analysis identification intended meaning word level taken include idiomatic expressions word-sense disambiguation concept evolving away notion words discrete senses rather characterized ways used i.e. contexts tasks area include lexical sample all-word disambiguation multi- cross-lingual disambiguation lexical substitution given difficulties identifying word senses tasks relevant topic include word-sense induction subcategorization acquisition evaluation lexical resources second major area semantic analysis understanding different sentence textual elements fit together tasks area include semantic role labeling semantic relation analysis coreference resolution tasks area look specialized issues semantic analysis temporal information processing metonymy resolution sentiment analysis tasks area many potential applications information extraction question answering document summarization machine translation construction thesauri semantic networks language modeling paraphrasing recognizing textual entailment potential applications contribution types semantic analysis constitutes outstanding research issue example word sense induction disambiguation task three separate phases unsupervised evaluation wsi considered two types evaluation v measure rosenberg hirschberg 2007 paired f-score artiles et al. 2009 evaluation follows supervised evaluation semeval-2007 wsi task agirre soroa 2007 tables reflects workshop growth senseval semeval gives overview area computational semantics evaluated throughout senseval/semeval workshops multilingual wsd task introduced semeval-2013 workshop task aimed evaluating word sense disambiguation systems multilingual scenario using babelnet sense inventory unlike similar task like crosslingual wsd multilingual lexical substitution task fixed sense inventory specified multilingual wsd uses babelnet sense inventory prior development babelnet bilingual lexical sample wsd evaluation task carried semeval-2007 chinese-english bitexts cross-lingual wsd task introduced semeval-2007 evaluation workshop re-proposed semeval-2013 workshop facilitate ease integrating wsd systems natural language processing nlp applications machine translation multilingual information retrieval cross-lingual wsd evaluation task introduced language-independent knowledge-lean approach wsd task unsupervised word sense disambiguation task english nouns means parallel corpora follows lexical-sample variant classic wsd task restricted 20 polysemous nouns worth noting semeval-2014 two tasks multilingual/crosslingual i.e l2 writing assistant task crosslingual wsd task includes english spanish german french dutch ii multilingual semantic textual similarity task evaluates systems english spanish texts major tasks semantic evaluation include following areas natural language processing list expected grow field progresses following table shows areas studies involved senseval-1 semeval-2014 refers senseval se refers semeval e.g s1 refers senseval-1 se07 refers semeval2007 semeval tasks created many types semantic annotations type various schema semeval-2015 organizers decided group tasks together several tracks tracks type semantic annotations task hope achieve lists type semantic annotations involved semeval workshops task track allocation flexible task might develop track e.g taxonomy evaluation task semeval-2015 learning semantic relations track semeval-2016 dedicated track semantic taxonomy new semantic taxonomy enrichment task
node12:Wikipedia entry. Entry name: MVS. Entry content: mvs multiple virtual storage commonly called mvs commonly used operating system system/370 system/390 ibm mainframe computers developed ibm unrelated ibm mainframe operating systems e.g. vse vm tpf first released 1974 mvs extended program products new names multiple times first ibm described mvs simply new release os/vs2 fact major rewrite os/vs2 release 1 upgrade os/360 mvt retained original code like mvt mainly written assembly language mvs core almost entirely written assembler xf although modules written pl/s performance-sensitive ones particular input/output supervisor ios ibm use os/vs2 emphasized upwards compatibility application programs ran mvt even need recompiling run mvs job control language files could used unchanged utilities non-core facilities like tso ran unchanged ibm users almost unanimously called new system mvs start ibm continued use term mvs naming later major versions mvs/xa os/360 mft multitasking fixed number tasks provided multitasking several memory partitions fixed size set operating system installed operator redefined example could small partition two medium partitions large partition two large programs ready run one would wait finished vacated large partition os/360 mvt multitasking variable number tasks enhancement refined memory use instead using fixed-size memory partitions mvt allocated memory regions job steps needed provided enough contiguous physical memory available significant advance mft memory management weaknesses job allocated memory dynamically sort programs database management systems programmers estimate job maximum memory requirement pre-define mvt job step contained mix small large programs wasted memory small programs ran seriously memory could become fragmented i.e. memory used current jobs could divided uselessly small chunks areas used current jobs remedy wait current jobs finished starting new ones early 1970s ibm sought mitigate difficulties introducing virtual memory ibm called virtual storage allowed programs request address spaces larger physical memory original implementations single virtual address space shared jobs os/vs1 os/360 mft within single virtual address space os/vs2 svs os/360 mvt within single virtual address space os/vs1 svs principle disadvantages mft mvt impacts less severe jobs could request much larger address spaces requests came 16 mb pool even physical storage smaller mid-1970s ibm introduced mvs supported virtual storage larger available real storage svs also allowed indefinite number applications run different address spaces two concurrent programs might try access virtual memory address virtual memory system redirected requests different areas physical memory address spaces consisted three areas operating system one instance shared jobs application area unique application shared virtual area used various purposes including inter-job communication ibm promised application areas would always least 8 mb made mvs perfect solution business problems resulted need run applications mvs maximized processing potential providing multiprogramming multiprocessing capabilities like mvt os/vs2 svs predecessors mvs supported multiprogramming program instructions associated data scheduled control program given processing cycles unlike single-programming operating system systems maximize use processing potential dividing processing cycles among instructions associated several different concurrently running programs way control program wait i/o operation complete proceeding executing instructions multiple programs computer able switch back forth active inactive programs early editions mvs mid-1970s among first ibm os series support multiprocessor configurations though m65mp variant os/360 running 360 models 65 67 provided limited multiprocessor support 360 model 67 also hosted multiprocessor capable tss/360 mts cp-67 operating systems multiprocessing systems execute instructions simultaneously offer greater processing power single-processing system result mvs able address business problems brought need process large amounts data multiprocessing systems either loosely coupled means computer access common workload tightly coupled means computers share real storage controlled single copy operating system mvs retained loosely coupled multiprocessing attached support processor asp tightly coupled multiprocessing os/360 model 65 multiprocessing tightly coupled systems two cpus shared concurrent access memory copy operating system peripherals providing greater processing power degree graceful degradation one cpu failed loosely coupled configurations group processors single tightly coupled memory operating system shared peripherals operating system component jes3 allowed managing whole group one console provided greater resilience let operators decide processor run jobs central job queue mvs jes3 gave users opportunity network together two data processing systems via shared disks channel-to-channel adapters ctca capability eventually became available jes2 users multi-access spool mas mvs originally supported 24-bit addressing i.e. 16 mb underlying hardware progressed supported 31-bit xa esa 2048 mb z/os 64-bit addressing significant motives rapid upgrade 31-bit addressing growth large transaction-processing networks mostly controlled cics ran single address space—and db2 relational database management system needed 8 mb application address space run efficiently early versions configured two address spaces communicated via shared virtual area imposed significant overhead since communications transmit via operating system main user interfaces mvs job control language jcl originally designed batch processing 1970s onwards also used start allocate resources long-running interactive jobs cics tso time sharing option interactive time-sharing interface mainly used run development tools end-user information systems ispf tso application users 3270-family terminals later vm well allows user accomplish tasks tso command line menu form oriented manner full screen editor file browser tso basic interface command line although facilities added later form-driven interfaces mvs took major step forward fault-tolerance built earlier stae facility ibm called software recovery ibm decided years practical real-world experience mvt business world system failures major impacts customer businesses ibm decided take major design jump assume despite best software development testing techniques 'problems occur profound assumption pivotal adding great percentages fault-tolerance code system likely contributed system success tolerating software hardware failures statistical information hard come prove value design features measure 'prevented 'recovered problems ibm many dimensions enhanced fault-tolerant software recovery rapid problem resolution features time design specified hierarchy error-handling programs system kernel/'privileged mode called functional recovery routines user 'task 'problem program mode called estae extended specified task abnormal exit routines invoked case system detected error actually hardware processor storage error software error recovery routine made 'mainline function reinvokable captured error diagnostic data sufficient debug causing problem either 'retried reinvoke mainline 'percolated escalated error processing next recovery routine hierarchy thus error system captured diagnostic data attempted perform repair keep system worst thing possible take user address space 'job case unrepaired errors though initial design point recent mvs version z/os recovery program guaranteed recovery routine recovery routine recovery routine recovery structure embedded basic mvs control program programming facilities available used application program developers 3rd party developers practically mvs software recovery made problem debugging easier difficult software recovery requires programs leave 'tracks thus facilitating debugging—but fact processing progresses despite error overwrite tracks early data capture time error maximizes debugging facilities exist recovery routines task system mode ibm included additional criteria major software problem required ibm service mainline component failed initiate software recovery considered valid reportable failure also recovery routine failed collect significant diagnostic data original problem solvable data collected recovery routine ibm standards dictated fault reportable required repair thus ibm standards rigorously applied encouraged continuous improvement ibm introduced on-demand hypervisor major serviceability tool called dynamic support system dss first release mvs facility could invoked initiate session create diagnostic procedures invoke already-stored procedures procedures 'trapped special events loading program device i/o system procedure calls triggered activation previously defined procedures procedures could invoked recursively allowed reading writing data alteration instruction flow program event recording hardware used due overhead tool removed customer-available mvs systems program-event recording per exploitation performed enhancement diagnostic slip command introduction per support slip/per su 64/65 1978 multiple copies mvs ibm operating systems could share machine machine controlled vm/370 case vm/370 real operating system regarded guest operating systems applications unusually high privileges result later hardware enhancements one instance operating system either mvs vm guests could also occupy logical partition lpar instead entire physical system multiple mvs instances organized collectively administered structure called systems complex sysplex introduced september 1990 instances interoperate software component called cross-system coupling facility xcf hardware component called hardware coupling facility cf integrated coupling facility icf co-located mainframe hardware multiple sysplexes joined via standard network protocols ibm proprietary systems network architecture sna recently via tcp/ip z/os operating system mvs recent descendant also native support execute posix single unix specification applications support began mvs/sp v4r3 ibm obtained unix 95 certification z/os v1r2 later system typically used business banking applications often written cobol cobol programs traditionally used transaction processing systems like ims cics program running cics special exec cics statements inserted cobol source code preprocessor translator replaces exec cics statements appropriate cobol code call cics program compiled — altogether unlike sql used call db2 applications also written languages c c++ java assembly language fortran basic rpg rexx language support packaged common component called language environment le allow uniform debugging tracing profiling language independent functions mvs systems traditionally accessed 3270 terminals pcs running 3270 emulators however many mainframe applications days custom web gui interfaces z/os operating system built-in support tcp/ip system management done past 3270 terminal done hardware management console hmc increasingly web interfaces operator consoles provided 2074 emulators unlikely see s/390 zseries processor real 3270 connected native character encoding scheme mvs peripherals ebcdic tr instruction made easy translate 7- 8-bit codes time ibm added hardware-accelerated services perform translation larger codes hardware-specific service unicode transforms software support e.g. ascii iso/iec 8859 utf-8 utf-16 utf-32 software translation services take source destination code pages inputs files properly called data sets mvs names files organized catalogs vsam files data set names dsns mainframe term filenames organized hierarchy whose levels separated dots e.g dept01.system01.file01 level hierarchy eight characters long total filename length maximum 44 characters including dots convention components separated dots used organize files similarly directories operating systems example utility programs performed similar functions windows explorer without gui usually batch processing mode adding renaming deleting new elements reporting contents specified element however unlike many systems levels usually actual directories naming convention like original macintosh file system folder hierarchy illusion maintained finder tso supports default prefix files similar current directory concept racf supports setting access controls based filename patterns analogous access controls directories platforms members os family mvs data sets record-oriented mvs inherited three main types predecessors sequential isam datasets could store either fixed-length variable length records types could occupy one disk volume based vtoc disk structure early ibm database management systems used various combinations isam bdam datasets usually bdam actual data storage isam indexes early 1970s ibm virtual memory operating systems introduced new file management component vsam provided similar facilities vsam formats became basis ibm database management systems ims/vs db2 usually esds actual data storage ksds indexes vsam also included catalog component used mvs master catalog partitioned data sets pds sequential data sets subdivided members could processed sequential files right like folder hierarchical file system important use pdses program libraries system administrators used main pds way allocate disk space project project team created edited members uses pdss libraries frequently used job control procedures procs “ copy books ” programming language statements record definitions used several programs generation data groups gdgs groups like named data sets referenced absolute generation number offset recent generation originally designed support grandfather-father-son backup procedures file modified changed version became new son previous son became father previous father became grandfather previous grandfather deleted one could set gdgs 3 generations applications used gdgs collect data several sources feed information one program collecting program created new generation file final program read whole group single sequential file specifying generation jcl modern versions mvs e.g. z/os also support posix-compatible slash filesystems along facilities integrating two filesystems os make mvs dataset appear file posix program subsystem newer filesystems include hierarchical file system hfs confused apple hierarchical file system zfs confused sun zfs programs running network-connected computers as/400 use local data management interfaces transparently create manage access vsam record-oriented files using client-server products implemented according distributed data management architecture ddm ddm also base architecture mvs db2 server implements distributed relational database architecture drda mvs part z/os older mvs releases longer supported ibm since 2007 64-bit z/os releases supported z/os supports running older 24-bit 31-bit mvs applications alongside 64-bit applications mvs releases 3.8j 24-bit released 1981 freely available possible run mvs 3.8j release mainframe emulators free mvs/370 generic term versions mvs operating system prior mvs/xa system/370 architecture time mvs released supported 24-bit virtual addresses mvs/370 operating system architecture based 24-bit address 24-bit address length programs running mvs/370 given 16 megabytes contiguous virtual storage mvs/xa multiple virtual storage/extended architecture version mvs supported 370-xa architecture expanded addresses 24 bits 31 bits providing 2 gigabyte addressable memory area also supported 24-bit legacy addressing mode older 24-bit applications i.e stored 24-bit address lower 24 bits 32-bit word utilized upper 8 bits word purposes mvs/esa mvs enterprise system architecture version mvs first introduced mvs/sp version 3 february 1988 replaced by/renamed os/390 late 1995 subsequently z/os mvs/esa openedition upgrade version 4 release 3 mvs/esa announced february 1993 support posix standards initial release national institute standards technology nist certification federal information processing standard fips 151 compliance subsequent releases certified higher levels organizations e.g x/open successor open group included 1 million new lines code provide api shell utilities extended user interface works hierarchical file system provided dfsms data facility system managed storage shell utilities based mortice kerns interopen products independent specialists estimate 80 open systems-compliant—more unix systems dce2 support announced february 1994 many application development tools march 1995 mid 1995 open features became standard part vanilla mvs/esa sp version 5 release 1 ibm stopped distinguishing openedition operating system os/390 became unix system services kept name z/os late 1995 ibm bundled mvs several program products changed name mvs/esa os/390 current level mvs marketed z/os japanese mainframe manufacturers fujitsu hitachi repeatedly illegally obtained ibm mvs source code internal documentation one 20th century famous cases industrial espionage fujitsu relied heavily ibm code msp mainframe operating system likewise hitachi vos3 operating system msp vos3 heavily marketed japan still hold substantial share mainframe installed base also degree countries notably australia even ibm bugs documentation misspellings faithfully copied ibm cooperated u.s. federal bureau investigation sting operation reluctantly supplying fujitsu hitachi proprietary mvs mainframe hardware technologies course multi-year investigations culminating early 1980s—investigations implicated senior company managers even japanese government officials amdahl however involved fujitsu theft ibm intellectual property communications amdahl fujitsu amdahl specifications scrupulously cleansed ibm ip references ibm ip subsequent investigations ibm reached multimillion-dollar settlements fujitsu hitachi collecting substantial fractions companies profits many years reliable reports indicate settlements exceeded us 500,000,000 three companies long since amicably agreed many joint business ventures example 2000 ibm hitachi collaborated developing ibm z900 mainframe model historical copying msp vos3 properly classified forks mvs many third party software vendors mvs-compatible products able produce msp- vos3-compatible versions little modification ibm introduced 64-bit z/architecture mainframes year 2000 ibm also introduced 64-bit z/os operating system direct successor os/390 mvs fujitsu hitachi opted license ibm z/architecture quasi-mvs operating systems hardware systems msp vos3 still nominally supported vendors maintain mvs 1980s architectural limitations present day since z/os still supports mvs-era applications technologies—indeed z/os still contains mvs code albeit greatly enhanced improved decades evolution—applications operational procedures running msp vos3 move z/os much easily operating systems
node13:Wikipedia entry. Entry name: Machine_translation. Entry content: machine translation machine translation sometimes referred abbreviation mt confused computer-aided translation machine-aided human translation maht interactive translation sub-field computational linguistics investigates use software translate text speech one language another basic level mt performs simple substitution words one language words another alone usually produce good translation text recognition whole phrases closest counterparts target language needed solving problem corpus statistical neural techniques rapidly growing field leading better translations handling differences linguistic typology translation idioms isolation anomalies current machine translation software often allows customization domain profession weather reports improving output limiting scope allowable substitutions technique particularly effective domains formal formulaic language used follows machine translation government legal documents readily produces usable output conversation less standardised text improved output quality also achieved human intervention example systems able translate accurately user unambiguously identified words text proper names assistance techniques mt proven useful tool assist human translators limited number cases even produce output used e.g. weather reports progress potential machine translation debated much history since 1950s number scholars questioned possibility achieving fully automatic machine translation high quality first notably yehoshua bar-hillel critics claim in-principle obstacles automating translation process idea machine translation may traced back 17th century 1629 rené descartes proposed universal language equivalent ideas different tongues sharing one symbol field machine translation appeared warren weaver memorandum translation 1949 first researcher field yehosha bar-hillel began research mit 1951 georgetown university mt research team followed 1951 public demonstration georgetown-ibm experiment system 1954 mt research programs popped japan russia 1955 first mt conference held london 1956 researchers continued join field association machine translation computational linguistics formed u.s. 1962 national academy sciences formed automatic language processing advisory committee alpac study mt 1964 real progress much slower however alpac report 1966 found ten-year-long research failed fulfill expectations funding greatly reduced according 1972 report director defense research engineering ddr e feasibility large-scale mt reestablished success logos mt system translating military manuals vietnamese conflict french textile institute also used mt translate abstracts french english german spanish 1970 brigham young university started project translate mormon texts automated translation 1971 xerox used systran translate technical manuals 1978 beginning late 1980s computational power increased became less expensive interest shown statistical models machine translation various mt companies launched including trados 1984 first develop market translation memory technology 1989 first commercial mt system russian english german-ukrainian developed kharkov state university 1991 mt web started systran offering free translation small texts 1996 followed altavista babelfish racked 500,000 requests day 1997 franz josef och future head translation development google darpa speed mt competition 2003 innovations time included moses open-source statistical mt engine 2007 text/sms translation service mobiles japan 2008 mobile phone built-in speech-to-speech translation functionality english japanese chinese 2009 recently google announced google translate translates roughly enough text fill 1 million books one day 2012 idea using digital computers translation natural languages proposed early 1946 a. d. booth possibly others warren weaver wrote important memorandum translation 1949 georgetown experiment means first application demonstration made 1954 apexc machine birkbeck college university london rudimentary translation english french several papers topic published time even articles popular journals example article cleave zacharov september 1955 issue wireless world similar application also pioneered birkbeck college time reading composing braille texts computer human translation process may described behind ostensibly simple procedure lies complex cognitive operation decode meaning source text entirety translator must interpret analyse features text process requires in-depth knowledge grammar semantics syntax idioms etc. source language well culture speakers translator needs in-depth knowledge re-encode meaning target language therein lies challenge machine translation program computer understand text person create new text target language sounds written person general application beyond current technology though works much faster automated translation program procedure human participation produce output even close quality human translator produce however provide general though imperfect approximation original text getting gist process called gisting sufficient many purposes including making best use finite expensive time human translator reserved cases total accuracy indispensable problem may approached number ways evolution accuracy improved machine translation use method based linguistic rules means words translated linguistic way – suitable orally speaking words target language replace ones source language often argued success machine translation requires problem natural language understanding solved first generally rule-based methods parse text usually creating intermediary symbolic representation text target language generated according nature intermediary representation approach described interlingual machine translation transfer-based machine translation methods require extensive lexicons morphological syntactic semantic information large sets rules given enough data machine translation programs often work well enough native speaker one language get approximate meaning written native speaker difficulty getting enough data right kind support particular method example large multilingual corpus data needed statistical methods work necessary grammar-based methods grammar methods need skilled linguist carefully design grammar use translate closely related languages technique referred rule-based machine translation may used rule-based machine translation paradigm includes transfer-based machine translation interlingual machine translation dictionary-based machine translation paradigms type translation used mostly creation dictionaries grammar programs unlike methods rbmt involves information linguistics source target languages using morphological syntactic rules semantic analysis languages basic approach involves linking structure input sentence structure output sentence using parser analyzer source language generator target language transfer lexicon actual translation rbmt biggest downfall everything must made explicit orthographical variation erroneous input must made part source language analyser order cope lexical selection rules must written instances ambiguity adapting new domains hard core grammar across domains domain-specific adjustment limited lexical selection adjustment transfer-based machine translation similar interlingual machine translation creates translation intermediate representation simulates meaning original sentence unlike interlingual mt depends partially language pair involved translation interlingual machine translation one instance rule-based machine-translation approaches approach source language i.e text translated transformed interlingual language i.e language neutral representation independent language target language generated interlingua one major advantages system interlingua becomes valuable number target languages turned increases however interlingual machine translation system made operational commercial level kant system nyberg mitamura 1992 designed translate caterpillar technical english cte languages machine translation use method based dictionary entries means words translated dictionary statistical machine translation tries generate translations using statistical methods based bilingual text corpora canadian hansard corpus english-french record canadian parliament europarl record european parliament corpora available good results achieved translating similar texts corpora still rare many language pairs first statistical machine translation software candide ibm google used systran several years switched statistical translation method october 2007 2005 google improved internal translation capabilities using approximately 200 billion words united nations materials train system translation accuracy improved google translate similar statistical translation programs work detecting patterns hundreds millions documents previously translated humans making intelligent guesses based findings generally human-translated documents available given language likely translation good quality newer approaches statistical machine translation metis ii presemt use minimal corpus size instead focus derivation syntactic structure pattern recognition development may allow statistical machine translation operate monolingual text corpus smt biggest downfall includes dependent upon huge amounts parallel texts problems morphology-rich languages especially translating languages inability correct singleton errors example-based machine translation ebmt approach proposed makoto nagao 1984 example-based machine translation based idea analogy approach corpus used one contains texts already translated given sentence translated sentences corpus selected contain similar sub-sentential components similar sentences used translate sub-sentential components original sentence target language phrases put together form complete translation hybrid machine translation hmt leverages strengths statistical rule-based translation methodologies several mt organizations claim hybrid approach uses rules statistics approaches differ number ways recently advent neural mt new version hybrid machine translation emerging combines benefits rules statistical neural machine translation approach allows benefitting pre- post-processing rule guided workflow well benefitting nmt smt downside inherent complexity makes approach suitable specific use cases one proponents approach complex use cases omniscien technologies deep learning based approach mt neural machine translation made rapid progress recent years google announced translation services using technology preference previous statistical methods word-sense disambiguation concerns finding suitable translation word one meaning problem first raised 1950s yehoshua bar-hillel pointed without universal encyclopedia machine would never able distinguish two meanings word today numerous approaches designed overcome problem approximately divided shallow approaches deep approaches shallow approaches assume knowledge text simply apply statistical methods words surrounding ambiguous word deep approaches presume comprehensive knowledge word far shallow approaches successful claude piron long-time translator united nations world health organization wrote machine translation best automates easier part translator job harder time-consuming part usually involves extensive research resolve ambiguities source text grammatical lexical exigencies target language require resolved ideal deep approach would require translation software research necessary kind disambiguation would require higher degree ai yet attained shallow approach simply guessed sense ambiguous english phrase piron mentions based perhaps kind prisoner-of-war camp often mentioned given corpus would reasonable chance guessing wrong fairly often shallow approach involves ask user ambiguity would piron estimate automate 25 professional translator job leaving harder 75 still done human one major pitfalls mt inability translate non-standard language accuracy standard language heuristic statistical based mt takes input various sources standard form language rule-based translation nature include common non-standard usages causes errors translation vernacular source colloquial language limitations translation casual speech present issues use machine translation mobile devices name entities narrow sense refer concrete abstract entities real world including people organizations companies places etc also refers expressing time space quantity 1 july 2011 79.99 named entities occur text analyzed statistical machine translation initial difficulty arises dealing named entities simply identifying text consider list names common particular language illustrate – common names different language also constantly changing named entities recognized machine translator may erroneously translated common nouns would likely affect bleu rating translation would change text human readability also possible identified named entities omitted output translation would also implications text readability message another way deal named entities use transliteration instead translation meaning find letters target language closely correspond name source language attempts incorporate machine translation adding transliteration step translation procedure however attempts still problems even cited worsening quality translation named entities still identified incorrectly words transliterated transliterated n't example southern california first word translated directly second word transliterated however machines would often transliterate treated one entity words like hard machine translators even transliteration component process lack attention issue named entity translation recognized potentially stemming lack resources devote task addition complexity creating good system named entity translation one approach named entity translation transliterate translate words second create do-not-translate list end goal – transliteration opposed translation approaches still rely correct identification named entities however third approach successful named entity translation class-based model method named entities replaced token represent class belong example ted erica would replaced person class token way statistical distribution use person names general analyzed instead looking distributions ted erica individually problem class based model solves probability given name specific language affect assigned probability translation study stanford improving area translation gives examples different probabilities assigned david going walk ankit going walk english target language due different number occurrences name training data frustrating outcome study stanford attempts improve named recognition translation many times decrease bleu scores translation result inclusion methods named entity translation work done utilization multiparallel corpora body text translated 3 languages using methods text translated 2 languages may utilized combination provide accurate translation third language compared one source languages used alone ontology formal representation knowledge includes concepts objects processes etc domain relations stored information linguistic nature one speak lexicon nlp ontologies used source knowledge machine translation systems access large knowledge base systems enabled resolve many especially lexical ambiguities following classic examples humans able interpret prepositional phrase according context use world knowledge stored lexicons machine translation system initially would able differentiate meanings syntax change large enough ontology source knowledge however possible interpretations ambiguous words specific context reduced areas usage ontologies within nlp include information retrieval information extraction text summarization ontology generated pangloss knowledge-based machine translation system 1993 may serve example ontology nlp purposes compiled system provides holy grail fully automatic high-quality machine translation unrestricted text many fully automated systems produce reasonable output quality machine translation substantially improved domain restricted controlled despite inherent limitations mt programs used around world probably largest institutional user european commission project example coordinated university gothenburg received 2.375 million euros project support eu create reliable translation tool covers majority eu languages development mt systems comes time budget cuts human translation may increase eu dependency reliable mt programs european commission contributed 3.072 million euros via isa programme creation mt ec statistical machine translation program tailored administrative needs eu replace previous rule-based machine translation system 2005 google claimed promising results obtained using proprietary statistical machine translation engine statistical translation engine used google language tools arabic english chinese english overall score 0.4281 runner-up ibm bleu-4 score 0.3954 summer 2006 tests conducted national institute standards technology recent focus terrorism military sources united states investing significant amounts money natural language engineering in-q-tel venture capital fund largely funded us intelligence community stimulate new technologies private sector entrepreneurs brought companies like language weaver currently military community interested translation processing languages like arabic pashto dari within languages focus key phrases quick communication military members civilians use mobile phone apps information processing technology office darpa hosts programs like tides babylon translator us air force awarded 1 million contract develop language translation technology notable rise social networking web recent years created yet another niche application machine translation software – utilities facebook instant messaging clients skype googletalk msn messenger etc – allowing users speaking different languages communicate machine translation applications also released mobile devices including mobile telephones pocket pcs pdas etc due portability instruments come designated mobile translation tools enabling mobile business networking partners speaking different languages facilitating foreign language learning unaccompanied traveling foreign countries without need intermediation human translator despite labelled unworthy competitor human translation 1966 automated language processing advisory committee put together united states government quality machine translation improved levels application online collaboration medical field investigated application technology medical settings human translators absent another topic research difficulties arise due importance accurate translations medical diagnoses many factors affect machine translation systems evaluated factors include intended use translation nature machine translation software nature translation process different programs may work well different purposes example statistical machine translation smt typically outperforms example-based machine translation ebmt researchers found evaluating english french translation ebmt performs better concept applies technical documents easily translated smt formal language certain applications however e.g. product descriptions written controlled language dictionary-based machine-translation system produced satisfactory translations require human intervention save quality inspection various means evaluating output quality machine translation systems oldest use human judges assess translation quality even though human evaluation time-consuming still reliable method compare different systems rule-based statistical systems automated means evaluation include bleu nist meteor lepor relying exclusively unedited machine translation ignores fact communication human language context-embedded takes person comprehend context original text reasonable degree probability certainly true even purely human-generated translations prone error therefore ensure machine-generated translation useful human publishable-quality translation achieved translations must reviewed edited human late claude piron wrote machine translation best automates easier part translator job harder time-consuming part usually involves extensive research resolve ambiguities source text grammatical lexical exigencies target language require resolved research necessary prelude pre-editing necessary order provide input machine-translation software output meaningless addition disambiguation problems decreased accuracy occur due varying levels training data machine translating programs example-based statistical machine translation rely vast array real example sentences base translation many sentences analyzed accuracy jeopardized researchers found program trained 203,529 sentence pairings accuracy actually decreases optimal level training data seems 100,000 sentences possibly training data increases number possible sentences increases making harder find exact translation match although concerns machine translation accuracy dr. ana nino university manchester researched advantages utilizing machine translation classroom one pedagogical method called using mt bad model mt bad model forces language learner identify inconsistencies incorrect aspects translation turn individual hopefully possess better grasp language dr. nino cites teaching tool implemented late 1980s end various semesters dr. nino able obtain survey results students used mt bad model well models overwhelmingly students felt observed improved comprehension lexical retrieval increased confidence target language early 2000s options machine translation spoken signed languages severely limited common belief deaf individuals could use traditional translators however stress intonation pitch timing conveyed much differently spoken languages compared signed languages therefore deaf individual may misinterpret become confused meaning written text based spoken language researchers zhao et al 2000 developed prototype called team translation english asl machine completed english american sign language asl translations program would first analyze syntactic grammatical morphological aspects english text following step program accessed sign synthesizer acted dictionary asl synthesizer housed process one must follow complete asl signs well meanings signs entire text analyzed signs necessary complete translation located synthesizer computer generated human appeared would use asl sign english text user works original subject copyright protection scholars claim machine translation results entitled copyright protection mt involve creativity copyright issue derivative work author original work original language lose rights work translated translator must permission publish translation
node14:Wikipedia entry. Entry name: Transparent_Data_Encryption. Entry content: transparent data encryption transparent data encryption often abbreviated tde technology employed microsoft ibm oracle encrypt database files tde offers encryption file level tde solves problem protecting data rest encrypting databases hard drive consequently backup media protect data transit data use enterprises typically employ tde solve compliance issues pci dss require protection data rest microsoft offers tde part microsoft sql server 2008 2008 r2 2012 2014 2016 tde supported evaluation developer enterprise datacenter editions microsoft sql server sql tde supported hardware security modules thales e-security townsend security safenet inc. ibm offers tde part db2 version 10.5 fixpack 5 also supported cloud versions product default db2 cloud db2 warehouse cloud oracle requires oracle advanced security option oracle 10g 11g enable tde oracle tde addresses encryption requirements associated public private privacy security mandates pci california sb 1386 oracle advanced security tde column encryption introduced oracle database 10g release 2 oracle advanced security tde tablespace encryption support hardware security modules hsms introduced oracle database 11gr1 keys tde stored hsm manage keys across servers protect keys hardware introduce separation duties key used encrypt columns table regardless number columns encrypted encryption keys encrypted using database server master key stored dictionary table database sql server utilizes encryption hierarchy enables databases shared within cluster migrated instances without re-encrypting hierarchy consists combination symmetric asymmetric ciphers database backups compression occurs encryption due fact strongly encrypted data significantly compressed backups tde encrypted databases require additional resources enable automatic booting sql server stores lowest level encryption keys persistent storage using dpapi store presents potential security issue stored keys directly recovered live system backups used decrypt databases
node15:Wikipedia entry. Entry name: Embedded_SQL. Entry content: embedded sql embedded sql method combining computing power programming language database manipulation capabilities sql embedded sql statements sql statements written inline program source code host language embedded sql statements parsed embedded sql preprocessor replaced host-language calls code library output preprocessor compiled host compiler allows programmers embed sql statements programs written number languages cobol fortran differs sql-derived programming languages n't go discrete preprocessors pl/sql t-sql sql standards committee defined embedded sql standard two steps formalism called module language defined embedded sql standard derived module language sql standard defines embedding sql embedded sql language sql queries embedded referred host language popular host language c. host language c embedded sql example called pro*c oracle sybase database management systems ecpg postgresql database management system sql may also embedded languages like php etc ibm db2 version 9 linux unix windows supports embedded sql c c++ java cobol fortran rexx although support fortran rexx deprecated mimer sql linux openvms windows support embedded sql raima database manager 14.0 supports embedded sql c/c++ sql pl sap sybase ase 15.7 supports embedded sql c cobol part software developer kit sybase sap sybase sql anywhere supports embedded sql c c++ part sql anywhere database management system sql anywhere sap sybase iq supports embedded sql c c++ part sybase iq database management system sybase iq
node16:Wikipedia entry. Entry name: Reverso_(language_tools). Entry content: reverso language tools reverso website specializing online translation aids language services include online dictionaries translation context spell checking conjugation tools softissimo inc. active since 1998 aim providing online translation linguistic tools corporate mass markets 2013 released reverso context bilingual dictionary tool based big data machine learning algorithms 2016 reverso acquired fleex service learning english via subtitled movies based content netflix fleex expanded also include video content youtube ted talks custom video files 2018 released new mobile app combines translations learning activities reverso suite online linguistic services 40 million users comprises various types language web apps tools translation language learning tools support many languages including english french hebrew spanish italian russian since founding reverso provided machine translation tools automated translation texts various languages including neural machine translation reverso context online mobile application combining big data large multilingual corpora allow users search translations context texts sourced mainly films books governmental documents allowing users see idiomatic usages translations well synonyms voice output reverso context app also provides language-learning features flashcards based words example sentences reverso context mobile app 4.7 ranking google play app store reverso also released browser extensions chrome firefox incorporate features reverso context web browsing reverso website also provides collaborative bilingual dictionaries various pairs languages use crowd sourcing allow users submit new entries provide feedback also tools conjugation verbs various language spell checking tools written multilingual grammar guides language learners reverso online localize service translates documents websites preserving layout february 2018 revealed translations reverso translation web site returned antisemitic results much nicer returning dachau much nicer auschwitz results prompted international league racism anti-semitism threaten reverso legal actions reverso answered twitter controversial content would removed one month time
node17:Wikipedia entry. Entry name: Automatic_acquisition_of_sense-tagged_corpora. Entry content: automatic acquisition sense-tagged corpora knowledge acquisition bottleneck perhaps major impediment solving word sense disambiguation wsd problem unsupervised learning methods rely knowledge word senses barely formulated dictionaries lexical databases supervised learning methods depend heavily existence manually annotated examples every word sense requisite met handful words testing purposes done senseval exercises therefore one promising trends wsd research using largest corpus ever accessible world wide web acquire lexical information automatically wsd traditionally understood intermediate language engineering technology could improve applications information retrieval ir case however reverse also true web search engines implement simple robust ir techniques successfully used mining web information employed wsd direct way using web corpora enhance wsd performance automatic acquisition sense-tagged corpora fundamental resource feed supervised wsd algorithms although far commonplace wsd literature number different effective strategies achieve goal already proposed strategies automatic extraction examples train supervised learning algorithms reviewed far best explored approach mine web word sense disambiguation results certainly encouraging however several open research issues related use web examples wsd besides automatic acquisition examples web wsd experiments profited web clear however research opportunities remain largely unexplored instance little known use lexical information extracted web knowledge-based wsd systems also hard find systems use web-mined parallel corpora wsd even though already efficient algorithms use parallel corpora wsd
node18:Wikipedia entry. Entry name: List_of_relational_database_management_systems. Entry content: list relational database management systems list relational database management systems
node19:Wikipedia entry. Entry name: ALPAC. Entry content: alpac alpac automatic language processing advisory committee committee seven scientists led john r. pierce established 1964 united states government order evaluate progress computational linguistics general machine translation particular report issued 1966 gained notoriety skeptical research done machine translation far emphasizing need basic research computational linguistics eventually caused u.s. government reduce funding topic dramatically alpac set april 1964 john r. pierce chairman committee consisted testimony heard alpac final recommendations p. 34 therefore research supported
node20:Wikipedia entry. Entry name: Speech_recognition. Entry content: speech recognition speech recognition interdisciplinary subfield computational linguistics develops methodologies technologies enables recognition translation spoken language text computers also known automatic speech recognition asr computer speech recognition speech text stt incorporates knowledge research linguistics computer science electrical engineering fields speech recognition systems require training also called enrollment individual speaker reads text isolated vocabulary system system analyzes person specific voice uses fine-tune recognition person speech resulting increased accuracy systems use training called speaker independent systems systems use training called speaker dependent speech recognition applications include voice user interfaces voice dialing e.g call home call routing e.g would like make collect call domotic appliance control search e.g find podcast particular words spoken simple data entry e.g. entering credit card number preparation structured documents e.g radiology report determining speaker characteristics speech-to-text processing e.g. word processors emails aircraft usually termed direct voice input term voice recognition speaker identification refers identifying speaker rather saying recognizing speaker simplify task translating speech systems trained specific person voice used authenticate verify identity speaker part security process technology perspective speech recognition long history several waves major innovations recently field benefited advances deep learning big data advances evidenced surge academic papers published field importantly worldwide industry adoption variety deep learning methods designing deploying speech recognition systems key areas growth vocabulary size speaker independence processing speed raj reddy first person take continuous speech recognition graduate student stanford university late 1960s previous systems required users pause word reddy system issued spoken commands playing game chess around time soviet researchers invented dynamic time warping dtw algorithm used create recognizer capable operating 200-word vocabulary dtw processed speech dividing short frames e.g 10ms segments processing frame single unit although dtw would superseded later algorithms technique carried achieving speaker independence remained unsolved time period late 1960s leonard baum developed mathematics markov chains institute defense analysis decade later cmu raj reddy students james baker janet m. baker began using hidden markov model hmm speech recognition james baker learned hmms summer job institute defense analysis undergraduate education use hmms allowed researchers combine different sources knowledge acoustics language syntax unified probabilistic model 1980s also saw introduction n-gram language model much progress field owed rapidly increasing capabilities computers end darpa program 1976 best computer available researchers pdp-10 4 mb ram could take 100 minutes decode 30 seconds speech two practical products point vocabulary typical commercial speech recognition system larger average human vocabulary raj reddy former student xuedong huang developed sphinx-ii system cmu sphinx-ii system first speaker-independent large vocabulary continuous speech recognition best performance darpa 1992 evaluation handling continuous speech large vocabulary major milestone history speech recognition huang went found speech recognition group microsoft 1993 raj reddy student kai-fu lee joined apple 1992 helped develop speech interface prototype apple computer known casper lernout hauspie belgium-based speech recognition company acquired several companies including kurzweil applied intelligence 1997 dragon systems 2000 l h speech technology used windows xp operating system l h industry leader accounting scandal brought end company 2001 speech technology l h bought scansoft became nuance 2005 apple originally licensed software nuance provide speech recognition capability digital assistant siri 2000s darpa sponsored two speech recognition programs effective affordable reusable speech-to-text ears 2002 global autonomous language exploitation gale four teams participated ears program ibm team led bbn limsi univ pittsburgh cambridge university team composed icsi sri university washington ears funded collection switchboard telephone speech corpus containing 260 hours recorded conversations 500 speakers gale program focused arabic mandarin broadcast news speech google first effort speech recognition came 2007 hiring researchers nuance first product goog-411 telephone based directory service recordings goog-411 produced valuable data helped google improve recognition systems google voice search supported 30 languages united states national security agency made use type speech recognition keyword spotting since least 2006 technology allows analysts search large volumes recorded conversations isolate mentions keywords recordings indexed analysts run queries database find conversations interest government research programs focused intelligence applications speech recognition e.g darpa ears program iarpa babel program early 2000s speech recognition still dominated traditional approaches hidden markov models combined feedforward artificial neural networks today however many aspects speech recognition taken deep learning method called long short-term memory lstm recurrent neural network published sepp hochreiter jürgen schmidhuber 1997 lstm rnns avoid vanishing gradient problem learn deep learning tasks require memories events happened thousands discrete time steps ago important speech around 2007 lstm trained connectionist temporal classification ctc started outperform traditional speech recognition certain applications 2015 google speech recognition reportedly experienced dramatic performance jump 49 ctc-trained lstm available google voice smartphone users use deep feedforward non-recurrent networks acoustic modeling introduced later part 2009 geoffrey hinton students university toronto li deng colleagues microsoft research initially collaborative work microsoft university toronto subsequently expanded include ibm google hence shared views four research groups subtitle 2012 review paper microsoft research executive called innovation dramatic change accuracy since 1979 contrast steady incremental improvements past decades application deep learning decreased word error rate 30 innovation quickly adopted across field researchers begun use deep learning techniques language modeling well long history speech recognition shallow form deep form e.g recurrent nets artificial neural networks explored many years 1980s 1990s years 2000s methods never non-uniform internal-handcrafting gaussian mixture model/hidden markov model gmm-hmm technology based generative models speech trained discriminatively number key difficulties methodologically analyzed 1990s including gradient diminishing weak temporal correlation structure neural predictive models difficulties addition lack big training data big computing power early days speech recognition researchers understood barriers hence subsequently moved away neural nets pursue generative modeling approaches recent resurgence deep learning starting around 2009–2010 overcome difficulties hinton et al deng et al reviewed part recent history collaboration colleagues across four groups university toronto microsoft google ibm ignited renaissance applications deep feedforward neural networks speech recognition early 2010s speech recognition also called voice recognition clearly differentiated speaker recognition speaker independence considered major breakthrough systems required training period 1987 ad doll carried tagline finally doll understands – despite fact described children could train respond voice 2017 microsoft researchers reached historical human parity milestone transcribing conversational telephony speech widely benchmarked switchboard task multiple deep learning models used optimize speech recognition accuracy speech recognition word error rate reported low 4 professional human transcribers working together benchmark funded ibm watson speech team task acoustic modeling language modeling important parts modern statistically-based speech recognition algorithms hidden markov models hmms widely used many systems language modeling also used many natural language processing applications document classification statistical machine translation modern general-purpose speech recognition systems based hidden markov models statistical models output sequence symbols quantities hmms used speech recognition speech signal viewed piecewise stationary signal short-time stationary signal short time-scale e.g. 10 milliseconds speech approximated stationary process speech thought markov model many stochastic purposes another reason hmms popular trained automatically simple computationally feasible use speech recognition hidden markov model would output sequence n -dimensional real-valued vectors n small integer 10 outputting one every 10 milliseconds vectors would consist cepstral coefficients obtained taking fourier transform short time window speech decorrelating spectrum using cosine transform taking first significant coefficients hidden markov model tend state statistical distribution mixture diagonal covariance gaussians give likelihood observed vector word general speech recognition systems phoneme different output distribution hidden markov model sequence words phonemes made concatenating individual trained hidden markov models separate words phonemes described core elements common hmm-based approach speech recognition modern speech recognition systems use various combinations number standard techniques order improve results basic approach described typical large-vocabulary system would need context dependency phonemes phonemes different left right context different realizations hmm states would use cepstral normalization normalize different speaker recording conditions speaker normalization might use vocal tract length normalization vtln male-female normalization maximum likelihood linear regression mllr general speaker adaptation features would so-called delta delta-delta coefficients capture speech dynamics addition might use heteroscedastic linear discriminant analysis hlda might skip delta delta-delta coefficients use splicing lda-based projection followed perhaps heteroscedastic linear discriminant analysis global semi-tied co variance transform also known maximum likelihood linear transform mllt many systems use so-called discriminative training techniques dispense purely statistical approach hmm parameter estimation instead optimize classification-related measure training data examples maximum mutual information mmi minimum classification error mce minimum phone error mpe decoding speech term happens system presented new utterance must compute likely source sentence would probably use viterbi algorithm find best path choice dynamically creating combination hidden markov model includes acoustic language model information combining statically beforehand finite state transducer fst approach possible improvement decoding keep set good candidates instead keeping best candidate use better scoring function scoring rate good candidates may pick best one according refined score set candidates kept either list n-best list approach subset models lattice scoring usually done trying minimize bayes risk approximation thereof instead taking source sentence maximal probability try take sentence minimizes expectancy given loss function regards possible transcriptions i.e. take sentence minimizes average distance possible sentences weighted estimated probability loss function usually levenshtein distance though different distances specific tasks set possible transcriptions course pruned maintain tractability efficient algorithms devised score lattices represented weighted finite state transducers edit distances represented finite state transducer verifying certain assumptions dynamic time warping approach historically used speech recognition largely displaced successful hmm-based approach dynamic time warping algorithm measuring similarity two sequences may vary time speed instance similarities walking patterns would detected even one video person walking slowly another walking quickly even accelerations deceleration course one observation dtw applied video audio graphics – indeed data turned linear representation analyzed dtw well-known application automatic speech recognition cope different speaking speeds general method allows computer find optimal match two given sequences e.g. time series certain restrictions sequences warped non-linearly match sequence alignment method often used context hidden markov models neural networks emerged attractive acoustic modeling approach asr late 1980s since neural networks used many aspects speech recognition phoneme classification isolated word recognition audiovisual speech recognition audiovisual speaker recognition speaker adaptation neural networks make fewer explicit assumptions feature statistical properties hmms several qualities making attractive recognition models speech recognition used estimate probabilities speech feature segment neural networks allow discriminative training natural efficient manner however spite effectiveness classifying short-time units individual phonemes isolated words early neural networks rarely successful continuous recognition tasks limited ability model temporal dependencies one approach limitation use neural networks pre-processing feature transformation dimensionality reduction step prior hmm based recognition however recently lstm related recurrent neural networks rnns time delay neural networks tdnn demonstrated improved performance area deep neural networks denoising autoencoders also investigation deep feedforward neural network dnn artificial neural network multiple hidden layers units input output layers similar shallow neural networks dnns model complex non-linear relationships dnn architectures generate compositional models extra layers enable composition features lower layers giving huge learning capacity thus potential modeling complex patterns speech data success dnns large vocabulary speech recognition occurred 2010 industrial researchers collaboration academic researchers large output layers dnn based context dependent hmm states constructed decision trees adopted recent overview articles one fundamental principle deep learning away hand-crafted feature engineering use raw features principle first explored successfully architecture deep autoencoder raw spectrogram linear filter-bank features showing superiority mel-cepstral features contain stages fixed transformation spectrograms true raw features speech waveforms recently shown produce excellent larger-scale speech recognition results since 2014 much research interest end-to-end asr traditional phonetic-based i.e. hmm-based model approaches required separate components training pronunciation acoustic language model end-to-end models jointly learn components speech recognizer valuable since simplifies training process deployment process example n-gram language model required hmm-based systems typical n-gram language model often takes several gigabytes memory making impractical deploy mobile devices consequently modern commercial asr systems google apple 2017 deployed cloud require network connection opposed device locally first attempt end-to-end asr connectionist temporal classification ctc -based systems introduced alex graves google deepmind navdeep jaitly university toronto 2014 model consisted recurrent neural networks ctc layer jointly rnn-ctc model learns pronunciation acoustic model together however incapable learning language due conditional independence assumptions similar hmm consequently ctc models directly learn map speech acoustics english characters models make many common spelling mistakes must rely separate language model clean transcripts later baidu expanded work extremely large datasets demonstrated commercial success chinese mandarin english 2016 university oxford presented lipnet first end-to-end sentence-level lip reading model using spatiotemporal convolutions coupled rnn-ctc architecture surpassing human-level performance restricted grammar dataset large-scale cnn-rnn-ctc architecture presented 2018 google deepmind achieving 6 times better performance human experts alternative approach ctc-based models attention-based models attention-based asr models introduced simultaneously chan et al carnegie mellon university google brain bahdanau et al university montreal 2016 model named listen attend spell las literally listens acoustic signal pays attention different parts signal spells transcript one character time unlike ctc-based models attention-based models conditional-independence assumptions learn components speech recognizer including pronunciation acoustic language model directly means deployment need carry around language model making practical deployment onto applications limited memory end 2016 attention-based models seen considerable success including outperforming ctc models without external language model various extensions proposed since original las model latent sequence decompositions lsd proposed carnegie mellon university mit google brain directly emit sub-word units natural english characters university oxford google deepmind extended las watch listen attend spell wlas handle lip reading surpassing human-level performance typically manual control input example means finger control steering-wheel enables speech recognition system signalled driver audio prompt following audio prompt system listening window may accept speech input recognition simple voice commands may used initiate phone calls select radio stations play music compatible smartphone mp3 player music-loaded flash drive voice recognition capabilities vary car make model recent car models offer natural-language speech recognition place fixed set commands allowing driver use full sentences common phrases systems therefore need user memorize set fixed command words health care sector speech recognition implemented front-end back-end medical documentation process front-end speech recognition provider dictates speech-recognition engine recognized words displayed spoken dictator responsible editing signing document back-end deferred speech recognition provider dictates digital dictation system voice routed speech-recognition machine recognized draft document routed along original voice file editor draft edited report finalized deferred speech recognition widely used industry currently one major issues relating use speech recognition healthcare american recovery reinvestment act 2009 arra provides substantial financial benefits physicians utilize emr according meaningful use standards standards require substantial amount data maintained emr commonly referred electronic health record ehr use speech recognition naturally suited generation narrative text part radiology/pathology interpretation progress note discharge summary ergonomic gains using speech recognition enter structured discrete data e.g. numeric values codes list controlled vocabulary relatively minimal people sighted operate keyboard mouse significant issue ehrs expressly tailored take advantage voice-recognition capabilities large part clinician interaction ehr involves navigation user interface using menus tab/button clicks heavily dependent keyboard mouse voice-based navigation provides modest ergonomic benefits contrast many highly customized systems radiology pathology dictation implement voice macros use certain phrases – e.g. normal report automatically fill large number default values and/or generate boilerplate vary type exam – e.g. chest x-ray vs. gastrointestinal contrast series radiology system alternative navigation hand cascaded use speech recognition information extraction studied way fill handover form clinical proofing sign-off results encouraging paper also opens data together related performance benchmarks processing software research development community studying clinical documentation language-processing prolonged use speech recognition software conjunction word processors shown benefits short-term-memory restrengthening brain avm patients treated resection research needs conducted determine cognitive benefits individuals whose avms treated using radiologic techniques substantial efforts devoted last decade test evaluation speech recognition fighter aircraft particular note us program speech recognition advanced fighter technology integration afti /f-16 aircraft f-16 vista program france mirage aircraft programs uk dealing variety aircraft platforms programs speech recognizers operated successfully fighter aircraft applications including setting radio frequencies commanding autopilot system setting steer-point coordinates weapons release parameters controlling flight display working swedish pilots flying jas-39 gripen cockpit englund 2004 found recognition deteriorated increasing g-loads report also concluded adaptation greatly improved results cases introduction models breathing shown improve recognition scores significantly contrary might expected effects broken english speakers found evident spontaneous speech caused problems recognizer might expected restricted vocabulary proper syntax could thus expected improve recognition accuracy substantially eurofighter typhoon currently service uk raf employs speaker-dependent system requiring pilot create template system used safety-critical weapon-critical tasks weapon release lowering undercarriage used wide range cockpit functions voice commands confirmed visual and/or aural feedback system seen major design feature reduction pilot workload even allows pilot assign targets aircraft two simple voice commands wingmen five commands speaker-independent systems also developed test f35 lightning ii jsf alenia aermacchi m-346 master lead-in fighter trainer systems produced word accuracy scores excess 98 problems achieving high recognition accuracy stress noise pertain strongly helicopter environment well jet fighter environment acoustic noise problem actually severe helicopter environment high noise levels also helicopter pilot general wear facemask would reduce acoustic noise microphone substantial test evaluation programs carried past decade speech recognition systems applications helicopters notably u.s. army avionics research development activity avrada royal aerospace establishment rae uk work france included speech recognition puma helicopter also much useful work canada results encouraging voice applications included control communication radios setting navigation systems control automated target handover system fighter applications overriding issue voice helicopters impact pilot effectiveness encouraging results reported avrada tests although represent feasibility demonstration test environment much remains done speech recognition overall speech technology order consistently achieve performance improvements operational settings training air traffic controllers atc represents excellent application speech recognition systems many atc training systems currently require person act pseudo-pilot engaging voice dialog trainee controller simulates dialog controller would conduct pilots real atc situation speech recognition synthesis techniques offer potential eliminate need person act pseudo-pilot thus reducing training support personnel theory air controller tasks also characterized highly structured speech primary output controller hence reducing difficulty speech recognition task possible practice rarely case faa document 7110.65 details phrases used air traffic controllers document gives less 150 examples phrases number phrases supported one simulation vendors speech recognition systems excess 500,000 usaf usmc us army us navy faa well number international atc training organizations royal australian air force civil aviation authorities italy brazil canada currently using atc simulators speech recognition number different vendors asr commonplace field telephony becoming widespread field computer gaming simulation telephony systems asr predominantly used contact centers integrating ivr systems despite high level integration word processing general personal computing field document production asr seen expected increases use improvement mobile processor speeds made speech recognition practical smartphones speech used mostly part user interface creating predefined custom speech commands language learning speech recognition useful learning second language teach proper pronunciation addition helping person develop fluency speaking skills students blind see blindness education low vision benefit using technology convey words hear computer recite well use computer commanding voice instead look screen keyboard students physically disabled suffer repetitive strain injury/other injuries upper extremities relieved worry handwriting typing working scribe school assignments using speech-to-text programs also utilize speech recognition technology freely enjoy searching internet using computer home without physically operate mouse keyboard speech recognition allow students learning disabilities become better writers saying words aloud increase fluidity writing alleviated concerns regarding spelling punctuation mechanics writing also see learning disability use voice recognition software conjunction digital audio recorder personal computer running word-processing software proven positive restoring damaged short-term-memory capacity stroke craniotomy individuals people disabilities benefit speech recognition programs individuals deaf hard hearing speech recognition software used automatically generate closed-captioning conversations discussions conference rooms classroom lectures and/or religious services speech recognition also useful people difficulty using hands ranging mild repetitive stress injuries involve disabilities preclude using conventional computer input devices fact people used keyboard lot developed rsi became urgent early market speech recognition speech recognition used deaf telephony voicemail text relay services captioned telephone individuals learning disabilities problems thought-to-paper communication essentially think idea processed incorrectly causing end differently paper possibly benefit software technology bug proof also whole idea speak text hard intellectually disabled person due fact rare anyone tries learn technology teach person disability type technology help dyslexia disabilities still question effectiveness product problem hindering effective although kid may able say word depending clear say technology may think saying another word input wrong one giving work fix causing take time fixing wrong word performance speech recognition systems usually evaluated terms accuracy speed accuracy usually rated word error rate wer whereas speed measured real time factor measures accuracy include single word error rate swer command success rate csr speech recognition machine complex problem however vocalizations vary terms accent pronunciation articulation roughness nasality pitch volume speed speech distorted background noise echoes electrical characteristics accuracy speech recognition may vary following mentioned earlier article accuracy speech recognition may vary depending following factors discontinuous speech full sentences separated silence used therefore becomes easier recognize speech well isolated speech continuous speech naturally spoken sentences used therefore becomes harder recognize speech different isolated discontinuous speech constraints often represented grammar speech recognition multi-levelled pattern recognition task e.g known word pronunciations legal word sequences compensate errors uncertainties lower level telephone speech sampling rate 8000 samples per second computed every 10 ms one 10 ms section called frame analysis four-step neural network approaches explained information sound produced air medium vibration register ears machines receivers basic sound creates wave two descriptions amplitude strong frequency often vibrates per second speech recognition become means attack theft accidental operation example activation words like alexa spoken audio video broadcast cause devices homes offices start listening input inappropriately possibly take unwanted action voice-controlled devices also accessible visitors building even outside building heard inside attackers may able gain access personal information like calendar address book contents private messages documents may also able impersonate user send messages make online purchases two attacks demonstrated use artificial sounds one transmits ultrasound attempt send commands without nearby people noticing adds small inaudible distortions speech music specially crafted confuse specific speech recognition system recognizing music speech make sounds like one command human sound like different command system popular speech recognition conferences held year two include speechtek speechtek europe icassp interspeech/eurospeech ieee asru conferences field natural language processing acl naacl emnlp hlt beginning include papers speech processing important journals include ieee transactions speech audio processing later renamed ieee transactions audio speech language processing since sept 2014 renamed ieee/acm transactions audio speech language processing—after merging acm publication computer speech language speech communication books like fundamentals speech recognition lawrence rabiner useful acquire basic knowledge may fully date 1993 another good source statistical methods speech recognition frederick jelinek spoken language processing 2001 xuedong huang etc computer speech manfred r. schroeder second edition published 2004 speech processing dynamic optimization-oriented approach published 2003 li deng doug o'shaughnessey updated textbook speech language processing 2008 jurafsky martin presents basics state art asr speaker recognition also uses features front-end processing classification techniques done speech recognition comprehensive textbook fundamentals speaker recognition depth source date details theory practice good insight techniques used best modern systems gained paying attention government sponsored evaluations organised darpa largest speech recognition-related project ongoing 2007 gale project involves speech recognition translation components good accessible introduction speech recognition technology history provided general audience book voice machine building computers understand speech roberto pieraccini 2012 recent book speech recognition automatic speech recognition deep learning approach publisher springer written microsoft researchers d. yu l. deng published near end 2014 highly mathematically oriented technical detail deep learning methods derived implemented modern speech recognition systems based dnns related deep learning methods related book published earlier 2014 deep learning methods applications l. deng d. yu provides less technical methodology-focused overview dnn-based speech recognition 2009–2014 placed within general context deep learning applications including speech recognition also image recognition natural language processing information retrieval multimodal processing multitask learning terms freely available resources carnegie mellon university sphinx toolkit one place start learn speech recognition start experimenting another resource free copyrighted htk book accompanying htk toolkit recent state-of-the-art techniques kaldi toolkit used 2017 mozilla launched open source project called common voice gather big database voices would help build free speech recognition project deepspeech available free github using google open source platform tensorflow commercial cloud based speech recognition apis broadly available aws azure ibm gcp demonstration on-line speech recognizer available cobalt webpage software resources see list speech recognition software
node21:Wikipedia entry. Entry name: Oracle_RAC. Entry content: oracle rac database computing oracle real application clusters rac — option oracle database software produced oracle corporation introduced 2001 oracle9i — provides software clustering high availability oracle database environments oracle corporation includes rac enterprise edition provided nodes clustered using oracle clusterware oracle rac allows multiple computers run oracle rdbms software simultaneously accessing single database thus providing clustering non-rac oracle database single instance accesses single database database consists collection data files control files redo logs located disk instance comprises collection oracle-related memory background processes run computer system oracle rac environment 2 instances concurrently access single database allows application user connect either computer access single coordinated set data instances connected interconnect enables instances sync accessing data main aim oracle rac implement clustered database provide performance scalability resilience high availability data instance level oracle rac depends infrastructure component oracle clusterware coordinate multiple servers sharing data storage fan fast application notification technology detects down-states rac administrators use codice_1 tool manage rac configurations prior oracle 9 network-clustered oracle databases used storage device data-transfer medium meaning one node would write data block disk another node would read data disk inherent disadvantage lackluster performance oracle 9i addressed issue rac uses dedicated network connection communications internal cluster since computers/instances rac access database overall system must guarantee coordination data changes different computers whenever computer queries data receives current version — even another computer recently modified data oracle rac refers functionality cache fusion cache fusion involves ability oracle rac fuse in-memory data cached physically separately computer single global cache oracle grid naming service gns handles name resolution cluster registry trace file analyzer tfa aids collecting rac diagnostic data relative single-instance oracle database oracle rac adds additional complexity database automation makes sense single-instance databases becomes even necessary clustered databases increased complexity oracle real application clusters rac introduced oracle 9i 2001 supersedes oracle parallel server ops database option whereas oracle9i required external clusterware known vendor clusterware like trucluster veritas cluster server sun cluster unix flavors except linux windows oracle provided free clusterware called cluster ready services crs oracle 10g oracle clusterware product available operating systems release oracle database 10g release 2 10.2 cluster ready services renamed oracle clusterware using oracle 10g higher oracle clusterware clusterware need platforms oracle rac operates except tru cluster case need vendor clusterware still use clusterware vendors clusterware certified oracle rac rac write-transaction must take ownership relevant area database typically involves request across cluster interconnection local ip network transfer data-block ownership another node one wishing write takes relatively long time tens milliseconds compared single database-node using in-memory operations many types applications time spent coordinating block access across systems low relative many operations system rac scale comparably single system moreover high read-transactional databases data-warehousing applications work well rac need ownership-transfer exists oracle 11g made many enhancements area performs lot better earlier versions read-only workloads overhead resource mastering ownership-transfer minimal fewer three nodes request resource cluster obtained maximum three hops owner-master-requestor makes oracle rac horizontally scalable many nodes application vendors sap use oracle rac demonstrate scalability application biggest oltp benchmarks oracle rac oracle rac 11g supports 100 nodes applications rac may require careful application partitioning enhance performance application scales linearly smp machine may scale linearly rac however application scale linearly smp scale ported rac short application scalability based well application scales single instance shared-nothing shared-everything architectures advantages dbms vendors industry analysts regularly debate matter example microsoft touts comparison sql server 2005 oracle 10g rac oracle corporation offered shared nothing architecture rdbms advent ibm sp sp2 release 7.x mpp editions virtual shared drives vsd used create shared everything implementation shared nothing architecture shared-everything architectures share data disk data memory nodes cluster contrast shared-nothing architectures share none commercially available databases offer shared-everything architecture ibm db2 z/os ibm mainframe operating-system provided high-performance data-sharing option since mid-1990s ibm released mainframe hardware software-clustering infrastructure late 2009 ibm announced db2 purescale shared-disk clustering scheme db2 9.8 aix mimics parallel sysplex implementation behind db2 data sharing mainframe february 2008 sybase released adaptive server enterprise cluster edition resembles oracle rac shared-everything design although technically shared-everything sybase also provides column-based relational database focused analytic datawarehouse applications called sybase iq configured run shared disk mode shared-nothing architectures share neither data disk data memory nodes cluster contrast shared-everything architectures share competitive products offering shared-nothing architectures include
node22:Wikipedia entry. Entry name: Access_register. Entry content: access register ibm terminology access registers hardware registers processor work conjunction general purpose registers giving address space access data spaces address spaces order retrieve data ars introduced mvs/esa",wikics,nc
"Classify the wikipedia page represented by node30 using its subgraph data (text attributes and connections) as follows.

node0: Ubuntu flavor with Budgie desktop, evolved from unofficial Remix to official, features stable core and Solus-derived interface.  
node1: Rolling-release Linux focused on KDE/Qt, uses Pacman, praised for bleeding-edge Plasma and simplicity.  
node2: macOS package manager, open-source via GitHub, supports GUI apps (Cask) and cross-platform extensions.  
node3: CentOS-based Linux for schools, simplifies lab setups via LTSP for K-12 environments.  
node4: Linux kernel 2.6 POSIX threading improvement, replacing LinuxThreads for better performance and compliance.  
node5: Error logs for debugging kernel issues, distinct from panics, aid in system stability fixes.  
node6: Co-founded FreeBSD, led ports/SysInstall, worked at Apple/iXsystems, involved in open-source projects.  
node7: Linux SCSI target kernel module, supports iSCSI/Fibre Channel, enabling storage virtualization in cloud/enterprise.  
node8: Samsung’s Android UI skin, evolved since 2008, featured gesture controls, later replaced by Samsung Experience.  
node9: Debian-based OS for seniors/novices, low specs, Handymenu interface, accessibility tools included.  
node10: Discontinued macOS firewall with cookie清理, traffic stats, and privacy tools, bundled with antivirus.  
node11: Linux package manager for Red Hat/Fedora, manages dependencies, uses .rpm files, supports source/binary packages.  
node12: Ubuntu-derived distro for repurposed PCs, uses XFCE/LXDE, aimed at humanitarian tech donations.  
node13: Auto-tech alliance promoting Android in cars, founded at CES 2014 by major firms.  
node14: Defunct mobile OS (2010), Linux/GNOME-based, targeted Palm OS revival, never commercially released.
node15: Linux console system with virtual terminals, kernel-managed text input/output, supporting monospace fonts and serial ports.  
node16: Security module restricting app capabilities via profiles, easier than SELinux, integrated into Ubuntu for mandatory access control.  
node17: Lightweight Ubuntu/Lubuntu-based distro with LXDE, optimized for old hardware, praised for speed and aesthetics.  
node18: Package manager (Snap) enabling cross-distro deployment, self-contained apps, but criticized for autoupdates and closed-source elements.  
node19: Linux tool to execute remote commands on Windows systems via network, akin to PsExec.  
node20: Ubuntu’s boot splash screen (replaced by Plymouth), framebuffer-based, operating in userspace.  
node21: Fast-booting Slackware-based KDE distro with minimal footprint, customizable via web interface.  
node22: Controversial book alleging Linux used Minix code improperly, widely rejected, funded by Microsoft.  
node23: Permissive BSD licenses allow proprietary use; 3-clause version omits endorsement clauses, widely adopted in FOSS.  
node24: Debian’s terminal-based package manager with interactive search, Easter egg for ""moo"", replaces apt-get.  
node25: Ubuntu’s firewall frontend simplifying iptables rules, default on Ubuntu systems.  
node26: Nokia’s Symbian-based business smartphone platform (2000–2005), featuring QWERTY keyboards.  
node27: Guide to build Linux from source, emphasizing customization and learning system internals.  
node28: Arch-based GNU/Linux-libre distro prioritizing freedom, FSF-approved, uses OpenRC instead of systemd.  
node29: Dynamic tracing tool for system debugging, originated in Solaris, ported to Linux/Windows, Oracle released under GPL.  
node30: Ubuntu-derived OS for Castilla-La Mancha, aims to bridge digital divide via free software.

the connection relationship among the nodes mentioned:
 <node0, node1>,<node0, node3>,<node0, node9>,<node0, node12>,<node0, node16>,<node0, node17>,<node0, node18>,<node0, node20>,<node0, node21>,<node0, node24>,<node0, node25>,<node0, node28>,<node0, node30>,<node1, node3>,<node1, node9>,<node1, node17>,<node1, node21>,<node1, node28>,<node1, node30>,<node2, node11>,<node2, node18>,<node2, node24>,<node3, node9>,<node3, node17>,<node3, node21>,<node3, node28>,<node4, node5>,<node5, node7>,<node5, node13>,<node5, node14>,<node5, node15>,<node5, node16>,<node5, node22>,<node5, node27>,<node6, node23>,<node6, node29>,<node7, node13>,<node7, node14>,<node7, node15>,<node7, node16>,<node8, node13>,<node9, node17>,<node9, node21>,<node9, node24>,<node9, node28>,<node9, node30>,<node10, node25>,<node11, node18>,<node11, node19>,<node11, node24>,<node12, node20>,<node12, node25>,<node12, node30>,<node13, node15>,<node13, node16>,<node14, node15>,<node14, node16>,<node14, node26>,<node15, node16>,<node16, node20>,<node16, node25>,<node16, node30>,<node17, node21>,<node17, node23>,<node17, node28>,<node17, node30>,<node18, node20>,<node18, node24>,<node18, node25>,<node18, node30>,<node20, node24>,<node20, node25>,<node20, node30>,<node21, node28>,<node21, node30>,<node23, node27>,<node23, node29>,<node24, node25>,<node24, node30>,<node25, node30>,<node28, node30>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",operating systems,"node0: Ubuntu flavor with Budgie desktop, evolved from unofficial Remix to official, features stable core and Solus-derived interface.  
node1: Rolling-release Linux focused on KDE/Qt, uses Pacman, praised for bleeding-edge Plasma and simplicity.  
node2: macOS package manager, open-source via GitHub, supports GUI apps (Cask) and cross-platform extensions.  
node3: CentOS-based Linux for schools, simplifies lab setups via LTSP for K-12 environments.  
node4: Linux kernel 2.6 POSIX threading improvement, replacing LinuxThreads for better performance and compliance.  
node5: Error logs for debugging kernel issues, distinct from panics, aid in system stability fixes.  
node6: Co-founded FreeBSD, led ports/SysInstall, worked at Apple/iXsystems, involved in open-source projects.  
node7: Linux SCSI target kernel module, supports iSCSI/Fibre Channel, enabling storage virtualization in cloud/enterprise.  
node8: Samsung’s Android UI skin, evolved since 2008, featured gesture controls, later replaced by Samsung Experience.  
node9: Debian-based OS for seniors/novices, low specs, Handymenu interface, accessibility tools included.  
node10: Discontinued macOS firewall with cookie清理, traffic stats, and privacy tools, bundled with antivirus.  
node11: Linux package manager for Red Hat/Fedora, manages dependencies, uses .rpm files, supports source/binary packages.  
node12: Ubuntu-derived distro for repurposed PCs, uses XFCE/LXDE, aimed at humanitarian tech donations.  
node13: Auto-tech alliance promoting Android in cars, founded at CES 2014 by major firms.  
node14: Defunct mobile OS (2010), Linux/GNOME-based, targeted Palm OS revival, never commercially released.
node15: Linux console system with virtual terminals, kernel-managed text input/output, supporting monospace fonts and serial ports.  
node16: Security module restricting app capabilities via profiles, easier than SELinux, integrated into Ubuntu for mandatory access control.  
node17: Lightweight Ubuntu/Lubuntu-based distro with LXDE, optimized for old hardware, praised for speed and aesthetics.  
node18: Package manager (Snap) enabling cross-distro deployment, self-contained apps, but criticized for autoupdates and closed-source elements.  
node19: Linux tool to execute remote commands on Windows systems via network, akin to PsExec.  
node20: Ubuntu’s boot splash screen (replaced by Plymouth), framebuffer-based, operating in userspace.  
node21: Fast-booting Slackware-based KDE distro with minimal footprint, customizable via web interface.  
node22: Controversial book alleging Linux used Minix code improperly, widely rejected, funded by Microsoft.  
node23: Permissive BSD licenses allow proprietary use; 3-clause version omits endorsement clauses, widely adopted in FOSS.  
node24: Debian’s terminal-based package manager with interactive search, Easter egg for ""moo"", replaces apt-get.  
node25: Ubuntu’s firewall frontend simplifying iptables rules, default on Ubuntu systems.  
node26: Nokia’s Symbian-based business smartphone platform (2000–2005), featuring QWERTY keyboards.  
node27: Guide to build Linux from source, emphasizing customization and learning system internals.  
node28: Arch-based GNU/Linux-libre distro prioritizing freedom, FSF-approved, uses OpenRC instead of systemd.  
node29: Dynamic tracing tool for system debugging, originated in Solaris, ported to Linux/Windows, Oracle released under GPL.  
node30: Ubuntu-derived OS for Castilla-La Mancha, aims to bridge digital divide via free software.","node0:Wikipedia entry. Entry name: Ubuntu_Budgie. Entry content: ubuntu budgie ubuntu budgie formerly budgie-remix official community flavor ubuntu featuring budgie desktop combines stable thoroughly-tested ubuntu core modern lightweight traditional-looking desktop developed solus project ubuntu budgie started unofficial community flavor parallel ubuntu 16.04 lts referred budgie-remix budgie-remix 16.10 later released strictly following time frame issued ubuntu 16.10 eventually recognized official community flavor ubuntu rebranded ubuntu budgie vincenzo bovino hired new brand pr manager ubuntu budgie 17.04 released april 2017 updated version 17.10 october 2017 ubuntu budgie 18.10 32-bit support dropped 32-bit support also dropped ubuntu mate budgie-remix 16.04 released april 25 2016 four days release ubuntu 16.04 system contains budgie desktop 10.2.5 window manager based mutter customizable panel notification center settings arc-gtk+ theme used compared ubuntu 16.04 budgie-remix nautilus version 3.18 time ubuntu version nautilus 3.14 also dock-panel plank version 0.11.1 gedit version 3.18 gnome 3.18 photos gthumb 3.4.3 rhythmbox 3.3 totem 3.18 gnome terminal 3.18 libreoffice 5.1.2 mozilla firefox 45.0 transmission 2.84 gtk+ 3.18.9 mesa 11.2.0 xorg 1.18.3 linux kernel 4.4.0. budgie-remix 16.10 released october 16 2016 three days release ubuntu 16.10 system contains shell budgie desktop 10.2.7 gtk+ 3.22 linux kernel 4.8 many new features implemented version full disk encryption home folder encryption support multiple languages installation theme design arc gtk+ new theme icons pocillo one developers budgie-remix david mohammed says ubuntu budgie 17.04 released april 19 2017. budgie-remix renamed name distribution became official ubuntu community system contains budgie desktop 10.2.9 shell linux 4.10 kernel mesa 17.0.3 xorg 1.19.3 budgie-welcome application updated support application indicator appeared sound applets managed gnome 3.24 applications enabled gnome terminal replaced termix chromium replaced google chrome gtk+ theme support qt enabled use theme design arc gtk+ theme icons moka record release version written follows ubuntu budgie 17.10 released october 19 2017 system contains budgie desktop 10.4 shell linux 4.13 kernel budgie 10.4 desktop environment equipped set native features include new stylish alt-tab support spotify raven support switching window controls left right support smb files encrypted volumes addition applets supports customizing appearance dates times addition support left right side panels budgie desktop 10.4 support converting panels dock transparency dynamic auto-image panels ability replenish bottom panel work without terrible jump effect noteworthy improvements release ubuntu budgie 17.10 include night light caffeine tools tilix default terminal emulator instead termix well support tilix quake mode f12 key updated panel icons new wallpapers december 20 2017 canonical withdrew ubuntu 17.10 distribution october hid link site downloading reason critical bug bios damage lenovo notebook models one acer model january 12 2018 version 17.10.1 released contained correction serious problem version 17.10 ubuntu budgie released april 26 2018 system includes linux 4.15 kernel became possible install openvnc network-manager new applets appeared quick note notes dropby downloading viewing data usb devices hot corners moving windows corner screen windowpreviews viewing open windows clockworks viewing time zones autoswitch tying keyboard layout application window mover order quickly move window another virtual desktop gnome applications updated version 3.28 nautilus version 3.26
node1:Wikipedia entry. Entry name: KaOS. Entry content: kaos kaos linux distribution built scratch specific focus qt kde although kaos currently based linux kernel developers constantly evaluating illumos kernel say future switch wish first version kaos released kdeos 2013 prevent confusion distribution name desktop environment kde name changed kaos september 2013 kaos distributed via iso image exclusively supports 64-bit processors idea behind kaos create tightly integrated rolling transparent distribution modern desktop build scratch specific focus focus one de kde plasma one toolkit qt one architecture x86_64 plus focus evaluating selecting suitable tools applications phoronix wrote 2016 overall quite pleased niche distribution kaos easy install quickly running bleeding-edge kde plasma 5 stack overall fun pleasant hours spent kaos fossmint stated 2017 kaos modern open-source beautifully designed qt kde-focused linux distro rolling release ships kde plasma default desktop environment uses pacman package manager 3-group structure repository github fact rolling release means never need worry future updates moment version installed like case ubuntu like would need consider whether perform clean installation another “ major version ” hectic geek reviewed kaos 2014 wrote distribution fast included necessary applications jesse smith distrowatch weekly wrote review kaos 2014.04 smith said features kaos worked well robert rijkhoff reviewed kaos 2017.09 distrowatch weekly said kaos seems trying little bit hard different zdnet wrote hands-on review kaos 2014.06 dedoimedo reviewed kaos 2014.12 jack wallen linux.com stated opinion kaos 2016 said distribution beautiful
node2:Wikipedia entry. Entry name: Homebrew_(package_management_software). Entry content: homebrew package management software homebrew free open-source software package management system simplifies installation software apple macos operating system linux name intended suggest idea building software mac depending user taste originally written max howell package manager gained popularity ruby rails community earned praise extensibility homebrew recommended ease use well integration command line homebrew non-profit project member software freedom conservancy run entirely unpaid volunteers homebrew made extensive use github expand support several packages user contributions 2010 homebrew third-most-forked repository github 2012 homebrew largest number new contributors github 2013 homebrew largest number contributors issues closed project github homebrew spawned several sub-projects linuxbrew linux port officially merged homebrew homebrew cask builds upon homebrew focuses installation gui applications taps dedicated specific areas programming languages like php homebrew written max howell 2009 march 2013 homebrew successfully completed kickstarter campaign raise funds servers test build formulae managed raise december 13 2013 homebrew repository migrated howell github account project account february 2015 due downtime sourceforge resulted binaries unavailable homebrew moved hosting bintray september 21 2016 homebrew version 1.0.0 released december 2018 homebrew maintained team 21 people january 2019 linuxbrew merged back homebrew adding beta support linux windows subsystem linux homebrew ’ feature set february 2 2019 homebrew version 2.0.0 released homebrew written ruby programming language targets version ruby comes installed macos operating system default installed codice_1 consists git repository allowing user update homebrew pulling updated repository github package manager builds software source using formulae ruby scripts constructed homebrew domain specific language dsl managing dependencies downloading source files configuring compiling software binary packages called bottles provide pre-built formulae default options homebrew honor default privileges codice_1 directory ownership changed root group permissions wheel group installing user admin group specifically mode changes codice_3 codice_4 files directories ownership changed installer considered major security flaw homebrew collects installation build error operating system version statistics via google analytics possible opt command codice_5 users view analytics data last 30 90 365 days homebrew website
node3:Wikipedia entry. Entry name: K12LTSP. Entry content: k12ltsp k12ltsp modification centos operating system linux terminal server project ltsp packages integrated designed easy install configure k12ltsp offshoot linux school project k12linux k-12 often used united states refer grade school kindergarten high school 12th grade
node4:Wikipedia entry. Entry name: Native_POSIX_Thread_Library. Entry content: native posix thread library native posix thread library nptl implementation posix threads specification linux operating system 2.6 version linux kernel processes schedulable entities special facilities threads however system call — clone — creates copy calling process copy shares address space caller linuxthreads project used system call provide kernel-level threads previous thread implementations linux worked entirely userland unfortunately partially complied posix particularly areas signal handling scheduling inter-process synchronization primitives improve upon linuxthreads clear kernel support new threading library would required two competing projects started address requirement ngpt next generation posix threads worked team included developers ibm nptl developers red hat ngpt team collaborated closely nptl team combined best features implementations nptl ngpt project subsequently abandoned mid-2003 merging best features nptl nptl first released red hat linux 9 old-style linux posix threading known trouble threads refuse yield system occasionally take opportunity preempt arises something windows known better time red hat claimed nptl fixed problem article java website java red hat linux 9 nptl part red hat enterprise linux since version 3 linux kernel since version 2.6 fully integrated part gnu c library exists tracing tool nptl called posix thread trace tool ptt open posix test suite opts written testing nptl library posix standard nptl uses similar approach linuxthreads primary abstraction known kernel still process new threads created clone system call called nptl library however nptl requires specialized kernel support implement example contended case synchronisation primitives might require threads sleep wake primitive used known futex nptl so-called 1×1 threads library threads created user via codice_1 library function 1-1 correspondence schedulable entities kernel tasks linux case simplest possible threading implementation alternative nptl 1×1 model
node5:Wikipedia entry. Entry name: Linux_kernel_oops. Entry content: linux kernel oops computing oops deviation correct behavior linux kernel one produces certain error log better-known kernel panic condition results many kinds oops instances oops event may allow continued operation compromised reliability term stand anything simple mistake kernel detects problem kills offending processes prints oops message linux kernel engineers use debugging condition created oops fixing underlying programming error system experienced oops internal resources may longer operational thus even system appears work correctly undesirable side effects may resulted active task killed kernel oops often leads kernel panic system attempts use resources lost official linux kernel documentation regarding oops messages resides file kernel sources logger configurations may affect ability collect oops messages codice_1 software collect submit kernel oopses repository www.kerneloops.org website provides statistics public access reported oopses person familiar technical details computers operating systems oops message might look confusing unlike operating systems windows macos linux chooses present details explaining crash kernel rather display simplified user-friendly message bsod windows simplified crash screen proposed times however currently none development
node6:Wikipedia entry. Entry name: Jordan_Hubbard. Entry content: jordan hubbard jordan k. hubbard born april 8 1963 open source software developer authoring software ardent window manager various open source tools libraries co-founding freebsd project nate williams rodney w. grimes 1993 contributed initial freebsd ports collection package management system sysinstall july 2001 hubbard joined apple computer role manager bsd technology group 2005 title director unix technology october 2007 hubbard promoted director engineering unix technologies apple remained june 2013 july 15 2013 became cto ixsystems also led freenas open source project march 24 2017 announced plan depart ixsystems would joining twoporeguys biotechnology company vp engineering.. january 2019 linkedin profile notes part engineering leadership team uber march 31 1987 hubbard executed rwall command expecting send message every machine network university california berkeley headed distributed unix group command instead began broadcasting hubbard message every machine internet stopped hubbard realised message broadcast remotely received complaints people purdue university university texas even though command terminated resulted hubbard receiving 743 messages complaints including one inspector general arpanet
node7:Wikipedia entry. Entry name: LIO_(SCSI_target). Entry content: lio scsi target computing linux-io lio target open-source implementation scsi target become standard one included linux kernel internally lio initiate sessions instead provides one logical unit numbers luns waits scsi commands scsi initiator performs required input/output data transfers lio supports common storage fabrics including fcoe fibre channel ieee 1394 iscsi iscsi extensions rdma iser scsi rdma protocol srp usb included linux distributions native support lio qemu/kvm libvirt openstack makes lio also storage option cloud deployments lio maintained datera inc. silicon valley vendor storage systems software january 15 2011 lio scsi target engine merged linux kernel mainline kernel version 2.6.38 released march 14 2011 additional fabric modules merged subsequent linux releases competing generic scsi target module linux scst narrower purpose providing linux iscsi target older iet iscsi enterprise target stgt scsi target framework modules also enjoy industry support scsi standard provides extensible semantic abstraction computer data storage devices become lingua franca data storage systems scsi t10 standards define commands protocols scsi command processor sent scsi cdbs electrical optical interfaces various implementations scsi initiator endpoint initiates scsi session scsi target endpoint waits initiator commands executes required i/o data transfers scsi target usually exports one luns initiators operate lio linux scsi target implements generic scsi target provides remote access data storage device types prevalent storage fabrics protocols lio neither directly accesses data directly communicate applications lio provides highly efficient fabric-independent fabric-transparent abstraction semantics numerous data storage device types lio implements modular extensible architecture around versatile highly efficient parallelized scsi command processing engine scsi target engine implements semantics scsi target lio scsi target engine independent specific fabric modules backstore types thus lio supports mixing matching number fabrics backstores time lio scsi target engine implements comprehensive spc-3/spc-4 feature set support high-end features including scsi-3/scsi-4 persistent reservations prs scsi-4 asymmetric logical unit assignment alua vmware vsphere apis array integration vaai t10 dif etc lio configurable via configfs-based kernel api managed via command-line interface api targetcli concept scsi target n't narrowly restricted physical devices scsi bus instead provides generalized model receivers logical scsi fabric includes scsi sessions across interconnects physical scsi bus conceptually scsi target provides generic block storage service server scenario backstores provide scsi target generalized access data storage devices importing via corresponding device drivers backstores n't need physical scsi devices important backstore media types result lio provides generalized model export block storage fabric modules implement frontend scsi target encapsulating abstracting properties various supported interconnect following fabric modules available fibre channel ethernet fcoe fabric module allows transport fibre channel protocol fcp traffic across lossless ethernet networks specification supported large number network storage vendors part technical committee t11 fc-bb-5 standard lio supports standard ethernet nics fcoe fabric module contributed cisco intel released linux 3.0 july 21 2011 fibre channel high-speed network technology primarily used storage networking standardized technical committee t11 international committee information technology standards incits qlogic fibre channel fabric module supports 4- 8-gigabit speeds following hbas fibre channel fabric module low-level driver lld released linux 3.5 july 21 2012 linux 3.9 following qlogic hbas cnas also supported makes lio first open source target support 16-gigabit fibre channel firewire sbp-2 fabric module enables linux export local storage devices via ieee 1394 systems mount ordinary ieee 1394 storage device ieee 1394 serial bus interface standard high-speed communications isochronous real-time data transfer developed apple firewire late 1980s early 1990s macintosh computers supported firewire target disk mode since 1999 firewire sbp-2 fabric module released linux 3.5 july 21 2012 internet small computer system interface iscsi fabric module allows transport scsi traffic across standard ip networks carrying scsi sessions across ip networks iscsi used facilitate data transfers intranets manage storage long distances iscsi used transmit data local area networks lans wide area networks wans internet enable location-independent location-transparent data storage retrieval lio iscsi fabric module also implements number advanced iscsi features increase performance resiliency multiple connections per session mc/s error recovery levels 0-2 erl=0,1,2 lio supports standard ethernet nics iscsi fabric module released linux 3.1 october 24 2011 networks supporting remote direct memory access rdma use iscsi extensions rdma iser fabric module transport iscsi traffic iser permits data transferred directly remote scsi computer memory buffers without intermediate data copies direct data placement ddp using rdma rdma supported infiniband networks ethernet data center bridging dcb networks via rdma converged ethernet roce standard ethernet networks iwarp enhanced tcp offload engine controllers iser fabric module developed together datera mellanox technologies first released linux 3.10 june 30 2013 scsi rdma protocol srp fabric module allows transport scsi traffic across rdma see networks 2013 srp widely used iser although limited scsi peer-to-peer protocol whereas iscsi fully routable srp fabric module supports following mellanox host channel adapters hcas srp fabric module released linux 3.3 march 18 2012 2012 c't magazine measured almost 5000 mb/s throughput lio srp target one mellanox connectx-3 port 56 gbit/s fdr mode sandy bridge pci express 3.0 system four fusion-io iodrive pci express flash memory cards usb gadget fabric module enables linux export local storage devices via universal serial bus usb systems mount ordinary storage device usb designed mid-1990s standardize connection computer peripherals also become common data storage devices usb gadget fabric module released linux 3.5 july 21 2012 targetcli user space single-node management command line interface cli lio supports fabric modules based modular extensible architecture plug-in modules additional fabric modules functionality targetcli provides cli uses underlying generic target library well-defined api thus cli easily replaced complemented ui metaphors gui targetcli implemented python consists three main modules detailed instructions set lio targets found lio wiki targetcli lio included linux distributions per default overview popular ones together initial inclusion dates
node8:Wikipedia entry. Entry name: TouchWiz. Entry content: touchwiz touchwiz samsung touchwiz user interface created designed developed samsung electronics partners featuring full touch user interface touchwiz available samsung devices sometimes incorrectly identified operating system touchwiz used internally samsung smartphones feature phones tablet computers available licensing external parties android version touchwiz also comes samsung-made app store galaxy apps first original edition touchwiz released 2008 1.0 version officially launched original samsung solstice 2009 latest version touchwiz touchwiz 6.0 samsung galaxy j1 mini prime touchwiz nature ux 5.0 samsung galaxy j3 2016 feature refined user interface compared previous versions found samsung older phones released prior galaxy s5 release status bar transparent home screen mode touchwiz nature ux 2.0 touchwiz nature ux 2.5 touchwiz 4.0 galaxy ii galaxy note later updated nature ux features added include panning tilt makes use accelerometer gyroscope phone detect motion touchwiz abandoned samsung late 2016 favor samsung experience touchwiz used samsung proprietary operating systems bada rex well phones based android operating system also present phones running tizen operating system touchwiz central issue apple v. samsung released 2010 support android froyo 2.1 – 2.2 version premiered samsung galaxy s. lite version touchwiz 3.0 reduced features used samsung galaxy proclaim second version touchwiz released 2011 support android gingerbread android honeycomb 2.3 3.2.6 galaxy ii first device preloaded touchwiz 4.0 version includes better hardware acceleration 3.0 well multiple touchscreen options involving multi-touch gestures using phone accelerometer one feature allows users place two fingers screen tilt device towards away zoom respectively panning touchwiz 4.0 allows users scroll home screens moving device side side third version touchwiz renamed touchwiz nature ux released 2012 supported android ice cream sandwich 4.0 galaxy iii galaxy star galaxy note 10.1 first devices preloaded version although lite version used beforehand samsung galaxy tab 2 7.0 touchwiz nature ux contains interactive elements previous version water ripple effect lock screen smart stay feature uses eye tracking technology determine user still watching screen complement touchwiz interface response apple siri version introduces voice samsung intelligent personal assistant version supports android jellybean 4.2.2 released 2013 samsung galaxy s4 first device use touchwiz nature ux 2.0 even eye tracking abilities introduced version smart scroll allows users scroll webpages tilting head downwards upwards respectively touchwiz nature ux 2.5 released 2013 support last updates android jellybean 4.3 4.4 first used galaxy note 3 galaxy note 10.1 2014 edition version completely supports samsung knox security solution well multi-user capabilities camera also improved update shutter lag reduced features like 360° panorama mode added update released 2014 support android kitkat first seen galaxy s5 galaxy note pro 12.2 home screen settings menu made user-friendly larger icons less clutter also icons context menus removed disabled options previously would visible unusable show budget devices samsung galaxy trend 2 lite galaxy j1 ace galaxy v plus feature reduced version touchwiz nature ux 3.0 called touchwiz essence ux adapted devices less 1 gb ram version ultra-power-saving mode drastically extends battery duration making screen grayscale restricting apps used turning features like wi-fi bluetooth slightly modified version touchwiz nature ux 3.0 released 2014 galaxy note 4 galaxy note edge galaxy a-series 2015 changes made minor aesthetic ones including overhaul cluttered settings menu inclusion quick setting shortcuts centralization lock screen clock however camera application stripped basic features nonetheless gaining af/ae lock version comes galaxy s5 supports android lollipop released 2015 update 4.0 eventually became available galaxy s5 note 3 note 4 lollipop-compatible devices less features version touchwiz continued design initially seen galaxy s5 slightly rounded icons also incorporated lollipop additions changes making notification drop-down menu merely overlay instead full-screen drawer touchwiz nature ux 4.0 also included visual overhaul whole system changing black background system apps white theme similar touchwiz ux 3.5 seen note 4 series black theme place since original galaxy reduced battery consumption samsung mainly uses amoled display technology changed patent licensing deal google required touchwiz interface follow design stock android closely touchwiz 5.0 samsung reverted earlier simpler naming system without nature ux infix perhaps reflect aesthetic changes version released 2015 primarily samsung galaxy s6 supports later updates android lollipop 5.0.2 5.1.1 update cleaned user interface reduced number duplicate functions used brighter simpler colours new version touchwiz 5.0 released september 2015 galaxy note 5 s6 edge+ new version features updated iconography stock apps featuring squircle icons instead freeform version touchwiz began initial beta testing android marshmallow galaxy s6 december 2015 users signed beta program became formally available february 2016 features redesigned notification drop-down colour overhaul replacing original blue green hue white version also removed weather centring enlarging clock lock screen well bringing back ability customize shortcuts lock screen icons slightly modified flatter look removing shadows featured previously smart manager removed app moved settings option instead version samsung also added ability change display density setting although initially accessible third-party app setting hidden system update galaxy s7 s7 edge made official allowing users change display settings touchwiz 6.0 also includes google additions android doze app standby improve battery performance although samsung app optimization feature remains available thus meaning two separate app optimization settings one within smart manager app within battery usage screen tap quickly access intelligent personal assistant google permission control limit permissions granted particular application first released samsung galaxy note 7 android marshmallow grace ux named device codename eventually made way older devices including galaxy note 5 update galaxy s7 s7 edge official android nougat update grace ux features cleaner flatter look iconography extensive use white space touchwiz grace ux devices also benefit secure folder functionality enables users keep certain data even apps behind secure password addition countries languages absent previous versions android marshmallow earlier available release starting galaxy tab s3
node9:Wikipedia entry. Entry name: HandyLinux. Entry content: handylinux handylinux linux distribution originating france derived debian stable branch designed especially inexperienced computer users mind distribution low system requirements allowing used range older hardware longer supported latest versions proprietary operating systems aimed particularly older people dated hardware need possess skill use many features afforded state-of-the-art operating systems may also useful computer users disabilities visually impaired goal handylinux project provide stable debian-based os elderly novices people seeking freedom full functionality user-friendly desktop handylinux official debian derivative simple clear graphical user interface called handymenu features built-in tools facilitate handling home computing documentation teaches users desktop navigation helps learn handylinux distribution prospective users encouraged browse handylinux online forum ask questions operating system handylinux installed modern computer processor pentium 4 higher 512 mb ram system requires 3.7 gb available hard drive storage distribution run either two live versions live cd handylinuxlight live usb sample prepackaged software test compatibility installed hardware alternatively installed netbook equipped least 4 gb memory computers built 2005 handylinux i486 non pae computers built 2005 onward handylinux i686-pae choose users remove castors i.e. remove default handymenu substitute classical menu xfce desktop environment add software packages customize look feel distribution becoming experienced os reading documentation software needed functional desktop included disk image internet connection necessary install program bundle prepackaged handylinux operating system tools integrated improving accessibility inverter color filter screen direct access documentation screen magnifier copy paste button virtual keyboard voice synthesis integrated browser small practical programs also included screenshot calendar file search automatic sorting download folder bleachbit cleaning archive manager archive manager disk utility formatting hardinfo system information xl-wallpaper wallpaper changer handylinux native desktop environment based xfce compiz compositing window manager optional users may switch traditional xfce menu prefer handymenu seven-tab menu large computer icon enables users graphically launch applications single click necessary open files folders run program handylinux updates generally follow updates debian stable branch development fork handylinux finnish language published may 29 2014
node10:Wikipedia entry. Entry name: NetBarrier_X4. Entry content: netbarrier x4 netbarrier x4 discontinued version intego netbarrier line firewall os x features cookie cleaner browser history cleaner internet traffic statistic internet bandwidth meter cookie filters information hiding firewall customizable already configured options restrictions network client local server server client customized customized option allows flexible firewall configuration netbarrier features integrated virusbarrier x6 longer sold standalone product
node11:Wikipedia entry. Entry name: RPM_Package_Manager. Entry content: rpm package manager rpm package manager rpm originally red hat package manager recursive acronym free open-source package management system name rpm refers file format package manager program rpm intended primarily linux distributions file format baseline package format linux standard base although created use red hat linux rpm used many linux distributions also ported operating systems novell netware version 6.5 sp3 ibm aix version 4 centos fedora fedora project also sponsored red hat oracle linux versions variants linux operating systems use rpm package manager rpm package contain arbitrary set files rpm files “ binary rpms ” brpms containing compiled version software also “ source rpms ” srpms containing source code used build binary package appropriate tag file header distinguishes normal b rpms causing extracted /usr/src installation srpms customarily carry file extension “ .src.rpm ” .spm file systems limited 3 extension characters e.g old dos fat rpm originally written 1997 erik troan marc ewing based experiences system administrator performing software installation maintenance use package management rather manual building advantages simplicity consistency ability processes automated non-interactive features rpm include packages may come within particular distribution example red hat enterprise linux built parties example rpm fusion fedora circular dependencies among mutually dependent rpms so-called dependency hell problematic cases single installation command needs specify relevant packages rpms often collected centrally one repositories internet site often rpm repositories may either act local mirrors internet repositories locally maintained collections useful rpms several front-ends rpm ease process obtaining installing rpms repositories help resolving dependencies include working behind scenes package manager rpm database stored uses berkeley db back-end consists single database containing meta information installed rpms multiple databases created indexing purposes replicating data speed queries database used keep track files changed created user using rpm installs package thus enabling user via rpm reverse changes remove package later database gets corrupted possible rpm client killed index databases recreated command whilst rpm format across different linux distributions detailed conventions guidelines may vary across rpm delivered single file normally filename format example package filename associated source package would named rpms extension depend particular cpu architecture example rpms may contain graphics text programs use may also contain shell scripts programs written interpreted programming languages python rpm contents also include package label contains following pieces information package label fields need match filename libraries distributed two separate packages version one contains precompiled code use run-time second one contains related development files headers etc packages -devel appended name field system administrator ensure versions binary development packages match format binary consists four sections recipe creating rpm package spec file spec files end .spec suffix contain package name version rpm revision number steps build install clean package changelog multiple packages built single rpm spec file desired rpm packages created rpm spec files using rpmbuild tool spec files usually distributed within srpm files contain spec file packaged along source code typical rpm pre-compiled software ready direct installation corresponding source code also distributed done srpm also includes spec file describing software built srpm also allows user compile perhaps modify code software package could contain platform independent scripts case developer could provide srpm still installable rpm special version srpm contains spec file optionally patches include sources usually license two versions rpm development one led fedora project red hat separate group led previous maintainer rpm former employee red hat rpm.org community first major code revision july 2007 version 4.8 released january 2010 version 4.9 march 2011 4.10 may 2012 4.11 january 2013 4.12 september 2014 4.13 july 2015 version used distributions fedora red hat enterprise linux derivatives opensuse suse linux enterprise unity linux mageia openembedded tizen openmandriva lx formerly mandriva jeff johnson rpm maintainer since 1999 continued development efforts together participants several distributions rpm version 5 released may 2007 version used distributions wind river linux wind river linux 10 rosa linux openmandriva lx former mandriva linux switched rpm5 2011 also openpkg project provides packages common unix-platforms openmandriva lx going switch back rpm.org 4.0 release openembedded last major user rpm5 switched back rpm.org due issues rpm5
node12:Wikipedia entry. Entry name: Emmabuntüs. Entry content: emmabuntüs emmabuntüs linux distribution derived ubuntu/debian designed facilitate repacking computers donated humanitarian organizations like emmaüs communities name emmabuntüs portmanteau emmaüs ubuntu desktop environment xfce cairo-dock lxde also included optionally installed multiple applications installed perform task order provide choice user uses system examples
node13:Wikipedia entry. Entry name: Open_Automotive_Alliance. Entry content: open automotive alliance open automotive alliance oaa alliance automotive manufacturers technology companies aimed using android automobiles announced ces january 6 2014 members open automotive alliance
node14:Wikipedia entry. Entry name: Access_Linux_Platform. Entry content: access linux platform access linux platform alp discontinued open-source software based operating system referred next-generation version palm os mobile devices developed marketed access co. tokyo japan platform included execution environments java classic palm os gtk+-based native linux applications alp demonstrated devices variety conferences including 3gsm linuxworld guadec open source mobile alp first announced february 2006 initial versions platform software development kits officially released february 2007 coordinated effort access esteemo nec ntt docomo panasonic use platform basis shared platform implementing revised version i.mode mobile oriented applications platform moap l application programming interfaces apis conforming specifications limo foundation first smartphone use alp edelweiss emblaze mobile scheduled mid-2009 however shelved release first else renamed monolith smartphone developed sharp corporation cooperation emblaze mobile seven partners scheduled 2009 never released officially cancelled june 2010 result platform never launched independently devices longer referenced access website user interface designed similar general goals earlier palm os releases aim preserving zen palm design philosophy centered making applications simple possible aspects interface included task-based orientation rather file/document orientation commonly found desktop systems appearance platform intended highly customizable provide differentiation specific devices contexts last releases went much modern look gesture support longer close palm os similarly maemo nokia internet tablet framework alp based components drawn gnome project including gtk+ gstreamer frameworks variety core components drawn mainstream open source projects including bluez matchbox cramfs others components licensed gnu general public license gpl gnu lesser general public license lgpl open source licenses meaning alp free open environment software level several components alp released mozilla public license hiker project components addressed issues application life-cycle intertask communication exchange use structured data security time event-based notifications areas common development applications mobile devices alp presented standard apis common operations defined standards portable operating system interface posix linux standard base lsb however neither standard addresses telephony device customizing messaging several topics several frameworks apis defined access applications alp could developed linux-native code c c++ legacy palm os applications run garnet vm emulation environment java execution environments supported via development launchpad used application manager part hiker framework alp sdk used eclipse-based integrated development environment ide added plug-ins predecessor palm os development environment compilers used embedded application binary interface eabi enabled arm versions standard gnu compiler collection gcc tool chain alp used combination user-space policy-based security framework kernel-space linux security module implement fine-grained access controls components alp security implementation released part hiker framework controls based signatures certificates unsigned applications allowed access predefined set safe apis
node15:Wikipedia entry. Entry name: Linux_console. Entry content: linux console linux console system console internal linux kernel system console device receives kernel messages warnings allows logins single user mode linux console provides way kernel processes send text output user receive text input user user typically enters text computer keyboard reads output text computer monitor linux kernel supports virtual consoles consoles logically separate access physical keyboard display linux console linux virtual consoles implemented vt subsystem linux kernel rely user space software contrast terminal emulator user space process emulates terminal typically used graphical display environment linux console one first features kernel originally written linus torvalds 1991 see history linux two main implementations framebuffer text mode framebuffer implementation default modern linux distributions together kernel mode setting provides kernel-level support display hardware features showing graphics system booting legacy text mode implementation used pc-compatible systems cga ega mda vga graphics cards non-x86 architectures used framebuffer mode graphics cards implement text mode linux console uses fixed-size bitmap monospace fonts usually defaulting 8x16 pixels per character linux console optional kernel feature embedded linux systems enable systems typically provide alternative user interface e.g web based boot immediately graphical user interface use primary means interacting user implementations linux console include braille console support refreshable braille displays serial port console linux console provides way kernel processes output text-based messages user receive text-based input user linux several devices used system console virtual terminal serial port usb serial port vga text-mode framebuffer modern linux-based systems deprecated kernel based text-mode input output instead show graphical logo progress bar system booting followed immediate start graphical user interface e.g x.org server desktop distributions surfaceflinger android kernel boot console commonly used display boot log kernel boot log includes information detected hardware updates status boot procedure point time kernel software running hence logging via user-space e.g syslog possible console provides convenient place output information kernel finished booting runs init process also sending output console handles booting rest system including starting background daemons init boot process complete console used multiplex multiple virtual terminals accessible pressing ctrl-alt-f1 ctrl-alt-f2 etc. ctrl-alt-leftarrow ctrl-alt-rightarrow using chvt virtual terminal getty process run turn runs /bin/login authenticate user authentication command shell run virtual terminals like console supported linux kernel level linux console implements terminal type linux escape sequences uses console_codes man page virtual consoles allow storage multiple text buffers enabling different console programs run simultaneously interact user different contexts user point view creates illusion several independent consoles virtual console character set keyboard layout linux 2.6 introduced ability load different font virtual console kernel versions predating 2.6 change font demand text mode implementation used pc-based systems legacy cga/ega/mda/vga video card implements text-based video modes text mode kernel sends 2d array characters video card video card converts characters pixels display text buffer part vga memory describes content text screen terms code points character attributes code points text buffer font generally encoding used text terminal semantics put characters screen set glyphs screen determined current font text screen handled console.c consolemap.c drivers utility altering fonts terminal encodings called consolechars linux kernel keyboard.c driver almost complete support keyboard input keyboard layouts remains bit inconsistent interacts badly different character sets layouts loaded loadkeys utility two utilities corresponding data files packed linux console tools http //lct.sourceforge.net/ shipped many linux distributions efforts internationalization linux kernel level started early 1994 markus kuhn andries brouwer linux console capable supporting vga-style text mode kernel limited means set modes svgatextmode helps enable complex text modes standard ega vga modes fully compatible console tools conflicts dosemu svgalib display servers currently support different modes different virtual consoles microsoft windows version fully functional support console comparable feature application software win32 console linux framebuffer fbdev graphic hardware-independent abstraction layer originally implemented allow linux kernel emulate text console systems apple macintosh text-mode display offers kernel space text mode emulation platform advantage currently unmaintained svgatextmode reliance better hardware compatibility also permits overpass technical restrictions vga text modes linux framebuffer console differs vga one ways drawing characters processing keyboard events virtual consoles ’ support exactly linux serial console console implementation via serial port enabled option config_serial_console kernel configuration may used embedded systems servers direct interaction operator expected serial console allows mode access system usually slower speed due small bandwidth rs-232 serial console often used development software embedded systems sometimes left accessible via debug port console responds number control characters press escape key console also supports extended escape sequences ansi csi mode sequences dec private mode sequences extended sequences control colors visual effects like blinking underline intensity inverse video bell tone frequency duration vesa screen blanking interval aside textual blanking known way place vga adapter standby kmscon projects aims create modern user-space replacement linux console development priorities include support multi-monitor setups unicode font rendering pango xkb keyboard handling gpu opengl acceleration complaints current kernel implementation include user-interface kernel-space code poorly maintained handles keyboards badly produces bad font rendering misses mode-setting multi-head support contains multi-seat awareness limited hot-plugging handling limited vt102 compliance
node16:Wikipedia entry. Entry name: AppArmor. Entry content: apparmor apparmor application armor linux kernel security module allows system administrator restrict programs capabilities per-program profiles profiles allow capabilities like network access raw socket access permission read write execute files matching paths apparmor supplements traditional unix discretionary access control dac model providing mandatory access control mac included mainline linux kernel since version 2.6.36 development supported canonical since 2009 addition manually creating profiles apparmor includes learning mode profile violations logged prevented log used generating apparmor profile based program typical behavior apparmor implemented using linux security modules lsm kernel interface apparmor offered part alternative selinux critics consider difficult administrators set maintain unlike selinux based applying labels files apparmor works file paths proponents apparmor claim less complex easier average user learn selinux also claim apparmor requires fewer modifications work existing systems example selinux requires filesystem supports security labels thus provide access control files mounted via nfs apparmor filesystem-agnostic apparmor represents one several possible approaches problem restricting actions installed software may take selinux system generally takes approach similar apparmor one important difference selinux identifies file system objects inode number instead path apparmor inaccessible file become accessible hard link created selinux inode-based model would still deny access newly created hard links hard link would pointing inaccessible inode selinux apparmor also differ significantly administered integrate system isolation processes also accomplished mechanisms like virtualization one laptop per child olpc project example sandboxes individual applications lightweight vserver 2007 simplified mandatory access control kernel introduced 2009 new solution called tomoyo included linux 2.6.30 like apparmor also uses path-based access control apparmor first used immunix linux 1998–2003 time apparmor known subdomain reference ability security profile specific program segmented different domains program switch dynamically apparmor first made available sles opensuse first enabled default sles 10 opensuse 10.1 may 2005 novell acquired immunix rebranded subdomain apparmor began code cleaning rewriting inclusion linux kernel 2005 september 2007 apparmor maintained novell novell suse legal owner trademarked name apparmor apparmor first successfully ported/packaged ubuntu april 2007 apparmor became default package starting ubuntu 7.10 came part release ubuntu 8.04 protecting cups default ubuntu 9.04 items mysql installed profiles apparmor hardening continued improve ubuntu 9.10 ships profiles guest session libvirt virtual machines evince document viewer optional firefox profile apparmor integrated october 2010 2.6.36 kernel release apparmor integrated synology dsm 5.1 beta 2014 apparmor enabled solus release 3 2017/8/15 apparmor enabled default debian 10 buster
node17:Wikipedia entry. Entry name: LXLE_Linux. Entry content: lxle linux lxle linux distribution based upon recent ubuntu/lubuntu lts release using lxde desktop environment lxle lightweight distro focus visual aesthetics works well old new hardware january 2014 review full circle magazine gabriele tettamanzi noted lxle minor localization issues otherwise described nice light fast desktop rich software stable jesse smith reviewed lxle 12.04.3 distrowatch weekly jesse smith also reviewed lxde 14.04
node18:Wikipedia entry. Entry name: Snappy_(package_manager). Entry content: snappy package manager snappy software deployment package management system developed canonical linux operating system packages called snaps tool using snapd work across range linux distributions allowing distro-agnostic upstream software packaging snappy originally designed ubuntu touch system designed work internet things cloud desktop computing snapcraft tool developing snap packages snap application packages software self-contained work across range linux distributions unlike traditional linux package management approaches like apt yum require specifically adapted packages linux distribution therefore adding delay application development deployment end-users snaps dependency app store obtained source therefore used upstream software deployment snaps deployed ubuntu versions linux ubuntu app store used default back-end stores enabled well developers use snaps create command line tools background services well desktop applications snap application upgrades via atomic operation deltas possible june 2016 snapd ported wide range linux distributions enable snaps used across linux distribution all-snap ubuntu core snapd also available progress arch linux centos debian fedora solus manjaro linux linux mint openembedded raspbian openwrt opensuse distribution able interpret snap metadata implement security expectations snap distribution-specific fashion snapcraft tool developers package programs snap format snappy snap file format single compressed filesystem based squashfs format mounted dynamically host operating system together declarative metadata interpreted snap system set appropriately shaped secure sandbox container application file format extension .snap snappy packaging deployed internet things environments ranging consumer-facing products enterprise device management gateways snappy included default ubuntu desktop images version 16.04 onwards developer screen capture tool peek discontinued support snap packages continuing support flatpak appimage stating developers systems administrators voiced complaints snap highly unsuitable mission-critical applications since autoupdates turned basic feature missing design choice snap developers led unexpected downtime services restart buggy software enters snap distribution system red hat employee adam williamson acknowledging bias criticized snap keeping server side closed source mechanism using third party servers sign contributor license agreement contribute development
node19:Wikipedia entry. Entry name: WinExe. Entry content: winexe winexe software allows administrator users execute commands remotely windowsnt/2000/xp/2003/vista/2003/2008 systems gnu/linux winexe distributed pre-built rpm packages source code available well winexe analogous sysinternals tool psexec
node20:Wikipedia entry. Entry name: Usplash. Entry content: usplash usplash software project ubuntu community historically scrolling text verbose mode typically appeared linux computers boot usplash replaces scrolling-text screens graphical splash screen designed replace bootsplash thing kernel space level since usplash operates user space updated without recompiling kernel usplash uses linux framebuffer interface alternatively direct vesa access display splash screen ubuntu 9.10 karmic koala usplash used preliminary stages booting xsplash takes ubuntu 10.04 lts lucid lynx usplash fully replaced plymouth uses direct rendering manager drm kms driver
node21:Wikipedia entry. Entry name: NimbleX. Entry content: nimblex nimblex small slackware-based linux distribution optimized run cd usb drive network environment nimblex praised fast boots well small disk footprint considered surprising distribution using kde desktop environment nimblex also remarked web site allows users generate custom bootable images using web browser also covered mainstream romanian press first linux distribution put together romanian nimblex reported boot fast important factor user experience running optical media usb drives review 2007 nimblex edition noted expect boot less half time live cd fedora ubuntu knoppix takes recent review 2008 edition also noted nimblex speed easily one fastest bootups 've seen even tried hinder cripple boot time even dog slow pendrive old dirt test machine still booted amazingly fast desktop applications also fast nimblex also compact distribution review 2007 edition wondered managed include kde mention applications included size 200 mb window-based graphical user interface slimmed kde fit firefox web browser office documents editor koffice pdf reader media player play almost file formats without need install codec photo editing software gimp anti-virus bluetooth support integrated name applications included 2008 installation process major linux distributions customized creating custom installation disks usually called spins creating spin requires certain amount expertise creating spin run installation media requires customization nimblex makes process user-friendly providing web interface process similar embedded linux distributions e.g freewrt features made distribution popular early judge forums nimblex attracted surprisingly large number users relatively unknown distribution nimblex uses 2.6 kernel default gui kde slower computers default desktop environment exchanged one lower resource usage like fluxbox xfce typical office web browsing messaging components included nimblex hardly offers graphical administration tools — administration tasks like adding new user performed command line tradeoff allows nimblex small installation footprint — typical installation 400 megabytes additional applications installed using graphical installer gslapt codice_1 command line brings automatic resolution dependencies slackware packages text-mode hard driver installer available codice_2 considered beta quality 2008 edition 2008 edition comes three standard install images 200mb two smaller even ones 100 69mb installers allow customizations packets installation however nimblex 2008 uses kde 3.5.9 nimblex 2010 beta version also present site based kde 4 support new hardware user also enable compiz fusion via link desktop openoffice.org included instead koffice provided office suite nimblex included 200 mb package useful applications like firefox web browser koffice pdf reader kopete instant messenger klamav anti-virus gimp photo editor bluetooth support remote connection pc important software supported bigger nimblex package openoffice.org java python samba wine windows applications emulator many applications compiled community included distribution nimblex 2008 criticized irresponsible lacking common security features box even though clamav anti-virus guarddog firewall installed default non-root user account created installation root password required log desktop default root password displayed nimblex web site nimblex 2010 also fixed applications removed another problem nimblex packages created repackaging slackware packages since nimblex installs fewer libraries sometimes results uninstallable unusable packages reviews
node22:Wikipedia entry. Entry name: Samizdat:_And_Other_Issues_Regarding_the_'Source'_of_Open_Source_Code. Entry content: samizdat issues regarding 'source open source code samizdat issues regarding 'source open source code 2004 report kenneth brown report suggests linux kernel may created distributed illegally open-source software may generally subject abuses report states linux kernel written using copied source code minix resources acquired improperly possibly illegally linus torvalds also suggests one never certain origins open source code similar misuse copyrighted code may exist open-source projects finally asserts gnu general public license bad economy book greeted widespread rejection technical world repudiated many claimed sources prerelease long delisted distributor site book never given proper release although prerelease pdf available online title reference samizdat form private circulation suppressed literature within soviet-bloc countries extension slang papers contain programming techniques code sometimes sources authorized publication often passed programmer programmer samizdat claims linus torvalds used source code taken minix small unix-like operating system used teaching computer science create linux 0.01 theory mere student could write entire unix-like kernel single-handedly book also recommends government-funded programming never licensed gpl bsd license similar simple permissive licenses states us government book claims methodology references seriously questioned including many quotes support thesis andrew s. tanenbaum author minix dennis ritchie one creators unix richard stallman leader gnu project others said quotes attributed interview adti fact prerelease journal papers ilkka tuomi messageboard posts charles mills henry jones alexey toptygin said commissioned brown find similarities minix linux 0.01 source code found support theory minix source code used create linux study mentioned book toptygin quoted saying asked friend ... wanted code analysis consultancy basis boss kenneth brown ended 10 hours work comparing early versions linux minix looking copied code summarize analysis found evidence whatsoever code copied called ask questions analysis methods results ask would like repeated source comparison tools bit shock apparently ken expecting find gobs copied source code spent conversation trying convince must made mistake since clearly impossible one person write os 'code theft occurred although linux 0.01 written using minix example starting point — minix created tanenbaum example study — code minix actually used tanenbaum agrees point stated much interview ken brown latter researching samizdat furthermore linux 0.01 barely functional first draft far sophisticated industry-grade linux-based operating systems would later grow samizdat detractors also point fact adti funded directly since 1999 microsoft company publishes competing proprietary operating system microsoft windows considers linux one important competitors see halloween documents documents ii month widespread rejection book technical press microsoft also repudiated mid-june spokesman calling “ unhelpful distraction matters most—providing best technology customers. ” notably absent brown research samizdat direct communication torvalds
node23:Wikipedia entry. Entry name: BSD_licenses. Entry content: bsd licenses bsd licenses family permissive free software licenses imposing minimal restrictions use distribution covered software contrast copyleft licenses share-alike requirements original bsd license used namesake berkeley software distribution bsd unix-like operating system original version since revised descendants referred modified bsd licenses bsd license class license generally referred bsd-like modified bsd license wide use today similar license originally used bsd version unix bsd license simple license merely requires code retain bsd license notice redistributed source code format reproduce notice redistributed binary format bsd license unlike licenses require source code distributed addition original 4-clause license used bsd several derivative licenses emerged also commonly referred bsd license today typical bsd license 3-clause version revised original 4-clause version bsd licenses following codice_1 organization codice_2 codice_2 codice_4 year copyright published bsd codice_2 regents university california codice_1 university california berkeley releases bsd prior adoption 4-clause bsd license used license clearly ancestral 4-clause bsd license releases include 4.3bsd-tahoe 1988 net/1 1989 although largely replaced 4-clause license license found 4.3bsd-reno net/2 4.4bsd-alpha original bsd license contained clause found later licenses known advertising clause clause eventually became controversial required authors works deriving bsd-licensed work include acknowledgment original source advertising material clause number 3 original license text clause objected grounds people changed license reflect name organization led escalating advertising requirements programs combined together software distribution every occurrence license different name required separate acknowledgment arguing richard stallman stated counted 75 acknowledgments 1997 version netbsd addition clause presented legal problem wishing publish bsd-licensed software relies upon separate programs using gnu gpl advertising clause incompatible gpl allow addition restrictions beyond already imposes gpl publisher free software foundation recommends developers use license though states reason use software already using today original license sometimes called bsd-old 4-clause bsd advertising clause removed license text official bsd william hoskins director office technology licensing uc berkeley bsd distributions removed clause many similar clauses remain bsd-derived code sources unrelated code using derived license original license sometimes referred bsd-old resulting 3-clause version sometimes referred bsd-new names include new bsd revised bsd bsd-3 3-clause bsd version vetted open source license osi bsd license free software foundation refers license modified bsd license states compatible gnu gpl fsf encourages users specific referring license name i.e simply referring bsd license bsd-style avoid confusion original bsd license version allows unlimited redistribution purpose long copyright notices license disclaimers warranty maintained license also contains clause restricting use names contributors endorsement derived work without specific permission even simplified version come use primarily known usage freebsd use early april 29 1999 likely well primary difference new bsd 3-clause license omits non-endorsement clause also adds disclaimer views opinions expressed software free software foundation refers license freebsd license states compatible gnu gpl addition fsf encourages users specific referring license name i.e simply referring bsd license bsd-style modified/new bsd license avoid confusion original bsd license projects netbsd use similar 2-clause license without additional disclaimer version vetted open source license osi simplified bsd license isc license functionally equivalent endorsed openbsd project license template new contributions formerly known free public license 1.0.0 bsd 0-clause license spdx 0bsd goes 2-clause license dropping requirements include copyright notice license text disclaimer either source binary forms freebsd project argues advantages bsd-style licenses companies commercial use-cases due license compatibility proprietary licenses general flexibility stating bsd-style licenses place minimal restrictions future behavior n't legal time-bombs unlike copyleft licenses bsd license allows proprietary use allows software released license incorporated proprietary products works based material may released proprietary license closed source software allowing usual commercial usages 3-clause bsd license like permissive licenses compatible almost foss licenses well proprietary licenses two variants license new bsd license/modified bsd license 3-clause simplified bsd license/freebsd license 2-clause verified gpl-compatible free software licenses free software foundation vetted open source licenses open source initiative original 4-clause bsd license accepted open source license although original considered free software license fsf fsf consider compatible gpl due advertising clause bsd license family one oldest broadly used license family foss ecosystem also many new licenses derived inspired bsd licenses many foss software projects use bsd license instance bsd os family freebsd etc google bionic toybox bsd 3-clause license ranked popularity number five according black duck software sixth according github data
node24:Wikipedia entry. Entry name: Aptitude_(software). Entry content: aptitude software aptitude front-end apt debian package manager displays list software packages allows user interactively pick packages install remove especially powerful search system utilizing flexible search patterns initially created debian appeared rpm package manager rpm based distributions well conectiva aptitude based ncurses computer terminal library provides interface incorporates elements commonly seen graphical user interfaces guis pull-down menus addition ncurses interface aptitude provides extensive command-line interface cli even though aptitude one executable file provides command-line functions similar apt- family tools apt-get apt-cache apt-listchanges etc. aptitude also emulates apt-get command-line arguments allowing act full replacement apt-get past recommended aptitude apt-get used interchangeably longer true programs correctly track share common list packages automatically installed satisfy dependencies aptitude created 1999 time two terminal-based apt-like front-ends available dselect program used manage packages debian since apt created console-apt program project considered heir apparent dselect aptitude created experiment object-oriented programming design used console-apt hope would result flexible program broader set features first public release aptitude version 0.0.1 november 18 1999 limited ability view list available packages could actually download install packages version 0.0.4a ability added many improvements version included debian 2.2 code name potato late 2000 whole user interface module rewritten new architecture created based libsigc++ callback library concepts modern widget toolkits gtk+ qt enabled interface become much similar guis previously features pull-down menus pop-up dialogs one aptitude unusual features tiny implementation minesweeper added time first official aptitude release following rewrite 0.2.0. aptitude 0.2.11.1 released debian 3.0 woody time console-apt project renamed deity effectively abandoned maintainers removed woody aptitude also ported jailbroken ios part cydia package manager aptitude states unlike advanced packaging tool super cow powers apt-get super cow powers found issuing command apt-get moo however aptitude issuing moo give user prompt saying easter eggs however issuing aptitude -v moo aptitude -vv moo user see series statements denying super cow powers telling go away ending picture reference antoine de saint-exupéry little prince unlike original apt-get easter egg different versions program different sequences addition package description states aptitude also y2k-compliant non-fattening naturally cleansing housebroken
node25:Wikipedia entry. Entry name: Uncomplicated_Firewall. Entry content: uncomplicated firewall uncomplicated firewall ufw program managing netfilter firewall designed easy use uses command-line interface consisting small number simple commands uses iptables configuration ufw available default ubuntu installations 8.04 lts gufw intended easy intuitive graphical user interface managing uncomplicated firewall supports common tasks allowing blocking pre-configured common p2p individual ports gufw designed ubuntu also available debian-based distributions arch linux anywhere python gtk+ ufw available
node26:Wikipedia entry. Entry name: Series_80_(software_platform). Entry content: series 80 software platform series 80 formerly crystal short-lived mobile software platform enterprise professional level smartphones made nokia introduced 2000 uses symbian os common physical properties symbian os user interface type screen resolution 640×200 pixels full qwerty keyboard series 80 used large size communicator screens best effect needed separate development relatively small market nokia 9300i announced 2005 final series 80 device nokia use series 80 platform final communicator nokia e90
node27:Wikipedia entry. Entry name: Linux_From_Scratch. Entry content: linux scratch linux scratch lfs type linux installation name book written gerard beekmans currently mainly maintained bruce dubbs book gives readers instructions build linux system source book available freely linux scratch site linux scratch way install working linux system building components manually naturally longer process installing pre-compiled linux distribution according linux scratch site advantages method compact flexible secure system greater understanding internal workings linux-based operating systems keep lfs small focused book beyond linux scratch blfs created presents instructions develop basic linux system created lfs introduces guides reader additions system including networking x sound printer scanner support since release 5.0 blfs book version matches lfs book version book cross linux scratch clfs focuses cross compiling including compiling headless embedded systems run linux lack resources needed compile linux clfs supports broad range processors addresses advanced techniques included lfs book cross-build toolchains multilibrary support 32 64-bit libraries side-by-side alternative instruction set architectures itanium sparc mips alpha book hardened linux scratch hlfs focuses security enhancements hardened kernel patches mandatory access control policies stack-smashing protection address space layout randomization besides main purpose creating security-focused operating system hlfs secondary goal security teaching tool automated linux scratch alfs project designed automate process creating lfs system aimed users gone lfs blfs books several times wish reduce amount work involved secondary goal act test lfs blfs books directly extracting running instructions xml sources lfs blfs books clean partition working linux system compiler essential software libraries required build lfs instead installing existing linux system one also use live cd build lfs system project formerly maintained linux scratch live cd lfs live cd contains source packages full version live cd lfs book automated building tools except minimal live cd version xfce gui environment work official lfs live cd longer maintained used build lfs version7 later however two unofficial builds used build 32-bit 64-bit kernel userspace respectively lfs 7.x first toolchain must compiled consisting tools used compile lfs like gcc glibc binutils necessary utilities root directory must changed using chroot toolchain partition start building final system one first packages compile glibc toolchain linker must adjusted link newly built glibc packages make finished system linked well chroot phase bash hashing feature turned temporary toolchain bin directory moved end path way newly compiled programs come first path new system builds new components list packages included clfs version 1.1.0 unless otherwise noted list applicable supported architectures standard build unit sbu term used initial bootstrapping system represents amount time required build first package lfs given computer creation prompted long time required build lfs system desire many users know long source tarball take build ahead time linux scratch version 6.3 first package built user gnu binutils building users encouraged measure build process using shell constructs dub time system standard build unit number known estimate time required build later packages expressed relative known sbu several packages built compilation take much longer build binutils including gnu c library rated 4.1 sbus gnu compiler collection rated 8.4 sbus unit must interpreted approximation various factors influence actual time required build package lwn.net reviewed lfs 2004 tux machines wrote review linux scratch 6.1 2005 tux machines also second part review third part source-based linux distributions
node28:Wikipedia entry. Entry name: Hyperbola_GNU/Linux-libre. Entry content: hyperbola gnu/linux-libre hyperbola gnu/linux-libre operating system i686 x86-64 architectures based arch snapshots debian development includes gnu operating system components linux-libre kernel instead generic linux kernel hyperbola gnu/linux-libre listed free software foundation completely free operating system true free system distribution guidelines hyperbola born 17th annual fórum internacional software livre porto alegre brazil 5 august 2017 support systemd dropped favor openrc default init system support init freedom campaign begun devuan 6 december 2018 hyperbola first brazilian distribution recognized completely free project gnu making part fsf list free distributions hyperbola established social contract hyperbola social contract commits project free software community free culture privacy stability follow arch-based system packaging yet principles stability development maintenance debian covenant included gnu free system distribution guidelines hyperbola established packaging guidelines hyperbola packaging guidelines contain collection common issues severity placed development backporting package releases debian patches hyperbola aliases stable releases using galaxy names codenames chosen list nearest known galaxies milky way ascending order distance stable version hyperbola gets released approximately every three years point releases available every months hyperbola release receive two years extra security updates end life eol however point releases made hyperbola release receive five years security support total two ways install hyperbola gnu/linux-libre either scratch using live images migrating existing arch-based system
node29:Wikipedia entry. Entry name: DTrace. Entry content: dtrace dtrace comprehensive dynamic tracing framework created sun microsystems troubleshooting kernel application problems production systems real time originally developed solaris since released free common development distribution license cddl opensolaris descendant illumos ported several unix-like systems dtrace used get global overview running system amount memory cpu time filesystem network resources used active processes also provide much fine-grained information log arguments specific function called list processes accessing specific file 2010 oracle corporation acquired sun microsystems announced discontinuing opensolaris community effort core solaris engineers create truly open source solaris illumos operating system announced via webinar thursday 3 august 2010. fork opensolaris os/net consolidation including dtrace technology october 2011 oracle announced porting dtrace linux several years unofficial dtrace port linux available changes licensing terms august 2017 oracle released dtrace kernel code gplv2+ license user space code gplv2 upl licensing september 2018 microsoft announced ported dtrace freebsd windows september 2016 opendtrace effort began github code comprehensive documentation system internals opendtrace effort maintains original cddl licensing code opensolaris additional code contributions coming bsd 2 clause license goal opendtrace provide os agnostic portable implementation dtrace acceptable consumers including macos freebsd openbsd netbsd linux well embedded systems sun microsystems designed dtrace give operational insights allow users tune troubleshoot applications os testers write tracing programs also referred scripts using programming language confused programming languages named language inspired c includes added functions variables specific tracing programs resemble awk programs structure consist list one probes instrumentation points probe associated action probes comparable pointcut aspect-oriented programming whenever condition probe met associated action executed probe fires typical probe might fire certain file opened process started certain line code executed probe fires may analyze run-time situation accessing call stack context variables evaluating expressions print log information record database modify context variables reading writing context variables allows probes pass information allowing cooperatively analyze correlation different events special consideration taken make dtrace safe use production environment example minimal probe effect tracing underway performance impact associated disabled probe important since tens thousands dtrace probes enabled new probes also created dynamically dtrace scripts invoked directly command line providing one probes actions arguments examples dtrace -n 'proc exec-success trace curpsinfo- pr_psargs dtrace -n 'syscall :open* entry printf execname copyinstr arg0 dtrace -n 'syscall entry num execname count dtrace -n 'syscall entry num probefunc count dtrace -n 'syscall entry num pid execname count dtrace -n 'io start printf pid execname args 0 b_bcount dtrace -n 'vminfo pgpgin pg execname sum arg0 scripts also written reach hundreds lines length although typically tens lines needed advanced troubleshooting analysis 200 examples open source dtrace scripts found dtracetoolkit created brendan gregg author dtrace book also provides documentation demonstrations dtrace first became available use november 2003 formally released part sun solaris 10 january 2005 dtrace first component opensolaris project source code released common development distribution license cddl dtrace integral part illumos illumos distributions opensolaris continuation dtrace standard part freebsd netbsd apple added dtrace support mac os x 10.5 leopard including gui called instruments 40 dtrace scripts dtracetoolkit included /usr/bin including tools examine disk i/o iosnoop process execution execsnoop unlike platforms dtrace supported mac os x flag p_lnoattach program may set disallows tracing process debugging utilities dtrace gdb original mac os x dtrace implementation could affect tracing system information unrelated probes fire program flag set running would fail os x 10.5.3 update addressed issue months later however since el capitan system integrity protection prevents user dtracing protected binary default linux port dtrace available since 2008 work continues actively enhance fix issues also active implementation github standard core providers available fbt syscall profile plus special instr provider solaris providers yet available linux dtrace implementation loadable kernel module means kernel requires modification thus allows dtrace avoid cddl vs. gpl licensing conflicts source form least however dtrace loaded kernel instance marked tainted 2007 developer qnx software systems announced blog colleague working incorporating dtrace qnx operating system oracle corporation added beta dtrace support oracle linux 2011 technology preview unbreakable enterprise kernel release 2 gplv2 dtrace linux kernel module originally released cddl general availability announced december 2012 march 11th 2019 microsoft released build dtrace windows 10 insider builds supported language provider dtrace retrieve context code including function source file line number location dynamic memory allocation garbage collection made available supported language supported language providers include assembly language c c++ java erlang javascript perl php python ruby shell script tcl application providers allow dtrace follow operation applications system calls kernel applications offer dtrace application providers include mysql postgresql oracle database oracle grid engine firefox dtrace designed implemented bryan cantrill mike shapiro adam leventhal authors received recognition 2005 innovations dtrace infoworld technology review dtrace top prize wall street journal 2006 technology innovation awards competition authors recognized usenix software tools user group stug award 2008
node30:Wikipedia entry. Entry name: Molinux. Entry content: molinux molinux operating system based ubuntu sponsored autonomous community castilla-la mancha fundación ínsula barataria name molinux derives spanish word molino meaning mill windmill version molinux named character classic spanish novel quixote miguel de cervantes molinux initiative begun 2005 government castilla-la mancha introduce castile-la mancha community forefront information society molinux project intended attack digital divide reducing cost software offering easy-to-use operating system sponsoring regional government commitment open source philosophy committed impose use molinux advantage software free compete anyone user choose using software molinux 6.2 codename merlín launched 2010-12-24 based ubuntu 10.10",wikics,nc
"Classify the wikipedia page represented by node21 using its subgraph data (text attributes and connections) as follows.

node0: Invented by Tim Berners-Lee in 1989, the World Wide Web uses URLs and browsers to link hypertext documents, forming the internet's core information-sharing system.  
node1: DNSChanger malware altered DNS settings for fraudulent ads, infecting millions; FBI shut down servers in 2012 after collaborative international law enforcement action.  
node2: Solid, by Tim Berners-Lee, decentralizes web data via user-controlled ""pods,"" aiming to reclaim privacy and data ownership through linked open applications.  
node3: File copying involves duplicating digital files using methods like drag-and-drop, APIs, or shadowing, optimizing efficiency for local/remote data transfers.
node4: Computer file definition, history from punched cards, storage formats, organization in file systems, metadata, and modern uses.  
node5: Tiny_Banker_Trojan steals financial data via man-in-the-browser attacks, smaller than Zeus, creates botnets, detected in 2012.  
node6: DHCP dynamically assigns IP addresses via UDP, replaces RARP/BOOTP, manages leases, used in networks, faces security threats.  
node7: Internet security combats phishing, DDoS, and malware; uses encryption, firewalls, MFA, and protocols like IPsec for data protection.  
node8: Referer spoofing sends fake HTTP referers for privacy, testing, or bypassing site restrictions via browser tools/proxies.  
node9: Web log analysis software parses server logs to generate traffic reports and analyze website usage patterns.
node10: Proxy server intermediates client-server requests, enabling anonymity, content filtering, caching, and security via intermediation.  
node11: Firefox 3.6 (2010) improved JavaScript performance with Tracemonkey, updated Gecko engine, and ended support in 2012.  
node12: Unique user metrics measure distinct website visitors via cookies/IPs, often overcounting due to dynamic IPs and multiple devices.  
node13: Scriptcase is a PHP RAD platform for building web apps with drag-and-drop, database support, and BI tools for businesses.  
node14: HTTP Referer header identifies the page a user came from, used for tracking but raises privacy issues; misspelled as ""referrer"" in standards.  
node15: Web analytics measures website traffic and user behavior for optimization, faces challenges like cookie deletion and privacy concerns.  
node16: Data anonymization removes PII for privacy, uses generalization/pseudonymization, mandated by GDPR to protect personal data.  
node17: JavaScript libraries (e.g., jQuery) simplify web development with pre-written code for AJAX, UI, and cross-browser compatibility.  
node18: Beonex Communicator was an open-source Mozilla suite emphasizing security, discontinued in 2004 due to lack of updates.  
node19: Pageviews track HTML page loads for web analytics, criticized for inaccuracy due to bots and not measuring user engagement fully.
node20: Free Perl-based log analyzer supporting multiple log formats, generating HTML stats with graphics via CLI or web interface under GPL.  
node21: Web session analytics measures user interactions via time or navigation methods, tracking metrics and reconstructing sessions for analysis.  
node22: PKZIP introduced the ZIP format in 1989, a shareware archiver with compression methods, involved in the compression war and legal disputes.  
node23: Microsoft's discontinued web analytics tool, adCenter Analytics, competed with Google Analytics but was phased out by 2009.  
node24: Web beacons (1×1 pixels) track user activity on sites and emails, enabling third-party analytics and email open tracking, often blocked via image disablement.  
node25: Trojan malware disguises malicious intent, often creating backdoors for data theft or system control, spread via social engineering since the 1970s.

the connection relationship among the nodes mentioned:
 <node0, node2>,<node0, node4>,<node0, node6>,<node0, node7>,<node0, node8>,<node0, node10>,<node0, node11>,<node0, node13>,<node0, node17>,<node0, node18>,<node0, node19>,<node0, node23>,<node1, node5>,<node1, node25>,<node3, node4>,<node4, node19>,<node5, node25>,<node6, node10>,<node6, node12>,<node6, node15>,<node7, node10>,<node7, node14>,<node7, node25>,<node8, node10>,<node8, node14>,<node9, node14>,<node9, node15>,<node9, node20>,<node10, node14>,<node10, node15>,<node10, node24>,<node11, node18>,<node12, node15>,<node12, node19>,<node12, node21>,<node14, node15>,<node14, node18>,<node14, node21>,<node15, node19>,<node15, node20>,<node15, node21>,<node15, node23>,<node15, node24>,<node16, node21>,<node19, node21>,<node19, node25>,<node22, node25>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",web technology,"node0: Invented by Tim Berners-Lee in 1989, the World Wide Web uses URLs and browsers to link hypertext documents, forming the internet's core information-sharing system.  
node1: DNSChanger malware altered DNS settings for fraudulent ads, infecting millions; FBI shut down servers in 2012 after collaborative international law enforcement action.  
node2: Solid, by Tim Berners-Lee, decentralizes web data via user-controlled ""pods,"" aiming to reclaim privacy and data ownership through linked open applications.  
node3: File copying involves duplicating digital files using methods like drag-and-drop, APIs, or shadowing, optimizing efficiency for local/remote data transfers.
node4: Computer file definition, history from punched cards, storage formats, organization in file systems, metadata, and modern uses.  
node5: Tiny_Banker_Trojan steals financial data via man-in-the-browser attacks, smaller than Zeus, creates botnets, detected in 2012.  
node6: DHCP dynamically assigns IP addresses via UDP, replaces RARP/BOOTP, manages leases, used in networks, faces security threats.  
node7: Internet security combats phishing, DDoS, and malware; uses encryption, firewalls, MFA, and protocols like IPsec for data protection.  
node8: Referer spoofing sends fake HTTP referers for privacy, testing, or bypassing site restrictions via browser tools/proxies.  
node9: Web log analysis software parses server logs to generate traffic reports and analyze website usage patterns.
node10: Proxy server intermediates client-server requests, enabling anonymity, content filtering, caching, and security via intermediation.  
node11: Firefox 3.6 (2010) improved JavaScript performance with Tracemonkey, updated Gecko engine, and ended support in 2012.  
node12: Unique user metrics measure distinct website visitors via cookies/IPs, often overcounting due to dynamic IPs and multiple devices.  
node13: Scriptcase is a PHP RAD platform for building web apps with drag-and-drop, database support, and BI tools for businesses.  
node14: HTTP Referer header identifies the page a user came from, used for tracking but raises privacy issues; misspelled as ""referrer"" in standards.  
node15: Web analytics measures website traffic and user behavior for optimization, faces challenges like cookie deletion and privacy concerns.  
node16: Data anonymization removes PII for privacy, uses generalization/pseudonymization, mandated by GDPR to protect personal data.  
node17: JavaScript libraries (e.g., jQuery) simplify web development with pre-written code for AJAX, UI, and cross-browser compatibility.  
node18: Beonex Communicator was an open-source Mozilla suite emphasizing security, discontinued in 2004 due to lack of updates.  
node19: Pageviews track HTML page loads for web analytics, criticized for inaccuracy due to bots and not measuring user engagement fully.
node20: Free Perl-based log analyzer supporting multiple log formats, generating HTML stats with graphics via CLI or web interface under GPL.  
node21: Web session analytics measures user interactions via time or navigation methods, tracking metrics and reconstructing sessions for analysis.  
node22: PKZIP introduced the ZIP format in 1989, a shareware archiver with compression methods, involved in the compression war and legal disputes.  
node23: Microsoft's discontinued web analytics tool, adCenter Analytics, competed with Google Analytics but was phased out by 2009.  
node24: Web beacons (1×1 pixels) track user activity on sites and emails, enabling third-party analytics and email open tracking, often blocked via image disablement.  
node25: Trojan malware disguises malicious intent, often creating backdoors for data theft or system control, spread via social engineering since the 1970s.","node0:Wikipedia entry. Entry name: World_Wide_Web. Entry content: world wide web world wide web www commonly known web information system documents web resources identified uniform resource locators urls nowiki https //www.example.com/ /nowiki may interlinked hypertext accessible internet resources www may accessed users software application called web browser english scientist tim berners-lee invented world wide web 1989 wrote first web browser 1990 employed cern near geneva switzerland browser released outside cern 1991 first research institutions starting january 1991 general public august 1991 world wide web central development information age primary tool billions people use interact internet web resources may type downloaded media web pages hypertext media formatted hypertext markup language html formatting allows embedded hyperlinks contain urls permit users navigate web resources addition text web pages may contain images video audio software components rendered user web browser coherent pages multimedia content multiple web resources common theme common domain name make website websites stored computers running program called web server responds requests made internet web browsers running user computer website content largely provided publisher interactively users contribute content content depends upon users actions websites may provided myriad informative entertainment commercial governmental non-governmental reasons tim berners-lee vision global hyperlinked information system became possibility second half 1980s 1985 global internet began proliferate europe domain name system upon uniform resource locator built came 1988 first direct ip connection europe north america made berners-lee began openly discuss possibility web-like system cern working cern berners-lee became frustrated inefficiencies difficulties posed finding information stored different computers march 12 1989 submitted memorandum titled information management proposal management cern system called mesh referenced enquire database software project built 1980 used term web described elaborate information management system based links embedded text imagine references document associated network address thing referred reading document could skip click mouse system explained could referred using one existing meanings word hypertext term says coined 1950s reason proposal continues hypertext links could encompass multimedia documents including graphics speech video berners-lee goes use term hypermedia help colleague fellow hypertext enthusiast robert cailliau published formal proposal 12 november 1990 build hypertext project called worldwideweb one word web hypertext documents viewed browsers using client–server architecture point html http already development two months first web server month completing first successful test proposal estimated read-only web would developed within three months would take six months achieve creation new links new material readers authorship becomes universal well automatic notification reader new material interest him/her become available read-only goal met accessible authorship web content took longer mature wiki concept webdav blogs web 2.0 rss/atom proposal modelled sgml reader dynatext electronic book technology spin-off institute research information scholarship brown university dynatext system licensed cern key player extension sgml iso 8879:1986 hypermedia within hytime considered expensive inappropriate licensing policy use general high energy physics community namely fee document document alteration next computer used berners-lee world first web server also write first web browser worldwideweb 1990 christmas 1990 berners-lee built tools necessary working web first web browser web editor well first web server first web site described project published 20 december 1990 first web page may lost paul jones unc-chapel hill north carolina announced may 2013 berners-lee gave says oldest known web page 1991 visit unc jones stored magneto-optical drive next computer 6 august 1991 berners-lee published short summary world wide web project newsgroup alt.hypertext date sometimes confused public availability first web servers occurred months earlier another example confusion several news media reported first photo web published berners-lee 1992 image cern house band les horribles cernettes taken silvano de gennaro gennaro disclaimed story writing media totally distorting words sake cheap sensationalism first server outside europe installed stanford linear accelerator center slac palo alto california host spires-hep database accounts differ substantially date event world wide web consortium timeline says december 1992 whereas slac claims december 1991 w3c document titled little history world wide web underlying concept hypertext originated previous projects 1960s hypertext editing system hes brown university ted nelson project xanadu douglas engelbart on-line system nls nelson engelbart turn inspired vannevar bush microfilm-based memex described 1945 essay may think berners-lee breakthrough marry hypertext internet book explains repeatedly suggested marriage two technologies possible members technical communities one took invitation finally assumed project process developed three essential technologies world wide web several differences hypertext systems available time web required unidirectional links rather bidirectional ones making possible someone link another resource without action owner resource also significantly reduced difficulty implementing web servers browsers comparison earlier systems turn presented chronic problem link rot unlike predecessors hypercard world wide web non-proprietary making possible develop servers clients independently add extensions without licensing restrictions 30 april 1993 cern announced world wide web would free anyone fees due coming two months announcement server implementation gopher protocol longer free use produced rapid shift away gopher towards web early popular web browser violawww unix x window system scholars generally agree turning point world wide web began introduction mosaic web browser 1993 graphical browser developed team national center supercomputing applications university illinois urbana–champaign ncsa-uiuc led marc andreessen funding mosaic came us high-performance computing communications initiative high performance computing act 1991 one several computing developments initiated us senator al gore prior release mosaic graphics commonly mixed text web pages web popularity less older protocols use internet gopher wide area information servers wais mosaic graphical user interface allowed web become far popular internet protocol world wide web consortium w3c founded tim berners-lee left european organization nuclear research cern october 1994 founded massachusetts institute technology laboratory computer science mit/lcs support defense advanced research projects agency darpa pioneered internet year later second site founded inria french national computer research lab support european commission dg infso 1996 third continental site created japan keio university end 1994 total number websites still relatively small many notable websites already active foreshadowed inspired today popular services connected internet websites created around world motivated international standards development protocols formatting berners-lee continued stay involved guiding development web standards markup languages compose web pages advocated vision semantic web world wide web enabled spread information internet easy-to-use flexible format thus played important role popularising use internet although two terms sometimes conflated popular use world wide web synonymous internet web information space containing hyperlinked documents resources identified uris implemented client server software using internet protocols tcp/ip http berners-lee knighted 2004 queen elizabeth ii services global development internet never patented invention terms internet world wide web often used without much distinction however two terms mean thing internet global system interconnected computer networks contrast world wide web global collection documents resources linked hyperlinks uris web resources accessed using http https application-level internet protocols use internet transport protocols viewing web page world wide web normally begins either typing url page web browser following hyperlink page resource web browser initiates series background communication messages fetch display requested page 1990s using browser view web pages—and move one web page another hyperlinks—came known 'browsing 'web surfing channel surfing 'navigating web early studies new behaviour investigated user patterns using web browsers one study example found five user patterns exploratory surfing window surfing evolved surfing bounded navigation targeted navigation following example demonstrates functioning web browser accessing page url codice_1 browser resolves server name url codice_2 internet protocol address using globally distributed domain name system dns lookup returns ip address 203.0.113.4 2001 db8:2e :7334 browser requests resource sending http request across internet computer address requests service specific tcp port number well known http service receiving host distinguish http request network protocols may servicing http protocol normally uses port number 80 https protocol normally port number 443 content http request simple two lines text computer receiving http request delivers web server software listening requests port 80 web server fulfil request sends http response back browser indicating success followed content requested page hypertext markup language html basic web page might look like web browser parses html interprets markup paragraph surrounds words format text screen many web pages use html reference urls resources images embedded media scripts affect page behaviour cascading style sheets affect page layout browser makes additional http requests web server internet media types receives content web server browser progressively renders page onto screen specified html additional resources hypertext markup language html standard markup language creating web pages web applications cascading style sheets css javascript forms triad cornerstone technologies world wide web web browsers receive html documents web server local storage render documents multimedia web pages html describes structure web page semantically originally included cues appearance document html elements building blocks html pages html constructs images objects interactive forms may embedded rendered page html provides means create structured documents denoting structural semantics text headings paragraphs lists links quotes items html elements delineated tags written using angle brackets tags directly introduce content page tags surround provide information document text may include tags sub-elements browsers display html tags use interpret content page html embed programs written scripting language javascript affects behavior content web pages inclusion css defines look layout content world wide web consortium w3c maintainer html css standards encouraged use css explicit presentational html web pages contain hyperlinks related pages perhaps downloadable files source documents definitions web resources underlying html hyperlink looks like collection useful related resources interconnected via hypertext links dubbed web information publication internet created tim berners-lee first called worldwideweb original camelcase subsequently discarded november 1990 hyperlink structure www described webgraph nodes web graph correspond web pages urls directed edges hyperlinks time many web resources pointed hyperlinks disappear relocate replaced different content makes hyperlinks obsolete phenomenon referred circles link rot hyperlinks affected often called dead links ephemeral nature web prompted many efforts archive web sites internet archive active since 1996 best known efforts many hostnames used world wide web begin www long-standing practice naming internet hosts according services provide hostname web server often www way may ftp ftp server news nntp usenet news server host names appear domain name system dns subdomain names www.example.com use www required technical policy standard many web sites use first web server nxoc01.cern.ch according paolo palazzi worked cern along tim berners-lee popular use www subdomain accidental world wide web project page intended published www.cern.ch info.cern.ch intended cern home page however dns records never switched practice prepending www institution website domain name subsequently copied many established websites still use prefix employ subdomain names www2 secure en special purposes many web servers set main domain name e.g. example.com www subdomain e.g. www.example.com refer site others require one form may map different web sites use subdomain name useful load balancing incoming web traffic creating cname record points cluster web servers since currently subdomain used cname result achieved using bare domain root user submits incomplete domain name web browser address bar input field web browsers automatically try adding prefix www beginning possibly .com .org .net end depending might missing example entering may transformed nowiki http //www.microsoft.com/ /nowiki 'openoffice nowiki http //www.openoffice.org /nowiki feature started appearing early versions firefox still working title 'firebird early 2003 earlier practice browsers lynx reported microsoft granted us patent idea 2008 mobile devices english www usually read double-u double-u double-u users pronounce dub-dub-dub particularly new zealand stephen fry podgrams series podcasts pronounces wuh wuh wuh english writer douglas adams quipped independent sunday 1999 world wide web thing know whose shortened form takes three times longer say short mandarin chinese world wide web commonly translated via phono-semantic matching wàn wéi wǎng satisfies www literally means myriad dimensional net translation reflects design concept proliferation world wide web tim berners-lee web-space states world wide web officially spelled three separate words capitalised intervening hyphens use www prefix declining especially web 2.0 web applications sought brand domain names make easily pronounceable mobile web grew popularity services like gmail.com outlook.com myspace.com facebook.com twitter.com often mentioned without adding www indeed .com domain scheme specifiers codice_3 codice_4 start web uri refer hypertext transfer protocol http secure respectively specify communication protocol use request response http protocol fundamental operation world wide web added encryption layer https essential browsers send retrieve confidential data passwords banking information web browsers usually automatically prepend nowiki http // /nowiki user-entered uris omitted web page also written webpage document suitable world wide web web browsers web browser displays web page monitor mobile device term web page usually refers visible may also refer contents computer file usually text file containing hypertext written html comparable markup language typical web pages provide hypertext browsing web pages via hyperlinks often referred links web browsers frequently access multiple web resource elements reading style sheets scripts images presenting web page network web browser retrieve web page remote web server web server may restrict access private network corporate intranet web browser uses hypertext transfer protocol http make requests web server static web page delivered exactly stored web content web server file system contrast dynamic web page generated web application usually driven server-side software dynamic web pages help browser client enhance web page user input server static web page sometimes called flat page/stationary page web page delivered user exactly stored contrast dynamic web pages generated web application consequently static web page displays information users contexts subject modern capabilities web server negotiate content-type language document versions available server configured server-side dynamic web page web page whose construction controlled application server processing server-side scripts server-side scripting parameters determine assembly every new web page proceeds including setting client-side processing client-side dynamic web page processes web page using html scripting running browser loads javascript scripting languages determine way html received page parsed document object model dom represents loaded web page client-side techniques dynamically update change dom way dynamic web page reloaded user computer program change variable content updating information could come server changes made page dom may may truncate browsing history create saved version go back dynamic web page update using ajax technologies neither create page go back truncate web browsing history forward displayed page using ajax technologies end user gets one dynamic page managed single page web browser actual web content rendered page vary ajax engine sits browser requesting parts dom dom client application server dhtml umbrella term technologies methods used create web pages static web pages though fallen common use since popularization ajax term rarely used client-side-scripting server-side scripting combination make dynamic web experience browser javascript scripting language initially developed 1995 brendan eich netscape use within web pages standardised version ecmascript make web pages interactive web applications also use javascript techniques ajax asynchronous javascript xml client-side script delivered page make additional http requests server either response user actions mouse movements clicks based elapsed time server responses used modify current page rather creating new page response server needs provide limited incremental information multiple ajax requests handled time users interact page data retrieved web pages may also regularly poll server check whether new information available website collection related web resources including web pages multimedia content typically identified common domain name published least one web server notable examples wikipedia.org google.com amazon.com website may accessible via public internet protocol ip network internet private local area network lan referencing uniform resource locator url identifies site websites many functions used various fashions website personal website corporate website company government website organization website etc websites typically dedicated particular topic purpose ranging entertainment social networking providing news education publicly accessible websites collectively constitute world wide web private websites company website employees typically part intranet web pages building blocks websites documents typically composed plain text interspersed formatting instructions hypertext markup language html xhtml may incorporate elements websites suitable markup anchors web pages accessed transported hypertext transfer protocol http may optionally employ encryption http secure https provide security privacy user user application often web browser renders page content according html markup instructions onto display terminal hyperlinking web pages conveys reader site structure guides navigation site often starts home page containing directory site web content websites require user registration subscription access content examples subscription websites include many business sites news websites academic journal websites gaming websites file-sharing websites message boards web-based email social networking websites websites providing real-time stock market data well sites providing various services end users access websites range devices including desktop laptop computers tablet computers smartphones smart tvs web browser commonly referred browser software user agent accessing information world wide web connect website server display pages user needs web browser program program user runs download format display web page user computer addition allowing users find displaying moving web pages web browser usually features like keeping bookmarks recording history managing cookies see home pages may facilities recording passwords logging web sites popular browsers chrome firefox safari internet explorer edge web server server software hardware dedicated running said software satisfy world wide web client requests web server general contain one websites web server processes incoming network requests http several related protocols primary function web server store process deliver web pages clients communication client server takes place using hypertext transfer protocol http pages delivered frequently html documents may include images style sheets scripts addition text content user agent commonly web browser web crawler initiates communication making request specific resource using http server responds content resource error message unable resource typically real file server secondary storage necessarily case depends web server implemented primary function serve content full implementation http also includes ways receiving content clients feature used submitting web forms including uploading files many generic web servers also support server-side scripting using active server pages asp php hypertext preprocessor scripting languages means behaviour web server scripted separate files actual server software remains unchanged usually function used generate html documents dynamically on-the-fly opposed returning static documents former primarily used retrieving modifying information databases latter typically much faster easily cached deliver dynamic content web servers also frequently found embedded devices printers routers webcams serving local network web server may used part system monitoring administering device question usually means additional software installed client computer since web browser required included operating systems http cookie also called web cookie internet cookie browser cookie simply cookie small piece data sent website stored user computer user web browser user browsing cookies designed reliable mechanism websites remember stateful information items added shopping cart online store record user browsing activity including clicking particular buttons logging recording pages visited past also used remember arbitrary pieces information user previously entered form fields names addresses passwords credit card numbers cookies perform essential functions modern web perhaps importantly authentication cookies common method used web servers know whether user logged account logged without mechanism site would know whether send page containing sensitive information require user authenticate logging security authentication cookie generally depends security issuing website user web browser whether cookie data encrypted security vulnerabilities may allow cookie data read hacker used gain access user data used gain access user credentials website cookie belongs see cross-site scripting cross-site request forgery examples tracking cookies especially third-party tracking cookies commonly used ways compile long-term records individuals browsing histories potential privacy concern prompted european u.s. lawmakers take action 2011 european law requires websites targeting european union member states gain informed consent users storing non-essential cookies device google project zero researcher jann horn describes ways cookies read intermediaries like wi-fi hotspot providers recommends use browser incognito mode circumstances web search engine internet search engine software system designed carry web search internet search means search world wide web systematic way particular information specified web search query search results generally presented line results often referred search engine results pages serps information may mix web pages images videos infographics articles research papers types files search engines also mine data available databases open directories unlike web directories maintained human editors search engines also maintain real-time information running algorithm web crawler internet content capable searched web search engine generally described deep web deep web invisible web hidden web parts world wide web whose contents indexed standard web search engines opposite term deep web surface web accessible anyone using internet computer scientist michael k. bergman credited coining term deep web 2001 search indexing term content deep web hidden behind http forms includes many common uses web mail online banking services users must pay protected paywall video demand online magazines newspapers among others content deep web located accessed direct url ip address may require password security access past public website page web cache server computer located either public internet within enterprise stores recently accessed web pages improve response time users content requested within certain time original request web browsers also implement browser cache writing recently obtained data local data storage device http requests browser may ask data changed since last access web pages resources may contain expiration information control caching secure sensitive data online banking facilitate frequently updated sites news media even sites highly dynamic content may permit basic resources refreshed occasionally web site designers find worthwhile collate resources css data javascript site-wide files cached efficiently enterprise firewalls often cache web resources requested one user benefit many users search engines store cached content frequently accessed websites criminals web become venue spread malware engage range cybercrimes including identity theft fraud espionage intelligence gathering web-based vulnerabilities outnumber traditional computer security concerns measured google one ten web pages may contain malicious code web-based attacks take place legitimate websites measured sophos hosted united states china russia common malware threats sql injection attacks websites html uris web vulnerable attacks like cross-site scripting xss came introduction javascript exacerbated degree web 2.0 ajax web design favours use scripts today one estimate 70 websites open xss attacks users phishing another common threat web february 2013 rsa security division emc estimated global losses phishing 1.5 billion 2012 two well-known phishing methods covert redirect open redirect proposed solutions vary large security companies like mcafee already design governance compliance suites meet post-9/11 regulations like finjan recommended active real-time inspection programming code content regardless source argued enterprises see web security business opportunity rather cost centre others call ubiquitous always-on digital rights management enforced infrastructure replace hundreds companies secure data networks jonathan zittrain said users sharing responsibility computing safety far preferable locking internet every time client requests web page server identify request ip address usually logs also unless set web browsers record requested web pages viewable history feature usually cache much content locally unless server-browser communication uses https encryption web requests responses travel plain text across internet viewed recorded cached intermediate systems another way hide personally identifiable information using vpn vpn encrypts online traffic masks original ip address lowering chance user identification web page asks user supplies personally identifiable information—such real name address e-mail address etc.—web-based entities associate current web traffic individual website uses http cookies username password authentication tracking techniques relate web visits identifiable information provided way possible web-based organisation develop build profile individual people use site sites may able build record individual includes information leisure activities shopping interests profession aspects demographic profile profiles obviously potential interest marketeers advertisers others depending website terms conditions local laws apply information profiles may sold shared passed organisations without user informed many ordinary people means little unexpected e-mails in-box uncannily relevant advertising future web page others mean time spent indulging unusual interest result deluge targeted marketing may unwelcome law enforcement counter terrorism espionage agencies also identify target track individuals based interests proclivities web social networking sites try get users use real names interests locations rather pseudonyms executives believe makes social networking experience engaging users hand uploaded photographs unguarded statements identified individual may regret exposure employers schools parents relatives may influenced aspects social networking profiles text posts digital photos posting individual intend audiences on-line bullies may make use personal information harass stalk users modern social networking websites allow fine grained control privacy settings individual posting complex easy find use especially beginners photographs videos posted onto websites caused particular problems add person face on-line profile modern potential facial recognition technology may possible relate face previously anonymous images events scenarios imaged elsewhere due image caching mirroring copying difficult remove image world wide web web standards include many interdependent standards specifications govern aspects internet world wide web even web-focused standards directly indirectly affect development administration web sites web services considerations include interoperability accessibility usability web pages web sites web standards broader sense consist following web standards fixed sets rules constantly evolving set finalized technical specifications web technologies web standards developed standards organizations—groups interested often competing parties chartered task standardization—not technologies developed declared standard single individual company crucial distinguish specifications development ones already reached final development status case w3c specifications highest maturity level methods accessing web alternative mediums formats facilitate use individuals disabilities disabilities may visual auditory physical speech-related cognitive neurological combination accessibility features also help people temporary disabilities like broken arm ageing users abilities change web receives information well providing information interacting society world wide web consortium claims essential web accessible provide equal access equal opportunity people disabilities tim berners-lee noted power web universality access everyone regardless disability essential aspect many countries regulate web accessibility requirement websites international co-operation w3c web accessibility initiative led simple guidelines web content authors well software developers use make web accessible persons may may using assistive technology w3c internationalisation activity assures web technology works languages scripts cultures beginning 2004 2005 unicode gained ground eventually december 2007 surpassed ascii western european web frequently used character encoding originally allowed resources identified uri subset us-ascii allows characters—any character universal character set—and resource identified iri language
node1:Wikipedia entry. Entry name: DNSChanger. Entry content: dnschanger dnschanger dns hijacking trojan work estonian company known rove digital malware infected computers modifying computer dns entries point toward rogue name servers injected advertising web pages peak dnschanger estimated infected four million computers bringing least us 14 million profits operator fraudulent advertising revenue windows mac os x variants dnschanger circulated latter taking form related trojan known rsplug fbi raided malicious servers november 8 2011 kept servers captured avoid affected users losing internet access july 9 2012 dnschanger distributed drive-by download claiming video codec needed view content web site particularly appearing rogue pornography sites installed malware modified system domain name system dns configuration pointing rogue name servers operated affiliates rove digital rogue name servers primarily substituted advertising web pages advertising sold rove additionally rogue dns server redirected links certain web sites advertisers example redirecting irs web site tax preparation company effects dnschanger could also spread computers within lan mimicking dhcp server pointing computers toward rogue dns servers indictment rove united states department justice also reported rogue servers blocked access update servers antivirus software october 1 2011 part operation ghost click collaborative investigation operation united states attorney southern district new york announced charges six estonian nationals one russian national connected dnschanger rove digital wire fraud computer intrusion conspiracy arrests made estonian authorities servers connected malware located united states seized fbi due concerns fbi agents users still infected dnschanger could lose internet access rogue dns servers shut entirely temporary court order obtained allow internet systems consortium operate replacement servers would serve dns requests yet removed infection collect information still infected order promptly notify presence malware court order set expire march 8 2012 extension granted july 9 2012 due concerns still many infected computers f-secure estimated july 4 2012 least 300,000 computers still infected dnschanger malware 70,000 located united states interim dns servers officially shut fbi july 9 2012 impact shutdown considered minimal due part major internet service providers providing temporary dns services support customers affected dnschanger informational campaigns surrounding malware impending shutdown included online tools could check presence dnschanger google facebook provided notifications visitors respective services still affected malware july 9 2012 f-secure estimated number remaining dnschanger infections u.s. dropped 70,000 42,000
node2:Wikipedia entry. Entry name: Solid_(web_decentralization_project). Entry content: solid web decentralization project solid social linked data web decentralization project led tim berners-lee inventor world wide web developed collaboratively massachusetts institute technology mit project aims radically change way web applications work today resulting true data ownership well improved privacy developing platform linked-data applications completely decentralized fully users control rather controlled entities ultimate goal solid allow users full control data including access control storage location end tim berners-lee formed company called inrupt help build commercial ecosystem fuel solid two decades berners-lee invented world wide web 1989 outlined design issues later became solid project drafts wrote world wide web consortium berners-lee became increasingly dismayed seeing invention abused russian hackers allegedly interfered 2016 us elections facebook–cambridge analytica data scandal became public facebook 2012 conducted psychological experiments nearly 700,000 users secret google amazon applied patents devices listen emotional changes human voices berners-lee felt internet need repair conceived solid project first step fix way give individual users full control usage data solid project available anyone join contribute although berners-lee advises people without coding skills instead advocate publicly changing internet 2015 mit received gift mastercard support development solid berners-lee research team collaborated qatar computing research institute oxford university solid 2018 berners-lee took sabbatical mit launch commercial venture based solid named inrupt company mission provide commercial energy ecosystem help protect integrity quality new web built solid number technical challenges surmounted accomplish decentralizing web according berners-lee vision rather using centralized spoke–hub distribution paradigm decentralized peer-to-peer networking implemented manner adds control performance features traditional peer-to-peer networks bittorrent goals system easy use fast allow simple creation applications developers solid central focus enable discovery sharing information way preserves privacy user stores personal data pods personal online data stores hosted wherever user desires applications authenticated solid allowed request data user given application permission user may distribute personal information among several pods example different pods might contain personal profile data contact information financial information health travel plans information user could join authenticated social-networking application giving permission access appropriate information specific pod user retains complete ownership control data user pods data pod contains pod stored applications permission use data detail solid consists following components
node3:Wikipedia entry. Entry name: File_copying. Entry content: file copying digital file management file copying creation new file content existing file computer operating systems include file copying methods users operating systems graphical user interfaces guis often providing copy-and-paste drag-and-drop methods file copying operating systems may specialized file copying apis usually able tell server perform copying locally without sending file contents network thus greatly improving performance file copying creation new copy file content existing file several different technologies use term file shadowing intent file shadowing within technologies provide exact copy mirror set data file shadowing effective shadow needs exist separate physical location original data depending reasons behind shadow operation location may close second harddrive chassis far away side globe computer operating systems include file copying provisions user interface like command cp unix copy ms-dos operating systems graphical user interface gui usually provide copy-and-paste drag-and-drop methods file copying file manager applications provide easy way copying files internally however systems specialized application programming interfaces apis copying files like copyfile copyfileex windows api others like unix ms-dos fall back simply reading contents old file writing new file makes little difference local files computer hard drive provides interesting situation source target files located remote file server operating systems specialized file copying apis usually able tell server perform copying locally without sending file contents network thus greatly improving performance systems comparable apis however read file contents network send back network sometimes remote file copying performed specialized command like ncopy ms-dos clients novell netware even complicated situation arises one needs copy files two remote servers simple way read data one server write data second server
node4:Wikipedia entry. Entry name: Computer_file. Entry content: computer file computer file computer resource recording data discretely computer storage device words written paper information written computer file files edited transferred internet particular computer system different types computer files designed different purposes file may designed store picture written message video computer program wide variety kinds data types files store several types information using computer programs person open read change save close computer file computer files may reopened modified copied arbitrary number times typically files organised file system keeps track files located disk enables user access word file derives latin filum thread file used context computer storage early january 1940 punched card methods scientific computation w.j eckert stated first extensive use early hollerith tabulator astronomy made comrie used building table successive differences adding large numbers harmonic terms tables functions constructed differences great efficiency either printed tables file punched cards february 1950 radio corporation america rca advertisement popular science magazine describing new memory vacuum tube developed rca stated results countless computations kept 'on file taken 'file exists 'memory tube developed rca laboratories electronically retains figures fed calculating machines holds storage memorizes new ones speeds intelligent solutions mazes mathematics 1952 file denoted inter alia information stored punched cards early use underlying hardware rather contents stored denominated file example ibm 350 disk drives denominated disk files introduction circa 1961 burroughs mcp mit compatible time-sharing system concept file system managed several virtual files one storage device origin contemporary denotation word although contemporary register file demonstrates early concept files use greatly decreased modern operating systems files organized one-dimensional arrays bytes format file defined content since file solely container data although platforms format usually indicated filename extension specifying rules bytes must organized interpreted meaningfully example bytes plain text file windows associated either ascii utf-8 characters bytes image video audio files interpreted otherwise file types also allocate bytes metadata allows file carry basic information file systems store arbitrary interpreted file system file-specific data outside file format linked file example extended attributes forks file systems done via sidecar files software-specific databases methods however susceptible loss metadata container archive file formats instant time file might size normally expressed number bytes indicates much storage associated file modern operating systems size non-negative whole number bytes system limit many older operating systems kept track number blocks tracks occupied file physical storage device systems software employed methods track exact byte count e.g. cp/m used special control character ctrl-z signal end text files general definition file require size real meaning however unless data within file happens correspond data within pool persistent storage special case zero byte file files newly created files yet data written may serve kind flag file system accidents results aborted disk operations example file link points typical unix-like system probably defined size seldom changes compare also file size may obscure information computer file consist smaller packets information often called records lines individually different share common traits example payroll file might contain information concerning employees company payroll details record payroll file concerns one employee records common trait related payroll—this similar placing payroll information specific filing cabinet office computer text file may contain lines text corresponding printed lines piece paper alternatively file may contain arbitrary binary image blob may contain executable way information grouped file entirely designed led plethora less standardized file structures imaginable purposes simplest complex computer files used computer programs create modify delete files use as-needed basis programmers create programs decide files needed used often names cases computer programs manipulate files made visible computer user example word-processing program user manipulates document files user personally names although content document file arranged format word-processing program understands user able choose name location file provide bulk information words text stored file many applications pack data files single file called archive file using internal markers discern different types information contained within benefits archive file lower number files easier transfer reduce storage usage organize outdated files archive file must often unpacked next using basic operations programs perform file files computer created moved modified grown shrunk deleted cases computer programs executed computer handle operations user computer also manipulate files necessary instance microsoft word files normally created modified microsoft word program response user commands user also move rename delete files directly using file manager program windows explorer windows computers command lines cli unix-like systems user space programs operate directly low level file kernel deals files handles user-space interaction files manner transparent user-space programs operating system provides level abstraction means interaction file user-space simply filename instead file descriptor example rm filename delete file link file many links file removed kernel considers file memory space free reallocated free space commonly considered security risk due existence file recovery software secure-deletion program uses kernel-space system functions wipe file data modern computer systems files typically accessed using names filenames operating systems name associated file others file anonymous pointed links names latter case user identify name link file false analogue especially exists one link file files links files located directories however generally directory contain either list files list links files within definition paramount importance term file includes directories permits existence directory hierarchies i.e. directories containing sub-directories name refers file within directory must typically unique words must identical names within directory however operating systems name may include specification type means directory contain identical name one type object directory file environments file named file name path file directory must uniquely identify among files computer system—no two files name path file anonymous named references exist within namespace cases name within namespace refer exactly zero one file however file may represented within namespace zero one names string characters may well-formed name file link depending upon context application whether name well-formed depends type computer system used early computers permitted letters digits name file modern computers allow long names 255 characters containing almost combination unicode letters unicode digits making easier understand purpose file glance computer systems allow file names contain spaces others case-sensitivity file names determined file system unix file systems usually case sensitive allow user-level applications create files whose names differ case characters microsoft windows supports multiple file systems different policies regarding case-sensitivity common fat file system multiple files whose names differ case user uses disk editor edit file names directory entries user applications however usually allow user create multiple files name differing case computers organize files hierarchies using folders directories catalogs concept irrespective terminology used folder contain arbitrary number files also contain folders folders referred subfolders subfolders contain still files folders thus building tree-like structure one master folder root folder — name varies one operating system another contain number levels folders files folders named files except root folder often name use folders makes easier organize files logical way computer allows use folders file folder name also path identifies folder folders file folder resides path sort special character—such slash—is used separate file folder names example illustration shown article path uniquely identifies file called folder called turn contained folder called folder file names separated slashes example topmost root folder name path begins slash root folder name would precede first slash many computer systems use extensions file names help identify contain also known file type windows computers extensions consist dot period end file name followed letters identify type file extension identifies text file extension identifies type document documentation commonly microsoft word file format even extensions used computer system degree computer system recognizes heeds vary systems required systems completely ignored presented many modern computer systems provide methods protecting files accidental deliberate damage computers allow multiple users implement file permissions control may may modify delete create files folders example given user may granted permission read file folder modify delete user may given permission read modify files folders execute permissions may also used allow certain users see contents file folder permissions protect unauthorized tampering destruction information files keep private information confidential unauthorized users another protection mechanism implemented many computers read-only flag flag turned file accomplished computer program human user file examined modified flag useful critical information must modified erased special files used internal parts computer system systems also include hidden flag make certain files invisible flag used computer system hide essential system files users alter file useful purpose must physical manifestation file abstract concept real computer system must real physical analogue exist physical terms computer files stored type data storage device example operating systems store files hard disk hard disks ubiquitous form non-volatile storage since early 1960s files contain temporary information may stored ram computer files also stored media cases magnetic tapes compact discs digital versatile discs zip drives usb flash drives etc use solid state drives also beginning rival hard disk drive unix-like operating systems many files associated physical storage device examples files directories virtual files exist objects within operating system kernel seen running user program files usually represented either file control block file handle file control block fcb area memory manipulated establish filename etc passed operating system parameter used older ibm operating systems early pc operating systems including cp/m early versions ms-dos file handle generally either opaque data type integer introduced around 1961 algol-based burroughs mcp running burroughs b5000 ubiquitous file said corrupted contents saved computer way ca n't properly read either human software depending extension damage original file sometimes recovered least partially understood file may created corrupt may corrupted later point overwriting many ways file become corrupted commonly issue happens process writing file disk example image-editing program unexpectedly crashes saving image file may corrupted program could n't save entirety program might warn user error allowing another attempt saving file examples reasons files become corrupted include although file corruption usually happens accidentally may also done purpose fool someone else thinking assignment ready earlier date potentially gaining time finish said assignment services provide demand file corruption essentially fill given file random data ca n't opened read yet still seems legitimate one effective countermeasures file corruption backing important files event important file becoming corrupted user simply replace backed version computer files contain information extremely important back-up process used protect disasters might destroy files backing files simply means making copies files separate location restored something happens computer deleted accidentally many ways back files computer systems provide utility programs assist back-up process become time-consuming many files safeguard files often copied removable media writable cds cartridge tapes copying files another hard disk computer protects failure one disk necessary protect failure destruction entire computer copies files must made media taken away computer stored safe distant location grandfather-father-son backup method automatically makes three back-ups grandfather file oldest copy file son current copy way computer organizes names stores manipulates files globally referred file system computers least one file system computers allow use several different file systems instance newer ms windows computers older fat-type file systems ms-dos old versions windows supported addition ntfs file system normal file system recent versions windows system advantages disadvantages standard fat allows eight-character file names plus three-character extension spaces example whereas ntfs allows much longer names contain spaces call file ntfs fat would restricted something like unless using vfat fat extension allowing long file names file manager programs utility programs allow users manipulate files directly allow move create delete rename files folders although actually allow read contents file store information every computer system provides least one file-manager program native file system example file explorer formerly windows explorer commonly used microsoft windows operating systems nautilus common several distributions linux
node5:Wikipedia entry. Entry name: Tiny_Banker_Trojan. Entry content: tiny banker trojan tiny banker trojan also called tinba malware program targets financial institution websites modified form older form viruses known banker trojans yet much smaller size powerful works establishing man-in-the-browser attacks network sniffing since discovery found infected two dozen major banking institutions united states including td bank chase hsbc wells fargo pnc bank america designed steal users sensitive data account login information banking codes tiny banker first discovered 2012 found infected thousands computers turkey discovered original source code malware leaked online began undergoing individual revisions making process detecting harder institutions highly modified version zeus trojan similar attack method obtain information tinba however found much smaller size smaller size makes malware difficult detect 20kb tinba much smaller known trojan reference average file size web site around 1,000kb difference infected web page clean one difficult anti-malware programs recognize tinba operates using packet sniffing method reading network traffic determine user navigates banking website malware launch one two different actions depending variation popular form tinba form grab webpage causing man-in-the-middle attack trojan uses form grabbing grab keystrokes encrypted https tinba sends keystrokes command control turn causes user information stolen second method tinba used allow user log webpage user malware use page information extract company logo site formatting create pop-up page informing user updates system requesting additional information social security numbers banking institutions inform users never ask information way defend types attacks tinba modified address defense begun asking users type information asked security questions user mother maiden name attempt attacker use information reset password later time tinba also injects system processes attempt convert host machine zombie unwilling member botnet order maintain connection botnet tinba coded four domains one goes loses communication trojan look one others immediately
node6:Wikipedia entry. Entry name: Dynamic_Host_Configuration_Protocol. Entry content: dynamic host configuration protocol dynamic host configuration protocol dhcp network management protocol used udp/ip networks whereby dhcp server dynamically assigns ip address network configuration parameters device network communicate ip networks dhcp server enables computers request ip addresses networking parameters automatically internet service provider isp reducing need network administrator user manually assign ip addresses network devices absence dhcp server computer device network needs manually assigned ip address assign apipa address enable communicate outside local subnet dhcp implemented networks ranging size home networks large campus networks regional internet service provider networks router residential gateway enabled act dhcp server residential network routers receive globally unique ip address within isp network within local network dhcp server assigns local ip address device connected network 1984 reverse address resolution protocol rarp defined rfc 903 introduced allow simple devices diskless workstations dynamically obtain suitable ip address however acted data link layer made implementation difficult many server platforms also required server present individual network link rarp superseded bootstrap protocol bootp defined rfc 951 september 1985 introduced concept relay agent allowed forwarding bootp packets across networks allowing one central bootp server serve hosts many ip subnets dhcp based bootp dynamically allocate ip addresses pool reclaim longer use also used deliver wide range extra configuration parameters ip clients including platform-specific parameters dhcp first defined rfc 1531 october 1993 due errors editorial process almost immediately reissued rfc 1541 four years later dhcpinform message type small changes added rfc 2131 remains standard ipv4 networks dhcpv6 initially described rfc 3315 2003 updated many subsequent rfcs rfc 3633 added dhcpv6 mechanism prefix delegation stateless address autoconfiguration added rfc 3736 udp/ip defines devices one network communicate devices another network dhcp server manage udp/ip settings devices network automatically dynamically assigning ip addresses devices dhcp operates based client–server model computer device connects network dhcp client software sends dhcp broadcast query requesting necessary information dhcp server network may service request dhcp server manages pool ip addresses information client configuration parameters default gateway domain name name servers time servers receiving dhcp request dhcp server may respond specific information client previously configured administrator specific address information valid entire network time period allocation lease valid dhcp client typically queries information immediately booting periodically thereafter expiration information dhcp client refreshes assignment initially requests parameter values dhcp server may assign new address based assignment policies set administrators large networks consist multiple links single dhcp server may service entire network aided dhcp relay agents located interconnecting routers agents relay messages dhcp clients dhcp servers located different subnets depending implementation dhcp server may three methods allocating ip addresses dhcp used internet protocol version 4 ipv4 ipv6 versions serve purpose details protocol ipv4 ipv6 differ sufficiently may considered separate protocols ipv6 operation devices may alternatively use stateless address autoconfiguration ipv6 hosts may also use link-local addressing achieve operations restricted local network link dhcp employs connectionless service model using user datagram protocol udp implemented two udp port numbers operations bootstrap protocol bootp udp port number 67 destination port server udp port number 68 used client dhcp operations fall four phases server discovery ip lease offer ip lease request ip lease acknowledgement stages often abbreviated dora discovery offer request acknowledgement dhcp operation begins clients broadcasting request client server different subnets dhcp helper dhcp relay agent may used clients requesting renewal existing lease may communicate directly via udp unicast since client already established ip address point additionally broadcast flag 1 bit 2 byte flags field bits reserved set 0 client use indicate way broadcast unicast receive dhcpoffer 0x8000 broadcast 0x0000 unicast usually dhcpoffer sent unicast hosts accept unicast packets ip addresses configured flag used work around issue dhcp client broadcasts dhcpdiscover message network subnet using destination address 255.255.255.255 limited broadcast specific subnet broadcast address directed broadcast dhcp client may also request last known ip address client remains connected network server may grant request otherwise depends whether server set authoritative authoritative server denies request causing client issue new request non-authoritative server simply ignores request leading implementation-dependent timeout client expire request ask new ip address example htype set 1 specify medium used ethernet hlen set 6 ethernet address mac address 6 octets long chaddr set mac address used client options set well dhcp server receives dhcpdiscover message client ip address lease request dhcp server reserves ip address client makes lease offer sending dhcpoffer message client message contains client client id traditionally mac address ip address server offering subnet mask lease duration ip address dhcp server making offer dhcp server may also take notice hardware-level mac address underlying transport layer according current rfcs transport layer mac address may used client id provided dhcp packet dhcp server determines configuration based client hardware address specified chaddr client hardware address field server 192.168.1.1 specifies client ip address yiaddr ip address field response dhcp offer client replies dhcprequest message broadcast server requesting offered address client receive dhcp offers multiple servers accept one dhcp offer based required server identification option request broadcast messaging servers informed whose offer client accepted dhcp servers receive message withdraw offers made client return offered ip address pool available addresses dhcp server receives dhcprequest message client configuration process enters final phase acknowledgement phase involves sending dhcpack packet client packet includes lease duration configuration information client might requested point ip configuration process completed protocol expects dhcp client configure network interface negotiated parameters client obtains ip address probe newly received address e.g arp address resolution protocol prevent address conflicts caused overlapping address pools dhcp servers dhcp client may request information server sent original dhcpoffer client may also request repeat data particular application example browsers use dhcp inform obtain web proxy settings via client sends request dhcp server release dhcp information client deactivates ip address client devices usually know users may unplug network protocol mandate sending dhcp release dhcp server provide optional configuration parameters client rfc 2132 describes available dhcp options defined internet assigned numbers authority iana dhcp bootp parameters dhcp client select manipulate overwrite parameters provided dhcp server unix-like systems client-level refinement typically takes place according values configuration file /etc/dhclient.conf options octet strings varying length first octet option code second octet number following octets remaining octets code dependent example dhcp message-type option offer would appear 0x35 0x01 0x02 0x35 code 53 dhcp message type 0x01 means one octet follows 0x02 value offer following tables list available dhcp options listed rfc 2132 iana registry option exists identify vendor functionality dhcp client information variable-length string characters octets meaning specified vendor dhcp client one method dhcp client utilize communicate server using certain type hardware firmware set value dhcp requests called vendor class identifier vci option 60 method allows dhcp server differentiate two kinds client machines process requests two types modems appropriately types set-top boxes also set vci option 60 inform dhcp server hardware type functionality device value option set gives dhcp server hint required extra information client needs dhcp response relay agent information option option 82 specifies container attaching sub-options dhcp requests transmitted dhcp relay dhcp server small networks one ip subnet managed dhcp clients communicate directly dhcp servers however dhcp servers also provide ip addresses multiple subnets case dhcp client yet acquired ip address communicate directly dhcp server using ip routing routable ip address know link layer address router know ip address dhcp server order allow dhcp clients subnets directly served dhcp servers communicate dhcp servers dhcp relay agents installed subnets dhcp client broadcasts local link relay agent receives broadcast transmits one dhcp servers using unicast relay agent stores ip address field giaddr field dhcp packet dhcp server uses giaddr-value determine subnet relay agent received broadcast allocates ip address subnet dhcp server replies client sends reply giaddr-address using unicast relay agent retransmits response local network situation communication relay agent dhcp server typically uses source destination udp port 67 dhcp ensures reliability several ways periodic renewal rebinding failover dhcp clients allocated leases last period time clients begin attempt renew leases half lease interval expired sending unicast dhcprequest message dhcp server granted original lease server unreachable fail respond dhcprequest however case client repeats dhcprequest time time dhcp server comes back becomes reachable dhcp client succeed contacting renew lease dhcp server unreachable extended period time dhcp client attempt rebind broadcasting dhcprequest rather unicasting broadcast dhcprequest message reach available dhcp servers dhcp server able renew lease time order rebinding work client successfully contacts backup dhcp server server must accurate information client binding maintaining accurate binding information two servers complicated problem servers able update lease database must mechanism avoid conflicts updates independent servers proposal implementing fault-tolerant dhcp servers submitted internet engineering task force never formalized rebinding fails lease eventually expire lease expires client must stop using ip address granted lease time restart dhcp process beginning broadcasting codice_1 message since lease expired accept ip address offered new ip address presumably different dhcp server able use network however since ip address changed ongoing connections broken 2018 dhcp remains widely-used automatically assign ip addresses newer iterations assigning ip addresses include dhcpv6 slaac base dhcp include mechanism authentication vulnerable variety attacks attacks fall three main categories client way validate identity dhcp server unauthorized dhcp servers commonly called rogue dhcp operated networks providing incorrect information dhcp clients serve either denial-of-service attack preventing client gaining access network connectivity man-in-the-middle attack dhcp server provides dhcp client server ip addresses ip address one dns servers attacker convince dhcp client dns lookups dns server therefore provide answers dns queries client turn allows attacker redirect network traffic allowing eavesdrop connections client network servers contacts simply replace network servers dhcp server secure mechanism authenticating client clients gain unauthorized access ip addresses presenting credentials client identifiers belong dhcp clients also allows dhcp clients exhaust dhcp server store ip addresses—by presenting new credentials time asks address client consume available ip addresses particular network link preventing dhcp clients getting service dhcp provide mechanisms mitigating problems relay agent information option protocol extension rfc 3046 usually referred industry actual number option 82 allows network operators attach tags dhcp messages messages arrive network operator trusted network tag used authorization token control client access network resources client access network upstream relay agent lack authentication prevent dhcp server operator relying authorization token another extension authentication dhcp messages rfc 3118 provides mechanism authenticating dhcp messages 2002 nowiki rfc 3118 /nowiki seen widespread adoption problems managing keys large numbers dhcp clients 2007 book dsl technologies remarked numerous security vulnerabilities identified security measures proposed rfc 3118 fact combined introduction 802.1x slowed deployment take-rate authenticated dhcp never widely deployed 2010 book notes implementations dhcp authentication challenges key management processing delays due hash computation deemed heavy price pay perceived benefits architectural proposals 2008 involve authenticating dhcp requests using 802.1x pana transport eap ietf proposal made including eap dhcp so-called eapodhcp appear progressed beyond ietf draft level last dates 2010
node7:Wikipedia entry. Entry name: Internet_security. Entry content: internet security internet security branch computer security specifically related internet often involving browser security world wide web also network security applies applications operating systems whole objective establish rules measures use attacks internet internet represents insecure channel exchanging information leads high risk intrusion fraud phishing online viruses trojans worms many methods used protect transfer data including encryption from-the-ground-up engineering current focus prevention much real time protection well known new threats internet user tricked forced downloading software malicious intent onto computer software comes many forms viruses trojan horses spyware worms denial-of-service attack dos attack distributed denial-of-service attack ddos attack attempt make computer resource unavailable intended users another way understanding ddos seeing attacks cloud computing environment growing due essential characteristics cloud computing although means carry motives targets dos attack may vary generally consists concerted efforts prevent internet site service functioning efficiently temporarily indefinitely according businesses participated international business security survey 25 respondents experienced dos attack 2007 16.8 experienced one 2010 dos attacks often use bots botnet carry attack phishing attack targets online users extraction sensitive information username password credit card information phishing occurs attacker pretends trustworthy entity either via email web page victims directed fake web pages dressed look legitimate via spoof emails instant messenger/social media avenues often tactics email spoofing used make emails appear legitimate senders long complex subdomains hide real website host insurance group rsa said phishing accounted worldwide losses 10.8 billion 2016 applications used access internet resources may contain security vulnerabilities memory safety bugs flawed authentication checks severe bugs give network attackers full control computer security applications suites incapable adequate defense kinds attacks common widespread web-browser application vulnerability so-called cross-origin resource sharing vulnerability- maximum security privacy make sure adopt adequate countermeasures example patches provided webkit-based browsers tcp/ip protocols may secured cryptographic methods security protocols protocols include secure sockets layer ssl succeeded transport layer security tls web traffic pretty good privacy pgp email ipsec network layer security ipsec designed protect tcp/ip communication secure manner set security extensions developed internet task force ietf provides security authentication ip layer transforming data using encryption two main types transformation form basis ipsec authentication header ah esp two protocols provide data integrity data origin authentication anti-replay service protocols used alone combination provide desired set security services internet protocol ip layer basic components ipsec security architecture described terms following functionalities set security services provided ip layer includes access control data origin integrity protection replays confidentiality algorithm allows sets work independently without affecting parts implementation ipsec implementation operated host security gateway environment giving protection ip traffic multi-factor authentication mfa method computer access control user granted access successfully presenting several separate pieces evidence authentication mechanism – typically least two following categories knowledge something know possession something inherence something internet resources websites email may secured using multi-factor authentication online sites offer customers ability use six-digit code randomly changes every 30–60 seconds security token keys security token built mathematical computations manipulate numbers based current time built device means every thirty seconds certain array numbers possible would correct validate access online account website user logging would made aware device serial number would know computation correct time built device verify number given indeed one handful six-digit numbers works given 30-60 second cycle 30–60 seconds device present new random six-digit number log website email messages composed delivered stored multiple step process starts message composition user finishes composing message sends message transformed standard format rfc 2822 formatted message afterwards message transmitted using network connection mail client referred mail user agent mua connects mail transfer agent mta operating mail server mail client provides sender ’ identity server next using mail server commands client sends recipient list mail server client supplies message mail server receives processes message several events occur recipient server identification connection establishment message transmission using domain name system dns services sender ’ mail server determines mail server recipient server opens connection recipient mail server sends message employing process similar used originating client delivering message recipient pretty good privacy provides confidentiality encrypting messages transmitted data files stored using encryption algorithm triple des cast-128 email messages protected using cryptography various ways following first two methods message signing message body encryption often used together however encrypting transmissions mail servers typically used two organizations want protect emails regularly sent example organizations could establish virtual private network vpn encrypt communications mail servers internet unlike methods encrypt message body vpn encrypt entire messages including email header information senders recipients subjects cases organizations may need protect header information however vpn solution alone provide message signing mechanism provide protection email messages along entire route sender recipient mime transforms non-ascii data sender site network virtual terminal nvt ascii data delivers client simple mail transfer protocol smtp sent internet server smtp receiver side receives nvt ascii data delivers mime transformed back original non-ascii data message authentication code mac cryptography method uses secret key encrypt message method outputs mac value decrypted receiver using secret key used sender message authentication code protects message data integrity well authenticity computer firewall controls access networks generally consists gateways filters vary one firewall another firewalls also screen network traffic able block traffic dangerous firewalls act intermediate server smtp hypertext transfer protocol http connections firewalls impose restrictions incoming outgoing network packets private networks incoming outgoing traffic must pass firewall authorized traffic allowed pass firewalls create checkpoints internal private network public internet also known choke points borrowed identical military term combat limiting geographical feature firewalls create choke points based ip source tcp port number also serve platform ipsec using tunnel mode capability firewall used implement vpns firewalls also limit network exposure hiding internal network system information public internet packet filter first generation firewall processes network traffic packet-by-packet basis main job filter traffic remote ip host router needed connect internal network internet router known screening router screens packets leaving entering network stateful firewall circuit-level gateway proxy server operates network level open systems interconnection osi model statically defines traffic allowed circuit proxies forward network packets formatted unit data containing given port number port permitted algorithm main advantage proxy server ability provide network address translation nat hide user ip address internet effectively protecting internal information internet application-level firewall third generation firewall proxy server operates top osi model ip suite application level network packet forwarded connection established using known protocol application-level gateways notable analyzing entire messages rather individual packets data data sent received web browser statistics tend affect amount web browser exploited example internet explorer 6 used majority web browser market share considered extremely insecure vulnerabilities exploited due former popularity since browser choice evenly distributed internet explorer 28.5 firefox 18.4 google chrome 40.8 vulnerabilities exploited many different browsers antivirus software internet security programs protect programmable device attack detecting eliminating malware antivirus software mainly shareware early years internet several free security applications internet choose platforms password manager software application helps user store organize passwords password managers usually store passwords encrypted requiring user create master password single ideally strong password grants user access entire password database top bottom called security suites first offered sale 2003 mcafee contain suite firewalls anti-virus anti-spyware also offer theft protection portable storage device safety check private internet browsing cloud anti-spam file shredder make security-related decisions answering popup windows several free charge
node8:Wikipedia entry. Entry name: Referer_spoofing. Entry content: referer spoofing http networking typically world wide web referer spoofing based canonised misspelling referrer sends incorrect referer information http request order prevent website obtaining accurate data identity web page previously visited user referer spoofing typically done data privacy reasons testing order request information without genuine authority web servers may supply response requests specific http referers improve privacy individual browser users may replace accurate referer data inaccurate data though many simply suppress browser sending referer data sending referrer information technically spoofing though sometimes also described software systems networks testing sometimes penetration testing referer spoofing often part larger procedure transmitting accurate inaccurate well expected unexpected input httpd system tested observing results many web sites configured gather referer information serve different content depending referer information obtained exclusively relying http referer information authentication authorization purposes genuine computer security measure http referer information freely alterable interceptable password though poorly configured systems treat websites especially many image hosting sites use referer information secure materials browsers arriving web pages served images additionally site may want users click pages advertisements directly able access downloadable file — using referring page referring site information help site redirect unauthorized users landing page site would like use attackers acquire knowledge approved referers often trivial many sites follow common template use information combined exploit gain access materials spoofing often allows access site content site web server configured block browsers send referer headers website owners may disallow hotlinking also used defeat referer checking controls used mitigate cross-site request forgery attacks several software tools exist facilitate referer spoofing web browsers extensions popular browsers mozilla firefox internet explorer may provide facilities customise manage referrer urls website user visits tools include proxy servers individual configures browser send http requests proxy forwards different headers intended website usually removing modifying referer header proxies may also present privacy issues users may log user activity
node9:Wikipedia entry. Entry name: Web_log_analysis_software. Entry content: web log analysis software web log analysis software also called web log analyzer kind web analytics software parses server log file web server based values contained log file derives indicators web server visited reports usually generated immediately data extracted log files alternatively stored database allowing various reports generated demand features supported log analysis packages may include hit filters use pattern matching examine selected log data
node10:Wikipedia entry. Entry name: Proxy_server. Entry content: proxy server computer networks proxy server server computer system application acts intermediary requests clients seeking resources servers client connects proxy server requesting service file connection web page resource available different server proxy server evaluates request way simplify control complexity proxies invented add structure encapsulation distributed systems proxy server may reside user local computer point user computer destination servers internet open proxy forwarding proxy server accessible internet user 2008 gordon lyon estimates hundreds thousands open proxies internet anonymous open proxy allows users conceal ip address browsing web using internet services varying degrees anonymity however well number methods 'tricking client revealing regardless proxy used reverse proxy surrogate proxy server appears clients ordinary server reverse proxies forward requests one ordinary servers handle request response proxy server returned came directly original server leaving client knowledge original server reverse proxies installed neighborhood one web servers traffic coming internet destination one neighborhood web servers goes proxy server use reverse originates counterpart forward proxy since reverse proxy sits closer web server serves restricted set websites several reasons installing reverse proxy servers content-filtering web proxy server provides administrative control content may relayed one directions proxy commonly used commercial non-commercial organizations especially schools ensure internet usage conforms acceptable use policy content filtering proxy often support user authentication control web access also usually produces logs either give detailed information urls accessed specific users monitor bandwidth usage statistics may also communicate daemon-based and/or icap-based antivirus software provide security virus malware scanning incoming content real time enters network many workplaces schools colleges restrict web sites online services accessible available buildings governments also censor undesirable content done either specialized proxy called content filter commercial free products available using cache-extension protocol icap allows plug-in extensions open caching architecture websites commonly used students circumvent filters access blocked content often include proxy user access websites filter trying block requests may filtered several methods url dns blacklists blacklist url regex filtering mime filtering content keyword filtering products known employ content analysis techniques look traits commonly used certain types content providers blacklists often provided maintained web-filtering companies often grouped categories pornography gambling shopping social networks etc. assuming requested url acceptable content fetched proxy point dynamic filter may applied return path example jpeg files could blocked based fleshtone matches language filters could dynamically detect unwanted language content rejected http fetch error may returned requester web filtering companies use internet-wide crawling robot assesses likelihood content certain type resultant database corrected manual labor based complaints known flaws content-matching algorithms proxies scan outbound content e.g. data loss prevention scan content malicious software web filtering proxies able peer inside secure sockets http transactions assuming chain-of-trust ssl/tls transport layer security tampered ssl/tls chain-of-trust relies trusted root certificate authorities workplace setting client managed organization trust might granted root certificate whose private key known proxy consequently root certificate generated proxy installed browser ca list staff situations proxy analysis contents ssl/tls transaction becomes possible proxy effectively operating man-in-the-middle attack allowed client trust root certificate proxy owns destination server filters content based origin request use proxy circumvent filter example server using ip-based geolocation restrict service certain country accessed using proxy located country access service web proxies common means bypassing government censorship although 3 internet users use circumvention tools cases users circumvent proxies filter using blacklists using services designed proxy information non-blacklisted location proxies installed order eavesdrop upon data-flow client machines web content sent accessed – including passwords submitted cookies used – captured analyzed proxy operator reason passwords online services webmail banking always exchanged cryptographically secured connection ssl chaining proxies reveal data original requester possible obfuscate activities eyes user destination however traces left intermediate hops could used offered trace user activities policies administrators proxies unknown user may fall victim false sense security details sight mind inconvenience risk proxy users may find blocked certain web sites numerous forums web sites block ip addresses proxies known spammed trolled site proxy bouncing used maintain privacy caching proxy server accelerates service requests retrieving content saved previous request made client even clients caching proxies keep local copies frequently requested resources allowing large organizations significantly reduce upstream bandwidth usage costs significantly increasing performance isps large businesses caching proxy caching proxies first kind proxy server web proxies commonly used cache web pages web server poorly implemented caching proxies cause problems inability use user authentication proxy designed mitigate specific link related issues degradation performance enhancing proxy peps typically used improve tcp performance presence high round-trip times high packet loss wireless mobile phone networks highly asymmetric links featuring different upload download rates peps make efficient use network example merging tcp acks acknowledgements compressing data sent application layer translation proxy proxy server used localize website experience different markets traffic global audience routed translation proxy source website visitors browse proxied site requests go back source site pages rendered original language content response replaced translated content passes back proxy translations used translation proxy either machine translation human translation combination machine human translation different translation proxy implementations different capabilities allow customization source site local audience excluding source content substituting source content original local content proxy used automatically repair errors proxied content instance bikiniproxy system instruments javascript code fly order detect automatically repair errors happening browser.. another kind repair done proxy fix accessibility issues anonymous proxy server sometimes called web proxy generally attempts anonymize web surfing different varieties anonymizers destination server server ultimately satisfies web request receives requests anonymizing proxy server thus receive information end user address requests anonymous anonymizing proxy server however degree trust present proxy server user many proxy servers funded continued advertising link user access control proxy servers implement logon requirement large organizations authorized users must log gain access web organization thereby track usage individuals anonymizing proxy servers may forward data packets header lines http_via http_x_forwarded_for http_forwarded may reveal ip address client anonymizing proxy servers known elite high-anonymity proxies make appear proxy server client website could still suspect proxy used client sends packets include cookie previous visit use high-anonymity proxy server clearing cookies possibly cache would solve problem advertisers use proxy servers validating checking quality assurance geotargeted ads geotargeting ad server checks request source ip address uses geo-ip database determine geographic source requests using proxy server physically located inside specific country city gives advertisers ability test geotargeted ads proxy keep internal network structure company secret using network address translation help security internal network makes requests machines users local network anonymous proxies also combined firewalls incorrectly configured proxy provide access network otherwise isolated internet proxies allow web sites make web requests externally hosted resources e.g images music files etc cross-domain restrictions prohibit web site linking directly outside domains proxies also allow browser make web requests externally hosted content behalf website cross-domain restrictions place protect websites likes data theft prohibit browser directly accessing outside domains secondary market brokers use web proxy servers buy large stocks limited products limited sneakers tickets web proxies forward http requests request client regular http request except full url passed instead path request sent proxy server proxy makes request specified returns response web proxies allow http connect method set forwarding arbitrary data connection common policy forward port 443 allow https traffic examples web proxy servers include apache mod_proxy traffic server haproxy iis configured proxy e.g. application request routing nginx privoxy squid varnish reverse proxy wingate ziproxy tinyproxy rabbit4 polipo clients problem complex multiple proxy-servers solved client-serer proxy auto-config protocol pac file socks also forwards arbitrary data connection phase similar http connect web proxies also known intercepting proxy inline proxy forced proxy transparent proxy intercepts normal communication without requiring special client configuration clients need aware existence proxy transparent proxy normally located client internet proxy performing functions gateway router 'transparent proxy proxy modify request response beyond required proxy authentication identification 'non-transparent proxy proxy modifies request response order provide added service user agent group annotation services media type transformation protocol reduction anonymity filtering tcp intercept traffic filtering security feature protects tcp servers tcp syn flood attacks type denial-of-service attack tcp intercept available ip traffic 2009 security flaw way transparent proxies operate published robert auger computer emergency response team issued advisory listing dozens affected transparent intercepting proxy servers intercepting proxies commonly used businesses enforce acceptable use policy ease administrative overheads since client browser configuration required second reason however mitigated features active directory group policy dhcp automatic proxy detection intercepting proxies also commonly used isps countries save upstream bandwidth improve customer response times caching common countries bandwidth limited e.g island nations must paid diversion interception tcp connection creates several issues firstly original destination ip port must somehow communicated proxy always possible e.g. gateway proxy reside different hosts class cross site attacks depend certain behaviour intercepting proxies check access information original intercepted destination problem may resolved using integrated packet-level application level appliance software able communicate information packet handler proxy intercepting also creates problems http authentication especially connection-oriented authentication ntlm client browser believes talking server rather proxy cause problems intercepting proxy requires authentication user connects site also requires authentication finally intercepting connections cause problems http caches requests responses become uncacheable shared cache integrated firewall proxy servers router/firewall host proxy communicating original destination information done method example microsoft tmg wingate interception also performed using cisco wccp web cache control protocol proprietary protocol resides router configured cache allowing cache determine ports traffic sent via transparent redirection router redirection occur one two ways gre tunneling osi layer 3 mac rewrites osi layer 2 traffic reaches proxy machine interception commonly performed nat network address translation setups invisible client browser leave proxy visible web server devices internet side proxy recent linux bsd releases provide tproxy transparent proxy performs ip-level osi layer 3 transparent interception spoofing outbound traffic hiding proxy ip address network devices several methods often used detect presence intercepting proxy server cgi web proxy accepts target urls using web form user browser window processes request returns results user browser consequently used device network allow true proxy settings changed first recorded cgi proxy named rover time renamed 1998 cgiproxy developed american computer scientist james marshall early 1996 article unix review rich morin majority cgi proxies powered one cgiproxy written perl language glype written php language phproxy written php language april 2016 cgiproxy received 2 million downloads glype received almost million downloads whilst phproxy still receives hundreds downloads per week despite waning popularity due vpns privacy methods still several thousand cgi proxies online cgi proxies set purposes making websites accessible disabled people since shut due excessive traffic usually caused third party advertising service means bypass local filtering since many users n't care collateral damage causing became necessary organizations hide proxies disclosing urls take trouble contact organization demonstrate genuine need suffix proxy allows user access web content appending name proxy server url requested content e.g en.wikipedia.org. suffixproxy.com suffix proxy servers easier use regular proxy servers offer high levels anonymity primary use bypassing web filters however rarely used due advanced web filters tor short onion router system intended enable online anonymity tor client software routes internet traffic worldwide volunteer network servers order conceal user location usage someone conducting network surveillance traffic analysis using tor makes difficult trace internet activity including visits web sites online posts instant messages communication forms back user intended protect users personal freedom privacy ability conduct confidential business keeping internet activities monitored onion routing refers layered nature encryption service original data encrypted re-encrypted multiple times sent successive tor relays one decrypts layer encryption passing data next relay ultimately destination reduces possibility original data unscrambled understood transit tor client free software additional charges use network i2p anonymous network 'i2p proxy network aiming online anonymity implements garlic routing enhancement tor onion routing i2p fully distributed works encrypting communications various layers relaying network routers run volunteers various locations keeping source information hidden i2p offers censorship resistance goals i2p protect users personal freedom privacy ability conduct confidential business user i2p runs i2p router computer node i2p router takes care finding peers building anonymizing tunnels i2p provides proxies protocols http irc socks ... software free open-source network free charge use 'proxy refers layer-7 application osi reference model network address translation nat similar proxy operates layer-3 client configuration layer-3 nat configuring gateway sufficient however client configuration layer-7 proxy destination packets client generates must always proxy server layer-7 proxy server reads packet finds true destination nat operates layer-3 less resource-intensive layer-7 proxy also less flexible compare two technologies might encounter terminology known 'transparent firewall transparent firewall means proxy uses layer-7 proxy advantages without knowledge client client presumes gateway nat layer-3 idea inside packet method layer-3 packets sent layer-7 proxy investigation dns proxy server takes dns queries usually local network forwards internet domain name server may also cache dns records client programs socks-ify allows adaptation networked software connect external networks via certain types proxy servers mostly socks
node11:Wikipedia entry. Entry name: Firefox_3.6. Entry content: firefox 3.6 mozilla firefox 3.6 version firefox web browser released january 2010 release main improvement firefox 3.5 improved performance due speed improvements tracemonkey javascript engine uses gecko 1.9.2 engine compared 1.9.1 ff 3.5 improves compliance web standards codenamed namoroka version support x bitmap images dropped release marked beginning new development cycle firefox well receiving major updates browser also received minor updates new features allow users receive new features quickly dawn new roadmap reflected changes superseded firefox 4 released next year although ff 3.6 prolonged period use version 4 noted user interface changes firefox 3.6 last major version official firefox release run powerpc-based macintoshes see tenfourfox much-more-recent version firefox powerpc-based computers running mac os x soon 4 much less weight given major version numbers 6 numbers used september year 4 5 6 7 8 9 compared 3 nearly decade firefox development 1 2 3 firefox versions 4 9 reached end-of-life status mozilla continued supporting firefox 3.6 security updates coinciding proposal cater enterprise users optional extended support releases beginning 2012 based upon firefox 10 mozilla discontinued support firefox 3.6 april 24 2012 automatic update firefox 12 pushed compatible devices june 2012 development version started december 1 2008 first alpha version 3.6 released august 7 2009 first beta version released october 30 followed beta 2 november 10 beta 3 november 17 beta 4 november 26 beta 5 december 17 release candidate 1 released january 8 2010 followed release candidate 2 january 17 final version released january 21 2010 firefox 3.6.2 released march 23 2010 followed version 3.6.3 april 1 closed bugs aslr dep handling found pwn2own contest 2010 firefox developers created new feature called lorentz named lorentz national park preview version lorentz firefox 3.6.3plugin1 made available april 8 2010 betas firefox 3.6.4 made available starting april 20 2010 firefox 3.6.4 released june 22 2010 windows linux versions incorporate out-of-process plug-ins oopp isolates execution plug-ins adobe flash apple quicktime microsoft silverlight default separate process significantly reduces number firefox crashes experienced users watching online videos playing games user simply refresh page continue mozilla states 30 browser crashes caused third-party plugins support plug-ins default oopp mac os x platform become available firefox 4 firefox 3.6.6 lengthens amount time plug-in allowed unresponsive point plug-in quits firefox 3.6.7 security stability update fixed several issues firefox 3.6.8 security update released mere three days 3.6.7 fix another security fault firefox 3.6.9 addition fixing security stability issues introduced support codice_1 http response header help prevent clickjacking firefox 3.6.10 security stability update fixed several issues firefox 3.6.11 security stability update fixed several issues firefox 3.6.12 security update fixed critical security issue firefox 3.6.13 security stability update fixed several issues firefox 3.6.14 security stability update fixed several issues firefox 3.6.15 stability update fixed java applets issue firefox 3.6.16 security update blacklisted invalid https certificates firefox 3.6.17 security stability update fixed several issues firefox 3.6.18 security stability update fixed several issues firefox 3.6.19 stability update fixed several issues firefox 3.6.20 security stability update fixed several issues firefox 3.6.21 security update blacklisted compromised https certificate firefox 3.6.22 security update revoked ssl certificates staten der nederlanden due fraudulent ssl certificate issuance well fixing error .gov.uk domain names firefox 3.6.23 security stability update fixed several issues firefox 3.6.24 security stability update fixed several issues firefox 3.6.25 security stability update fixed several issues firefox 3.6.26 security stability update fixed several issues firefox 3.6.27 security update fixed several issues firefox 3.6.28 security stability update fixed several issues new features firefox 3.6 include mozilla discontinued support firefox 3.6 april 24 2012 27 months support made longest supported version firefox even longer firefox 2 26 months total support underlying gecko 1.9.2 engine continued used updates camino
node12:Wikipedia entry. Entry name: Unique_user. Entry content: unique user according ifabc global web standards unique user uu ip address plus identifier term unique visitor may used instead unique user terms essentially meaning see sites may use user agent cookie and/or registration id note users allocated ip addresses dynamically example dial-up internet service providers definition may overstate understate real number individual users concerned unique users common way measuring popularity website often quoted potential advertisers investors website unique users usually measured standard period time typically month use performance indicators unique visitors/users controversial greg harmon belden research inferring many companies reporting online performance may overstate number unique visitors remember identifier computer person usually computer identified cookie often specific individual browser computer since increasing percentage people united states least access computer home work school one may divide reported total unique users half another increasing fraction people regularly delete cookies machines—presumably home work—and yet another large fraction use one browser machines means typical news site example people might typically visit day keep breaking news reported unique users might overstate number different people factor four plus side wishing impress advertisers investors reported number sessions visits pageviews probably accurate smaller group people visits much often looks pages raw numbers would suggest similar turf total unduplicated reach frequency metric often used television radio newspaper analyses unique users measure distribution content number distinct consumers common mistake using unique user numbers adding unique user numbers across dimensions unique user metric valid given set dimensions e.g time browsers example website may 100 unique users day day dimension particular week data one extrapolate number weekly unique users unique user count week 100 700 however website administrators track unique user traffic longer period time build reliable view performance direct competitors within sector online businesses tend static conversation rate ratio unique users new business clients calculating movement unique users conversion funnel time period must used every step unique user counts websites typically counted using cookies browser visits website website checks existence particular cookie cookie present cookie value captured cookie present website create cookie unique visitors refers number distinct individuals requesting pages website given period regardless often visit visits refer number times site visited matter many visitors make visits individual goes website tuesday wednesday recorded two visits one visitor purpose tracking unique visitors help marketers understand website user behavior visitor make multiple visits specified period number visits may greater number visitors visitor sometimes referred unique visitor unique user clearly convey idea visitor counted measurement users visitors requires standard time period distorted automatic activity bots classify web content estimation visitors visits traffic statistics usually filtered remove type activity eliminating known ip addresses bots requiring registration cookies using panel data
node13:Wikipedia entry. Entry name: Scriptcase. Entry content: scriptcase scriptcase rad development platform php applications web oriented installed server internet acts like platform developers allows use graphical interface directly web browser automatically generate codes developed netmake year 2000 used mac windows linux operating system using scriptcase php developers generate complete online applications scriptcaseis rapid web development tool aims reduce development time increase productivity developers need xamp like environment web server like apache incl php dabase like mysql browser desktop accessible via network internet develop applications hosting applications server needs webserver incl php database programs finally developed deployed scriptcase longer necessary run application scriptcase used create crud create read update delete applications also enables add custom code manage business rules validation scriptcase lets create forms queries php ranging simple forms forms high level complex elements manipulate data databases mysql postgresql sqlite interbase firebird access oracle ms sqlserver db2 sybase informix odbc connections permits development javascript methods used within ajax events create applications ajax set features services easy fast hand coding navigation pages sections automatic validation fields date currency zip code social security number among others generated reports exported ms word ms excel pdf printed complex sql statements used sub-select joins even stored procedures scriptcase allows users write php handle exceptions create complex validation scriptcase compatible rtl right left writing support right left writing prevalent arabic languages also possible create infrastructure menus login screen security system authentication create tabs group forms queries executed page platform development began 2000 since receiving regular updates addresses web application developers desktops mobiles two ways enables starting developers limited knowledge programming php java basic knowledge databases sql build applications reads updates data web databases also aims experienced developer scriptcase put lot focus business logic rather editing forms build database connections etc pricing model shift buying software till end 2016 lease service 2016 due publication ceo subscribers current users scriptcase nov 14th 2016 prices currently 400- 600 buying software depending many databases supported per developer platform development started 2000 since tool received periodic updates improvements -was sold customers beta mode -big changes interface -native support ajax -internationalization support -graphics flash -new implementations jquery support -focused editing field types creating option edit fields -the biggest change performance 5 times faster -integration paypal -multi-thread processing scriptcase consolidation one strongest tools bi business intelligence migrating features help end user make decisions made major changes grid application option end users create group within application based fields defined developer add totals create graphics addition new graphic application added simplify creation applications implemented new filter functionality dynamic summary grid applications created new graphic application support user-defined combined final graphics new refined filter restricting values according universe exists database group buttons new chart toolbar button editor comes important implementations business intelligence complete redesign charts grids abstracts – pivot tables dashboards significant improvements security pdf report module menu interface redesign development improvement performance php7 among implementations scriptcase still allows advanced settings generated applications meet requirements complex systems also documentation generator integrate whole team
node14:Wikipedia entry. Entry name: HTTP_referer. Entry content: http referer http misspelling referrer optional http header field identifies address webpage i.e uri iri linked resource requested checking referrer new webpage see request originated common situation means user clicks hyperlink web browser browser sends request server holding destination webpage request may include field indicates last page user one clicked link default behaviour referer leaking puts websites risk privacy security breaches misspelling referrer originated original proposal computer scientist phillip hallam-baker incorporate field http specification misspelling set stone time incorporation request comments standards document rfc 1945 document co-author roy fielding remarked neither referrer misspelling recognized standard unix spell checker period since become widely used spelling industry discussing http referrers usage misspelling universal though correct spelling referrer used web specifications document object model visiting web page referrer referring page url previous webpage link followed generally referrer url previous item led request referrer image example generally html page displayed referrer field optional part http request sent web browser web server many websites log referrers part attempt track users web log analysis software process information referrer information violate privacy web browsers allow user disable sending referrer information proxy firewall software also filter referrer information avoid leaking location non-public websites turn cause problems web servers block parts website web browsers send right referrer information attempt prevent deep linking unauthorised use images bandwidth theft proxy software ability give top-level address target website referrer usually prevents problems still divulging user last-visited website many blogs publish referrer information order link back people linking hence broaden conversation led turn rise referrer spam sending fake referrer information order popularize spammer website possible access referrer information client side using document.referrer javascript used example individualize web page based user search engine query however referrer field always include queries using google search https web servers maintain logs traffic record http referrer sent web browser request raises number privacy concerns result number systems prevent web servers sent real referring url developed systems work either blanking referrer field replacing inaccurate data generally internet-security suites blank referrer data web-based servers replace false url usually raises problem referrer spam technical details methods fairly consistent – software applications act proxy server manipulate http request web-based methods load websites within frames causing web browser send referrer url website address web browsers give users option turn referrer fields request header web browsers send referrer field instructed redirect using refresh field include versions opera many mobile web browsers however method redirection discouraged world wide web consortium w3c website accessed http secure https connection link points anywhere except another secure location referrer field sent html5 standard added support attribute/value rel= noreferrer instructs user agent send referrer another referrer hiding method convert original link url data uri scheme-based url containing small html page meta refresh original url user redirected data page original referrer hidden content security policy standard version 1.1 introduced new referrer directive allows control browser behavior regards referrer header specifically allows webmaster instruct browser block referrer reveal moving origin etc
node15:Wikipedia entry. Entry name: Web_analytics. Entry content: web analytics web analytics measurement collection analysis reporting web data purposes understanding optimizing web usage however web analytics process measuring web traffic used tool business market research assess improve effectiveness website web analytics applications also help companies measure results traditional print broadcast advertising campaigns helps one estimate traffic website changes launch new advertising campaign web analytics provides information number visitors website number page views helps gauge traffic popularity trends useful market research web analytics processes come four essential stages steps another essential function developed analysts optimization websites experiments goal a/b testing identify suggest changes web pages increase maximize effect statistically tested result interest stage impacts impact i.e. drives stage preceding following sometimes data available collection impacts online strategy times online strategy affects data collected least two categories web analytics off-site on-site web analytics historically web analytics used refer on-site visitor measurement however meaning become blurred mainly vendors producing tools span categories many different vendors provide on-site web analytics software services two main technical ways collecting data first traditional method server log file analysis reads logfiles web server records file requests browsers second method page tagging uses javascript embedded webpage make image requests third-party analytics-dedicated server whenever webpage rendered web browser desired mouse click occurs collect data processed produce web traffic reports fundamental goal web analytics collect analyze data related web traffic usage patterns data mainly comes four sources web servers record transactions log file soon realized log files could read program provide data popularity website thus arose web log analysis software early 1990s website statistics consisted primarily counting number client requests hits made web server reasonable method initially since website often consisted single html file however introduction images html websites spanned multiple html files count became less useful first true commercial log analyzer released ipro 1994 two units measure introduced mid-1990s gauge accurately amount human activity web servers page views visits sessions page view defined request made web server page opposed graphic visit defined sequence requests uniquely identified client expired certain amount inactivity usually 30 minutes page views visits still commonly displayed metrics considered rather rudimentary emergence search engine spiders robots late 1990s along web proxies dynamically assigned ip addresses large companies isps made difficult identify unique human visitors website log analyzers responded tracking visits cookies ignoring requests known spiders extensive use web caches also presented problem log file analysis person revisits page second request often retrieved browser cache request received web server means person path site lost caching defeated configuring web server result degraded performance visitor bigger load servers concerns accuracy log file analysis presence caching desire able perform web analytics outsourced service led second data collection method page tagging 'web bugs mid-1990s web counters commonly seen — images included web page showed number times image requested estimate number visits page late 1990s concept evolved include small invisible image instead visible one using javascript pass along image request certain information page visitor information processed remotely web analytics company extensive statistics generated web analytics service also manages process assigning cookie user uniquely identify visit subsequent visits cookie acceptance rates vary significantly websites may affect quality data collected reported collecting website data using third-party data collection server even in-house data collection server requires additional dns lookup user computer determine ip address collection server occasion delays completing successful failed dns lookups may result data collected increasing popularity ajax-based solutions alternative use invisible image implement call back server rendered page case page rendered web browser piece ajax code would call back server pass information client aggregated web analytics company ways flawed browser restrictions servers contacted xmlhttprequest objects also method lead slightly lower reported traffic levels since visitor may stop page loading mid-response ajax call made logfile analysis programs page tagging solutions readily available companies wish perform web analytics cases web analytics company offer approaches question arises method company choose advantages disadvantages approach main advantages log file analysis page tagging follows main advantages page tagging log file analysis follows logfile analysis almost always performed in-house page tagging performed in-house often provided third-party service economic difference two models also consideration company deciding purchase solution cheaper implement depends amount technical expertise within company vendor chosen amount activity seen websites depth type information sought number distinct websites needing statistics regardless vendor solution data collection method employed cost web visitor analysis interpretation also included cost turning raw data actionable information use third party consultants hiring experienced web analyst training suitable in-house person cost-benefit analysis performed example revenue increase cost savings gained analyzing web visitor data companies produce solutions collect data log-files page tagging analyze kinds using hybrid method aim produce accurate statistics either method early hybrid solution produced 1998 rufus evison ip geolocation possible track visitors locations using ip geolocation database api visitors geolocated city region country level ip intelligence internet protocol ip intelligence technology maps internet categorizes ip addresses parameters geographic location country region state city postcode connection type internet service provider isp proxy information first generation ip intelligence referred geotargeting geolocation technology information used businesses online audience segmentation applications online advertising behavioral targeting content localization website localization digital rights management personalization online fraud detection localized search enhanced analytics global traffic management content distribution click analytics special type web analytics gives special attention clicks commonly click analytics focuses on-site analytics editor website uses click analytics determine performance particular site regards users site clicking also click analytics may happen real-time unreal -time depending type information sought typically front-page editors high-traffic news media sites want monitor pages real-time optimize content editors designers types stakeholders may analyze clicks wider time frame help assess performance writers design elements advertisements etc data clicks may gathered least two ways ideally click logged occurs method requires functionality picks relevant information event occurs alternatively one may institute assumption page view result click therefore log simulated click led page view customer lifecycle analytics visitor-centric approach measuring falls umbrella lifecycle marketing page views clicks events api calls access third-party services etc tied individual visitor instead stored separate data points customer lifecycle analytics attempts connect data points marketing funnel offer insights visitor behavior website optimization methods data collection sometimes used packet sniffing collects data sniffing network traffic passing web server outside world packet sniffing involves changes web pages web servers integrating web analytics web server software also possible methods claim provide better real-time data methods globally agreed definitions within web analytics industry bodies trying agree definitions useful definitive time main bodies input area iab interactive advertising bureau jicwebs joint industry committee web standards uk ireland daa digital analytics association formally known waa web analytics association us however many terms used consistent ways one major analytics tool another following list based conventions useful starting point off-site web analytics based open data analysis social media exploration share voice web properties usually used understand market site identifying keywords tagged site either social media websites using http referer webpage owners able trace referrer sites helps bring traffic site hotel problem generally first problem encountered user web analytics problem unique visitors day month add total unique visitors month appears inexperienced user problem whatever analytics software using fact simple property metric definitions way picture situation imagining hotel hotel two rooms room room b table shows hotel two unique users day three days sum totals respect days therefore six period room two unique users sum totals respect rooms therefore four actually three visitors hotel period problem person stays room two nights get counted twice count day counted looking total period software web analytics sum correctly chosen time period thus leading problem user tries compare totals historically vendors page-tagging analytics solutions used third-party cookies sent vendor domain instead domain website browsed third-party cookies handle visitors cross multiple unrelated domains within company site since cookie always handled vendor servers however third-party cookies principle allow tracking individual user across sites different companies allowing analytics vendor collate user activity sites provided personal information activity sites thought anonymous although web analytics companies deny companies companies supplying banner ads done privacy concerns cookies therefore led noticeable minority users block delete third-party cookies 2005 reports showed 28 internet users blocked third-party cookies 22 deleted least month vendors page tagging solutions moved provide least option using first-party cookies cookies assigned client subdomain another problem cookie deletion web analytics depend cookies identify unique visitors statistics dependent persistent cookie hold unique visitor id users delete cookies usually delete first- third-party cookies done interactions site user appear first-time visitor next interaction point without persistent unique visitor id conversions click-stream analysis metrics dependent activities unique visitor time accurate cookies used ip addresses always unique users may shared large groups proxies cases ip address combined user agent order accurately identify visitor cookies available however partially solves problem often users behind proxy server user agent methods uniquely identifying user technically challenging would limit trackable audience would considered suspicious cookies selected option reach lowest common denominator without using technologies regarded spyware may good aware third-party information gathering subject network limitations security applied countries service providers private networks prevent site visit data going third parties methods described methods mentioned like sampling central problem vulnerable manipulation inflation deflation means methods imprecise insecure reasonable model security issue addressed number papers to-date solutions suggested papers remain theoretical possibly due lack interest engineering community financial gain current situation provides owners big websites details consult aforementioned papers
node16:Wikipedia entry. Entry name: Data_anonymization. Entry content: data anonymization data anonymization type information sanitization whose intent privacy protection process either encrypting removing personally identifiable information data sets people data describe remain anonymous european union new general data protection regulation demands stored data people eu undergo either anonymization pseudonymization process data anonymization defined process personal data irreversibly altered way data subject longer identified directly indirectly either data controller alone collaboration party data anonymization enables transfer information across boundary two departments within agency two agencies reducing risk unintended disclosure certain environments manner enables evaluation analytics post-anonymization context medical data anonymized data refers data patient identified recipient information name address full post code must removed together information conjunction data held disclosed recipient could identify patient.. de-anonymization reverse process anonymous data cross-referenced data sources re-identify anonymous data source generalization perturbation two popular anonymization approaches relational data.. process obscuring data ability re-identify later also called pseudonymization one way companies store data way hipaa compliant ordered alphabetically
node17:Wikipedia entry. Entry name: JavaScript_library. Entry content: javascript library javascript library library pre-written javascript allows easier development javascript-based applications especially ajax web-centric technologies javascript first developed netscape later mozilla long presence web many websites gained particular pitch rise web 2.0 era computing javascript became increasingly used development user interfaces applications web-based desktop-based javascript also combined css create dynamic web pages also become popular efficient accessible alternative flash-based websites expanded demands javascript easier means programmers develop dynamic interfaces needed thus javascript libraries javascript widget libraries developed allowing developers concentrate upon distinctive applications ajax led companies groups microsoft yahoo developing javascript-based user interface libraries find way web applications developed companies javascript libraries allow easier integration javascript web development technologies css php ruby java many libraries include code detect differences runtime environments remove need applications allow inconsistencies almost javascript libraries released either copycenter copyleft license ensure license-free distribution usage modification javascript libraries angular classified frameworks since exhibit full-stack capabilities properties found general javascript libraries
node18:Wikipedia entry. Entry name: Beonex_Communicator. Entry content: beonex communicator beonex communicator discontinued open-source internet suite based mozilla application suite mas ben bucksch german mozilla developer intended higher security privacy level commercial products internet suite contains web browser email news client html editor based mozilla composer irc client based chatzilla beonex business services offered suite free provided documentation easy install routines third-party plug-ins tried sell support customer-specific changes browser main goal implement kerberos openpgp ldap beonex marked failed mid-2004 discontinued reaching production release stage mozilla organization stated mozilla application suite developers testing purposes meant end users 5 january 2001 beonex included linux distribution kmlinux version s-0.4 removed version s-0.5 released 23 march 2001 beonex 0.8 released june 2002 received positive reviews speed beonex launcher beol spoken b-o-l additional upcoming product never left alpha status stripped-down version beonex communicator web browser combined email client chat client preview releases version 0.9 mid-2002 bucksch showed new features wanted integrate version gained stable status announced 2 march 2004 new releases planned mozilla foundation decided future policy 2005 mozilla foundation officially changed policies created mozilla corporation provide end-user support beonex communicator 0.8.2-stable several known security issues beonex never received much market share browser transmit referrers default possibility create fake referrers browser deletes cookies upon exiting disables several javascript functions could served attack vectors beonex also allows changing user agent following comparison table releases netscape mas included complete table see gecko layout engine contrast netscape beonex included nearly features except proprietary parts like integrated net2phone aol instant messenger online chatting chatzilla integrated sidebar search engines also pre-configured beonex less resource-intensive netscape beonex includes migration tool import old profiles netscape communicator beonex communicator fork mas rather separate branch significant changes made html email javascript turned default thus displays email plain text bold cursive additions added later mas 1.1 search engines compatible mycroft project located sidebar providing features
node19:Wikipedia entry. Entry name: Pageview. Entry content: pageview pageview page view abbreviated business pv occasionally called page impression request load single html file web page internet site world wide web page request would result web surfer clicking link another page pointing page question contrast hit refers request file web server therefore may many hits per page view since html page contain multiple files—images css etc balance page views refer number pages viewed clicked site given time page views may counted part web analytics owner site information useful see change page information way presented results visits advertisements page publishers would also interested number page views determine expected revenue ads reason term used widely internet marketing advertising page impression long measure user activity website however activity necessarily associated loading complete html page modern programming techniques serve pages means n't show http requests since page views help estimate popularity sites helps determine value advertising revenue common metric cpm stands 'cost per thousand roman numeral 1,000 commonly used metrics measure page views divided thousands cost per 1000 views used ad rates thus less cpm better deal offers advertisers however growing concern cpm trustworthy looks advertising market although cpm arrangement everyone visits site makes publishers ’ money advertiser ’ view cpm challenged comparison cpc cpa terms adverts ’ efficiency visiting mean clicking ads preferred way count page views using web analytics software measure number pages site therefore helps people receive rough estimate page views web sites also many page view measurement tools available including open source ones well licensed products despite wide range use page view come criticisms page view manipulated boosted specific purposes example recent incident called 'page view fraud compromised accuracy measurement page view boosting page view perpetrators used tool called bot buy fake page-views attention recognition feedback increasing site value result people already started building alternatives measure audiences ophan saying page view becoming passe fake page views reflect bots instead humans wikipedia provides tools allow one see many people visited wikipedia article given time period used tools instance display popular articles day wikipedia pageviews certain types articles correlate changes stock market prices box office success movies spread disease among applications datamining since search engines directly influence popular wikipedia statistics may provide unfiltered real-time view people searching web societal interests instance used gain insights public anxiety information seeking events identification concepts significant increase interest public 2015 study examines influence reddit posts wikipedia pageviews
node20:Wikipedia entry. Entry name: W3Perl. Entry content: w3perl w3perl free software logfile analyser parse web/ftp/mail/cups/dhcp/ssh squid logfiles major web logfile formats supported web clf/eclf/neclf unix iis/w3c microsoft mail postfix/sendmail/exim well split/compressed files page tagging counter also supported logfiles access output spread html pages graphics sortable table stats run single command line web browser essential features like hosts pages scripts countries filetype traffic hourly daily weekly monthly referrer user agent error available along specific w3perl stats like real-time session stats w3perl administration interface allows building configuration files web interface one also manage configuration files package updates run scripts see stats output written perl w3perl installed operating system supports perl installed unix windows mac os x installer available windows mac os x. w3perl licensed gnu gpl running scripts administration interface restricted login/password blocking referrer spam added based blacklist file must updated regularly real-time stats run prevent overloading server
node21:Wikipedia entry. Entry name: Session_(web_analytics). Entry content: session web analytics web analytics session visit unit measurement user actions taken within period time regard completion task sessions also used operational analytics provision user-specific recommendations two primary methods used define session time-oriented approaches based continuity user activity navigation-based approaches based continuity chain requested pages definition session varies particularly applied search engines generally session understood consist sequence requests made single end-user visit particular site context search engines sessions query sessions least two definitions session query session may queries made user particular time period may also series queries navigations consistent underlying user need sessions per user used measurement website usage metrics used within research applied web analytics include session length user actions per session session length seen accurate alternative measuring page views reconstructed sessions also used measure total user input including measure number labour hours taken construct wikipedia sessions also used operational analytics data anonymization identifying networking anomalies synthetic workload generation testing servers artificial traffic essential use sessions web analytics able identify known session reconstruction approaches session reconstruction divided two main categories time-oriented navigation-oriented time-oriented approaches session reconstruction look set period user inactivity commonly called inactivity threshold period inactivity reached user assumed left site stopped using browser entirely session ended requests user considered second session common value inactivity threshold 30 minutes sometimes described industry standard argued threshold 30 minutes produces artifacts around naturally long sessions experimented thresholds others simply state time threshold effective identifying sessions one alternative proposed using user-specific thresholds rather single global threshold entire dataset problem assuming thresholds follow bimodal distribution suitable datasets cover long period time navigation-oriented approaches exploit structure websites specifically presence hyperlinks tendency users navigate pages website clicking rather typing full url browser one way identifying sessions looking data build map website user first page identified session actions lasts land page accessed previously-accessed pages takes account backtracking user retrace steps opening new page simpler approach take backtracking account simply require http referer request page already session new session created class heuristics exhibits poor performance websites contain framesets
node22:Wikipedia entry. Entry name: PKZIP. Entry content: pkzip pkzip file archiving computer program notable introducing popular zip file format pkzip first introduced ms-dos ibm-pc compatible platform 1989 since versions released number architectures operating systems pkzip originally written phil katz marketed company pkware inc bearing initials 'pk 1970s file archiving programs distributed standard utilities operating systems include unix utilities ar shar tar utilities designed gather number separate files single archive file easier copying distribution archives could optionally passed stream compressor utility compress others archivers also appeared 1980s including arc system enhancement associates inc. sea rahul dhesi zoo dean w. cooper dwc lharc haruhiko okomura haruyasu yoshizaki arj stands archived robert jung development pkzip first announced file softdev.doc within pkpak 3.61 package stating would develop new yet unnamed compression program announcement made following lawsuit sea pkware inc although sea suit lost compression war user base migrated pkzip compressor choice led bbs sysops refused accept offer files compressed .arc files users began recompressing old archives currently stored .arc format .zip files first version released 1989 dos command-line tool distributed shareware model us 25 registration fee us 47 manual help ensure interoperability zip format phil katz published original .zip file format specification appnote.txt documentation file pkware continued maintain document periodically published updates originally bundled registered versions pkzip later available pkware site specification version number necessarily correspond pkzip version numbers especially pkzip 6 later various times pkware adds preliminary features allows pkzip products extract archives using advanced features pkzip products create archives wo n't available next major release although popular time zip archives using pkzip 1.0 compression methods rare many modern unzip tools unable handle shrinking reducing although imploding usually supported shrinking uses dynamic lzw unisys held patents patent reduce algorithm also filed june 19 1984 long pkzip produced pkware also used pkzip standards following products
node23:Wikipedia entry. Entry name: Microsoft_adCenter_Analytics. Entry content: microsoft adcenter analytics microsoft adcenter analytics codenamed gatineau microsoft web analytics solution 2006 microsoft acquired deepmetrix corporation used analytics technology deliver adcenter analytics competed google analytics tied microsoft adcenter way google tied google analytics google adwords led complaints webmasters due five dollar fee sign compared lack cost use google analytics features included march 2009 microsoft announced adcenter analytics would discontinued existing accounts would operational till end 2009
node24:Wikipedia entry. Entry name: Web_beacon. Entry content: web beacon web beacon also called web bug tracking bug tag web tag page tag tracking pixel pixel tag 1×1 gif clear gif one various techniques used web pages email unobtrusively usually invisibly allow checking user accessed content web beacons typically used third parties monitor activity users website purpose web analytics page tagging also used email tracking implemented using javascript may called javascript tags using beacons companies organizations track online behavior web users first companies tracking mainly advertisers web analytics companies later social media sites also started use tracking techniques instance use buttons act tracking beacons work progress standardize interface web developers use create web beacons web beacon number techniques used track visiting web page also used see email read forwarded web page copied another website first web beacons small digital image files embedded web page email image could small single pixel could color background completely transparent thus name “ tracking pixel ” user opens page email image embedded might see image web browser email reader would automatically download image requiring user ’ computer send request host company ’ server source image stored request would provide identifying information computer allowing host keep track user basic technique developed sorts elements used beacons currently include visible elements graphics banners buttons also non-pictorial html elements frame style script input link embed object etc. email web page identifying information provided user computer typically includes ip address time request made type web browser email reader made request existence cookies previously sent host server host server store information associate session identifier tracking token uniquely marks interaction use framing added new level versatility web beacons framing allows web pages refer content images buttons html elements located servers rather hosting content directly server user sees email web page user ’ email reader web browser prepares referred content display send request third-party server ask send referred content part request user computer supply identifying information third-party server protocol allows companies embed beacons content directly operate use beacons tracking purposes beacons embedded email web page images buttons html elements hosted different server website embedded third-party server requests identifying information sent instance case advertisement displayed image web page image file would reside page ’ host server server belonging advertising company user opens page user computer request download advertisement page ’ server referred advertiser server request download image advertiser server request require user computer supply identifying information advertiser means third-party site advertiser gather information visitors main site news site social media site even users clicking advertisement moreover given beacons embedded visible advertisements embedded completely invisible elements third party gather information even user completely unaware third party ’ existence company identify particular user company track user behavior across multiple interactions different websites web servers example consider company owns network websites company could store images one particular server store contents web pages variety servers instance server could specific given website could even located different city company could use web beacons count recognize individual users visit different websites rather gathering statistics managing cookies server independently company analyze data together track behavior individual users across different websites assembling profile user navigates different environments web beacons embedded emails greater privacy implications beacons embedded web pages use embedded beacon sender email even third party record sort information advertiser website namely time email read ip address computer used read email ip address proxy server reader went type software used read email existence cookies previously sent way sender third party gather detailed information particular recipient reads email every subsequent time email message displayed information also sent sender third party return-receipt-to rrt email headers also trigger sending information may seen another form web beacon web beacons used email marketers spammers phishers verify email read using system send similar emails large number addresses check ones valid valid case means address actually use email made past spam filters content email actually viewed extent kind email tracking prevented configuring email reader software avoid accessing remote images examples email software able include gmail yahoo hushmail spamcop/horde webmail clients mozilla thunderbird opera pegasus mail incredimail apple mail later versions microsoft outlook kmail mail readers however since beacons embedded email non-pictorial elements email need contain image advertisement anything else related identity monitoring party makes detection emails difficult one way neutralize email tracking disconnect internet downloading email reading downloaded messages note assumes one using email reader resides one ’ computer downloads emails email server one ’ computer case messages containing beacons able trigger requests beacons host servers tracking prevented one would delete messages suspected containing beacons risk beacons activate computer reconnected internet way completely avoid email tracking beacons use text-based email reader pine mutt graphical email reader purely text-based html capabilities mulberry email readers interpret html display images users subject tracking email web beacons plain-text email messages contain web beacons contents interpreted display characters instead embedded html code opening messages initiate communication email readers offer option disable html every message thus rendering messages plain text prevent tracking beacons working recently many email readers web-based email services moved towards loading images opening hypertext email comes unknown sender suspected spam email user must explicitly choose load images course beacons embedded non-pictorial elements hypertext email web beacons also filtered server level never reach end user mailscanner example gateway software neutralize email tracking beacons users particular server beacon api application programming interface candidate recommendation world wide web consortium standards organization web standardized set protocols designed allow web developers track activity users without slowing website response times sending tracking information back beacon host server user navigated away webpage use beacon api allows tracking without interfering delaying navigation away site invisible end-user support beacon api introduced mozilla firefox browser february 2014 google chrome browser november 2014
node25:Wikipedia entry. Entry name: Trojan_horse_(computing). Entry content: trojan horse computing computing trojan horse trojan malware misleads users true intent term derived ancient greek story deceptive trojan horse led fall city troy trojans generally spread form social engineering example user duped executing e-mail attachment disguised appear suspicious e.g. routine form filled clicking fake advertisement social media anywhere else although payload anything many modern forms act backdoor contacting controller unauthorized access affected computer trojans may allow attacker access users personal information banking information passwords personal identity also delete user files infect devices connected network ransomware attacks often carried using trojan unlike computer viruses worms trojans generally attempt inject files otherwise propagate terminology occurred first time us air force report 1974 analysis vulnerability computer systems made popular ken thompson 1983 turing award acceptance lecture reflections trusting trust subtitled mentioned knew possible existence trojan horses report security multics unfortunately unable find reference however paul karger roger schell affirm cited report trojan way may require interaction malicious controller necessarily distributing trojan fulfil purpose possible involved trojans scan computers network locate trojan installed hacker control trojans take advantage security flaw older versions internet explorer google chrome use host computer anonymizer proxy effectively hide internet usage enabling controller use internet illegal purposes potentially incriminating evidence indicates infected computer ip address host computer may may show internet history sites viewed using computer proxy first generation anonymizer trojan horses tended leave tracks page view histories host computer later generations trojan tend cover tracks efficiently several versions sub7 widely circulated us europe became widely distributed examples type trojan german-speaking countries spyware used made government sometimes called govware govware typically trojan software used intercept communications target computer countries like switzerland germany legal framework governing use software examples govware trojans include swiss minipanzer megapanzer german state trojan nicknamed r2d2 german govware works exploiting security gaps unknown general public accessing smartphone data becomes encrypted via applications due popularity botnets among hackers availability advertising services permit authors violate users privacy trojans becoming common according survey conducted bitdefender january june 2009 trojan-type malware rise accounting 83 global malware detected world trojans relationship worms spread help given worms travel across internet bitdefender stated approximately 15 computers members botnet usually recruited trojan infection",wikics,nc
"Classify the wikipedia page represented by node26 using its subgraph data (text attributes and connections) as follows.

node0: Lisp Machines Inc. founded 1979 by Richard Greenblatt; rivalry with Symbolics led to AI lab splits; Stallman's ethical stance on software freedom.  
node1: Mobile Cloud Computing merges cloud resources with mobile tech for enhanced app performance, addressing challenges like latency and energy constraints.  
node2: KRACK exploit targets WPA2 Wi-Fi, enabling data interception via handshake vulnerabilities; patched in 2017 but risks persist without updates.  
node3: Palm OS has few viruses due to limited attack vectors from its simple design and smaller user base.  
node4: List of OSes categorized by technology, ownership, and licensing, highlighting notable systems and their features.  
node5: Rotational cryptanalysis targets ARX algorithms, exploiting bit rotations and modular additions to break encryption like in Threefish.  
node6: HitmanPro uses cloud-based scanning with Bitdefender/Kaspersky; evolved from aggregating third-party tools to standalone antivirus.  
node7: Zero-day vulnerabilities are unpatched exploits; debates exist on disclosure strategies to balance security fixes and attacker risks.  
node8: Full disclosure advocates public vulnerability details for transparency, contrasting with coordinated disclosure's controlled release for vendor fixes.  
node9: Flame malware, linked to US/Israel, conducted cyber-espionage in Middle East using advanced features like audio capture and Bluetooth tracking.  
node10: Ultrasurf bypasses internet censorship via encrypted proxies; criticized for closed-source code and content filtering despite aiding free speech.
node11: Early time-sharing OS Multics influenced Unix, featuring virtual memory and security, developed 1960s by MIT, GE, and Bell Labs, though commercially limited.  
node12: Interpolation attack breaks block ciphers via polynomial interpolation of S-boxes using known/chosen plaintexts, targeting ciphers like SHARK.  
node13: Code obfuscation hides software logic to deter reverse engineering, using techniques like keyword substitution, with contests and tools; debates exist over open-source compliance.  
node14: Timing attacks exploit execution time differences to infer cryptographic data, affecting RSA/SHA; countermeasures include constant-time algorithms; Meltdown/Spectre exploited this.  
node15: PGP encrypts data via hybrid cryptosystems, created by Phil Zimmermann; uses public-key and symmetric encryption, digital signatures, and web of trust; faced legal battles and EFAIL vulnerability.  
node16: CryptoRights Foundation aids NGOs with encryption tools like Highfire and OpenPGP, promoting secure communications and offering security training.  
node17: Outline VPN deploys Shadowsocks servers via cloud providers, encrypts traffic with ChaCha20/Poly1305, offers cross-platform clients, but lacks Tor-level anonymity.
node18: V-Key is a Singapore-based digital security firm offering cloud payments, authentication, and mobile banking solutions via patented tech like V-OS, founded in 2011.  
node19: Illegal opcodes are undocumented CPU instructions, common in older chips, causing crashes or exploited for gaming; modern CPUs handle them via exceptions.  
node20: MS-DOS was Microsoft's foundational OS for 1980s PCs, later overshadowed by Windows, with versions diverging from IBM's PC DOS amid licensing battles and security lawsuits.  
node21: Mobile security addresses threats like malware, phishing, and network vulnerabilities, emphasizing sandboxing, encryption, and user education to protect data and devices.  
node22: Security-focused OS like Qubes OS and Microsoft's server core/nano options prioritize safety via minimal design, sandboxing, and trusted computing for restricted access control.
node23: Potentially unwanted programs (PUPs) are unwanted software often bundled with downloads, tracking users, injecting ads, or compromising security, sparking legal and privacy concerns.  
node24: 86-DOS, an Intel 8086 OS by Seattle Computer Products, inspired MS-DOS; mimicked CP/M, used FAT, and was licensed by Microsoft for IBM PC systems.  
node25: Spyware secretly tracks users, steals data, or alters systems; includes adware/keyloggers; anti-spyware tools and legal actions combat its spread and privacy violations.  
node26: Security through obscurity relies on secrecy for security, criticized by experts; contrasts with open designs like cryptography, though cyber deception tactics revive its use.  
node27: TENEX, a PDP-10 OS with virtual memory and user-friendly commands, pioneered features emulated in TOPS-20, influencing 1970s-80s computing before declining with Unix.
node28: Midrange computer (1979) with integrated DBMS, CPF OS, and advanced architecture, evolved into AS/400.  
node29: Defragmentation optimizes disk performance by reducing file fragmentation, crucial for HDDs but less so for SSDs due to different access methods.

the connection relationship among the nodes mentioned:
 <node0, node4>,<node1, node21>,<node2, node8>,<node2, node9>,<node3, node9>,<node3, node21>,<node3, node23>,<node3, node25>,<node4, node11>,<node4, node20>,<node4, node24>,<node4, node27>,<node4, node28>,<node4, node29>,<node5, node12>,<node5, node14>,<node6, node25>,<node7, node25>,<node7, node26>,<node8, node9>,<node8, node26>,<node9, node21>,<node9, node25>,<node10, node17>,<node10, node23>,<node10, node26>,<node11, node26>,<node12, node14>,<node13, node26>,<node14, node26>,<node15, node16>,<node15, node26>,<node18, node21>,<node19, node26>,<node20, node24>,<node20, node29>,<node21, node22>,<node21, node23>,<node21, node25>,<node21, node26>,<node22, node25>,<node23, node25>,<node24, node29>,<node27, node29>.

Consider: semantic and structural information. Select strictly from: 'computer architecture', 'operating systems', 'computational linguistics', 'databases', 'internet protocols', 'computer security', 'computer file systems', 'programming language topics', 'distributed computing architecture', 'web technology'. Respond only with the category name and brief summary the reasoning process.

You must conduct reasoning inside <think> and </think>.
Inside <think> and </think>, you should include:
- Structure information within <structure> and </structure>.
- Semantic similarities within <semantic> and </semantic>.
After structure and semantic analysis, you must provide 3 candidate answers with brief reasoning inside <comprehensive> and </comprehensive>.
Then, you must conduct re-reasoning inside <rethink> and </rethink>. In this section, you should detailed consider each of your candidate answers as if they were the correct answer and evaluate their feasibility.
After re-reasoning, you must conduct your final answer based on your above analysis.
Finally, besides your reasoning, give your final response.

Your full response must follow this format:
<think>
<structure>Here show your structure analysis</structure>
<semantic>Here show your semantic analysis</semantic>
<comprehensive>Here show your comprehensive reasoning and list your candidate answers</comprehensive>
<rethink>Here ongoing re-reasoning with each of your candidate answers inversely</rethink>
Here show your final reasoning and answers
</think>
Answer: your_answer(eg:computer security)
Brief_reasoning: Your_brief_reasoning",computer security,"node0: Lisp Machines Inc. founded 1979 by Richard Greenblatt; rivalry with Symbolics led to AI lab splits; Stallman's ethical stance on software freedom.  
node1: Mobile Cloud Computing merges cloud resources with mobile tech for enhanced app performance, addressing challenges like latency and energy constraints.  
node2: KRACK exploit targets WPA2 Wi-Fi, enabling data interception via handshake vulnerabilities; patched in 2017 but risks persist without updates.  
node3: Palm OS has few viruses due to limited attack vectors from its simple design and smaller user base.  
node4: List of OSes categorized by technology, ownership, and licensing, highlighting notable systems and their features.  
node5: Rotational cryptanalysis targets ARX algorithms, exploiting bit rotations and modular additions to break encryption like in Threefish.  
node6: HitmanPro uses cloud-based scanning with Bitdefender/Kaspersky; evolved from aggregating third-party tools to standalone antivirus.  
node7: Zero-day vulnerabilities are unpatched exploits; debates exist on disclosure strategies to balance security fixes and attacker risks.  
node8: Full disclosure advocates public vulnerability details for transparency, contrasting with coordinated disclosure's controlled release for vendor fixes.  
node9: Flame malware, linked to US/Israel, conducted cyber-espionage in Middle East using advanced features like audio capture and Bluetooth tracking.  
node10: Ultrasurf bypasses internet censorship via encrypted proxies; criticized for closed-source code and content filtering despite aiding free speech.
node11: Early time-sharing OS Multics influenced Unix, featuring virtual memory and security, developed 1960s by MIT, GE, and Bell Labs, though commercially limited.  
node12: Interpolation attack breaks block ciphers via polynomial interpolation of S-boxes using known/chosen plaintexts, targeting ciphers like SHARK.  
node13: Code obfuscation hides software logic to deter reverse engineering, using techniques like keyword substitution, with contests and tools; debates exist over open-source compliance.  
node14: Timing attacks exploit execution time differences to infer cryptographic data, affecting RSA/SHA; countermeasures include constant-time algorithms; Meltdown/Spectre exploited this.  
node15: PGP encrypts data via hybrid cryptosystems, created by Phil Zimmermann; uses public-key and symmetric encryption, digital signatures, and web of trust; faced legal battles and EFAIL vulnerability.  
node16: CryptoRights Foundation aids NGOs with encryption tools like Highfire and OpenPGP, promoting secure communications and offering security training.  
node17: Outline VPN deploys Shadowsocks servers via cloud providers, encrypts traffic with ChaCha20/Poly1305, offers cross-platform clients, but lacks Tor-level anonymity.
node18: V-Key is a Singapore-based digital security firm offering cloud payments, authentication, and mobile banking solutions via patented tech like V-OS, founded in 2011.  
node19: Illegal opcodes are undocumented CPU instructions, common in older chips, causing crashes or exploited for gaming; modern CPUs handle them via exceptions.  
node20: MS-DOS was Microsoft's foundational OS for 1980s PCs, later overshadowed by Windows, with versions diverging from IBM's PC DOS amid licensing battles and security lawsuits.  
node21: Mobile security addresses threats like malware, phishing, and network vulnerabilities, emphasizing sandboxing, encryption, and user education to protect data and devices.  
node22: Security-focused OS like Qubes OS and Microsoft's server core/nano options prioritize safety via minimal design, sandboxing, and trusted computing for restricted access control.
node23: Potentially unwanted programs (PUPs) are unwanted software often bundled with downloads, tracking users, injecting ads, or compromising security, sparking legal and privacy concerns.  
node24: 86-DOS, an Intel 8086 OS by Seattle Computer Products, inspired MS-DOS; mimicked CP/M, used FAT, and was licensed by Microsoft for IBM PC systems.  
node25: Spyware secretly tracks users, steals data, or alters systems; includes adware/keyloggers; anti-spyware tools and legal actions combat its spread and privacy violations.  
node26: Security through obscurity relies on secrecy for security, criticized by experts; contrasts with open designs like cryptography, though cyber deception tactics revive its use.  
node27: TENEX, a PDP-10 OS with virtual memory and user-friendly commands, pioneered features emulated in TOPS-20, influencing 1970s-80s computing before declining with Unix.
node28: Midrange computer (1979) with integrated DBMS, CPF OS, and advanced architecture, evolved into AS/400.  
node29: Defragmentation optimizes disk performance by reducing file fragmentation, crucial for HDDs but less so for SSDs due to different access methods.","node0:Wikipedia entry. Entry name: Lisp_Machines. Entry content: lisp machines lisp machines inc. company formed 1979 richard greenblatt mit artificial intelligence laboratory build lisp machines based cambridge massachusetts 1979 lisp machine project mit originated headed greenblatt constructed 30 cadr computers various projects mit russell noftsker formerly administrator mit artificial intelligence lab years previously since started run small company convinced computers based artificial intelligence language lisp bright future commercially number ready customers anxious get machines similar ones seen mit greenblatt noftsker differing ideas structure financing proposed company greenblatt believed company could bootstrapped i.e financed practically scratch order flow customers willing pay advance would mean principals company would retain control noftsker favored conventional venture capital model raising considerable sum money investors control company two negotiated length neither would compromise ensuing discussions choice rent lab two factions february 1979 matters came head greenblatt believed proceeds construction sale machines could profitably reinvested funding company sided noftsker believing commercial venture fund-backed company better chance surviving commercializing lisp machines greenblatt proposed self-sustaining start-up went start symbolics inc. alexander jacobson consultant cdc trying put together ai natural language computer application came greenblatt seeking lisp machine group work eight months greenblatt disastrous conference noftsker yet produce anything alexander jacobson decided way greenblatt going actually start company build lisp machines jacobson needed pushed financially helped greenblatt launch company jacobson pulled together business plans board partner f. stephen wyle greenblatt newfound company named lisp machine inc. lmi funded mostly order flow including cdc orders via jacobson following parable-like story told lmi steven levy used first time 1984 levy account hackers large part based values hackers mit artificial intelligence laboratory among hackers richard stallman levy time called last true hacker noftsker started symbolics able pay salaries n't actually building equipment programmers work bargained patrick winston exchange allowing symbolics staff keep working mit symbolics would let mit use internally freely software symbolics developed unfortunately openness would later lead accusations intellectual property theft late 1970s early 1980s prevent software used competitors computers manufacturers stopped distributing source code began using copyright restrictive software licenses limit prohibit copying redistribution proprietary software existed shift legal characteristics software regarded consequence triggered u.s copyright act 1976 stated mit fellow brewster kahle companies delivered proprietary software richard stallman believed lmi unlike symbolics tried avoid hurting lab stallman proclaimed prospect charging money software crime humanity clarified years later blocking user freedom believes crime act charging copy software symbolics recruited remaining mit hackers including notable hacker bill gosper left ai lab symbolics forced greenblatt also resign ai lab citing mit policies two years mit ai lab 1982 end 1983 stallman singlehandedly duplicated efforts symbolics programmers order prevent gaining monopoly lab computers although lmi able benefit stallman freely available code last hackers lab later programmers would sign non-disclosure agreements share source code technical information software developers lisp machines inc. sold first lisp machines designed mit lmi-cadr series internal battles symbolics began selling cadr mit lab lm-2 symbolics hindered noftsker promise give greenblatt year head start severe delays procuring venture capital symbolics still major advantage none ai lab hackers gone work greenblatt solid 14 signed onto symbolics two ai lab people choose employed either richard stallman marvin minsky symbolics ended producing around 100 lm-2s sold 70,000 companies developed second-generation products based cadr symbolics 3600 lmi-lambda lmi managed sell around 200 3600 shipped year late expanded cadr widening machine word 36-bits expanding address space 28-bits adding hardware accelerate certain common functions implemented microcode cadr lmi-lambda came year 3600 1983 mostly upward compatible cadr source cadr microcode fragments could reassembled improvements instruction fetch hardware differences including use multiplier chip faster logic family cache memory lambda processor cards designed work nubus based engineering workstation originated steve ward group mit separate chain events developed western digital corporation allowed popular lambda 2x2 configuration whereby two machines shared one infrastructure considerable savings texas instruments ti joined fray investing lmi ran money purchasing relocating nubus engineering workstation unit western digital licensing lmi-lambda design later producing variant ti explorer symbolics continued develop 3600 family operating system genera produced ivory vlsi chip implementation symbolics architecture texas instruments shrunk explorer silicon explorer ii later microexplorer lmi abandoned cadr architecture developed k-machine lmi went bankrupt 1987 machine could brought market lmi reincarnated gigamos systems greenblatt one officers gigamos ownership canadian backer named guy montpetit bought assets lmi chapter 11 bankruptcy reorganization prior incorporation gigamos lmi developed new lisp machine called k-machine used risc-like architecture montpetit subsequently became embroiled 1989 canadian political scandal side-effect resulted seizure assets gigamos rendering company unable meet payroll according richard stallman dispute lmi symbolics inspired stallman start software development gnu operating system january 1984 free software foundation fsf october 1985 forerunners open-source-software movement gnu/linux operating system
node1:Wikipedia entry. Entry name: Mobile_cloud_computing. Entry content: mobile cloud computing mobile cloud computing mcc combination cloud computing mobile computing wireless networks bring rich computational resources mobile users network operators well cloud computing providers ultimate goal mcc enable execution rich mobile applications plethora mobile devices rich user experience mcc provides business opportunities mobile network operators well cloud providers comprehensively mcc defined rich mobile computing technology leverages unified elastic resources varied clouds network technologies toward unrestricted functionality storage mobility serve multitude mobile devices anywhere anytime channel ethernet internet regardless heterogeneous environments platforms based pay-as-you-use principle mcc uses computational augmentation approaches computations executed remotely instead device resource-constraint mobile devices utilize computational resources varied cloud-based resources mcc four types cloud-based resources namely distant immobile clouds proximate immobile computing entities proximate mobile computing entities hybrid combination three model giant clouds amazon ec2 distant immobile groups whereas cloudlet surrogates member 9apps proximate immobile computing entities smartphones tablets handheld devices wearable computing devices part third group cloud-based resources proximate mobile computing entities vodafone orange verizon started offer cloud computing services companies mcc landscape amalgam mobile computing cloud computing communication networks augment smartphones creates several complex challenges mobile computation offloading seamless connectivity long wan latency mobility management context-processing energy constraint vendor/data lock-in security privacy elasticity hinder mcc success adoption although significant research development mcc available literature efforts following domains still lacking several academic industrial research groups mcc emerging since last years mcc research groups academia large number researchers publications include cloud computing mobail network
node2:Wikipedia entry. Entry name: KRACK. Entry content: krack krack key reinstallation attack severe replay attack type exploitable flaw wi-fi protected access protocol secures wi-fi connections discovered 2016 belgian researchers mathy vanhoef frank piessens university leuven vanhoef research group published details attack october 2017 repeatedly resetting nonce transmitted third step wpa2 handshake attacker gradually match encrypted packets seen learn full keychain used encrypt traffic weakness exhibited wi-fi standard due errors implementation sound standard individual products implementations therefore correct implementation wpa2 likely vulnerable vulnerability affects major software platforms including microsoft windows macos ios android linux openbsd others widely used open-source implementation wpa_supplicant utilized linux android especially susceptible manipulated install all-zeros encryption key effectively nullifying wpa2 protection man-in-the-middle attack version 2.7 fixed vulnerability security protocol protecting large number wi-fi devices essentially bypassed potentially allowing attacker intercept sent received data attack targets four-way handshake used establish nonce kind shared secret wpa2 protocol standard wpa2 anticipates occasional wifi disconnections allows reconnection using value third handshake quick reconnection continuity standard require different key used type reconnection could needed time replay attack possible attacker repeatedly re-send third handshake another device communication manipulate reset wpa2 encryption key reset causes data encrypted using values blocks content seen matched working backwards identify parts keychain used encrypt block data repeated resets gradually expose keychain eventually whole key known attacker read target entire traffic connection according us-cert us-cert become aware several key management vulnerabilities 4-way handshake wi-fi protected access ii wpa2 security protocol impact exploiting vulnerabilities includes decryption packet replay tcp connection hijacking http content injection others note protocol-level issues correct implementations standard affected cert/cc reporting researcher ku leuven publicly disclosing vulnerabilities 16 october 2017 paper describing vulnerability available online formally presented acm conference computer communications security 1 november 2017 us-cert tracking vulnerability listed vu 228519 across multiple platforms following cve identifiers relate krack vulnerability wpa2 users may counter attack updating wi-fi client access point device software devices vendor patches available however vendors may delay offering patch provide patches case many older devices patches available different devices protect krack starting versions order mitigate risk vulnerable clients wpa2-enabled wi-fi access points configuration options disable eapol-key frame re-transmission key installation attackers cause re-transmissions delayed frame transmission thereby denying access network provided tdls enabled one disadvantage method poor connectivity key reinstallation failure may cause failure wi-fi link alternatively users unpatched devices disable wireless network connection use wired alternative – though may practical many scenarios mobile devices tablets october 2018 reports emerged krack vulnerability still exploitable spite vendor patches variety workarounds techniques used vendors close original attack
node3:Wikipedia entry. Entry name: Palm_OS_viruses. Entry content: palm os viruses viruses exist palm os based devices ever designed typically mobile devices difficult virus writers target since simplicity provides fewer security holes target compared desktop
node4:Wikipedia entry. Entry name: List_of_operating_systems. Entry content: list operating systems list operating systems computer operating systems categorized technology ownership licensing working state usage many characteristics practice many groupings may overlap criteria inclusion notability shown either existing wikipedia article citation reliable source non-unix operating systems still confirmed see also mobile operating systems
node5:Wikipedia entry. Entry name: Rotational_cryptanalysis. Entry content: rotational cryptanalysis cryptography rotational cryptanalysis generic cryptanalytic attack algorithms rely three operations modular addition rotation xor — arx short algorithms relying operations popular relatively cheap hardware software run constant time making safe timing attacks common implementations basic idea rotational cryptanalysis bit rotation xor operations preserve correlations bit-rotated pairs inputs addition bit-rotated inputs also partially preserves bit rotation correlations rotational pairs inputs thus used see cipher cascaded arx operations greater degree might expected ability see correlations rounds processing exploited break cipher way similar differential cryptanalysis term rotational cryptanalysis coined dmitry khovratovich ivica nikolić 2010 paper rotational cryptanalysis arx presented best cryptanalytic attacks time reduced-round threefish cipher — part skein hash function sha-3 competition candidate follow-up attack authors christian rechberger breaks collision resistance 53 72 rounds skein-256 57 72 rounds skein-512 also affects threefish cipher
node6:Wikipedia entry. Entry name: HitmanPro. Entry content: hitmanpro hitmanpro formerly hitman pro portable antimalware program aims detect found remove malicious files registry entries related rootkits trojans viruses worms spyware adware rogue antivirus programs ransomware malware infected computers suspicious objects analyzed across internet connection using range online malware detection services see multiscanning removed hitmanpro confirmed latest version 3.7.9 uses bitdefender kaspersky lab in-cloud technology partners low system load virus definitions installed tested depth computer question rather analyzed remotely company behind hitmanpro surfright acquired sophos december 2015 version 3 hitmanpro three different types antimalware scans default scan quick scan early score warning default scan check entire computer send suspicious files cloud quick scan scan common parts infections send unknown files cloud early score warning scan entire computer examine every file advanced heuristics check common symptoms malware including recently installed computer starts automatically windows boots impersonating common system file even tray icon taskbar hitmanpro 3 completely different design earlier versions hitman pro developed mark loman netherlands previous versions version 1 2 automatically download install run third party anti-spyware anti-adware programs freely available internet
node7:Wikipedia entry. Entry name: Zero-day_(computing). Entry content: zero-day computing zero-day also known 0-day vulnerability computer-software vulnerability unknown unaddressed interested mitigating vulnerability including vendor target software vulnerability mitigated hackers exploit adversely affect computer programs data additional computers network exploit directed zero-day called zero-day exploit zero-day attack jargon computer security day zero day interested party presumably vendor targeted system learns vulnerability leading vulnerability called zero-day vendor learns vulnerability vendor usually create patches advise workarounds mitigate fewer days since day zero higher chance fix mitigation developed even fix developed fewer days since day zero higher probability attack afflicted software successful every user software applied fix zero-day exploits unless vulnerability inadvertently fixed e.g unrelated update happens also obviate need fix specific vulnerability probability user applied vendor-supplied patch fixes problem zero exploit would remain available zero-day attacks severe threat malware writers exploit zero-day vulnerabilities several different attack vectors sometimes users visit rogue websites malicious code site exploit vulnerabilities web browsers web browsers particular target criminals widespread distribution usage cybercriminals well international vendors spyware israel ’ nso group also send malicious e-mail attachments via smtp exploit vulnerabilities application opening attachment exploits take advantage common file types numerous frequent evidenced increasing appearances databases like us-cert criminals engineer malware take advantage file type exploits compromise attacked systems steal confidential data time software exploit first becomes active time number vulnerable systems shrinks insignificance known window vulnerability wov time-line software vulnerability defined following main events thus formula length window vulnerability – formulation always true ≤ ≤ t. note day zero example hacker first discover vulnerability vendor might learn much later day zero normal vulnerabilities – 0 implies software vendor aware vulnerability time publish security patch hacker could craft workable exploit zero-day exploits – ≤ 0 exploit became active patch made available disclosing known vulnerabilities software vendor hopes reach reached thus avoiding exploits however vendor guarantees hackers find vulnerabilities furthermore hackers analyze security patches thereby discover underlying vulnerabilities automatically generate working exploits exploits used effectively time t. practice size wov varies systems vendors individual vulnerabilities often measured days one report 2006 estimating average 28 days zero-day protection ability provide protection zero-day exploits since zero-day attacks generally unknown public often difficult defend zero-day attacks often effective secure networks remain undetected even launched thus users so-called secure systems must also exercise common sense practice safe computing habits many techniques exist limit effectiveness zero-day memory corruption vulnerabilities buffer overflows protection mechanisms exist contemporary operating systems macos windows vista beyond see also security safety features new windows vista solaris linux unix unix-like environments windows xp service pack 2 includes limited protection generic memory corruption vulnerabilities previous versions include even less desktop server protection software also exists mitigate zero-day buffer overflow vulnerabilities typically technologies involve heuristic termination analysis—stopping cause harm suggested solution kind may reach algorithmically impossible general case analyze arbitrary code determine malicious analysis reduces halting problem linear bounded automaton unsolvable however unnecessary address general case sort programs categories malicious non-malicious circumstances order eliminate wide range malicious behaviors suffices recognize safety limited set programs e.g. access modify given subset machine resources rejecting safe unsafe programs require integrity safe programs maintained may prove difficult face kernel level exploit zeroday emergency response team zert group software engineers worked release non-vendor patches zero-day exploits march 9 2017 press release vault 7 documents released wikileaks 2 days previously julian assange states much leak remainder included unpatched vulnerabilities working companies microsoft google get vulnerabilities patched would release information would put public risk fixes released manufacturers would release details vulnerabilities zero-day worms take advantage surprise attack still unknown computer security professionals recent history shows increasing rate worm propagation well designed worms spread fast devastating consequences internet systems differing ideologies exist relative collection use zero-day vulnerability information many computer security vendors perform research zero-day vulnerabilities order better understand nature vulnerabilities exploitation individuals computer worms viruses alternatively vendors purchase vulnerabilities augment research capacity example program tippingpoint zero day initiative selling buying vulnerabilities technically illegal parts world lot controversy method disclosure 2006 german decision include article 6 convention cybercrime eu framework decision attacks information systems may make selling even manufacturing vulnerabilities illegal formal programs follow form rain forest puppy disclosure guidelines recent ois guidelines security vulnerability reporting response general rules forbid public disclosure vulnerabilities without notification vendor adequate time produce patch zero-day virus also known zero-day malware next-generation malware previously unknown computer virus malware specific antivirus software signatures yet available traditionally antivirus software relies upon signatures identify malware effective defend malware unless samples already obtained signatures generated updates distributed users signature-based approaches effective zero-day viruses modern antivirus software still uses signatures also carries types analysis code analysis machine code file analysed see anything looks suspicious typically malware characteristic behaviour code analysis attempts detect present code although useful code analysis significant limitations always easy determine section code intended particularly complex deliberately written intention defeating analysis another limitation code analysis time resources available competitive world antivirus software always balance effectiveness analysis time delay involved one approach overcome limitations code analysis antivirus software run suspect sections code safe sandbox observe behavior orders magnitude faster analyzing code must resist detect attempts code detect sandbox generic signatures signatures specific certain behaviour rather specific item malware new malware totally novel variation earlier malware contains code one earlier examples malware thus results previous analysis used new malware generally accepted antivirus industry vendors signature-based protection identically effective signature available item malware every product unless dysfunctional detect however vendors significantly faster others becoming aware new viruses and/or updating customers signature databases detect wide range effectiveness terms zero-day virus protection german computer magazine c't found detection rates zero-day viruses varied 20 68 primarily area zero-day virus performance manufacturers compete mid-april 2017 hackers known shadow brokers tsb —allegedly linked russian government—released files nsa initially regarded alleged nsa later confirmed internal details snowden include series 'zero-day exploits targeting microsoft windows software tool penetrate society worldwide interbank financial telecommunication swift service provider ars technica reported shadow brokers hacking claims mid-january 2017 april shadow brokers posted exploits proof vulnerabilities equities process first revealed publicly 2016 process used u.s. federal government determine case-by-case basis treat zero-day computer security vulnerabilities whether disclose public help improve general computer security keep secret offensive use government adversaries process criticized number deficiencies including restriction non-disclosure agreements lack risk ratings special treatment nsa less whole-hearted commitment disclosure default option virus signature unique pattern code used detect identify specific viruses antivirus scans file signatures compares database known malicious codes match file flagged treated threat major limitation signature-based detection capable flagging already known malware making completely useless zero-day attacks chronological order
node8:Wikipedia entry. Entry name: Full_disclosure_(computer_security). Entry content: full disclosure computer security field computer security independent researchers often discover flaws software abused cause unintended behaviour flaws called vulnerabilities process analysis vulnerabilities shared third parties subject much debate referred researcher disclosure policy full disclosure practice publishing analysis software vulnerabilities early possible making data accessible everyone without restriction primary purpose widely disseminating information vulnerabilities potential victims knowledgeable attack essay topic bruce schneier stated full disclosure – practice making details security vulnerabilities public – damned good idea public scrutiny reliable way improve security secrecy makes us less secure leonard rose co-creator electronic mailing list superseded bugtraq become de facto forum disseminating advisories explains n't believe security obscurity far know full disclosure way ensure everyone insiders access information need controversy around public disclosure sensitive information new issue full disclosure first raised context locksmithing 19th-century controversy regarding whether weaknesses lock systems kept secret locksmithing community revealed public today three major disclosure policies others categorized non disclosure coordinated disclosure full disclosure major stakeholders vulnerability research disclosure policies shaped various motivations uncommon observe campaigning marketing lobbying preferred policy adopted chastising dissent many prominent security researchers favor full disclosure whereas vendors prefer coordinated disclosure non disclosure generally favoured commercial exploit vendors blackhat hackers proponents coordinated disclosure believe software vendors right control vulnerability information concerning products primary tenet coordinated disclosure nobody informed vulnerability software vendor gives permission often exceptions variations policy distribution must initially limited vendors given privileged access nonpublic research advocates coordinated disclosure often prefer weighted less-descriptive term “ responsible disclosure ” coined microsoft security manager scott culp essay “ time end information anarchy ” referring full disclosure microsoft later asked term phased favour “ coordinated disclosure ” although reasoning varies many practitioners argue end-users benefit access vulnerability information without guidance patches vendor risks sharing research malicious actors great little benefit microsoft explain coordinated disclosure serves everyone best interests ensuring customers receive comprehensive high-quality updates security vulnerabilities exposed malicious attacks update developed full disclosure policy publishing information vulnerabilities without restriction early possible making information accessible general public without restriction general proponents full disclosure believe benefits freely available vulnerability research outweigh risks whereas opponents prefer limit distribution free availability vulnerability information allows users administrators understand react vulnerabilities systems allows customers pressure vendors fix vulnerabilities vendors may otherwise feel incentive solve fundamental problems coordinated disclosure full disclosure resolve discovery specific flaw vulnerability mutually exclusive event multiple researchers differing motivations discover flaws independently standard way make vulnerability information available public researchers often use mailing lists dedicated topic academic papers industry conferences non disclosure principle vulnerability information shared shared non-disclosure agreement either contractually informally common proponents non-disclosure include commercial exploit vendors researchers intend exploit flaws find proponents security obscurity researchers favour coordinated disclosure believe users make use advanced knowledge vulnerabilities without guidance vendor majority best served limiting distribution vulnerability information advocates argue low-skilled attackers use information perform sophisticated attacks would otherwise beyond ability potential benefit outweigh potential harm caused malevolent actors vendor prepared guidance even unsophisticated users digest information made public argument presupposes vulnerability discovery mutually exclusive event one person discover vulnerability many examples vulnerabilities discovered simultaneously often exploited secrecy discovery researchers may exist users benefit vulnerability information full disclosure advocates believe demonstrates contempt intelligence end users true users benefit vulnerability information 're concerned security networks position hire expert assist would hire mechanic help car non disclosure typically used researcher intends use knowledge vulnerability attack computer systems operated enemies trade knowledge vulnerability third party profit typically use attack enemies researchers practicing non disclosure generally concerned improving security protecting networks however proponents argue simply want assist vendors claim intent harm others full coordinated disclosure advocates declare similar goals motivations simply disagreeing best achieve non disclosure entirely incompatible
node9:Wikipedia entry. Entry name: Flame_(malware). Entry content: flame malware flame also known flamer skywiper skywiper modular computer malware discovered 2012 attacks computers running microsoft windows operating system program used targeted cyber espionage middle eastern countries discovery announced 28 may 2012 maher center iranian national computer emergency response team cert kaspersky lab crysys lab budapest university technology economics last stated report flame certainly sophisticated malware encountered practice arguably complex malware ever found flame spread systems local network lan record audio screenshots keyboard activity network traffic program also records skype conversations turn infected computers bluetooth beacons attempt download contact information nearby bluetooth-enabled devices data along locally stored documents sent one several command control servers scattered around world program awaits instructions servers according estimates kaspersky may 2012 flame initially infected approximately 1,000 machines victims including governmental organizations educational institutions private individuals time 65 infections happened iran israel palestine sudan syria lebanon saudi arabia egypt huge majority targets within iran flame also reported europe north america flame supports kill command wipes traces malware computer initial infections flame stopped operating public exposure kill command sent flame linked equation group kaspersky lab however costin raiu director kaspersky lab global research analysis team believes group cooperates creators flame stuxnet position superiority equation group definitely masters giving others maybe bread crumbs time time giving goodies integrate stuxnet flame flame a.k.a da flame identified may 2012 maher center iranian national cert kaspersky lab crysys lab laboratory cryptography system security budapest university technology economics kaspersky lab asked united nations international telecommunication union investigate reports virus affecting iranian oil ministry computers kaspersky lab investigated discovered md5 hash filename appeared customer machines middle eastern nations discovering pieces researchers dubbed program flame one main modules inside toolkit nowiki /nowiki frog.defaultattacks.a-installflame nowiki /nowiki according kaspersky flame operating wild since least february 2010 crysys lab reported file name main component observed early december 2007 however creation date could determined directly creation dates malware modules falsely set dates early 1994 computer experts consider cause attack april 2012 caused iranian officials disconnect oil terminals internet time iranian students news agency referred malware caused attack wiper name given malware creator however kaspersky lab believes flame may separate infection entirely wiper malware due size complexity program—described twenty times complicated stuxnet—the lab stated full analysis could require long ten years 28 may iran cert announced developed detection program removal tool flame distributing select organizations several weeks flame exposure news media symantec reported 8 june flame command control c c computers sent suicide command infected pcs remove traces flame according estimates kaspersky may 2012 initially flame infected approximately 1,000 machines victims including governmental organizations educational institutions private individuals time countries affected iran israel palestinian territories sudan syria lebanon saudi arabia egypt flame uncharacteristically large program malware 20 megabytes written partly lua scripting language compiled c++ code linked allows attack modules loaded initial infection malware uses five different encryption methods sqlite database store structured information method used inject code various processes stealthy malware modules appear listing modules loaded process malware memory pages protected read write execute permissions make inaccessible user-mode applications internal code similarities malware exploits two security vulnerabilities used previously stuxnet infect systems malware determines antivirus software installed customises behaviour example changing filename extensions uses reduce probability detection software additional indicators compromise include mutex registry activity installation fake audio driver malware uses maintain persistence compromised system flame designed deactivate automatically supports kill function makes eliminate traces files operation system receipt module controllers flame signed fraudulent certificate purportedly microsoft enforced licensing intermediate pca certificate authority malware authors identified microsoft terminal server licensing service certificate inadvertently enabled code signing still used weak md5 hashing algorithm produced counterfeit copy certificate used sign components malware make appear originated microsoft successful collision attack certificate previously demonstrated 2008 flame implemented new variation chosen-prefix collision attack like previously known cyber weapons stuxnet duqu employed targeted manner evade current security software rootkit functionality system infected flame spread systems local network via usb stick record audio screenshots keyboard activity network traffic program also records skype conversations turn infected computers bluetooth beacons attempt download contact information nearby bluetooth enabled devices data along locally stored documents sent one several command control servers scattered around world program awaits instructions servers unlike stuxnet designed sabotage industrial process flame appears written purely espionage appear target particular industry rather complete attack toolkit designed general cyber-espionage purposes using technique known sinkholing kaspersky demonstrated huge majority targets within iran attackers particularly seeking autocad drawings pdfs text files computing experts said program appeared gathering technical diagrams intelligence purposes network 80 servers across asia europe north america used access infected machines remotely 19 june 2012 washington post published article claiming flame jointly developed u.s. national security agency cia israel ’ military least five years prior project said part classified effort code-named olympic games intended collect intelligence preparation cyber-sabotage campaign aimed slowing iranian nuclear efforts according kaspersky chief malware expert geography targets also complexity threat leaves doubt nation-state sponsored research went kaspersky initially said malware bears resemblance stuxnet although may parallel project commissioned attackers analysing code kaspersky later said strong relationship flame stuxnet early version stuxnet contained code propagate via usb drives nearly identical flame module exploits zero-day vulnerability iran cert described malware encryption special pattern see coming israel daily telegraph reported due flame apparent targets—which included iran syria west bank—israel became many commentators prime suspect commentators named china u.s. possible perpetrators richard silverstein commentator critical israeli policies claimed confirmed senior israeli source malware created israeli computer experts jerusalem post wrote israel vice prime minister moshe ya'alon appeared hinted government responsible israeli spokesperson later denied implied unnamed israeli security officials suggested infected machines found israel may imply virus could traced u.s. western nations u.s. officially denied responsibility leaked nsa document mentions dealing iran discovery flame nsa gchq jointly-worked event
node10:Wikipedia entry. Entry name: Ultrasurf. Entry content: ultrasurf ultrasurf freeware internet censorship circumvention product created ultrareach internet corporation software bypasses internet censorship firewalls using http proxy server employs encryption protocols privacy software developed chinese dissidents means allowing internet users bypass great firewall china currently boasts many 11 million users worldwide tool described one important free-speech tools internet wired best performing circumvention tool harvard university 2007 study 2011 study freedom house ranked fourth critics open-source community george turner says expressed concern software closed-source nature alleged security obscurity design ultrareach says security considerations mean prefer third party expert review open source review 2001 ultrareach founded chinese dissidents silicon valley shortly ultrasurf created allow internet users china evade government censorship monitoring 2011 ultrasurf reported eleven million users worldwide arab spring ultrareach recorded 700 percent spike traffic tunisia similar traffic spikes occur frequently times unrest regions tibet burma saffron revolution wired magazine 2010 called ultrasurf one important free-speech tools internet enabling citizens access share information oppressed countries times humanitarian human rights crises ultrasurf funded part contracts u.s. government broadcasting board governors administers voice america radio free asia 2012 ultrareach difficulty serving growing user base due insufficient funding ultrasurf free download requires installation ultrasurf install files user computer leaves registry edits exits words leaves trace use fully remove software computer user needs delete exe file named u.exe available windows platform runs internet explorer default optional plug-in firefox chrome ultrareach website notes anti-virus software companies misclassify ultrasurf malware trojan ultrasurf encrypts communications circumvents internet censorship security companies agreed whitelist ultrasurf according applebaum ultrasurf client uses anti-debugging techniques also employs executable compression client acts local proxy communicates ultrareach network appears obfuscated form tls/ssl software works creating encrypted http tunnel user computer central pool proxy servers enabling users bypass firewalls censorship ultrareach hosts servers software makes use sophisticated proprietary anti-blocking technology overcome filtering censorship online according wired magazine ultrasurf changes ip addresses proxy servers 10,000 times hour server-side 2011 analysis found ultrareach network employed squid ziproxy software well isc bind servers bootstrapping wider network open recursive dns servers latter ultrareach control ultrasurf designed primarily anti-censorship tool also offers privacy protections form industry standard encryption added layer obfuscation built ultrareach uses internal content filter blocks sites deemed pornographic otherwise offensive according wired magazine partly network lacks bandwidth accommodate much data-heavy traffic also falun gong frowns erotica additionally falun gong criticism website facts.org.cn alleged operated chinese government also unreachable ultrasurf 2007 study harvard university berkman center internet society found ultrasurf best performing tested circumvention tools in-country tests recommended widespread use particular report found ultrasurf effectively bypassed various forms censorship blocking include ip block dns block keyword filtering also fastest tool in-country tests noted easy use install simple user interface report noted however ultrareach designed primarily circumvention product rather anonymity tool suggested users concerned anonymity disable browser support active content using ultrasurf 2011 report u.s.-based human rights group freedom house ranked ultrasurf fourth overall among censorship circumvention privacy tools measured combination performance usability support security particular tool recommended users interested downloading viewing information required relatively high degree privacy favored fast connection speed technologists expressed reservations ultrareach model however particular developers criticized proponents open-source software allowing peer review tool design except discretion creators moreover ultrareach operates servers developers access user logs architecture means users required trust ultrareach reveal user data ultrareach maintains keeps logs short period time uses purpose analyzing traffic signs interference monitor overall performance efficacy company says disclose user logs third parties according jacob appelbaum tor project essentially amounts example privacy policy april 2012 report appelbaum criticized ultrasurf use internal content filtering including blocking pornographic websites willingness comply subpoenas u.s. law enforcement officials appelbaum report also noted ultrasurf pages employed google analytics potential leak user data systems date latest security patches make use forward security mechanisms furthermore applebaum claims ultrasurf client uses open free software including putty zlib use putty zlib disclosed use lack disclosure violation licenses response posted day ultrareach wrote already resolved issues asserted appelbaum report misrepresented misunderstood aspects software ultrareach also argued differences software approaches internet censorship represented tor ultrasurf base philosophical simply different approaches censorship circumvention top-secret nsa presentation revealed part 2013 global surveillance disclosures dismisses response ultrasurf talk show due restrictions imposed organizations mcafee virusscan flagging ultrasurf versions potentially unwanted program avoiding execution machines ultrasurf virus ultrasurf virus used inappropriately students minors circumvent firewalls measures put place prevent exposure inappropriate and/or indecent content pornography fact runs undetected operating system makes virtually impossible disable block
node11:Wikipedia entry. Entry name: Multics. Entry content: multics multics multiplexed information computing service influential early time-sharing operating system based concept single-level memory virtually modern operating systems heavily influenced multics – often unix created people worked multics – either directly linux macos indirectly windows nt initial planning development multics started 1964 cambridge massachusetts originally cooperative project led mit project mac fernando corbató along general electric bell labs developed ge 645 computer specially designed first one delivered mit january 1967 multics conceived commercial product general electric became one honeywell albeit successfully due many novel valuable ideas multics significant impact computer science despite faults multics numerous features intended ensure high availability would support computing utility similar telephone electricity utilities modular hardware structure software architecture used achieve system could grow size simply adding appropriate resource computing power main memory disk storage separate access control lists every file provided flexible information sharing complete privacy needed multics number standard mechanisms allow engineers analyze performance system well number adaptive performance optimization mechanisms multics implemented single-level store data access discarding clear distinction files called segments multics process memory memory process consisted solely segments mapped address space read write process simply used normal central processing unit cpu instructions operating system took care making sure modifications saved disk posix terminology every file codice_1ed however multics concept process memory separate memory used hold mapped-in files unix memory system part segment appeared file system included temporary scratch memory process kernel stack etc one disadvantage size segments limited 256 kilowords 1 mib due particular hardware architecture machines multics ran 36-bit word size index registers used address within segments half size 18 bits extra code used work files larger called multisegment files days one megabyte memory prohibitively expensive large databases later huge bitmap graphics limit rarely encountered another major new idea multics dynamic linking running process could request segments added address space segments could contain code could execute allowed applications automatically use latest version external routine called since routines kept segments dynamically linked process first tried begin execution since different processes could use different search rules different users could end using different versions external routines automatically equally importantly appropriate settings multics security facilities code segment could gain access data structures maintained different process thus interact application running part daemon another process user process simply performed normal procedure-call instruction code segment dynamically linked code segment implemented operation associated daemon code segment could modify data maintained used daemon action necessary commence request completed simple procedure return instruction returned control user process user code multics also supported extremely aggressive on-line reconfiguration central processing units memory banks disk drives etc could added removed system continued operating mit system early software development done common practice split multiprocessor system two separate systems off-hours incrementally removing enough components form second working system leaving rest still running original logged-in users system software development testing could done second system components second system added back main user system without ever shut multics supported multiple cpus one earliest multiprocessor systems multics first major operating system designed secure system outset despite early versions multics broken repeatedly led work made system much secure prefigured modern security engineering techniques break-ins became rare second-generation hardware base adopted hardware support ring-oriented security multilevel refinement concept master mode multics first operating system provide hierarchical file system file names could almost arbitrary length syntax given file directory could multiple names typically long short form symbolic links directories also supported multics first use now-standard concept per-process stacks kernel separate stack security ring also first command processor implemented ordinary user code – idea later used unix shell also one first written high-level language multics pl/i burroughs mcp system written algol 1964 multics developed initially ge-645 mainframe 36-bit system ge computer business including multics taken honeywell 1970 around 1973 multics supported honeywell 6180 machines included security improvements including hardware support protection rings bell labs pulled project 1969 people worked went create unix system multics development continued mit general electric honeywell continued system development 1985 80 multimillion-dollar sites installed universities industry government sites french university system several installations early 1980s honeywell stopped supporting multics users migrated systems like unix 1985 multics issued certification b2 level secure operating system using trusted computer system evaluation criteria national computer security center ncsc division nsa first operating system evaluated level multics distributed 1975 2000 groupe bull europe bull hn information systems inc. united states 2006 bull sas open sourced multics versions mr10.2 mr11.0 mr12.0 mr12.1 mr12.2 mr12.3 mr12.4 mr12.5 last known multics installation running natively honeywell hardware shut october 30 2000 canadian department national defence halifax nova scotia canada 2006 bull hn released source code mr12.5 final 1992 multics release mit system available open-source software exception optional pieces tcp/ip 2014 multics successfully run current hardware using simulator 1.0 release simulator available release 12.6f multics accompanies 1.0 release emulator adds new features including command line recall editing using video system peter h. salus author book covering unix early years stated one position multics tried much versatile flexible operating system failed miserably position however widely discredited computing community many multics technical innovations used modern commercial computing systems permanently resident kernel multics system derided day large complex 135 kb code comparison linux system 2007 might occupied 18 mb first mit ge-645 512 kilowords memory 2 mib truly enormous amount time kernel used moderate portion multics main memory entire system including operating system complex pl/1 compiler user commands subroutine libraries consisted 1500 source modules averaged roughly 200 lines source code compiled produce total roughly 4.5 mib procedure code fairly large standards day multics compilers generally optimised code density cpu performance example using small sub-routines called operators short standard code sequences makes comparison object code size modern systems less useful high code density good optimisation choice multics multi-user system expensive main memory design features multics greatly influenced unix operating system originally written two multics programmers ken thompson dennis ritchie superficial influence multics unix evident many areas including naming commands internal design philosophy quite different focusing keeping system small simple correcting deficiencies multics high resource demands limited computer hardware time name unix originally unics pun multics u unix rumored stand uniplexed opposed multiplexed multics underscoring designers rejections multics complexity favor straightforward workable approach smaller computers garfinkel abelson cite alternative origin peter neumann bell labs watching demonstration prototype suggested pun name unics – pronounced eunuchs – castrated multics although dennis ritchie said denied ken thompson transcribed 2007 interview peter seibel refers multics overdesigned overbuilt everything close unusable massachusetts institute technology still claim monstrous success clearly n't admitted however things liked enough multics actually take hierarchical file system shell — separate process replace process prime computer operating system primos referred multics shoebox william poduska founder company poduska later moved found apollo computer whose aegis later domain/os operating systems sometimes called multics matchbox extended multics design heavily networked graphics workstation environment stratus vos operating system stratus computer stratus technologies strongly influenced multics external user interface internal structure bear many close resemblances older project high-reliability availability security features multics extended stratus vos support new line fault tolerant computer systems supporting secure reliable transaction processing stratus vos directly-related descendant multics still active development production usage today protection architecture multics restricting ability code one level system access resources another adopted basis security features icl vme operating system literature contains large number papers multics various components fairly complete list available multics bibliography page important and/or informative ones listed
node12:Wikipedia entry. Entry name: Interpolation_attack. Entry content: interpolation attack cryptography interpolation attack type cryptanalytic attack block ciphers two attacks differential cryptanalysis linear cryptanalysis presented block ciphers new block ciphers introduced proven secure differential linear attacks among iterated block ciphers kn-cipher shark cipher however thomas jakobsen lars knudsen showed late 90 ciphers easy break introducing new attack called interpolation attack attack algebraic function used represent s-box may simple quadratic polynomial rational function galois field coefficients determined standard lagrange interpolation techniques using known plaintexts data points alternatively chosen plaintexts used simplify equations optimize attack simplest version interpolation attack expresses ciphertext polynomial plaintext polynomial relative low number unknown coefficients collection plaintext/ciphertext p/c pairs polynomial reconstructed polynomial reconstructed attacker representation encryption without exact knowledge secret key interpolation attack also used recover secret key easiest describe method example let iterated cipher given formula_2 plaintext formula_3 output formula_4 round formula_5 secret formula_4 round key derived secret key formula_7 key schedule formula_8-round iterated cipher formula_9 ciphertext consider 2-round cipher let formula_10 denote message formula_11 denote ciphertext output round 1 becomes output round 2 becomes expressing ciphertext polynomial plaintext yields formula_16 key dependent constants using many plaintext/ciphertext pairs number unknown coefficients polynomial formula_17 construct polynomial example done lagrange interpolation see lagrange polynomial unknown coefficients determined representation formula_17 encryption without knowledge secret key formula_7 considering formula_20-bit block cipher formula_21 possible plaintexts therefore formula_21 distinct formula_23 pairs let formula_24 unknown coefficients formula_17 since require many formula_23 pairs number unknown coefficients polynomial interpolation attack exist formula_27 assume time construct polynomial formula_17 using formula_23 pairs small comparison time encrypt required plaintexts let formula_24 unknown coefficients formula_17 time complexity attack formula_24 requiring formula_24 known distinct formula_23 pairs often method efficient done given formula_8 round iterated cipher block length formula_20 let formula_37 output cipher formula_38 rounds formula_39 express value formula_37 polynomial plaintext formula_10 polynomial ciphertext formula_11 let formula_43 expression formula_37 via formula_10 let formula_46 expression formula_37 via formula_11 polynomial formula_49 obtain computing forward using iterated formula cipher round formula_38 polynomial formula_51 obtain computing backwards iterated formula cipher starting round formula_8 round formula_53 hold formula_55 formula_56 polynomials low number coefficients solve equation unknown coefficients assume formula_49 expressed formula_58 coefficients formula_51 expressed formula_60 coefficients would need formula_61 known distinct formula_23 pairs solve equation setting matrix equation however matrix equation solvable multiplication addition make sure get unique non-zero solution set coefficient corresponding highest degree one constant term zero therefore formula_63 known distinct formula_23 pairs required time complexity attack formula_63 requiring formula_63 known distinct formula_23 pairs meet-in-the-middle approach total number coefficients usually smaller using normal method makes method efficient since less formula_23 pairs required also use interpolation attack recover secret key formula_7 remove last round formula_8-round iterated cipher block length formula_20 output cipher becomes formula_72 call cipher reduced cipher idea make guess last round key formula_73 decrypt one round obtain output formula_74 reduced cipher verify guess use interpolation attack reduced cipher either normal method meet-in-the-middle method done normal method express output formula_74 reduced cipher polynomial plaintext formula_10 call polynomial formula_77 express formula_17 formula_24 coefficients using formula_24 known distinct formula_23 pairs construct polynomial verify guess last round key check one extra formula_23 pair holds yes high probability guess last round key correct make another guess key meet-in-the-middle method express output formula_37 round formula_39 polynomial plaintext formula_10 polynomial output reduced cipher formula_74 call polynomials formula_49 formula_89 let expressed formula_58 formula_60 coefficients respectively formula_92 known distinct formula_23 pairs find coefficients verify guess last round key check one extra formula_23 pair holds yes high probability guess last round key correct make another guess key found correct last round key continue similar fashion remaining round keys secret round key length formula_20 formula_21 different keys probability formula_98 correct chosen random therefore average make formula_99 guesses finding correct key hence normal method average time complexity formula_100 requiring formula_101 known distinct formula_102 pairs meet-in-the-middle method average time complexity formula_103 requiring formula_104 known distinct formula_102 pairs meet-in-the-middle attack used variant attack s-boxes uses inverse function formula_20-bit s-box formula_107 formula_108 block cipher shark uses sp-network s-box formula_109 cipher resistant differential linear cryptanalysis small number rounds however broken 1996 thomas jakobsen lars knudsen using interpolation attack denote sharkformula_110 version shark block size formula_111 bits using formula_24 parallel formula_20-bit s-boxes formula_8 rounds jakobsen knudsen found exist interpolation attack sharkformula_115 64-bit block cipher using formula_116 chosen plaintexts interpolation attack sharkformula_117 128-bit block cipher using formula_118 chosen plaintexts also thomas jakobsen introduced probabilistic version interpolation attack using madhu sudan algorithm improved decoding reed-solomon codes attack work even algebraic relationship plaintexts ciphertexts holds fraction values
node13:Wikipedia entry. Entry name: Obfuscation_(software). Entry content: obfuscation software software development obfuscation deliberate act creating source machine code difficult humans understand like obfuscation natural language may use needlessly roundabout expressions compose statements programmers may deliberately obfuscate code conceal purpose security obscurity logic implicit values embedded primarily order prevent tampering deter reverse engineering even puzzle recreational challenge someone reading source code done manually using automated tool latter preferred technique industry architecture characteristics languages may make easier obfuscate others c c++ perl programming language examples languages easy obfuscate writing reading obfuscated source code brain teaser number programming contests reward creatively obfuscated code international obfuscated c code contest obfuscated perl contest types obfuscations include simple keyword substitution use non-use whitespace create artistic effects self-generating heavily compressed programs according nick montfort techniques may include short obfuscated perl programs may used signatures perl programmers japhs another perl hacker winning entry international obfuscated c code contest written ian phillipps 1988 subsequently reverse engineered thomas ball c program compiled run generate 12 verses 12 days christmas contains strings required poem encoded form within code non-winning entry year next example illustrates creative use whitespace generates mazes arbitrary length ansi-compliant c compilers n't allow constant strings overwritten avoided changing *m 3 omitting m= following example óscar toledo gutiérrez best show entry 19th ioccc implements 8080 emulator complete terminal disk controller capable booting cp/m-80 running cp/m applications example japh slowly displays text another perl unix hacker multiple characters time delays explanation found python examples found official python programming faq elsewhere several advantages automated code obfuscation made popular widely useful across many platforms platforms java android .net decompiler reverse-engineer source code executable library main advantage automated code obfuscation helps protect trade secrets intellectual property contained within software making reverse-engineering program difficult economically unfeasible advantages might include helping protect licensing mechanisms unauthorized access shrinking size source code possibly shrinking size executable decompilation sometimes called man-at-the-end attack based traditional cryptographic attack known man-in-the-middle run-time interpreted languages commonly known script like older versions basic programs execute faster take less ram use single letter variable names avoid comments contain blank characters brief shorter faster obfuscation make reading writing reverse-engineering program difficult time-consuming necessarily make impossible anti-virus software avg antivirus also alert users land site code manually obfuscated one purposes obfuscation hide malicious code however developers may employ code obfuscation purpose reducing file size increasing security average user may expect antivirus software provide alerts otherwise harmless piece code especially trusted corporations feature may actually deter users using legitimate software variety tools exist perform assist code obfuscation include experimental research tools created academics hobbyist tools commercial products written professionals open-source software also exist deobfuscation tools attempt perform reverse transformation although majority commercial obfuscation solutions work transforming either program source code platform-independent bytecode used java .net also work directly compiled binaries debate whether illegal skirt copyleft software licenses releasing source code obfuscated form cases author less willing make source code available issue addressed gnu general public license requiring preferred form making modifications made available gnu website states obfuscated 'source code real source code count source code
node14:Wikipedia entry. Entry name: Timing_attack. Entry content: timing attack cryptography timing attack side-channel attack attacker attempts compromise cryptosystem analyzing time taken execute cryptographic algorithms every logical operation computer takes time execute time differ based input precise measurements time operation attacker work backwards input information leak system measurement time takes respond certain queries much information help attacker depends many variables cryptographic system design cpu running system algorithms used assorted implementation details timing attack countermeasures accuracy timing measurements etc timing attacks often overlooked design phase dependent implementation introduced inadvertently compiler optimizations avoidance timing attacks involves design constant-time functions careful testing final executable code timing attack example attack exploits data-dependent behavioral characteristics implementation algorithm rather mathematical properties algorithm many cryptographic algorithms implemented masked proxy way reduces eliminates data dependent timing information consider implementation every call subroutine always returns exactly x seconds x maximum time ever takes execute routine every possible authorized input implementation timing algorithm leaks information data supplied invocation downside approach time used executions becomes worst-case performance function timing attacks practical many cases execution time square-and-multiply algorithm used modular exponentiation depends linearly number 1 bits key number 1 bits alone nearly enough information make finding key easy repeated executions key different inputs used perform statistical correlation analysis timing information recover key completely even passive attacker observed timing measurements often include noise sources network latency disk drive access differences access access error correction techniques used recover transmission errors nevertheless timing attacks practical number encryption algorithms including rsa elgamal digital signature algorithm 2003 boneh brumley demonstrated practical network-based timing attack ssl-enabled web servers based different vulnerability use rsa chinese remainder theorem optimizations actual network distance small experiments attack successfully recovered server private key matter hours demonstration led widespread deployment use blinding techniques ssl implementations context blinding intended remove correlations key encryption time versions unix use relatively expensive implementation crypt library function hashing 8-character password 11-character string older hardware computation took deliberately measurably long time much two three seconds cases login program early versions unix executed crypt function login name recognized system leaked information timing validity login name even password incorrect attacker could exploit leaks first applying brute-force produce list login names known valid attempt gain access combining names large set passwords known frequently used without information validity login names time needed execute approach would increase orders magnitude effectively rendering useless later versions unix fixed leak always executing crypt function regardless login name validity two otherwise securely isolated processes running single system either cache memory virtual memory communicate deliberately causing page faults and/or cache misses one process monitoring resulting changes access times likewise application trusted paging/caching affected branching logic may possible second application determine values data compared branch condition monitoring access time changes extreme examples allow recovery cryptographic key bits 2017 meltdown spectre attacks forced cpu manufacturers including intel amd arm ibm redesign cpus rely timing attacks early 2018 almost every computer system world affected spectre making powerful example timing attack history following visual basic code demonstrates typical insecure string comparison stops testing soon character n't match example comparing abcde abxde return 3 loop iterations function insecurecompare stra string strb string length integer boolean end function comparison following version runs constant-time testing characters using bitwise operations test without conditional jumps function securecompare stra string strb string length integer boolean end function timing attacks easier mount adversary knows internals hardware implementation even cryptographic system use since cryptographic security never depend obscurity either see security obscurity specifically shannon maxim kerckhoffs principle resistance timing attacks either nothing else exemplar purchased reverse engineered timing attacks side-channel attacks may also useful identifying possibly reverse-engineering cryptographic algorithm used device
node15:Wikipedia entry. Entry name: Pretty_Good_Privacy. Entry content: pretty good privacy pretty good privacy pgp encryption program provides cryptographic privacy authentication data communication pgp used signing encrypting decrypting texts e-mails files directories whole disk partitions increase security e-mail communications phil zimmermann developed pgp 1991 pgp similar software follow openpgp standard nowiki rfc 4880 /nowiki encrypting decrypting data pgp encryption uses serial combination hashing data compression symmetric-key cryptography finally public-key cryptography step uses one several supported algorithms public key bound username e-mail address first version system generally known web trust contrast x.509 system uses hierarchical approach based certificate authority added pgp implementations later current versions pgp encryption include options automated key management server public key fingerprint shorter version public key fingerprint someone get right corresponding public key fingerprint like c3a6 5e46 7b54 77df 3c4c 9790 4d22 b3ca 5b32 ff66 printed business card pgp evolves versions support newer features algorithms able create encrypted messages older pgp systems decrypt even valid private key therefore essential partners pgp communication understand capabilities least agree pgp settings pgp used send messages confidentially pgp uses hybrid cryptosystem combining symmetric-key encryption public-key encryption message encrypted using symmetric encryption algorithm requires symmetric key generated sender symmetric key used also called session key message session key sent receiver session key must sent receiver know decrypt message protect transmission encrypted receiver public key private key belonging receiver decrypt session key use symmetrically decrypt message pgp supports message authentication integrity checking latter used detect whether message altered since completed message integrity property former determine whether actually sent person entity claimed sender digital signature content encrypted changes message result failure decryption appropriate key sender uses pgp create digital signature message either rsa dsa algorithms pgp computes hash also called message digest plaintext creates digital signature hash using sender private key encrypting messages verifying signatures critical public key used send messages someone entity actually 'belong intended recipient simply downloading public key somewhere reliable assurance association deliberate accidental impersonation possible first version pgp always included provisions distributing users public keys 'identity certification also constructed cryptographically tampering accidental garble readily detectable however merely making certificate impossible modify without detected insufficient prevent corruption certificate created users must also ensure means public key certificate actually belong person entity claiming given public key specifically information binding user name key may digitally signed third party user attest association someone actually user name key several levels confidence included signatures although many programs read write information include level certification calculating whether trust key web trust protocol first described phil zimmermann 1992 manual pgp version 2.0 web trust mechanism advantages centrally managed public key infrastructure scheme used s/mime universally used users willing accept certificates check validity manually simply accept satisfactory solution found underlying problem recent openpgp specification trust signatures used support creation certificate authorities trust signature indicates key belongs claimed owner owner key trustworthy sign keys one level level 0 signature comparable web trust signature since validity key certified level 1 signature similar trust one certificate authority key signed level 1 able issue unlimited number level 0 signatures level 2 signature highly analogous trust assumption users must rely whenever use default certificate authority list like included web browsers allows owner key make keys certificate authorities pgp versions always included way cancel 'revoke identity certificates lost compromised private key require communication security retained user less equivalent certificate revocation lists centralised pki schemes recent pgp versions also supported certificate expiration dates problem correctly identifying public key belonging particular user unique pgp public key/private key cryptosystems problem even slightly different guises fully satisfactory solution known pgp original scheme least leaves decision whether use endorsement/vetting system user pki schemes requiring instead every certificate attested central certificate authority accepted correct best publicly available information known method allow person group break pgp encryption cryptographic computational means indeed 1995 cryptographer bruce schneier characterized early version closest 're likely get military-grade encryption early versions pgp found theoretical vulnerabilities current versions recommended addition protecting data transit network pgp encryption also used protect data long-term data storage disk files long-term storage options also known data rest i.e data stored transit cryptographic security pgp encryption depends assumption algorithms used unbreakable direct cryptanalysis current equipment techniques original version rsa algorithm used encrypt session keys rsa security depends upon one-way function nature mathematical integer factoring similarly symmetric key algorithm used pgp version 2 idea might point future found previously undetected cryptanalytic flaws specific instances current pgp idea insecurities exist publicly known current versions pgp added additional encryption algorithms cryptographic vulnerability varies algorithm used however none algorithms current use publicly known cryptanalytic weaknesses new versions pgp released periodically vulnerabilities fixed developers come light agency wanting read pgp messages would probably use easier means standard cryptanalysis e.g rubber-hose cryptanalysis black-bag cryptanalysis e.g installing form trojan horse keystroke logging software/hardware target computer capture encrypted keyrings passwords fbi already used attack pgp investigations however vulnerabilities apply pgp conventional encryption software 2003 incident involving seized psion pdas belonging members red brigade indicated neither italian police fbi able decrypt pgp-encrypted files stored second incident december 2006 see boucher involving us customs agents seized laptop pc allegedly contained child pornography indicates us government agencies find nearly impossible access pgp-encrypted files additionally magistrate judge ruling case november 2007 stated forcing suspect reveal pgp passphrase would violate fifth amendment rights i.e suspect constitutional right incriminate fifth amendment issue opened government appealed case federal district judge ordered defendant provide key evidence suggests 2007 british police investigators unable break pgp instead resorted using ripa legislation demand passwords/keys november 2009 british citizen convicted ripa legislation jailed nine months refusing provide police investigators encryption keys pgp-encrypted files pgp cryptosystem criticized complexity standard implementation low usability user interface including recognized figures cryptography research standard developed 90 uses ineffective serialization format storage keys encrypted data resulted signature-spamming attacks public keys prominent developers gnu privacy guard backwards compatibility openpgp standard results usage relatively weak default choice cryptographic primitives cast5 cipher cfb mode s2k password hashing standard also criticized leaking metadata usage long-term keys lack forward secrecy popular end-user implementations suffered various signature-striping cipher downgrade metadata leakage vulnerabilities attributed complexity standard phil zimmermann created first version pgp encryption 1991 name pretty good privacy inspired name grocery store ralph pretty good grocery featured radio host garrison keillor fictional town lake wobegon first version included symmetric-key algorithm zimmermann designed named bassomatic saturday night live sketch zimmermann long-time anti-nuclear activist created pgp encryption similarly inclined people might securely use bbss securely store messages files license required non-commercial use even nominal charge complete source code included copies posting june 5 2001 entitled pgp marks 10th anniversary zimmermann describes circumstances surrounding release pgp pgp found way onto internet rapidly acquired considerable following around world users supporters included dissidents totalitarian countries affecting letters zimmermann published included testimony us congress civil libertarians parts world see zimmermann published testimony various hearings 'free communications activists called cypherpunks provided publicity distribution decades later cryptoparty activists much via twitter shortly release pgp encryption found way outside united states february 1993 zimmermann became formal target criminal investigation us government munitions export without license cryptosystems using keys larger 40 bits considered munitions within definition us export regulations pgp never used keys smaller 128 bits qualified time penalties violation found guilty substantial several years investigation zimmermann closed without filing criminal charges anyone else zimmermann challenged regulations imaginative way published entire source code pgp hardback book via mit press distributed sold widely anybody wishing build copy pgp could cut covers separate pages scan using ocr program conceivably enter type-in program ocr software available creating set source code text files one could build application using freely available gnu compiler collection pgp would thus available anywhere world claimed principle simple export munitions —guns bombs planes software—was remains restricted export books protected first amendment question never tested court respect pgp cases addressing encryption software however two federal appeals courts established rule cryptographic software source code speech protected first amendment ninth circuit court appeals bernstein case sixth circuit court appeals junger case us export regulations regarding cryptography remain force liberalized substantially throughout late 1990s since 2000 compliance regulations also much easier pgp encryption longer meets definition non-exportable weapon exported internationally except seven specific countries list named groups individuals substantially us trade prohibited various us export controls turmoil zimmermann team worked new version pgp encryption called pgp 3 new version considerable security improvements including new certificate structure fixed small security flaws pgp 2.x certificates well permitting certificate include separate keys signing encryption furthermore experience patent export problems led eschew patents entirely pgp 3 introduced use cast-128 a.k.a cast5 symmetric key algorithm dsa elgamal asymmetric key algorithms unencumbered patents federal criminal investigation ended 1996 zimmermann team started company produce new versions pgp encryption merged viacrypt zimmermann sold commercial rights licensed rsa directly rsadsi changed name pgp incorporated newly combined viacrypt/pgp team started work new versions pgp encryption based pgp 3 system unlike pgp 2 exclusively command line program pgp 3 designed start software library allowing users work command line inside gui environment original agreement viacrypt zimmermann team viacrypt would even-numbered versions zimmermann odd-numbered versions viacrypt thus created new version based pgp 2 called pgp 4 remove confusion could pgp 3 successor pgp 4 pgp 3 renamed released pgp 5 may 1997 december 1997 pgp inc. acquired network associates inc. nai zimmermann pgp team became nai employees nai first company legal export strategy publishing source code nai pgp team added disk encryption desktop firewalls intrusion detection ipsec vpns pgp family export regulation liberalizations 2000 longer required publishing source nai stopped releasing source code early 2001 zimmermann left nai served chief cryptographer hush communications provide openpgp-based e-mail service hushmail also worked veridis companies october 2001 nai announced pgp assets sale suspending development pgp encryption remaining asset kept pgp e-business server original pgp commandline version february 2002 nai canceled support pgp products exception renamed commandline product nai formerly mcafee intel security mcafee continued sell support product name mcafee e-business server 2013 august 2002 several ex-pgp team members formed new company pgp corporation bought pgp assets except command line version nai new company funded rob theis doll capital management dcm terry garnett venrock associates pgp corporation supports existing pgp users honors nai support contracts zimmermann serves special advisor consultant pgp corporation well continuing run consulting company 2003 pgp corporation created new server-based product called pgp universal mid-2004 pgp corporation shipped command line version called pgp command line integrates pgp encryption platform applications 2005 pgp corporation made first acquisition—the german software company glück kanja technology ag pgp deutschland ag 2010 pgp corporation acquired hamburg-based certificate authority tc trustcenter parent company chosensecurity form pgp trustcenter division since 2002 purchase nai pgp assets pgp corporation offered worldwide pgp technical support offices draper utah offenbach germany tokyo japan april 29 2010 symantec corp. announced would acquire pgp 300 million intent integrating enterprise security group acquisition finalized announced public june 7 2010 source code pgp desktop 10 available peer review also 2010 intel corporation acquired mcafee 2013 mcafee e-business server transferred software diversified services sells supports develops name sds e-business server enterprise townsend security currently offers commercial version pgp ibm ibm z mainframe platforms townsend security partnered network associates 2000 create compatible version pgp ibm platform townsend security ported pgp 2008 time ibm z mainframe version pgp relies free z/os encryption facility utilizes hardware acceleration software diversified services also offers commercial version pgp sds e-business server ibm z mainframe may 2018 bug named efail discovered certain implementations pgp could reveal plaintext contents emails encrypted 2003 originally used primarily encrypting contents e-mail messages attachments desktop client pgp products diversified since 2002 set encryption applications managed optional central policy server pgp encryption applications include e-mail attachments digital signatures laptop full disk encryption file folder security protection im sessions batch file transfer encryption protection files folders stored network servers recently encrypted signed http request/responses means client-side enigform server-side mod openpgp module also wordpress plugin available called wp-enigform-authentication takes advantage session management features enigform mod_openpgp pgp desktop 9.x family includes pgp desktop email pgp whole disk encryption pgp netshare additionally number desktop bundles also available depending application products feature desktop e-mail digital signatures im security whole disk encryption file folder security encrypted self-extracting archives secure shredding deleted files capabilities licensed different ways depending features required pgp universal server 2.x management console handles centralized deployment security policy policy enforcement key management reporting used automated e-mail encryption gateway manages pgp desktop 9.x clients addition local keyserver pgp universal server works pgp public keyserver—called pgp global directory—to find recipient keys capability delivering e-mail securely recipient key found via secure https browser session pgp desktop 9.x managed pgp universal server 2.x first released 2005 pgp encryption applications based new proxy-based architecture newer versions pgp software eliminate use e-mail plug-ins insulate user changes desktop applications desktop server operations based security policies operate automated fashion pgp universal server automates creation management expiration keys sharing keys among pgp encryption applications symantec pgp platform undergone rename pgp desktop known symantec encryption desktop pgp universal server known symantec encryption management server current shipping versions symantec encryption desktop 10.3.0 windows mac os platforms symantec encryption server 3.3.2 also available pgp command line enables command line-based encryption signing information storage transfer backup well pgp support package blackberry enables rim blackberry devices enjoy sender-to-recipient messaging encryption new versions pgp applications use openpgp s/mime allowing communications user nist specified standard inside pgp inc. still concern patent issues rsadsi challenging continuation viacrypt rsa license newly merged firm company adopted informal internal standard called unencumbered pgp would use algorithm licensing difficulties pgp encryption importance worldwide many wanted write software would interoperate pgp 5 zimmermann became convinced open standard pgp encryption critical cryptographic community whole july 1997 pgp inc. proposed ietf standard called openpgp gave ietf permission use name openpgp describe new standard well program supported standard ietf accepted proposal started openpgp working group openpgp internet standards track active development many e-mail clients provide openpgp-compliant email security described rfc 3156 current specification rfc 4880 november 2007 successor rfc 2440 rfc 4880 specifies suite required algorithms consisting elgamal encryption dsa triple des sha-1 addition algorithms standard recommends rsa described pkcs 1 v1.5 encryption signing well aes-128 cast-128 idea beyond many algorithms supported standard extended support camellia cipher rfc 5581 2009 signing key exchange based elliptic curve cryptography ecc i.e ecdsa ecdh rfc 6637 2012 support ecc encryption added proposed rfc 4880bis 2014 free software foundation developed openpgp-compliant program called gnu privacy guard abbreviated gnupg gpg gnupg freely available together source code gnu general public license gpl maintained separately several graphical user interfaces guis interact gnupg library encryption decryption signing functions see kgpg seahorse macgpg several vendors also developed openpgp-compliant software development open source openpgp-compliant library openpgp.js written javascript allowed web-based applications use pgp encryption web browser several ios android openpgp-compliant applications ipgmail ios openkeychain android enable key generation encryption/decryption email files apple ios google android operating systems openpgp encryption ensure secure delivery files messages well provide verification created sent message using process called digital signing open source office suite libreoffice implemented document signing openpgp version 5.4.0 linux using openpgp communication requires participation sender recipient openpgp also used secure sensitive files 're stored vulnerable places like mobile devices cloud advancement cryptography parts pgp criticized dated october 2017 roca vulnerability announced affects rsa keys generated buggy infineon firmware used yubikey 4 tokens often used pgp many published pgp keys found susceptible yubico offers free replacement affected tokens
node16:Wikipedia entry. Entry name: CryptoRights_Foundation. Entry content: cryptorights foundation cryptorights foundation inc. crf 501 c 3 non-profit organization based san francisco cryptorights foundation helps human rights groups ngos use encryption protect online communications contributed encryption standards openpgp ipsec gnupg organization founded 26 february 1998 total solar eclipse near maximum totality active volcanic caribbean island montserrat boat chartered attendees international financial cryptography association conference anguilla dave del torto group fellow ″cypherpunk″ cryptology experts significant technology projects include development highfire human rights firewall distributed communications platform private ngo communications miniaturized pc called firebox size cable modem related highwire wireless human rights communications networking project became open source software defined radio source code maintained gnuradio crf provides free security training support human rights journalism organizations use cryptography crf team also developed gpg plug-in squirrelmail
node17:Wikipedia entry. Entry name: Outline_VPN. Entry content: outline vpn outline vpn free open-source tool deploys shadowsocks servers multiple cloud service providers software suite also includes client software multiple platforms outline developed jigsaw technology incubator created google outline server supports self-hosting well cloud service providers including digitalocean rackspace google cloud platform amazon ec2 installation involves running command command line interface case installing digitalocean graphical user interface outline three main components outline uses shadowsocks protocol communication client server traffic encrypted ietf chacha20 stream cipher 256-bit key authenticated ietf poly1305 authenticator outline free open-source licensed apache license 2.0 audited radically open security claims log users ’ web traffic outline server supports unattended upgrades outline anonymity tool n't provide degree anonymity protections tor routes traffic three hops rather one also protects attacks like browser fingerprinting march 2018 max eddy pcmag stated preview version outline vpn startlingly easy use removes privacy concerns associated vpn companies however eddy criticized software encrypting traffic windows warned users individual use may lack anonymity compared large vpn companies since version 1.2 outline windows client came 'beta effectively beginning encrypt traffic device par outline clients macos chrome os android ios
node18:Wikipedia entry. Entry name: V-Key. Entry content: v-key v-key software-based digital security solutions provider headquartered singapore provides back-end front-end solutions financial institutions mobile payment providers governments implement cloud-based payments authentication mobile banking secured mobile applications user access data protection v-key founded 2011 entrepreneur eddie chau benjamin mah joseph gan.eddie chau also formed digital agency brandtology acquired isentia 2014 started v-key primarily secure mobile devices applications patented technology benjamin mah co-founder chief executive officer v-key general manager e-cop acquired wholly owned subsidiary temasek holdings regional director encentuate acquired ibm co-founded v-key concurrently venture partner venture craft chairman jumpstart asia mentor uob finlabs joseph gan third co-founder v-key joining v-key centre strategic infocomm technologies csit head cryptography lab oversaw research development cryptographic solutions ministry defence singapore companies funded v-key ipv capital ant financial services runs alipay mobile wallet app v-key provides security solutions businesses support cloud-based payments digital identity authentication mobile banking well secured mobile applications via core technology—v-os v-os virtual secure element globally patented certified industry bodies including info-communications media development authority singapore imda national institute standards technology fips 140-2 validation united states technology provides secure data transmission solution used encrypted communications mobile soft token replace hardware tokens well mobile authentication solutions v-key partners financial institutions governments mobile payment providers various markets technology used v-key received following awards
node19:Wikipedia entry. Entry name: Illegal_opcode. Entry content: illegal opcode illegal opcode also called undocumented instruction instruction cpu mentioned official documentation released cpu designer manufacturer nevertheless effect illegal opcodes common older cpus designed 1970s mos technology 6502 intel 8086 zilog z80 older processors many exist side effect wiring transistors cpu usually combine functions cpu intended combined old modern processors also instructions intentionally included processor manufacturer documented official specification accidental illegal instructions useless even highly undesirable effects crashing computer might accident something useful certain situations instructions sometimes exploited computer games 1970s 1980s speed certain time-critical sections another common use ongoing battle copy protection implementations cracking form security obscurity secrecy usually last long danger associated use illegal instructions given fact manufacturer guarantee existence function might disappear behave differently change cpu internals new revision cpu rendering programs use incompatible newer revisions example number older apple ii games work correctly newer apple iic latter uses newer cpu revision 65c02 away illegal opcodes recent cpus 80186 80286 68000 descendants powerpc processor illegal opcodes widely known/used manufacturers guarantee cpu behave well-defined way finds unknown opcode instruction stream usually means triggering certain exception fault condition operating system exception fault handler usually terminate application caused fault another less common way handling illegal instructions defining nothing except taking time space equivalent cpu official nop instruction method used tms9900 65c02 processor among others spite manufacturer guarantee instructions research uncovered vast number undocumented instructions modern x86 processors instructions shared across processor manufacturers indicating intel amd aware instruction purpose despite appearing official specification instructions specific manufacturers specific product lines purpose majority x86 undocumented instructions unknown today details instructions mainly interest exact emulation older systems
node20:Wikipedia entry. Entry name: MS-DOS. Entry content: ms-dos ms-dos acronym microsoft disk operating system operating system x86-based personal computers mostly developed microsoft collectively ms-dos rebranding ibm pc dos operating systems attempting compatible ms-dos sometimes referred dos also generic acronym disk operating system ms-dos main operating system ibm pc compatible personal computers 1980s early 1990s gradually superseded operating systems offering graphical user interface gui various generations graphical microsoft windows operating system ibm licensed re-released august 12 1981 pc dos 1.0 use pcs although ms-dos pc dos initially developed parallel microsoft ibm two products diverged twelve years 1993 recognizable differences compatibility syntax capabilities lifetime several competing products released x86 platform ms-dos went eight versions development ceased 2000 initially ms-dos targeted intel 8086 processors running computer hardware using floppy disks store access operating system application software user data well progressive version releases delivered support mass storage media ever greater sizes formats along added feature support newer processors rapidly evolving computer architectures ultimately key product microsoft growth programming language company diverse software development firm providing company essential revenue marketing resources also underlying basic operating system early versions windows ran gui flexible operating system consumes negligible installation space ms-dos renamed form 86-dos owned seattle computer products written tim paterson development 86-dos took six weeks basically clone digital research cp/m 8080/z80 processors ported run 8086 processors two notable differences compared cp/m improved disk sector buffering logic introduction fat12 instead cp/m filesystem first version shipped august 1980 microsoft needed operating system ibm personal computer hired tim paterson may 1981 bought 86-dos 1.10 75,000 july year microsoft kept version number renamed ms-dos also licensed ms-dos 1.10/1.14 ibm august 1981 offered pc dos 1.0 one three operating systems ibm 5150 ibm pc within year microsoft licensed ms-dos 70 companies designed os could run 8086-family computer computer would distinct hardware version ms-dos similar situation existed cp/m ms-dos emulating solution cp/m adapt different hardware platforms end ms-dos designed modular structure internal device drivers minimally primary disk drives console integrated kernel loaded boot loader installable device drivers devices loaded integrated boot time oem would use development kit provided microsoft build version ms-dos basic i/o drivers standard microsoft kernel would typically supply disk end users along hardware thus many different versions ms-dos different hardware major distinction ibm-compatible isa machine ms-dos compatible machine machines like tandy 2000 ms-dos compatible ibm-compatible could run software written exclusively ms-dos without dependence peripheral hardware ibm pc architecture design would worked well compatibility application programs used ms-dos services perform device i/o indeed design philosophy embodied windows nt see hardware abstraction layer however ms-dos early days greater speed attainable programs direct control hardware particular importance especially games often pushed limits contemporary hardware soon ibm-compatible architecture became goal long 8086-family computers closely emulated ibm hardware single version ms-dos fixed hardware platform needed market version version ms-dos discussed dozens oem versions ms-dos relevant systems designed case similar function capability standard version ibm pc—often same-numbered version always since oems used proprietary version numbering schemes e.g labeling later releases ms-dos 1.x 2.0 vice versa —with notable exceptions microsoft omitted multi-user support ms-dos microsoft unix-based operating system xenix fully multi-user company planned time improve ms-dos would almost indistinguishable single-user xenix xedos would also run motorola 68000 zilog z8000 lsi-11 would upwardly compatible xenix byte 1983 described multi-user ms-dos future microsoft advertised ms-dos xenix together listing shared features single-user os multi-user multi-tasking unix-derived operating system promising easy porting breakup bell system however computer systems started selling unix system v. believing could compete unix market microsoft abandoned xenix 1987 transferred ownership xenix santa cruz operation sco march 25 2014 microsoft made code scp ms-dos 1.25 mixture altos ms-dos 2.11 televideo pc dos 2.11 available public microsoft research license agreement makes code source-available open source defined open source initiative free software foundation standards microsoft would later re-license code mit license september 28 2018 making versions free software april fool day joke 2015 microsoft mobile launched windows phone application called ms-dos mobile presented new mobile operating system worked similar ms-dos microsoft licensed released versions ms-dos different names like lifeboat associates software bus 86 a.k.a sb-dos compaq-dos ncr-dos z-dos eventually enforced ms-dos name versions ibm one originally called ibm personal computer dos later shortened ibm pc dos competitors released compatible dos systems dr dos pts-dos could also run dos applications former eastern bloc ms-dos derivatives named dcp 3.20 3.30 existed late 1980s produced east german electronics manufacturer veb robotron following versions ms-dos released public microsoft dos released oem channel digital research released dr dos 5.0 retail upgrade pc dos 5.00.1 ibm-microsoft agreement started end ibm entered retail dos market ibm dos 5.00.1 5.02 6.00 pc dos 6.1 6.3 7 2000 7.1 localized versions ms-dos existed different markets western issues ms-dos evolved around set tools drivers localized message languages differing sets supported codepages keyboard layouts language versions considerably different western issues adapted run localized pc hardware additional bios services available western pcs support multiple hardware codepages displays printers support dbcs alternative input methods graphics output affected issues include japanese dos/v korean arabic ados 3.3/5.0 hebrew hdos 3.3/5.0 russian rdos 4.01/5.0 well eastern european versions dos microcomputers based intel 8086 8088 processors including ibm pc clones initial competition pc dos/ms-dos line came digital research whose cp/m operating system inspired ms-dos fact remains controversy whether qdos less plagiarised early versions cp/m code digital research released cp/m-86 months ms-dos offered alternative ms-dos microsoft licensing requirements higher price executable programs cp/m-86 ms-dos interchangeable many applications sold ms-dos cp/m-86 versions ms-dos became preponderant later digital research operating systems could run ms-dos cp/m-86 software ms-dos originally supported simple .com modelled similar binary incompatible format known cp/m-80 cp/m-86 instead supported relocatable format using file extension .cmd avoid name conflicts cp/m-80 ms-dos .com files ms-dos version 1.0 added advanced relocatable .exe executable file format machines early days ms-dos differing system architectures certain degree incompatibility subsequently vendor lock-in users began using ms-dos machines compelled continue using version customized hardware face trying get proprietary hardware software work new system business world 808x-based machines ms-dos tied faced competition unix operating system ran many different hardware architectures microsoft sold version unix pc called xenix emerging world home users variety computers based various processors serious competition ibm pc apple ii early apple macintosh commodore 64 others use 808x processor many 808x machines different architectures used custom versions ms-dos first machines competition time ibm pc hardware configuration became dominant 808x market software written communicate directly pc hardware without using standard operating system calls ran much faster true pc-compatibles non-pc-compatible 808x machines small market fast software written alone market remained open ibm pcs machines closely imitated architecture running either single version ms-dos compatible pcs equivalent ibm pc dos clones cost much less ibm-branded machines similar performance became widely used home users ibm pcs large share business computer market microsoft ibm together began intended follow-on ms-dos/pc dos called os/2 os/2 released 1987 microsoft began advertising campaign announcing dos dead stating version 4 last full release os/2 designed efficient multi-tasking standard operating systems since 1963 offered number advanced features designed together similar look feel seen legitimate heir kludgy dos platform ms-dos grown spurts many significant features taken duplicated microsoft products operating systems ms-dos also grew incorporating direct licensing feature duplicating functionality tools utilities developed independent companies norton utilities pc tools microsoft anti-virus qemm expanded memory manager stacker disk compression others period digital research competing operating system market computers like amstrad pc1512 sold floppy disks two operating systems one could used time ms-dos cp/m-86 derivative digital research produced dos plus compatible ms-dos 2.11 supported cp/m-86 programs additional features including multi-tasking could read write disks cp/m ms-dos format os/2 protracted development digital research released ms-dos compatible dr dos 5.0 included features available third-party add-ons ms-dos unwilling lose portion market microsoft responded announcing pending release ms-dos 5.0 may 1990 effectively killed dr dos sales actual release ms-dos 5.0 june 1991 digital research brought dr dos 6.0 sold well pre-announcement ms-dos 6.0 stifled sales dr dos microsoft accused carefully orchestrating leaks future versions ms-dos attempt create industry called fud fear uncertainty doubt regarding dr dos example october 1990 shortly release dr dos 5.0 long eventual june 1991 release ms-dos 5.0 stories feature enhancements ms-dos started appear infoworld pc week brad silverberg vice president systems software microsoft general manager windows ms-dos business unit wrote forceful letter pc week november 5 1990 denying microsoft engaged fud tactics serve customers better decided forthcoming version 5.0 denying microsoft copied features dr dos feature enhancements ms-dos version 5.0 decided development begun long heard dr dos 5.0 similar features 50 million ms-dos users n't surprising dri heard requests customers – schulman et al 1994 pact microsoft ibm promote os/2 began fall apart 1990 windows 3.0 became marketplace success much microsoft contributions os/2 also went creating third gui replacement dos windows nt ibm already developing next version os/2 carried development platform without microsoft sold alternative dos windows response digital research dr dos 6.0 bundled superstor disk compression microsoft opened negotiations stac electronics vendor popular dos disk compression tool stacker due diligence process stac engineers shown microsoft part stacker source code stac unwilling meet microsoft terms licensing stacker withdrew negotiations microsoft chose license vertisoft doubledisk using core doublespace disk compression ms-dos 6.0 6.20 released 1993 including microsoft doublespace disk compression utility program stac successfully sued microsoft patent infringement regarding compression algorithm used doublespace resulted 1994 release ms-dos 6.21 disk compression removed shortly afterwards came version 6.22 new version disk compression system drivespace different compression algorithm avoid infringing code prior 1995 microsoft licensed ms-dos windows computer manufacturers three types agreement per-processor fee system company sold per-system fee system particular model per-copy fee copy ms-dos installed largest manufacturers used per-processor arrangement lowest fee arrangement made expensive large manufacturers migrate operating system dr dos 1991 u.s. government federal trade commission began investigating microsoft licensing procedures resulting 1994 settlement agreement limiting microsoft per-copy licensing digital research gain settlement years later successor interest caldera sued microsoft damages caldera v. microsoft lawsuit believed settlement ran order 150 million revealed november 2009 release settlement agreement 280 million microsoft also used variety tactics ms-dos several applications development tools operating perfectly running genuine ms-dos pc dos would break run another vendor implementation dos notable examples practice included introduction windows 3.0 1990 easy usability graphical user interface severely diminished usage ms-dos based command line release windows 95 continuing windows 9x product line windows integrated version ms-dos used bootstrapping troubleshooting backwards-compatibility old dos software particularly games longer released standalone product windows 95 dos called ms-dos 7 booted separately without windows gui capability retained windows 98 second edition windows removed capability boot underlying ms-dos 8.0 alone hard disk retained ability make dos boot floppy disk called emergency boot disk hacked restore full access underlying dos contrast windows 9x series windows nt-derived 32-bit operating systems developed alongside 9x series windows nt 2000 xp newer contain ms-dos part operating system nt built subsystem running dos entirely different independent operating system provide subset dos emulation run dos applications provide dos-like command prompt windows 64-bit versions windows nt line provide dos emulation run dos applications natively windows xp contains copy windows boot disk stripped bootstrap accessible formatting floppy ms-dos startup disk files like driver cd-rom support deleted windows bootdisk startup files autoexec.bat config.sys longer content modified disk base creating ms-dos image windows xp deleted files recovered undelete tool booting ms-dos startup disk made windows xp format tool version reports windows millenium ms-dos 8.0 used base windows 98 never released stand alone product windows vista files startup disk dated april 18 2005 otherwise unchanged including string ms-dos version 8 copyright 1981–1999 microsoft corp inside codice_1 starting windows 10 ability create dos startup disk removed either virtual machine running ms-dos older version virtual machine dual boot must used format floppy disk image must obtained external source solutions include using dos compatible alternatives freedos even copying required files boot sector ms-dos 6.22 last standalone version produced microsoft intel 8088 intel 8086 intel 80286 processors remain available download via msdn volume license oem license partner websites customers valid login credentials ms-dos still used embedded x86 systems due simple architecture minimal memory processor requirements though current products switched still-maintained open-source alternative freedos 2018 microsoft released source code ms-dos 1.25 2.0 github purpose according microsoft mainly education experimentation historic operating systems new programmers gain understanding low-level software works historic current due historical nature software microsoft accept pull requests code pull requests modified translated documentation accepted users however allowed fully encouraged fork repository containing ms-dos source code make modifications whatever like versions ms-dos obtained operation modification abandonware sites winworldpc versions microsoft windows ms-dos-like command-line interface cli called command prompt could run many dos variously win32 os/2 1.x posix command line utilities command-line session allowing piping commands user interface icon windows 2000 followed native ms-dos interface 16-bit versions windows 3.11 ran graphical user interface gui top ms-dos windows 95 98 98 se ms-dos part superficially integrated treating operating systems complete package though dos component could actually stand alone command line accessed dos command line usually codice_1 windows module winoldap.mod new line windows windows nt boot kernel whose sole purpose load windows one run win32 applications loader system manner os/2 unix consumer windows launch character-mode sessions command session permits running various supported command line utilities win32 ms-dos os/2 1.x posix emulators ms-dos os/2 posix use host window way win16 applications use win32 explorer using host window allows one pipe output emulations ms-dos emulation done ntvdm nt virtual dos machine modified softpc former product similar virtualpc running modified ms-dos 5 ntio.sys ntdos.sys output handled console dlls program prompt codice_3 codice_4 codice_5 see output 64-bit windows either dos emulation dos commands come 32-bit windows dos version returns 5.00 5.50 depending api function used determine utilities ms-dos 5.00 run emulation without modification early beta programs nt show ms-dos 30.00 programs running ms-dos 30.00 would assume os/2 control os/2 emulation handled os2ss.exe os2.exe doscalls.dll os2.exe version os/2 shell cmd.exe passes commands os2ss.exe input-output windows nt shell windows 2000 last version nt support os/2 emulation os/2 1.30 posix emulated posix shell emulated shell commands handled directly cmd.exe command prompt often called ms-dos prompt part official name windows 9x early versions windows nt nt 3.5 earlier part softpc emulation dos redirects output actually codice_1 16-bit commands run ntvdm codice_7 codice_8 initialisation determined codice_9 optionally permitting use win32 console applications internal commands codice_10 directive win32 console applications use codice_3 command prompt shell confusion exist os/2 separate dos os/2 prompts running dos program os/2 launch separate dos window run application versions windows itanium longer sold microsoft x86-64 architectures longer include ntvdm therefore longer natively run ms-dos 16-bit windows applications alternatives form virtual machine emulators microsoft virtual pc well vmware dosbox others 1983 onwards various companies worked graphical user interfaces guis capable running pc hardware however required duplicated effort provide much consistency interface design even products company later 1985 microsoft windows 1.0 released microsoft first attempt providing consistent user interface applications early versions windows ran top ms-dos first windows met little success also true companies efforts well example gem version 3.0 windows gained market acceptance windows 9x used dos boot process launch protected mode basic features related file system long file names available dos running subsystem windows windows nt runs independently dos includes ntvdm component simulating dos environment legacy applications ms-dos compatible systems include microsoft manufactured ibm pc dos ibm ms-dos identical products eventually diverged starting ms-dos version 6.0 digital research follow microsoft version numbering scheme example ms-dos 4 released july 1988 followed dr dos 5.0 may 1990 ms-dos 5.0 came april 1991 dr dos 6.0 released following june products collectively referred dos even though disk operating system generic term used systems unrelated x86 ibm pc ms-dos also generic reference dos ibm pc compatible computers microsoft control windows platform programming practices intentionally made windows appear ran poorly competing versions dos crippled ability dos makers continue compete ms-dos digital research release interim releases circumvent windows limitations inserted artificially designed specifically provide microsoft competitive advantage
node21:Wikipedia entry. Entry name: Mobile_security. Entry content: mobile security mobile security specifically mobile device security become increasingly important mobile computing particular concern security personal business information stored smartphones users businesses use smartphones communicate also plan organize users work also private life within companies technologies causing profound changes organization information systems therefore become source new risks indeed smartphones collect compile increasing amount sensitive information access must controlled protect privacy user intellectual property company smartphones computers preferred targets attacks attacks exploit weaknesses inherent smartphones come communication mode—like short message service sms aka text messaging multimedia messaging service mms wifi bluetooth gsm de facto global standard mobile communications also exploits target software vulnerabilities browser operating system malicious software relies weak knowledge average user security countermeasures developed applied smartphones security different layers software dissemination information end users good practices observed levels design use development operating systems software layers downloadable apps smartphone user exposed various threats use phone last two-quarters 2012 number unique mobile threats grew 261 according abi research threats disrupt operation smartphone transmit modify user data applications must guarantee privacy integrity information handle addition since apps could malware functionality activities limited example restricting apps accessing location information via gps blocking access user address book preventing transmission data network sending sms messages billed user etc. three prime targets attackers number threats mobile devices including annoyance stealing money invading privacy propagation malicious tools source attacks actors found non-mobile computing space smartphone infected attacker attacker attempt several things attacks derive flaws management sms mms mobile phone models problems managing binary sms messages possible sending ill-formed block cause phone restart leading denial service attacks user siemens s55 received text message containing chinese character would lead denial service another case standard requires maximum size nokia mail address 32 characters nokia phones verify standard user enters email address 32 characters leads complete dysfunction e-mail handler puts commission attack called curse silence study safety sms infrastructure revealed sms messages sent internet used perform distributed denial service ddos attack mobile telecommunications infrastructure big city attack exploits delays delivery messages overload network another potential attack could begin phone sends mms phones attachment attachment infected virus upon receipt mms user choose open attachment opened phone infected virus sends mms infected attachment contacts address book real-world example attack virus commwarrior uses address book sends mms messages including infected file recipients user installs software received via mms message virus began send messages recipients taken address book attacker may try break encryption mobile network gsm network encryption algorithms belong family algorithms called a5 due policy security obscurity possible openly test robustness algorithms originally two variants algorithm a5/1 a5/2 stream ciphers former designed relatively strong latter designed weak purpose allow easy cryptanalysis eavesdropping etsi forced countries typically outside europe use a5/2 since encryption algorithm made public proved possible break encryption a5/2 could broken fly a5/1 6 hours july 2007 3gpp approved change request prohibit implementation a5/2 new mobile phones means decommissioned longer implemented mobile phones stronger public algorithms added gsm standard a5/3 a5/4 block ciphers otherwise known kasumi uea1 published etsi network support a5/1 a5 algorithm implemented phone base station specify a5/0 null-algorithm whereby radio traffic sent unencrypted even case mobile phones able use 3g 4g much stronger encryption 2g gsm base station downgrade radio communication 2g gsm specify a5/0 encryption basis eavesdropping attacks mobile radio networks using fake base station commonly called imsi catcher addition tracing mobile terminals difficult since time mobile terminal accessing accessed network new temporary identity tmsi allocated mobile terminal tsmi used identity mobile terminal next time accesses network tmsi sent mobile terminal encrypted messages encryption algorithm gsm broken attacker intercept unencrypted communications made victim smartphone attacker try eavesdrop wi-fi communications derive information e.g username password type attack unique smartphones vulnerable attacks often wi-fi means communication access internet security wireless networks wlan thus important subject initially wireless networks secured wep keys weakness wep short encryption key connected clients addition several reductions search space keys found researchers wireless networks protected wpa security protocol wpa based temporal key integrity protocol tkip designed allow migration wep wpa equipment already deployed major improvements security dynamic encryption keys small networks wpa pre-shared key based shared key encryption vulnerable length shared key short limited opportunities input i.e numeric keypad mobile phone users might define short encryption keys contain numbers increases likelihood attacker succeeds brute-force attack successor wpa called wpa2 supposed safe enough withstand brute force attack gsm attacker succeeds breaking identification key possible attack phone also entire network connected many smartphones wireless lans remember already connected mechanism prevents user re-identify connection however attacker could create wifi access point twin parameters characteristics real network using fact smartphones remember networks could confuse two networks connect network attacker intercept data transmit data encrypted form lasco worm initially infects remote device using sis file format sis file format software installation script script file executed system without user interaction smartphone thus believes file come trusted source downloads infecting machine security issues related bluetooth mobile devices studied shown numerous problems different phones one easy exploit vulnerability unregistered services require authentication vulnerable applications virtual serial port used control phone attacker needed connect port take full control device another example phone must within reach bluetooth discovery mode attacker sends file via bluetooth recipient accepts virus transmitted example cabir worm spreads via bluetooth connection worm searches nearby phones bluetooth discoverable mode sends target device user must accept incoming file install program installing worm infects machine attacks based flaws os applications phone mobile web browser emerging attack vector mobile devices common web browsers mobile web browsers extended pure web navigation widgets plug-ins completely native mobile browsers jailbreaking iphone firmware 1.1.1 based entirely vulnerabilities web browser result exploitation vulnerability described underlines importance web browser attack vector mobile devices case vulnerability based stack-based buffer overflow library used web browser libtiff vulnerability web browser android discovered october 2008 iphone vulnerability due obsolete vulnerable library significant difference iphone vulnerability android sandboxing architecture limited effects vulnerability web browser process smartphones also victims classic piracy related web phishing malicious websites software run background etc big difference smartphones yet strong antivirus software available sometimes possible overcome security safeguards modifying operating system real-world examples section covers manipulation firmware malicious signature certificates attacks difficult 2004 vulnerabilities virtual machines running certain devices revealed possible bypass bytecode verifier access native underlying operating system results research published detail firmware security nokia symbian platform security architecture psa based central configuration file called swipolicy 2008 possible manipulate nokia firmware installed fact downloadable versions file human readable possible modify change image firmware vulnerability solved update nokia theory smartphones advantage hard drives since os files rom changed malware however systems possible circumvent symbian os possible overwrite file file name windows os possible change pointer general configuration file editable file application installed signing application verified series certificates one create valid signature without using valid certificate add list symbian os certificates directory firmware changes explained easy insert seemingly valid malicious certificate 2015 researchers french government agency agence nationale de la sécurité des systèmes d'information anssi demonstrated capability trigger voice interface certain smartphones remotely using specific electromagnetic waveforms exploit took advantage antenna-properties headphone wires plugged audio-output jacks vulnerable smartphones effectively spoofed audio input inject commands via audio interface juice jacking physical hardware vulnerability specific mobile platforms utilizing dual purpose usb charge port many devices susceptible data exfiltrated malware installed onto mobile device utilizing malicious charging kiosks set public places hidden normal charge adapters jail-breaking also physical access vulnerability mobile device users initiate hack devices unlock exploit weaknesses operating system mobile device users take control device jail-breaking customize interface installing applications change system settings allowed devices thus allowing tweak mobile devices operating systems processes run programs background thus devices expose variety malicious attack lead compromise important private data 2010 researcher university pennsylvania investigated possibility cracking device password smudge attack literally imaging finger smudges screen discern user password researchers able discern device password 68 time certain conditions outsiders may perform over-the-shoulder victims watching specific keystrokes pattern gestures unlock device password passcode smartphones permanent point access internet mostly compromised easily computers malware malware computer program aims harm system resides mobile malware variants increased 54 year 2017 trojans worms viruses considered malware trojan program smartphone allows external users connect discreetly worm program reproduces multiple computers across network virus malicious software designed spread computers inserting legitimate programs running programs parallel however must said malware far less numerous important smartphones computers nonetheless recent studies show evolution malware smartphones rocketed last years posing threat analysis detection typically attack smartphone made malware takes place 3 phases infection host accomplishment goal spread malware systems malware often uses resources offered infected smartphones use output devices bluetooth infrared may also use address book email address person infect user acquaintances malware exploits trust given data sent acquaintance infection means used malware get smartphone either use one faults previously presented may use gullibility user infections classified four classes according degree user interaction malware infected phone also seek accomplish goal usually one following monetary damage damage data and/or device concealed damage malware infected smartphone always aims spread one way another various malware exist world smartphones short description mobile ransomware type malware locks users mobile devices pay-to-unlock-your-device ploy grown leaps bounds threat category since 2014 specific mobile computing platforms users often less security-conscious particularly pertains scrutinizing applications web links trusting native protection capability mobile device operating system mobile ransomware poses significant threat businesses reliant instant access availability proprietary information contacts likelihood traveling businessman paying ransom unlock device significantly higher since disadvantage given inconveniences timeliness less likely direct access staff recent ransomware attack caused stir world attack caused many internet connected devices work companies spent large amount recover attacks diagram loads different behaviors smartphone malware terms effects smartphones see graph least 50 malware varieties exhibit negative behavior except ability spread multitude malware partly due variety operating systems smartphones however attackers also choose make malware target multiple platforms malware found attacks os able spread different systems begin malware use runtime environments like java virtual machine .net framework also use libraries present many operating systems malware carry several executable files order run multiple environments utilize propagation process practice type malware requires connection two operating systems use attack vector memory cards used purpose synchronization software used propagate virus security mechanisms place counter threats described presented section divided different categories act level range management security operating system behavioral education user threats prevented various measures depending case considering two cases mentioned first case one would protect system corruption application second case installation suspicious software would prevented first layer security smartphone operating system os beyond needing handle usual roles operating system e.g resource management scheduling processes device must also establish protocols introducing external applications data without introducing risk central paradigm mobile operating systems idea sandbox since smartphones currently designed accommodate many applications must mechanisms ensure applications safe phone applications data system user malicious program reaches mobile device vulnerable area presented system must small possible sandboxing extends idea compartmentalize different processes preventing interacting damaging based history operating systems sandboxing different implementations example ios focus limiting access public api applications app store default managed open allows restrict apps access types data android bases sandboxing legacy linux trustedbsd following points highlight mechanisms implemented operating systems especially android operating system security layer security software layer composed individual components strengthen various vulnerabilities prevent malware intrusions identification user human user authentication contains software components learned experience computer security however smartphones software must deal greater constraints see limitations mobile antivirus product would scan files compare database known mobile malware code signatures application passes various security barriers take actions designed actions triggered activity malicious application sometimes detected one monitors various resources used phone depending goals malware consequences infection always malicious applications intended harm devices deployed following sections describe different ways detect suspicious activity various points mentioned indications provide certainty legitimacy activity application however criteria help target suspicious applications especially several criteria combined network traffic exchanged phones monitored one place safeguards network routing points order detect abnormal behavior mobile use network protocols much constrained computer expected network data streams predicted e.g protocol sending sms permits detection anomalies mobile networks production distribution chain mobile devices responsibility manufacturers ensure devices delivered basic configuration without vulnerabilities users experts many aware existence security vulnerabilities device configuration provided manufacturers retained many users listed several points manufacturers consider much malicious behavior allowed carelessness user smartphone users found ignore security messages application installation especially application selection checking application reputation reviews security agreement messages simply leaving device without password precise control permissions granted applications added smartphone user large responsibility cycle security vector intrusion precaution especially important user employee company stores business data device detailed precautions user take manage security smartphone recent survey internet security experts bullguard showed lack insight rising number malicious threats affecting mobile phones 53 users claiming unaware security software smartphones 21 argued protection unnecessary 42 admitted n't crossed mind using apa 2011 statistics show consumers concerned security risks believe serious problem key always remember smartphones effectively handheld computers vulnerable latest android smartphones come inbuilt encryption setting securing information saved device makes difficult hacker extract decipher information case device compromised settings – security – encrypt phone encrypt sd card precautions measures leave easy solution intrusion people malicious applications smartphone users careful many attacks defeated especially phishing applications seeking obtain rights device one form mobile protection allows companies control delivery storage text messages hosting messages company server rather sender receiver phone certain conditions met expiration date messages deleted security mechanisms mentioned article large extent inherited knowledge experience computer security elements composing two device types similar common measures used antivirus software firewalls however implementation solutions necessarily possible least highly constrained within mobile device reason difference technical resources offered computers mobile devices even though computing power smartphones becoming faster limitations computing power furthermore common find updates exist developed deployed always done one example find user know newer version operating system compatible smartphone user may discover known vulnerabilities corrected end long development cycle allows time exploit loopholes expected four mobile environments make security framework
node22:Wikipedia entry. Entry name: Security-focused_operating_system. Entry content: security-focused operating system list operating systems specifically focused security general-purpose operating systems may secure practice without specifically security-focused similar concepts include security-evaluated operating systems achieved certification auditing organization trusted operating systems provide sufficient support multilevel security evidence correctness meet particular set requirements operating systems engineered around object-capabilities security paradigm instead system deciding access request granted bundling authority designation makes impossible request anything legitimate starting windows server 2008 windows server added installation option called server core traditional graphical user interface installed administration windows server 2008 rely windows command prompt roles components installed individually option reduces windows server footprint result reduced demand system resources reduced number components could potentially exploited via potential security vulnerabilities later windows server 2016 microsoft introduced nano server installation option even reduced footprint headless support locally connected keyboard monitor nano server windows server 1709 constantly updated sibling windows server 2016 installed container
node23:Wikipedia entry. Entry name: Potentially_unwanted_program. Entry content: potentially unwanted program potentially unwanted program pup potentially unwanted application pua software user may perceive unwanted used subjective tagging criterion security parental control products software may use implementation compromise privacy weaken computer security companies often bundle wanted program download wrapper application may offer install unwanted application cases without providing clear opt-out method antivirus companies define software bundled potentially unwanted programs include software displays intrusive advertising adware tracks user internet usage sell information advertisers spyware injects advertising web pages user looks uses premium sms services rack charges user practice widely considered unethical violates security interests users without informed consent unwanted software bundles install root certificate user device allows hackers intercept private data banking details without browser giving security warnings united states department homeland security advised removing insecure root certificate make computers vulnerable serious cyberattacks growing number open-source software projects expressed dismay third-party websites wrapping downloads unwanted bundles without project knowledge consent nearly every third-party free download site bundles downloads potentially unwanted software software developers security experts recommend people always download latest version official project website trusted package manager app store historically first big companies working potentially unwanted programs creating revenue came usa mid-2000s zango activities declined companies investigated cases indicted authorities invasive harmful installs major industry dedicated creating revenue foisting potentially unwanted programs grown among israeli software industry frequently referred download valley companies responsible large part download install tools place unwanted additional software users systems unwanted programs increased recent years one study 2014 classified unwanted programs comprising 24.77 total malware infections malware includes adware according google many programs include unwanted browser add-ons track websites user goes order sell information advertisers add advertising web pages five percent computer browser visits google-owned websites altered computer programs inject ads pages researchers identified 50,870 google chrome extensions 34,407 programs inject ads thirty-eight percent extensions 17 percent programs catalogued malicious software rest potentially unwanted adware-type applications google chrome extension developers sold extensions made third-party companies silently push unwanted updates incorporate previously non-existent adware extensions spyware programs install proxy server person computer monitors web traffic passing tracking user interests build profile sell profile advertisers superfish advertising injector creates root certificate computer operating system allowing tool inject advertising encrypted google search pages track history user search queries february 2015 united states department homeland security advised uninstalling superfish associated root certificate lenovo computers make computers vulnerable serious cyberattacks including interception passwords sensitive data transmitted browsers heise security revealed superfish certificate included bundled downloads number applications companies including say media lavasoft ad-aware web companion many companies use browser hijacking modify user home page search page force internet hits particular website make money advertisers companies steal cookies user browser hijacking connections websites logged performing actions using account without user knowledge consent like installing android apps users dial-up internet access use modems computer connect internet targeted fraudulent applications used security holes operating system dial premium numbers many android devices targeted malware use premium sms services rack charges users 2015 research emsisoft suggested free download providers bundled downloads potentially unwanted software download.com worst offender lowell heddings expressed dismay sadly even google top results open source freeware ads really terrible sites bundling crapware adware malware top installer december 2011 gordon lyon published strong dislike way download.com started bundling grayware installation managers concerns bundled software causing many people spread post social networks dozen media reports main problem confusion download.com-offered content software offered original authors accusations included deception well copyright trademark violation 2014 register us-cert warned via download.com foistware attacker may able download execute arbitrary code many open-source software developers expressed frustration dismay work packaged companies profit work using search advertising occupy first result search page increasingly pages offering bundled installers include unwanted software confuse users presenting bundled software official download page endorsed open source project early 2016 longer case ownership sourceforge transferred sourceforge media llc subsidiary bizx llc bizx sale removed devshare program means bundled installers longer available november 2013 gimp free image manipulation program removed download sourceforge citing misleading download buttons potentially confuse customers well sourceforge windows installer bundles third-party offers statement gimp called sourceforge useful trustworthy place develop host floss applications faces problem ads allow sites ... may 2015 gimp windows sourceforge project transferred ownership sourceforge editorial staff account adware downloads re-enabled happened developers nmap may 2015 sourceforge took control projects migrated hosting sites replaced project downloads adware-laden downloads gordon lyon lost control nmap sourceforge page sourceforge taking project page lyon stated far seem providing official nmap files long n't click fake download buttons n't caught trojaning nmap way gimp certainly n't trust one bit sourceforge pulling scheme cnet download.com tried back started circling drain videolan expressed dismay users searching product see search advertising websites offer bundled downloads include unwanted programs videolan lacks resources sue many companies abusing trademarks
node24:Wikipedia entry. Entry name: 86-DOS. Entry content: 86-dos 86-dos discontinued operating system developed marketed seattle computer products scp intel 8086-based computer kit initially known qdos quick dirty operating system name changed 86-dos scp started licensing operating system 1980 86-dos command structure application programming interface imitated digital research cp/m operating system made easy port programs latter system licensed purchased microsoft developed ms-dos pc dos 86-dos created sales seattle computer products 8086 computer kit demonstrated june 1979 shipped november languishing due absence operating system software scp could sell board microsoft standalone disk basic-86 microsoft developed prototype scp hardware scp wanted offer 8086-version cp/m digital research announced release date uncertain first time digital research lagged behind hardware developments two years earlier slow adapt cp/m new floppy disk formats hard disk drives april 1980 scp assigned 24-year-old tim paterson develop substitute cp/m-86 using cp/m-80 manual reference paterson modeled 86-dos architecture interfaces adapted meet requirements intel 8086 16-bit processor easy partially automated source-level translatability many existing 8-bit cp/m programs porting either dos cp/m-86 equally difficult eased fact intel already published method could used automatically translate software intel 8080 processor cp/m designed new 8086 instruction set time made number changes enhancements address saw cp/m shortcomings cp/m cached file system information memory speed required user force update disk removing user forgot disk would become corrupt paterson took safer slower approach updating disk operation cp/m pip command copied files supported several special file names referred hardware devices printers communication ports paterson built names operating system device files program could use gave copying program intuitive name copy rather implementing cp/m file system drew microsoft standalone disk basic-86 file allocation table fat file system mid-1980 scp advertised 86-dos priced 95 owners 1290 8086 board 195 others touted software ability read zilog z80 source code cp/m disk translate 8086 source code promised minor hand correction optimization needed produce 8086 binaries october 1980 ibm developing would become original ibm personal computer cp/m far popular operating system use time ibm felt needed cp/m order compete ibm representatives visited digital research discussed licensing digital research licensing representative dorothy kildall née mcewen hesitated sign ibm non-disclosure agreement although nda later accepted digital research would accept ibm proposal 250,000 exchange many copies ibm could sell insisting usual royalty-based plan later discussions ibm bill gates gates mentioned existence 86-dos ibm representative jack sams told get license microsoft purchased non-exclusive license 86-dos seattle computer products december 1980 25,000 may 1981 hired tim paterson port system ibm pc used slower less expensive intel 8088 processor specific family peripherals ibm watched developments daily submitting 300 change requests accepted product wrote user manual july 1981 month pc release microsoft purchased rights 86-dos scp 50,000 met ibm main criteria looked like cp/m easy adapt existing 8-bit cp/m programs run notably thanks trans command would translate source files 8080 8086 machine instructions microsoft licensed 86-dos ibm became pc dos 1.0 license also permitted microsoft sell dos companies deal spectacularly successful scp later claimed court microsoft concealed relationship ibm order purchase operating system cheaply scp ultimately received 1 million settlement payment digital research founder gary kildall examined pc dos found duplicated cp/m programming interface wanted sue ibm time claimed pc dos product however digital research attorney believe relevant law clear enough sue nonetheless kildall confronted ibm persuaded offer cp/m-86 pc exchange release liability controversy continued surround similarity two systems perhaps sensational claim came jerry pournelle said kildall personally demonstrated dos contained cp/m code entering command dos displayed kildall name pournelle never revealed command nobody come forward corroborate story 2004 book kildall says used encrypted message demonstrate manufacturers copied cp/m say found message dos instead kildall memoir source book pointed well-known interface similarity paterson insists 86-dos software original work denied referring otherwise using cp/m code writing 2004 book appeared sued authors publishers defamation court ruled summary judgment defamation occurred book claims opinions based research provably false following list commands supported 86-dos 1982 ibm asked microsoft release version dos compatible hard disk drive pc dos 2.0 almost complete rewrite dos march 1983 little 86-dos remained enduring element 86-dos primitive line editor edlin remained editor supplied microsoft versions dos june 1991 release ms-dos 5.0 included text-based user interface editor called ms-dos editor based qbasic edlin still used contemporary machines since emulated dos environment windows 10 32 bit seattle computer products 86-dos supported fat12 filesystem range 8-inch 5.25-inch floppy disk drives s-100 floppy disk controller hardware manufactured cromemco tarbell electronics north star computers western digital fd1771-based cromemco tarbell boards supported one-sided single-density soft-sectored drives tarbell double-density board utilizing fd1791 supported well later scp offered advanced floppy disk controllers like disk master series 86-dos take advantage fat id byte bios parameter block bpb later dos versions distinguish different media formats instead different drive letters hard-coded time compilation associated different physical floppy drives sides densities meant depending type disk addressed certain drive letter recognized correctly concept later emulated flexibility driver.sys dos 3.x later versions two logical format variants 86-dos 12-bit fat format existed — original format 16-byte directory entries later format since 86-dos 0.42 32-byte directory entries second one logically compatible fat12 format known since release ms-dos pc dos ms-dos still mount volumes absence bpb falls back retrieve fat id fat entry design fat file system clust 0cluster 0 choose among hard-coded disk geometry profiles formats volume formatted ms-dos would otherwise supported systems typically also formats id located first byte logical sector 1 — volume second sector physical cylinder-head-sector chs address 0/0/2 logical block addressing lba address 1 — since ms-dos assumes single reserved sector boot sector 86-dos reserved sectors area significantly larger whole tracks therefore prototypical fat id located elsewhere disk making impossible ms-dos retrieve even would hard-coded disk profile associated would take larger reserved sectors region 86-dos account cp/m 2 floppy media readable rdcpm 86-dos offer specific support fixed disks third-party solutions form hard disk controllers corresponding i/o system extensions 86-dos available companies like tallgrass technologies making hard disks accessible similar superfloppies within size limits fat12 file system various oem versions ms-dos 1.2x 2.x supported number similar 8.0 fat12 floppy disk formats well although identical supported 86-dos disk formats supported one last versions developed tim paterson microsoft ms-dos 1.25 march 1982 scp gazelle computer scp controller cromemco 16fdc controller default version supported ms-dos-compatible variants 8.0 formats single reserved sector could built provide two extra drive letters read write floppies previous scp 86-dos 8.0 disk formats since 0.42 well 1984 seattle computer products released oem version ms-dos 2.0 scp s-100 computer scp-500 disk master floppy controller added support 5.25 dd/1s 180 kb dd/2s 360 kb fat12 formats supported older formats well although possibly parameters modified compared ms-dos 1.25
node25:Wikipedia entry. Entry name: Spyware. Entry content: spyware spyware software aims gather information person organization sometimes without knowledge may send information another entity without consumer consent asserts control device without consumer knowledge may send information another entity consumer consent cookies spyware mostly classified four types adware system monitors tracking cookies trojans examples notorious types include digital rights management capabilities phone home keyloggers rootkits web beacons spyware mostly used stealing information storing internet users movements web serving pop-up ads internet users whenever spyware used malicious purposes presence typically hidden user difficult detect spyware keyloggers may installed owner shared corporate public computer intentionally order monitor users term spyware suggests software monitors user computing functions spyware extend beyond simple monitoring spyware collect almost type data including personal information like internet surfing habits user logins bank credit account information spyware also interfere user control computer installing additional software redirecting web browsers spyware change computer settings result slow internet connection speeds un-authorized changes browser settings changes software settings sometimes spyware included along genuine software may come malicious website may added intentional functionality genuine software see paragraph facebook response emergence spyware small industry sprung dealing anti-spyware software running anti-spyware software become widely recognized element computer security practices especially computers running microsoft windows number jurisdictions passed anti-spyware laws usually target software surreptitiously installed control user computer german-speaking countries spyware used made government called govware computer experts common parlance regierungstrojaner literally government trojan govware typically trojan horse software used intercept communications target computer countries like switzerland germany legal framework governing use software us term policeware used similar purposes use term spyware eventually declined practice tracking users pushed ever mainstream major websites data mining companies generally break known laws compel users tracked fraudulent practices per se default settings created users language terms-of-service agreements one documented example cbs/cnet news reported march 7 2011 wall street journal analysis revealing practice facebook websites tracking users browsing activity linked identity far beyond users visits activity within facebook site report stated works go facebook log spend time ... move without logging let say next site go new york times buttons without clicking reported back facebook twitter went also identity within accounts let say moved something like site depression one also tweet button google widget report back went wsj analysis researched brian kennish founder disconnect inc. spyware necessarily spread way virus worm infected systems generally attempt transmit copy software computers instead spyware installs system deceiving user exploiting software vulnerabilities spyware installed without knowledge using deceptive tactics spyware may try deceive users bundling desirable software common tactics using trojan horse spy gadgets look like normal devices turn something else usb keylogger devices actually connected device memory units capable recording stroke made keyboard spyware authors infect system security holes web browser software user navigates web page controlled spyware author page contains code attacks browser forces download installation spyware installation spyware frequently involves internet explorer popularity history security issues made frequent target deep integration windows environment make susceptible attack windows operating system internet explorer also serves point attachment spyware form browser helper objects modify browser behavior spyware rarely operates alone computer affected machine usually multiple infections users frequently notice unwanted behavior degradation system performance spyware infestation create significant unwanted cpu activity disk usage network traffic stability issues applications freezing failure boot system-wide crashes also common spyware interferes networking software commonly causes difficulty connecting internet infections spyware even evident users assume situations performance issues relate faulty hardware windows installation problems another malware infection owners badly infected systems resort contacting technical support experts even buying new computer existing system become slow badly infected systems may require clean reinstallation software order return full functionality moreover types spyware disable software firewalls antivirus software and/or reduce browser security settings opens system opportunistic infections spyware disables even removes competing spyware programs grounds spyware-related annoyances increase likelihood users take action remove programs keyloggers sometimes part malware packages downloaded onto computers without owners knowledge keylogger software freely available internet others commercial private applications keyloggers allow keyboard keystrokes captured also often capable collecting screen captures computer typical windows user administrative privileges mostly convenience program user runs unrestricted access system operating systems windows users able follow principle least privilege use non-administrator accounts alternatively reduce privileges specific vulnerable internet-facing processes internet explorer since windows vista default computer administrator runs everything limited user privileges program requires administrative privileges user account control pop-up prompt user allow deny action improves design used previous versions windows spyware threat evolved number techniques emerged counteract include programs designed remove block spyware well various user practices reduce chance getting spyware system nonetheless spyware remains costly problem large number pieces spyware infected windows computer remedy may involve backing user data fully reinstalling operating system instance spyware completely removed symantec microsoft pc tools many programmers commercial firms released products dedicated remove block spyware programs pc tools spyware doctor lavasoft ad-aware se patrick kolla spybot search destroy rapidly gained popularity tools remove cases intercept spyware programs december 16 2004 microsoft acquired giant antispyware software rebranding windows antispyware beta releasing free download genuine windows xp windows 2003 users 2006 renamed windows defender major anti-virus firms symantec pc tools mcafee sophos also added anti-spyware features existing anti-virus products early anti-virus firms expressed reluctance add anti-spyware functions citing lawsuits brought spyware authors authors web sites programs described products spyware however recent versions major firms home business anti-virus products include anti-spyware functions albeit treated differently viruses symantec anti-virus instance categorizes spyware programs extended threats offers real-time protection threats anti-spyware programs combat spyware two ways programs inspect contents windows registry operating system files installed programs remove files entries match list known spyware real-time protection spyware works identically real-time anti-virus protection software scans disk files download time blocks activity components known represent spyware cases may also intercept attempts install start-up items modify browser settings earlier versions anti-spyware programs focused chiefly detection removal javacool software spywareblaster one first offer real-time protection blocked installation activex-based spyware like anti-virus software many anti-spyware/adware tools require frequently updated database threats new spyware programs released anti-spyware developers discover evaluate adding list known spyware allows software detect remove new spyware result anti-spyware software limited usefulness without regular updates updates may installed automatically manually popular generic spyware removal tool used requires certain degree expertise hijackthis scans certain areas windows os spyware often resides presents list items delete manually items legitimate windows files/registry entries advised less knowledgeable subject post hijackthis log numerous antispyware sites let experts decide delete spyware program blocked manages get installed may resist attempts terminate uninstall programs work pairs anti-spyware scanner user terminates one running process one respawns killed program likewise spyware detect attempts remove registry keys immediately add usually booting infected computer safe mode allows anti-spyware program better chance removing persistent spyware killing process tree may also work detect spyware computer users found several practices useful addition installing anti-spyware programs many users installed web browser internet explorer mozilla firefox google chrome though browser completely safe internet explorer greater risk spyware infection due large user base well vulnerabilities activex three major browsers close equivalent comes security isps—particularly colleges universities—have taken different approach blocking spyware use network firewalls web proxies block access web sites known install spyware march 31 2005 cornell university information technology department released report detailing behavior one particular piece proxy-based spyware marketscore steps university took intercept many educational institutions taken similar steps individual users also install firewalls variety companies monitor flow information going networked computer provide protection spyware malware users install large hosts file prevents user computer connecting known spyware-related web addresses spyware may get installed via certain shareware programs offered download downloading programs reputable sources provide protection source attack individual users use cellphone computer physical electric switch isolated electronic switch disconnects microphone camera without bypass keep disconnected position use limits information spyware collect policy recommended nist guidelines managing security mobile devices 2013 spyware vendors notably 180 solutions written new york times dubbed stealware spyware researcher ben edelman terms affiliate fraud form click fraud stealware diverts payment affiliate marketing revenues legitimate affiliate spyware vendor spyware attacks affiliate networks places spyware operator affiliate tag user activity – replacing tag one spyware operator party gains user choices thwarted legitimate affiliate loses revenue networks reputations injured vendors harmed pay affiliate revenues affiliate party contract affiliate fraud violation terms service affiliate marketing networks result spyware operators 180 solutions terminated affiliate networks including linkshare sharesale mobile devices also vulnerable chargeware manipulates users illegitimate mobile charges one case spyware closely associated identity theft august 2005 researchers security software firm sunbelt software suspected creators common coolwebsearch spyware used transmit chat sessions user names passwords bank information etc however turned actually sophisticated criminal little trojan independent cws case currently investigation fbi federal trade commission estimates 27.3 million americans victims identity theft financial losses identity theft totaled nearly 48 billion businesses financial institutions least 5 billion out-of-pocket expenses individuals copy-protection technologies borrowed spyware 2005 sony bmg music entertainment found using rootkits xcp digital rights management technology like spyware difficult detect uninstall poorly written efforts remove could rendered computers unable function texas attorney general greg abbott filed suit three separate class-action suits filed sony bmg later provided workaround website help users remove beginning april 25 2006 microsoft windows genuine advantage notifications application installed windows pcs critical security update main purpose deliberately uninstallable application ensure copy windows machine lawfully purchased installed also installs software accused phoning home daily basis like spyware removed removewga tool spyware used monitor electronic activities partners intimate relationships least one software package loverspy specifically marketed purpose depending local laws regarding communal/marital property observing partner online activity without consent may illegal author loverspy several users product indicted california 2005 charges wiretapping various computer crimes anti-spyware programs often report web advertisers http cookies small text files track browsing activity spyware always inherently malicious many users object third parties using space personal computers business purposes many anti-spyware programs offer remove common spyware programs illustrate diversity behaviors found attacks note computer viruses researchers give names spyware programs may used creators programs may grouped families based shared program code common behaviors following money apparent financial business connections instance number spyware programs distributed claria collectively known gator likewise programs frequently installed together may described parts spyware package even function separately first recorded use term spyware occurred october 16 1995 usenet post poked fun microsoft business model spyware first denoted software meant espionage purposes however early 2000 founder zone labs gregor freund used term press release zonealarm personal firewall later 2000 parent using zonealarm alerted fact reader rabbit educational software marketed children mattel toy company surreptitiously sending data back mattel since spyware taken present sense according 2005 study aol national cyber-security alliance 61 percent surveyed users computers infected form spyware 92 percent surveyed users spyware reported know presence 91 percent reported given permission installation spyware spyware become one preeminent security threats computer systems running microsoft windows operating systems computers internet explorer ie primary browser particularly vulnerable attacks ie widely used tight integration windows allows spyware access crucial parts operating system internet explorer 6 sp2 released part windows xp service pack 2 browser would automatically display installation window activex component website wanted install combination user ignorance changes assumption internet explorer activex components benign helped spread spyware significantly many spyware components would also make use exploits javascript internet explorer windows install without user knowledge permission windows registry contains multiple sections modification key values allows software executed automatically operating system boots spyware exploit design circumvent attempts removal spyware typically link location registry allows execution running spyware periodically check links removed automatically restored ensures spyware execute operating system booted even registry links removed malicious programmers released large number rogue fake anti-spyware programs widely distributed web banner ads warn users computers infected spyware directing purchase programs actually remove spyware—or else may add spyware proliferation fake spoofed antivirus products bill antispyware troublesome users may receive popups prompting install protect computer fact add spyware software called rogue software recommended users install freeware claiming anti-spyware unless verified legitimate known offenders include fake antivirus products constitute 15 percent malware january 26 2006 microsoft washington state attorney general filed suit secure computer spyware cleaner product unauthorized access computer illegal computer crime laws u.s. computer fraud abuse act u.k. computer misuse act similar laws countries since owners computers infected spyware generally claim never authorized installation prima facie reading would suggest promulgation spyware would count criminal act law enforcement often pursued authors malware particularly viruses however spyware developers prosecuted many operate openly strictly legitimate businesses though faced lawsuits spyware producers argue contrary users claims users fact give consent installations spyware comes bundled shareware applications may described legalese text end-user license agreement eula many users habitually ignore purported contracts spyware companies claria say demonstrate users consented despite ubiquity eulas agreements single click taken consent entire text relatively little caselaw resulted use established common law jurisdictions type agreement binding contract certain circumstances however mean every agreement contract every term one enforceable jurisdictions including u.s. states iowa washington passed laws criminalizing forms spyware laws make illegal anyone owner operator computer install software alters web-browser settings monitors keystrokes disables computer-security software united states lawmakers introduced bill 2005 entitled internet spyware prevention act would imprison creators spyware us federal trade commission sued internet marketing organizations unfairness doctrine make stop infecting consumers pcs spyware one case seismic entertainment productions ftc accused defendants developing program seized control pcs nationwide infected spyware malicious software bombarded barrage pop-up advertising seismic clients exposed pcs security risks caused malfunction seismic offered sell victims antispyware program fix computers stop popups problems seismic caused november 21 2006 settlement entered federal court 1.75 million judgment imposed one case 1.86 million another defendants insolvent second case brought cyberspy software llc ftc charged cyberspy marketed sold remotespy keylogger spyware clients would secretly monitor unsuspecting consumers computers according ftc cyberspy touted remotespy 100 undetectable way spy anyone anywhere ftc obtained temporary order prohibiting defendants selling software disconnecting internet servers collect store provide access information software gathered case still preliminary stages complaint filed electronic privacy information center epic brought remotespy software ftc attention administrative fine first kind europe issued independent authority posts telecommunications opta netherlands applied fines total value euro 1,000,000 infecting 22 million computers spyware concerned called dollarrevenue law articles violated art 4.1 decision universal service providers interests end users fines issued based art 15.4 taken together art 15.10 dutch telecommunications law former new york state attorney general former governor new york eliot spitzer pursued spyware companies fraudulent installation software suit brought 2005 spitzer california firm intermix media inc. ended settling agreeing pay us 7.5 million stop distributing spyware hijacking web advertisements also led litigation june 2002 number large web publishers sued claria replacing advertisements settled court courts yet decide whether advertisers held liable spyware displays ads many cases companies whose advertisements appear spyware pop-ups directly business spyware firm rather contracted advertising agency turn contracts online subcontractor gets paid number impressions appearances advertisement major firms dell computer mercedes-benz sacked advertising agencies run ads spyware litigation gone ways since spyware become common pejorative makers filed libel defamation actions products described 2003 gator known claria filed suit website pc pitstop describing program spyware pc pitstop settled agreeing use word spyware continues describe harm caused gator/claria software result anti-spyware anti-virus companies also used terms potentially unwanted programs greyware denote products 2010 webcamgate case plaintiffs charged two suburban philadelphia high schools secretly spied students surreptitiously remotely activating webcams embedded school-issued laptops students using home therefore infringed privacy rights school loaded student computer lanrev remote activation tracking software included now-discontinued thefttrack thefttrack enabled default software program allowed school district elect activate choose thefttrack surveillance options school wanted enable thefttrack allowed school district employees secretly remotely activate webcam embedded student laptop laptop screen allowed school officials secretly take photos webcam whatever front line sight send photos school server lanrev software disabled webcams uses e.g students unable use photo booth video chat students mistakenly believed webcams work addition webcam surveillance thefttrack allowed school officials take screenshots send school server addition lanrev allowed school officials take snapshots instant messages web browsing music playlists written compositions schools admitted secretly snapping 66,000 webshots screenshots including webcam shots students bedrooms
node26:Wikipedia entry. Entry name: Security_through_obscurity. Entry content: security obscurity security obscurity security obscurity reliance security engineering design implementation secrecy main method providing security system component security experts rejected view far back 1851 advise obscurity never security mechanism early opponent security obscurity locksmith alfred charles hobbs 1851 demonstrated public state-of-the-art locks could picked response concerns exposing security flaws design locks could make vulnerable criminals said rogues keen profession know already much teach scant formal literature issue security obscurity books security engineering cite kerckhoffs doctrine 1883 cite anything example discussion secrecy openness nuclear command control benefits reducing likelihood accidental war considered outweigh possible benefits secrecy modern reincarnation kerckhoffs doctrine first put forward nineteenth century security system depend key design remaining obscure field legal academia peter swire written trade-off notion security obscurity illusion military notion loose lips sink ships well competition affects incentives disclose principle security obscurity generally accepted cryptographic work days essentially well-informed cryptographers employed national intelligence agencies national security agency cryptographers often work universities researchers publish many even results publicly test others designs private industry results often controlled patents copyrights secrecy argument lost former popularity example pgp whose source code publicly available anyone generally regarded military-grade cryptosystem conflicting stories origin term fans mit incompatible timesharing system say coined opposition multics users hall security far issue within culture term referred self-mockingly poor coverage documentation obscurity many commands attitude time tourist figured make trouble 'd generally got urge make felt part community one instance deliberate security obscurity noted command allow patching running system altmode altmode control-r echoed ^d typing alt alt control-d set flag would prevent patching system even user later got right security obscurity alone discouraged recommended standards bodies national institute standards technology nist united states sometimes recommends practice system security depend secrecy implementation components technique stands contrast security design open security although many real-world projects include elements strategies knowledge system built differs concealment camouflage efficacy obscurity operations security depends whether obscurity lives top good security practices used alone used independent layer obscurity considered valid security tool recent years security obscurity gained support methodology cybersecurity moving target defense cyber deception nist cyber resiliency framework 800-160 volume 2 recommends usage security obscurity complementary part resilient secure computing environment research firm forrester recommends usage environment concealment protect messages advanced persistent threats
node27:Wikipedia entry. Entry name: TENEX_(operating_system). Entry content: tenex operating system tenex operating system developed 1969 bbn pdp-10 later formed basis digital equipment corporation tops-20 operating system 1960s bbn involved number lisp-based artificial intelligence projects darpa many large era memory requirements one solution problem add paging software lisp language allowing write unused portions memory disk later recall needed one system developed pdp-1 mit daniel murphy joined bbn early dec machines based 18-bit word allowing addresses encode 262-kword memory machines based expensive core memory included nowhere near required amount pager used significant bits address index table blocks magnetic drum acted pager backing store software would fetch pages needed re-write address point proper area ram 1964 dec announced pdp-6 dec still heavily involved mit ai lab many feature requests lisp hackers moved machine 36-bit computing especially useful lisp programming 18-bit address space word storage systems contained two addresses perfect match common lisp car cdr operations bbn became interested buying one ai work became available wanted dec add hardware version murphy pager directly system addition every program system would paging support invisibly making much easier sort programming machine dec initially interested soon 1966 announced fact dropping pdp-6 concentrating solely smaller 18-bit new 16-bit lines pdp-6 expensive complex sold well reasons long became clear dec entering 36-bit business would become pdp-10 bbn started talks dec get paging subsystem new machine known cpu name ka-10 dec terribly interested however one development talks support second virtual memory segment allowing part user address space mapped separate potentially read-only region physical memory additionally dec firm keeping cost machine low possible supporting bare-bones systems minimum 16k words core omitting fast semiconductor register option substituting core cost considerable performance decrease bbn nevertheless went ahead purchase several pdp-10s decided build hardware pager period debate began operating system run new machines strong arguments made continued use tops-10 order keep existing software running minimum effort would require re-write tops support paging system seemed like major problem time tops support number features developers wanted end decided make new system include emulation library would allow run existing tops-10 software minor effort developer team—amongst daniel murphy daniel g. bobrow—chose name tenex ten-extended new system included full virtual memory system—that could programs access full 18 bit address space 262144 words virtual memory every program could time pager system would handle mapping would always copying data backing store needed change needed pager able hold several sets mappings ram store one program using system pager also held access time information order tune performance resulting pager fairly complex filling full-height 19 rackmount chassis one notable feature tenex user-oriented command line interpreter unlike typical systems era tenex deliberately used long command names even included non-significant noise words expand commands clarity instance unix uses codice_1 print list files directory whereas tenex used codice_2 codice_3 command word codice_4 noise added make purpose command clearer relieve users need type long commands tenex used command completion system understood unambiguously abbreviated command words expanded partial command words complete words phrases instance user could type codice_5 escape key point tenex would replace codice_5 full command completion feature also worked file names took effort part interpreter system allowed long file names human-readable descriptions tenex also included command recognition help system typing question mark codice_7 printed list possible matching commands return user command line question mark removed command line completion help live current clis like tcsh tenex became fairly popular small pdp-10 market external pager hardware developed small business early 1970 dec started work upgrade pdp-10 processor ki-10 bbn attempted get dec support complex pager indirect page tables instead dec decided much simpler single-level page mapping system compromise impacted system sales point tenex popular customer-written pdp-10 operating systems would run new faster ki-10s correct problem dec pdp-10 sales manager purchased rights tenex bbn set project port new machine around time murphy moved bbn dec well helping porting project work centered emulating bbn pager hardware combination software ki-10 simpler hardware speed ki-10 compared pdp-6 made possible additionally porting effort required number new device drivers support newer backing store devices used new tenex shipping dec started work kl-10 intended low-cost version ki-10 going stanford university ai programmers many mit alumni working project build pdp-10 ten times faster original ka-10 project evolved foonly line computers dec visited many ideas folded kl-10 project year ibm also announced machine virtual memory making standard requirement computer end kl integrated number major changes system end lower cost start new decsystem-20 would run version tenex default operating system functional upgrades kl-10 processor architecture limited significant new feature called extended addressing modified pager microcode running model b hardware revision enlarge user virtual address space effective address calculations instructions located beyond original 18-bit address space performed 30 significant bits although 23-bit virtual address space supported program code located original 18-bit address space unchanged semantics backward compatibility first in-house code name operating system viros virtual memory operating system customers started asking questions name changed snark dec could truthfully deny project called viros name snark became known name briefly reversed become krans quickly abandoned someone objected krans meant funeral wreath swedish though simply means wreath part story may apocryphal ultimately dec picked tops-20 name operating system tops-20 marketed hacker community mindful origins quickly dubbed twenex portmanteau twenty tenex even though point little original tenex code remained analogously differences v7 unix bsd dec people cringed heard twenex term caught nevertheless written abbreviation 20x also used twenex successful popular fact period early 1980s commanded fervent culture partisans unix its—but dec decision scrap internal rivals vax architecture vms os killed dec-20 put end twenex brief period popularity dec attempted convince tops-20 users convert vms instead late 1980s tops-20 users migrated unix loyal group tops-20 enthusiasts kept working various projects preserve extend tops-20 notably mark crispin panda tops-20 distribution
node28:Wikipedia entry. Entry name: IBM_System/38. Entry content: ibm system/38 system/38 minicomputer midrange computer server platform manufactured sold ibm corporation system offered number innovative features brainchild frank soltis glenn henry ibm announced system/38 1978 developed code-name pacific made commercially available august 1979 system/38 oriented toward multi-user system environment typical system handled dozen several dozen terminals midrange predecessors system/38 included system/3 system/32 system/34 system/38 offered capacity previous system/34 system/38 chronologically preceded system/36 successor system/34 system/38 nearly called system/380 as/400 nearly called system/40 system/38 superseded as/400 also supported system/36 data programs fairly large extent exceptions as/400 primarily re-marketing system/38 updates operating system including luxurious non-trivial expansion source object names 8 new 10 characters maximum s/38 programs 'observability intact source code embedded within compiled binary executive expense larger compiled object sizes still run as/400 successor systems restore option incorporates recompile back-version source however proprietary vendor application libraries objects compiled without 'observability required original vendor replacement consequent expense upgrading as/400 pricing time tiered exact software priced based upon model speed capacity system installed upon as/400 evolved iseries turn evolved system although 'evolution include significant enhancements hardware operating system capabilities name change usually considered evolution marketing system/38 legacy lives enterprise-class ibm power systems series superseded system 2008 run ibm well aix linux contrast competing proprietary computing architectures early 1980s wang vs hewlett packard hp 3000 long discontinued without compatible upgrade path ibm 5381 system unit contained processor main memory disk storage diskette magazine drive system console keyboard display 5381 available model 100 model 200 ibm 5382 system unit physically identical 5381 powerful processors memory disk storage 5382 available models 300 400 500 600 700 hindsight system/38 architecture probably demanding hardware era first launched struggled overhead software operating system consumed almost 60 mb disk vast sum time leading wags suggest pre-announce code name series pacific actually acronym meaning performance ai n't critical function complete system included central processing unit 512k 768k 1024k 1280k 1536k bytes main storage included memory management unit supporting demand paging used system software implement single-level store architecture system/38 console included keyboard display screen 16 lines 64 characters inconsistent locally attached 5250 terminals either 12x40 24x80 depending model keyboard used system operator entering control language commands diskette magazine drive standard models operating system system/38 called cpf control program facility cpf related ssp operating system ibm system/34 system/36 cpf objects files programs message queues user profiles libraries system/38 also distinction first commercially available ibm midrange computer database management system dbms integrated operating system operational control language system/38 called cl control language cl programs similar concept shell scripts could compiled executed natively system/38 48-bit addressing unique time novel integrated database system system/38 also security built part architecture object library could access controlled user-by-user basis continued expanded throughout as/400 iseries computer lines system/38 descendants commercial computers ever use machine interface architecture isolate application software operating system hardware dependencies including details address size register size compilers system/38 successors generate code high-level instruction set originally called mi machine interface renamed timi technology independent machine interface as/400 mi/timi virtual instruction set instruction set underlying cpu unlike virtual-machine architectures virtual instructions interpreted runtime see p-code machine mi/timi instructions never interpreted constitute intermediate compile time step translated processor instruction set final compilation step mi/timi instructions stored within final program object addition executable machine instructions program moved processor one native instruction set processor another native instruction set mi/timi instructions re-translated native instruction set new machine program executed first time new machine result possible program originally developed system/38 run current ibm hardware without ever recompiled capability allowed as/400 migrate cisc complex instruction set computer risc reduced instruction set computer 1990s mi/timi instructions existed compiled program relatively simple re-translation created new program native new hardware 1986 system/38 announced support distributed data management architecture ddm middleware context distributed system software layer lies operating system applications distributed data management architecture defines environment sharing data enabled system/38 programs create manage access record-oriented files remote system/36 system/38 ibm mainframe systems running cics also allowed programs remote system/36 system/38 computers create manage access files system/38 languages supported system/38 included rpg iii cobol basic pl/i decades later software originally dismissed critics momentary aberration runs better ever many thousands modern iseries ibm/i systems within commercial government enterprises types sizes ibm sold estimated 20,000 system/38s within first five years availability according articles published industry magazines news 34/38 midrange computing although billed minicomputer s/38 much expensive ibm established best-selling system/34 replacement system/36 equal importance difficulty upgrading say system/34 s/38 although machines similarities twinax peripherals rpg programming languages reality different ibm tacitly acknowledged bringing system/36 – upgraded system/34 – launch s/38 marketplace ibm thus found three overlapping incompatible ranges system/34/36 system/38 mainframe /360 architecture system/38 originally designed replace digital equipment corporation time one ibm main competitors able exploit offering wide range products based single architecture ibm counter 9370 'baby mainframe commercial failure
node29:Wikipedia entry. Entry name: Defragmentation. Entry content: defragmentation maintenance file systems defragmentation process reduces degree fragmentation physically organizing contents mass storage device used store files smallest number contiguous regions fragments also attempts create larger regions free space using compaction impede return fragmentation defragmentation utilities try keep smaller files within single directory together often accessed sequence defragmentation advantageous relevant file systems electromechanical disk drives hard disk drives floppy disk drives optical disk media movement hard drive read/write heads different areas disk accessing fragmented files slower compared accessing entire contents non-fragmented file sequentially without moving read/write heads seek fragments fragmentation occurs file system allocate enough contiguous space store complete file unit instead puts parts gaps existing files usually gaps exist formerly held file file system subsequently deleted file system allocated excess space file first place files often appended log files well frequent adding deleting files emails web browser cache larger files videos greater numbers files contribute fragmentation consequent performance loss defragmentation attempts alleviate problems consider following scenario shown image right otherwise blank disk five files e using 10 blocks space section block allocation unit filesystem block size set disk formatted size supported filesystem blank disk files would allocated one see example 1 image file b deleted would two options mark space file b empty used later move files b empty space end since moving files could time consuming many files needed moved usually empty space simply left marked table available new files see example 2 image new file f allocated requiring 6 blocks space could placed first 6 blocks space formerly held file b 4 blocks following remain available see example 3 image another new file g added needs 4 blocks could occupy space f c example 4 image however file f needs expanded three options since space immediately following longer available additionally concept “ fragmentation ” limited individual files multiple extents disk instance group files normally read particular sequence like files accessed program loading include certain dlls various resource files audio/visual media files game considered fragmented sequential load-order disk even individual files fragmented read/write heads seek non-fragmented files randomly access sequence groups files may originally installed correct sequence drift apart time certain files within group deleted updates common cause order update file updaters usually delete old file first write new updated one place however filesystems write new file physical place disk allows unrelated files fill empty spaces left behind defragment disk defragmentation software also known defragmenter move files around within free space available intensive operation performed filesystem little free space defragmentation system performance degraded best leave computer alone process defragmenter get confused unexpected changes filesystem depending algorithm used may may advantageous perform multiple passes reorganization involved defragmentation change logical location files defined location within directory structure besides defragmenting program files defragmenting tool also reduce time takes load programs open files example windows 9x defragmenter included intel application launch accelerator optimized programs disk placing defragmented program files dependencies next order program loads load programs faster windows good defragmenter read prefetch files identify many file groups possible place files within access sequence beginning hard drive outer tracks higher data transfer rate inner tracks placing frequently accessed files onto outer tracks increases performance third party defragmenters mydefrag move frequently accessed files onto outer tracks defragment files improvements modern hard drives ram cache faster platter rotation speed command queuing scsi/ata tcq sata ncq greater data density reduce negative impact fragmentation system performance degree though increases commonly used data quantities offset benefits however modern systems profit enormously huge disk capacities currently available since partially filled disks fragment much less full disks high-capacity hdd partition occupies smaller range cylinders resulting faster seeks however average access time never lower half rotation platters platter rotation measured rpm speed characteristic hdds experienced slowest growth decades compared data transfer rate seek time minimizing number seeks remains beneficial storage-heavy applications defragmentation ensuring one seek per file counting seeks non-adjacent tracks common strategy optimize defragmentation reduce impact fragmentation partition hard disk way separates partitions file system experience many reads writes volatile zones files created deleted frequently directories contain users profiles modified constantly especially temp directory web browser cache creating thousands files deleted days files user profiles held dedicated partition commonly done unix recommended files systems typically stored /var partition defragmenter runs better since need deal static files directories partitions relatively little write activity defragmentation time greatly improves first defragmentation since defragmenter need defragment small number new files future presence immovable system files especially swap file impede defragmentation files safely moved operating system use example ntfsresize moves files resize ntfs partition tool pagedefrag could defragment windows system files swap file files store windows registry running boot time gui loaded since windows vista feature fully supported updated ntfs files added disk master file table mft must grow store information new files every time mft extended due file way mft gain fragment early versions windows could safely defragmented partition mounted microsoft wrote hardblock defragmenting api however since windows xp increasing number defragmenters able defragment mft windows defragmentation api improved supports move operation even improvements first four clusters mft remain unmovable windows defragmentation api resulting fact defragmenters store mft two fragments first four clusters wherever placed disk formatted rest mft beginning disk wherever defragmenter strategy deems best place reading data conventional electromechanical hard disk drive disk controller must first position head relatively slowly track given fragment resides wait disk platter rotates fragment reaches head solid-state drive ssd based flash memory moving parts random access file fragment flash memory suffer delay making defragmentation optimize access speed unnecessary furthermore since flash memory written limited number times fails defragmentation actually detrimental except mitigation catastrophic failure however windows still defragments ssd automatically albeit less vigorously prevent file system reaching maximum fragmentation tolerance maximum fragmentation limit reached subsequent attempts write disk fail 2010 discovered operation mydefrag utility old backup copies created system restore known checkpoints deleted mydefrag developer jeroen kessels blamed windows api shadow copy shadow copy service system restore uses tracks changes disks remembers according kessels shadow copy sees defragmentation operation data changes opposed blocks moved tries record resulting increased size shadow copy images result windows faces low disk space issue tries resolve deleting old checkpoints microsoft later provided details issue shadow copy provider operates 16-kb block level hence file system allocation units smaller 16 kb shadow copy properly discern defragmentation ordinary i/o operation needs recorded volumes 16 kb larger allocation units unaffected",wikics,nc
